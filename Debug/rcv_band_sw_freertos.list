
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d10  0800f76c  0800f76c  0001f76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801247c  0801247c  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801247c  0801247c  0002247c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012484  08012484  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012484  08012484  00022484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012488  08012488  00022488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0801248c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bc84  200001d8  08012664  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  2001be5c  08012664  0003be5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a3f6  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063a5  00000000  00000000  0005a5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002180  00000000  00000000  000609a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec8  00000000  00000000  00062b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f372  00000000  00000000  000649f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d775  00000000  00000000  00083d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6717  00000000  00000000  000b14d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157bee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009014  00000000  00000000  00157c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f754 	.word	0x0800f754

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800f754 	.word	0x0800f754

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBackgrounds>:
char buff[20];

uint16_t light_color = ST7735_COLOR565(125, 160, 175);
uint16_t dark_color = ST7735_COLOR565(40, 80, 130);

void displayBackgrounds() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16
	/* backgriund */
	ST7735_FillRectangleFast(0, 0, 160, 80, light_color);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <displayBackgrounds+0xbc>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2350      	movs	r3, #80	; 0x50
 8000592:	22a0      	movs	r2, #160	; 0xa0
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 ff9c 	bl	80014d4 <ST7735_FillRectangleFast>
	/* down string */
	ST7735_FillRectangleFast(0, 64, 160, 16, dark_color);
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <displayBackgrounds+0xc0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2310      	movs	r3, #16
 80005a4:	22a0      	movs	r2, #160	; 0xa0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 ff93 	bl	80014d4 <ST7735_FillRectangleFast>
	/* up string */
	ST7735_FillRectangleFast(0, 0, 160, 20, dark_color);
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <displayBackgrounds+0xc0>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2314      	movs	r3, #20
 80005b6:	22a0      	movs	r2, #160	; 0xa0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 ff8a 	bl	80014d4 <ST7735_FillRectangleFast>
	/* labels */
	ST7735_WriteString(1, 6, "BAND",Font_7x10, light_color, dark_color);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <displayBackgrounds+0xbc>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <displayBackgrounds+0xc0>)
 80005c6:	8819      	ldrh	r1, [r3, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <displayBackgrounds+0xc4>)
 80005ca:	9102      	str	r1, [sp, #8]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <displayBackgrounds+0xc8>)
 80005d6:	2106      	movs	r1, #6
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 febe 	bl	800135a <ST7735_WriteString>
	ST7735_WriteString(72, 6,"STEP",Font_7x10, light_color, dark_color);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <displayBackgrounds+0xbc>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <displayBackgrounds+0xc0>)
 80005e4:	8819      	ldrh	r1, [r3, #0]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <displayBackgrounds+0xc4>)
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <displayBackgrounds+0xcc>)
 80005f4:	2106      	movs	r1, #6
 80005f6:	2048      	movs	r0, #72	; 0x48
 80005f8:	f000 feaf 	bl	800135a <ST7735_WriteString>
    ST7735_WriteString(2, 35, "VFO", Font_7x10, dark_color, light_color);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <displayBackgrounds+0xc0>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <displayBackgrounds+0xbc>)
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <displayBackgrounds+0xc4>)
 8000606:	9102      	str	r1, [sp, #8]
 8000608:	9201      	str	r2, [sp, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <displayBackgrounds+0xd0>)
 8000612:	2123      	movs	r1, #35	; 0x23
 8000614:	2002      	movs	r0, #2
 8000616:	f000 fea0 	bl	800135a <ST7735_WriteString>
    ST7735_WriteString(2, 43, " Hz", Font_7x10, dark_color, light_color);
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <displayBackgrounds+0xc0>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <displayBackgrounds+0xbc>)
 8000620:	8819      	ldrh	r1, [r3, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <displayBackgrounds+0xc4>)
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <displayBackgrounds+0xd4>)
 8000630:	212b      	movs	r1, #43	; 0x2b
 8000632:	2002      	movs	r0, #2
 8000634:	f000 fe91 	bl	800135a <ST7735_WriteString>
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002
 8000648:	20000004 	.word	0x20000004
 800064c:	0800f76c 	.word	0x0800f76c
 8000650:	0800f774 	.word	0x0800f774
 8000654:	0800f77c 	.word	0x0800f77c
 8000658:	0800f780 	.word	0x0800f780

0800065c <displayBand>:

void displayBand(int band)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(35, 2, band, Font_11x18, light_color, dark_color);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <displayBand+0x30>)
 8000668:	881a      	ldrh	r2, [r3, #0]
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <displayBand+0x34>)
 800066c:	8819      	ldrh	r1, [r3, #0]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <displayBand+0x38>)
 8000670:	9102      	str	r1, [sp, #8]
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	9200      	str	r2, [sp, #0]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4602      	mov	r2, r0
 800067c:	2102      	movs	r1, #2
 800067e:	2023      	movs	r0, #35	; 0x23
 8000680:	f000 fe6b 	bl	800135a <ST7735_WriteString>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000000 	.word	0x20000000
 8000690:	20000002 	.word	0x20000002
 8000694:	2000000c 	.word	0x2000000c

08000698 <displayStep>:

void displayStep(int step)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(104, 2, step, Font_11x18, light_color, dark_color);
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <displayStep+0x30>)
 80006a4:	881a      	ldrh	r2, [r3, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <displayStep+0x34>)
 80006a8:	8819      	ldrh	r1, [r3, #0]
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <displayStep+0x38>)
 80006ac:	9102      	str	r1, [sp, #8]
 80006ae:	9201      	str	r2, [sp, #4]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	9200      	str	r2, [sp, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4602      	mov	r2, r0
 80006b8:	2102      	movs	r1, #2
 80006ba:	2068      	movs	r0, #104	; 0x68
 80006bc:	f000 fe4d 	bl	800135a <ST7735_WriteString>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000002 	.word	0x20000002
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <displayFrequency>:

void displayFrequency(uint32_t freq) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	6078      	str	r0, [r7, #4]
	uint16_t th, dig, mi;
	th = freq%1000;
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <displayFrequency+0xa4>)
 80006e0:	fba3 1302 	umull	r1, r3, r3, r2
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ea:	fb01 f303 	mul.w	r3, r1, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	81fb      	strh	r3, [r7, #14]
	dig = (freq / 1000)%1000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <displayFrequency+0xa4>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099a      	lsrs	r2, r3, #6
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <displayFrequency+0xa4>)
 80006fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000702:	099b      	lsrs	r3, r3, #6
 8000704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	81bb      	strh	r3, [r7, #12]
	mi = (freq / 1000000);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <displayFrequency+0xa8>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	0c9b      	lsrs	r3, r3, #18
 800071a:	817b      	strh	r3, [r7, #10]
	sprintf(buff, "%02d.%03d",mi, dig);
 800071c:	897a      	ldrh	r2, [r7, #10]
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <displayFrequency+0xac>)
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <displayFrequency+0xb0>)
 8000724:	f00e fca8 	bl	800f078 <siprintf>
	ST7735_WriteString(26, 32, buff, Font_16x26, dark_color, light_color);
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <displayFrequency+0xb4>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <displayFrequency+0xb8>)
 800072e:	8819      	ldrh	r1, [r3, #0]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <displayFrequency+0xbc>)
 8000732:	9102      	str	r1, [sp, #8]
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <displayFrequency+0xb0>)
 800073e:	2120      	movs	r1, #32
 8000740:	201a      	movs	r0, #26
 8000742:	f000 fe0a 	bl	800135a <ST7735_WriteString>
	sprintf(buff, "%03d",th);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	461a      	mov	r2, r3
 800074a:	4912      	ldr	r1, [pc, #72]	; (8000794 <displayFrequency+0xc0>)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <displayFrequency+0xb0>)
 800074e:	f00e fc93 	bl	800f078 <siprintf>
	ST7735_WriteString(125, 32, buff, Font_11x18, dark_color, light_color);
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <displayFrequency+0xb4>)
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <displayFrequency+0xb8>)
 8000758:	8819      	ldrh	r1, [r3, #0]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <displayFrequency+0xc4>)
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <displayFrequency+0xb0>)
 8000768:	2120      	movs	r1, #32
 800076a:	207d      	movs	r0, #125	; 0x7d
 800076c:	f000 fdf5 	bl	800135a <ST7735_WriteString>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	10624dd3 	.word	0x10624dd3
 800077c:	431bde83 	.word	0x431bde83
 8000780:	0800f784 	.word	0x0800f784
 8000784:	200001f4 	.word	0x200001f4
 8000788:	20000002 	.word	0x20000002
 800078c:	20000000 	.word	0x20000000
 8000790:	20000014 	.word	0x20000014
 8000794:	0800f790 	.word	0x0800f790
 8000798:	2000000c 	.word	0x2000000c

0800079c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <getRunTimeCounterValue+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000268 	.word	0x20000268

080007c4 <vApplicationIdleHook>:
extern uint16_t current_step;
extern int current_band;
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	//vTaskList(taskListStatus);
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <MX_FREERTOS_Init+0x38>)
 80007da:	2100      	movs	r1, #0
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_FREERTOS_Init+0x3c>)
 80007de:	f00b f85f 	bl	800b8a0 <osThreadNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <MX_FREERTOS_Init+0x40>)
 80007e6:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <MX_FREERTOS_Init+0x44>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <MX_FREERTOS_Init+0x48>)
 80007ee:	f00b f857 	bl	800b8a0 <osThreadNew>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <MX_FREERTOS_Init+0x4c>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* creation of beaconTask */
  beaconTaskHandle = osThreadNew(StartBeaconTask, NULL, &beaconTask_attributes);
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <MX_FREERTOS_Init+0x50>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	480a      	ldr	r0, [pc, #40]	; (8000828 <MX_FREERTOS_Init+0x54>)
 80007fe:	f00b f84f 	bl	800b8a0 <osThreadNew>
 8000802:	4603      	mov	r3, r0
 8000804:	4a09      	ldr	r2, [pc, #36]	; (800082c <MX_FREERTOS_Init+0x58>)
 8000806:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	080122ec 	.word	0x080122ec
 8000810:	08000831 	.word	0x08000831
 8000814:	20000208 	.word	0x20000208
 8000818:	08012310 	.word	0x08012310
 800081c:	08000889 	.word	0x08000889
 8000820:	2000020c 	.word	0x2000020c
 8000824:	08012334 	.word	0x08012334
 8000828:	080009e1 	.word	0x080009e1
 800082c:	20000210 	.word	0x20000210

08000830 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000838:	f00d fd88 	bl	800e34c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	current_freq = band[current_band].minFreq;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <StartDefaultTask+0x44>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	490d      	ldr	r1, [pc, #52]	; (8000878 <StartDefaultTask+0x48>)
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	440b      	add	r3, r1
 800084c:	3304      	adds	r3, #4
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <StartDefaultTask+0x4c>)
 8000854:	601a      	str	r2, [r3, #0]
	current_step = step[current_step].step;
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <StartDefaultTask+0x50>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <StartDefaultTask+0x54>)
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	4413      	add	r3, r2
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	b29a      	uxth	r2, r3
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <StartDefaultTask+0x50>)
 8000866:	801a      	strh	r2, [r3, #0]
	for (;;) {

		osDelay(1000);
 8000868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086c:	f00b f8aa 	bl	800b9c4 <osDelay>
 8000870:	e7fa      	b.n	8000868 <StartDefaultTask+0x38>
 8000872:	bf00      	nop
 8000874:	20000070 	.word	0x20000070
 8000878:	20000054 	.word	0x20000054
 800087c:	2000026c 	.word	0x2000026c
 8000880:	2000006c 	.word	0x2000006c
 8000884:	2000001c 	.word	0x2000001c

08000888 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
	uint8_t buttonNumber = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	76fb      	strb	r3, [r7, #27]
	/*  */
	uint32_t max_freq = band[current_band].maxFreq;
 8000898:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <StartEncoderTask+0x13c>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	494a      	ldr	r1, [pc, #296]	; (80009c8 <StartEncoderTask+0x140>)
 800089e:	4613      	mov	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	440b      	add	r3, r1
 80008a8:	3308      	adds	r3, #8
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	617b      	str	r3, [r7, #20]
	uint32_t min_freq = band[current_band].minFreq;
 80008ae:	4b45      	ldr	r3, [pc, #276]	; (80009c4 <StartEncoderTask+0x13c>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4945      	ldr	r1, [pc, #276]	; (80009c8 <StartEncoderTask+0x140>)
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	3304      	adds	r3, #4
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	613b      	str	r3, [r7, #16]
	current_freq = min_freq;
 80008c4:	4a41      	ldr	r2, [pc, #260]	; (80009cc <StartEncoderTask+0x144>)
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	6013      	str	r3, [r2, #0]
	/* */
	ST7735_FillScreenFast(ST7735_BLACK);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 fe97 	bl	80015fe <ST7735_FillScreenFast>
	displayBackgrounds();
 80008d0:	f7ff fe58 	bl	8000584 <displayBackgrounds>
	displayBand(band[current_band].name);
 80008d4:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <StartEncoderTask+0x13c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	493b      	ldr	r1, [pc, #236]	; (80009c8 <StartEncoderTask+0x140>)
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff feb8 	bl	800065c <displayBand>
	displayStep(step[current_step].name);
 80008ec:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <StartEncoderTask+0x148>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <StartEncoderTask+0x14c>)
 80008f4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fecd 	bl	8000698 <displayStep>
	displayFrequency(current_freq);
 80008fe:	4b33      	ldr	r3, [pc, #204]	; (80009cc <StartEncoderTask+0x144>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fee6 	bl	80006d4 <displayFrequency>
	/* */
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8000908:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <StartEncoderTask+0x150>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	60fb      	str	r3, [r7, #12]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3b01      	subs	r3, #1
 8000914:	b29b      	uxth	r3, r3
 8000916:	0fda      	lsrs	r2, r3, #31
 8000918:	4413      	add	r3, r2
 800091a:	105b      	asrs	r3, r3, #1
 800091c:	425b      	negs	r3, r3
 800091e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000922:	337f      	adds	r3, #127	; 0x7f
 8000924:	60fb      	str	r3, [r7, #12]
		if (currCounter != prevCounter) {
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	429a      	cmp	r2, r3
 800092c:	d03b      	beq.n	80009a6 <StartEncoderTask+0x11e>
			if (currCounter > prevCounter) {
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	429a      	cmp	r2, r3
 8000934:	dd18      	ble.n	8000968 <StartEncoderTask+0xe0>
				if (current_freq != min_freq) {
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <StartEncoderTask+0x144>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d007      	beq.n	8000950 <StartEncoderTask+0xc8>
					current_freq -= current_step;
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <StartEncoderTask+0x144>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a22      	ldr	r2, [pc, #136]	; (80009d0 <StartEncoderTask+0x148>)
 8000946:	8812      	ldrh	r2, [r2, #0]
 8000948:	1a9b      	subs	r3, r3, r2
 800094a:	4a20      	ldr	r2, [pc, #128]	; (80009cc <StartEncoderTask+0x144>)
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e002      	b.n	8000956 <StartEncoderTask+0xce>
				} else {
					current_freq = max_freq;
 8000950:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <StartEncoderTask+0x144>)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	6013      	str	r3, [r2, #0]
				}
				displayFrequency(current_freq);
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <StartEncoderTask+0x144>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff feba 	bl	80006d4 <displayFrequency>
				osDelay(5);
 8000960:	2005      	movs	r0, #5
 8000962:	f00b f82f 	bl	800b9c4 <osDelay>
 8000966:	e01c      	b.n	80009a2 <StartEncoderTask+0x11a>
			} else if (currCounter < prevCounter) {
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	429a      	cmp	r2, r3
 800096e:	da18      	bge.n	80009a2 <StartEncoderTask+0x11a>
				if (current_freq != max_freq) {
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <StartEncoderTask+0x144>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	429a      	cmp	r2, r3
 8000978:	d008      	beq.n	800098c <StartEncoderTask+0x104>
					current_freq += current_step;
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <StartEncoderTask+0x148>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <StartEncoderTask+0x144>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4413      	add	r3, r2
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <StartEncoderTask+0x144>)
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	e002      	b.n	8000992 <StartEncoderTask+0x10a>
				} else {
					current_freq = min_freq;
 800098c:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <StartEncoderTask+0x144>)
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	6013      	str	r3, [r2, #0]
				}
				displayFrequency(current_freq);
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <StartEncoderTask+0x144>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fe9c 	bl	80006d4 <displayFrequency>
				osDelay(5);
 800099c:	2005      	movs	r0, #5
 800099e:	f00b f811 	bl	800b9c4 <osDelay>
			} else {

			}
			prevCounter = currCounter;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if (buttonPressed[buttonNumber]) {
 80009a6:	7efb      	ldrb	r3, [r7, #27]
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <StartEncoderTask+0x154>)
 80009aa:	5cd3      	ldrb	r3, [r2, r3]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <StartEncoderTask+0x132>
			buttonPressed[buttonNumber] = 0;
 80009b2:	7efb      	ldrb	r3, [r7, #27]
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <StartEncoderTask+0x154>)
 80009b6:	2100      	movs	r1, #0
 80009b8:	54d1      	strb	r1, [r2, r3]
			//osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
		}
		osDelay(5);
 80009ba:	2005      	movs	r0, #5
 80009bc:	f00b f802 	bl	800b9c4 <osDelay>
	for (;;) {
 80009c0:	e7a2      	b.n	8000908 <StartEncoderTask+0x80>
 80009c2:	bf00      	nop
 80009c4:	20000070 	.word	0x20000070
 80009c8:	20000054 	.word	0x20000054
 80009cc:	2000026c 	.word	0x2000026c
 80009d0:	2000006c 	.word	0x2000006c
 80009d4:	2000001c 	.word	0x2000001c
 80009d8:	20000388 	.word	0x20000388
 80009dc:	20000330 	.word	0x20000330

080009e0 <StartBeaconTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBeaconTask */
void StartBeaconTask(void *argument)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBeaconTask */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80009e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <StartBeaconTask+0x1c>)
 80009ee:	f001 fd81 	bl	80024f4 <HAL_GPIO_TogglePin>
		osDelay(1000);
 80009f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f6:	f00a ffe5 	bl	800b9c4 <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80009fa:	e7f5      	b.n	80009e8 <StartBeaconTask+0x8>
 80009fc:	40020800 	.word	0x40020800

08000a00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a44      	ldr	r2, [pc, #272]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a3d      	ldr	r2, [pc, #244]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a36      	ldr	r2, [pc, #216]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a2f      	ldr	r2, [pc, #188]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_GPIO_Init+0x130>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8c:	4829      	ldr	r0, [pc, #164]	; (8000b34 <MX_GPIO_Init+0x134>)
 8000a8e:	f001 fcff 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2102      	movs	r1, #2
 8000a96:	4828      	ldr	r0, [pc, #160]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000a98:	f001 fcfa 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	211c      	movs	r1, #28
 8000aa0:	4825      	ldr	r0, [pc, #148]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000aa2:	f001 fcf5 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	481d      	ldr	r0, [pc, #116]	; (8000b34 <MX_GPIO_Init+0x134>)
 8000ac0:	f001 fa4c 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4817      	ldr	r0, [pc, #92]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000ada:	f001 fa3f 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLK_Pin;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4810      	ldr	r0, [pc, #64]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000af6:	f001 fa31 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000afa:	231c      	movs	r3, #28
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000b12:	f001 fa23 	bl	8001f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2105      	movs	r1, #5
 8000b1a:	2006      	movs	r0, #6
 8000b1c:	f001 f9da 	bl	8001ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b20:	2006      	movs	r0, #6
 8000b22:	f001 fa03 	bl	8001f2c <HAL_NVIC_EnableIRQ>

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020000 	.word	0x40020000

08000b3c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2C3_Init+0x50>)
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_I2C3_Init+0x54>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_I2C3_Init+0x50>)
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_I2C3_Init+0x58>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_I2C3_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_I2C3_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_I2C3_Init+0x50>)
 8000b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_I2C3_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_I2C3_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_I2C3_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_I2C3_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_I2C3_Init+0x50>)
 8000b7a:	f001 fcfb 	bl	8002574 <HAL_I2C_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b84:	f000 f95e 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000214 	.word	0x20000214
 8000b90:	40005c00 	.word	0x40005c00
 8000b94:	000186a0 	.word	0x000186a0

08000b98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a28      	ldr	r2, [pc, #160]	; (8000c58 <HAL_I2C_MspInit+0xc0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d14a      	bne.n	8000c50 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <HAL_I2C_MspInit+0xc4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <HAL_I2C_MspInit+0xc4>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <HAL_I2C_MspInit+0xc4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <HAL_I2C_MspInit+0xc4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <HAL_I2C_MspInit+0xc4>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <HAL_I2C_MspInit+0xc4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf8:	2312      	movs	r3, #18
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c04:	2304      	movs	r3, #4
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4814      	ldr	r0, [pc, #80]	; (8000c60 <HAL_I2C_MspInit+0xc8>)
 8000c10:	f001 f9a4 	bl	8001f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c14:	2310      	movs	r3, #16
 8000c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c18:	2312      	movs	r3, #18
 8000c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000c24:	2309      	movs	r3, #9
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <HAL_I2C_MspInit+0xcc>)
 8000c30:	f001 f994 	bl	8001f5c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0xc4>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_I2C_MspInit+0xc4>)
 8000c3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c42:	6413      	str	r3, [r2, #64]	; 0x40
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_I2C_MspInit+0xc4>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40005c00 	.word	0x40005c00
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40020400 	.word	0x40020400

08000c68 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000c6e:	f000 fae3 	bl	8001238 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 fcb2 	bl	80015dc <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <Display_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	9202      	str	r2, [sp, #8]
 8000c7e:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8000c82:	9201      	str	r2, [sp, #4]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	9200      	str	r2, [sp, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <Display_Init+0x5c>)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f000 fb63 	bl	800135a <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <Display_Init+0x60>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	9202      	str	r2, [sp, #8]
 8000c9a:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8000c9e:	9201      	str	r2, [sp, #4]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <Display_Init+0x64>)
 8000ca8:	2119      	movs	r1, #25
 8000caa:	2022      	movs	r0, #34	; 0x22
 8000cac:	f000 fb55 	bl	800135a <ST7735_WriteString>
    HAL_Delay(2000);
 8000cb0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cb4:	f001 f81c 	bl	8001cf0 <HAL_Delay>
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000014 	.word	0x20000014
 8000cc4:	0800f7f8 	.word	0x0800f7f8
 8000cc8:	2000000c 	.word	0x2000000c
 8000ccc:	0800f804 	.word	0x0800f804

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd4:	f000 ffca 	bl	8001c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd8:	f000 f838 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cdc:	f7ff fe90 	bl	8000a00 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ce0:	f000 f946 	bl	8000f70 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000ce4:	f000 fe42 	bl	800196c <MX_TIM3_Init>
  MX_RTC_Init();
 8000ce8:	f000 f8bc 	bl	8000e64 <MX_RTC_Init>
  MX_TIM4_Init();
 8000cec:	f000 fe92 	bl	8001a14 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000cf0:	f000 fdec 	bl	80018cc <MX_TIM1_Init>
  MX_I2C3_Init();
 8000cf4:	f7ff ff22 	bl	8000b3c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000cf8:	f00d fb28 	bl	800e34c <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000cfc:	213c      	movs	r1, #60	; 0x3c
 8000cfe:	480f      	ldr	r0, [pc, #60]	; (8000d3c <main+0x6c>)
 8000d00:	f005 ff64 	bl	8006bcc <HAL_TIM_Encoder_Start>
  //HAL_TIM_Base_Init(&htim1);
  HAL_TIM_Base_Start_IT(&htim1);
 8000d04:	480e      	ldr	r0, [pc, #56]	; (8000d40 <main+0x70>)
 8000d06:	f005 fd35 	bl	8006774 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <main+0x74>)
 8000d10:	f001 fbf0 	bl	80024f4 <HAL_GPIO_TogglePin>
  //HAL_TIM_Base_Start(&htim11);
  Display_Init();
 8000d14:	f7ff ffa8 	bl	8000c68 <Display_Init>
  si5351_Init(0);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f008 fafb 	bl	8009314 <si5351_Init>
  si5351_SetupCLK0(7000000, SI5351_DRIVE_STRENGTH_4MA);
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <main+0x78>)
 8000d22:	f008 fcdd 	bl	80096e0 <si5351_SetupCLK0>
  si5351_EnableOutputs(1 << 0);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f008 fcfb 	bl	8009722 <si5351_EnableOutputs>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000d2c:	f00a fd6e 	bl	800b80c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000d30:	f7ff fd50 	bl	80007d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d34:	f00a fd8e 	bl	800b854 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <main+0x68>
 8000d3a:	bf00      	nop
 8000d3c:	20000388 	.word	0x20000388
 8000d40:	20000340 	.word	0x20000340
 8000d44:	40020800 	.word	0x40020800
 8000d48:	006acfc0 	.word	0x006acfc0

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b094      	sub	sp, #80	; 0x50
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	2230      	movs	r2, #48	; 0x30
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f00e f82a 	bl	800edb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <SystemClock_Config+0xcc>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <SystemClock_Config+0xcc>)
 8000d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <SystemClock_Config+0xcc>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <SystemClock_Config+0xd0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <SystemClock_Config+0xd0>)
 8000d96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <SystemClock_Config+0xd0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000da8:	2305      	movs	r3, #5
 8000daa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db6:	2302      	movs	r3, #2
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dc0:	2319      	movs	r3, #25
 8000dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fc73 	bl	80046c0 <HAL_RCC_OscConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000de0:	f000 f830 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de4:	230f      	movs	r3, #15
 8000de6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2103      	movs	r1, #3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 ff85 	bl	8004d10 <HAL_RCC_ClockConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e0c:	f000 f81a 	bl	8000e44 <Error_Handler>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3750      	adds	r7, #80	; 0x50
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40007000 	.word	0x40007000

08000e20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e32:	f000 ff3d 	bl	8001cb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40014800 	.word	0x40014800

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>

08000e4e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e78:	2300      	movs	r3, #0
 8000e7a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <MX_RTC_Init+0xac>)
 8000e7e:	4a25      	ldr	r2, [pc, #148]	; (8000f14 <MX_RTC_Init+0xb0>)
 8000e80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <MX_RTC_Init+0xac>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_RTC_Init+0xac>)
 8000e8a:	227f      	movs	r2, #127	; 0x7f
 8000e8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <MX_RTC_Init+0xac>)
 8000e90:	22ff      	movs	r2, #255	; 0xff
 8000e92:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_RTC_Init+0xac>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_RTC_Init+0xac>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_RTC_Init+0xac>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ea6:	481a      	ldr	r0, [pc, #104]	; (8000f10 <MX_RTC_Init+0xac>)
 8000ea8:	f004 fc02 	bl	80056b0 <HAL_RTC_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000eb2:	f7ff ffc7 	bl	8000e44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480f      	ldr	r0, [pc, #60]	; (8000f10 <MX_RTC_Init+0xac>)
 8000ed2:	f004 fcc5 	bl	8005860 <HAL_RTC_SetTime>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000edc:	f7ff ffb2 	bl	8000e44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000ee4:	2305      	movs	r3, #5
 8000ee6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000eec:	2316      	movs	r3, #22
 8000eee:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_RTC_Init+0xac>)
 8000ef8:	f004 fdfa 	bl	8005af0 <HAL_RTC_SetDate>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f02:	f7ff ff9f 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000270 	.word	0x20000270
 8000f14:	40002800 	.word	0x40002800

08000f18 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_RTC_MspInit+0x50>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d111      	bne.n	8000f60 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f44:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f004 f99a 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f56:	f7ff ff75 	bl	8000e44 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_RTC_MspInit+0x54>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40002800 	.word	0x40002800
 8000f6c:	42470e3c 	.word	0x42470e3c

08000f70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <MX_SPI1_Init+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000f7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000fbc:	220a      	movs	r2, #10
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_SPI1_Init+0x64>)
 8000fc2:	f004 ff5f 	bl	8005e84 <HAL_SPI_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fcc:	f7ff ff3a 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000290 	.word	0x20000290
 8000fd8:	40013000 	.word	0x40013000

08000fdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_SPI_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12b      	bne.n	8001056 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001008:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_SPI_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001036:	23a0      	movs	r3, #160	; 0xa0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001046:	2305      	movs	r3, #5
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_SPI_MspInit+0x8c>)
 8001052:	f000 ff83 	bl	8001f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40013000 	.word	0x40013000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2110      	movs	r1, #16
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <ST7735_Select+0x14>)
 8001076:	f001 fa0b 	bl	8002490 <HAL_GPIO_WritePin>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40020000 	.word	0x40020000

08001084 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2110      	movs	r1, #16
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <ST7735_Unselect+0x14>)
 800108e:	f001 f9ff 	bl	8002490 <HAL_GPIO_WritePin>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020000 	.word	0x40020000

0800109c <ST7735_Reset>:

static void ST7735_Reset() {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2108      	movs	r1, #8
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <ST7735_Reset+0x24>)
 80010a6:	f001 f9f3 	bl	8002490 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80010aa:	2005      	movs	r0, #5
 80010ac:	f000 fe20 	bl	8001cf0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2108      	movs	r1, #8
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <ST7735_Reset+0x24>)
 80010b6:	f001 f9eb 	bl	8002490 <HAL_GPIO_WritePin>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020000 	.word	0x40020000

080010c4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2104      	movs	r1, #4
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <ST7735_WriteCommand+0x2c>)
 80010d4:	f001 f9dc 	bl	8002490 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80010d8:	1df9      	adds	r1, r7, #7
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	2201      	movs	r2, #1
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <ST7735_WriteCommand+0x30>)
 80010e2:	f005 f86b 	bl	80061bc <HAL_SPI_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020000 	.word	0x40020000
 80010f4:	20000290 	.word	0x20000290

080010f8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2104      	movs	r1, #4
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <ST7735_WriteData+0x2c>)
 8001108:	f001 f9c2 	bl	8002490 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b29a      	uxth	r2, r3
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4804      	ldr	r0, [pc, #16]	; (8001128 <ST7735_WriteData+0x30>)
 8001118:	f005 f850 	bl	80061bc <HAL_SPI_Transmit>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020000 	.word	0x40020000
 8001128:	20000290 	.word	0x20000290

0800112c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800113e:	e034      	b.n	80011aa <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ffb9 	bl	80010c4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800115c:	7abb      	ldrb	r3, [r7, #10]
 800115e:	b29b      	uxth	r3, r3
 8001160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001164:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001166:	7abb      	ldrb	r3, [r7, #10]
 8001168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800116c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800116e:	7abb      	ldrb	r3, [r7, #10]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001174:	7abb      	ldrb	r3, [r7, #10]
 8001176:	4619      	mov	r1, r3
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ffbd 	bl	80010f8 <ST7735_WriteData>
            addr += numArgs;
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00e      	beq.n	80011aa <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001196:	89bb      	ldrh	r3, [r7, #12]
 8001198:	2bff      	cmp	r3, #255	; 0xff
 800119a:	d102      	bne.n	80011a2 <ST7735_ExecuteCommandList+0x76>
 800119c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011a0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80011a2:	89bb      	ldrh	r3, [r7, #12]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fda3 	bl	8001cf0 <HAL_Delay>
    while(numCommands--) {
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	73fa      	strb	r2, [r7, #15]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1c5      	bne.n	8001140 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80011be:	b590      	push	{r4, r7, lr}
 80011c0:	b085      	sub	sp, #20
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4604      	mov	r4, r0
 80011c6:	4608      	mov	r0, r1
 80011c8:	4611      	mov	r1, r2
 80011ca:	461a      	mov	r2, r3
 80011cc:	4623      	mov	r3, r4
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4603      	mov	r3, r0
 80011d2:	71bb      	strb	r3, [r7, #6]
 80011d4:	460b      	mov	r3, r1
 80011d6:	717b      	strb	r3, [r7, #5]
 80011d8:	4613      	mov	r3, r2
 80011da:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80011dc:	202a      	movs	r0, #42	; 0x2a
 80011de:	f7ff ff71 	bl	80010c4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80011e2:	2300      	movs	r3, #0
 80011e4:	733b      	strb	r3, [r7, #12]
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	737b      	strb	r3, [r7, #13]
 80011ee:	2300      	movs	r3, #0
 80011f0:	73bb      	strb	r3, [r7, #14]
 80011f2:	797b      	ldrb	r3, [r7, #5]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2104      	movs	r1, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff79 	bl	80010f8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001206:	202b      	movs	r0, #43	; 0x2b
 8001208:	f7ff ff5c 	bl	80010c4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	331a      	adds	r3, #26
 8001210:	b2db      	uxtb	r3, r3
 8001212:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001214:	793b      	ldrb	r3, [r7, #4]
 8001216:	331a      	adds	r3, #26
 8001218:	b2db      	uxtb	r3, r3
 800121a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff68 	bl	80010f8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001228:	202c      	movs	r0, #44	; 0x2c
 800122a:	f7ff ff4b 	bl	80010c4 <ST7735_WriteCommand>
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}
	...

08001238 <ST7735_Init>:

void ST7735_Init() {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    ST7735_Select();
 800123c:	f7ff ff16 	bl	800106c <ST7735_Select>
    ST7735_Reset();
 8001240:	f7ff ff2c 	bl	800109c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <ST7735_Init+0x28>)
 8001246:	f7ff ff71 	bl	800112c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <ST7735_Init+0x2c>)
 800124c:	f7ff ff6e 	bl	800112c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <ST7735_Init+0x30>)
 8001252:	f7ff ff6b 	bl	800112c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001256:	f7ff ff15 	bl	8001084 <ST7735_Unselect>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	08012358 	.word	0x08012358
 8001264:	08012394 	.word	0x08012394
 8001268:	080123a4 	.word	0x080123a4

0800126c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800126c:	b082      	sub	sp, #8
 800126e:	b590      	push	{r4, r7, lr}
 8001270:	b089      	sub	sp, #36	; 0x24
 8001272:	af00      	add	r7, sp, #0
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
 800127a:	460b      	mov	r3, r1
 800127c:	80bb      	strh	r3, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	b2d8      	uxtb	r0, r3
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	b2d9      	uxtb	r1, r3
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001292:	4413      	add	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	b2dc      	uxtb	r4, r3
 800129a:	88bb      	ldrh	r3, [r7, #4]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012a2:	4413      	add	r3, r2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4622      	mov	r2, r4
 80012ac:	f7ff ff87 	bl	80011be <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	e043      	b.n	800133e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80012b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	3b20      	subs	r3, #32
 80012bc:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80012c0:	fb01 f303 	mul.w	r3, r1, r3
 80012c4:	4619      	mov	r1, r3
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	440b      	add	r3, r1
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	e029      	b.n	800132c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00e      	beq.n	8001306 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80012e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	743b      	strb	r3, [r7, #16]
 80012f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	2102      	movs	r1, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fefa 	bl	80010f8 <ST7735_WriteData>
 8001304:	e00f      	b.n	8001326 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001306:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	733b      	strb	r3, [r7, #12]
 8001312:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001316:	b2db      	uxtb	r3, r3
 8001318:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2102      	movs	r1, #2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fee9 	bl	80010f8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	3301      	adds	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001330:	461a      	mov	r2, r3
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4293      	cmp	r3, r2
 8001336:	d3cf      	bcc.n	80012d8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	3301      	adds	r3, #1
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001342:	461a      	mov	r2, r3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	4293      	cmp	r3, r2
 8001348:	d3b5      	bcc.n	80012b6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3724      	adds	r7, #36	; 0x24
 8001350:	46bd      	mov	sp, r7
 8001352:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001356:	b002      	add	sp, #8
 8001358:	4770      	bx	lr

0800135a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800135a:	b082      	sub	sp, #8
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af04      	add	r7, sp, #16
 8001362:	603a      	str	r2, [r7, #0]
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
 800136a:	460b      	mov	r3, r1
 800136c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800136e:	f7ff fe7d 	bl	800106c <ST7735_Select>

    while(*str) {
 8001372:	e02d      	b.n	80013d0 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	7d3a      	ldrb	r2, [r7, #20]
 8001378:	4413      	add	r3, r2
 800137a:	2b9f      	cmp	r3, #159	; 0x9f
 800137c:	dd13      	ble.n	80013a6 <ST7735_WriteString+0x4c>
            x = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001382:	7d7b      	ldrb	r3, [r7, #21]
 8001384:	b29a      	uxth	r2, r3
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	7d7a      	ldrb	r2, [r7, #21]
 8001390:	4413      	add	r3, r2
 8001392:	2b4f      	cmp	r3, #79	; 0x4f
 8001394:	dc21      	bgt.n	80013da <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b20      	cmp	r3, #32
 800139c:	d103      	bne.n	80013a6 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	603b      	str	r3, [r7, #0]
                continue;
 80013a4:	e014      	b.n	80013d0 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	88b9      	ldrh	r1, [r7, #4]
 80013ac:	88f8      	ldrh	r0, [r7, #6]
 80013ae:	8c3b      	ldrh	r3, [r7, #32]
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	8bbb      	ldrh	r3, [r7, #28]
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f7ff ff56 	bl	800126c <ST7735_WriteChar>
        x += font.width;
 80013c0:	7d3b      	ldrb	r3, [r7, #20]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	4413      	add	r3, r2
 80013c8:	80fb      	strh	r3, [r7, #6]
        str++;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	603b      	str	r3, [r7, #0]
    while(*str) {
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1cd      	bne.n	8001374 <ST7735_WriteString+0x1a>
 80013d8:	e000      	b.n	80013dc <ST7735_WriteString+0x82>
                break;
 80013da:	bf00      	nop
    }

    ST7735_Unselect();
 80013dc:	f7ff fe52 	bl	8001084 <ST7735_Unselect>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013ea:	b002      	add	sp, #8
 80013ec:	4770      	bx	lr
	...

080013f0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4604      	mov	r4, r0
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4623      	mov	r3, r4
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	4603      	mov	r3, r0
 8001404:	80bb      	strh	r3, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]
 800140a:	4613      	mov	r3, r2
 800140c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	2b9f      	cmp	r3, #159	; 0x9f
 8001412:	d857      	bhi.n	80014c4 <ST7735_FillRectangle+0xd4>
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	2b4f      	cmp	r3, #79	; 0x4f
 8001418:	d854      	bhi.n	80014c4 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	4413      	add	r3, r2
 8001420:	2ba0      	cmp	r3, #160	; 0xa0
 8001422:	dd03      	ble.n	800142c <ST7735_FillRectangle+0x3c>
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800142a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800142c:	88ba      	ldrh	r2, [r7, #4]
 800142e:	883b      	ldrh	r3, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	2b50      	cmp	r3, #80	; 0x50
 8001434:	dd03      	ble.n	800143e <ST7735_FillRectangle+0x4e>
 8001436:	88bb      	ldrh	r3, [r7, #4]
 8001438:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800143c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800143e:	f7ff fe15 	bl	800106c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	b2d8      	uxtb	r0, r3
 8001446:	88bb      	ldrh	r3, [r7, #4]
 8001448:	b2d9      	uxtb	r1, r3
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4413      	add	r3, r2
 8001454:	b2db      	uxtb	r3, r3
 8001456:	3b01      	subs	r3, #1
 8001458:	b2dc      	uxtb	r4, r3
 800145a:	88bb      	ldrh	r3, [r7, #4]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4413      	add	r3, r2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	3b01      	subs	r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4622      	mov	r2, r4
 800146c:	f7ff fea7 	bl	80011be <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001470:	8c3b      	ldrh	r3, [r7, #32]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	733b      	strb	r3, [r7, #12]
 800147a:	8c3b      	ldrh	r3, [r7, #32]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2104      	movs	r1, #4
 8001484:	4811      	ldr	r0, [pc, #68]	; (80014cc <ST7735_FillRectangle+0xdc>)
 8001486:	f001 f803 	bl	8002490 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800148a:	883b      	ldrh	r3, [r7, #0]
 800148c:	80bb      	strh	r3, [r7, #4]
 800148e:	e013      	b.n	80014b8 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	80fb      	strh	r3, [r7, #6]
 8001494:	e00a      	b.n	80014ac <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001496:	f107 010c 	add.w	r1, r7, #12
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	2202      	movs	r2, #2
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <ST7735_FillRectangle+0xe0>)
 80014a2:	f004 fe8b 	bl	80061bc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	80fb      	strh	r3, [r7, #6]
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f1      	bne.n	8001496 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	80bb      	strh	r3, [r7, #4]
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1e8      	bne.n	8001490 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 80014be:	f7ff fde1 	bl	8001084 <ST7735_Unselect>
 80014c2:	e000      	b.n	80014c6 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80014c4:	bf00      	nop
}
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	40020000 	.word	0x40020000
 80014d0:	20000290 	.word	0x20000290

080014d4 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	4611      	mov	r1, r2
 80014e0:	461a      	mov	r2, r3
 80014e2:	4623      	mov	r3, r4
 80014e4:	80fb      	strh	r3, [r7, #6]
 80014e6:	4603      	mov	r3, r0
 80014e8:	80bb      	strh	r3, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	807b      	strh	r3, [r7, #2]
 80014ee:	4613      	mov	r3, r2
 80014f0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	2b9f      	cmp	r3, #159	; 0x9f
 80014f6:	d869      	bhi.n	80015cc <ST7735_FillRectangleFast+0xf8>
 80014f8:	88bb      	ldrh	r3, [r7, #4]
 80014fa:	2b4f      	cmp	r3, #79	; 0x4f
 80014fc:	d866      	bhi.n	80015cc <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80014fe:	88fa      	ldrh	r2, [r7, #6]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4413      	add	r3, r2
 8001504:	2ba0      	cmp	r3, #160	; 0xa0
 8001506:	dd03      	ble.n	8001510 <ST7735_FillRectangleFast+0x3c>
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800150e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001510:	88ba      	ldrh	r2, [r7, #4]
 8001512:	883b      	ldrh	r3, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	2b50      	cmp	r3, #80	; 0x50
 8001518:	dd03      	ble.n	8001522 <ST7735_FillRectangleFast+0x4e>
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001520:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001522:	f7ff fda3 	bl	800106c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	b2d8      	uxtb	r0, r3
 800152a:	88bb      	ldrh	r3, [r7, #4]
 800152c:	b2d9      	uxtb	r1, r3
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	b2dc      	uxtb	r4, r3
 800153e:	88bb      	ldrh	r3, [r7, #4]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	883b      	ldrh	r3, [r7, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4413      	add	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4622      	mov	r2, r4
 8001550:	f7ff fe35 	bl	80011be <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001554:	8c3b      	ldrh	r3, [r7, #32]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	b29b      	uxth	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	723b      	strb	r3, [r7, #8]
 800155e:	8c3b      	ldrh	r3, [r7, #32]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4618      	mov	r0, r3
 800156a:	f00d fc05 	bl	800ed78 <malloc>
 800156e:	4603      	mov	r3, r0
 8001570:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8001572:	2300      	movs	r3, #0
 8001574:	80fb      	strh	r3, [r7, #6]
 8001576:	e008      	b.n	800158a <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	893a      	ldrh	r2, [r7, #8]
 8001582:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	3301      	adds	r3, #1
 8001588:	80fb      	strh	r3, [r7, #6]
 800158a:	88fa      	ldrh	r2, [r7, #6]
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	429a      	cmp	r2, r3
 8001590:	d3f2      	bcc.n	8001578 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2104      	movs	r1, #4
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <ST7735_FillRectangleFast+0x100>)
 8001598:	f000 ff7a 	bl	8002490 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 800159c:	883b      	ldrh	r3, [r7, #0]
 800159e:	80bb      	strh	r3, [r7, #4]
 80015a0:	e00b      	b.n	80015ba <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	68f9      	ldr	r1, [r7, #12]
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <ST7735_FillRectangleFast+0x104>)
 80015b0:	f004 fe04 	bl	80061bc <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	80bb      	strh	r3, [r7, #4]
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <ST7735_FillRectangleFast+0xce>

    free(line);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f00d fbe1 	bl	800ed88 <free>
    ST7735_Unselect();
 80015c6:	f7ff fd5d 	bl	8001084 <ST7735_Unselect>
 80015ca:	e000      	b.n	80015ce <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80015cc:	bf00      	nop
}
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	40020000 	.word	0x40020000
 80015d8:	20000290 	.word	0x20000290

080015dc <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2350      	movs	r3, #80	; 0x50
 80015ec:	22a0      	movs	r2, #160	; 0xa0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff fefd 	bl	80013f0 <ST7735_FillRectangle>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af02      	add	r7, sp, #8
 8001604:	4603      	mov	r3, r0
 8001606:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2350      	movs	r3, #80	; 0x50
 800160e:	22a0      	movs	r2, #160	; 0xa0
 8001610:	2100      	movs	r1, #0
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff ff5e 	bl	80014d4 <ST7735_FillRectangleFast>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_MspInit+0x54>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_MspInit+0x54>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_MspInit+0x54>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_MspInit+0x54>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_MspInit+0x54>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_MspInit+0x54>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	210f      	movs	r1, #15
 8001662:	f06f 0001 	mvn.w	r0, #1
 8001666:	f000 fc35 	bl	8001ed4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	; 0x30
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	201a      	movs	r0, #26
 800168e:	f000 fc21 	bl	8001ed4 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001692:	201a      	movs	r0, #26
 8001694:	f000 fc4a 	bl	8001f2c <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_InitTick+0xa0>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <HAL_InitTick+0xa0>)
 80016a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a6:	6453      	str	r3, [r2, #68]	; 0x44
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_InitTick+0xa0>)
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016b4:	f107 0210 	add.w	r2, r7, #16
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fdae 	bl	8005220 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016c4:	f003 fd98 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 80016c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <HAL_InitTick+0xa4>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0c9b      	lsrs	r3, r3, #18
 80016d4:	3b01      	subs	r3, #1
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_InitTick+0xa8>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <HAL_InitTick+0xac>)
 80016dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_InitTick+0xa8>)
 80016e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80016e6:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_InitTick+0xa8>)
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_InitTick+0xa8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_InitTick+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80016f8:	4809      	ldr	r0, [pc, #36]	; (8001720 <HAL_InitTick+0xa8>)
 80016fa:	f004 ff75 	bl	80065e8 <HAL_TIM_Base_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d104      	bne.n	800170e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8001704:	4806      	ldr	r0, [pc, #24]	; (8001720 <HAL_InitTick+0xa8>)
 8001706:	f005 f835 	bl	8006774 <HAL_TIM_Base_Start_IT>
 800170a:	4603      	mov	r3, r0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3730      	adds	r7, #48	; 0x30
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	431bde83 	.word	0x431bde83
 8001720:	200002e8 	.word	0x200002e8
 8001724:	40014800 	.word	0x40014800

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800172c:	e7fe      	b.n	800172c <NMI_Handler+0x4>

0800172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler+0x4>

0800173a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <UsageFault_Handler+0x4>

08001746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001758:	2001      	movs	r0, #1
 800175a:	f000 fef3 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <TIM1_UP_TIM10_IRQHandler+0x18>)
 800176a:	f005 faed 	bl	8006d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	4a02      	ldr	r2, [pc, #8]	; (8001780 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001776:	6013      	str	r3, [r2, #0]
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000340 	.word	0x20000340
 8001780:	20000268 	.word	0x20000268

08001784 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001788:	4803      	ldr	r0, [pc, #12]	; (8001798 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800178a:	f005 fadd 	bl	8006d48 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001790:	f005 fada 	bl	8006d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000340 	.word	0x20000340
 800179c:	200002e8 	.word	0x200002e8

080017a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <TIM3_IRQHandler+0x28>)
 80017a6:	f005 facf 	bl	8006d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <TIM3_IRQHandler+0x2c>)
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <TIM3_IRQHandler+0x2c>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <TIM3_IRQHandler+0x2c>)
 80017bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017c0:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000388 	.word	0x20000388
 80017cc:	40000400 	.word	0x40000400

080017d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <OTG_FS_IRQHandler+0x10>)
 80017d6:	f001 fe46 	bl	8003466 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2001b720 	.word	0x2001b720

080017e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 80017ee:	23ff      	movs	r3, #255	; 0xff
 80017f0:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db11      	blt.n	8001828 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8001804:	f000 fa68 	bl	8001cd8 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_GPIO_EXTI_Callback+0x50>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b63      	cmp	r3, #99	; 0x63
 8001814:	d90a      	bls.n	800182c <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 8001816:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_GPIO_EXTI_Callback+0x50>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 800181c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001820:	4a05      	ldr	r2, [pc, #20]	; (8001838 <HAL_GPIO_EXTI_Callback+0x54>)
 8001822:	2101      	movs	r1, #1
 8001824:	54d1      	strb	r1, [r2, r3]
 8001826:	e002      	b.n	800182e <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 8001828:	bf00      	nop
 800182a:	e000      	b.n	800182e <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 800182c:	bf00      	nop
}
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000338 	.word	0x20000338
 8001838:	20000330 	.word	0x20000330

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f00d fa58 	bl	800ed20 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20020000 	.word	0x20020000
 800189c:	00001000 	.word	0x00001000
 80018a0:	2000033c 	.word	0x2000033c
 80018a4:	2001be60 	.word	0x2001be60

080018a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <MX_TIM1_Init+0x98>)
 80018ea:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <MX_TIM1_Init+0x9c>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_TIM1_Init+0x98>)
 80018f0:	222f      	movs	r2, #47	; 0x2f
 80018f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_TIM1_Init+0x98>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_TIM1_Init+0x98>)
 80018fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001900:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_TIM1_Init+0x98>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_TIM1_Init+0x98>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_TIM1_Init+0x98>)
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001914:	4813      	ldr	r0, [pc, #76]	; (8001964 <MX_TIM1_Init+0x98>)
 8001916:	f004 fe67 	bl	80065e8 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001920:	f7ff fa90 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4619      	mov	r1, r3
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <MX_TIM1_Init+0x98>)
 8001932:	f005 fb11 	bl	8006f58 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800193c:	f7ff fa82 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001940:	2320      	movs	r3, #32
 8001942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_TIM1_Init+0x98>)
 800194e:	f005 ffc1 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001958:	f7ff fa74 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000340 	.word	0x20000340
 8001968:	40010000 	.word	0x40010000

0800196c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	2224      	movs	r2, #36	; 0x24
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f00d fa1a 	bl	800edb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <MX_TIM3_Init+0xa0>)
 800198a:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <MX_TIM3_Init+0xa4>)
 800198c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <MX_TIM3_Init+0xa0>)
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_TIM3_Init+0xa0>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <MX_TIM3_Init+0xa0>)
 800199c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_TIM3_Init+0xa0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_TIM3_Init+0xa0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019b6:	2301      	movs	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80019be:	2302      	movs	r3, #2
 80019c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019c6:	2301      	movs	r3, #1
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4619      	mov	r1, r3
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <MX_TIM3_Init+0xa0>)
 80019da:	f004 ff5d 	bl	8006898 <HAL_TIM_Encoder_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80019e4:	f7ff fa2e 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_TIM3_Init+0xa0>)
 80019f6:	f005 ff6d 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a00:	f7ff fa20 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	3730      	adds	r7, #48	; 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000388 	.word	0x20000388
 8001a10:	40000400 	.word	0x40000400

08001a14 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <MX_TIM4_Init+0x90>)
 8001a32:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <MX_TIM4_Init+0x94>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_TIM4_Init+0x90>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <MX_TIM4_Init+0x90>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_TIM4_Init+0x90>)
 8001a44:	223c      	movs	r2, #60	; 0x3c
 8001a46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <MX_TIM4_Init+0x90>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_TIM4_Init+0x90>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a54:	4813      	ldr	r0, [pc, #76]	; (8001aa4 <MX_TIM4_Init+0x90>)
 8001a56:	f004 fdc7 	bl	80065e8 <HAL_TIM_Base_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001a60:	f7ff f9f0 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_TIM4_Init+0x90>)
 8001a72:	f005 fa71 	bl	8006f58 <HAL_TIM_ConfigClockSource>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001a7c:	f7ff f9e2 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM4_Init+0x90>)
 8001a8e:	f005 ff21 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001a98:	f7ff f9d4 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200003d0 	.word	0x200003d0
 8001aa8:	40000800 	.word	0x40000800

08001aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_TIM_Base_MspInit+0x80>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d11e      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a1a      	ldr	r2, [pc, #104]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2105      	movs	r1, #5
 8001ade:	2019      	movs	r0, #25
 8001ae0:	f000 f9f8 	bl	8001ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ae4:	2019      	movs	r0, #25
 8001ae6:	f000 fa21 	bl	8001f2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	210f      	movs	r1, #15
 8001aee:	201a      	movs	r0, #26
 8001af0:	f000 f9f0 	bl	8001ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001af4:	201a      	movs	r0, #26
 8001af6:	f000 fa19 	bl	8001f2c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001afa:	e012      	b.n	8001b22 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_TIM_Base_MspInit+0x88>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10d      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40000800 	.word	0x40000800

08001b38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2c      	ldr	r2, [pc, #176]	; (8001c08 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d151      	bne.n	8001bfe <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a2a      	ldr	r2, [pc, #168]	; (8001c0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4811      	ldr	r0, [pc, #68]	; (8001c10 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001bca:	f000 f9c7 	bl	8001f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bde:	2302      	movs	r3, #2
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	480a      	ldr	r0, [pc, #40]	; (8001c14 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001bea:	f000 f9b7 	bl	8001f5c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	201d      	movs	r0, #29
 8001bf4:	f000 f96e 	bl	8001ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bf8:	201d      	movs	r0, #29
 8001bfa:	f000 f997 	bl	8001f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40000400 	.word	0x40000400
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020400 	.word	0x40020400

08001c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c1c:	480d      	ldr	r0, [pc, #52]	; (8001c54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c1e:	490e      	ldr	r1, [pc, #56]	; (8001c58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c20:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c24:	e002      	b.n	8001c2c <LoopCopyDataInit>

08001c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2a:	3304      	adds	r3, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c30:	d3f9      	bcc.n	8001c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c34:	4c0b      	ldr	r4, [pc, #44]	; (8001c64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c38:	e001      	b.n	8001c3e <LoopFillZerobss>

08001c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3c:	3204      	adds	r2, #4

08001c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c40:	d3fb      	bcc.n	8001c3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c42:	f7ff fe31 	bl	80018a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c46:	f00d f871 	bl	800ed2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4a:	f7ff f841 	bl	8000cd0 <main>
  bx  lr    
 8001c4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c58:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c5c:	0801248c 	.word	0x0801248c
  ldr r2, =_sbss
 8001c60:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c64:	2001be5c 	.word	0x2001be5c

08001c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c68:	e7fe      	b.n	8001c68 <ADC_IRQHandler>
	...

08001c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <HAL_Init+0x40>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_Init+0x40>)
 8001c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_Init+0x40>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c94:	2003      	movs	r0, #3
 8001c96:	f000 f8fd 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	f7ff fcec 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca0:	f7ff fcbe 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	2000007c 	.word	0x2000007c
 8001cd4:	20000418 	.word	0x20000418

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000418 	.word	0x20000418

08001cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff ffee 	bl	8001cd8 <HAL_GetTick>
 8001cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d005      	beq.n	8001d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_Delay+0x44>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d16:	bf00      	nop
 8001d18:	f7ff ffde 	bl	8001cd8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d8f7      	bhi.n	8001d18 <HAL_Delay+0x28>
  {
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000007c 	.word	0x2000007c

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <__NVIC_EnableIRQ+0x38>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	; (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b07      	cmp	r3, #7
 8001ea0:	d00f      	beq.n	8001ec2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b06      	cmp	r3, #6
 8001ea6:	d00c      	beq.n	8001ec2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	d009      	beq.n	8001ec2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d006      	beq.n	8001ec2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d003      	beq.n	8001ec2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001eba:	2190      	movs	r1, #144	; 0x90
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001ebe:	f7fe ffc6 	bl	8000e4e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ff38 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	0800f810 	.word	0x0800f810

08001ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d903      	bls.n	8001ef4 <HAL_NVIC_SetPriority+0x20>
 8001eec:	21a8      	movs	r1, #168	; 0xa8
 8001eee:	480e      	ldr	r0, [pc, #56]	; (8001f28 <HAL_NVIC_SetPriority+0x54>)
 8001ef0:	f7fe ffad 	bl	8000e4e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	d903      	bls.n	8001f02 <HAL_NVIC_SetPriority+0x2e>
 8001efa:	21a9      	movs	r1, #169	; 0xa9
 8001efc:	480a      	ldr	r0, [pc, #40]	; (8001f28 <HAL_NVIC_SetPriority+0x54>)
 8001efe:	f7fe ffa6 	bl	8000e4e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f02:	f7ff ff3d 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	6978      	ldr	r0, [r7, #20]
 8001f0e:	f7ff ff8d 	bl	8001e2c <NVIC_EncodePriority>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff5c 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	0800f810 	.word	0x0800f810

08001f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da03      	bge.n	8001f46 <HAL_NVIC_EnableIRQ+0x1a>
 8001f3e:	21bc      	movs	r1, #188	; 0xbc
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <HAL_NVIC_EnableIRQ+0x2c>)
 8001f42:	f7fe ff84 	bl	8000e4e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff26 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	0800f810 	.word	0x0800f810

08001f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a33      	ldr	r2, [pc, #204]	; (8002044 <HAL_GPIO_Init+0xe8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d017      	beq.n	8001faa <HAL_GPIO_Init+0x4e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a32      	ldr	r2, [pc, #200]	; (8002048 <HAL_GPIO_Init+0xec>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_GPIO_Init+0x4e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a31      	ldr	r2, [pc, #196]	; (800204c <HAL_GPIO_Init+0xf0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00f      	beq.n	8001faa <HAL_GPIO_Init+0x4e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a30      	ldr	r2, [pc, #192]	; (8002050 <HAL_GPIO_Init+0xf4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00b      	beq.n	8001faa <HAL_GPIO_Init+0x4e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <HAL_GPIO_Init+0xf8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0x4e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a2e      	ldr	r2, [pc, #184]	; (8002058 <HAL_GPIO_Init+0xfc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x4e>
 8001fa2:	21ac      	movs	r1, #172	; 0xac
 8001fa4:	482d      	ldr	r0, [pc, #180]	; (800205c <HAL_GPIO_Init+0x100>)
 8001fa6:	f7fe ff52 	bl	8000e4e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_GPIO_Init+0x64>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x6c>
 8001fc0:	21ad      	movs	r1, #173	; 0xad
 8001fc2:	4826      	ldr	r0, [pc, #152]	; (800205c <HAL_GPIO_Init+0x100>)
 8001fc4:	f7fe ff43 	bl	8000e4e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d035      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d031      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b11      	cmp	r3, #17
 8001fde:	d02d      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d029      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b12      	cmp	r3, #18
 8001fee:	d025      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001ff8:	d020      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002002:	d01b      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800200c:	d016      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002016:	d011      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002020:	d00c      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800202a:	d007      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0xe0>
 8002034:	21ae      	movs	r1, #174	; 0xae
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <HAL_GPIO_Init+0x100>)
 8002038:	f7fe ff09 	bl	8000e4e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	e20c      	b.n	800245c <HAL_GPIO_Init+0x500>
 8002042:	bf00      	nop
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021c00 	.word	0x40021c00
 800205c:	0800f84c 	.word	0x0800f84c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 81ec 	bne.w	8002456 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	2b02      	cmp	r3, #2
 8002094:	d144      	bne.n	8002120 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00f      	beq.n	80020be <HAL_GPIO_Init+0x162>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d00b      	beq.n	80020be <HAL_GPIO_Init+0x162>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x162>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x162>
 80020b6:	21c0      	movs	r1, #192	; 0xc0
 80020b8:	4884      	ldr	r0, [pc, #528]	; (80022cc <HAL_GPIO_Init+0x370>)
 80020ba:	f7fe fec8 	bl	8000e4e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 0201 	and.w	r2, r3, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b03      	cmp	r3, #3
 800212a:	d027      	beq.n	800217c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00b      	beq.n	800214c <HAL_GPIO_Init+0x1f0>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d007      	beq.n	800214c <HAL_GPIO_Init+0x1f0>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x1f0>
 8002144:	21d1      	movs	r1, #209	; 0xd1
 8002146:	4861      	ldr	r0, [pc, #388]	; (80022cc <HAL_GPIO_Init+0x370>)
 8002148:	f7fe fe81 	bl	8000e4e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	f040 80a3 	bne.w	80022d0 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d077      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b09      	cmp	r3, #9
 8002198:	d073      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06f      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d06b      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d067      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d063      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d05f      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d05b      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d057      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d053      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d04f      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d04b      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d047      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d043      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d03f      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d03b      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b05      	cmp	r3, #5
 8002210:	d037      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b06      	cmp	r3, #6
 8002218:	d033      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b06      	cmp	r3, #6
 8002220:	d02f      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b05      	cmp	r3, #5
 8002228:	d02b      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b06      	cmp	r3, #6
 8002230:	d027      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b07      	cmp	r3, #7
 8002238:	d023      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b07      	cmp	r3, #7
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b07      	cmp	r3, #7
 8002248:	d01b      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d017      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b0a      	cmp	r3, #10
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b09      	cmp	r3, #9
 8002260:	d00f      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b09      	cmp	r3, #9
 8002268:	d00b      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x326>
 800227a:	21de      	movs	r1, #222	; 0xde
 800227c:	4813      	ldr	r0, [pc, #76]	; (80022cc <HAL_GPIO_Init+0x370>)
 800227e:	f7fe fde6 	bl	8000e4e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	08da      	lsrs	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3208      	adds	r2, #8
 800228a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	69b9      	ldr	r1, [r7, #24]
 80022c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80022ca:	e001      	b.n	80022d0 <HAL_GPIO_Init+0x374>
 80022cc:	0800f84c 	.word	0x0800f84c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a2 	beq.w	8002456 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b56      	ldr	r3, [pc, #344]	; (8002470 <HAL_GPIO_Init+0x514>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a55      	ldr	r2, [pc, #340]	; (8002470 <HAL_GPIO_Init+0x514>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_GPIO_Init+0x514>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a51      	ldr	r2, [pc, #324]	; (8002474 <HAL_GPIO_Init+0x518>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a48      	ldr	r2, [pc, #288]	; (8002478 <HAL_GPIO_Init+0x51c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_Init+0x432>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a47      	ldr	r2, [pc, #284]	; (800247c <HAL_GPIO_Init+0x520>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x42e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a46      	ldr	r2, [pc, #280]	; (8002480 <HAL_GPIO_Init+0x524>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x42a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a45      	ldr	r2, [pc, #276]	; (8002484 <HAL_GPIO_Init+0x528>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x426>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a44      	ldr	r2, [pc, #272]	; (8002488 <HAL_GPIO_Init+0x52c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x422>
 800237a:	2304      	movs	r3, #4
 800237c:	e008      	b.n	8002390 <HAL_GPIO_Init+0x434>
 800237e:	2307      	movs	r3, #7
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x434>
 8002382:	2303      	movs	r3, #3
 8002384:	e004      	b.n	8002390 <HAL_GPIO_Init+0x434>
 8002386:	2302      	movs	r3, #2
 8002388:	e002      	b.n	8002390 <HAL_GPIO_Init+0x434>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_GPIO_Init+0x434>
 800238e:	2300      	movs	r3, #0
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f002 0203 	and.w	r2, r2, #3
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	4093      	lsls	r3, r2
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a0:	4934      	ldr	r1, [pc, #208]	; (8002474 <HAL_GPIO_Init+0x518>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_GPIO_Init+0x530>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d2:	4a2e      	ldr	r2, [pc, #184]	; (800248c <HAL_GPIO_Init+0x530>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d8:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_GPIO_Init+0x530>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023fc:	4a23      	ldr	r2, [pc, #140]	; (800248c <HAL_GPIO_Init+0x530>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_GPIO_Init+0x530>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002426:	4a19      	ldr	r2, [pc, #100]	; (800248c <HAL_GPIO_Init+0x530>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_GPIO_Init+0x530>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002450:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_GPIO_Init+0x530>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3301      	adds	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b0f      	cmp	r3, #15
 8002460:	f67f adfe 	bls.w	8002060 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40013800 	.word	0x40013800
 8002478:	40020000 	.word	0x40020000
 800247c:	40020400 	.word	0x40020400
 8002480:	40020800 	.word	0x40020800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40021000 	.word	0x40021000
 800248c:	40013c00 	.word	0x40013c00

08002490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
 800249c:	4613      	mov	r3, r2
 800249e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80024a0:	887b      	ldrh	r3, [r7, #2]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <HAL_GPIO_WritePin+0x20>
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	0c1b      	lsrs	r3, r3, #16
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <HAL_GPIO_WritePin+0x2a>
 80024b0:	f240 119d 	movw	r1, #413	; 0x19d
 80024b4:	480e      	ldr	r0, [pc, #56]	; (80024f0 <HAL_GPIO_WritePin+0x60>)
 80024b6:	f7fe fcca 	bl	8000e4e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80024ba:	787b      	ldrb	r3, [r7, #1]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_GPIO_WritePin+0x40>
 80024c0:	787b      	ldrb	r3, [r7, #1]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d004      	beq.n	80024d0 <HAL_GPIO_WritePin+0x40>
 80024c6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80024ca:	4809      	ldr	r0, [pc, #36]	; (80024f0 <HAL_GPIO_WritePin+0x60>)
 80024cc:	f7fe fcbf 	bl	8000e4e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024dc:	e003      	b.n	80024e6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	041a      	lsls	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	0800f84c 	.word	0x0800f84c

080024f4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_GPIO_TogglePin+0x1c>
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	041b      	lsls	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <HAL_GPIO_TogglePin+0x26>
 8002510:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002514:	480a      	ldr	r0, [pc, #40]	; (8002540 <HAL_GPIO_TogglePin+0x4c>)
 8002516:	f7fe fc9a 	bl	8000e4e <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002520:	887a      	ldrh	r2, [r7, #2]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	041a      	lsls	r2, r3, #16
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43d9      	mvns	r1, r3
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	400b      	ands	r3, r1
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	619a      	str	r2, [r3, #24]
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	0800f84c 	.word	0x0800f84c

08002544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f93e 	bl	80017e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1bd      	b.n	8002902 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a93      	ldr	r2, [pc, #588]	; (80027d8 <HAL_I2C_Init+0x264>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00e      	beq.n	80025ae <HAL_I2C_Init+0x3a>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a91      	ldr	r2, [pc, #580]	; (80027dc <HAL_I2C_Init+0x268>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d009      	beq.n	80025ae <HAL_I2C_Init+0x3a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a90      	ldr	r2, [pc, #576]	; (80027e0 <HAL_I2C_Init+0x26c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d004      	beq.n	80025ae <HAL_I2C_Init+0x3a>
 80025a4:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80025a8:	488e      	ldr	r0, [pc, #568]	; (80027e4 <HAL_I2C_Init+0x270>)
 80025aa:	f7fe fc50 	bl	8000e4e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_I2C_Init+0x4c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a8b      	ldr	r2, [pc, #556]	; (80027e8 <HAL_I2C_Init+0x274>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d904      	bls.n	80025ca <HAL_I2C_Init+0x56>
 80025c0:	f240 11bf 	movw	r1, #447	; 0x1bf
 80025c4:	4887      	ldr	r0, [pc, #540]	; (80027e4 <HAL_I2C_Init+0x270>)
 80025c6:	f7fe fc42 	bl	8000e4e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_I2C_Init+0x72>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025da:	d004      	beq.n	80025e6 <HAL_I2C_Init+0x72>
 80025dc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80025e0:	4880      	ldr	r0, [pc, #512]	; (80027e4 <HAL_I2C_Init+0x270>)
 80025e2:	f7fe fc34 	bl	8000e4e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ee:	f023 0303 	bic.w	r3, r3, #3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <HAL_I2C_Init+0x8c>
 80025f6:	f240 11c1 	movw	r1, #449	; 0x1c1
 80025fa:	487a      	ldr	r0, [pc, #488]	; (80027e4 <HAL_I2C_Init+0x270>)
 80025fc:	f7fe fc27 	bl	8000e4e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002608:	d009      	beq.n	800261e <HAL_I2C_Init+0xaa>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002612:	d004      	beq.n	800261e <HAL_I2C_Init+0xaa>
 8002614:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002618:	4872      	ldr	r0, [pc, #456]	; (80027e4 <HAL_I2C_Init+0x270>)
 800261a:	f7fe fc18 	bl	8000e4e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_I2C_Init+0xc4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d004      	beq.n	8002638 <HAL_I2C_Init+0xc4>
 800262e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002632:	486c      	ldr	r0, [pc, #432]	; (80027e4 <HAL_I2C_Init+0x270>)
 8002634:	f7fe fc0b 	bl	8000e4e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_I2C_Init+0xda>
 8002644:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002648:	4866      	ldr	r0, [pc, #408]	; (80027e4 <HAL_I2C_Init+0x270>)
 800264a:	f7fe fc00 	bl	8000e4e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_I2C_Init+0xf4>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d004      	beq.n	8002668 <HAL_I2C_Init+0xf4>
 800265e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002662:	4860      	ldr	r0, [pc, #384]	; (80027e4 <HAL_I2C_Init+0x270>)
 8002664:	f7fe fbf3 	bl	8000e4e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_I2C_Init+0x10e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d004      	beq.n	8002682 <HAL_I2C_Init+0x10e>
 8002678:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800267c:	4859      	ldr	r0, [pc, #356]	; (80027e4 <HAL_I2C_Init+0x270>)
 800267e:	f7fe fbe6 	bl	8000e4e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe fa7e 	bl	8000b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026d4:	f002 fd7c 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 80026d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4a43      	ldr	r2, [pc, #268]	; (80027ec <HAL_I2C_Init+0x278>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d807      	bhi.n	80026f4 <HAL_I2C_Init+0x180>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a42      	ldr	r2, [pc, #264]	; (80027f0 <HAL_I2C_Init+0x27c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	bf94      	ite	ls
 80026ec:	2301      	movls	r3, #1
 80026ee:	2300      	movhi	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e006      	b.n	8002702 <HAL_I2C_Init+0x18e>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a3f      	ldr	r2, [pc, #252]	; (80027f4 <HAL_I2C_Init+0x280>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	bf94      	ite	ls
 80026fc:	2301      	movls	r3, #1
 80026fe:	2300      	movhi	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0fb      	b.n	8002902 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <HAL_I2C_Init+0x284>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0c9b      	lsrs	r3, r3, #18
 8002714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <HAL_I2C_Init+0x278>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d802      	bhi.n	8002744 <HAL_I2C_Init+0x1d0>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3301      	adds	r3, #1
 8002742:	e009      	b.n	8002758 <HAL_I2C_Init+0x1e4>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	4a2b      	ldr	r2, [pc, #172]	; (80027fc <HAL_I2C_Init+0x288>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	3301      	adds	r3, #1
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	430b      	orrs	r3, r1
 800275e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800276a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	491e      	ldr	r1, [pc, #120]	; (80027ec <HAL_I2C_Init+0x278>)
 8002774:	428b      	cmp	r3, r1
 8002776:	d819      	bhi.n	80027ac <HAL_I2C_Init+0x238>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e59      	subs	r1, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fbb1 f3f3 	udiv	r3, r1, r3
 8002786:	1c59      	adds	r1, r3, #1
 8002788:	f640 73fc 	movw	r3, #4092	; 0xffc
 800278c:	400b      	ands	r3, r1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_I2C_Init+0x234>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e59      	subs	r1, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a6:	e065      	b.n	8002874 <HAL_I2C_Init+0x300>
 80027a8:	2304      	movs	r3, #4
 80027aa:	e063      	b.n	8002874 <HAL_I2C_Init+0x300>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d125      	bne.n	8002800 <HAL_I2C_Init+0x28c>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	440b      	add	r3, r1
 80027c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e026      	b.n	8002826 <HAL_I2C_Init+0x2b2>
 80027d8:	40005400 	.word	0x40005400
 80027dc:	40005800 	.word	0x40005800
 80027e0:	40005c00 	.word	0x40005c00
 80027e4:	0800f888 	.word	0x0800f888
 80027e8:	00061a80 	.word	0x00061a80
 80027ec:	000186a0 	.word	0x000186a0
 80027f0:	001e847f 	.word	0x001e847f
 80027f4:	003d08ff 	.word	0x003d08ff
 80027f8:	431bde83 	.word	0x431bde83
 80027fc:	10624dd3 	.word	0x10624dd3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1e58      	subs	r0, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	0099      	lsls	r1, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	fbb0 f3f3 	udiv	r3, r0, r3
 8002816:	3301      	adds	r3, #1
 8002818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Init+0x2ba>
 800282a:	2301      	movs	r3, #1
 800282c:	e022      	b.n	8002874 <HAL_I2C_Init+0x300>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10e      	bne.n	8002854 <HAL_I2C_Init+0x2e0>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1e58      	subs	r0, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6859      	ldr	r1, [r3, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	440b      	add	r3, r1
 8002844:	fbb0 f3f3 	udiv	r3, r0, r3
 8002848:	3301      	adds	r3, #1
 800284a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002852:	e00f      	b.n	8002874 <HAL_I2C_Init+0x300>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e58      	subs	r0, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	0099      	lsls	r1, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	6809      	ldr	r1, [r1, #0]
 8002878:	4313      	orrs	r3, r2
 800287a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6911      	ldr	r1, [r2, #16]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68d2      	ldr	r2, [r2, #12]
 80028ae:	4311      	orrs	r1, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop

0800290c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	4608      	mov	r0, r1
 8002916:	4611      	mov	r1, r2
 8002918:	461a      	mov	r2, r3
 800291a:	4603      	mov	r3, r0
 800291c:	817b      	strh	r3, [r7, #10]
 800291e:	460b      	mov	r3, r1
 8002920:	813b      	strh	r3, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002926:	f7ff f9d7 	bl	8001cd8 <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d007      	beq.n	8002942 <HAL_I2C_Mem_Write+0x36>
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b10      	cmp	r3, #16
 8002936:	d004      	beq.n	8002942 <HAL_I2C_Mem_Write+0x36>
 8002938:	f640 11b9 	movw	r1, #2489	; 0x9b9
 800293c:	4873      	ldr	r0, [pc, #460]	; (8002b0c <HAL_I2C_Mem_Write+0x200>)
 800293e:	f7fe fa86 	bl	8000e4e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b20      	cmp	r3, #32
 800294c:	f040 80d9 	bne.w	8002b02 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2319      	movs	r3, #25
 8002956:	2201      	movs	r2, #1
 8002958:	496d      	ldr	r1, [pc, #436]	; (8002b10 <HAL_I2C_Mem_Write+0x204>)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 faa0 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
 8002968:	e0cc      	b.n	8002b04 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_I2C_Mem_Write+0x6c>
 8002974:	2302      	movs	r3, #2
 8002976:	e0c5      	b.n	8002b04 <HAL_I2C_Mem_Write+0x1f8>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b01      	cmp	r3, #1
 800298c:	d007      	beq.n	800299e <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2221      	movs	r2, #33	; 0x21
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2240      	movs	r2, #64	; 0x40
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a3a      	ldr	r2, [r7, #32]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4a4d      	ldr	r2, [pc, #308]	; (8002b14 <HAL_I2C_Mem_Write+0x208>)
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029e0:	88f8      	ldrh	r0, [r7, #6]
 80029e2:	893a      	ldrh	r2, [r7, #8]
 80029e4:	8979      	ldrh	r1, [r7, #10]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	4603      	mov	r3, r0
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f9bf 	bl	8002d74 <I2C_RequestMemoryWrite>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d052      	beq.n	8002aa2 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e081      	b.n	8002b04 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fb21 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d107      	bne.n	8002a28 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e06b      	b.n	8002b04 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d11b      	bne.n	8002aa2 <HAL_I2C_Mem_Write+0x196>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d017      	beq.n	8002aa2 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1aa      	bne.n	8002a00 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fb0d 	bl	80030ce <I2C_WaitOnBTFFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d107      	bne.n	8002ad2 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e016      	b.n	8002b04 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	0800f888 	.word	0x0800f888
 8002b10:	00100002 	.word	0x00100002
 8002b14:	ffff0000 	.word	0xffff0000

08002b18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	460b      	mov	r3, r1
 8002b26:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff f8d6 	bl	8001cd8 <HAL_GetTick>
 8002b2c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	f040 8111 	bne.w	8002d62 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2319      	movs	r3, #25
 8002b46:	2201      	movs	r2, #1
 8002b48:	4988      	ldr	r1, [pc, #544]	; (8002d6c <HAL_I2C_IsDeviceReady+0x254>)
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f9a8 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	e104      	b.n	8002d64 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_I2C_IsDeviceReady+0x50>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e0fd      	b.n	8002d64 <HAL_I2C_IsDeviceReady+0x24c>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d007      	beq.n	8002b8e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2224      	movs	r2, #36	; 0x24
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a70      	ldr	r2, [pc, #448]	; (8002d70 <HAL_I2C_IsDeviceReady+0x258>)
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f966 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be8:	d103      	bne.n	8002bf2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0b6      	b.n	8002d64 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c06:	f7ff f867 	bl	8001cd8 <HAL_GetTick>
 8002c0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c30:	bf0c      	ite	eq
 8002c32:	2301      	moveq	r3, #1
 8002c34:	2300      	movne	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c3a:	e025      	b.n	8002c88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c3c:	f7ff f84c 	bl	8001cd8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d302      	bcc.n	8002c52 <HAL_I2C_IsDeviceReady+0x13a>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	22a0      	movs	r2, #160	; 0xa0
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2ba0      	cmp	r3, #160	; 0xa0
 8002c92:	d005      	beq.n	8002ca0 <HAL_I2C_IsDeviceReady+0x188>
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_I2C_IsDeviceReady+0x188>
 8002c9a:	7dbb      	ldrb	r3, [r7, #22]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0cd      	beq.n	8002c3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d129      	bne.n	8002d0a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2319      	movs	r3, #25
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4921      	ldr	r1, [pc, #132]	; (8002d6c <HAL_I2C_IsDeviceReady+0x254>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f8da 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e036      	b.n	8002d64 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e02c      	b.n	8002d64 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2319      	movs	r3, #25
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	490f      	ldr	r1, [pc, #60]	; (8002d6c <HAL_I2C_IsDeviceReady+0x254>)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f8b6 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e012      	b.n	8002d64 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	3301      	adds	r3, #1
 8002d42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f4ff af32 	bcc.w	8002bb2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	00100002 	.word	0x00100002
 8002d70:	ffff0000 	.word	0xffff0000

08002d74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	460b      	mov	r3, r1
 8002d88:	813b      	strh	r3, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f878 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc4:	d103      	bne.n	8002dce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e05f      	b.n	8002e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002de0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	6a3a      	ldr	r2, [r7, #32]
 8002de6:	492d      	ldr	r1, [pc, #180]	; (8002e9c <I2C_RequestMemoryWrite+0x128>)
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f8b0 	bl	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e04c      	b.n	8002e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e10:	6a39      	ldr	r1, [r7, #32]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f91a 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d107      	bne.n	8002e36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e02b      	b.n	8002e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e40:	893b      	ldrh	r3, [r7, #8]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	611a      	str	r2, [r3, #16]
 8002e4a:	e021      	b.n	8002e90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	6a39      	ldr	r1, [r7, #32]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f8f4 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d107      	bne.n	8002e82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e005      	b.n	8002e92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e86:	893b      	ldrh	r3, [r7, #8]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	00010002 	.word	0x00010002

08002ea0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb0:	e025      	b.n	8002efe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d021      	beq.n	8002efe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fe ff0d 	bl	8001cd8 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d116      	bne.n	8002efe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e023      	b.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10d      	bne.n	8002f24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	e00c      	b.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bf0c      	ite	eq
 8002f36:	2301      	moveq	r3, #1
 8002f38:	2300      	movne	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d0b6      	beq.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f5c:	e051      	b.n	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6c:	d123      	bne.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0204 	orr.w	r2, r3, #4
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e046      	b.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d021      	beq.n	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fe fe8b 	bl	8001cd8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d116      	bne.n	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f043 0220 	orr.w	r2, r3, #32
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e020      	b.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d10c      	bne.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	bf14      	ite	ne
 800301e:	2301      	movne	r3, #1
 8003020:	2300      	moveq	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	e00b      	b.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	43da      	mvns	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4013      	ands	r3, r2
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d18d      	bne.n	8002f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003058:	e02d      	b.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f878 	bl	8003150 <I2C_IsAcknowledgeFailed>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e02d      	b.n	80030c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d021      	beq.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7fe fe31 	bl	8001cd8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d116      	bne.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f043 0220 	orr.w	r2, r3, #32
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e007      	b.n	80030c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d1ca      	bne.n	800305a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030da:	e02d      	b.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f837 	bl	8003150 <I2C_IsAcknowledgeFailed>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e02d      	b.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d021      	beq.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f4:	f7fe fdf0 	bl	8001cd8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	429a      	cmp	r2, r3
 8003102:	d302      	bcc.n	800310a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d116      	bne.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e007      	b.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b04      	cmp	r3, #4
 8003144:	d1ca      	bne.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003166:	d11b      	bne.n	80031a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003170:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 0204 	orr.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b2:	b08f      	sub	sp, #60	; 0x3c
 80031b4:	af0a      	add	r7, sp, #40	; 0x28
 80031b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e118      	b.n	80033f4 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ca:	d003      	beq.n	80031d4 <HAL_PCD_Init+0x24>
 80031cc:	2187      	movs	r1, #135	; 0x87
 80031ce:	488b      	ldr	r0, [pc, #556]	; (80033fc <HAL_PCD_Init+0x24c>)
 80031d0:	f7fd fe3d 	bl	8000e4e <assert_failed>

  USBx = hpcd->Instance;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f00b fa8c 	bl	800e70c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2203      	movs	r2, #3
 80031f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f004 fd45 	bl	8007ca2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	687e      	ldr	r6, [r7, #4]
 8003220:	466d      	mov	r5, sp
 8003222:	f106 0410 	add.w	r4, r6, #16
 8003226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003232:	e885 0003 	stmia.w	r5, {r0, r1}
 8003236:	1d33      	adds	r3, r6, #4
 8003238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800323a:	6838      	ldr	r0, [r7, #0]
 800323c:	f004 fc1c 	bl	8007a78 <USB_CoreInit>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0d0      	b.n	80033f4 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f004 fd33 	bl	8007cc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
 8003262:	e04a      	b.n	80032fa <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	333d      	adds	r3, #61	; 0x3d
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	333c      	adds	r3, #60	; 0x3c
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	b298      	uxth	r0, r3
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3344      	adds	r3, #68	; 0x44
 80032a0:	4602      	mov	r2, r0
 80032a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032a4:	7bfa      	ldrb	r2, [r7, #15]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	3340      	adds	r3, #64	; 0x40
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	3348      	adds	r3, #72	; 0x48
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	334c      	adds	r3, #76	; 0x4c
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3354      	adds	r3, #84	; 0x54
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	3301      	adds	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	429a      	cmp	r2, r3
 8003302:	d3af      	bcc.n	8003264 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	e044      	b.n	8003394 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	3301      	adds	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	429a      	cmp	r2, r3
 800339c:	d3b5      	bcc.n	800330a <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	687e      	ldr	r6, [r7, #4]
 80033a6:	466d      	mov	r5, sp
 80033a8:	f106 0410 	add.w	r4, r6, #16
 80033ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80033bc:	1d33      	adds	r3, r6, #4
 80033be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c0:	6838      	ldr	r0, [r7, #0]
 80033c2:	f004 fccb 	bl	8007d5c <USB_DevInit>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e00d      	b.n	80033f4 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f005 fe1a 	bl	8009026 <USB_DevDisconnect>

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033fc:	0800f8c0 	.word	0x0800f8c0

08003400 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_PCD_Start+0x1c>
 8003418:	2302      	movs	r3, #2
 800341a:	e020      	b.n	800345e <HAL_PCD_Start+0x5e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	2b01      	cmp	r3, #1
 800342a:	d109      	bne.n	8003440 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003430:	2b01      	cmp	r3, #1
 8003432:	d005      	beq.n	8003440 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f004 fc1b 	bl	8007c80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f005 fdc8 	bl	8008fe4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003466:	b590      	push	{r4, r7, lr}
 8003468:	b08d      	sub	sp, #52	; 0x34
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f005 fe86 	bl	800918e <USB_GetMode>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 848a 	bne.w	8003d9e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f005 fdea 	bl	8009068 <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8480 	beq.w	8003d9c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f005 fdd7 	bl	8009068 <USB_ReadInterrupts>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d107      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f002 0202 	and.w	r2, r2, #2
 80034d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f005 fdc5 	bl	8009068 <USB_ReadInterrupts>
 80034de:	4603      	mov	r3, r0
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d161      	bne.n	80035ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0210 	bic.w	r2, r2, #16
 80034f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	0c5b      	lsrs	r3, r3, #17
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	2b02      	cmp	r3, #2
 8003522:	d124      	bne.n	800356e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d035      	beq.n	800359c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800353a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353e:	b29b      	uxth	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	6a38      	ldr	r0, [r7, #32]
 8003544:	f005 fbfc 	bl	8008d40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003554:	441a      	add	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003566:	441a      	add	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	621a      	str	r2, [r3, #32]
 800356c:	e016      	b.n	800359c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	0c5b      	lsrs	r3, r3, #17
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	2b06      	cmp	r3, #6
 8003578:	d110      	bne.n	800359c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003580:	2208      	movs	r2, #8
 8003582:	4619      	mov	r1, r3
 8003584:	6a38      	ldr	r0, [r7, #32]
 8003586:	f005 fbdb 	bl	8008d40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	6a1a      	ldr	r2, [r3, #32]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003596:	441a      	add	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0210 	orr.w	r2, r2, #16
 80035aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f005 fd59 	bl	8009068 <USB_ReadInterrupts>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035c0:	f040 80a7 	bne.w	8003712 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f005 fd5e 	bl	800908e <USB_ReadDevAllOutEpInterrupt>
 80035d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035d4:	e099      	b.n	800370a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 808e 	beq.w	80036fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f005 fd82 	bl	80090f6 <USB_ReadDevOutEPInterrupt>
 80035f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	461a      	mov	r2, r3
 800360c:	2301      	movs	r3, #1
 800360e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fec2 	bl	800439c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00c      	beq.n	800363c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362e:	461a      	mov	r2, r3
 8003630:	2308      	movs	r3, #8
 8003632:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 ff98 	bl	800456c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	461a      	mov	r2, r3
 8003654:	2310      	movs	r3, #16
 8003656:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d030      	beq.n	80036c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b80      	cmp	r3, #128	; 0x80
 800366c:	d109      	bne.n	8003682 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003680:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	4413      	add	r3, r2
 8003694:	3304      	adds	r3, #4
 8003696:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	78db      	ldrb	r3, [r3, #3]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d108      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2200      	movs	r2, #0
 80036a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f00b f929 	bl	800e904 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036be:	461a      	mov	r2, r3
 80036c0:	2302      	movs	r3, #2
 80036c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036da:	461a      	mov	r2, r3
 80036dc:	2320      	movs	r3, #32
 80036de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f6:	461a      	mov	r2, r3
 80036f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	3301      	adds	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	f47f af62 	bne.w	80035d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f005 fca6 	bl	8009068 <USB_ReadInterrupts>
 800371c:	4603      	mov	r3, r0
 800371e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003722:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003726:	f040 80db 	bne.w	80038e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f005 fcc7 	bl	80090c2 <USB_ReadDevAllInEpInterrupt>
 8003734:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800373a:	e0cd      	b.n	80038d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80c2 	beq.w	80038cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f005 fced 	bl	8009132 <USB_ReadDevInEPInterrupt>
 8003758:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d057      	beq.n	8003814 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	2201      	movs	r2, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43db      	mvns	r3, r3
 800377e:	69f9      	ldr	r1, [r7, #28]
 8003780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003784:	4013      	ands	r3, r2
 8003786:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003794:	461a      	mov	r2, r3
 8003796:	2301      	movs	r3, #1
 8003798:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d132      	bne.n	8003808 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	334c      	adds	r3, #76	; 0x4c
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4403      	add	r3, r0
 80037c2:	3348      	adds	r3, #72	; 0x48
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4419      	add	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4403      	add	r3, r0
 80037d6:	334c      	adds	r3, #76	; 0x4c
 80037d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d113      	bne.n	8003808 <HAL_PCD_IRQHandler+0x3a2>
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3354      	adds	r3, #84	; 0x54
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d108      	bne.n	8003808 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003800:	461a      	mov	r2, r3
 8003802:	2101      	movs	r1, #1
 8003804:	f005 fcf4 	bl	80091f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	b2db      	uxtb	r3, r3
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f00a fffd 	bl	800e80e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382a:	461a      	mov	r2, r3
 800382c:	2308      	movs	r3, #8
 800382e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003846:	461a      	mov	r2, r3
 8003848:	2310      	movs	r3, #16
 800384a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003862:	461a      	mov	r2, r3
 8003864:	2340      	movs	r3, #64	; 0x40
 8003866:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d023      	beq.n	80038ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003874:	6a38      	ldr	r0, [r7, #32]
 8003876:	f004 fbd5 	bl	8008024 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	3338      	adds	r3, #56	; 0x38
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	3304      	adds	r3, #4
 800388c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	78db      	ldrb	r3, [r3, #3]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d108      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2200      	movs	r2, #0
 800389a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f00b f840 	bl	800e928 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	461a      	mov	r2, r3
 80038b6:	2302      	movs	r3, #2
 80038b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80038c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fcdb 	bl	8004282 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	3301      	adds	r3, #1
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f47f af2e 	bne.w	800373c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f005 fbbf 	bl	8009068 <USB_ReadInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038f4:	d122      	bne.n	800393c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003910:	2b01      	cmp	r3, #1
 8003912:	d108      	bne.n	8003926 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800391c:	2100      	movs	r1, #0
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fec2 	bl	80046a8 <HAL_PCDEx_LPM_Callback>
 8003924:	e002      	b.n	800392c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f00a ffde 	bl	800e8e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800393a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f005 fb91 	bl	8009068 <USB_ReadInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800394c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003950:	d112      	bne.n	8003978 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f00a ff9a 	bl	800e89c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003976:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f005 fb73 	bl	8009068 <USB_ReadInterrupts>
 8003982:	4603      	mov	r3, r0
 8003984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398c:	f040 80b7 	bne.w	8003afe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2110      	movs	r1, #16
 80039aa:	4618      	mov	r0, r3
 80039ac:	f004 fb3a 	bl	8008024 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b4:	e046      	b.n	8003a44 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c2:	461a      	mov	r2, r3
 80039c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039da:	0151      	lsls	r1, r2, #5
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	440a      	add	r2, r1
 80039e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	461a      	mov	r2, r3
 80039f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2e:	0151      	lsls	r1, r2, #5
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	440a      	add	r2, r1
 8003a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	3301      	adds	r3, #1
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d3b3      	bcc.n	80039b6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d016      	beq.n	8003a98 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a7a:	f043 030b 	orr.w	r3, r3, #11
 8003a7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a90:	f043 030b 	orr.w	r3, r3, #11
 8003a94:	6453      	str	r3, [r2, #68]	; 0x44
 8003a96:	e015      	b.n	8003ac4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003aaa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003aae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003abe:	f043 030b 	orr.w	r3, r3, #11
 8003ac2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ad2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ad6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f005 fb81 	bl	80091f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f005 fab0 	bl	8009068 <USB_ReadInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b12:	d124      	bne.n	8003b5e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f005 fb46 	bl	80091aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 fafb 	bl	800811e <USB_GetDevSpeed>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681c      	ldr	r4, [r3, #0]
 8003b34:	f001 fb40 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 8003b38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	4620      	mov	r0, r4
 8003b44:	f003 fffa 	bl	8007b3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f00a fe88 	bl	800e85e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f005 fa80 	bl	8009068 <USB_ReadInterrupts>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d10a      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f00a fe65 	bl	800e842 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f002 0208 	and.w	r2, r2, #8
 8003b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f005 fa6b 	bl	8009068 <USB_ReadInterrupts>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b80      	cmp	r3, #128	; 0x80
 8003b9a:	d122      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ba8:	2301      	movs	r3, #1
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	e014      	b.n	8003bd8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d105      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fb27 	bl	8004220 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d3e5      	bcc.n	8003bae <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f005 fa3e 	bl	8009068 <USB_ReadInterrupts>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf6:	d13b      	bne.n	8003c70 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfc:	e02b      	b.n	8003c56 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3340      	adds	r3, #64	; 0x40
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d115      	bne.n	8003c50 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	da12      	bge.n	8003c50 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	333f      	adds	r3, #63	; 0x3f
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fae8 	bl	8004220 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	3301      	adds	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d3ce      	bcc.n	8003bfe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f005 f9f7 	bl	8009068 <USB_ReadInterrupts>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c84:	d155      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c86:	2301      	movs	r3, #1
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8a:	e045      	b.n	8003d18 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d12e      	bne.n	8003d12 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da2b      	bge.n	8003d12 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003cc6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d121      	bne.n	8003d12 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d0e:	6053      	str	r3, [r2, #4]
            break;
 8003d10:	e007      	b.n	8003d22 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	3301      	adds	r3, #1
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d3b4      	bcc.n	8003c8c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f005 f996 	bl	8009068 <USB_ReadInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d46:	d10a      	bne.n	8003d5e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f00a fdff 	bl	800e94c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f005 f980 	bl	8009068 <USB_ReadInterrupts>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d115      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f00a fdef 	bl	800e968 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	e000      	b.n	8003d9e <HAL_PCD_IRQHandler+0x938>
      return;
 8003d9c:	bf00      	nop
    }
  }
}
 8003d9e:	3734      	adds	r7, #52	; 0x34
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd90      	pop	{r4, r7, pc}

08003da4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_PCD_SetAddress+0x1a>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e013      	b.n	8003de6 <HAL_PCD_SetAddress+0x42>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f005 f8de 	bl	8008f98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	4608      	mov	r0, r1
 8003df8:	4611      	mov	r1, r2
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	70fb      	strb	r3, [r7, #3]
 8003e00:	460b      	mov	r3, r1
 8003e02:	803b      	strh	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	da0f      	bge.n	8003e34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	f003 020f 	and.w	r2, r3, #15
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	3338      	adds	r3, #56	; 0x38
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4413      	add	r3, r2
 8003e28:	3304      	adds	r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	705a      	strb	r2, [r3, #1]
 8003e32:	e00f      	b.n	8003e54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e60:	883a      	ldrh	r2, [r7, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	78ba      	ldrb	r2, [r7, #2]
 8003e6a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	785b      	ldrb	r3, [r3, #1]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e7e:	78bb      	ldrb	r3, [r7, #2]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d102      	bne.n	8003e8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_PCD_EP_Open+0xaa>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e00e      	b.n	8003eb6 <HAL_PCD_EP_Open+0xc8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68f9      	ldr	r1, [r7, #12]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f004 f95e 	bl	8008168 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003eb4:	7afb      	ldrb	r3, [r7, #11]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	da0f      	bge.n	8003ef2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	f003 020f 	and.w	r2, r3, #15
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	3338      	adds	r3, #56	; 0x38
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	705a      	strb	r2, [r3, #1]
 8003ef0:	e00f      	b.n	8003f12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	f003 020f 	and.w	r2, r3, #15
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4413      	add	r3, r2
 8003f08:	3304      	adds	r3, #4
 8003f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_PCD_EP_Close+0x6e>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e00e      	b.n	8003f4a <HAL_PCD_EP_Close+0x8c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68f9      	ldr	r1, [r7, #12]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 f99c 	bl	8008278 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f62:	7afb      	ldrb	r3, [r7, #11]
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	3304      	adds	r3, #4
 8003f7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f94:	7afb      	ldrb	r3, [r7, #11]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d102      	bne.n	8003fae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fae:	7afb      	ldrb	r3, [r7, #11]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6979      	ldr	r1, [r7, #20]
 8003fc6:	f004 fc7b 	bl	80088c0 <USB_EP0StartXfer>
 8003fca:	e008      	b.n	8003fde <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6979      	ldr	r1, [r7, #20]
 8003fda:	f004 fa29 	bl	8008430 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	f003 020f 	and.w	r2, r3, #15
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	460b      	mov	r3, r1
 8004026:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004028:	7afb      	ldrb	r3, [r7, #11]
 800402a:	f003 020f 	and.w	r2, r3, #15
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	3338      	adds	r3, #56	; 0x38
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	3304      	adds	r3, #4
 800403e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2200      	movs	r2, #0
 8004050:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2201      	movs	r2, #1
 8004056:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004058:	7afb      	ldrb	r3, [r7, #11]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	b2da      	uxtb	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004072:	7afb      	ldrb	r3, [r7, #11]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	6979      	ldr	r1, [r7, #20]
 800408a:	f004 fc19 	bl	80088c0 <USB_EP0StartXfer>
 800408e:	e008      	b.n	80040a2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	f004 f9c7 	bl	8008430 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d901      	bls.n	80040ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e050      	b.n	800416c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	da0f      	bge.n	80040f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 020f 	and.w	r2, r3, #15
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	3338      	adds	r3, #56	; 0x38
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	3304      	adds	r3, #4
 80040e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	705a      	strb	r2, [r3, #1]
 80040f0:	e00d      	b.n	800410e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_PCD_EP_SetStall+0x82>
 800412a:	2302      	movs	r3, #2
 800412c:	e01e      	b.n	800416c <HAL_PCD_EP_SetStall+0xc0>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	4618      	mov	r0, r3
 800413e:	f004 fe57 	bl	8008df0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	b2d9      	uxtb	r1, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800415c:	461a      	mov	r2, r3
 800415e:	f005 f847 	bl	80091f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d901      	bls.n	8004192 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e042      	b.n	8004218 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004196:	2b00      	cmp	r3, #0
 8004198:	da0f      	bge.n	80041ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	4613      	mov	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	3338      	adds	r3, #56	; 0x38
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	705a      	strb	r2, [r3, #1]
 80041b8:	e00f      	b.n	80041da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	3304      	adds	r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_PCD_EP_ClrStall+0x86>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e00e      	b.n	8004218 <HAL_PCD_EP_ClrStall+0xa4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	4618      	mov	r0, r3
 800420a:	f004 fe5f 	bl	8008ecc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800422c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004230:	2b00      	cmp	r3, #0
 8004232:	da0c      	bge.n	800424e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	f003 020f 	and.w	r2, r3, #15
 800423a:	4613      	mov	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	3338      	adds	r3, #56	; 0x38
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4413      	add	r3, r2
 8004248:	3304      	adds	r3, #4
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e00c      	b.n	8004268 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	f003 020f 	and.w	r2, r3, #15
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4413      	add	r3, r2
 8004264:	3304      	adds	r3, #4
 8004266:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	4618      	mov	r0, r3
 8004270:	f004 fc7e 	bl	8008b70 <USB_EPStopXfer>
 8004274:	4603      	mov	r3, r0
 8004276:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004278:	7afb      	ldrb	r3, [r7, #11]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b08a      	sub	sp, #40	; 0x28
 8004286:	af02      	add	r7, sp, #8
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	3338      	adds	r3, #56	; 0x38
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	3304      	adds	r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d901      	bls.n	80042ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e06c      	b.n	8004394 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d902      	bls.n	80042d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3303      	adds	r3, #3
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042de:	e02b      	b.n	8004338 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d902      	bls.n	80042fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	3303      	adds	r3, #3
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6919      	ldr	r1, [r3, #16]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004314:	b2db      	uxtb	r3, r3
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4603      	mov	r3, r0
 800431a:	6978      	ldr	r0, [r7, #20]
 800431c:	f004 fcd2 	bl	8008cc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	441a      	add	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1a      	ldr	r2, [r3, #32]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	441a      	add	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	b29b      	uxth	r3, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	429a      	cmp	r2, r3
 800434c:	d809      	bhi.n	8004362 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004356:	429a      	cmp	r2, r3
 8004358:	d203      	bcs.n	8004362 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1be      	bne.n	80042e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	429a      	cmp	r2, r3
 800436c:	d811      	bhi.n	8004392 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	2201      	movs	r2, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	43db      	mvns	r3, r3
 8004388:	6939      	ldr	r1, [r7, #16]
 800438a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800438e:	4013      	ands	r3, r2
 8004390:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	333c      	adds	r3, #60	; 0x3c
 80043b4:	3304      	adds	r3, #4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d17b      	bne.n	80044ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4a61      	ldr	r2, [pc, #388]	; (8004564 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	f240 80b9 	bls.w	8004558 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80b3 	beq.w	8004558 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	461a      	mov	r2, r3
 8004400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004404:	6093      	str	r3, [r2, #8]
 8004406:	e0a7      	b.n	8004558 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	461a      	mov	r2, r3
 8004420:	2320      	movs	r3, #32
 8004422:	6093      	str	r3, [r2, #8]
 8004424:	e098      	b.n	8004558 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	f040 8093 	bne.w	8004558 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	4a4b      	ldr	r2, [pc, #300]	; (8004564 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d90f      	bls.n	800445a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	461a      	mov	r2, r3
 8004452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004456:	6093      	str	r3, [r2, #8]
 8004458:	e07e      	b.n	8004558 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4413      	add	r3, r2
 800446c:	3304      	adds	r3, #4
 800446e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	0159      	lsls	r1, r3, #5
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	440b      	add	r3, r1
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004486:	1ad2      	subs	r2, r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d114      	bne.n	80044bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044a4:	461a      	mov	r2, r3
 80044a6:	2101      	movs	r1, #1
 80044a8:	f004 fea2 	bl	80091f0 <USB_EP0_OutStart>
 80044ac:	e006      	b.n	80044bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	441a      	add	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	4619      	mov	r1, r3
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f00a f988 	bl	800e7d8 <HAL_PCD_DataOutStageCallback>
 80044c8:	e046      	b.n	8004558 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d124      	bne.n	800451c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	461a      	mov	r2, r3
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	6093      	str	r3, [r2, #8]
 80044f0:	e032      	b.n	8004558 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	461a      	mov	r2, r3
 800450a:	2320      	movs	r3, #32
 800450c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f00a f95f 	bl	800e7d8 <HAL_PCD_DataOutStageCallback>
 800451a:	e01d      	b.n	8004558 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d114      	bne.n	800454c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d108      	bne.n	800454c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004544:	461a      	mov	r2, r3
 8004546:	2100      	movs	r1, #0
 8004548:	f004 fe52 	bl	80091f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f00a f940 	bl	800e7d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	4f54300a 	.word	0x4f54300a
 8004568:	4f54310a 	.word	0x4f54310a

0800456c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	333c      	adds	r3, #60	; 0x3c
 8004584:	3304      	adds	r3, #4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d90e      	bls.n	80045c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	461a      	mov	r2, r3
 80045ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f00a f8f7 	bl	800e7b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d90c      	bls.n	80045e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d108      	bne.n	80045e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045e0:	461a      	mov	r2, r3
 80045e2:	2101      	movs	r1, #1
 80045e4:	f004 fe04 	bl	80091f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	4f54300a 	.word	0x4f54300a

080045f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	70fb      	strb	r3, [r7, #3]
 8004604:	4613      	mov	r3, r2
 8004606:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d107      	bne.n	8004626 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004616:	883b      	ldrh	r3, [r7, #0]
 8004618:	0419      	lsls	r1, r3, #16
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	430a      	orrs	r2, r1
 8004622:	629a      	str	r2, [r3, #40]	; 0x28
 8004624:	e028      	b.n	8004678 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	4413      	add	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004634:	2300      	movs	r3, #0
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	e00d      	b.n	8004656 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	3340      	adds	r3, #64	; 0x40
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	4413      	add	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	3301      	adds	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	7bfa      	ldrb	r2, [r7, #15]
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	3b01      	subs	r3, #1
 800465c:	429a      	cmp	r2, r3
 800465e:	d3ec      	bcc.n	800463a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004660:	883b      	ldrh	r3, [r7, #0]
 8004662:	0418      	lsls	r0, r3, #16
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6819      	ldr	r1, [r3, #0]
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	3b01      	subs	r3, #1
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	4302      	orrs	r2, r0
 8004670:	3340      	adds	r3, #64	; 0x40
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e314      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b0f      	cmp	r3, #15
 80046d8:	d903      	bls.n	80046e2 <HAL_RCC_OscConfig+0x22>
 80046da:	21e6      	movs	r1, #230	; 0xe6
 80046dc:	4897      	ldr	r0, [pc, #604]	; (800493c <HAL_RCC_OscConfig+0x27c>)
 80046de:	f7fc fbb6 	bl	8000e4e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8088 	beq.w	8004800 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <HAL_RCC_OscConfig+0x54>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004700:	d008      	beq.n	8004714 <HAL_RCC_OscConfig+0x54>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800470a:	d003      	beq.n	8004714 <HAL_RCC_OscConfig+0x54>
 800470c:	21eb      	movs	r1, #235	; 0xeb
 800470e:	488b      	ldr	r0, [pc, #556]	; (800493c <HAL_RCC_OscConfig+0x27c>)
 8004710:	f7fc fb9d 	bl	8000e4e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004714:	4b8a      	ldr	r3, [pc, #552]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b04      	cmp	r3, #4
 800471e:	d00c      	beq.n	800473a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004720:	4b87      	ldr	r3, [pc, #540]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004728:	2b08      	cmp	r3, #8
 800472a:	d112      	bne.n	8004752 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472c:	4b84      	ldr	r3, [pc, #528]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004738:	d10b      	bne.n	8004752 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473a:	4b81      	ldr	r3, [pc, #516]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d05b      	beq.n	80047fe <HAL_RCC_OscConfig+0x13e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d157      	bne.n	80047fe <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e2d4      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0xaa>
 800475c:	4b78      	ldr	r3, [pc, #480]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a77      	ldr	r2, [pc, #476]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e01d      	b.n	80047a6 <HAL_RCC_OscConfig+0xe6>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004772:	d10c      	bne.n	800478e <HAL_RCC_OscConfig+0xce>
 8004774:	4b72      	ldr	r3, [pc, #456]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a71      	ldr	r2, [pc, #452]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800477a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b6f      	ldr	r3, [pc, #444]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6e      	ldr	r2, [pc, #440]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e00b      	b.n	80047a6 <HAL_RCC_OscConfig+0xe6>
 800478e:	4b6c      	ldr	r3, [pc, #432]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a6b      	ldr	r2, [pc, #428]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b69      	ldr	r3, [pc, #420]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a68      	ldr	r2, [pc, #416]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80047a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d013      	beq.n	80047d6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fd fa93 	bl	8001cd8 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b6:	f7fd fa8f 	bl	8001cd8 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b64      	cmp	r3, #100	; 0x64
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e299      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c8:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0xf6>
 80047d4:	e014      	b.n	8004800 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d6:	f7fd fa7f 	bl	8001cd8 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047de:	f7fd fa7b 	bl	8001cd8 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b64      	cmp	r3, #100	; 0x64
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e285      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f0:	4b53      	ldr	r3, [pc, #332]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <HAL_RCC_OscConfig+0x11e>
 80047fc:	e000      	b.n	8004800 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d079      	beq.n	8004900 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCC_OscConfig+0x166>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d004      	beq.n	8004826 <HAL_RCC_OscConfig+0x166>
 800481c:	f240 111d 	movw	r1, #285	; 0x11d
 8004820:	4846      	ldr	r0, [pc, #280]	; (800493c <HAL_RCC_OscConfig+0x27c>)
 8004822:	f7fc fb14 	bl	8000e4e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b1f      	cmp	r3, #31
 800482c:	d904      	bls.n	8004838 <HAL_RCC_OscConfig+0x178>
 800482e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004832:	4842      	ldr	r0, [pc, #264]	; (800493c <HAL_RCC_OscConfig+0x27c>)
 8004834:	f7fc fb0b 	bl	8000e4e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004838:	4b41      	ldr	r3, [pc, #260]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004844:	4b3e      	ldr	r3, [pc, #248]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800484c:	2b08      	cmp	r3, #8
 800484e:	d11c      	bne.n	800488a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004850:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d116      	bne.n	800488a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485c:	4b38      	ldr	r3, [pc, #224]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_OscConfig+0x1b4>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d001      	beq.n	8004874 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e243      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	4b32      	ldr	r3, [pc, #200]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	492f      	ldr	r1, [pc, #188]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004888:	e03a      	b.n	8004900 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d020      	beq.n	80048d4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004892:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <HAL_RCC_OscConfig+0x284>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fd fa1e 	bl	8001cd8 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a0:	f7fd fa1a 	bl	8001cd8 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e224      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b2:	4b23      	ldr	r3, [pc, #140]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	491c      	ldr	r1, [pc, #112]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]
 80048d2:	e015      	b.n	8004900 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048d4:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <HAL_RCC_OscConfig+0x284>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048da:	f7fd f9fd 	bl	8001cd8 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048e2:	f7fd f9f9 	bl	8001cd8 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e203      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_RCC_OscConfig+0x280>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f0      	bne.n	80048e2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d045      	beq.n	8004998 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCC_OscConfig+0x266>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d004      	beq.n	8004926 <HAL_RCC_OscConfig+0x266>
 800491c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004920:	4806      	ldr	r0, [pc, #24]	; (800493c <HAL_RCC_OscConfig+0x27c>)
 8004922:	f7fc fa94 	bl	8000e4e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01e      	beq.n	800496c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_OscConfig+0x288>)
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004934:	f7fd f9d0 	bl	8001cd8 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493a:	e010      	b.n	800495e <HAL_RCC_OscConfig+0x29e>
 800493c:	0800f8f8 	.word	0x0800f8f8
 8004940:	40023800 	.word	0x40023800
 8004944:	42470000 	.word	0x42470000
 8004948:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494c:	f7fd f9c4 	bl	8001cd8 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e1ce      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495e:	4b5e      	ldr	r3, [pc, #376]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0x28c>
 800496a:	e015      	b.n	8004998 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496c:	4b5b      	ldr	r3, [pc, #364]	; (8004adc <HAL_RCC_OscConfig+0x41c>)
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004972:	f7fd f9b1 	bl	8001cd8 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497a:	f7fd f9ad 	bl	8001cd8 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e1b7      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498c:	4b52      	ldr	r3, [pc, #328]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 800498e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80b0 	beq.w	8004b06 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00c      	beq.n	80049cc <HAL_RCC_OscConfig+0x30c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d008      	beq.n	80049cc <HAL_RCC_OscConfig+0x30c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b05      	cmp	r3, #5
 80049c0:	d004      	beq.n	80049cc <HAL_RCC_OscConfig+0x30c>
 80049c2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80049c6:	4846      	ldr	r0, [pc, #280]	; (8004ae0 <HAL_RCC_OscConfig+0x420>)
 80049c8:	f7fc fa41 	bl	8000e4e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049cc:	4b42      	ldr	r3, [pc, #264]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10f      	bne.n	80049f8 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	4b3e      	ldr	r3, [pc, #248]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	4a3d      	ldr	r2, [pc, #244]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 80049e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e6:	6413      	str	r3, [r2, #64]	; 0x40
 80049e8:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f8:	4b3a      	ldr	r3, [pc, #232]	; (8004ae4 <HAL_RCC_OscConfig+0x424>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d118      	bne.n	8004a36 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a04:	4b37      	ldr	r3, [pc, #220]	; (8004ae4 <HAL_RCC_OscConfig+0x424>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a36      	ldr	r2, [pc, #216]	; (8004ae4 <HAL_RCC_OscConfig+0x424>)
 8004a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a10:	f7fd f962 	bl	8001cd8 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a18:	f7fd f95e 	bl	8001cd8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e168      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4b2e      	ldr	r3, [pc, #184]	; (8004ae4 <HAL_RCC_OscConfig+0x424>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d106      	bne.n	8004a4c <HAL_RCC_OscConfig+0x38c>
 8004a3e:	4b26      	ldr	r3, [pc, #152]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	4a25      	ldr	r2, [pc, #148]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4a:	e01c      	b.n	8004a86 <HAL_RCC_OscConfig+0x3c6>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d10c      	bne.n	8004a6e <HAL_RCC_OscConfig+0x3ae>
 8004a54:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	4a1f      	ldr	r2, [pc, #124]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004a5a:	f043 0304 	orr.w	r3, r3, #4
 8004a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a60:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6c:	e00b      	b.n	8004a86 <HAL_RCC_OscConfig+0x3c6>
 8004a6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7a:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004a80:	f023 0304 	bic.w	r3, r3, #4
 8004a84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d015      	beq.n	8004aba <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8e:	f7fd f923 	bl	8001cd8 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fd f91f 	bl	8001cd8 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e127      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <HAL_RCC_OscConfig+0x418>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0ee      	beq.n	8004a96 <HAL_RCC_OscConfig+0x3d6>
 8004ab8:	e01c      	b.n	8004af4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aba:	f7fd f90d 	bl	8001cd8 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac0:	e012      	b.n	8004ae8 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac2:	f7fd f909 	bl	8001cd8 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d909      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e111      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	42470e80 	.word	0x42470e80
 8004ae0:	0800f8f8 	.word	0x0800f8f8
 8004ae4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae8:	4b86      	ldr	r3, [pc, #536]	; (8004d04 <HAL_RCC_OscConfig+0x644>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e6      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afa:	4b82      	ldr	r3, [pc, #520]	; (8004d04 <HAL_RCC_OscConfig+0x644>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a81      	ldr	r2, [pc, #516]	; (8004d04 <HAL_RCC_OscConfig+0x644>)
 8004b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x468>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d008      	beq.n	8004b28 <HAL_RCC_OscConfig+0x468>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d004      	beq.n	8004b28 <HAL_RCC_OscConfig+0x468>
 8004b1e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004b22:	4879      	ldr	r0, [pc, #484]	; (8004d08 <HAL_RCC_OscConfig+0x648>)
 8004b24:	f7fc f993 	bl	8000e4e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80e4 	beq.w	8004cfa <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b32:	4b74      	ldr	r3, [pc, #464]	; (8004d04 <HAL_RCC_OscConfig+0x644>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	f000 80a5 	beq.w	8004c8a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	f040 8089 	bne.w	8004c5c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCC_OscConfig+0x4a6>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5a:	d004      	beq.n	8004b66 <HAL_RCC_OscConfig+0x4a6>
 8004b5c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004b60:	4869      	ldr	r0, [pc, #420]	; (8004d08 <HAL_RCC_OscConfig+0x648>)
 8004b62:	f7fc f974 	bl	8000e4e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	2b3f      	cmp	r3, #63	; 0x3f
 8004b6c:	d904      	bls.n	8004b78 <HAL_RCC_OscConfig+0x4b8>
 8004b6e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004b72:	4865      	ldr	r0, [pc, #404]	; (8004d08 <HAL_RCC_OscConfig+0x648>)
 8004b74:	f7fc f96b 	bl	8000e4e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2b31      	cmp	r3, #49	; 0x31
 8004b7e:	d904      	bls.n	8004b8a <HAL_RCC_OscConfig+0x4ca>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004b88:	d904      	bls.n	8004b94 <HAL_RCC_OscConfig+0x4d4>
 8004b8a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004b8e:	485e      	ldr	r0, [pc, #376]	; (8004d08 <HAL_RCC_OscConfig+0x648>)
 8004b90:	f7fc f95d 	bl	8000e4e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d010      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4fe>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d00c      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4fe>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	2b06      	cmp	r3, #6
 8004baa:	d008      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4fe>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d004      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4fe>
 8004bb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004bb8:	4853      	ldr	r0, [pc, #332]	; (8004d08 <HAL_RCC_OscConfig+0x648>)
 8004bba:	f7fc f948 	bl	8000e4e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d903      	bls.n	8004bce <HAL_RCC_OscConfig+0x50e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	2b0f      	cmp	r3, #15
 8004bcc:	d904      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x518>
 8004bce:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004bd2:	484d      	ldr	r0, [pc, #308]	; (8004d08 <HAL_RCC_OscConfig+0x648>)
 8004bd4:	f7fc f93b 	bl	8000e4e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd8:	4b4c      	ldr	r3, [pc, #304]	; (8004d0c <HAL_RCC_OscConfig+0x64c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bde:	f7fd f87b 	bl	8001cd8 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be6:	f7fd f877 	bl	8001cd8 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e081      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf8:	4b42      	ldr	r3, [pc, #264]	; (8004d04 <HAL_RCC_OscConfig+0x644>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f0      	bne.n	8004be6 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	019b      	lsls	r3, r3, #6
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	041b      	lsls	r3, r3, #16
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	061b      	lsls	r3, r3, #24
 8004c28:	4936      	ldr	r1, [pc, #216]	; (8004d04 <HAL_RCC_OscConfig+0x644>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2e:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <HAL_RCC_OscConfig+0x64c>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fd f850 	bl	8001cd8 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fd f84c 	bl	8001cd8 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e056      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4e:	4b2d      	ldr	r3, [pc, #180]	; (8004d04 <HAL_RCC_OscConfig+0x644>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x57c>
 8004c5a:	e04e      	b.n	8004cfa <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <HAL_RCC_OscConfig+0x64c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c62:	f7fd f839 	bl	8001cd8 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6a:	f7fd f835 	bl	8001cd8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e03f      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7c:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <HAL_RCC_OscConfig+0x644>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <HAL_RCC_OscConfig+0x5aa>
 8004c88:	e037      	b.n	8004cfa <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e032      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <HAL_RCC_OscConfig+0x644>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d028      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d121      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d11a      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ccc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d111      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d001      	beq.n	8004cfa <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40023800 	.word	0x40023800
 8004d08:	0800f8f8 	.word	0x0800f8f8
 8004d0c:	42470060 	.word	0x42470060

08004d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e174      	b.n	800500e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x24>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b0f      	cmp	r3, #15
 8004d32:	d904      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x2e>
 8004d34:	f240 215a 	movw	r1, #602	; 0x25a
 8004d38:	487b      	ldr	r0, [pc, #492]	; (8004f28 <HAL_RCC_ClockConfig+0x218>)
 8004d3a:	f7fc f888 	bl	8000e4e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d019      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x68>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d016      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x68>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d013      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x68>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d010      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x68>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d00d      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x68>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b05      	cmp	r3, #5
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x68>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b06      	cmp	r3, #6
 8004d66:	d007      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x68>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b07      	cmp	r3, #7
 8004d6c:	d004      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x68>
 8004d6e:	f240 215b 	movw	r1, #603	; 0x25b
 8004d72:	486d      	ldr	r0, [pc, #436]	; (8004f28 <HAL_RCC_ClockConfig+0x218>)
 8004d74:	f7fc f86b 	bl	8000e4e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d78:	4b6c      	ldr	r3, [pc, #432]	; (8004f2c <HAL_RCC_ClockConfig+0x21c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d90c      	bls.n	8004da0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d86:	4b69      	ldr	r3, [pc, #420]	; (8004f2c <HAL_RCC_ClockConfig+0x21c>)
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8e:	4b67      	ldr	r3, [pc, #412]	; (8004f2c <HAL_RCC_ClockConfig+0x21c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e136      	b.n	800500e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d049      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004db8:	4b5d      	ldr	r3, [pc, #372]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4a5c      	ldr	r2, [pc, #368]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dd0:	4b57      	ldr	r3, [pc, #348]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4a56      	ldr	r2, [pc, #344]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d024      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x11e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x11e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b90      	cmp	r3, #144	; 0x90
 8004df2:	d01c      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x11e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2ba0      	cmp	r3, #160	; 0xa0
 8004dfa:	d018      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x11e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2bb0      	cmp	r3, #176	; 0xb0
 8004e02:	d014      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x11e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2bc0      	cmp	r3, #192	; 0xc0
 8004e0a:	d010      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x11e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2bd0      	cmp	r3, #208	; 0xd0
 8004e12:	d00c      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x11e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2be0      	cmp	r3, #224	; 0xe0
 8004e1a:	d008      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x11e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2bf0      	cmp	r3, #240	; 0xf0
 8004e22:	d004      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x11e>
 8004e24:	f240 217e 	movw	r1, #638	; 0x27e
 8004e28:	483f      	ldr	r0, [pc, #252]	; (8004f28 <HAL_RCC_ClockConfig+0x218>)
 8004e2a:	f7fc f810 	bl	8000e4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e2e:	4b40      	ldr	r3, [pc, #256]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	493d      	ldr	r1, [pc, #244]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d059      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d010      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x166>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d00c      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x166>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d008      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x166>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d004      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x166>
 8004e6c:	f240 2185 	movw	r1, #645	; 0x285
 8004e70:	482d      	ldr	r0, [pc, #180]	; (8004f28 <HAL_RCC_ClockConfig+0x218>)
 8004e72:	f7fb ffec 	bl	8000e4e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d107      	bne.n	8004e8e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7e:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d119      	bne.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e0bf      	b.n	800500e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9e:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0af      	b.n	800500e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e0a7      	b.n	800500e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ebe:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 0203 	bic.w	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4919      	ldr	r1, [pc, #100]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ed0:	f7fc ff02 	bl	8001cd8 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed8:	f7fc fefe 	bl	8001cd8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e08f      	b.n	800500e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <HAL_RCC_ClockConfig+0x220>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 020c 	and.w	r2, r3, #12
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d1eb      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_RCC_ClockConfig+0x21c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d212      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0e:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <HAL_RCC_ClockConfig+0x21c>)
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_ClockConfig+0x21c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d007      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e072      	b.n	800500e <HAL_RCC_ClockConfig+0x2fe>
 8004f28:	0800f8f8 	.word	0x0800f8f8
 8004f2c:	40023c00 	.word	0x40023c00
 8004f30:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d025      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d018      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x26a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f50:	d013      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x26a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f5a:	d00e      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x26a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004f64:	d009      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x26a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004f6e:	d004      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x26a>
 8004f70:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004f74:	4828      	ldr	r0, [pc, #160]	; (8005018 <HAL_RCC_ClockConfig+0x308>)
 8004f76:	f7fb ff6a 	bl	8000e4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f7a:	4b28      	ldr	r3, [pc, #160]	; (800501c <HAL_RCC_ClockConfig+0x30c>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	4925      	ldr	r1, [pc, #148]	; (800501c <HAL_RCC_ClockConfig+0x30c>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d026      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d018      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x2c2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa8:	d013      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x2c2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x2c2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004fbc:	d009      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x2c2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004fc6:	d004      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x2c2>
 8004fc8:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004fcc:	4812      	ldr	r0, [pc, #72]	; (8005018 <HAL_RCC_ClockConfig+0x308>)
 8004fce:	f7fb ff3e 	bl	8000e4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_RCC_ClockConfig+0x30c>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	490e      	ldr	r1, [pc, #56]	; (800501c <HAL_RCC_ClockConfig+0x30c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fe6:	f000 f821 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8004fea:	4602      	mov	r2, r0
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_RCC_ClockConfig+0x30c>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	490a      	ldr	r1, [pc, #40]	; (8005020 <HAL_RCC_ClockConfig+0x310>)
 8004ff8:	5ccb      	ldrb	r3, [r1, r3]
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	4a09      	ldr	r2, [pc, #36]	; (8005024 <HAL_RCC_ClockConfig+0x314>)
 8005000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_ClockConfig+0x318>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fc fb36 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	0800f8f8 	.word	0x0800f8f8
 800501c:	40023800 	.word	0x40023800
 8005020:	080123d0 	.word	0x080123d0
 8005024:	20000074 	.word	0x20000074
 8005028:	20000078 	.word	0x20000078

0800502c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800502c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005030:	b090      	sub	sp, #64	; 0x40
 8005032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
 8005038:	2300      	movs	r3, #0
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503c:	2300      	movs	r3, #0
 800503e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 030c 	and.w	r3, r3, #12
 800504c:	2b08      	cmp	r3, #8
 800504e:	d00d      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x40>
 8005050:	2b08      	cmp	r3, #8
 8005052:	f200 80a1 	bhi.w	8005198 <HAL_RCC_GetSysClockFreq+0x16c>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_RCC_GetSysClockFreq+0x34>
 800505a:	2b04      	cmp	r3, #4
 800505c:	d003      	beq.n	8005066 <HAL_RCC_GetSysClockFreq+0x3a>
 800505e:	e09b      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005062:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005064:	e09b      	b.n	800519e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005066:	4b53      	ldr	r3, [pc, #332]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005068:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800506a:	e098      	b.n	800519e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800506c:	4b4f      	ldr	r3, [pc, #316]	; (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005076:	4b4d      	ldr	r3, [pc, #308]	; (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d028      	beq.n	80050d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b4a      	ldr	r3, [pc, #296]	; (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	2200      	movs	r2, #0
 800508a:	623b      	str	r3, [r7, #32]
 800508c:	627a      	str	r2, [r7, #36]	; 0x24
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005094:	2100      	movs	r1, #0
 8005096:	4b47      	ldr	r3, [pc, #284]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005098:	fb03 f201 	mul.w	r2, r3, r1
 800509c:	2300      	movs	r3, #0
 800509e:	fb00 f303 	mul.w	r3, r0, r3
 80050a2:	4413      	add	r3, r2
 80050a4:	4a43      	ldr	r2, [pc, #268]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80050a6:	fba0 1202 	umull	r1, r2, r0, r2
 80050aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ac:	460a      	mov	r2, r1
 80050ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80050b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b2:	4413      	add	r3, r2
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b8:	2200      	movs	r2, #0
 80050ba:	61bb      	str	r3, [r7, #24]
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80050c6:	f7fb f8db 	bl	8000280 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4613      	mov	r3, r2
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d2:	e053      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050d4:	4b35      	ldr	r3, [pc, #212]	; (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	099b      	lsrs	r3, r3, #6
 80050da:	2200      	movs	r2, #0
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	617a      	str	r2, [r7, #20]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80050e6:	f04f 0b00 	mov.w	fp, #0
 80050ea:	4652      	mov	r2, sl
 80050ec:	465b      	mov	r3, fp
 80050ee:	f04f 0000 	mov.w	r0, #0
 80050f2:	f04f 0100 	mov.w	r1, #0
 80050f6:	0159      	lsls	r1, r3, #5
 80050f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050fc:	0150      	lsls	r0, r2, #5
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	ebb2 080a 	subs.w	r8, r2, sl
 8005106:	eb63 090b 	sbc.w	r9, r3, fp
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005116:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800511a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800511e:	ebb2 0408 	subs.w	r4, r2, r8
 8005122:	eb63 0509 	sbc.w	r5, r3, r9
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	00eb      	lsls	r3, r5, #3
 8005130:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005134:	00e2      	lsls	r2, r4, #3
 8005136:	4614      	mov	r4, r2
 8005138:	461d      	mov	r5, r3
 800513a:	eb14 030a 	adds.w	r3, r4, sl
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	eb45 030b 	adc.w	r3, r5, fp
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005152:	4629      	mov	r1, r5
 8005154:	028b      	lsls	r3, r1, #10
 8005156:	4621      	mov	r1, r4
 8005158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800515c:	4621      	mov	r1, r4
 800515e:	028a      	lsls	r2, r1, #10
 8005160:	4610      	mov	r0, r2
 8005162:	4619      	mov	r1, r3
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	2200      	movs	r2, #0
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	60fa      	str	r2, [r7, #12]
 800516c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005170:	f7fb f886 	bl	8000280 <__aeabi_uldivmod>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4613      	mov	r3, r2
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_RCC_GetSysClockFreq+0x180>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	0c1b      	lsrs	r3, r3, #16
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	3301      	adds	r3, #1
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800518c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005196:	e002      	b.n	800519e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800519a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800519c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3740      	adds	r7, #64	; 0x40
 80051a4:	46bd      	mov	sp, r7
 80051a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051aa:	bf00      	nop
 80051ac:	40023800 	.word	0x40023800
 80051b0:	00f42400 	.word	0x00f42400
 80051b4:	017d7840 	.word	0x017d7840

080051b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051bc:	4b03      	ldr	r3, [pc, #12]	; (80051cc <HAL_RCC_GetHCLKFreq+0x14>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000074 	.word	0x20000074

080051d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051d4:	f7ff fff0 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0a9b      	lsrs	r3, r3, #10
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4903      	ldr	r1, [pc, #12]	; (80051f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40023800 	.word	0x40023800
 80051f4:	080123e0 	.word	0x080123e0

080051f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051fc:	f7ff ffdc 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	0b5b      	lsrs	r3, r3, #13
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <HAL_RCC_GetPCLK2Freq+0x24>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	080123e0 	.word	0x080123e0

08005220 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	220f      	movs	r2, #15
 800522e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005230:	4b12      	ldr	r3, [pc, #72]	; (800527c <HAL_RCC_GetClockConfig+0x5c>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0203 	and.w	r2, r3, #3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800523c:	4b0f      	ldr	r3, [pc, #60]	; (800527c <HAL_RCC_GetClockConfig+0x5c>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <HAL_RCC_GetClockConfig+0x5c>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <HAL_RCC_GetClockConfig+0x5c>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	08db      	lsrs	r3, r3, #3
 800525a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005262:	4b07      	ldr	r3, [pc, #28]	; (8005280 <HAL_RCC_GetClockConfig+0x60>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0207 	and.w	r2, r3, #7
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	601a      	str	r2, [r3, #0]
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800
 8005280:	40023c00 	.word	0x40023c00

08005284 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b0f      	cmp	r3, #15
 80052a2:	d904      	bls.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80052a4:	f640 11d7 	movw	r1, #2519	; 0x9d7
 80052a8:	4834      	ldr	r0, [pc, #208]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80052aa:	f7fb fdd0 	bl	8000e4e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d105      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d066      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d903      	bls.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	2b07      	cmp	r3, #7
 80052d4:	d904      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80052d6:	f640 11de 	movw	r1, #2526	; 0x9de
 80052da:	4828      	ldr	r0, [pc, #160]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80052dc:	f7fb fdb7 	bl	8000e4e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b31      	cmp	r3, #49	; 0x31
 80052e6:	d904      	bls.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80052f0:	d904      	bls.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80052f2:	f640 11df 	movw	r1, #2527	; 0x9df
 80052f6:	4821      	ldr	r0, [pc, #132]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80052f8:	f7fb fda9 	bl	8000e4e <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d903      	bls.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b3f      	cmp	r3, #63	; 0x3f
 800530a:	d904      	bls.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800530c:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8005310:	481a      	ldr	r0, [pc, #104]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005312:	f7fb fd9c 	bl	8000e4e <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005316:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800531c:	f7fc fcdc 	bl	8001cd8 <HAL_GetTick>
 8005320:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005324:	f7fc fcd8 	bl	8001cd8 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e1b3      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	019b      	lsls	r3, r3, #6
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	071b      	lsls	r3, r3, #28
 8005354:	490b      	ldr	r1, [pc, #44]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800535c:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005362:	f7fc fcb9 	bl	8001cd8 <HAL_GetTick>
 8005366:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005368:	e00e      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800536a:	f7fc fcb5 	bl	8001cd8 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d907      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e190      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800537c:	0800f930 	.word	0x0800f930
 8005380:	42470068 	.word	0x42470068
 8005384:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005388:	4b88      	ldr	r3, [pc, #544]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ea      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8173 	beq.w	8005688 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	f000 80a6 	beq.w	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b6:	f000 80a0 	beq.w	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	4a7c      	ldr	r2, [pc, #496]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	f000 809a 	beq.w	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	4a7a      	ldr	r2, [pc, #488]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	f000 8094 	beq.w	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	4a78      	ldr	r2, [pc, #480]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	f000 808e 	beq.w	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	4a76      	ldr	r2, [pc, #472]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	f000 8088 	beq.w	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	4a74      	ldr	r2, [pc, #464]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	f000 8082 	beq.w	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	4a72      	ldr	r2, [pc, #456]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d07c      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	4a70      	ldr	r2, [pc, #448]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d077      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	4a6f      	ldr	r2, [pc, #444]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d072      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	4a6d      	ldr	r2, [pc, #436]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d06d      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	4a6c      	ldr	r2, [pc, #432]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d068      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	4a6a      	ldr	r2, [pc, #424]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d063      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	4a69      	ldr	r2, [pc, #420]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d05e      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	4a67      	ldr	r2, [pc, #412]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d059      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	4a66      	ldr	r2, [pc, #408]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d054      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	4a64      	ldr	r2, [pc, #400]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d04f      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	4a63      	ldr	r2, [pc, #396]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d04a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	4a61      	ldr	r2, [pc, #388]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d045      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	4a60      	ldr	r2, [pc, #384]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d040      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	4a5e      	ldr	r2, [pc, #376]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d03b      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	4a5d      	ldr	r2, [pc, #372]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d036      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	4a5b      	ldr	r2, [pc, #364]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d031      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	4a5a      	ldr	r2, [pc, #360]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d02c      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	4a58      	ldr	r2, [pc, #352]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d027      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	4a57      	ldr	r2, [pc, #348]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d022      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	4a55      	ldr	r2, [pc, #340]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01d      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	4a54      	ldr	r2, [pc, #336]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d018      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	4a52      	ldr	r2, [pc, #328]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	4a51      	ldr	r2, [pc, #324]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	4a4f      	ldr	r2, [pc, #316]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d009      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	4a4e      	ldr	r2, [pc, #312]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054f0:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 80054f4:	484c      	ldr	r0, [pc, #304]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80054f6:	f7fb fcaa 	bl	8000e4e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	4b2b      	ldr	r3, [pc, #172]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	4a2a      	ldr	r2, [pc, #168]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005508:	6413      	str	r3, [r2, #64]	; 0x40
 800550a:	4b28      	ldr	r3, [pc, #160]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005516:	4b45      	ldr	r3, [pc, #276]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a44      	ldr	r2, [pc, #272]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800551c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005520:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005522:	f7fc fbd9 	bl	8001cd8 <HAL_GetTick>
 8005526:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005528:	e008      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800552a:	f7fc fbd5 	bl	8001cd8 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e0b0      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800553c:	4b3b      	ldr	r3, [pc, #236]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005548:	4b18      	ldr	r3, [pc, #96]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005550:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d073      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	429a      	cmp	r2, r3
 8005564:	d06c      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005570:	4b2f      	ldr	r3, [pc, #188]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005576:	4b2e      	ldr	r3, [pc, #184]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800557c:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005582:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b01      	cmp	r3, #1
 800558c:	d158      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800558e:	f7fc fba3 	bl	8001cd8 <HAL_GetTick>
 8005592:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005594:	e04e      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005596:	f7fc fb9f 	bl	8001cd8 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d945      	bls.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e078      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80055ac:	40023800 	.word	0x40023800
 80055b0:	00020300 	.word	0x00020300
 80055b4:	00030300 	.word	0x00030300
 80055b8:	00040300 	.word	0x00040300
 80055bc:	00050300 	.word	0x00050300
 80055c0:	00060300 	.word	0x00060300
 80055c4:	00070300 	.word	0x00070300
 80055c8:	00080300 	.word	0x00080300
 80055cc:	00090300 	.word	0x00090300
 80055d0:	000a0300 	.word	0x000a0300
 80055d4:	000b0300 	.word	0x000b0300
 80055d8:	000c0300 	.word	0x000c0300
 80055dc:	000d0300 	.word	0x000d0300
 80055e0:	000e0300 	.word	0x000e0300
 80055e4:	000f0300 	.word	0x000f0300
 80055e8:	00100300 	.word	0x00100300
 80055ec:	00110300 	.word	0x00110300
 80055f0:	00120300 	.word	0x00120300
 80055f4:	00130300 	.word	0x00130300
 80055f8:	00140300 	.word	0x00140300
 80055fc:	00150300 	.word	0x00150300
 8005600:	00160300 	.word	0x00160300
 8005604:	00170300 	.word	0x00170300
 8005608:	00180300 	.word	0x00180300
 800560c:	00190300 	.word	0x00190300
 8005610:	001a0300 	.word	0x001a0300
 8005614:	001b0300 	.word	0x001b0300
 8005618:	001c0300 	.word	0x001c0300
 800561c:	001d0300 	.word	0x001d0300
 8005620:	001e0300 	.word	0x001e0300
 8005624:	001f0300 	.word	0x001f0300
 8005628:	0800f930 	.word	0x0800f930
 800562c:	40007000 	.word	0x40007000
 8005630:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	4b1c      	ldr	r3, [pc, #112]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0aa      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800564c:	d10d      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800565e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005662:	4911      	ldr	r1, [pc, #68]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005664:	4313      	orrs	r3, r2
 8005666:	608b      	str	r3, [r1, #8]
 8005668:	e005      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800566a:	4b0f      	ldr	r3, [pc, #60]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4a0e      	ldr	r2, [pc, #56]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005670:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005674:	6093      	str	r3, [r2, #8]
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005678:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005682:	4909      	ldr	r1, [pc, #36]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005684:	4313      	orrs	r3, r2
 8005686:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	7d1a      	ldrb	r2, [r3, #20]
 8005698:	4b04      	ldr	r3, [pc, #16]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800569a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800
 80056ac:	424711e0 	.word	0x424711e0

080056b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e0c4      	b.n	8005850 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a63      	ldr	r2, [pc, #396]	; (8005858 <HAL_RTC_Init+0x1a8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_RTC_Init+0x2a>
 80056d0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80056d4:	4861      	ldr	r0, [pc, #388]	; (800585c <HAL_RTC_Init+0x1ac>)
 80056d6:	f7fb fbba 	bl	8000e4e <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d008      	beq.n	80056f4 <HAL_RTC_Init+0x44>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <HAL_RTC_Init+0x44>
 80056ea:	f240 1105 	movw	r1, #261	; 0x105
 80056ee:	485b      	ldr	r0, [pc, #364]	; (800585c <HAL_RTC_Init+0x1ac>)
 80056f0:	f7fb fbad 	bl	8000e4e <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b7f      	cmp	r3, #127	; 0x7f
 80056fa:	d904      	bls.n	8005706 <HAL_RTC_Init+0x56>
 80056fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005700:	4856      	ldr	r0, [pc, #344]	; (800585c <HAL_RTC_Init+0x1ac>)
 8005702:	f7fb fba4 	bl	8000e4e <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570e:	d304      	bcc.n	800571a <HAL_RTC_Init+0x6a>
 8005710:	f240 1107 	movw	r1, #263	; 0x107
 8005714:	4851      	ldr	r0, [pc, #324]	; (800585c <HAL_RTC_Init+0x1ac>)
 8005716:	f7fb fb9a 	bl	8000e4e <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d013      	beq.n	800574a <HAL_RTC_Init+0x9a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800572a:	d00e      	beq.n	800574a <HAL_RTC_Init+0x9a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005734:	d009      	beq.n	800574a <HAL_RTC_Init+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800573e:	d004      	beq.n	800574a <HAL_RTC_Init+0x9a>
 8005740:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005744:	4845      	ldr	r0, [pc, #276]	; (800585c <HAL_RTC_Init+0x1ac>)
 8005746:	f7fb fb82 	bl	8000e4e <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <HAL_RTC_Init+0xb6>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800575a:	d004      	beq.n	8005766 <HAL_RTC_Init+0xb6>
 800575c:	f240 1109 	movw	r1, #265	; 0x109
 8005760:	483e      	ldr	r0, [pc, #248]	; (800585c <HAL_RTC_Init+0x1ac>)
 8005762:	f7fb fb74 	bl	8000e4e <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <HAL_RTC_Init+0xd2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005776:	d004      	beq.n	8005782 <HAL_RTC_Init+0xd2>
 8005778:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800577c:	4837      	ldr	r0, [pc, #220]	; (800585c <HAL_RTC_Init+0x1ac>)
 800577e:	f7fb fb66 	bl	8000e4e <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7f5b      	ldrb	r3, [r3, #29]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fb fbc0 	bl	8000f18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	22ca      	movs	r2, #202	; 0xca
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2253      	movs	r2, #83	; 0x53
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fad2 	bl	8005d58 <RTC_EnterInitMode>
 80057b4:	4603      	mov	r3, r0
 80057b6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d12c      	bne.n	8005818 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6899      	ldr	r1, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	68d2      	ldr	r2, [r2, #12]
 80057f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6919      	ldr	r1, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	041a      	lsls	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fad9 	bl	8005dc6 <RTC_ExitInitMode>
 8005814:	4603      	mov	r3, r0
 8005816:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d113      	bne.n	8005846 <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	22ff      	movs	r2, #255	; 0xff
 800584c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40002800 	.word	0x40002800
 800585c:	0800f96c 	.word	0x0800f96c

08005860 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <HAL_RTC_SetTime+0x26>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d004      	beq.n	8005886 <HAL_RTC_SetTime+0x26>
 800587c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8005880:	489a      	ldr	r0, [pc, #616]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 8005882:	f7fb fae4 	bl	8000e4e <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800588e:	d00d      	beq.n	80058ac <HAL_RTC_SetTime+0x4c>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005898:	d008      	beq.n	80058ac <HAL_RTC_SetTime+0x4c>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <HAL_RTC_SetTime+0x4c>
 80058a2:	f240 21b5 	movw	r1, #693	; 0x2b5
 80058a6:	4891      	ldr	r0, [pc, #580]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 80058a8:	f7fb fad1 	bl	8000e4e <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <HAL_RTC_SetTime+0x68>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058bc:	d004      	beq.n	80058c8 <HAL_RTC_SetTime+0x68>
 80058be:	f240 21b6 	movw	r1, #694	; 0x2b6
 80058c2:	488a      	ldr	r0, [pc, #552]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 80058c4:	f7fb fac3 	bl	8000e4e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	7f1b      	ldrb	r3, [r3, #28]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_RTC_SetTime+0x74>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e107      	b.n	8005ae4 <HAL_RTC_SetTime+0x284>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2202      	movs	r2, #2
 80058de:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d15c      	bne.n	80059a0 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01a      	beq.n	800592a <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_RTC_SetTime+0xa4>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	d904      	bls.n	800590e <HAL_RTC_SetTime+0xae>
 8005904:	f240 21c1 	movw	r1, #705	; 0x2c1
 8005908:	4878      	ldr	r0, [pc, #480]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 800590a:	f7fb faa0 	bl	8000e4e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	78db      	ldrb	r3, [r3, #3]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d015      	beq.n	8005942 <HAL_RTC_SetTime+0xe2>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	78db      	ldrb	r3, [r3, #3]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d011      	beq.n	8005942 <HAL_RTC_SetTime+0xe2>
 800591e:	f240 21c2 	movw	r1, #706	; 0x2c2
 8005922:	4872      	ldr	r0, [pc, #456]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 8005924:	f7fb fa93 	bl	8000e4e <assert_failed>
 8005928:	e00b      	b.n	8005942 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2200      	movs	r2, #0
 800592e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b17      	cmp	r3, #23
 8005936:	d904      	bls.n	8005942 <HAL_RTC_SetTime+0xe2>
 8005938:	f240 21c7 	movw	r1, #711	; 0x2c7
 800593c:	486b      	ldr	r0, [pc, #428]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 800593e:	f7fb fa86 	bl	8000e4e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b3b      	cmp	r3, #59	; 0x3b
 8005948:	d904      	bls.n	8005954 <HAL_RTC_SetTime+0xf4>
 800594a:	f240 21c9 	movw	r1, #713	; 0x2c9
 800594e:	4867      	ldr	r0, [pc, #412]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 8005950:	f7fb fa7d 	bl	8000e4e <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	789b      	ldrb	r3, [r3, #2]
 8005958:	2b3b      	cmp	r3, #59	; 0x3b
 800595a:	d904      	bls.n	8005966 <HAL_RTC_SetTime+0x106>
 800595c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005960:	4862      	ldr	r0, [pc, #392]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 8005962:	f7fb fa74 	bl	8000e4e <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fa50 	bl	8005e10 <RTC_ByteToBcd2>
 8005970:	4603      	mov	r3, r0
 8005972:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fa49 	bl	8005e10 <RTC_ByteToBcd2>
 800597e:	4603      	mov	r3, r0
 8005980:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005982:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	789b      	ldrb	r3, [r3, #2]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fa41 	bl	8005e10 <RTC_ByteToBcd2>
 800598e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005990:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	78db      	ldrb	r3, [r3, #3]
 8005998:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e062      	b.n	8005a66 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d022      	beq.n	80059f4 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fa49 	bl	8005e4a <RTC_Bcd2ToByte>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <HAL_RTC_SetTime+0x16e>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fa41 	bl	8005e4a <RTC_Bcd2ToByte>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b0c      	cmp	r3, #12
 80059cc:	d904      	bls.n	80059d8 <HAL_RTC_SetTime+0x178>
 80059ce:	f240 21d5 	movw	r1, #725	; 0x2d5
 80059d2:	4846      	ldr	r0, [pc, #280]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 80059d4:	f7fb fa3b 	bl	8000e4e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	78db      	ldrb	r3, [r3, #3]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d019      	beq.n	8005a14 <HAL_RTC_SetTime+0x1b4>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	78db      	ldrb	r3, [r3, #3]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d015      	beq.n	8005a14 <HAL_RTC_SetTime+0x1b4>
 80059e8:	f240 21d6 	movw	r1, #726	; 0x2d6
 80059ec:	483f      	ldr	r0, [pc, #252]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 80059ee:	f7fb fa2e 	bl	8000e4e <assert_failed>
 80059f2:	e00f      	b.n	8005a14 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2200      	movs	r2, #0
 80059f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fa23 	bl	8005e4a <RTC_Bcd2ToByte>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b17      	cmp	r3, #23
 8005a08:	d904      	bls.n	8005a14 <HAL_RTC_SetTime+0x1b4>
 8005a0a:	f240 21db 	movw	r1, #731	; 0x2db
 8005a0e:	4837      	ldr	r0, [pc, #220]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 8005a10:	f7fb fa1d 	bl	8000e4e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fa16 	bl	8005e4a <RTC_Bcd2ToByte>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b3b      	cmp	r3, #59	; 0x3b
 8005a22:	d904      	bls.n	8005a2e <HAL_RTC_SetTime+0x1ce>
 8005a24:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005a28:	4830      	ldr	r0, [pc, #192]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 8005a2a:	f7fb fa10 	bl	8000e4e <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	789b      	ldrb	r3, [r3, #2]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fa09 	bl	8005e4a <RTC_Bcd2ToByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b3b      	cmp	r3, #59	; 0x3b
 8005a3c:	d904      	bls.n	8005a48 <HAL_RTC_SetTime+0x1e8>
 8005a3e:	f240 21de 	movw	r1, #734	; 0x2de
 8005a42:	482a      	ldr	r0, [pc, #168]	; (8005aec <HAL_RTC_SetTime+0x28c>)
 8005a44:	f7fb fa03 	bl	8000e4e <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a54:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a5a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	78db      	ldrb	r3, [r3, #3]
 8005a60:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	22ca      	movs	r2, #202	; 0xca
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2253      	movs	r2, #83	; 0x53
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f96e 	bl	8005d58 <RTC_EnterInitMode>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a80:	7cfb      	ldrb	r3, [r7, #19]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d120      	bne.n	8005ac8 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a90:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a94:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005aa4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6899      	ldr	r1, [r3, #8]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f981 	bl	8005dc6 <RTC_ExitInitMode>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ac8:	7cfb      	ldrb	r3, [r7, #19]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d102      	bne.n	8005ad4 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	22ff      	movs	r2, #255	; 0xff
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	771a      	strb	r2, [r3, #28]

  return status;
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd90      	pop	{r4, r7, pc}
 8005aec:	0800f96c 	.word	0x0800f96c

08005af0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005af0:	b590      	push	{r4, r7, lr}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <HAL_RTC_SetDate+0x26>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d004      	beq.n	8005b16 <HAL_RTC_SetDate+0x26>
 8005b0c:	f240 3153 	movw	r1, #851	; 0x353
 8005b10:	487c      	ldr	r0, [pc, #496]	; (8005d04 <HAL_RTC_SetDate+0x214>)
 8005b12:	f7fb f99c 	bl	8000e4e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	7f1b      	ldrb	r3, [r3, #28]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_RTC_SetDate+0x32>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e0ec      	b.n	8005cfc <HAL_RTC_SetDate+0x20c>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10e      	bne.n	8005b52 <HAL_RTC_SetDate+0x62>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	f023 0310 	bic.w	r3, r3, #16
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	330a      	adds	r3, #10
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d01c      	beq.n	8005b94 <HAL_RTC_SetDate+0xa4>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d018      	beq.n	8005b94 <HAL_RTC_SetDate+0xa4>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d014      	beq.n	8005b94 <HAL_RTC_SetDate+0xa4>
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d010      	beq.n	8005b94 <HAL_RTC_SetDate+0xa4>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d00c      	beq.n	8005b94 <HAL_RTC_SetDate+0xa4>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b06      	cmp	r3, #6
 8005b80:	d008      	beq.n	8005b94 <HAL_RTC_SetDate+0xa4>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b07      	cmp	r3, #7
 8005b88:	d004      	beq.n	8005b94 <HAL_RTC_SetDate+0xa4>
 8005b8a:	f240 315f 	movw	r1, #863	; 0x35f
 8005b8e:	485d      	ldr	r0, [pc, #372]	; (8005d04 <HAL_RTC_SetDate+0x214>)
 8005b90:	f7fb f95d 	bl	8000e4e <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d13f      	bne.n	8005c1a <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	78db      	ldrb	r3, [r3, #3]
 8005b9e:	2b63      	cmp	r3, #99	; 0x63
 8005ba0:	d904      	bls.n	8005bac <HAL_RTC_SetDate+0xbc>
 8005ba2:	f240 3163 	movw	r1, #867	; 0x363
 8005ba6:	4857      	ldr	r0, [pc, #348]	; (8005d04 <HAL_RTC_SetDate+0x214>)
 8005ba8:	f7fb f951 	bl	8000e4e <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_RTC_SetDate+0xcc>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b0c      	cmp	r3, #12
 8005bba:	d904      	bls.n	8005bc6 <HAL_RTC_SetDate+0xd6>
 8005bbc:	f44f 7159 	mov.w	r1, #868	; 0x364
 8005bc0:	4850      	ldr	r0, [pc, #320]	; (8005d04 <HAL_RTC_SetDate+0x214>)
 8005bc2:	f7fb f944 	bl	8000e4e <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	789b      	ldrb	r3, [r3, #2]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_RTC_SetDate+0xe6>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	789b      	ldrb	r3, [r3, #2]
 8005bd2:	2b1f      	cmp	r3, #31
 8005bd4:	d904      	bls.n	8005be0 <HAL_RTC_SetDate+0xf0>
 8005bd6:	f240 3165 	movw	r1, #869	; 0x365
 8005bda:	484a      	ldr	r0, [pc, #296]	; (8005d04 <HAL_RTC_SetDate+0x214>)
 8005bdc:	f7fb f937 	bl	8000e4e <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	78db      	ldrb	r3, [r3, #3]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 f913 	bl	8005e10 <RTC_ByteToBcd2>
 8005bea:	4603      	mov	r3, r0
 8005bec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f90c 	bl	8005e10 <RTC_ByteToBcd2>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bfc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	789b      	ldrb	r3, [r3, #2]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f904 	bl	8005e10 <RTC_ByteToBcd2>
 8005c08:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c0a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e045      	b.n	8005ca6 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	78db      	ldrb	r3, [r3, #3]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 f913 	bl	8005e4a <RTC_Bcd2ToByte>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b63      	cmp	r3, #99	; 0x63
 8005c28:	d904      	bls.n	8005c34 <HAL_RTC_SetDate+0x144>
 8005c2a:	f240 316e 	movw	r1, #878	; 0x36e
 8005c2e:	4835      	ldr	r0, [pc, #212]	; (8005d04 <HAL_RTC_SetDate+0x214>)
 8005c30:	f7fb f90d 	bl	8000e4e <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 f906 	bl	8005e4a <RTC_Bcd2ToByte>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <HAL_RTC_SetDate+0x164>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f8fe 	bl	8005e4a <RTC_Bcd2ToByte>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b0c      	cmp	r3, #12
 8005c52:	d904      	bls.n	8005c5e <HAL_RTC_SetDate+0x16e>
 8005c54:	f240 316f 	movw	r1, #879	; 0x36f
 8005c58:	482a      	ldr	r0, [pc, #168]	; (8005d04 <HAL_RTC_SetDate+0x214>)
 8005c5a:	f7fb f8f8 	bl	8000e4e <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	789b      	ldrb	r3, [r3, #2]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f8f1 	bl	8005e4a <RTC_Bcd2ToByte>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <HAL_RTC_SetDate+0x18e>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	789b      	ldrb	r3, [r3, #2]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f8e9 	bl	8005e4a <RTC_Bcd2ToByte>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b1f      	cmp	r3, #31
 8005c7c:	d904      	bls.n	8005c88 <HAL_RTC_SetDate+0x198>
 8005c7e:	f44f 715c 	mov.w	r1, #880	; 0x370
 8005c82:	4820      	ldr	r0, [pc, #128]	; (8005d04 <HAL_RTC_SetDate+0x214>)
 8005c84:	f7fb f8e3 	bl	8000e4e <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	78db      	ldrb	r3, [r3, #3]
 8005c8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c94:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	22ca      	movs	r2, #202	; 0xca
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2253      	movs	r2, #83	; 0x53
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 f84e 	bl	8005d58 <RTC_EnterInitMode>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cd4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f875 	bl	8005dc6 <RTC_ExitInitMode>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d102      	bne.n	8005cec <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	22ff      	movs	r2, #255	; 0xff
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	771a      	strb	r2, [r3, #28]

  return status;
 8005cfa:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd90      	pop	{r4, r7, pc}
 8005d04:	0800f96c 	.word	0x0800f96c

08005d08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d22:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d24:	f7fb ffd8 	bl	8001cd8 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d2a:	e009      	b.n	8005d40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d2c:	f7fb ffd4 	bl	8001cd8 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d3a:	d901      	bls.n	8005d40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e007      	b.n	8005d50 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0ee      	beq.n	8005d2c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d122      	bne.n	8005dbc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d86:	f7fb ffa7 	bl	8001cd8 <HAL_GetTick>
 8005d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d8c:	e00c      	b.n	8005da8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d8e:	f7fb ffa3 	bl	8001cd8 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d9c:	d904      	bls.n	8005da8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2204      	movs	r2, #4
 8005da2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <RTC_EnterInitMode+0x64>
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d1e8      	bne.n	8005d8e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005de0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff ff89 	bl	8005d08 <HAL_RTC_WaitForSynchro>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005e1e:	e005      	b.n	8005e2c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	3301      	adds	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	3b0a      	subs	r3, #10
 8005e2a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	2b09      	cmp	r3, #9
 8005e30:	d8f6      	bhi.n	8005e20 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	b2db      	uxtb	r3, r3
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	4603      	mov	r3, r0
 8005e52:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	0092      	lsls	r2, r2, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	4413      	add	r3, r2
 8005e74:	b2db      	uxtb	r3, r3
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
	...

08005e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e18c      	b.n	80061b0 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a75      	ldr	r2, [pc, #468]	; (8006070 <HAL_SPI_Init+0x1ec>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d018      	beq.n	8005ed2 <HAL_SPI_Init+0x4e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a73      	ldr	r2, [pc, #460]	; (8006074 <HAL_SPI_Init+0x1f0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <HAL_SPI_Init+0x4e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a72      	ldr	r2, [pc, #456]	; (8006078 <HAL_SPI_Init+0x1f4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_SPI_Init+0x4e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a70      	ldr	r2, [pc, #448]	; (800607c <HAL_SPI_Init+0x1f8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_SPI_Init+0x4e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a6f      	ldr	r2, [pc, #444]	; (8006080 <HAL_SPI_Init+0x1fc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_SPI_Init+0x4e>
 8005ec8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ecc:	486d      	ldr	r0, [pc, #436]	; (8006084 <HAL_SPI_Init+0x200>)
 8005ece:	f7fa ffbe 	bl	8000e4e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <HAL_SPI_Init+0x6a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee2:	d004      	beq.n	8005eee <HAL_SPI_Init+0x6a>
 8005ee4:	f240 1141 	movw	r1, #321	; 0x141
 8005ee8:	4866      	ldr	r0, [pc, #408]	; (8006084 <HAL_SPI_Init+0x200>)
 8005eea:	f7fa ffb0 	bl	8000e4e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00e      	beq.n	8005f14 <HAL_SPI_Init+0x90>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005efe:	d009      	beq.n	8005f14 <HAL_SPI_Init+0x90>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f08:	d004      	beq.n	8005f14 <HAL_SPI_Init+0x90>
 8005f0a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005f0e:	485d      	ldr	r0, [pc, #372]	; (8006084 <HAL_SPI_Init+0x200>)
 8005f10:	f7fa ff9d 	bl	8000e4e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f1c:	d008      	beq.n	8005f30 <HAL_SPI_Init+0xac>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <HAL_SPI_Init+0xac>
 8005f26:	f240 1143 	movw	r1, #323	; 0x143
 8005f2a:	4856      	ldr	r0, [pc, #344]	; (8006084 <HAL_SPI_Init+0x200>)
 8005f2c:	f7fa ff8f 	bl	8000e4e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f38:	d00d      	beq.n	8005f56 <HAL_SPI_Init+0xd2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <HAL_SPI_Init+0xd2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f4a:	d004      	beq.n	8005f56 <HAL_SPI_Init+0xd2>
 8005f4c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005f50:	484c      	ldr	r0, [pc, #304]	; (8006084 <HAL_SPI_Init+0x200>)
 8005f52:	f7fa ff7c 	bl	8000e4e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d020      	beq.n	8005fa0 <HAL_SPI_Init+0x11c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d01c      	beq.n	8005fa0 <HAL_SPI_Init+0x11c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d018      	beq.n	8005fa0 <HAL_SPI_Init+0x11c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	2b18      	cmp	r3, #24
 8005f74:	d014      	beq.n	8005fa0 <HAL_SPI_Init+0x11c>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d010      	beq.n	8005fa0 <HAL_SPI_Init+0x11c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	2b28      	cmp	r3, #40	; 0x28
 8005f84:	d00c      	beq.n	8005fa0 <HAL_SPI_Init+0x11c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	2b30      	cmp	r3, #48	; 0x30
 8005f8c:	d008      	beq.n	8005fa0 <HAL_SPI_Init+0x11c>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	2b38      	cmp	r3, #56	; 0x38
 8005f94:	d004      	beq.n	8005fa0 <HAL_SPI_Init+0x11c>
 8005f96:	f240 1145 	movw	r1, #325	; 0x145
 8005f9a:	483a      	ldr	r0, [pc, #232]	; (8006084 <HAL_SPI_Init+0x200>)
 8005f9c:	f7fa ff57 	bl	8000e4e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d008      	beq.n	8005fba <HAL_SPI_Init+0x136>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	2b80      	cmp	r3, #128	; 0x80
 8005fae:	d004      	beq.n	8005fba <HAL_SPI_Init+0x136>
 8005fb0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005fb4:	4833      	ldr	r0, [pc, #204]	; (8006084 <HAL_SPI_Init+0x200>)
 8005fb6:	f7fa ff4a 	bl	8000e4e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <HAL_SPI_Init+0x150>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	2b10      	cmp	r3, #16
 8005fc8:	d004      	beq.n	8005fd4 <HAL_SPI_Init+0x150>
 8005fca:	f240 1147 	movw	r1, #327	; 0x147
 8005fce:	482d      	ldr	r0, [pc, #180]	; (8006084 <HAL_SPI_Init+0x200>)
 8005fd0:	f7fa ff3d 	bl	8000e4e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d155      	bne.n	8006088 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <HAL_SPI_Init+0x172>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d004      	beq.n	8005ff6 <HAL_SPI_Init+0x172>
 8005fec:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005ff0:	4824      	ldr	r0, [pc, #144]	; (8006084 <HAL_SPI_Init+0x200>)
 8005ff2:	f7fa ff2c 	bl	8000e4e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_SPI_Init+0x18c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d004      	beq.n	8006010 <HAL_SPI_Init+0x18c>
 8006006:	f240 114b 	movw	r1, #331	; 0x14b
 800600a:	481e      	ldr	r0, [pc, #120]	; (8006084 <HAL_SPI_Init+0x200>)
 800600c:	f7fa ff1f 	bl	8000e4e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006018:	d125      	bne.n	8006066 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d05d      	beq.n	80060de <HAL_SPI_Init+0x25a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	2b08      	cmp	r3, #8
 8006028:	d059      	beq.n	80060de <HAL_SPI_Init+0x25a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	2b10      	cmp	r3, #16
 8006030:	d055      	beq.n	80060de <HAL_SPI_Init+0x25a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	2b18      	cmp	r3, #24
 8006038:	d051      	beq.n	80060de <HAL_SPI_Init+0x25a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	2b20      	cmp	r3, #32
 8006040:	d04d      	beq.n	80060de <HAL_SPI_Init+0x25a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	2b28      	cmp	r3, #40	; 0x28
 8006048:	d049      	beq.n	80060de <HAL_SPI_Init+0x25a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	2b30      	cmp	r3, #48	; 0x30
 8006050:	d045      	beq.n	80060de <HAL_SPI_Init+0x25a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	2b38      	cmp	r3, #56	; 0x38
 8006058:	d041      	beq.n	80060de <HAL_SPI_Init+0x25a>
 800605a:	f240 114f 	movw	r1, #335	; 0x14f
 800605e:	4809      	ldr	r0, [pc, #36]	; (8006084 <HAL_SPI_Init+0x200>)
 8006060:	f7fa fef5 	bl	8000e4e <assert_failed>
 8006064:	e03b      	b.n	80060de <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	61da      	str	r2, [r3, #28]
 800606c:	e037      	b.n	80060de <HAL_SPI_Init+0x25a>
 800606e:	bf00      	nop
 8006070:	40013000 	.word	0x40013000
 8006074:	40003800 	.word	0x40003800
 8006078:	40003c00 	.word	0x40003c00
 800607c:	40013400 	.word	0x40013400
 8006080:	40015000 	.word	0x40015000
 8006084:	0800f9a4 	.word	0x0800f9a4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d020      	beq.n	80060d2 <HAL_SPI_Init+0x24e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	2b08      	cmp	r3, #8
 8006096:	d01c      	beq.n	80060d2 <HAL_SPI_Init+0x24e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	2b10      	cmp	r3, #16
 800609e:	d018      	beq.n	80060d2 <HAL_SPI_Init+0x24e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	2b18      	cmp	r3, #24
 80060a6:	d014      	beq.n	80060d2 <HAL_SPI_Init+0x24e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d010      	beq.n	80060d2 <HAL_SPI_Init+0x24e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	2b28      	cmp	r3, #40	; 0x28
 80060b6:	d00c      	beq.n	80060d2 <HAL_SPI_Init+0x24e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	2b30      	cmp	r3, #48	; 0x30
 80060be:	d008      	beq.n	80060d2 <HAL_SPI_Init+0x24e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	2b38      	cmp	r3, #56	; 0x38
 80060c6:	d004      	beq.n	80060d2 <HAL_SPI_Init+0x24e>
 80060c8:	f240 1159 	movw	r1, #345	; 0x159
 80060cc:	483a      	ldr	r0, [pc, #232]	; (80061b8 <HAL_SPI_Init+0x334>)
 80060ce:	f7fa febe 	bl	8000e4e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d106      	bne.n	80060fe <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fa ff6f 	bl	8000fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006114:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	ea42 0103 	orr.w	r1, r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	0c1b      	lsrs	r3, r3, #16
 800617c:	f003 0104 	and.w	r1, r3, #4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0210 	and.w	r2, r3, #16
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69da      	ldr	r2, [r3, #28]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800619e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	0800f9a4 	.word	0x0800f9a4

080061bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d009      	beq.n	80061ec <HAL_SPI_Transmit+0x30>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e0:	d004      	beq.n	80061ec <HAL_SPI_Transmit+0x30>
 80061e2:	f44f 7142 	mov.w	r1, #776	; 0x308
 80061e6:	4880      	ldr	r0, [pc, #512]	; (80063e8 <HAL_SPI_Transmit+0x22c>)
 80061e8:	f7fa fe31 	bl	8000e4e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_SPI_Transmit+0x3e>
 80061f6:	2302      	movs	r3, #2
 80061f8:	e128      	b.n	800644c <HAL_SPI_Transmit+0x290>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006202:	f7fb fd69 	bl	8001cd8 <HAL_GetTick>
 8006206:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006208:	88fb      	ldrh	r3, [r7, #6]
 800620a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b01      	cmp	r3, #1
 8006216:	d002      	beq.n	800621e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006218:	2302      	movs	r3, #2
 800621a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800621c:	e10d      	b.n	800643a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <HAL_SPI_Transmit+0x6e>
 8006224:	88fb      	ldrh	r3, [r7, #6]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d102      	bne.n	8006230 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800622e:	e104      	b.n	800643a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2203      	movs	r2, #3
 8006234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	88fa      	ldrh	r2, [r7, #6]
 8006248:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	88fa      	ldrh	r2, [r7, #6]
 800624e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006276:	d10f      	bne.n	8006298 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006286:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006296:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d007      	beq.n	80062b6 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062be:	d14b      	bne.n	8006358 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <HAL_SPI_Transmit+0x112>
 80062c8:	8afb      	ldrh	r3, [r7, #22]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d13e      	bne.n	800634c <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	881a      	ldrh	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062de:	1c9a      	adds	r2, r3, #2
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062f2:	e02b      	b.n	800634c <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d112      	bne.n	8006328 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	881a      	ldrh	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	1c9a      	adds	r2, r3, #2
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	86da      	strh	r2, [r3, #54]	; 0x36
 8006326:	e011      	b.n	800634c <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006328:	f7fb fcd6 	bl	8001cd8 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d803      	bhi.n	8006340 <HAL_SPI_Transmit+0x184>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d102      	bne.n	8006346 <HAL_SPI_Transmit+0x18a>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	77fb      	strb	r3, [r7, #31]
          goto error;
 800634a:	e076      	b.n	800643a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1ce      	bne.n	80062f4 <HAL_SPI_Transmit+0x138>
 8006356:	e04e      	b.n	80063f6 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_SPI_Transmit+0x1aa>
 8006360:	8afb      	ldrh	r3, [r7, #22]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d142      	bne.n	80063ec <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	7812      	ldrb	r2, [r2, #0]
 8006372:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800638c:	e02e      	b.n	80063ec <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b02      	cmp	r3, #2
 800639a:	d113      	bne.n	80063c4 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	7812      	ldrb	r2, [r2, #0]
 80063a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80063c2:	e013      	b.n	80063ec <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c4:	f7fb fc88 	bl	8001cd8 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d803      	bhi.n	80063dc <HAL_SPI_Transmit+0x220>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d102      	bne.n	80063e2 <HAL_SPI_Transmit+0x226>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063e6:	e028      	b.n	800643a <HAL_SPI_Transmit+0x27e>
 80063e8:	0800f9a4 	.word	0x0800f9a4
    while (hspi->TxXferCount > 0U)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1cb      	bne.n	800638e <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f8b2 	bl	8006564 <SPI_EndRxTxTransaction>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2220      	movs	r2, #32
 800640a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	613b      	str	r3, [r7, #16]
 8006428:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e000      	b.n	800643a <HAL_SPI_Transmit+0x27e>
  }

error:
 8006438:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800644a:	7ffb      	ldrb	r3, [r7, #31]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006464:	f7fb fc38 	bl	8001cd8 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	4413      	add	r3, r2
 8006472:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006474:	f7fb fc30 	bl	8001cd8 <HAL_GetTick>
 8006478:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800647a:	4b39      	ldr	r3, [pc, #228]	; (8006560 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	015b      	lsls	r3, r3, #5
 8006480:	0d1b      	lsrs	r3, r3, #20
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	fb02 f303 	mul.w	r3, r2, r3
 8006488:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800648a:	e054      	b.n	8006536 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d050      	beq.n	8006536 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006494:	f7fb fc20 	bl	8001cd8 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d902      	bls.n	80064aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d13d      	bne.n	8006526 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064c2:	d111      	bne.n	80064e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064cc:	d004      	beq.n	80064d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d6:	d107      	bne.n	80064e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f0:	d10f      	bne.n	8006512 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006510:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e017      	b.n	8006556 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	3b01      	subs	r3, #1
 8006534:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4013      	ands	r3, r2
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	429a      	cmp	r2, r3
 8006552:	d19b      	bne.n	800648c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000074 	.word	0x20000074

08006564 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af02      	add	r7, sp, #8
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006570:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <SPI_EndRxTxTransaction+0x7c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1b      	ldr	r2, [pc, #108]	; (80065e4 <SPI_EndRxTxTransaction+0x80>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	0d5b      	lsrs	r3, r3, #21
 800657c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006580:	fb02 f303 	mul.w	r3, r2, r3
 8006584:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800658e:	d112      	bne.n	80065b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2200      	movs	r2, #0
 8006598:	2180      	movs	r1, #128	; 0x80
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff ff5a 	bl	8006454 <SPI_WaitFlagStateUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d016      	beq.n	80065d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065aa:	f043 0220 	orr.w	r2, r3, #32
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e00f      	b.n	80065d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3b01      	subs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065cc:	2b80      	cmp	r3, #128	; 0x80
 80065ce:	d0f2      	beq.n	80065b6 <SPI_EndRxTxTransaction+0x52>
 80065d0:	e000      	b.n	80065d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80065d2:	bf00      	nop
  }

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000074 	.word	0x20000074
 80065e4:	165e9f81 	.word	0x165e9f81

080065e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e0a7      	b.n	800674a <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a55      	ldr	r2, [pc, #340]	; (8006754 <HAL_TIM_Base_Init+0x16c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d027      	beq.n	8006654 <HAL_TIM_Base_Init+0x6c>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d022      	beq.n	8006654 <HAL_TIM_Base_Init+0x6c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a51      	ldr	r2, [pc, #324]	; (8006758 <HAL_TIM_Base_Init+0x170>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d01d      	beq.n	8006654 <HAL_TIM_Base_Init+0x6c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a4f      	ldr	r2, [pc, #316]	; (800675c <HAL_TIM_Base_Init+0x174>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d018      	beq.n	8006654 <HAL_TIM_Base_Init+0x6c>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a4e      	ldr	r2, [pc, #312]	; (8006760 <HAL_TIM_Base_Init+0x178>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d013      	beq.n	8006654 <HAL_TIM_Base_Init+0x6c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a4c      	ldr	r2, [pc, #304]	; (8006764 <HAL_TIM_Base_Init+0x17c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00e      	beq.n	8006654 <HAL_TIM_Base_Init+0x6c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a4b      	ldr	r2, [pc, #300]	; (8006768 <HAL_TIM_Base_Init+0x180>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d009      	beq.n	8006654 <HAL_TIM_Base_Init+0x6c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a49      	ldr	r2, [pc, #292]	; (800676c <HAL_TIM_Base_Init+0x184>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d004      	beq.n	8006654 <HAL_TIM_Base_Init+0x6c>
 800664a:	f240 1113 	movw	r1, #275	; 0x113
 800664e:	4848      	ldr	r0, [pc, #288]	; (8006770 <HAL_TIM_Base_Init+0x188>)
 8006650:	f7fa fbfd 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d014      	beq.n	8006686 <HAL_TIM_Base_Init+0x9e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b10      	cmp	r3, #16
 8006662:	d010      	beq.n	8006686 <HAL_TIM_Base_Init+0x9e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b20      	cmp	r3, #32
 800666a:	d00c      	beq.n	8006686 <HAL_TIM_Base_Init+0x9e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d008      	beq.n	8006686 <HAL_TIM_Base_Init+0x9e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b60      	cmp	r3, #96	; 0x60
 800667a:	d004      	beq.n	8006686 <HAL_TIM_Base_Init+0x9e>
 800667c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006680:	483b      	ldr	r0, [pc, #236]	; (8006770 <HAL_TIM_Base_Init+0x188>)
 8006682:	f7fa fbe4 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00e      	beq.n	80066ac <HAL_TIM_Base_Init+0xc4>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006696:	d009      	beq.n	80066ac <HAL_TIM_Base_Init+0xc4>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a0:	d004      	beq.n	80066ac <HAL_TIM_Base_Init+0xc4>
 80066a2:	f240 1115 	movw	r1, #277	; 0x115
 80066a6:	4832      	ldr	r0, [pc, #200]	; (8006770 <HAL_TIM_Base_Init+0x188>)
 80066a8:	f7fa fbd1 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_TIM_Base_Init+0xde>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b80      	cmp	r3, #128	; 0x80
 80066ba:	d004      	beq.n	80066c6 <HAL_TIM_Base_Init+0xde>
 80066bc:	f44f 718b 	mov.w	r1, #278	; 0x116
 80066c0:	482b      	ldr	r0, [pc, #172]	; (8006770 <HAL_TIM_Base_Init+0x188>)
 80066c2:	f7fa fbc4 	bl	8000e4e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fb f9e6 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f000 ff68 	bl	80075c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40010000 	.word	0x40010000
 8006758:	40000400 	.word	0x40000400
 800675c:	40000800 	.word	0x40000800
 8006760:	40000c00 	.word	0x40000c00
 8006764:	40014000 	.word	0x40014000
 8006768:	40014400 	.word	0x40014400
 800676c:	40014800 	.word	0x40014800
 8006770:	0800f9dc 	.word	0x0800f9dc

08006774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a3d      	ldr	r2, [pc, #244]	; (8006878 <HAL_TIM_Base_Start_IT+0x104>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d027      	beq.n	80067d6 <HAL_TIM_Base_Start_IT+0x62>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678e:	d022      	beq.n	80067d6 <HAL_TIM_Base_Start_IT+0x62>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a39      	ldr	r2, [pc, #228]	; (800687c <HAL_TIM_Base_Start_IT+0x108>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d01d      	beq.n	80067d6 <HAL_TIM_Base_Start_IT+0x62>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a38      	ldr	r2, [pc, #224]	; (8006880 <HAL_TIM_Base_Start_IT+0x10c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d018      	beq.n	80067d6 <HAL_TIM_Base_Start_IT+0x62>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a36      	ldr	r2, [pc, #216]	; (8006884 <HAL_TIM_Base_Start_IT+0x110>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d013      	beq.n	80067d6 <HAL_TIM_Base_Start_IT+0x62>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a35      	ldr	r2, [pc, #212]	; (8006888 <HAL_TIM_Base_Start_IT+0x114>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00e      	beq.n	80067d6 <HAL_TIM_Base_Start_IT+0x62>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a33      	ldr	r2, [pc, #204]	; (800688c <HAL_TIM_Base_Start_IT+0x118>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d009      	beq.n	80067d6 <HAL_TIM_Base_Start_IT+0x62>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a32      	ldr	r2, [pc, #200]	; (8006890 <HAL_TIM_Base_Start_IT+0x11c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d004      	beq.n	80067d6 <HAL_TIM_Base_Start_IT+0x62>
 80067cc:	f240 11cf 	movw	r1, #463	; 0x1cf
 80067d0:	4830      	ldr	r0, [pc, #192]	; (8006894 <HAL_TIM_Base_Start_IT+0x120>)
 80067d2:	f7fa fb3c 	bl	8000e4e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d001      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e044      	b.n	8006870 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2202      	movs	r2, #2
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0201 	orr.w	r2, r2, #1
 80067fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1d      	ldr	r2, [pc, #116]	; (8006878 <HAL_TIM_Base_Start_IT+0x104>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d018      	beq.n	800683a <HAL_TIM_Base_Start_IT+0xc6>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006810:	d013      	beq.n	800683a <HAL_TIM_Base_Start_IT+0xc6>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a19      	ldr	r2, [pc, #100]	; (800687c <HAL_TIM_Base_Start_IT+0x108>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00e      	beq.n	800683a <HAL_TIM_Base_Start_IT+0xc6>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a17      	ldr	r2, [pc, #92]	; (8006880 <HAL_TIM_Base_Start_IT+0x10c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d009      	beq.n	800683a <HAL_TIM_Base_Start_IT+0xc6>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a16      	ldr	r2, [pc, #88]	; (8006884 <HAL_TIM_Base_Start_IT+0x110>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d004      	beq.n	800683a <HAL_TIM_Base_Start_IT+0xc6>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a14      	ldr	r2, [pc, #80]	; (8006888 <HAL_TIM_Base_Start_IT+0x114>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d111      	bne.n	800685e <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b06      	cmp	r3, #6
 800684a:	d010      	beq.n	800686e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685c:	e007      	b.n	800686e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0201 	orr.w	r2, r2, #1
 800686c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40010000 	.word	0x40010000
 800687c:	40000400 	.word	0x40000400
 8006880:	40000800 	.word	0x40000800
 8006884:	40000c00 	.word	0x40000c00
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800
 8006894:	0800f9dc 	.word	0x0800f9dc

08006898 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e18a      	b.n	8006bc2 <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a78      	ldr	r2, [pc, #480]	; (8006a94 <HAL_TIM_Encoder_Init+0x1fc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01d      	beq.n	80068f2 <HAL_TIM_Encoder_Init+0x5a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068be:	d018      	beq.n	80068f2 <HAL_TIM_Encoder_Init+0x5a>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a74      	ldr	r2, [pc, #464]	; (8006a98 <HAL_TIM_Encoder_Init+0x200>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d013      	beq.n	80068f2 <HAL_TIM_Encoder_Init+0x5a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a73      	ldr	r2, [pc, #460]	; (8006a9c <HAL_TIM_Encoder_Init+0x204>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00e      	beq.n	80068f2 <HAL_TIM_Encoder_Init+0x5a>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a71      	ldr	r2, [pc, #452]	; (8006aa0 <HAL_TIM_Encoder_Init+0x208>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d009      	beq.n	80068f2 <HAL_TIM_Encoder_Init+0x5a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a70      	ldr	r2, [pc, #448]	; (8006aa4 <HAL_TIM_Encoder_Init+0x20c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d004      	beq.n	80068f2 <HAL_TIM_Encoder_Init+0x5a>
 80068e8:	f640 31d1 	movw	r1, #3025	; 0xbd1
 80068ec:	486e      	ldr	r0, [pc, #440]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 80068ee:	f7fa faae 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d014      	beq.n	8006924 <HAL_TIM_Encoder_Init+0x8c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b10      	cmp	r3, #16
 8006900:	d010      	beq.n	8006924 <HAL_TIM_Encoder_Init+0x8c>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b20      	cmp	r3, #32
 8006908:	d00c      	beq.n	8006924 <HAL_TIM_Encoder_Init+0x8c>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b40      	cmp	r3, #64	; 0x40
 8006910:	d008      	beq.n	8006924 <HAL_TIM_Encoder_Init+0x8c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	2b60      	cmp	r3, #96	; 0x60
 8006918:	d004      	beq.n	8006924 <HAL_TIM_Encoder_Init+0x8c>
 800691a:	f640 31d2 	movw	r1, #3026	; 0xbd2
 800691e:	4862      	ldr	r0, [pc, #392]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 8006920:	f7fa fa95 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00e      	beq.n	800694a <HAL_TIM_Encoder_Init+0xb2>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006934:	d009      	beq.n	800694a <HAL_TIM_Encoder_Init+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800693e:	d004      	beq.n	800694a <HAL_TIM_Encoder_Init+0xb2>
 8006940:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8006944:	4858      	ldr	r0, [pc, #352]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 8006946:	f7fa fa82 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d008      	beq.n	8006964 <HAL_TIM_Encoder_Init+0xcc>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b80      	cmp	r3, #128	; 0x80
 8006958:	d004      	beq.n	8006964 <HAL_TIM_Encoder_Init+0xcc>
 800695a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800695e:	4852      	ldr	r0, [pc, #328]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 8006960:	f7fa fa75 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d00c      	beq.n	8006986 <HAL_TIM_Encoder_Init+0xee>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d008      	beq.n	8006986 <HAL_TIM_Encoder_Init+0xee>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b03      	cmp	r3, #3
 800697a:	d004      	beq.n	8006986 <HAL_TIM_Encoder_Init+0xee>
 800697c:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8006980:	4849      	ldr	r0, [pc, #292]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 8006982:	f7fa fa64 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d00c      	beq.n	80069a8 <HAL_TIM_Encoder_Init+0x110>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d008      	beq.n	80069a8 <HAL_TIM_Encoder_Init+0x110>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b03      	cmp	r3, #3
 800699c:	d004      	beq.n	80069a8 <HAL_TIM_Encoder_Init+0x110>
 800699e:	f640 31d6 	movw	r1, #3030	; 0xbd6
 80069a2:	4841      	ldr	r0, [pc, #260]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 80069a4:	f7fa fa53 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d00c      	beq.n	80069ca <HAL_TIM_Encoder_Init+0x132>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d008      	beq.n	80069ca <HAL_TIM_Encoder_Init+0x132>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d004      	beq.n	80069ca <HAL_TIM_Encoder_Init+0x132>
 80069c0:	f640 31d7 	movw	r1, #3031	; 0xbd7
 80069c4:	4838      	ldr	r0, [pc, #224]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 80069c6:	f7fa fa42 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d008      	beq.n	80069e4 <HAL_TIM_Encoder_Init+0x14c>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d004      	beq.n	80069e4 <HAL_TIM_Encoder_Init+0x14c>
 80069da:	f640 31d8 	movw	r1, #3032	; 0xbd8
 80069de:	4832      	ldr	r0, [pc, #200]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 80069e0:	f7fa fa35 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <HAL_TIM_Encoder_Init+0x166>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d004      	beq.n	80069fe <HAL_TIM_Encoder_Init+0x166>
 80069f4:	f640 31d9 	movw	r1, #3033	; 0xbd9
 80069f8:	482b      	ldr	r0, [pc, #172]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 80069fa:	f7fa fa28 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d010      	beq.n	8006a28 <HAL_TIM_Encoder_Init+0x190>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d00c      	beq.n	8006a28 <HAL_TIM_Encoder_Init+0x190>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d008      	beq.n	8006a28 <HAL_TIM_Encoder_Init+0x190>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	2b0c      	cmp	r3, #12
 8006a1c:	d004      	beq.n	8006a28 <HAL_TIM_Encoder_Init+0x190>
 8006a1e:	f640 31da 	movw	r1, #3034	; 0xbda
 8006a22:	4821      	ldr	r0, [pc, #132]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 8006a24:	f7fa fa13 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <HAL_TIM_Encoder_Init+0x1ba>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d00c      	beq.n	8006a52 <HAL_TIM_Encoder_Init+0x1ba>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d008      	beq.n	8006a52 <HAL_TIM_Encoder_Init+0x1ba>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	d004      	beq.n	8006a52 <HAL_TIM_Encoder_Init+0x1ba>
 8006a48:	f640 31db 	movw	r1, #3035	; 0xbdb
 8006a4c:	4816      	ldr	r0, [pc, #88]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 8006a4e:	f7fa f9fe 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b0f      	cmp	r3, #15
 8006a58:	d904      	bls.n	8006a64 <HAL_TIM_Encoder_Init+0x1cc>
 8006a5a:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8006a5e:	4812      	ldr	r0, [pc, #72]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 8006a60:	f7fa f9f5 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	2b0f      	cmp	r3, #15
 8006a6a:	d904      	bls.n	8006a76 <HAL_TIM_Encoder_Init+0x1de>
 8006a6c:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8006a70:	480d      	ldr	r0, [pc, #52]	; (8006aa8 <HAL_TIM_Encoder_Init+0x210>)
 8006a72:	f7fa f9ec 	bl	8000e4e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d114      	bne.n	8006aac <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fb f854 	bl	8001b38 <HAL_TIM_Encoder_MspInit>
 8006a90:	e00c      	b.n	8006aac <HAL_TIM_Encoder_Init+0x214>
 8006a92:	bf00      	nop
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40000400 	.word	0x40000400
 8006a9c:	40000800 	.word	0x40000800
 8006aa0:	40000c00 	.word	0x40000c00
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	0800f9dc 	.word	0x0800f9dc
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac2:	f023 0307 	bic.w	r3, r3, #7
 8006ac6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	f000 fd78 	bl	80075c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b00:	f023 0303 	bic.w	r3, r3, #3
 8006b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	4313      	orrs	r3, r2
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b1e:	f023 030c 	bic.w	r3, r3, #12
 8006b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	011a      	lsls	r2, r3, #4
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	031b      	lsls	r3, r3, #12
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b5c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b64:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	4313      	orrs	r3, r2
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop

08006bcc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bdc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006be4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bf4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a4d      	ldr	r2, [pc, #308]	; (8006d30 <HAL_TIM_Encoder_Start+0x164>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d01d      	beq.n	8006c3c <HAL_TIM_Encoder_Start+0x70>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c08:	d018      	beq.n	8006c3c <HAL_TIM_Encoder_Start+0x70>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a49      	ldr	r2, [pc, #292]	; (8006d34 <HAL_TIM_Encoder_Start+0x168>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <HAL_TIM_Encoder_Start+0x70>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a47      	ldr	r2, [pc, #284]	; (8006d38 <HAL_TIM_Encoder_Start+0x16c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00e      	beq.n	8006c3c <HAL_TIM_Encoder_Start+0x70>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a46      	ldr	r2, [pc, #280]	; (8006d3c <HAL_TIM_Encoder_Start+0x170>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d009      	beq.n	8006c3c <HAL_TIM_Encoder_Start+0x70>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a44      	ldr	r2, [pc, #272]	; (8006d40 <HAL_TIM_Encoder_Start+0x174>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_TIM_Encoder_Start+0x70>
 8006c32:	f640 418e 	movw	r1, #3214	; 0xc8e
 8006c36:	4843      	ldr	r0, [pc, #268]	; (8006d44 <HAL_TIM_Encoder_Start+0x178>)
 8006c38:	f7fa f909 	bl	8000e4e <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d110      	bne.n	8006c64 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d102      	bne.n	8006c4e <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c48:	7b7b      	ldrb	r3, [r7, #13]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e069      	b.n	8006d26 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c62:	e031      	b.n	8006cc8 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d110      	bne.n	8006c8c <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d102      	bne.n	8006c76 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c70:	7b3b      	ldrb	r3, [r7, #12]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d001      	beq.n	8006c7a <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e055      	b.n	8006d26 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c8a:	e01d      	b.n	8006cc8 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d108      	bne.n	8006ca4 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d105      	bne.n	8006ca4 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c98:	7b7b      	ldrb	r3, [r7, #13]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d102      	bne.n	8006ca4 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c9e:	7b3b      	ldrb	r3, [r7, #12]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d001      	beq.n	8006ca8 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e03e      	b.n	8006d26 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_TIM_Encoder_Start+0x10a>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d008      	beq.n	8006ce6 <HAL_TIM_Encoder_Start+0x11a>
 8006cd4:	e00f      	b.n	8006cf6 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fd8c 	bl	80077fc <TIM_CCxChannelCmd>
      break;
 8006ce4:	e016      	b.n	8006d14 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	2104      	movs	r1, #4
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fd84 	bl	80077fc <TIM_CCxChannelCmd>
      break;
 8006cf4:	e00e      	b.n	8006d14 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fd7c 	bl	80077fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	2104      	movs	r1, #4
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fd75 	bl	80077fc <TIM_CCxChannelCmd>
      break;
 8006d12:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40000400 	.word	0x40000400
 8006d38:	40000800 	.word	0x40000800
 8006d3c:	40000c00 	.word	0x40000c00
 8006d40:	40014000 	.word	0x40014000
 8006d44:	0800f9dc 	.word	0x0800f9dc

08006d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d122      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d11b      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0202 	mvn.w	r2, #2
 8006d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fbfe 	bl	800758c <HAL_TIM_IC_CaptureCallback>
 8006d90:	e005      	b.n	8006d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fbf0 	bl	8007578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fc01 	bl	80075a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d122      	bne.n	8006df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	d11b      	bne.n	8006df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0204 	mvn.w	r2, #4
 8006dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fbd4 	bl	800758c <HAL_TIM_IC_CaptureCallback>
 8006de4:	e005      	b.n	8006df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fbc6 	bl	8007578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fbd7 	bl	80075a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d122      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d11b      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0208 	mvn.w	r2, #8
 8006e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2204      	movs	r2, #4
 8006e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fbaa 	bl	800758c <HAL_TIM_IC_CaptureCallback>
 8006e38:	e005      	b.n	8006e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fb9c 	bl	8007578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fbad 	bl	80075a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0310 	and.w	r3, r3, #16
 8006e56:	2b10      	cmp	r3, #16
 8006e58:	d122      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d11b      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0210 	mvn.w	r2, #16
 8006e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2208      	movs	r2, #8
 8006e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fb80 	bl	800758c <HAL_TIM_IC_CaptureCallback>
 8006e8c:	e005      	b.n	8006e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fb72 	bl	8007578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fb83 	bl	80075a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d10e      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d107      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0201 	mvn.w	r2, #1
 8006ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7f9 ffaa 	bl	8000e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed6:	2b80      	cmp	r3, #128	; 0x80
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee4:	2b80      	cmp	r3, #128	; 0x80
 8006ee6:	d107      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fdb6 	bl	8007a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f02:	2b40      	cmp	r3, #64	; 0x40
 8006f04:	d10e      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d107      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fb48 	bl	80075b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d10e      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d107      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0220 	mvn.w	r2, #32
 8006f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fd80 	bl	8007a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIM_ConfigClockSource+0x1c>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e2f0      	b.n	8007556 <HAL_TIM_ConfigClockSource+0x5fe>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8c:	d029      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b70      	cmp	r3, #112	; 0x70
 8006f94:	d025      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f9e:	d020      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b40      	cmp	r3, #64	; 0x40
 8006fa6:	d01c      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b50      	cmp	r3, #80	; 0x50
 8006fae:	d018      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b60      	cmp	r3, #96	; 0x60
 8006fb6:	d014      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d010      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d00c      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d008      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b30      	cmp	r3, #48	; 0x30
 8006fd6:	d004      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x8a>
 8006fd8:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8006fdc:	487c      	ldr	r0, [pc, #496]	; (80071d0 <HAL_TIM_ConfigClockSource+0x278>)
 8006fde:	f7f9 ff36 	bl	8000e4e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ff0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ff8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700a:	f000 80f1 	beq.w	80071f0 <HAL_TIM_ConfigClockSource+0x298>
 800700e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007012:	f200 8293 	bhi.w	800753c <HAL_TIM_ConfigClockSource+0x5e4>
 8007016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701a:	d02d      	beq.n	8007078 <HAL_TIM_ConfigClockSource+0x120>
 800701c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007020:	f200 828c 	bhi.w	800753c <HAL_TIM_ConfigClockSource+0x5e4>
 8007024:	2b70      	cmp	r3, #112	; 0x70
 8007026:	d05d      	beq.n	80070e4 <HAL_TIM_ConfigClockSource+0x18c>
 8007028:	2b70      	cmp	r3, #112	; 0x70
 800702a:	f200 8287 	bhi.w	800753c <HAL_TIM_ConfigClockSource+0x5e4>
 800702e:	2b60      	cmp	r3, #96	; 0x60
 8007030:	f000 81a0 	beq.w	8007374 <HAL_TIM_ConfigClockSource+0x41c>
 8007034:	2b60      	cmp	r3, #96	; 0x60
 8007036:	f200 8281 	bhi.w	800753c <HAL_TIM_ConfigClockSource+0x5e4>
 800703a:	2b50      	cmp	r3, #80	; 0x50
 800703c:	f000 8144 	beq.w	80072c8 <HAL_TIM_ConfigClockSource+0x370>
 8007040:	2b50      	cmp	r3, #80	; 0x50
 8007042:	f200 827b 	bhi.w	800753c <HAL_TIM_ConfigClockSource+0x5e4>
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	f000 81f6 	beq.w	8007438 <HAL_TIM_ConfigClockSource+0x4e0>
 800704c:	2b40      	cmp	r3, #64	; 0x40
 800704e:	f200 8275 	bhi.w	800753c <HAL_TIM_ConfigClockSource+0x5e4>
 8007052:	2b30      	cmp	r3, #48	; 0x30
 8007054:	f000 8246 	beq.w	80074e4 <HAL_TIM_ConfigClockSource+0x58c>
 8007058:	2b30      	cmp	r3, #48	; 0x30
 800705a:	f200 826f 	bhi.w	800753c <HAL_TIM_ConfigClockSource+0x5e4>
 800705e:	2b20      	cmp	r3, #32
 8007060:	f000 8240 	beq.w	80074e4 <HAL_TIM_ConfigClockSource+0x58c>
 8007064:	2b20      	cmp	r3, #32
 8007066:	f200 8269 	bhi.w	800753c <HAL_TIM_ConfigClockSource+0x5e4>
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 823a 	beq.w	80074e4 <HAL_TIM_ConfigClockSource+0x58c>
 8007070:	2b10      	cmp	r3, #16
 8007072:	f000 8237 	beq.w	80074e4 <HAL_TIM_ConfigClockSource+0x58c>
 8007076:	e261      	b.n	800753c <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a55      	ldr	r2, [pc, #340]	; (80071d4 <HAL_TIM_ConfigClockSource+0x27c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	f000 825f 	beq.w	8007542 <HAL_TIM_ConfigClockSource+0x5ea>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708c:	f000 8259 	beq.w	8007542 <HAL_TIM_ConfigClockSource+0x5ea>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a50      	ldr	r2, [pc, #320]	; (80071d8 <HAL_TIM_ConfigClockSource+0x280>)
 8007096:	4293      	cmp	r3, r2
 8007098:	f000 8253 	beq.w	8007542 <HAL_TIM_ConfigClockSource+0x5ea>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a4e      	ldr	r2, [pc, #312]	; (80071dc <HAL_TIM_ConfigClockSource+0x284>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	f000 824d 	beq.w	8007542 <HAL_TIM_ConfigClockSource+0x5ea>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a4c      	ldr	r2, [pc, #304]	; (80071e0 <HAL_TIM_ConfigClockSource+0x288>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	f000 8247 	beq.w	8007542 <HAL_TIM_ConfigClockSource+0x5ea>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a4a      	ldr	r2, [pc, #296]	; (80071e4 <HAL_TIM_ConfigClockSource+0x28c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	f000 8241 	beq.w	8007542 <HAL_TIM_ConfigClockSource+0x5ea>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a48      	ldr	r2, [pc, #288]	; (80071e8 <HAL_TIM_ConfigClockSource+0x290>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	f000 823b 	beq.w	8007542 <HAL_TIM_ConfigClockSource+0x5ea>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a46      	ldr	r2, [pc, #280]	; (80071ec <HAL_TIM_ConfigClockSource+0x294>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	f000 8235 	beq.w	8007542 <HAL_TIM_ConfigClockSource+0x5ea>
 80070d8:	f241 41c3 	movw	r1, #5315	; 0x14c3
 80070dc:	483c      	ldr	r0, [pc, #240]	; (80071d0 <HAL_TIM_ConfigClockSource+0x278>)
 80070de:	f7f9 feb6 	bl	8000e4e <assert_failed>
      break;
 80070e2:	e22e      	b.n	8007542 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a3a      	ldr	r2, [pc, #232]	; (80071d4 <HAL_TIM_ConfigClockSource+0x27c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d01d      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x1d2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f6:	d018      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x1d2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a36      	ldr	r2, [pc, #216]	; (80071d8 <HAL_TIM_ConfigClockSource+0x280>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d013      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x1d2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a35      	ldr	r2, [pc, #212]	; (80071dc <HAL_TIM_ConfigClockSource+0x284>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00e      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x1d2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a33      	ldr	r2, [pc, #204]	; (80071e0 <HAL_TIM_ConfigClockSource+0x288>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d009      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x1d2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a32      	ldr	r2, [pc, #200]	; (80071e4 <HAL_TIM_ConfigClockSource+0x28c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x1d2>
 8007120:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8007124:	482a      	ldr	r0, [pc, #168]	; (80071d0 <HAL_TIM_ConfigClockSource+0x278>)
 8007126:	f7f9 fe92 	bl	8000e4e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d013      	beq.n	800715a <HAL_TIM_ConfigClockSource+0x202>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800713a:	d00e      	beq.n	800715a <HAL_TIM_ConfigClockSource+0x202>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007144:	d009      	beq.n	800715a <HAL_TIM_ConfigClockSource+0x202>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800714e:	d004      	beq.n	800715a <HAL_TIM_ConfigClockSource+0x202>
 8007150:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8007154:	481e      	ldr	r0, [pc, #120]	; (80071d0 <HAL_TIM_ConfigClockSource+0x278>)
 8007156:	f7f9 fe7a 	bl	8000e4e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007162:	d014      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x236>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d010      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x236>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00c      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x236>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d008      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x236>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2b0a      	cmp	r3, #10
 8007182:	d004      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x236>
 8007184:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8007188:	4811      	ldr	r0, [pc, #68]	; (80071d0 <HAL_TIM_ConfigClockSource+0x278>)
 800718a:	f7f9 fe60 	bl	8000e4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	2b0f      	cmp	r3, #15
 8007194:	d904      	bls.n	80071a0 <HAL_TIM_ConfigClockSource+0x248>
 8007196:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800719a:	480d      	ldr	r0, [pc, #52]	; (80071d0 <HAL_TIM_ConfigClockSource+0x278>)
 800719c:	f7f9 fe57 	bl	8000e4e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	6899      	ldr	r1, [r3, #8]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f000 fb04 	bl	80077bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	609a      	str	r2, [r3, #8]
      break;
 80071cc:	e1ba      	b.n	8007544 <HAL_TIM_ConfigClockSource+0x5ec>
 80071ce:	bf00      	nop
 80071d0:	0800f9dc 	.word	0x0800f9dc
 80071d4:	40010000 	.word	0x40010000
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a8a      	ldr	r2, [pc, #552]	; (8007420 <HAL_TIM_ConfigClockSource+0x4c8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d018      	beq.n	800722c <HAL_TIM_ConfigClockSource+0x2d4>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007202:	d013      	beq.n	800722c <HAL_TIM_ConfigClockSource+0x2d4>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a86      	ldr	r2, [pc, #536]	; (8007424 <HAL_TIM_ConfigClockSource+0x4cc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00e      	beq.n	800722c <HAL_TIM_ConfigClockSource+0x2d4>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a85      	ldr	r2, [pc, #532]	; (8007428 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d009      	beq.n	800722c <HAL_TIM_ConfigClockSource+0x2d4>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a83      	ldr	r2, [pc, #524]	; (800742c <HAL_TIM_ConfigClockSource+0x4d4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d004      	beq.n	800722c <HAL_TIM_ConfigClockSource+0x2d4>
 8007222:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8007226:	4882      	ldr	r0, [pc, #520]	; (8007430 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007228:	f7f9 fe11 	bl	8000e4e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d013      	beq.n	800725c <HAL_TIM_ConfigClockSource+0x304>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723c:	d00e      	beq.n	800725c <HAL_TIM_ConfigClockSource+0x304>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007246:	d009      	beq.n	800725c <HAL_TIM_ConfigClockSource+0x304>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007250:	d004      	beq.n	800725c <HAL_TIM_ConfigClockSource+0x304>
 8007252:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8007256:	4876      	ldr	r0, [pc, #472]	; (8007430 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007258:	f7f9 fdf9 	bl	8000e4e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007264:	d014      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x338>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d010      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x338>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00c      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x338>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d008      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x338>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b0a      	cmp	r3, #10
 8007284:	d004      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x338>
 8007286:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800728a:	4869      	ldr	r0, [pc, #420]	; (8007430 <HAL_TIM_ConfigClockSource+0x4d8>)
 800728c:	f7f9 fddf 	bl	8000e4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b0f      	cmp	r3, #15
 8007296:	d904      	bls.n	80072a2 <HAL_TIM_ConfigClockSource+0x34a>
 8007298:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800729c:	4864      	ldr	r0, [pc, #400]	; (8007430 <HAL_TIM_ConfigClockSource+0x4d8>)
 800729e:	f7f9 fdd6 	bl	8000e4e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6899      	ldr	r1, [r3, #8]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f000 fa83 	bl	80077bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072c4:	609a      	str	r2, [r3, #8]
      break;
 80072c6:	e13d      	b.n	8007544 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a54      	ldr	r2, [pc, #336]	; (8007420 <HAL_TIM_ConfigClockSource+0x4c8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01d      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x3b6>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072da:	d018      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x3b6>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a50      	ldr	r2, [pc, #320]	; (8007424 <HAL_TIM_ConfigClockSource+0x4cc>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d013      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x3b6>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a4f      	ldr	r2, [pc, #316]	; (8007428 <HAL_TIM_ConfigClockSource+0x4d0>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00e      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x3b6>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a4d      	ldr	r2, [pc, #308]	; (800742c <HAL_TIM_ConfigClockSource+0x4d4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d009      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x3b6>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a4d      	ldr	r2, [pc, #308]	; (8007434 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d004      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x3b6>
 8007304:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8007308:	4849      	ldr	r0, [pc, #292]	; (8007430 <HAL_TIM_ConfigClockSource+0x4d8>)
 800730a:	f7f9 fda0 	bl	8000e4e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007316:	d014      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x3ea>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d010      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x3ea>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00c      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x3ea>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2b02      	cmp	r3, #2
 800732e:	d008      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x3ea>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2b0a      	cmp	r3, #10
 8007336:	d004      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x3ea>
 8007338:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800733c:	483c      	ldr	r0, [pc, #240]	; (8007430 <HAL_TIM_ConfigClockSource+0x4d8>)
 800733e:	f7f9 fd86 	bl	8000e4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b0f      	cmp	r3, #15
 8007348:	d904      	bls.n	8007354 <HAL_TIM_ConfigClockSource+0x3fc>
 800734a:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800734e:	4838      	ldr	r0, [pc, #224]	; (8007430 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007350:	f7f9 fd7d 	bl	8000e4e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6859      	ldr	r1, [r3, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	461a      	mov	r2, r3
 8007362:	f000 f9b1 	bl	80076c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2150      	movs	r1, #80	; 0x50
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fa0a 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8007372:	e0e7      	b.n	8007544 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a29      	ldr	r2, [pc, #164]	; (8007420 <HAL_TIM_ConfigClockSource+0x4c8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d01d      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x462>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007386:	d018      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x462>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a25      	ldr	r2, [pc, #148]	; (8007424 <HAL_TIM_ConfigClockSource+0x4cc>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x462>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a24      	ldr	r2, [pc, #144]	; (8007428 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00e      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x462>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a22      	ldr	r2, [pc, #136]	; (800742c <HAL_TIM_ConfigClockSource+0x4d4>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d009      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x462>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a22      	ldr	r2, [pc, #136]	; (8007434 <HAL_TIM_ConfigClockSource+0x4dc>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d004      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x462>
 80073b0:	f241 5106 	movw	r1, #5382	; 0x1506
 80073b4:	481e      	ldr	r0, [pc, #120]	; (8007430 <HAL_TIM_ConfigClockSource+0x4d8>)
 80073b6:	f7f9 fd4a 	bl	8000e4e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073c2:	d014      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x496>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d010      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x496>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00c      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x496>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d008      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x496>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b0a      	cmp	r3, #10
 80073e2:	d004      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x496>
 80073e4:	f241 5109 	movw	r1, #5385	; 0x1509
 80073e8:	4811      	ldr	r0, [pc, #68]	; (8007430 <HAL_TIM_ConfigClockSource+0x4d8>)
 80073ea:	f7f9 fd30 	bl	8000e4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2b0f      	cmp	r3, #15
 80073f4:	d904      	bls.n	8007400 <HAL_TIM_ConfigClockSource+0x4a8>
 80073f6:	f241 510a 	movw	r1, #5386	; 0x150a
 80073fa:	480d      	ldr	r0, [pc, #52]	; (8007430 <HAL_TIM_ConfigClockSource+0x4d8>)
 80073fc:	f7f9 fd27 	bl	8000e4e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	6859      	ldr	r1, [r3, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	461a      	mov	r2, r3
 800740e:	f000 f98a 	bl	8007726 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2160      	movs	r1, #96	; 0x60
 8007418:	4618      	mov	r0, r3
 800741a:	f000 f9b4 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 800741e:	e091      	b.n	8007544 <HAL_TIM_ConfigClockSource+0x5ec>
 8007420:	40010000 	.word	0x40010000
 8007424:	40000400 	.word	0x40000400
 8007428:	40000800 	.word	0x40000800
 800742c:	40000c00 	.word	0x40000c00
 8007430:	0800f9dc 	.word	0x0800f9dc
 8007434:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a48      	ldr	r2, [pc, #288]	; (8007560 <HAL_TIM_ConfigClockSource+0x608>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d01d      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x526>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744a:	d018      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x526>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a44      	ldr	r2, [pc, #272]	; (8007564 <HAL_TIM_ConfigClockSource+0x60c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d013      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x526>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a43      	ldr	r2, [pc, #268]	; (8007568 <HAL_TIM_ConfigClockSource+0x610>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00e      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x526>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a41      	ldr	r2, [pc, #260]	; (800756c <HAL_TIM_ConfigClockSource+0x614>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d009      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x526>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a40      	ldr	r2, [pc, #256]	; (8007570 <HAL_TIM_ConfigClockSource+0x618>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d004      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x526>
 8007474:	f241 5116 	movw	r1, #5398	; 0x1516
 8007478:	483e      	ldr	r0, [pc, #248]	; (8007574 <HAL_TIM_ConfigClockSource+0x61c>)
 800747a:	f7f9 fce8 	bl	8000e4e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007486:	d014      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x55a>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d010      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x55a>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00c      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x55a>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d008      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x55a>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b0a      	cmp	r3, #10
 80074a6:	d004      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x55a>
 80074a8:	f241 5119 	movw	r1, #5401	; 0x1519
 80074ac:	4831      	ldr	r0, [pc, #196]	; (8007574 <HAL_TIM_ConfigClockSource+0x61c>)
 80074ae:	f7f9 fcce 	bl	8000e4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	2b0f      	cmp	r3, #15
 80074b8:	d904      	bls.n	80074c4 <HAL_TIM_ConfigClockSource+0x56c>
 80074ba:	f241 511a 	movw	r1, #5402	; 0x151a
 80074be:	482d      	ldr	r0, [pc, #180]	; (8007574 <HAL_TIM_ConfigClockSource+0x61c>)
 80074c0:	f7f9 fcc5 	bl	8000e4e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	6859      	ldr	r1, [r3, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	461a      	mov	r2, r3
 80074d2:	f000 f8f9 	bl	80076c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2140      	movs	r1, #64	; 0x40
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 f952 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 80074e2:	e02f      	b.n	8007544 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1d      	ldr	r2, [pc, #116]	; (8007560 <HAL_TIM_ConfigClockSource+0x608>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d01d      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x5d2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f6:	d018      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x5d2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a19      	ldr	r2, [pc, #100]	; (8007564 <HAL_TIM_ConfigClockSource+0x60c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x5d2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a18      	ldr	r2, [pc, #96]	; (8007568 <HAL_TIM_ConfigClockSource+0x610>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00e      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x5d2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a16      	ldr	r2, [pc, #88]	; (800756c <HAL_TIM_ConfigClockSource+0x614>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d009      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x5d2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a15      	ldr	r2, [pc, #84]	; (8007570 <HAL_TIM_ConfigClockSource+0x618>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d004      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x5d2>
 8007520:	f241 5129 	movw	r1, #5417	; 0x1529
 8007524:	4813      	ldr	r0, [pc, #76]	; (8007574 <HAL_TIM_ConfigClockSource+0x61c>)
 8007526:	f7f9 fc92 	bl	8000e4e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f000 f926 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 800753a:	e003      	b.n	8007544 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	73fb      	strb	r3, [r7, #15]
      break;
 8007540:	e000      	b.n	8007544 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8007542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007554:	7bfb      	ldrb	r3, [r7, #15]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	40010000 	.word	0x40010000
 8007564:	40000400 	.word	0x40000400
 8007568:	40000800 	.word	0x40000800
 800756c:	40000c00 	.word	0x40000c00
 8007570:	40014000 	.word	0x40014000
 8007574:	0800f9dc 	.word	0x0800f9dc

08007578 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a34      	ldr	r2, [pc, #208]	; (80076ac <TIM_Base_SetConfig+0xe4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00f      	beq.n	8007600 <TIM_Base_SetConfig+0x38>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e6:	d00b      	beq.n	8007600 <TIM_Base_SetConfig+0x38>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a31      	ldr	r2, [pc, #196]	; (80076b0 <TIM_Base_SetConfig+0xe8>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d007      	beq.n	8007600 <TIM_Base_SetConfig+0x38>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a30      	ldr	r2, [pc, #192]	; (80076b4 <TIM_Base_SetConfig+0xec>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_Base_SetConfig+0x38>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a2f      	ldr	r2, [pc, #188]	; (80076b8 <TIM_Base_SetConfig+0xf0>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d108      	bne.n	8007612 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a25      	ldr	r2, [pc, #148]	; (80076ac <TIM_Base_SetConfig+0xe4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d01b      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007620:	d017      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a22      	ldr	r2, [pc, #136]	; (80076b0 <TIM_Base_SetConfig+0xe8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d013      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <TIM_Base_SetConfig+0xec>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d00f      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a20      	ldr	r2, [pc, #128]	; (80076b8 <TIM_Base_SetConfig+0xf0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00b      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <TIM_Base_SetConfig+0xf4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d007      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a1e      	ldr	r2, [pc, #120]	; (80076c0 <TIM_Base_SetConfig+0xf8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d003      	beq.n	8007652 <TIM_Base_SetConfig+0x8a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <TIM_Base_SetConfig+0xfc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d108      	bne.n	8007664 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a08      	ldr	r2, [pc, #32]	; (80076ac <TIM_Base_SetConfig+0xe4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d103      	bne.n	8007698 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	615a      	str	r2, [r3, #20]
}
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40000400 	.word	0x40000400
 80076b4:	40000800 	.word	0x40000800
 80076b8:	40000c00 	.word	0x40000c00
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40014400 	.word	0x40014400
 80076c4:	40014800 	.word	0x40014800

080076c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0201 	bic.w	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f023 030a 	bic.w	r3, r3, #10
 8007704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	621a      	str	r2, [r3, #32]
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007726:	b480      	push	{r7}
 8007728:	b087      	sub	sp, #28
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f023 0210 	bic.w	r2, r3, #16
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	031b      	lsls	r3, r3, #12
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f043 0307 	orr.w	r3, r3, #7
 80077a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	609a      	str	r2, [r3, #8]
}
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	021a      	lsls	r2, r3, #8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	431a      	orrs	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	609a      	str	r2, [r3, #8]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4a2a      	ldr	r2, [pc, #168]	; (80078b4 <TIM_CCxChannelCmd+0xb8>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d020      	beq.n	8007852 <TIM_CCxChannelCmd+0x56>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007816:	d01c      	beq.n	8007852 <TIM_CCxChannelCmd+0x56>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4a27      	ldr	r2, [pc, #156]	; (80078b8 <TIM_CCxChannelCmd+0xbc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d018      	beq.n	8007852 <TIM_CCxChannelCmd+0x56>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4a26      	ldr	r2, [pc, #152]	; (80078bc <TIM_CCxChannelCmd+0xc0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d014      	beq.n	8007852 <TIM_CCxChannelCmd+0x56>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4a25      	ldr	r2, [pc, #148]	; (80078c0 <TIM_CCxChannelCmd+0xc4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d010      	beq.n	8007852 <TIM_CCxChannelCmd+0x56>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4a24      	ldr	r2, [pc, #144]	; (80078c4 <TIM_CCxChannelCmd+0xc8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d00c      	beq.n	8007852 <TIM_CCxChannelCmd+0x56>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4a23      	ldr	r2, [pc, #140]	; (80078c8 <TIM_CCxChannelCmd+0xcc>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d008      	beq.n	8007852 <TIM_CCxChannelCmd+0x56>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4a22      	ldr	r2, [pc, #136]	; (80078cc <TIM_CCxChannelCmd+0xd0>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d004      	beq.n	8007852 <TIM_CCxChannelCmd+0x56>
 8007848:	f641 5194 	movw	r1, #7572	; 0x1d94
 800784c:	4820      	ldr	r0, [pc, #128]	; (80078d0 <TIM_CCxChannelCmd+0xd4>)
 800784e:	f7f9 fafe 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d010      	beq.n	800787a <TIM_CCxChannelCmd+0x7e>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b04      	cmp	r3, #4
 800785c:	d00d      	beq.n	800787a <TIM_CCxChannelCmd+0x7e>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b08      	cmp	r3, #8
 8007862:	d00a      	beq.n	800787a <TIM_CCxChannelCmd+0x7e>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b0c      	cmp	r3, #12
 8007868:	d007      	beq.n	800787a <TIM_CCxChannelCmd+0x7e>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b3c      	cmp	r3, #60	; 0x3c
 800786e:	d004      	beq.n	800787a <TIM_CCxChannelCmd+0x7e>
 8007870:	f641 5195 	movw	r1, #7573	; 0x1d95
 8007874:	4816      	ldr	r0, [pc, #88]	; (80078d0 <TIM_CCxChannelCmd+0xd4>)
 8007876:	f7f9 faea 	bl	8000e4e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	2201      	movs	r2, #1
 8007882:	fa02 f303 	lsl.w	r3, r2, r3
 8007886:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1a      	ldr	r2, [r3, #32]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	43db      	mvns	r3, r3
 8007890:	401a      	ands	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6a1a      	ldr	r2, [r3, #32]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	6879      	ldr	r1, [r7, #4]
 80078a2:	fa01 f303 	lsl.w	r3, r1, r3
 80078a6:	431a      	orrs	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	621a      	str	r2, [r3, #32]
}
 80078ac:	bf00      	nop
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	40010000 	.word	0x40010000
 80078b8:	40000400 	.word	0x40000400
 80078bc:	40000800 	.word	0x40000800
 80078c0:	40000c00 	.word	0x40000c00
 80078c4:	40014000 	.word	0x40014000
 80078c8:	40014400 	.word	0x40014400
 80078cc:	40014800 	.word	0x40014800
 80078d0:	0800f9dc 	.word	0x0800f9dc

080078d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a55      	ldr	r2, [pc, #340]	; (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d018      	beq.n	800791a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f0:	d013      	beq.n	800791a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a51      	ldr	r2, [pc, #324]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d00e      	beq.n	800791a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a4f      	ldr	r2, [pc, #316]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d009      	beq.n	800791a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a4e      	ldr	r2, [pc, #312]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d004      	beq.n	800791a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007910:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8007914:	484c      	ldr	r0, [pc, #304]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007916:	f7f9 fa9a 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d020      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b10      	cmp	r3, #16
 8007928:	d01c      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b20      	cmp	r3, #32
 8007930:	d018      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b30      	cmp	r3, #48	; 0x30
 8007938:	d014      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	d010      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b50      	cmp	r3, #80	; 0x50
 8007948:	d00c      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b60      	cmp	r3, #96	; 0x60
 8007950:	d008      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b70      	cmp	r3, #112	; 0x70
 8007958:	d004      	beq.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800795a:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800795e:	483a      	ldr	r0, [pc, #232]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007960:	f7f9 fa75 	bl	8000e4e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b80      	cmp	r3, #128	; 0x80
 800796a:	d008      	beq.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d004      	beq.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007974:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8007978:	4833      	ldr	r0, [pc, #204]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800797a:	f7f9 fa68 	bl	8000e4e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007988:	2302      	movs	r3, #2
 800798a:	e050      	b.n	8007a2e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1b      	ldr	r2, [pc, #108]	; (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d018      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d8:	d013      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a17      	ldr	r2, [pc, #92]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d00e      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a15      	ldr	r2, [pc, #84]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d009      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a14      	ldr	r2, [pc, #80]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d004      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a13      	ldr	r2, [pc, #76]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d10c      	bne.n	8007a1c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40010000 	.word	0x40010000
 8007a3c:	40000400 	.word	0x40000400
 8007a40:	40000800 	.word	0x40000800
 8007a44:	40000c00 	.word	0x40000c00
 8007a48:	0800fa14 	.word	0x0800fa14
 8007a4c:	40014000 	.word	0x40014000

08007a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a78:	b084      	sub	sp, #16
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	f107 001c 	add.w	r0, r7, #28
 8007a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d122      	bne.n	8007ad6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d105      	bne.n	8007aca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 fbee 	bl	80092ac <USB_CoreReset>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
 8007ad4:	e01a      	b.n	8007b0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 fbe2 	bl	80092ac <USB_CoreReset>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	639a      	str	r2, [r3, #56]	; 0x38
 8007afe:	e005      	b.n	8007b0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d10b      	bne.n	8007b2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f043 0206 	orr.w	r2, r3, #6
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f043 0220 	orr.w	r2, r3, #32
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b36:	b004      	add	sp, #16
 8007b38:	4770      	bx	lr
	...

08007b3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d165      	bne.n	8007c1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	4a41      	ldr	r2, [pc, #260]	; (8007c58 <USB_SetTurnaroundTime+0x11c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d906      	bls.n	8007b66 <USB_SetTurnaroundTime+0x2a>
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4a40      	ldr	r2, [pc, #256]	; (8007c5c <USB_SetTurnaroundTime+0x120>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d202      	bcs.n	8007b66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b60:	230f      	movs	r3, #15
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	e062      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4a3c      	ldr	r2, [pc, #240]	; (8007c5c <USB_SetTurnaroundTime+0x120>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d306      	bcc.n	8007b7c <USB_SetTurnaroundTime+0x40>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	4a3b      	ldr	r2, [pc, #236]	; (8007c60 <USB_SetTurnaroundTime+0x124>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d202      	bcs.n	8007b7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b76:	230e      	movs	r3, #14
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	e057      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4a38      	ldr	r2, [pc, #224]	; (8007c60 <USB_SetTurnaroundTime+0x124>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d306      	bcc.n	8007b92 <USB_SetTurnaroundTime+0x56>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4a37      	ldr	r2, [pc, #220]	; (8007c64 <USB_SetTurnaroundTime+0x128>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d202      	bcs.n	8007b92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b8c:	230d      	movs	r3, #13
 8007b8e:	617b      	str	r3, [r7, #20]
 8007b90:	e04c      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	4a33      	ldr	r2, [pc, #204]	; (8007c64 <USB_SetTurnaroundTime+0x128>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d306      	bcc.n	8007ba8 <USB_SetTurnaroundTime+0x6c>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	4a32      	ldr	r2, [pc, #200]	; (8007c68 <USB_SetTurnaroundTime+0x12c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d802      	bhi.n	8007ba8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007ba2:	230c      	movs	r3, #12
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	e041      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	4a2f      	ldr	r2, [pc, #188]	; (8007c68 <USB_SetTurnaroundTime+0x12c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d906      	bls.n	8007bbe <USB_SetTurnaroundTime+0x82>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4a2e      	ldr	r2, [pc, #184]	; (8007c6c <USB_SetTurnaroundTime+0x130>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d802      	bhi.n	8007bbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007bb8:	230b      	movs	r3, #11
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	e036      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	4a2a      	ldr	r2, [pc, #168]	; (8007c6c <USB_SetTurnaroundTime+0x130>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d906      	bls.n	8007bd4 <USB_SetTurnaroundTime+0x98>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4a29      	ldr	r2, [pc, #164]	; (8007c70 <USB_SetTurnaroundTime+0x134>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d802      	bhi.n	8007bd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007bce:	230a      	movs	r3, #10
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	e02b      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	4a26      	ldr	r2, [pc, #152]	; (8007c70 <USB_SetTurnaroundTime+0x134>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d906      	bls.n	8007bea <USB_SetTurnaroundTime+0xae>
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4a25      	ldr	r2, [pc, #148]	; (8007c74 <USB_SetTurnaroundTime+0x138>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d202      	bcs.n	8007bea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007be4:	2309      	movs	r3, #9
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e020      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	4a21      	ldr	r2, [pc, #132]	; (8007c74 <USB_SetTurnaroundTime+0x138>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d306      	bcc.n	8007c00 <USB_SetTurnaroundTime+0xc4>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	4a20      	ldr	r2, [pc, #128]	; (8007c78 <USB_SetTurnaroundTime+0x13c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d802      	bhi.n	8007c00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007bfa:	2308      	movs	r3, #8
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	e015      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4a1d      	ldr	r2, [pc, #116]	; (8007c78 <USB_SetTurnaroundTime+0x13c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d906      	bls.n	8007c16 <USB_SetTurnaroundTime+0xda>
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4a1c      	ldr	r2, [pc, #112]	; (8007c7c <USB_SetTurnaroundTime+0x140>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d202      	bcs.n	8007c16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c10:	2307      	movs	r3, #7
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e00a      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c16:	2306      	movs	r3, #6
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	e007      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d102      	bne.n	8007c28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c22:	2309      	movs	r3, #9
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	e001      	b.n	8007c2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c28:	2309      	movs	r3, #9
 8007c2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	029b      	lsls	r3, r3, #10
 8007c40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c44:	431a      	orrs	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	00d8acbf 	.word	0x00d8acbf
 8007c5c:	00e4e1c0 	.word	0x00e4e1c0
 8007c60:	00f42400 	.word	0x00f42400
 8007c64:	01067380 	.word	0x01067380
 8007c68:	011a499f 	.word	0x011a499f
 8007c6c:	01312cff 	.word	0x01312cff
 8007c70:	014ca43f 	.word	0x014ca43f
 8007c74:	016e3600 	.word	0x016e3600
 8007c78:	01a6ab1f 	.word	0x01a6ab1f
 8007c7c:	01e84800 	.word	0x01e84800

08007c80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f043 0201 	orr.w	r2, r3, #1
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f023 0201 	bic.w	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d115      	bne.n	8007d12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	f7f9 fffc 	bl	8001cf0 <HAL_Delay>
      ms++;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f001 fa45 	bl	800918e <USB_GetMode>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d01e      	beq.n	8007d48 <USB_SetCurrentMode+0x84>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b31      	cmp	r3, #49	; 0x31
 8007d0e:	d9f0      	bls.n	8007cf2 <USB_SetCurrentMode+0x2e>
 8007d10:	e01a      	b.n	8007d48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d115      	bne.n	8007d44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d24:	2001      	movs	r0, #1
 8007d26:	f7f9 ffe3 	bl	8001cf0 <HAL_Delay>
      ms++;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 fa2c 	bl	800918e <USB_GetMode>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <USB_SetCurrentMode+0x84>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b31      	cmp	r3, #49	; 0x31
 8007d40:	d9f0      	bls.n	8007d24 <USB_SetCurrentMode+0x60>
 8007d42:	e001      	b.n	8007d48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e005      	b.n	8007d54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b32      	cmp	r3, #50	; 0x32
 8007d4c:	d101      	bne.n	8007d52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e000      	b.n	8007d54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b086      	sub	sp, #24
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d76:	2300      	movs	r3, #0
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	e009      	b.n	8007d90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	3340      	adds	r3, #64	; 0x40
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	613b      	str	r3, [r7, #16]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	2b0e      	cmp	r3, #14
 8007d94:	d9f2      	bls.n	8007d7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d11c      	bne.n	8007dd6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007daa:	f043 0302 	orr.w	r3, r3, #2
 8007dae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
 8007dd4:	e00b      	b.n	8007dee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007df4:	461a      	mov	r2, r3
 8007df6:	2300      	movs	r3, #0
 8007df8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e00:	4619      	mov	r1, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e08:	461a      	mov	r2, r3
 8007e0a:	680b      	ldr	r3, [r1, #0]
 8007e0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d10c      	bne.n	8007e2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d104      	bne.n	8007e24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f965 	bl	80080ec <USB_SetDevSpeed>
 8007e22:	e008      	b.n	8007e36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e24:	2101      	movs	r1, #1
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f960 	bl	80080ec <USB_SetDevSpeed>
 8007e2c:	e003      	b.n	8007e36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e2e:	2103      	movs	r1, #3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f95b 	bl	80080ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e36:	2110      	movs	r1, #16
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f8f3 	bl	8008024 <USB_FlushTxFifo>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f91f 	bl	800808c <USB_FlushRxFifo>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2300      	movs	r3, #0
 8007e62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e76:	461a      	mov	r2, r3
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	e043      	b.n	8007f0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e98:	d118      	bne.n	8007ecc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10a      	bne.n	8007eb6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eac:	461a      	mov	r2, r3
 8007eae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	e013      	b.n	8007ede <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	e008      	b.n	8007ede <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed8:	461a      	mov	r2, r3
 8007eda:	2300      	movs	r3, #0
 8007edc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eea:	461a      	mov	r2, r3
 8007eec:	2300      	movs	r3, #0
 8007eee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efc:	461a      	mov	r2, r3
 8007efe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	3301      	adds	r3, #1
 8007f08:	613b      	str	r3, [r7, #16]
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d3b7      	bcc.n	8007e82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f12:	2300      	movs	r3, #0
 8007f14:	613b      	str	r3, [r7, #16]
 8007f16:	e043      	b.n	8007fa0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f2e:	d118      	bne.n	8007f62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10a      	bne.n	8007f4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f42:	461a      	mov	r2, r3
 8007f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	e013      	b.n	8007f74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	e008      	b.n	8007f74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6e:	461a      	mov	r2, r3
 8007f70:	2300      	movs	r3, #0
 8007f72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f80:	461a      	mov	r2, r3
 8007f82:	2300      	movs	r3, #0
 8007f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f92:	461a      	mov	r2, r3
 8007f94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d3b7      	bcc.n	8007f18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007fc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d105      	bne.n	8007fdc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	f043 0210 	orr.w	r2, r3, #16
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699a      	ldr	r2, [r3, #24]
 8007fe0:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <USB_DevInit+0x2c4>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d005      	beq.n	8007ffa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	f043 0208 	orr.w	r2, r3, #8
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d107      	bne.n	8008010 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008008:	f043 0304 	orr.w	r3, r3, #4
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008010:	7dfb      	ldrb	r3, [r7, #23]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800801c:	b004      	add	sp, #16
 800801e:	4770      	bx	lr
 8008020:	803c3800 	.word	0x803c3800

08008024 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3301      	adds	r3, #1
 8008036:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4a13      	ldr	r2, [pc, #76]	; (8008088 <USB_FlushTxFifo+0x64>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d901      	bls.n	8008044 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e01b      	b.n	800807c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	daf2      	bge.n	8008032 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	019b      	lsls	r3, r3, #6
 8008054:	f043 0220 	orr.w	r2, r3, #32
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3301      	adds	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4a08      	ldr	r2, [pc, #32]	; (8008088 <USB_FlushTxFifo+0x64>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d901      	bls.n	800806e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e006      	b.n	800807c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b20      	cmp	r3, #32
 8008078:	d0f0      	beq.n	800805c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	00030d40 	.word	0x00030d40

0800808c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3301      	adds	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	4a11      	ldr	r2, [pc, #68]	; (80080e8 <USB_FlushRxFifo+0x5c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d901      	bls.n	80080aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e018      	b.n	80080dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	daf2      	bge.n	8008098 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2210      	movs	r2, #16
 80080ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3301      	adds	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4a08      	ldr	r2, [pc, #32]	; (80080e8 <USB_FlushRxFifo+0x5c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d901      	bls.n	80080ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e006      	b.n	80080dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d0f0      	beq.n	80080bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	00030d40 	.word	0x00030d40

080080ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	68f9      	ldr	r1, [r7, #12]
 8008108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800810c:	4313      	orrs	r3, r2
 800810e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800811e:	b480      	push	{r7}
 8008120:	b087      	sub	sp, #28
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 0306 	and.w	r3, r3, #6
 8008136:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]
 8008142:	e00a      	b.n	800815a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d002      	beq.n	8008150 <USB_GetDevSpeed+0x32>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b06      	cmp	r3, #6
 800814e:	d102      	bne.n	8008156 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008150:	2302      	movs	r3, #2
 8008152:	75fb      	strb	r3, [r7, #23]
 8008154:	e001      	b.n	800815a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008156:	230f      	movs	r3, #15
 8008158:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800815a:	7dfb      	ldrb	r3, [r7, #23]
}
 800815c:	4618      	mov	r0, r3
 800815e:	371c      	adds	r7, #28
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	785b      	ldrb	r3, [r3, #1]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d13a      	bne.n	80081fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818a:	69da      	ldr	r2, [r3, #28]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	f003 030f 	and.w	r3, r3, #15
 8008194:	2101      	movs	r1, #1
 8008196:	fa01 f303 	lsl.w	r3, r1, r3
 800819a:	b29b      	uxth	r3, r3
 800819c:	68f9      	ldr	r1, [r7, #12]
 800819e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081a2:	4313      	orrs	r3, r2
 80081a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d155      	bne.n	8008268 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	791b      	ldrb	r3, [r3, #4]
 80081d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	059b      	lsls	r3, r3, #22
 80081de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081e0:	4313      	orrs	r3, r2
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	e036      	b.n	8008268 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008200:	69da      	ldr	r2, [r3, #28]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	2101      	movs	r1, #1
 800820c:	fa01 f303 	lsl.w	r3, r1, r3
 8008210:	041b      	lsls	r3, r3, #16
 8008212:	68f9      	ldr	r1, [r7, #12]
 8008214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008218:	4313      	orrs	r3, r2
 800821a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d11a      	bne.n	8008268 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	791b      	ldrb	r3, [r3, #4]
 800824c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800824e:	430b      	orrs	r3, r1
 8008250:	4313      	orrs	r3, r2
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	440a      	add	r2, r1
 800825a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800825e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008266:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
	...

08008278 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d161      	bne.n	8008358 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082aa:	d11f      	bne.n	80082ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	0151      	lsls	r1, r2, #5
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	440a      	add	r2, r1
 80082c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	0151      	lsls	r1, r2, #5
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	440a      	add	r2, r1
 80082e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	f003 030f 	and.w	r3, r3, #15
 80082fc:	2101      	movs	r1, #1
 80082fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008302:	b29b      	uxth	r3, r3
 8008304:	43db      	mvns	r3, r3
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800830c:	4013      	ands	r3, r2
 800830e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008316:	69da      	ldr	r2, [r3, #28]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	f003 030f 	and.w	r3, r3, #15
 8008320:	2101      	movs	r1, #1
 8008322:	fa01 f303 	lsl.w	r3, r1, r3
 8008326:	b29b      	uxth	r3, r3
 8008328:	43db      	mvns	r3, r3
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008330:	4013      	ands	r3, r2
 8008332:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	0159      	lsls	r1, r3, #5
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	440b      	add	r3, r1
 800834a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834e:	4619      	mov	r1, r3
 8008350:	4b35      	ldr	r3, [pc, #212]	; (8008428 <USB_DeactivateEndpoint+0x1b0>)
 8008352:	4013      	ands	r3, r2
 8008354:	600b      	str	r3, [r1, #0]
 8008356:	e060      	b.n	800841a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4413      	add	r3, r2
 8008360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800836a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800836e:	d11f      	bne.n	80083b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	0151      	lsls	r1, r2, #5
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	440a      	add	r2, r1
 8008386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800838a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800838e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	0151      	lsls	r1, r2, #5
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	440a      	add	r2, r1
 80083a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	f003 030f 	and.w	r3, r3, #15
 80083c0:	2101      	movs	r1, #1
 80083c2:	fa01 f303 	lsl.w	r3, r1, r3
 80083c6:	041b      	lsls	r3, r3, #16
 80083c8:	43db      	mvns	r3, r3
 80083ca:	68f9      	ldr	r1, [r7, #12]
 80083cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083d0:	4013      	ands	r3, r2
 80083d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083da:	69da      	ldr	r2, [r3, #28]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	f003 030f 	and.w	r3, r3, #15
 80083e4:	2101      	movs	r1, #1
 80083e6:	fa01 f303 	lsl.w	r3, r1, r3
 80083ea:	041b      	lsls	r3, r3, #16
 80083ec:	43db      	mvns	r3, r3
 80083ee:	68f9      	ldr	r1, [r7, #12]
 80083f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083f4:	4013      	ands	r3, r2
 80083f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	0159      	lsls	r1, r3, #5
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	440b      	add	r3, r1
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	4619      	mov	r1, r3
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <USB_DeactivateEndpoint+0x1b4>)
 8008416:	4013      	ands	r3, r2
 8008418:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	ec337800 	.word	0xec337800
 800842c:	eff37800 	.word	0xeff37800

08008430 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08a      	sub	sp, #40	; 0x28
 8008434:	af02      	add	r7, sp, #8
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	4613      	mov	r3, r2
 800843c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	2b01      	cmp	r3, #1
 800844e:	f040 815c 	bne.w	800870a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d132      	bne.n	80084c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008474:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008478:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800847c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	69ba      	ldr	r2, [r7, #24]
 800848e:	0151      	lsls	r1, r2, #5
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	440a      	add	r2, r1
 8008494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800849c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	0151      	lsls	r1, r2, #5
 80084b0:	69fa      	ldr	r2, [r7, #28]
 80084b2:	440a      	add	r2, r1
 80084b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b8:	0cdb      	lsrs	r3, r3, #19
 80084ba:	04db      	lsls	r3, r3, #19
 80084bc:	6113      	str	r3, [r2, #16]
 80084be:	e074      	b.n	80085aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084da:	0cdb      	lsrs	r3, r3, #19
 80084dc:	04db      	lsls	r3, r3, #19
 80084de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	69fa      	ldr	r2, [r7, #28]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008502:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008510:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	6999      	ldr	r1, [r3, #24]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	440b      	add	r3, r1
 800851c:	1e59      	subs	r1, r3, #1
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	fbb1 f3f3 	udiv	r3, r1, r3
 8008526:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008528:	4b9d      	ldr	r3, [pc, #628]	; (80087a0 <USB_EPStartXfer+0x370>)
 800852a:	400b      	ands	r3, r1
 800852c:	69b9      	ldr	r1, [r7, #24]
 800852e:	0148      	lsls	r0, r1, #5
 8008530:	69f9      	ldr	r1, [r7, #28]
 8008532:	4401      	add	r1, r0
 8008534:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008538:	4313      	orrs	r3, r2
 800853a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008548:	691a      	ldr	r2, [r3, #16]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008552:	69b9      	ldr	r1, [r7, #24]
 8008554:	0148      	lsls	r0, r1, #5
 8008556:	69f9      	ldr	r1, [r7, #28]
 8008558:	4401      	add	r1, r0
 800855a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800855e:	4313      	orrs	r3, r2
 8008560:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	791b      	ldrb	r3, [r3, #4]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d11f      	bne.n	80085aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	4413      	add	r3, r2
 8008572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	0151      	lsls	r1, r2, #5
 800857c:	69fa      	ldr	r2, [r7, #28]
 800857e:	440a      	add	r2, r1
 8008580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008584:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008588:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	0151      	lsls	r1, r2, #5
 800859c:	69fa      	ldr	r2, [r7, #28]
 800859e:	440a      	add	r2, r1
 80085a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80085aa:	79fb      	ldrb	r3, [r7, #7]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d14b      	bne.n	8008648 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d009      	beq.n	80085cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c4:	461a      	mov	r2, r3
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	791b      	ldrb	r3, [r3, #4]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d128      	bne.n	8008626 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d110      	bne.n	8008606 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	0151      	lsls	r1, r2, #5
 80085f6:	69fa      	ldr	r2, [r7, #28]
 80085f8:	440a      	add	r2, r1
 80085fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	e00f      	b.n	8008626 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008624:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008640:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	e133      	b.n	80088b0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	4413      	add	r3, r2
 8008650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	0151      	lsls	r1, r2, #5
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	440a      	add	r2, r1
 800865e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008662:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008666:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	791b      	ldrb	r3, [r3, #4]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d015      	beq.n	800869c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 811b 	beq.w	80088b0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	2101      	movs	r1, #1
 800868c:	fa01 f303 	lsl.w	r3, r1, r3
 8008690:	69f9      	ldr	r1, [r7, #28]
 8008692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008696:	4313      	orrs	r3, r2
 8008698:	634b      	str	r3, [r1, #52]	; 0x34
 800869a:	e109      	b.n	80088b0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d110      	bne.n	80086ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	e00f      	b.n	80086ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6919      	ldr	r1, [r3, #16]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	781a      	ldrb	r2, [r3, #0]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	b298      	uxth	r0, r3
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	4603      	mov	r3, r0
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 fade 	bl	8008cc4 <USB_WritePacket>
 8008708:	e0d2      	b.n	80088b0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	4413      	add	r3, r2
 8008712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	0151      	lsls	r1, r2, #5
 800871c:	69fa      	ldr	r2, [r7, #28]
 800871e:	440a      	add	r2, r1
 8008720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008724:	0cdb      	lsrs	r3, r3, #19
 8008726:	04db      	lsls	r3, r3, #19
 8008728:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	0151      	lsls	r1, r2, #5
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	440a      	add	r2, r1
 8008740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008744:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008748:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800874c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d126      	bne.n	80087a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800876c:	69b9      	ldr	r1, [r7, #24]
 800876e:	0148      	lsls	r0, r1, #5
 8008770:	69f9      	ldr	r1, [r7, #28]
 8008772:	4401      	add	r1, r0
 8008774:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008778:	4313      	orrs	r3, r2
 800877a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008796:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800879a:	6113      	str	r3, [r2, #16]
 800879c:	e03a      	b.n	8008814 <USB_EPStartXfer+0x3e4>
 800879e:	bf00      	nop
 80087a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	699a      	ldr	r2, [r3, #24]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	4413      	add	r3, r2
 80087ae:	1e5a      	subs	r2, r3, #1
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	8afa      	ldrh	r2, [r7, #22]
 80087c0:	fb03 f202 	mul.w	r2, r3, r2
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d4:	691a      	ldr	r2, [r3, #16]
 80087d6:	8afb      	ldrh	r3, [r7, #22]
 80087d8:	04d9      	lsls	r1, r3, #19
 80087da:	4b38      	ldr	r3, [pc, #224]	; (80088bc <USB_EPStartXfer+0x48c>)
 80087dc:	400b      	ands	r3, r1
 80087de:	69b9      	ldr	r1, [r7, #24]
 80087e0:	0148      	lsls	r0, r1, #5
 80087e2:	69f9      	ldr	r1, [r7, #28]
 80087e4:	4401      	add	r1, r0
 80087e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087ea:	4313      	orrs	r3, r2
 80087ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008804:	69b9      	ldr	r1, [r7, #24]
 8008806:	0148      	lsls	r0, r1, #5
 8008808:	69f9      	ldr	r1, [r7, #28]
 800880a:	4401      	add	r1, r0
 800880c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008810:	4313      	orrs	r3, r2
 8008812:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d10d      	bne.n	8008836 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d009      	beq.n	8008836 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	6919      	ldr	r1, [r3, #16]
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	4413      	add	r3, r2
 800882e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008832:	460a      	mov	r2, r1
 8008834:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	791b      	ldrb	r3, [r3, #4]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d128      	bne.n	8008890 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884a:	2b00      	cmp	r3, #0
 800884c:	d110      	bne.n	8008870 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	0151      	lsls	r1, r2, #5
 8008860:	69fa      	ldr	r2, [r7, #28]
 8008862:	440a      	add	r2, r1
 8008864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008868:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	e00f      	b.n	8008890 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	440a      	add	r2, r1
 8008886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800888a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800888e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	69fa      	ldr	r2, [r7, #28]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3720      	adds	r7, #32
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	1ff80000 	.word	0x1ff80000

080088c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4613      	mov	r3, r2
 80088cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	785b      	ldrb	r3, [r3, #1]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	f040 80ce 	bne.w	8008a7e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d132      	bne.n	8008950 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	0151      	lsls	r1, r2, #5
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	440a      	add	r2, r1
 8008900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008904:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008908:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800890c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	0151      	lsls	r1, r2, #5
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	440a      	add	r2, r1
 8008924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800892c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	440a      	add	r2, r1
 8008944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008948:	0cdb      	lsrs	r3, r3, #19
 800894a:	04db      	lsls	r3, r3, #19
 800894c:	6113      	str	r3, [r2, #16]
 800894e:	e04e      	b.n	80089ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	0151      	lsls	r1, r2, #5
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	440a      	add	r2, r1
 8008966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800896a:	0cdb      	lsrs	r3, r3, #19
 800896c:	04db      	lsls	r3, r3, #19
 800896e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	4413      	add	r3, r2
 8008978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	0151      	lsls	r1, r2, #5
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	440a      	add	r2, r1
 8008986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800898a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800898e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008992:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	699a      	ldr	r2, [r3, #24]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	429a      	cmp	r2, r3
 800899e:	d903      	bls.n	80089a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089de:	6939      	ldr	r1, [r7, #16]
 80089e0:	0148      	lsls	r0, r1, #5
 80089e2:	6979      	ldr	r1, [r7, #20]
 80089e4:	4401      	add	r1, r0
 80089e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089ea:	4313      	orrs	r3, r2
 80089ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80089ee:	79fb      	ldrb	r3, [r7, #7]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d11e      	bne.n	8008a32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d009      	beq.n	8008a10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	0151      	lsls	r1, r2, #5
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	440a      	add	r2, r1
 8008a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	e097      	b.n	8008b62 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	015a      	lsls	r2, r3, #5
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	0151      	lsls	r1, r2, #5
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	440a      	add	r2, r1
 8008a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 8083 	beq.w	8008b62 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a72:	6979      	ldr	r1, [r7, #20]
 8008a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	634b      	str	r3, [r1, #52]	; 0x34
 8008a7c:	e071      	b.n	8008b62 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	0151      	lsls	r1, r2, #5
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	440a      	add	r2, r1
 8008a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a98:	0cdb      	lsrs	r3, r3, #19
 8008a9a:	04db      	lsls	r3, r3, #19
 8008a9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ab8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008abc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ac0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	68da      	ldr	r2, [r3, #12]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008af4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	015a      	lsls	r2, r3, #5
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	4413      	add	r3, r2
 8008b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b06:	691a      	ldr	r2, [r3, #16]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b10:	6939      	ldr	r1, [r7, #16]
 8008b12:	0148      	lsls	r0, r1, #5
 8008b14:	6979      	ldr	r1, [r7, #20]
 8008b16:	4401      	add	r1, r0
 8008b18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d10d      	bne.n	8008b42 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d009      	beq.n	8008b42 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	6919      	ldr	r1, [r3, #16]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3e:	460a      	mov	r2, r1
 8008b40:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	0151      	lsls	r1, r2, #5
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	440a      	add	r2, r1
 8008b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d14a      	bne.n	8008c24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ba6:	f040 8086 	bne.w	8008cb6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	7812      	ldrb	r2, [r2, #0]
 8008bbe:	0151      	lsls	r1, r2, #5
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	440a      	add	r2, r1
 8008bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bcc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	7812      	ldrb	r2, [r2, #0]
 8008be2:	0151      	lsls	r1, r2, #5
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	440a      	add	r2, r1
 8008be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d902      	bls.n	8008c08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	75fb      	strb	r3, [r7, #23]
          break;
 8008c06:	e056      	b.n	8008cb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c20:	d0e7      	beq.n	8008bf2 <USB_EPStopXfer+0x82>
 8008c22:	e048      	b.n	8008cb6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c3c:	d13b      	bne.n	8008cb6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	7812      	ldrb	r2, [r2, #0]
 8008c76:	0151      	lsls	r1, r2, #5
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	440a      	add	r2, r1
 8008c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d902      	bls.n	8008c9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	75fb      	strb	r3, [r7, #23]
          break;
 8008c9a:	e00c      	b.n	8008cb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cb4:	d0e7      	beq.n	8008c86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	371c      	adds	r7, #28
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b089      	sub	sp, #36	; 0x24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4611      	mov	r1, r2
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	71fb      	strb	r3, [r7, #7]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d123      	bne.n	8008d32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008cea:	88bb      	ldrh	r3, [r7, #4]
 8008cec:	3303      	adds	r3, #3
 8008cee:	089b      	lsrs	r3, r3, #2
 8008cf0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61bb      	str	r3, [r7, #24]
 8008cf6:	e018      	b.n	8008d2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008cf8:	79fb      	ldrb	r3, [r7, #7]
 8008cfa:	031a      	lsls	r2, r3, #12
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d04:	461a      	mov	r2, r3
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	3301      	adds	r3, #1
 8008d16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	3301      	adds	r3, #1
 8008d22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	3301      	adds	r3, #1
 8008d28:	61bb      	str	r3, [r7, #24]
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d3e2      	bcc.n	8008cf8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3724      	adds	r7, #36	; 0x24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b08b      	sub	sp, #44	; 0x2c
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	089b      	lsrs	r3, r3, #2
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d5e:	88fb      	ldrh	r3, [r7, #6]
 8008d60:	f003 0303 	and.w	r3, r3, #3
 8008d64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d66:	2300      	movs	r3, #0
 8008d68:	623b      	str	r3, [r7, #32]
 8008d6a:	e014      	b.n	8008d96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	3301      	adds	r3, #1
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	3301      	adds	r3, #1
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	3301      	adds	r3, #1
 8008d94:	623b      	str	r3, [r7, #32]
 8008d96:	6a3a      	ldr	r2, [r7, #32]
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d3e6      	bcc.n	8008d6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d9e:	8bfb      	ldrh	r3, [r7, #30]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01e      	beq.n	8008de2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dae:	461a      	mov	r2, r3
 8008db0:	f107 0310 	add.w	r3, r7, #16
 8008db4:	6812      	ldr	r2, [r2, #0]
 8008db6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	701a      	strb	r2, [r3, #0]
      i++;
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	623b      	str	r3, [r7, #32]
      pDest++;
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008dd6:	8bfb      	ldrh	r3, [r7, #30]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ddc:	8bfb      	ldrh	r3, [r7, #30]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1ea      	bne.n	8008db8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	372c      	adds	r7, #44	; 0x2c
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d12c      	bne.n	8008e66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	db12      	blt.n	8008e44 <USB_EPSetStall+0x54>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00f      	beq.n	8008e44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	e02b      	b.n	8008ebe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	db12      	blt.n	8008e9e <USB_EPSetStall+0xae>
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00f      	beq.n	8008e9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	0151      	lsls	r1, r2, #5
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	440a      	add	r2, r1
 8008e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	0151      	lsls	r1, r2, #5
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	440a      	add	r2, r1
 8008eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ebc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d128      	bne.n	8008f3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	0151      	lsls	r1, r2, #5
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	440a      	add	r2, r1
 8008efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	791b      	ldrb	r3, [r3, #4]
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d003      	beq.n	8008f18 <USB_EPClearStall+0x4c>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	791b      	ldrb	r3, [r3, #4]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d138      	bne.n	8008f8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	0151      	lsls	r1, r2, #5
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	e027      	b.n	8008f8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	791b      	ldrb	r3, [r3, #4]
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d003      	beq.n	8008f6a <USB_EPClearStall+0x9e>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	791b      	ldrb	r3, [r3, #4]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d10f      	bne.n	8008f8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008fba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008fcc:	68f9      	ldr	r1, [r7, #12]
 8008fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ffe:	f023 0303 	bic.w	r3, r3, #3
 8009002:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009012:	f023 0302 	bic.w	r3, r3, #2
 8009016:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009026:	b480      	push	{r7}
 8009028:	b085      	sub	sp, #20
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009054:	f043 0302 	orr.w	r3, r3, #2
 8009058:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	4013      	ands	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009080:	68fb      	ldr	r3, [r7, #12]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800908e:	b480      	push	{r7}
 8009090:	b085      	sub	sp, #20
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	4013      	ands	r3, r2
 80090b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	0c1b      	lsrs	r3, r3, #16
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	4013      	ands	r3, r2
 80090e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	b29b      	uxth	r3, r3
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b085      	sub	sp, #20
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	4013      	ands	r3, r2
 8009122:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009124:	68bb      	ldr	r3, [r7, #8]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009132:	b480      	push	{r7}
 8009134:	b087      	sub	sp, #28
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	460b      	mov	r3, r1
 800913c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009154:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009156:	78fb      	ldrb	r3, [r7, #3]
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	fa22 f303 	lsr.w	r3, r2, r3
 8009162:	01db      	lsls	r3, r3, #7
 8009164:	b2db      	uxtb	r3, r3
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	4313      	orrs	r3, r2
 800916a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	4013      	ands	r3, r2
 800917e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009180:	68bb      	ldr	r3, [r7, #8]
}
 8009182:	4618      	mov	r0, r3
 8009184:	371c      	adds	r7, #28
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	f003 0301 	and.w	r3, r3, #1
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80091c8:	f023 0307 	bic.w	r3, r3, #7
 80091cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	460b      	mov	r3, r1
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	333c      	adds	r3, #60	; 0x3c
 8009206:	3304      	adds	r3, #4
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	4a26      	ldr	r2, [pc, #152]	; (80092a8 <USB_EP0_OutStart+0xb8>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d90a      	bls.n	800922a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009224:	d101      	bne.n	800922a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	e037      	b.n	800929a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009230:	461a      	mov	r2, r3
 8009232:	2300      	movs	r3, #0
 8009234:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009248:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009258:	f043 0318 	orr.w	r3, r3, #24
 800925c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800926c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009270:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d10f      	bne.n	8009298 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	697a      	ldr	r2, [r7, #20]
 800928e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009292:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009296:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	371c      	adds	r7, #28
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	4f54300a 	.word	0x4f54300a

080092ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3301      	adds	r3, #1
 80092bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4a13      	ldr	r2, [pc, #76]	; (8009310 <USB_CoreReset+0x64>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d901      	bls.n	80092ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e01b      	b.n	8009302 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	daf2      	bge.n	80092b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f043 0201 	orr.w	r2, r3, #1
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4a09      	ldr	r2, [pc, #36]	; (8009310 <USB_CoreReset+0x64>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d901      	bls.n	80092f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e006      	b.n	8009302 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d0f0      	beq.n	80092e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	00030d40 	.word	0x00030d40

08009314 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 800931c:	4a18      	ldr	r2, [pc, #96]	; (8009380 <si5351_Init+0x6c>)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 8009322:	21ff      	movs	r1, #255	; 0xff
 8009324:	2003      	movs	r0, #3
 8009326:	f000 fa0d 	bl	8009744 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 800932a:	2180      	movs	r1, #128	; 0x80
 800932c:	2010      	movs	r0, #16
 800932e:	f000 fa09 	bl	8009744 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 8009332:	2180      	movs	r1, #128	; 0x80
 8009334:	2011      	movs	r0, #17
 8009336:	f000 fa05 	bl	8009744 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 800933a:	2180      	movs	r1, #128	; 0x80
 800933c:	2012      	movs	r0, #18
 800933e:	f000 fa01 	bl	8009744 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 8009342:	2180      	movs	r1, #128	; 0x80
 8009344:	2013      	movs	r0, #19
 8009346:	f000 f9fd 	bl	8009744 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 800934a:	2180      	movs	r1, #128	; 0x80
 800934c:	2014      	movs	r0, #20
 800934e:	f000 f9f9 	bl	8009744 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 8009352:	2180      	movs	r1, #128	; 0x80
 8009354:	2015      	movs	r0, #21
 8009356:	f000 f9f5 	bl	8009744 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 800935a:	2180      	movs	r1, #128	; 0x80
 800935c:	2016      	movs	r0, #22
 800935e:	f000 f9f1 	bl	8009744 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 8009362:	2180      	movs	r1, #128	; 0x80
 8009364:	2017      	movs	r0, #23
 8009366:	f000 f9ed 	bl	8009744 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 800936a:	23c0      	movs	r3, #192	; 0xc0
 800936c:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	4619      	mov	r1, r3
 8009372:	20b7      	movs	r0, #183	; 0xb7
 8009374:	f000 f9e6 	bl	8009744 <si5351_write>
}
 8009378:	bf00      	nop
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	2000041c 	.word	0x2000041c

08009384 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b08c      	sub	sp, #48	; 0x30
 8009388:	af02      	add	r7, sp, #8
 800938a:	4603      	mov	r3, r0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	01da      	lsls	r2, r3, #7
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	01d9      	lsls	r1, r3, #7
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	fb91 f3f3 	sdiv	r3, r1, r3
 80093b0:	4413      	add	r3, r2
 80093b2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80093b6:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	01db      	lsls	r3, r3, #7
 80093bc:	69fa      	ldr	r2, [r7, #28]
 80093be:	fb93 f2f2 	sdiv	r2, r3, r2
 80093c2:	69f9      	ldr	r1, [r7, #28]
 80093c4:	fb01 f202 	mul.w	r2, r1, r2
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	617b      	str	r3, [r7, #20]
    P3 = denom;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <si5351_SetupPLL+0x56>
 80093d6:	231a      	movs	r3, #26
 80093d8:	e000      	b.n	80093dc <si5351_SetupPLL+0x58>
 80093da:	2322      	movs	r3, #34	; 0x22
 80093dc:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 80093de:	7bf8      	ldrb	r0, [r7, #15]
 80093e0:	2300      	movs	r3, #0
 80093e2:	9301      	str	r3, [sp, #4]
 80093e4:	2300      	movs	r3, #0
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	69b9      	ldr	r1, [r7, #24]
 80093ee:	f000 f9d1 	bl	8009794 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 80093f2:	21a0      	movs	r1, #160	; 0xa0
 80093f4:	20b1      	movs	r0, #177	; 0xb1
 80093f6:	f000 f9a5 	bl	8009744 <si5351_write>
}
 80093fa:	bf00      	nop
 80093fc:	3728      	adds	r7, #40	; 0x28
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 8009402:	b580      	push	{r7, lr}
 8009404:	b08c      	sub	sp, #48	; 0x30
 8009406:	af02      	add	r7, sp, #8
 8009408:	603b      	str	r3, [r7, #0]
 800940a:	4603      	mov	r3, r0
 800940c:	71fb      	strb	r3, [r7, #7]
 800940e:	460b      	mov	r3, r1
 8009410:	71bb      	strb	r3, [r7, #6]
 8009412:	4613      	mov	r3, r2
 8009414:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d901      	bls.n	8009438 <si5351_SetupOutput+0x36>
        return 1;
 8009434:	2301      	movs	r3, #1
 8009436:	e08d      	b.n	8009554 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10a      	bne.n	8009456 <si5351_SetupOutput+0x54>
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	2b07      	cmp	r3, #7
 8009444:	dd05      	ble.n	8009452 <si5351_SetupOutput+0x50>
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2b08      	cmp	r3, #8
 800944a:	d104      	bne.n	8009456 <si5351_SetupOutput+0x54>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 8009452:	2302      	movs	r3, #2
 8009454:	e07e      	b.n	8009554 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	2b04      	cmp	r3, #4
 800945a:	d109      	bne.n	8009470 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	623b      	str	r3, [r7, #32]
        P2 = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 8009464:	2301      	movs	r3, #1
 8009466:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 8009468:	2303      	movs	r3, #3
 800946a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800946e:	e016      	b.n	800949e <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	01da      	lsls	r2, r3, #7
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	01d9      	lsls	r1, r3, #7
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	fb91 f3f3 	sdiv	r3, r1, r3
 800947e:	4413      	add	r3, r2
 8009480:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8009484:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	01db      	lsls	r3, r3, #7
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	fb93 f2f2 	sdiv	r2, r3, r2
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	fb01 f202 	mul.w	r2, r1, r2
 8009496:	1a9b      	subs	r3, r3, r2
 8009498:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	757b      	strb	r3, [r7, #21]
    switch (output) {
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d014      	beq.n	80094da <si5351_SetupOutput+0xd8>
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	dc19      	bgt.n	80094e8 <si5351_SetupOutput+0xe6>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <si5351_SetupOutput+0xbc>
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d007      	beq.n	80094cc <si5351_SetupOutput+0xca>
 80094bc:	e014      	b.n	80094e8 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 80094be:	232a      	movs	r3, #42	; 0x2a
 80094c0:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 80094c2:	23a5      	movs	r3, #165	; 0xa5
 80094c4:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 80094c6:	2310      	movs	r3, #16
 80094c8:	757b      	strb	r3, [r7, #21]
        break;
 80094ca:	e00d      	b.n	80094e8 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 80094cc:	2332      	movs	r3, #50	; 0x32
 80094ce:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 80094d0:	23a6      	movs	r3, #166	; 0xa6
 80094d2:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 80094d4:	2311      	movs	r3, #17
 80094d6:	757b      	strb	r3, [r7, #21]
        break;
 80094d8:	e006      	b.n	80094e8 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 80094da:	233a      	movs	r3, #58	; 0x3a
 80094dc:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 80094de:	23a7      	movs	r3, #167	; 0xa7
 80094e0:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 80094e2:	2312      	movs	r3, #18
 80094e4:	757b      	strb	r3, [r7, #21]
        break;
 80094e6:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 80094e8:	797b      	ldrb	r3, [r7, #5]
 80094ea:	f043 030c 	orr.w	r3, r3, #12
 80094ee:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 80094f0:	79bb      	ldrb	r3, [r7, #6]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d103      	bne.n	80094fe <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 80094f6:	7d3b      	ldrb	r3, [r7, #20]
 80094f8:	f043 0320 	orr.w	r3, r3, #32
 80094fc:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d009      	beq.n	800951a <si5351_SetupOutput+0x118>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <si5351_SetupOutput+0x110>
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	2b04      	cmp	r3, #4
 8009510:	d103      	bne.n	800951a <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 8009512:	7d3b      	ldrb	r3, [r7, #20]
 8009514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009518:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800951a:	7d3a      	ldrb	r2, [r7, #20]
 800951c:	7d7b      	ldrb	r3, [r7, #21]
 800951e:	4611      	mov	r1, r2
 8009520:	4618      	mov	r0, r3
 8009522:	f000 f90f 	bl	8009744 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	7c1b      	ldrb	r3, [r3, #16]
 800952a:	7df8      	ldrb	r0, [r7, #23]
 800952c:	9301      	str	r3, [sp, #4]
 800952e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	6a39      	ldr	r1, [r7, #32]
 800953a:	f000 f92b 	bl	8009794 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800953e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009546:	b2da      	uxtb	r2, r3
 8009548:	7dbb      	ldrb	r3, [r7, #22]
 800954a:	4611      	mov	r1, r2
 800954c:	4618      	mov	r0, r3
 800954e:	f000 f8f9 	bl	8009744 <si5351_write>

    return 0;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3728      	adds	r7, #40	; 0x28
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 800955c:	b480      	push	{r7}
 800955e:	b08f      	sub	sp, #60	; 0x3c
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800956e:	da03      	bge.n	8009578 <si5351_Calc+0x1c>
 8009570:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8009574:	60fb      	str	r3, [r7, #12]
 8009576:	e005      	b.n	8009584 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4a4f      	ldr	r2, [pc, #316]	; (80096b8 <si5351_Calc+0x15c>)
 800957c:	4293      	cmp	r3, r2
 800957e:	dd01      	ble.n	8009584 <si5351_Calc+0x28>
 8009580:	4b4d      	ldr	r3, [pc, #308]	; (80096b8 <si5351_Calc+0x15c>)
 8009582:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	4a4b      	ldr	r2, [pc, #300]	; (80096bc <si5351_Calc+0x160>)
 800958e:	4293      	cmp	r3, r2
 8009590:	dc06      	bgt.n	80095a0 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	019b      	lsls	r3, r3, #6
 8009596:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2206      	movs	r2, #6
 800959c:	741a      	strb	r2, [r3, #16]
 800959e:	e002      	b.n	80095a6 <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4a45      	ldr	r2, [pc, #276]	; (80096c0 <si5351_Calc+0x164>)
 80095aa:	fb82 1203 	smull	r1, r2, r2, r3
 80095ae:	1492      	asrs	r2, r2, #18
 80095b0:	17db      	asrs	r3, r3, #31
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	4a43      	ldr	r2, [pc, #268]	; (80096c4 <si5351_Calc+0x168>)
 80095b6:	6812      	ldr	r2, [r2, #0]
 80095b8:	fb02 f303 	mul.w	r3, r2, r3
 80095bc:	4a42      	ldr	r2, [pc, #264]	; (80096c8 <si5351_Calc+0x16c>)
 80095be:	fb82 1203 	smull	r1, r2, r2, r3
 80095c2:	1152      	asrs	r2, r2, #5
 80095c4:	17db      	asrs	r3, r3, #31
 80095c6:	1a9b      	subs	r3, r3, r2
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	4413      	add	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 80095ce:	4b3f      	ldr	r3, [pc, #252]	; (80096cc <si5351_Calc+0x170>)
 80095d0:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4a3e      	ldr	r2, [pc, #248]	; (80096d0 <si5351_Calc+0x174>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	dc22      	bgt.n	8009620 <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 80095da:	2324      	movs	r3, #36	; 0x24
 80095dc:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 80095e2:	2301      	movs	r3, #1
 80095e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 80095e6:	4b3b      	ldr	r3, [pc, #236]	; (80096d4 <si5351_Calc+0x178>)
 80095e8:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80095f2:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	151b      	asrs	r3, r3, #20
 80095f8:	3301      	adds	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	fb93 f2f2 	sdiv	r2, r3, r2
 8009604:	68f9      	ldr	r1, [r7, #12]
 8009606:	fb01 f202 	mul.w	r2, r1, r2
 800960a:	1a9a      	subs	r2, r3, r2
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	fb92 f3f3 	sdiv	r3, r2, r3
 8009612:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	fb92 f3f3 	sdiv	r3, r2, r3
 800961c:	623b      	str	r3, [r7, #32]
 800961e:	e032      	b.n	8009686 <si5351_Calc+0x12a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4a2d      	ldr	r2, [pc, #180]	; (80096d8 <si5351_Calc+0x17c>)
 8009624:	4293      	cmp	r3, r2
 8009626:	dd02      	ble.n	800962e <si5351_Calc+0xd2>
            x = 4;
 8009628:	2304      	movs	r3, #4
 800962a:	62bb      	str	r3, [r7, #40]	; 0x28
 800962c:	e008      	b.n	8009640 <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	4a2a      	ldr	r2, [pc, #168]	; (80096dc <si5351_Calc+0x180>)
 8009632:	4293      	cmp	r3, r2
 8009634:	dd02      	ble.n	800963c <si5351_Calc+0xe0>
            x = 6;
 8009636:	2306      	movs	r3, #6
 8009638:	62bb      	str	r3, [r7, #40]	; 0x28
 800963a:	e001      	b.n	8009640 <si5351_Calc+0xe4>
        } else {
            x = 8;
 800963c:	2308      	movs	r3, #8
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 8009644:	2301      	movs	r3, #1
 8009646:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	fb02 f303 	mul.w	r3, r2, r3
 8009650:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	fb92 f3f3 	sdiv	r3, r2, r3
 800965a:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	151b      	asrs	r3, r3, #20
 8009660:	3301      	adds	r3, #1
 8009662:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	69fa      	ldr	r2, [r7, #28]
 8009668:	fb93 f2f2 	sdiv	r2, r3, r2
 800966c:	69f9      	ldr	r1, [r7, #28]
 800966e:	fb01 f202 	mul.w	r2, r1, r2
 8009672:	1a9a      	subs	r2, r3, r2
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	fb92 f3f3 	sdiv	r3, r2, r3
 800967a:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	fb92 f3f3 	sdiv	r3, r2, r3
 8009684:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800968a:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009690:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009696:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800969c:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a2:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a3a      	ldr	r2, [r7, #32]
 80096a8:	60da      	str	r2, [r3, #12]
}
 80096aa:	bf00      	nop
 80096ac:	373c      	adds	r7, #60	; 0x3c
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	09896800 	.word	0x09896800
 80096bc:	000f423f 	.word	0x000f423f
 80096c0:	431bde83 	.word	0x431bde83
 80096c4:	2000041c 	.word	0x2000041c
 80096c8:	51eb851f 	.word	0x51eb851f
 80096cc:	017d7840 	.word	0x017d7840
 80096d0:	04d3f63f 	.word	0x04d3f63f
 80096d4:	35a4e900 	.word	0x35a4e900
 80096d8:	08f0d17f 	.word	0x08f0d17f
 80096dc:	05f5e0ff 	.word	0x05f5e0ff

080096e0 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b08c      	sub	sp, #48	; 0x30
 80096e4:	af02      	add	r7, sp, #8
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 80096ec:	f107 0208 	add.w	r2, r7, #8
 80096f0:	f107 031c 	add.w	r3, r7, #28
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff ff30 	bl	800955c <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 80096fc:	f107 031c 	add.w	r3, r7, #28
 8009700:	4619      	mov	r1, r3
 8009702:	2000      	movs	r0, #0
 8009704:	f7ff fe3e 	bl	8009384 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 8009708:	f107 0308 	add.w	r3, r7, #8
 800970c:	78fa      	ldrb	r2, [r7, #3]
 800970e:	2100      	movs	r1, #0
 8009710:	9100      	str	r1, [sp, #0]
 8009712:	2100      	movs	r1, #0
 8009714:	2000      	movs	r0, #0
 8009716:	f7ff fe74 	bl	8009402 <si5351_SetupOutput>
}
 800971a:	bf00      	nop
 800971c:	3728      	adds	r7, #40	; 0x28
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	4603      	mov	r3, r0
 800972a:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800972c:	79fb      	ldrb	r3, [r7, #7]
 800972e:	43db      	mvns	r3, r3
 8009730:	b2db      	uxtb	r3, r3
 8009732:	4619      	mov	r1, r3
 8009734:	2003      	movs	r0, #3
 8009736:	f000 f805 	bl	8009744 <si5351_write>
}
 800973a:	bf00      	nop
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af04      	add	r7, sp, #16
 800974a:	4603      	mov	r3, r0
 800974c:	460a      	mov	r2, r1
 800974e:	71fb      	strb	r3, [r7, #7]
 8009750:	4613      	mov	r3, r2
 8009752:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 8009754:	bf00      	nop
 8009756:	f04f 33ff 	mov.w	r3, #4294967295
 800975a:	2203      	movs	r2, #3
 800975c:	21c0      	movs	r1, #192	; 0xc0
 800975e:	480c      	ldr	r0, [pc, #48]	; (8009790 <si5351_write+0x4c>)
 8009760:	f7f9 f9da 	bl	8002b18 <HAL_I2C_IsDeviceReady>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1f5      	bne.n	8009756 <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	b29a      	uxth	r2, r3
 800976e:	f04f 33ff 	mov.w	r3, #4294967295
 8009772:	9302      	str	r3, [sp, #8]
 8009774:	2301      	movs	r3, #1
 8009776:	9301      	str	r3, [sp, #4]
 8009778:	1dbb      	adds	r3, r7, #6
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	2301      	movs	r3, #1
 800977e:	21c0      	movs	r1, #192	; 0xc0
 8009780:	4803      	ldr	r0, [pc, #12]	; (8009790 <si5351_write+0x4c>)
 8009782:	f7f9 f8c3 	bl	800290c <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20000214 	.word	0x20000214

08009794 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	607a      	str	r2, [r7, #4]
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	4603      	mov	r3, r0
 80097a2:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	121b      	asrs	r3, r3, #8
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
 80097ac:	4611      	mov	r1, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff ffc8 	bl	8009744 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	3301      	adds	r3, #1
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	b2d2      	uxtb	r2, r2
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7ff ffbf 	bl	8009744 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	3302      	adds	r3, #2
 80097ca:	b2d8      	uxtb	r0, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	141b      	asrs	r3, r3, #16
 80097d0:	b25b      	sxtb	r3, r3
 80097d2:	f003 0303 	and.w	r3, r3, #3
 80097d6:	b25a      	sxtb	r2, r3
 80097d8:	7e3b      	ldrb	r3, [r7, #24]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	b25b      	sxtb	r3, r3
 80097de:	f003 030c 	and.w	r3, r3, #12
 80097e2:	b25b      	sxtb	r3, r3
 80097e4:	4313      	orrs	r3, r2
 80097e6:	b25a      	sxtb	r2, r3
 80097e8:	7f3b      	ldrb	r3, [r7, #28]
 80097ea:	011b      	lsls	r3, r3, #4
 80097ec:	b25b      	sxtb	r3, r3
 80097ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097f2:	b25b      	sxtb	r3, r3
 80097f4:	4313      	orrs	r3, r2
 80097f6:	b25b      	sxtb	r3, r3
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	4619      	mov	r1, r3
 80097fc:	f7ff ffa2 	bl	8009744 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	3303      	adds	r3, #3
 8009804:	b2da      	uxtb	r2, r3
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	121b      	asrs	r3, r3, #8
 800980a:	b2db      	uxtb	r3, r3
 800980c:	4619      	mov	r1, r3
 800980e:	4610      	mov	r0, r2
 8009810:	f7ff ff98 	bl	8009744 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	3304      	adds	r3, #4
 8009818:	b2db      	uxtb	r3, r3
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	b2d2      	uxtb	r2, r2
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff ff8f 	bl	8009744 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	3305      	adds	r3, #5
 800982a:	b2d8      	uxtb	r0, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	131b      	asrs	r3, r3, #12
 8009830:	b25b      	sxtb	r3, r3
 8009832:	f023 030f 	bic.w	r3, r3, #15
 8009836:	b25a      	sxtb	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	141b      	asrs	r3, r3, #16
 800983c:	b25b      	sxtb	r3, r3
 800983e:	f003 030f 	and.w	r3, r3, #15
 8009842:	b25b      	sxtb	r3, r3
 8009844:	4313      	orrs	r3, r2
 8009846:	b25b      	sxtb	r3, r3
 8009848:	b2db      	uxtb	r3, r3
 800984a:	4619      	mov	r1, r3
 800984c:	f7ff ff7a 	bl	8009744 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	3306      	adds	r3, #6
 8009854:	b2da      	uxtb	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	121b      	asrs	r3, r3, #8
 800985a:	b2db      	uxtb	r3, r3
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	f7ff ff70 	bl	8009744 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	3307      	adds	r3, #7
 8009868:	b2db      	uxtb	r3, r3
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	4611      	mov	r1, r2
 8009870:	4618      	mov	r0, r3
 8009872:	f7ff ff67 	bl	8009744 <si5351_write>
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800988c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009890:	f005 fa02 	bl	800ec98 <USBD_static_malloc>
 8009894:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d109      	bne.n	80098b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	32b0      	adds	r2, #176	; 0xb0
 80098a6:	2100      	movs	r1, #0
 80098a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80098ac:	2302      	movs	r3, #2
 80098ae:	e0d4      	b.n	8009a5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80098b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80098b4:	2100      	movs	r1, #0
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f005 fa7c 	bl	800edb4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	32b0      	adds	r2, #176	; 0xb0
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	32b0      	adds	r2, #176	; 0xb0
 80098d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	7c1b      	ldrb	r3, [r3, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d138      	bne.n	800995a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098e8:	4b5e      	ldr	r3, [pc, #376]	; (8009a64 <USBD_CDC_Init+0x1e4>)
 80098ea:	7819      	ldrb	r1, [r3, #0]
 80098ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098f0:	2202      	movs	r2, #2
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f005 f8ad 	bl	800ea52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80098f8:	4b5a      	ldr	r3, [pc, #360]	; (8009a64 <USBD_CDC_Init+0x1e4>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	f003 020f 	and.w	r2, r3, #15
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	440b      	add	r3, r1
 800990c:	3324      	adds	r3, #36	; 0x24
 800990e:	2201      	movs	r2, #1
 8009910:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009912:	4b55      	ldr	r3, [pc, #340]	; (8009a68 <USBD_CDC_Init+0x1e8>)
 8009914:	7819      	ldrb	r1, [r3, #0]
 8009916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800991a:	2202      	movs	r2, #2
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f005 f898 	bl	800ea52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009922:	4b51      	ldr	r3, [pc, #324]	; (8009a68 <USBD_CDC_Init+0x1e8>)
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	f003 020f 	and.w	r2, r3, #15
 800992a:	6879      	ldr	r1, [r7, #4]
 800992c:	4613      	mov	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	440b      	add	r3, r1
 8009936:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800993a:	2201      	movs	r2, #1
 800993c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800993e:	4b4b      	ldr	r3, [pc, #300]	; (8009a6c <USBD_CDC_Init+0x1ec>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	f003 020f 	and.w	r2, r3, #15
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	440b      	add	r3, r1
 8009952:	3326      	adds	r3, #38	; 0x26
 8009954:	2210      	movs	r2, #16
 8009956:	801a      	strh	r2, [r3, #0]
 8009958:	e035      	b.n	80099c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800995a:	4b42      	ldr	r3, [pc, #264]	; (8009a64 <USBD_CDC_Init+0x1e4>)
 800995c:	7819      	ldrb	r1, [r3, #0]
 800995e:	2340      	movs	r3, #64	; 0x40
 8009960:	2202      	movs	r2, #2
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f005 f875 	bl	800ea52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009968:	4b3e      	ldr	r3, [pc, #248]	; (8009a64 <USBD_CDC_Init+0x1e4>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f003 020f 	and.w	r2, r3, #15
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	440b      	add	r3, r1
 800997c:	3324      	adds	r3, #36	; 0x24
 800997e:	2201      	movs	r2, #1
 8009980:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009982:	4b39      	ldr	r3, [pc, #228]	; (8009a68 <USBD_CDC_Init+0x1e8>)
 8009984:	7819      	ldrb	r1, [r3, #0]
 8009986:	2340      	movs	r3, #64	; 0x40
 8009988:	2202      	movs	r2, #2
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f005 f861 	bl	800ea52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009990:	4b35      	ldr	r3, [pc, #212]	; (8009a68 <USBD_CDC_Init+0x1e8>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	f003 020f 	and.w	r2, r3, #15
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	440b      	add	r3, r1
 80099a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099a8:	2201      	movs	r2, #1
 80099aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80099ac:	4b2f      	ldr	r3, [pc, #188]	; (8009a6c <USBD_CDC_Init+0x1ec>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	f003 020f 	and.w	r2, r3, #15
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	3326      	adds	r3, #38	; 0x26
 80099c2:	2210      	movs	r2, #16
 80099c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099c6:	4b29      	ldr	r3, [pc, #164]	; (8009a6c <USBD_CDC_Init+0x1ec>)
 80099c8:	7819      	ldrb	r1, [r3, #0]
 80099ca:	2308      	movs	r3, #8
 80099cc:	2203      	movs	r2, #3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f005 f83f 	bl	800ea52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80099d4:	4b25      	ldr	r3, [pc, #148]	; (8009a6c <USBD_CDC_Init+0x1ec>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	f003 020f 	and.w	r2, r3, #15
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	4613      	mov	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	440b      	add	r3, r1
 80099e8:	3324      	adds	r3, #36	; 0x24
 80099ea:	2201      	movs	r2, #1
 80099ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	33b0      	adds	r3, #176	; 0xb0
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d101      	bne.n	8009a28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009a24:	2302      	movs	r3, #2
 8009a26:	e018      	b.n	8009a5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	7c1b      	ldrb	r3, [r3, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a30:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <USBD_CDC_Init+0x1e8>)
 8009a32:	7819      	ldrb	r1, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f005 f8f6 	bl	800ec30 <USBD_LL_PrepareReceive>
 8009a44:	e008      	b.n	8009a58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a46:	4b08      	ldr	r3, [pc, #32]	; (8009a68 <USBD_CDC_Init+0x1e8>)
 8009a48:	7819      	ldrb	r1, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a50:	2340      	movs	r3, #64	; 0x40
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f005 f8ec 	bl	800ec30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000107 	.word	0x20000107
 8009a68:	20000108 	.word	0x20000108
 8009a6c:	20000109 	.word	0x20000109

08009a70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009a7c:	4b3a      	ldr	r3, [pc, #232]	; (8009b68 <USBD_CDC_DeInit+0xf8>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f005 f80b 	bl	800ea9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009a88:	4b37      	ldr	r3, [pc, #220]	; (8009b68 <USBD_CDC_DeInit+0xf8>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	f003 020f 	and.w	r2, r3, #15
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	3324      	adds	r3, #36	; 0x24
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009aa2:	4b32      	ldr	r3, [pc, #200]	; (8009b6c <USBD_CDC_DeInit+0xfc>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f004 fff8 	bl	800ea9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009aae:	4b2f      	ldr	r3, [pc, #188]	; (8009b6c <USBD_CDC_DeInit+0xfc>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	f003 020f 	and.w	r2, r3, #15
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	440b      	add	r3, r1
 8009ac2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009aca:	4b29      	ldr	r3, [pc, #164]	; (8009b70 <USBD_CDC_DeInit+0x100>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f004 ffe4 	bl	800ea9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009ad6:	4b26      	ldr	r3, [pc, #152]	; (8009b70 <USBD_CDC_DeInit+0x100>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	f003 020f 	and.w	r2, r3, #15
 8009ade:	6879      	ldr	r1, [r7, #4]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	440b      	add	r3, r1
 8009aea:	3324      	adds	r3, #36	; 0x24
 8009aec:	2200      	movs	r2, #0
 8009aee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009af0:	4b1f      	ldr	r3, [pc, #124]	; (8009b70 <USBD_CDC_DeInit+0x100>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f003 020f 	and.w	r2, r3, #15
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	4613      	mov	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	440b      	add	r3, r1
 8009b04:	3326      	adds	r3, #38	; 0x26
 8009b06:	2200      	movs	r2, #0
 8009b08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	32b0      	adds	r2, #176	; 0xb0
 8009b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01f      	beq.n	8009b5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	33b0      	adds	r3, #176	; 0xb0
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	32b0      	adds	r2, #176	; 0xb0
 8009b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f005 f8b8 	bl	800ecb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	32b0      	adds	r2, #176	; 0xb0
 8009b4e:	2100      	movs	r1, #0
 8009b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20000107 	.word	0x20000107
 8009b6c:	20000108 	.word	0x20000108
 8009b70:	20000109 	.word	0x20000109

08009b74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	32b0      	adds	r2, #176	; 0xb0
 8009b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e0bf      	b.n	8009d24 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d050      	beq.n	8009c52 <USBD_CDC_Setup+0xde>
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	f040 80af 	bne.w	8009d14 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	88db      	ldrh	r3, [r3, #6]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d03a      	beq.n	8009c34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	b25b      	sxtb	r3, r3
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	da1b      	bge.n	8009c00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	33b0      	adds	r3, #176	; 0xb0
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009bde:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	88d2      	ldrh	r2, [r2, #6]
 8009be4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	88db      	ldrh	r3, [r3, #6]
 8009bea:	2b07      	cmp	r3, #7
 8009bec:	bf28      	it	cs
 8009bee:	2307      	movcs	r3, #7
 8009bf0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	89fa      	ldrh	r2, [r7, #14]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 fd43 	bl	800b684 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009bfe:	e090      	b.n	8009d22 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	785a      	ldrb	r2, [r3, #1]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	88db      	ldrh	r3, [r3, #6]
 8009c0e:	2b3f      	cmp	r3, #63	; 0x3f
 8009c10:	d803      	bhi.n	8009c1a <USBD_CDC_Setup+0xa6>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	88db      	ldrh	r3, [r3, #6]
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	e000      	b.n	8009c1c <USBD_CDC_Setup+0xa8>
 8009c1a:	2240      	movs	r2, #64	; 0x40
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009c22:	6939      	ldr	r1, [r7, #16]
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 fd55 	bl	800b6dc <USBD_CtlPrepareRx>
      break;
 8009c32:	e076      	b.n	8009d22 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	33b0      	adds	r3, #176	; 0xb0
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	7850      	ldrb	r0, [r2, #1]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	4798      	blx	r3
      break;
 8009c50:	e067      	b.n	8009d22 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	785b      	ldrb	r3, [r3, #1]
 8009c56:	2b0b      	cmp	r3, #11
 8009c58:	d851      	bhi.n	8009cfe <USBD_CDC_Setup+0x18a>
 8009c5a:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <USBD_CDC_Setup+0xec>)
 8009c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c60:	08009c91 	.word	0x08009c91
 8009c64:	08009d0d 	.word	0x08009d0d
 8009c68:	08009cff 	.word	0x08009cff
 8009c6c:	08009cff 	.word	0x08009cff
 8009c70:	08009cff 	.word	0x08009cff
 8009c74:	08009cff 	.word	0x08009cff
 8009c78:	08009cff 	.word	0x08009cff
 8009c7c:	08009cff 	.word	0x08009cff
 8009c80:	08009cff 	.word	0x08009cff
 8009c84:	08009cff 	.word	0x08009cff
 8009c88:	08009cbb 	.word	0x08009cbb
 8009c8c:	08009ce5 	.word	0x08009ce5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d107      	bne.n	8009cac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c9c:	f107 030a 	add.w	r3, r7, #10
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 fced 	bl	800b684 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009caa:	e032      	b.n	8009d12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f001 fc77 	bl	800b5a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	75fb      	strb	r3, [r7, #23]
          break;
 8009cb8:	e02b      	b.n	8009d12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d107      	bne.n	8009cd6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cc6:	f107 030d 	add.w	r3, r7, #13
 8009cca:	2201      	movs	r2, #1
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 fcd8 	bl	800b684 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cd4:	e01d      	b.n	8009d12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f001 fc62 	bl	800b5a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ce2:	e016      	b.n	8009d12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b03      	cmp	r3, #3
 8009cee:	d00f      	beq.n	8009d10 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f001 fc55 	bl	800b5a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009cfc:	e008      	b.n	8009d10 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 fc4e 	bl	800b5a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009d06:	2303      	movs	r3, #3
 8009d08:	75fb      	strb	r3, [r7, #23]
          break;
 8009d0a:	e002      	b.n	8009d12 <USBD_CDC_Setup+0x19e>
          break;
 8009d0c:	bf00      	nop
 8009d0e:	e008      	b.n	8009d22 <USBD_CDC_Setup+0x1ae>
          break;
 8009d10:	bf00      	nop
      }
      break;
 8009d12:	e006      	b.n	8009d22 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f001 fc43 	bl	800b5a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d20:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	32b0      	adds	r2, #176	; 0xb0
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e065      	b.n	8009e22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	32b0      	adds	r2, #176	; 0xb0
 8009d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	f003 020f 	and.w	r2, r3, #15
 8009d6c:	6879      	ldr	r1, [r7, #4]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4413      	add	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	440b      	add	r3, r1
 8009d78:	3318      	adds	r3, #24
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d02f      	beq.n	8009de0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	f003 020f 	and.w	r2, r3, #15
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	440b      	add	r3, r1
 8009d92:	3318      	adds	r3, #24
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	78fb      	ldrb	r3, [r7, #3]
 8009d98:	f003 010f 	and.w	r1, r3, #15
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	440b      	add	r3, r1
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4403      	add	r3, r0
 8009da8:	3348      	adds	r3, #72	; 0x48
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	fbb2 f1f3 	udiv	r1, r2, r3
 8009db0:	fb01 f303 	mul.w	r3, r1, r3
 8009db4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d112      	bne.n	8009de0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	f003 020f 	and.w	r2, r3, #15
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	440b      	add	r3, r1
 8009dcc:	3318      	adds	r3, #24
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009dd2:	78f9      	ldrb	r1, [r7, #3]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f004 ff08 	bl	800ebee <USBD_LL_Transmit>
 8009dde:	e01f      	b.n	8009e20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	33b0      	adds	r3, #176	; 0xb0
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d010      	beq.n	8009e20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	33b0      	adds	r3, #176	; 0xb0
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009e1c:	78fa      	ldrb	r2, [r7, #3]
 8009e1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	32b0      	adds	r2, #176	; 0xb0
 8009e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	32b0      	adds	r2, #176	; 0xb0
 8009e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e01a      	b.n	8009e92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f004 ff06 	bl	800ec72 <USBD_LL_GetRxDataSize>
 8009e66:	4602      	mov	r2, r0
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	33b0      	adds	r3, #176	; 0xb0
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	32b0      	adds	r2, #176	; 0xb0
 8009eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e025      	b.n	8009f08 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	33b0      	adds	r3, #176	; 0xb0
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d01a      	beq.n	8009f06 <USBD_CDC_EP0_RxReady+0x6c>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009ed6:	2bff      	cmp	r3, #255	; 0xff
 8009ed8:	d015      	beq.n	8009f06 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	33b0      	adds	r3, #176	; 0xb0
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009ef2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009efa:	b292      	uxth	r2, r2
 8009efc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	22ff      	movs	r2, #255	; 0xff
 8009f02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f18:	2182      	movs	r1, #130	; 0x82
 8009f1a:	4818      	ldr	r0, [pc, #96]	; (8009f7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f1c:	f000 fd09 	bl	800a932 <USBD_GetEpDesc>
 8009f20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f22:	2101      	movs	r1, #1
 8009f24:	4815      	ldr	r0, [pc, #84]	; (8009f7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f26:	f000 fd04 	bl	800a932 <USBD_GetEpDesc>
 8009f2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f2c:	2181      	movs	r1, #129	; 0x81
 8009f2e:	4813      	ldr	r0, [pc, #76]	; (8009f7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f30:	f000 fcff 	bl	800a932 <USBD_GetEpDesc>
 8009f34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2210      	movs	r2, #16
 8009f40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d006      	beq.n	8009f56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f50:	711a      	strb	r2, [r3, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d006      	beq.n	8009f6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f64:	711a      	strb	r2, [r3, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2243      	movs	r2, #67	; 0x43
 8009f6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f70:	4b02      	ldr	r3, [pc, #8]	; (8009f7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	200000c4 	.word	0x200000c4

08009f80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f88:	2182      	movs	r1, #130	; 0x82
 8009f8a:	4818      	ldr	r0, [pc, #96]	; (8009fec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f8c:	f000 fcd1 	bl	800a932 <USBD_GetEpDesc>
 8009f90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f92:	2101      	movs	r1, #1
 8009f94:	4815      	ldr	r0, [pc, #84]	; (8009fec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f96:	f000 fccc 	bl	800a932 <USBD_GetEpDesc>
 8009f9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f9c:	2181      	movs	r1, #129	; 0x81
 8009f9e:	4813      	ldr	r0, [pc, #76]	; (8009fec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009fa0:	f000 fcc7 	bl	800a932 <USBD_GetEpDesc>
 8009fa4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	2210      	movs	r2, #16
 8009fb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d006      	beq.n	8009fc6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	711a      	strb	r2, [r3, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f042 0202 	orr.w	r2, r2, #2
 8009fc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d006      	beq.n	8009fda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	711a      	strb	r2, [r3, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f042 0202 	orr.w	r2, r2, #2
 8009fd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2243      	movs	r2, #67	; 0x43
 8009fde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fe0:	4b02      	ldr	r3, [pc, #8]	; (8009fec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	200000c4 	.word	0x200000c4

08009ff0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ff8:	2182      	movs	r1, #130	; 0x82
 8009ffa:	4818      	ldr	r0, [pc, #96]	; (800a05c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ffc:	f000 fc99 	bl	800a932 <USBD_GetEpDesc>
 800a000:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a002:	2101      	movs	r1, #1
 800a004:	4815      	ldr	r0, [pc, #84]	; (800a05c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a006:	f000 fc94 	bl	800a932 <USBD_GetEpDesc>
 800a00a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a00c:	2181      	movs	r1, #129	; 0x81
 800a00e:	4813      	ldr	r0, [pc, #76]	; (800a05c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a010:	f000 fc8f 	bl	800a932 <USBD_GetEpDesc>
 800a014:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	2210      	movs	r2, #16
 800a020:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d006      	beq.n	800a036 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a030:	711a      	strb	r2, [r3, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d006      	beq.n	800a04a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a044:	711a      	strb	r2, [r3, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2243      	movs	r2, #67	; 0x43
 800a04e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a050:	4b02      	ldr	r3, [pc, #8]	; (800a05c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a052:	4618      	mov	r0, r3
 800a054:	3718      	adds	r7, #24
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	200000c4 	.word	0x200000c4

0800a060 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	220a      	movs	r2, #10
 800a06c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a06e:	4b03      	ldr	r3, [pc, #12]	; (800a07c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a070:	4618      	mov	r0, r3
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20000080 	.word	0x20000080

0800a080 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d101      	bne.n	800a094 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a090:	2303      	movs	r3, #3
 800a092:	e009      	b.n	800a0a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	33b0      	adds	r3, #176	; 0xb0
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	32b0      	adds	r2, #176	; 0xb0
 800a0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e008      	b.n	800a0ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	371c      	adds	r7, #28
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	32b0      	adds	r2, #176	; 0xb0
 800a10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a110:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a118:	2303      	movs	r3, #3
 800a11a:	e004      	b.n	800a126 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
	...

0800a134 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	32b0      	adds	r2, #176	; 0xb0
 800a146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a14a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	32b0      	adds	r2, #176	; 0xb0
 800a156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a15e:	2303      	movs	r3, #3
 800a160:	e018      	b.n	800a194 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	7c1b      	ldrb	r3, [r3, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10a      	bne.n	800a180 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a16a:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <USBD_CDC_ReceivePacket+0x68>)
 800a16c:	7819      	ldrb	r1, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a174:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f004 fd59 	bl	800ec30 <USBD_LL_PrepareReceive>
 800a17e:	e008      	b.n	800a192 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a180:	4b06      	ldr	r3, [pc, #24]	; (800a19c <USBD_CDC_ReceivePacket+0x68>)
 800a182:	7819      	ldrb	r1, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a18a:	2340      	movs	r3, #64	; 0x40
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f004 fd4f 	bl	800ec30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20000108 	.word	0x20000108

0800a1a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d101      	bne.n	800a1b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e01f      	b.n	800a1f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	79fa      	ldrb	r2, [r7, #7]
 800a1ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f004 fbc9 	bl	800e984 <USBD_LL_Init>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a214:	2303      	movs	r3, #3
 800a216:	e025      	b.n	800a264 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	32ae      	adds	r2, #174	; 0xae
 800a22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00f      	beq.n	800a254 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	32ae      	adds	r2, #174	; 0xae
 800a23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a244:	f107 020e 	add.w	r2, r7, #14
 800a248:	4610      	mov	r0, r2
 800a24a:	4798      	blx	r3
 800a24c:	4602      	mov	r2, r0
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f004 fbd1 	bl	800ea1c <USBD_LL_Start>
 800a27a:	4603      	mov	r3, r0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a28c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a28e:	4618      	mov	r0, r3
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d009      	beq.n	800a2c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	78fa      	ldrb	r2, [r7, #3]
 800a2be:	4611      	mov	r1, r2
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	4798      	blx	r3
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b084      	sub	sp, #16
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	4798      	blx	r3
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d001      	beq.n	800a2fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b084      	sub	sp, #16
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	4618      	mov	r0, r3
 800a31a:	f001 f908 	bl	800b52e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a32c:	461a      	mov	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a33a:	f003 031f 	and.w	r3, r3, #31
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d01a      	beq.n	800a378 <USBD_LL_SetupStage+0x72>
 800a342:	2b02      	cmp	r3, #2
 800a344:	d822      	bhi.n	800a38c <USBD_LL_SetupStage+0x86>
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <USBD_LL_SetupStage+0x4a>
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d00a      	beq.n	800a364 <USBD_LL_SetupStage+0x5e>
 800a34e:	e01d      	b.n	800a38c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fb5f 	bl	800aa1c <USBD_StdDevReq>
 800a35e:	4603      	mov	r3, r0
 800a360:	73fb      	strb	r3, [r7, #15]
      break;
 800a362:	e020      	b.n	800a3a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fbc7 	bl	800ab00 <USBD_StdItfReq>
 800a372:	4603      	mov	r3, r0
 800a374:	73fb      	strb	r3, [r7, #15]
      break;
 800a376:	e016      	b.n	800a3a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fc29 	bl	800abd8 <USBD_StdEPReq>
 800a386:	4603      	mov	r3, r0
 800a388:	73fb      	strb	r3, [r7, #15]
      break;
 800a38a:	e00c      	b.n	800a3a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a392:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a396:	b2db      	uxtb	r3, r3
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f004 fb9e 	bl	800eadc <USBD_LL_StallEP>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3a4:	bf00      	nop
  }

  return ret;
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d16e      	bne.n	800a4a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a3ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	f040 8098 	bne.w	800a50c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d913      	bls.n	800a410 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	1ad2      	subs	r2, r2, r3
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	4293      	cmp	r3, r2
 800a400:	bf28      	it	cs
 800a402:	4613      	movcs	r3, r2
 800a404:	461a      	mov	r2, r3
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f001 f984 	bl	800b716 <USBD_CtlContinueRx>
 800a40e:	e07d      	b.n	800a50c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a416:	f003 031f 	and.w	r3, r3, #31
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d014      	beq.n	800a448 <USBD_LL_DataOutStage+0x98>
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d81d      	bhi.n	800a45e <USBD_LL_DataOutStage+0xae>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <USBD_LL_DataOutStage+0x7c>
 800a426:	2b01      	cmp	r3, #1
 800a428:	d003      	beq.n	800a432 <USBD_LL_DataOutStage+0x82>
 800a42a:	e018      	b.n	800a45e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a42c:	2300      	movs	r3, #0
 800a42e:	75bb      	strb	r3, [r7, #22]
            break;
 800a430:	e018      	b.n	800a464 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	4619      	mov	r1, r3
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 fa5e 	bl	800a8fe <USBD_CoreFindIF>
 800a442:	4603      	mov	r3, r0
 800a444:	75bb      	strb	r3, [r7, #22]
            break;
 800a446:	e00d      	b.n	800a464 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	4619      	mov	r1, r3
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 fa60 	bl	800a918 <USBD_CoreFindEP>
 800a458:	4603      	mov	r3, r0
 800a45a:	75bb      	strb	r3, [r7, #22]
            break;
 800a45c:	e002      	b.n	800a464 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a45e:	2300      	movs	r3, #0
 800a460:	75bb      	strb	r3, [r7, #22]
            break;
 800a462:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a464:	7dbb      	ldrb	r3, [r7, #22]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d119      	bne.n	800a49e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b03      	cmp	r3, #3
 800a474:	d113      	bne.n	800a49e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a476:	7dba      	ldrb	r2, [r7, #22]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	32ae      	adds	r2, #174	; 0xae
 800a47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00b      	beq.n	800a49e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a486:	7dba      	ldrb	r2, [r7, #22]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a48e:	7dba      	ldrb	r2, [r7, #22]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	32ae      	adds	r2, #174	; 0xae
 800a494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f001 f94a 	bl	800b738 <USBD_CtlSendStatus>
 800a4a4:	e032      	b.n	800a50c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a4a6:	7afb      	ldrb	r3, [r7, #11]
 800a4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 fa31 	bl	800a918 <USBD_CoreFindEP>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4ba:	7dbb      	ldrb	r3, [r7, #22]
 800a4bc:	2bff      	cmp	r3, #255	; 0xff
 800a4be:	d025      	beq.n	800a50c <USBD_LL_DataOutStage+0x15c>
 800a4c0:	7dbb      	ldrb	r3, [r7, #22]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d122      	bne.n	800a50c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d117      	bne.n	800a502 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a4d2:	7dba      	ldrb	r2, [r7, #22]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	32ae      	adds	r2, #174	; 0xae
 800a4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00f      	beq.n	800a502 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a4e2:	7dba      	ldrb	r2, [r7, #22]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a4ea:	7dba      	ldrb	r2, [r7, #22]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	32ae      	adds	r2, #174	; 0xae
 800a4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	7afa      	ldrb	r2, [r7, #11]
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	4798      	blx	r3
 800a4fe:	4603      	mov	r3, r0
 800a500:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d001      	beq.n	800a50c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a508:	7dfb      	ldrb	r3, [r7, #23]
 800a50a:	e000      	b.n	800a50e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b086      	sub	sp, #24
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	460b      	mov	r3, r1
 800a520:	607a      	str	r2, [r7, #4]
 800a522:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a524:	7afb      	ldrb	r3, [r7, #11]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d16f      	bne.n	800a60a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3314      	adds	r3, #20
 800a52e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a536:	2b02      	cmp	r3, #2
 800a538:	d15a      	bne.n	800a5f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	429a      	cmp	r2, r3
 800a544:	d914      	bls.n	800a570 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	461a      	mov	r2, r3
 800a55a:	6879      	ldr	r1, [r7, #4]
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f001 f8ac 	bl	800b6ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a562:	2300      	movs	r3, #0
 800a564:	2200      	movs	r2, #0
 800a566:	2100      	movs	r1, #0
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f004 fb61 	bl	800ec30 <USBD_LL_PrepareReceive>
 800a56e:	e03f      	b.n	800a5f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	68da      	ldr	r2, [r3, #12]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d11c      	bne.n	800a5b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a584:	429a      	cmp	r2, r3
 800a586:	d316      	bcc.n	800a5b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a592:	429a      	cmp	r2, r3
 800a594:	d20f      	bcs.n	800a5b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a596:	2200      	movs	r2, #0
 800a598:	2100      	movs	r1, #0
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f001 f88d 	bl	800b6ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f004 fb3e 	bl	800ec30 <USBD_LL_PrepareReceive>
 800a5b4:	e01c      	b.n	800a5f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d10f      	bne.n	800a5e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d009      	beq.n	800a5e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5e2:	2180      	movs	r1, #128	; 0x80
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f004 fa79 	bl	800eadc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f001 f8b7 	bl	800b75e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d03a      	beq.n	800a670 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f7ff fe42 	bl	800a284 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a608:	e032      	b.n	800a670 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a610:	b2db      	uxtb	r3, r3
 800a612:	4619      	mov	r1, r3
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 f97f 	bl	800a918 <USBD_CoreFindEP>
 800a61a:	4603      	mov	r3, r0
 800a61c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a61e:	7dfb      	ldrb	r3, [r7, #23]
 800a620:	2bff      	cmp	r3, #255	; 0xff
 800a622:	d025      	beq.n	800a670 <USBD_LL_DataInStage+0x15a>
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d122      	bne.n	800a670 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b03      	cmp	r3, #3
 800a634:	d11c      	bne.n	800a670 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a636:	7dfa      	ldrb	r2, [r7, #23]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	32ae      	adds	r2, #174	; 0xae
 800a63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d014      	beq.n	800a670 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a646:	7dfa      	ldrb	r2, [r7, #23]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a64e:	7dfa      	ldrb	r2, [r7, #23]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	32ae      	adds	r2, #174	; 0xae
 800a654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	7afa      	ldrb	r2, [r7, #11]
 800a65c:	4611      	mov	r1, r2
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	4798      	blx	r3
 800a662:	4603      	mov	r3, r0
 800a664:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a666:	7dbb      	ldrb	r3, [r7, #22]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a66c:	7dbb      	ldrb	r3, [r7, #22]
 800a66e:	e000      	b.n	800a672 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3718      	adds	r7, #24
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b084      	sub	sp, #16
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d014      	beq.n	800a6e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00e      	beq.n	800a6e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	6852      	ldr	r2, [r2, #4]
 800a6ce:	b2d2      	uxtb	r2, r2
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	4798      	blx	r3
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6e0:	2340      	movs	r3, #64	; 0x40
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f004 f9b3 	bl	800ea52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2240      	movs	r2, #64	; 0x40
 800a6f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6fc:	2340      	movs	r3, #64	; 0x40
 800a6fe:	2200      	movs	r2, #0
 800a700:	2180      	movs	r1, #128	; 0x80
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f004 f9a5 	bl	800ea52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2240      	movs	r2, #64	; 0x40
 800a712:	621a      	str	r2, [r3, #32]

  return ret;
 800a714:	7bfb      	ldrb	r3, [r7, #15]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	460b      	mov	r3, r1
 800a728:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a73e:	b480      	push	{r7}
 800a740:	b083      	sub	sp, #12
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2204      	movs	r2, #4
 800a758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b04      	cmp	r3, #4
 800a77c:	d106      	bne.n	800a78c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a784:	b2da      	uxtb	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d110      	bne.n	800a7d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00b      	beq.n	800a7d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d005      	beq.n	800a7d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ca:	69db      	ldr	r3, [r3, #28]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	32ae      	adds	r2, #174	; 0xae
 800a7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d101      	bne.n	800a7fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e01c      	b.n	800a836 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b03      	cmp	r3, #3
 800a806:	d115      	bne.n	800a834 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	32ae      	adds	r2, #174	; 0xae
 800a812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a816:	6a1b      	ldr	r3, [r3, #32]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00b      	beq.n	800a834 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	32ae      	adds	r2, #174	; 0xae
 800a826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a82a:	6a1b      	ldr	r3, [r3, #32]
 800a82c:	78fa      	ldrb	r2, [r7, #3]
 800a82e:	4611      	mov	r1, r2
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b082      	sub	sp, #8
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	460b      	mov	r3, r1
 800a848:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	32ae      	adds	r2, #174	; 0xae
 800a854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a85c:	2303      	movs	r3, #3
 800a85e:	e01c      	b.n	800a89a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d115      	bne.n	800a898 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	32ae      	adds	r2, #174	; 0xae
 800a876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00b      	beq.n	800a898 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	32ae      	adds	r2, #174	; 0xae
 800a88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	78fa      	ldrb	r2, [r7, #3]
 800a892:	4611      	mov	r1, r2
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00e      	beq.n	800a8f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	6852      	ldr	r2, [r2, #4]
 800a8e2:	b2d2      	uxtb	r2, r2
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	4798      	blx	r3
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a8fe:	b480      	push	{r7}
 800a900:	b083      	sub	sp, #12
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	460b      	mov	r3, r1
 800a908:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a90a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a924:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a926:	4618      	mov	r0, r3
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b086      	sub	sp, #24
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	460b      	mov	r3, r1
 800a93c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a946:	2300      	movs	r3, #0
 800a948:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	885b      	ldrh	r3, [r3, #2]
 800a94e:	b29a      	uxth	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	b29b      	uxth	r3, r3
 800a956:	429a      	cmp	r2, r3
 800a958:	d920      	bls.n	800a99c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	b29b      	uxth	r3, r3
 800a960:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a962:	e013      	b.n	800a98c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a964:	f107 030a 	add.w	r3, r7, #10
 800a968:	4619      	mov	r1, r3
 800a96a:	6978      	ldr	r0, [r7, #20]
 800a96c:	f000 f81b 	bl	800a9a6 <USBD_GetNextDesc>
 800a970:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	785b      	ldrb	r3, [r3, #1]
 800a976:	2b05      	cmp	r3, #5
 800a978:	d108      	bne.n	800a98c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	789b      	ldrb	r3, [r3, #2]
 800a982:	78fa      	ldrb	r2, [r7, #3]
 800a984:	429a      	cmp	r2, r3
 800a986:	d008      	beq.n	800a99a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a988:	2300      	movs	r3, #0
 800a98a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	885b      	ldrh	r3, [r3, #2]
 800a990:	b29a      	uxth	r2, r3
 800a992:	897b      	ldrh	r3, [r7, #10]
 800a994:	429a      	cmp	r2, r3
 800a996:	d8e5      	bhi.n	800a964 <USBD_GetEpDesc+0x32>
 800a998:	e000      	b.n	800a99c <USBD_GetEpDesc+0x6a>
          break;
 800a99a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a99c:	693b      	ldr	r3, [r7, #16]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b085      	sub	sp, #20
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	881a      	ldrh	r2, [r3, #0]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	4413      	add	r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a9fe:	8a3b      	ldrh	r3, [r7, #16]
 800aa00:	021b      	lsls	r3, r3, #8
 800aa02:	b21a      	sxth	r2, r3
 800aa04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	b21b      	sxth	r3, r3
 800aa0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa0e:	89fb      	ldrh	r3, [r7, #14]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	371c      	adds	r7, #28
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa32:	2b40      	cmp	r3, #64	; 0x40
 800aa34:	d005      	beq.n	800aa42 <USBD_StdDevReq+0x26>
 800aa36:	2b40      	cmp	r3, #64	; 0x40
 800aa38:	d857      	bhi.n	800aaea <USBD_StdDevReq+0xce>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00f      	beq.n	800aa5e <USBD_StdDevReq+0x42>
 800aa3e:	2b20      	cmp	r3, #32
 800aa40:	d153      	bne.n	800aaea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	32ae      	adds	r2, #174	; 0xae
 800aa4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	4798      	blx	r3
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa5c:	e04a      	b.n	800aaf4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	785b      	ldrb	r3, [r3, #1]
 800aa62:	2b09      	cmp	r3, #9
 800aa64:	d83b      	bhi.n	800aade <USBD_StdDevReq+0xc2>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <USBD_StdDevReq+0x50>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aac1 	.word	0x0800aac1
 800aa70:	0800aad5 	.word	0x0800aad5
 800aa74:	0800aadf 	.word	0x0800aadf
 800aa78:	0800aacb 	.word	0x0800aacb
 800aa7c:	0800aadf 	.word	0x0800aadf
 800aa80:	0800aa9f 	.word	0x0800aa9f
 800aa84:	0800aa95 	.word	0x0800aa95
 800aa88:	0800aadf 	.word	0x0800aadf
 800aa8c:	0800aab7 	.word	0x0800aab7
 800aa90:	0800aaa9 	.word	0x0800aaa9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fa3c 	bl	800af14 <USBD_GetDescriptor>
          break;
 800aa9c:	e024      	b.n	800aae8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa9e:	6839      	ldr	r1, [r7, #0]
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 fba1 	bl	800b1e8 <USBD_SetAddress>
          break;
 800aaa6:	e01f      	b.n	800aae8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fbe0 	bl	800b270 <USBD_SetConfig>
 800aab0:	4603      	mov	r3, r0
 800aab2:	73fb      	strb	r3, [r7, #15]
          break;
 800aab4:	e018      	b.n	800aae8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fc83 	bl	800b3c4 <USBD_GetConfig>
          break;
 800aabe:	e013      	b.n	800aae8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fcb4 	bl	800b430 <USBD_GetStatus>
          break;
 800aac8:	e00e      	b.n	800aae8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fce3 	bl	800b498 <USBD_SetFeature>
          break;
 800aad2:	e009      	b.n	800aae8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aad4:	6839      	ldr	r1, [r7, #0]
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fd07 	bl	800b4ea <USBD_ClrFeature>
          break;
 800aadc:	e004      	b.n	800aae8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fd5e 	bl	800b5a2 <USBD_CtlError>
          break;
 800aae6:	bf00      	nop
      }
      break;
 800aae8:	e004      	b.n	800aaf4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fd58 	bl	800b5a2 <USBD_CtlError>
      break;
 800aaf2:	bf00      	nop
  }

  return ret;
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop

0800ab00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab16:	2b40      	cmp	r3, #64	; 0x40
 800ab18:	d005      	beq.n	800ab26 <USBD_StdItfReq+0x26>
 800ab1a:	2b40      	cmp	r3, #64	; 0x40
 800ab1c:	d852      	bhi.n	800abc4 <USBD_StdItfReq+0xc4>
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <USBD_StdItfReq+0x26>
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d14e      	bne.n	800abc4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d840      	bhi.n	800abb6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	889b      	ldrh	r3, [r3, #4]
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d836      	bhi.n	800abac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	889b      	ldrh	r3, [r3, #4]
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff fed9 	bl	800a8fe <USBD_CoreFindIF>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	2bff      	cmp	r3, #255	; 0xff
 800ab54:	d01d      	beq.n	800ab92 <USBD_StdItfReq+0x92>
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d11a      	bne.n	800ab92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ab5c:	7bba      	ldrb	r2, [r7, #14]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	32ae      	adds	r2, #174	; 0xae
 800ab62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00f      	beq.n	800ab8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ab6c:	7bba      	ldrb	r2, [r7, #14]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab74:	7bba      	ldrb	r2, [r7, #14]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	32ae      	adds	r2, #174	; 0xae
 800ab7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	4798      	blx	r3
 800ab86:	4603      	mov	r3, r0
 800ab88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ab8a:	e004      	b.n	800ab96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ab90:	e001      	b.n	800ab96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ab92:	2303      	movs	r3, #3
 800ab94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	88db      	ldrh	r3, [r3, #6]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d110      	bne.n	800abc0 <USBD_StdItfReq+0xc0>
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10d      	bne.n	800abc0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fdc7 	bl	800b738 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abaa:	e009      	b.n	800abc0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 fcf7 	bl	800b5a2 <USBD_CtlError>
          break;
 800abb4:	e004      	b.n	800abc0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800abb6:	6839      	ldr	r1, [r7, #0]
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fcf2 	bl	800b5a2 <USBD_CtlError>
          break;
 800abbe:	e000      	b.n	800abc2 <USBD_StdItfReq+0xc2>
          break;
 800abc0:	bf00      	nop
      }
      break;
 800abc2:	e004      	b.n	800abce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fceb 	bl	800b5a2 <USBD_CtlError>
      break;
 800abcc:	bf00      	nop
  }

  return ret;
 800abce:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	889b      	ldrh	r3, [r3, #4]
 800abea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abf4:	2b40      	cmp	r3, #64	; 0x40
 800abf6:	d007      	beq.n	800ac08 <USBD_StdEPReq+0x30>
 800abf8:	2b40      	cmp	r3, #64	; 0x40
 800abfa:	f200 817f 	bhi.w	800aefc <USBD_StdEPReq+0x324>
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d02a      	beq.n	800ac58 <USBD_StdEPReq+0x80>
 800ac02:	2b20      	cmp	r3, #32
 800ac04:	f040 817a 	bne.w	800aefc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff fe83 	bl	800a918 <USBD_CoreFindEP>
 800ac12:	4603      	mov	r3, r0
 800ac14:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac16:	7b7b      	ldrb	r3, [r7, #13]
 800ac18:	2bff      	cmp	r3, #255	; 0xff
 800ac1a:	f000 8174 	beq.w	800af06 <USBD_StdEPReq+0x32e>
 800ac1e:	7b7b      	ldrb	r3, [r7, #13]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f040 8170 	bne.w	800af06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ac26:	7b7a      	ldrb	r2, [r7, #13]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ac2e:	7b7a      	ldrb	r2, [r7, #13]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	32ae      	adds	r2, #174	; 0xae
 800ac34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f000 8163 	beq.w	800af06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ac40:	7b7a      	ldrb	r2, [r7, #13]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	32ae      	adds	r2, #174	; 0xae
 800ac46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	4798      	blx	r3
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ac56:	e156      	b.n	800af06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	785b      	ldrb	r3, [r3, #1]
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d008      	beq.n	800ac72 <USBD_StdEPReq+0x9a>
 800ac60:	2b03      	cmp	r3, #3
 800ac62:	f300 8145 	bgt.w	800aef0 <USBD_StdEPReq+0x318>
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f000 809b 	beq.w	800ada2 <USBD_StdEPReq+0x1ca>
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d03c      	beq.n	800acea <USBD_StdEPReq+0x112>
 800ac70:	e13e      	b.n	800aef0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d002      	beq.n	800ac84 <USBD_StdEPReq+0xac>
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d016      	beq.n	800acb0 <USBD_StdEPReq+0xd8>
 800ac82:	e02c      	b.n	800acde <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00d      	beq.n	800aca6 <USBD_StdEPReq+0xce>
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	2b80      	cmp	r3, #128	; 0x80
 800ac8e:	d00a      	beq.n	800aca6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f003 ff21 	bl	800eadc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac9a:	2180      	movs	r1, #128	; 0x80
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f003 ff1d 	bl	800eadc <USBD_LL_StallEP>
 800aca2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aca4:	e020      	b.n	800ace8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fc7a 	bl	800b5a2 <USBD_CtlError>
              break;
 800acae:	e01b      	b.n	800ace8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	885b      	ldrh	r3, [r3, #2]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10e      	bne.n	800acd6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acb8:	7bbb      	ldrb	r3, [r7, #14]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00b      	beq.n	800acd6 <USBD_StdEPReq+0xfe>
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	2b80      	cmp	r3, #128	; 0x80
 800acc2:	d008      	beq.n	800acd6 <USBD_StdEPReq+0xfe>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	88db      	ldrh	r3, [r3, #6]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d104      	bne.n	800acd6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800accc:	7bbb      	ldrb	r3, [r7, #14]
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f003 ff03 	bl	800eadc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fd2e 	bl	800b738 <USBD_CtlSendStatus>

              break;
 800acdc:	e004      	b.n	800ace8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fc5e 	bl	800b5a2 <USBD_CtlError>
              break;
 800ace6:	bf00      	nop
          }
          break;
 800ace8:	e107      	b.n	800aefa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d002      	beq.n	800acfc <USBD_StdEPReq+0x124>
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	d016      	beq.n	800ad28 <USBD_StdEPReq+0x150>
 800acfa:	e04b      	b.n	800ad94 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00d      	beq.n	800ad1e <USBD_StdEPReq+0x146>
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	2b80      	cmp	r3, #128	; 0x80
 800ad06:	d00a      	beq.n	800ad1e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad08:	7bbb      	ldrb	r3, [r7, #14]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f003 fee5 	bl	800eadc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad12:	2180      	movs	r1, #128	; 0x80
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f003 fee1 	bl	800eadc <USBD_LL_StallEP>
 800ad1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad1c:	e040      	b.n	800ada0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fc3e 	bl	800b5a2 <USBD_CtlError>
              break;
 800ad26:	e03b      	b.n	800ada0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	885b      	ldrh	r3, [r3, #2]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d136      	bne.n	800ad9e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d004      	beq.n	800ad44 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f003 feeb 	bl	800eb1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fcf7 	bl	800b738 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff fde2 	bl	800a918 <USBD_CoreFindEP>
 800ad54:	4603      	mov	r3, r0
 800ad56:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad58:	7b7b      	ldrb	r3, [r7, #13]
 800ad5a:	2bff      	cmp	r3, #255	; 0xff
 800ad5c:	d01f      	beq.n	800ad9e <USBD_StdEPReq+0x1c6>
 800ad5e:	7b7b      	ldrb	r3, [r7, #13]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d11c      	bne.n	800ad9e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ad64:	7b7a      	ldrb	r2, [r7, #13]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ad6c:	7b7a      	ldrb	r2, [r7, #13]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	32ae      	adds	r2, #174	; 0xae
 800ad72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d010      	beq.n	800ad9e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ad7c:	7b7a      	ldrb	r2, [r7, #13]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	32ae      	adds	r2, #174	; 0xae
 800ad82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	4798      	blx	r3
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ad92:	e004      	b.n	800ad9e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fc03 	bl	800b5a2 <USBD_CtlError>
              break;
 800ad9c:	e000      	b.n	800ada0 <USBD_StdEPReq+0x1c8>
              break;
 800ad9e:	bf00      	nop
          }
          break;
 800ada0:	e0ab      	b.n	800aefa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d002      	beq.n	800adb4 <USBD_StdEPReq+0x1dc>
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d032      	beq.n	800ae18 <USBD_StdEPReq+0x240>
 800adb2:	e097      	b.n	800aee4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d007      	beq.n	800adca <USBD_StdEPReq+0x1f2>
 800adba:	7bbb      	ldrb	r3, [r7, #14]
 800adbc:	2b80      	cmp	r3, #128	; 0x80
 800adbe:	d004      	beq.n	800adca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fbed 	bl	800b5a2 <USBD_CtlError>
                break;
 800adc8:	e091      	b.n	800aeee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adce:	2b00      	cmp	r3, #0
 800add0:	da0b      	bge.n	800adea <USBD_StdEPReq+0x212>
 800add2:	7bbb      	ldrb	r3, [r7, #14]
 800add4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800add8:	4613      	mov	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	3310      	adds	r3, #16
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	4413      	add	r3, r2
 800ade6:	3304      	adds	r3, #4
 800ade8:	e00b      	b.n	800ae02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	4413      	add	r3, r2
 800ae00:	3304      	adds	r3, #4
 800ae02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	2200      	movs	r2, #0
 800ae08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fc37 	bl	800b684 <USBD_CtlSendData>
              break;
 800ae16:	e06a      	b.n	800aeee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	da11      	bge.n	800ae44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
 800ae22:	f003 020f 	and.w	r2, r3, #15
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	440b      	add	r3, r1
 800ae32:	3324      	adds	r3, #36	; 0x24
 800ae34:	881b      	ldrh	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d117      	bne.n	800ae6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fbb0 	bl	800b5a2 <USBD_CtlError>
                  break;
 800ae42:	e054      	b.n	800aeee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
 800ae46:	f003 020f 	and.w	r2, r3, #15
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	440b      	add	r3, r1
 800ae56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d104      	bne.n	800ae6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fb9d 	bl	800b5a2 <USBD_CtlError>
                  break;
 800ae68:	e041      	b.n	800aeee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	da0b      	bge.n	800ae8a <USBD_StdEPReq+0x2b2>
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae78:	4613      	mov	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	3310      	adds	r3, #16
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	4413      	add	r3, r2
 800ae86:	3304      	adds	r3, #4
 800ae88:	e00b      	b.n	800aea2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	4413      	add	r3, r2
 800aea0:	3304      	adds	r3, #4
 800aea2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d002      	beq.n	800aeb0 <USBD_StdEPReq+0x2d8>
 800aeaa:	7bbb      	ldrb	r3, [r7, #14]
 800aeac:	2b80      	cmp	r3, #128	; 0x80
 800aeae:	d103      	bne.n	800aeb8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	601a      	str	r2, [r3, #0]
 800aeb6:	e00e      	b.n	800aed6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f003 fe4b 	bl	800eb58 <USBD_LL_IsStallEP>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d003      	beq.n	800aed0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2201      	movs	r2, #1
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	e002      	b.n	800aed6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	2202      	movs	r2, #2
 800aeda:	4619      	mov	r1, r3
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fbd1 	bl	800b684 <USBD_CtlSendData>
              break;
 800aee2:	e004      	b.n	800aeee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fb5b 	bl	800b5a2 <USBD_CtlError>
              break;
 800aeec:	bf00      	nop
          }
          break;
 800aeee:	e004      	b.n	800aefa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 fb55 	bl	800b5a2 <USBD_CtlError>
          break;
 800aef8:	bf00      	nop
      }
      break;
 800aefa:	e005      	b.n	800af08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fb4f 	bl	800b5a2 <USBD_CtlError>
      break;
 800af04:	e000      	b.n	800af08 <USBD_StdEPReq+0x330>
      break;
 800af06:	bf00      	nop
  }

  return ret;
 800af08:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af22:	2300      	movs	r3, #0
 800af24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af26:	2300      	movs	r3, #0
 800af28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	885b      	ldrh	r3, [r3, #2]
 800af2e:	0a1b      	lsrs	r3, r3, #8
 800af30:	b29b      	uxth	r3, r3
 800af32:	3b01      	subs	r3, #1
 800af34:	2b06      	cmp	r3, #6
 800af36:	f200 8128 	bhi.w	800b18a <USBD_GetDescriptor+0x276>
 800af3a:	a201      	add	r2, pc, #4	; (adr r2, 800af40 <USBD_GetDescriptor+0x2c>)
 800af3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af40:	0800af5d 	.word	0x0800af5d
 800af44:	0800af75 	.word	0x0800af75
 800af48:	0800afb5 	.word	0x0800afb5
 800af4c:	0800b18b 	.word	0x0800b18b
 800af50:	0800b18b 	.word	0x0800b18b
 800af54:	0800b12b 	.word	0x0800b12b
 800af58:	0800b157 	.word	0x0800b157
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	7c12      	ldrb	r2, [r2, #16]
 800af68:	f107 0108 	add.w	r1, r7, #8
 800af6c:	4610      	mov	r0, r2
 800af6e:	4798      	blx	r3
 800af70:	60f8      	str	r0, [r7, #12]
      break;
 800af72:	e112      	b.n	800b19a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	7c1b      	ldrb	r3, [r3, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10d      	bne.n	800af98 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af84:	f107 0208 	add.w	r2, r7, #8
 800af88:	4610      	mov	r0, r2
 800af8a:	4798      	blx	r3
 800af8c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3301      	adds	r3, #1
 800af92:	2202      	movs	r2, #2
 800af94:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af96:	e100      	b.n	800b19a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	f107 0208 	add.w	r2, r7, #8
 800afa4:	4610      	mov	r0, r2
 800afa6:	4798      	blx	r3
 800afa8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	3301      	adds	r3, #1
 800afae:	2202      	movs	r2, #2
 800afb0:	701a      	strb	r2, [r3, #0]
      break;
 800afb2:	e0f2      	b.n	800b19a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	885b      	ldrh	r3, [r3, #2]
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b05      	cmp	r3, #5
 800afbc:	f200 80ac 	bhi.w	800b118 <USBD_GetDescriptor+0x204>
 800afc0:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <USBD_GetDescriptor+0xb4>)
 800afc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc6:	bf00      	nop
 800afc8:	0800afe1 	.word	0x0800afe1
 800afcc:	0800b015 	.word	0x0800b015
 800afd0:	0800b049 	.word	0x0800b049
 800afd4:	0800b07d 	.word	0x0800b07d
 800afd8:	0800b0b1 	.word	0x0800b0b1
 800afdc:	0800b0e5 	.word	0x0800b0e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00b      	beq.n	800b004 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	7c12      	ldrb	r2, [r2, #16]
 800aff8:	f107 0108 	add.w	r1, r7, #8
 800affc:	4610      	mov	r0, r2
 800affe:	4798      	blx	r3
 800b000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b002:	e091      	b.n	800b128 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 facb 	bl	800b5a2 <USBD_CtlError>
            err++;
 800b00c:	7afb      	ldrb	r3, [r7, #11]
 800b00e:	3301      	adds	r3, #1
 800b010:	72fb      	strb	r3, [r7, #11]
          break;
 800b012:	e089      	b.n	800b128 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00b      	beq.n	800b038 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	7c12      	ldrb	r2, [r2, #16]
 800b02c:	f107 0108 	add.w	r1, r7, #8
 800b030:	4610      	mov	r0, r2
 800b032:	4798      	blx	r3
 800b034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b036:	e077      	b.n	800b128 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fab1 	bl	800b5a2 <USBD_CtlError>
            err++;
 800b040:	7afb      	ldrb	r3, [r7, #11]
 800b042:	3301      	adds	r3, #1
 800b044:	72fb      	strb	r3, [r7, #11]
          break;
 800b046:	e06f      	b.n	800b128 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00b      	beq.n	800b06c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	7c12      	ldrb	r2, [r2, #16]
 800b060:	f107 0108 	add.w	r1, r7, #8
 800b064:	4610      	mov	r0, r2
 800b066:	4798      	blx	r3
 800b068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b06a:	e05d      	b.n	800b128 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fa97 	bl	800b5a2 <USBD_CtlError>
            err++;
 800b074:	7afb      	ldrb	r3, [r7, #11]
 800b076:	3301      	adds	r3, #1
 800b078:	72fb      	strb	r3, [r7, #11]
          break;
 800b07a:	e055      	b.n	800b128 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00b      	beq.n	800b0a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	7c12      	ldrb	r2, [r2, #16]
 800b094:	f107 0108 	add.w	r1, r7, #8
 800b098:	4610      	mov	r0, r2
 800b09a:	4798      	blx	r3
 800b09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b09e:	e043      	b.n	800b128 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fa7d 	bl	800b5a2 <USBD_CtlError>
            err++;
 800b0a8:	7afb      	ldrb	r3, [r7, #11]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b0ae:	e03b      	b.n	800b128 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00b      	beq.n	800b0d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0c2:	695b      	ldr	r3, [r3, #20]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	7c12      	ldrb	r2, [r2, #16]
 800b0c8:	f107 0108 	add.w	r1, r7, #8
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4798      	blx	r3
 800b0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0d2:	e029      	b.n	800b128 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fa63 	bl	800b5a2 <USBD_CtlError>
            err++;
 800b0dc:	7afb      	ldrb	r3, [r7, #11]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b0e2:	e021      	b.n	800b128 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00b      	beq.n	800b108 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	7c12      	ldrb	r2, [r2, #16]
 800b0fc:	f107 0108 	add.w	r1, r7, #8
 800b100:	4610      	mov	r0, r2
 800b102:	4798      	blx	r3
 800b104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b106:	e00f      	b.n	800b128 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fa49 	bl	800b5a2 <USBD_CtlError>
            err++;
 800b110:	7afb      	ldrb	r3, [r7, #11]
 800b112:	3301      	adds	r3, #1
 800b114:	72fb      	strb	r3, [r7, #11]
          break;
 800b116:	e007      	b.n	800b128 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fa41 	bl	800b5a2 <USBD_CtlError>
          err++;
 800b120:	7afb      	ldrb	r3, [r7, #11]
 800b122:	3301      	adds	r3, #1
 800b124:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b126:	bf00      	nop
      }
      break;
 800b128:	e037      	b.n	800b19a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	7c1b      	ldrb	r3, [r3, #16]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d109      	bne.n	800b146 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13a:	f107 0208 	add.w	r2, r7, #8
 800b13e:	4610      	mov	r0, r2
 800b140:	4798      	blx	r3
 800b142:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b144:	e029      	b.n	800b19a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fa2a 	bl	800b5a2 <USBD_CtlError>
        err++;
 800b14e:	7afb      	ldrb	r3, [r7, #11]
 800b150:	3301      	adds	r3, #1
 800b152:	72fb      	strb	r3, [r7, #11]
      break;
 800b154:	e021      	b.n	800b19a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	7c1b      	ldrb	r3, [r3, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10d      	bne.n	800b17a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b166:	f107 0208 	add.w	r2, r7, #8
 800b16a:	4610      	mov	r0, r2
 800b16c:	4798      	blx	r3
 800b16e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	3301      	adds	r3, #1
 800b174:	2207      	movs	r2, #7
 800b176:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b178:	e00f      	b.n	800b19a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fa10 	bl	800b5a2 <USBD_CtlError>
        err++;
 800b182:	7afb      	ldrb	r3, [r7, #11]
 800b184:	3301      	adds	r3, #1
 800b186:	72fb      	strb	r3, [r7, #11]
      break;
 800b188:	e007      	b.n	800b19a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fa08 	bl	800b5a2 <USBD_CtlError>
      err++;
 800b192:	7afb      	ldrb	r3, [r7, #11]
 800b194:	3301      	adds	r3, #1
 800b196:	72fb      	strb	r3, [r7, #11]
      break;
 800b198:	bf00      	nop
  }

  if (err != 0U)
 800b19a:	7afb      	ldrb	r3, [r7, #11]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d11e      	bne.n	800b1de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	88db      	ldrh	r3, [r3, #6]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d016      	beq.n	800b1d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b1a8:	893b      	ldrh	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00e      	beq.n	800b1cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	88da      	ldrh	r2, [r3, #6]
 800b1b2:	893b      	ldrh	r3, [r7, #8]
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	bf28      	it	cs
 800b1b8:	4613      	movcs	r3, r2
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b1be:	893b      	ldrh	r3, [r7, #8]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	68f9      	ldr	r1, [r7, #12]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fa5d 	bl	800b684 <USBD_CtlSendData>
 800b1ca:	e009      	b.n	800b1e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f9e7 	bl	800b5a2 <USBD_CtlError>
 800b1d4:	e004      	b.n	800b1e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 faae 	bl	800b738 <USBD_CtlSendStatus>
 800b1dc:	e000      	b.n	800b1e0 <USBD_GetDescriptor+0x2cc>
    return;
 800b1de:	bf00      	nop
  }
}
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop

0800b1e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	889b      	ldrh	r3, [r3, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d131      	bne.n	800b25e <USBD_SetAddress+0x76>
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	88db      	ldrh	r3, [r3, #6]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d12d      	bne.n	800b25e <USBD_SetAddress+0x76>
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	885b      	ldrh	r3, [r3, #2]
 800b206:	2b7f      	cmp	r3, #127	; 0x7f
 800b208:	d829      	bhi.n	800b25e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	885b      	ldrh	r3, [r3, #2]
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b214:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d104      	bne.n	800b22c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b222:	6839      	ldr	r1, [r7, #0]
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f9bc 	bl	800b5a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22a:	e01d      	b.n	800b268 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	7bfa      	ldrb	r2, [r7, #15]
 800b230:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f003 fcb9 	bl	800ebb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fa7a 	bl	800b738 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d004      	beq.n	800b254 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2202      	movs	r2, #2
 800b24e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b252:	e009      	b.n	800b268 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b25c:	e004      	b.n	800b268 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f99e 	bl	800b5a2 <USBD_CtlError>
  }
}
 800b266:	bf00      	nop
 800b268:	bf00      	nop
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	885b      	ldrh	r3, [r3, #2]
 800b282:	b2da      	uxtb	r2, r3
 800b284:	4b4e      	ldr	r3, [pc, #312]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b286:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b288:	4b4d      	ldr	r3, [pc, #308]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d905      	bls.n	800b29c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f985 	bl	800b5a2 <USBD_CtlError>
    return USBD_FAIL;
 800b298:	2303      	movs	r3, #3
 800b29a:	e08c      	b.n	800b3b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d002      	beq.n	800b2ae <USBD_SetConfig+0x3e>
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d029      	beq.n	800b300 <USBD_SetConfig+0x90>
 800b2ac:	e075      	b.n	800b39a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b2ae:	4b44      	ldr	r3, [pc, #272]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d020      	beq.n	800b2f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b2b6:	4b42      	ldr	r3, [pc, #264]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2c0:	4b3f      	ldr	r3, [pc, #252]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7fe ffe7 	bl	800a29a <USBD_SetClassConfig>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d008      	beq.n	800b2e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f962 	bl	800b5a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2202      	movs	r2, #2
 800b2e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b2e6:	e065      	b.n	800b3b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fa25 	bl	800b738 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2203      	movs	r2, #3
 800b2f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b2f6:	e05d      	b.n	800b3b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fa1d 	bl	800b738 <USBD_CtlSendStatus>
      break;
 800b2fe:	e059      	b.n	800b3b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b300:	4b2f      	ldr	r3, [pc, #188]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d112      	bne.n	800b32e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b310:	4b2b      	ldr	r3, [pc, #172]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b31a:	4b29      	ldr	r3, [pc, #164]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7fe ffd6 	bl	800a2d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fa06 	bl	800b738 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b32c:	e042      	b.n	800b3b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b32e:	4b24      	ldr	r3, [pc, #144]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d02a      	beq.n	800b392 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	b2db      	uxtb	r3, r3
 800b342:	4619      	mov	r1, r3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7fe ffc4 	bl	800a2d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b34a:	4b1d      	ldr	r3, [pc, #116]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	461a      	mov	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b354:	4b1a      	ldr	r3, [pc, #104]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	4619      	mov	r1, r3
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7fe ff9d 	bl	800a29a <USBD_SetClassConfig>
 800b360:	4603      	mov	r3, r0
 800b362:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00f      	beq.n	800b38a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f918 	bl	800b5a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	b2db      	uxtb	r3, r3
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7fe ffa9 	bl	800a2d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2202      	movs	r2, #2
 800b384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b388:	e014      	b.n	800b3b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f9d4 	bl	800b738 <USBD_CtlSendStatus>
      break;
 800b390:	e010      	b.n	800b3b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f9d0 	bl	800b738 <USBD_CtlSendStatus>
      break;
 800b398:	e00c      	b.n	800b3b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f900 	bl	800b5a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3a2:	4b07      	ldr	r3, [pc, #28]	; (800b3c0 <USBD_SetConfig+0x150>)
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7fe ff92 	bl	800a2d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3b2:	bf00      	nop
  }

  return ret;
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	20000420 	.word	0x20000420

0800b3c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	88db      	ldrh	r3, [r3, #6]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d004      	beq.n	800b3e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f8e2 	bl	800b5a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b3de:	e023      	b.n	800b428 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	dc02      	bgt.n	800b3f2 <USBD_GetConfig+0x2e>
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	dc03      	bgt.n	800b3f8 <USBD_GetConfig+0x34>
 800b3f0:	e015      	b.n	800b41e <USBD_GetConfig+0x5a>
 800b3f2:	2b03      	cmp	r3, #3
 800b3f4:	d00b      	beq.n	800b40e <USBD_GetConfig+0x4a>
 800b3f6:	e012      	b.n	800b41e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	3308      	adds	r3, #8
 800b402:	2201      	movs	r2, #1
 800b404:	4619      	mov	r1, r3
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f93c 	bl	800b684 <USBD_CtlSendData>
        break;
 800b40c:	e00c      	b.n	800b428 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3304      	adds	r3, #4
 800b412:	2201      	movs	r2, #1
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 f934 	bl	800b684 <USBD_CtlSendData>
        break;
 800b41c:	e004      	b.n	800b428 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f8be 	bl	800b5a2 <USBD_CtlError>
        break;
 800b426:	bf00      	nop
}
 800b428:	bf00      	nop
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b440:	b2db      	uxtb	r3, r3
 800b442:	3b01      	subs	r3, #1
 800b444:	2b02      	cmp	r3, #2
 800b446:	d81e      	bhi.n	800b486 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	88db      	ldrh	r3, [r3, #6]
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d004      	beq.n	800b45a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f8a5 	bl	800b5a2 <USBD_CtlError>
        break;
 800b458:	e01a      	b.n	800b490 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b466:	2b00      	cmp	r3, #0
 800b468:	d005      	beq.n	800b476 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f043 0202 	orr.w	r2, r3, #2
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	330c      	adds	r3, #12
 800b47a:	2202      	movs	r2, #2
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f900 	bl	800b684 <USBD_CtlSendData>
      break;
 800b484:	e004      	b.n	800b490 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f88a 	bl	800b5a2 <USBD_CtlError>
      break;
 800b48e:	bf00      	nop
  }
}
 800b490:	bf00      	nop
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	885b      	ldrh	r3, [r3, #2]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d107      	bne.n	800b4ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f940 	bl	800b738 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b4b8:	e013      	b.n	800b4e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	885b      	ldrh	r3, [r3, #2]
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d10b      	bne.n	800b4da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	889b      	ldrh	r3, [r3, #4]
 800b4c6:	0a1b      	lsrs	r3, r3, #8
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f930 	bl	800b738 <USBD_CtlSendStatus>
}
 800b4d8:	e003      	b.n	800b4e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f860 	bl	800b5a2 <USBD_CtlError>
}
 800b4e2:	bf00      	nop
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d80b      	bhi.n	800b51a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	885b      	ldrh	r3, [r3, #2]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d10c      	bne.n	800b524 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f910 	bl	800b738 <USBD_CtlSendStatus>
      }
      break;
 800b518:	e004      	b.n	800b524 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f840 	bl	800b5a2 <USBD_CtlError>
      break;
 800b522:	e000      	b.n	800b526 <USBD_ClrFeature+0x3c>
      break;
 800b524:	bf00      	nop
  }
}
 800b526:	bf00      	nop
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	781a      	ldrb	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	3301      	adds	r3, #1
 800b548:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	3301      	adds	r3, #1
 800b556:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f7ff fa41 	bl	800a9e0 <SWAPBYTE>
 800b55e:	4603      	mov	r3, r0
 800b560:	461a      	mov	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	3301      	adds	r3, #1
 800b56a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3301      	adds	r3, #1
 800b570:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f7ff fa34 	bl	800a9e0 <SWAPBYTE>
 800b578:	4603      	mov	r3, r0
 800b57a:	461a      	mov	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	3301      	adds	r3, #1
 800b584:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	3301      	adds	r3, #1
 800b58a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f7ff fa27 	bl	800a9e0 <SWAPBYTE>
 800b592:	4603      	mov	r3, r0
 800b594:	461a      	mov	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	80da      	strh	r2, [r3, #6]
}
 800b59a:	bf00      	nop
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5ac:	2180      	movs	r1, #128	; 0x80
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f003 fa94 	bl	800eadc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f003 fa90 	bl	800eadc <USBD_LL_StallEP>
}
 800b5bc:	bf00      	nop
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d036      	beq.n	800b648 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b5de:	6938      	ldr	r0, [r7, #16]
 800b5e0:	f000 f836 	bl	800b650 <USBD_GetLen>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	005b      	lsls	r3, r3, #1
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	7812      	ldrb	r2, [r2, #0]
 800b5fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	3301      	adds	r3, #1
 800b602:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b604:	7dfb      	ldrb	r3, [r7, #23]
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	4413      	add	r3, r2
 800b60a:	2203      	movs	r2, #3
 800b60c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b60e:	7dfb      	ldrb	r3, [r7, #23]
 800b610:	3301      	adds	r3, #1
 800b612:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b614:	e013      	b.n	800b63e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	4413      	add	r3, r2
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	7812      	ldrb	r2, [r2, #0]
 800b620:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	3301      	adds	r3, #1
 800b626:	613b      	str	r3, [r7, #16]
    idx++;
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	3301      	adds	r3, #1
 800b62c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	4413      	add	r3, r2
 800b634:	2200      	movs	r2, #0
 800b636:	701a      	strb	r2, [r3, #0]
    idx++;
 800b638:	7dfb      	ldrb	r3, [r7, #23]
 800b63a:	3301      	adds	r3, #1
 800b63c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1e7      	bne.n	800b616 <USBD_GetString+0x52>
 800b646:	e000      	b.n	800b64a <USBD_GetString+0x86>
    return;
 800b648:	bf00      	nop
  }
}
 800b64a:	3718      	adds	r7, #24
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b658:	2300      	movs	r3, #0
 800b65a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b660:	e005      	b.n	800b66e <USBD_GetLen+0x1e>
  {
    len++;
 800b662:	7bfb      	ldrb	r3, [r7, #15]
 800b664:	3301      	adds	r3, #1
 800b666:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	3301      	adds	r3, #1
 800b66c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1f5      	bne.n	800b662 <USBD_GetLen+0x12>
  }

  return len;
 800b676:	7bfb      	ldrb	r3, [r7, #15]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2202      	movs	r2, #2
 800b694:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f003 fa9f 	bl	800ebee <USBD_LL_Transmit>

  return USBD_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b084      	sub	sp, #16
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	60f8      	str	r0, [r7, #12]
 800b6c2:	60b9      	str	r1, [r7, #8]
 800b6c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f003 fa8e 	bl	800ebee <USBD_LL_Transmit>

  return USBD_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3710      	adds	r7, #16
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2203      	movs	r2, #3
 800b6ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	2100      	movs	r1, #0
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f003 fa92 	bl	800ec30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	60b9      	str	r1, [r7, #8]
 800b720:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	2100      	movs	r1, #0
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f003 fa81 	bl	800ec30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2204      	movs	r2, #4
 800b744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b748:	2300      	movs	r3, #0
 800b74a:	2200      	movs	r2, #0
 800b74c:	2100      	movs	r1, #0
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f003 fa4d 	bl	800ebee <USBD_LL_Transmit>

  return USBD_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2205      	movs	r2, #5
 800b76a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b76e:	2300      	movs	r3, #0
 800b770:	2200      	movs	r2, #0
 800b772:	2100      	movs	r1, #0
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f003 fa5b 	bl	800ec30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3708      	adds	r7, #8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <__NVIC_SetPriority>:
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	6039      	str	r1, [r7, #0]
 800b78e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b794:	2b00      	cmp	r3, #0
 800b796:	db0a      	blt.n	800b7ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	490c      	ldr	r1, [pc, #48]	; (800b7d0 <__NVIC_SetPriority+0x4c>)
 800b79e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7a2:	0112      	lsls	r2, r2, #4
 800b7a4:	b2d2      	uxtb	r2, r2
 800b7a6:	440b      	add	r3, r1
 800b7a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b7ac:	e00a      	b.n	800b7c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	4908      	ldr	r1, [pc, #32]	; (800b7d4 <__NVIC_SetPriority+0x50>)
 800b7b4:	79fb      	ldrb	r3, [r7, #7]
 800b7b6:	f003 030f 	and.w	r3, r3, #15
 800b7ba:	3b04      	subs	r3, #4
 800b7bc:	0112      	lsls	r2, r2, #4
 800b7be:	b2d2      	uxtb	r2, r2
 800b7c0:	440b      	add	r3, r1
 800b7c2:	761a      	strb	r2, [r3, #24]
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	e000e100 	.word	0xe000e100
 800b7d4:	e000ed00 	.word	0xe000ed00

0800b7d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b7dc:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <SysTick_Handler+0x1c>)
 800b7de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b7e0:	f001 fd4c 	bl	800d27c <xTaskGetSchedulerState>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d001      	beq.n	800b7ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b7ea:	f002 fb35 	bl	800de58 <xPortSysTickHandler>
  }
}
 800b7ee:	bf00      	nop
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	e000e010 	.word	0xe000e010

0800b7f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	f06f 0004 	mvn.w	r0, #4
 800b802:	f7ff ffbf 	bl	800b784 <__NVIC_SetPriority>
#endif
}
 800b806:	bf00      	nop
 800b808:	bd80      	pop	{r7, pc}
	...

0800b80c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b812:	f3ef 8305 	mrs	r3, IPSR
 800b816:	603b      	str	r3, [r7, #0]
  return(result);
 800b818:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d003      	beq.n	800b826 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b81e:	f06f 0305 	mvn.w	r3, #5
 800b822:	607b      	str	r3, [r7, #4]
 800b824:	e00c      	b.n	800b840 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b826:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <osKernelInitialize+0x44>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d105      	bne.n	800b83a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b82e:	4b08      	ldr	r3, [pc, #32]	; (800b850 <osKernelInitialize+0x44>)
 800b830:	2201      	movs	r2, #1
 800b832:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b834:	2300      	movs	r3, #0
 800b836:	607b      	str	r3, [r7, #4]
 800b838:	e002      	b.n	800b840 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b83a:	f04f 33ff 	mov.w	r3, #4294967295
 800b83e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b840:	687b      	ldr	r3, [r7, #4]
}
 800b842:	4618      	mov	r0, r3
 800b844:	370c      	adds	r7, #12
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	20000424 	.word	0x20000424

0800b854 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b85a:	f3ef 8305 	mrs	r3, IPSR
 800b85e:	603b      	str	r3, [r7, #0]
  return(result);
 800b860:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b862:	2b00      	cmp	r3, #0
 800b864:	d003      	beq.n	800b86e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b866:	f06f 0305 	mvn.w	r3, #5
 800b86a:	607b      	str	r3, [r7, #4]
 800b86c:	e010      	b.n	800b890 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b86e:	4b0b      	ldr	r3, [pc, #44]	; (800b89c <osKernelStart+0x48>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d109      	bne.n	800b88a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b876:	f7ff ffbf 	bl	800b7f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b87a:	4b08      	ldr	r3, [pc, #32]	; (800b89c <osKernelStart+0x48>)
 800b87c:	2202      	movs	r2, #2
 800b87e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b880:	f001 f880 	bl	800c984 <vTaskStartScheduler>
      stat = osOK;
 800b884:	2300      	movs	r3, #0
 800b886:	607b      	str	r3, [r7, #4]
 800b888:	e002      	b.n	800b890 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b88a:	f04f 33ff 	mov.w	r3, #4294967295
 800b88e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b890:	687b      	ldr	r3, [r7, #4]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	20000424 	.word	0x20000424

0800b8a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08e      	sub	sp, #56	; 0x38
 800b8a4:	af04      	add	r7, sp, #16
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8b0:	f3ef 8305 	mrs	r3, IPSR
 800b8b4:	617b      	str	r3, [r7, #20]
  return(result);
 800b8b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d17e      	bne.n	800b9ba <osThreadNew+0x11a>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d07b      	beq.n	800b9ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b8c2:	2380      	movs	r3, #128	; 0x80
 800b8c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b8c6:	2318      	movs	r3, #24
 800b8c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d045      	beq.n	800b966 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d002      	beq.n	800b8e8 <osThreadNew+0x48>
        name = attr->name;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d008      	beq.n	800b90e <osThreadNew+0x6e>
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	2b38      	cmp	r3, #56	; 0x38
 800b900:	d805      	bhi.n	800b90e <osThreadNew+0x6e>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	f003 0301 	and.w	r3, r3, #1
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <osThreadNew+0x72>
        return (NULL);
 800b90e:	2300      	movs	r3, #0
 800b910:	e054      	b.n	800b9bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d003      	beq.n	800b922 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	089b      	lsrs	r3, r3, #2
 800b920:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00e      	beq.n	800b948 <osThreadNew+0xa8>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	2bbf      	cmp	r3, #191	; 0xbf
 800b930:	d90a      	bls.n	800b948 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b936:	2b00      	cmp	r3, #0
 800b938:	d006      	beq.n	800b948 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	695b      	ldr	r3, [r3, #20]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d002      	beq.n	800b948 <osThreadNew+0xa8>
        mem = 1;
 800b942:	2301      	movs	r3, #1
 800b944:	61bb      	str	r3, [r7, #24]
 800b946:	e010      	b.n	800b96a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10c      	bne.n	800b96a <osThreadNew+0xca>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d108      	bne.n	800b96a <osThreadNew+0xca>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d104      	bne.n	800b96a <osThreadNew+0xca>
          mem = 0;
 800b960:	2300      	movs	r3, #0
 800b962:	61bb      	str	r3, [r7, #24]
 800b964:	e001      	b.n	800b96a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d110      	bne.n	800b992 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b978:	9202      	str	r2, [sp, #8]
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	6a3a      	ldr	r2, [r7, #32]
 800b984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 fe0c 	bl	800c5a4 <xTaskCreateStatic>
 800b98c:	4603      	mov	r3, r0
 800b98e:	613b      	str	r3, [r7, #16]
 800b990:	e013      	b.n	800b9ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d110      	bne.n	800b9ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	f107 0310 	add.w	r3, r7, #16
 800b9a0:	9301      	str	r3, [sp, #4]
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f000 fe57 	bl	800c65e <xTaskCreate>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d001      	beq.n	800b9ba <osThreadNew+0x11a>
            hTask = NULL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b9ba:	693b      	ldr	r3, [r7, #16]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3728      	adds	r7, #40	; 0x28
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9cc:	f3ef 8305 	mrs	r3, IPSR
 800b9d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d003      	beq.n	800b9e0 <osDelay+0x1c>
    stat = osErrorISR;
 800b9d8:	f06f 0305 	mvn.w	r3, #5
 800b9dc:	60fb      	str	r3, [r7, #12]
 800b9de:	e007      	b.n	800b9f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d002      	beq.n	800b9f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 ff96 	bl	800c91c <vTaskDelay>
    }
  }

  return (stat);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
	...

0800b9fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	4a07      	ldr	r2, [pc, #28]	; (800ba28 <vApplicationGetIdleTaskMemory+0x2c>)
 800ba0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	4a06      	ldr	r2, [pc, #24]	; (800ba2c <vApplicationGetIdleTaskMemory+0x30>)
 800ba12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2280      	movs	r2, #128	; 0x80
 800ba18:	601a      	str	r2, [r3, #0]
}
 800ba1a:	bf00      	nop
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	20000428 	.word	0x20000428
 800ba2c:	200004e8 	.word	0x200004e8

0800ba30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	4a07      	ldr	r2, [pc, #28]	; (800ba5c <vApplicationGetTimerTaskMemory+0x2c>)
 800ba40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	4a06      	ldr	r2, [pc, #24]	; (800ba60 <vApplicationGetTimerTaskMemory+0x30>)
 800ba46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba4e:	601a      	str	r2, [r3, #0]
}
 800ba50:	bf00      	nop
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	200006e8 	.word	0x200006e8
 800ba60:	200007a8 	.word	0x200007a8

0800ba64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f103 0208 	add.w	r2, r3, #8
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f103 0208 	add.w	r2, r3, #8
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f103 0208 	add.w	r2, r3, #8
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bab2:	bf00      	nop
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800babe:	b480      	push	{r7}
 800bac0:	b085      	sub	sp, #20
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	683a      	ldr	r2, [r7, #0]
 800bae2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	1c5a      	adds	r2, r3, #1
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	601a      	str	r2, [r3, #0]
}
 800bafa:	bf00      	nop
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb06:	b480      	push	{r7}
 800bb08:	b085      	sub	sp, #20
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1c:	d103      	bne.n	800bb26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	60fb      	str	r3, [r7, #12]
 800bb24:	e00c      	b.n	800bb40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	3308      	adds	r3, #8
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	e002      	b.n	800bb34 <vListInsert+0x2e>
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d2f6      	bcs.n	800bb2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	1c5a      	adds	r2, r3, #1
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	601a      	str	r2, [r3, #0]
}
 800bb6c:	bf00      	nop
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	6892      	ldr	r2, [r2, #8]
 800bb8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	6852      	ldr	r2, [r2, #4]
 800bb98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d103      	bne.n	800bbac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	689a      	ldr	r2, [r3, #8]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	1e5a      	subs	r2, r3, #1
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10a      	bne.n	800bbf6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bbf2:	bf00      	nop
 800bbf4:	e7fe      	b.n	800bbf4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bbf6:	f002 f89d 	bl	800dd34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc02:	68f9      	ldr	r1, [r7, #12]
 800bc04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc06:	fb01 f303 	mul.w	r3, r1, r3
 800bc0a:	441a      	add	r2, r3
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc26:	3b01      	subs	r3, #1
 800bc28:	68f9      	ldr	r1, [r7, #12]
 800bc2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc2c:	fb01 f303 	mul.w	r3, r1, r3
 800bc30:	441a      	add	r2, r3
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	22ff      	movs	r2, #255	; 0xff
 800bc3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	22ff      	movs	r2, #255	; 0xff
 800bc42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d114      	bne.n	800bc76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d01a      	beq.n	800bc8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	3310      	adds	r3, #16
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f001 f94b 	bl	800cef4 <xTaskRemoveFromEventList>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d012      	beq.n	800bc8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc64:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <xQueueGenericReset+0xcc>)
 800bc66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc6a:	601a      	str	r2, [r3, #0]
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	e009      	b.n	800bc8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3310      	adds	r3, #16
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7ff fef2 	bl	800ba64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	3324      	adds	r3, #36	; 0x24
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff feed 	bl	800ba64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc8a:	f002 f883 	bl	800dd94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc8e:	2301      	movs	r3, #1
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	e000ed04 	.word	0xe000ed04

0800bc9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b08e      	sub	sp, #56	; 0x38
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10a      	bne.n	800bcc6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcc2:	bf00      	nop
 800bcc4:	e7fe      	b.n	800bcc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10a      	bne.n	800bce2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd0:	f383 8811 	msr	BASEPRI, r3
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <xQueueGenericCreateStatic+0x52>
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <xQueueGenericCreateStatic+0x56>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e000      	b.n	800bcf4 <xQueueGenericCreateStatic+0x58>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10a      	bne.n	800bd0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfc:	f383 8811 	msr	BASEPRI, r3
 800bd00:	f3bf 8f6f 	isb	sy
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	623b      	str	r3, [r7, #32]
}
 800bd0a:	bf00      	nop
 800bd0c:	e7fe      	b.n	800bd0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d102      	bne.n	800bd1a <xQueueGenericCreateStatic+0x7e>
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d101      	bne.n	800bd1e <xQueueGenericCreateStatic+0x82>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e000      	b.n	800bd20 <xQueueGenericCreateStatic+0x84>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10a      	bne.n	800bd3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	61fb      	str	r3, [r7, #28]
}
 800bd36:	bf00      	nop
 800bd38:	e7fe      	b.n	800bd38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd3a:	2350      	movs	r3, #80	; 0x50
 800bd3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2b50      	cmp	r3, #80	; 0x50
 800bd42:	d00a      	beq.n	800bd5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	61bb      	str	r3, [r7, #24]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00d      	beq.n	800bd82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	4613      	mov	r3, r2
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	68b9      	ldr	r1, [r7, #8]
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f000 f805 	bl	800bd8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3730      	adds	r7, #48	; 0x30
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
 800bd98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d103      	bne.n	800bda8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	69ba      	ldr	r2, [r7, #24]
 800bda4:	601a      	str	r2, [r3, #0]
 800bda6:	e002      	b.n	800bdae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdba:	2101      	movs	r1, #1
 800bdbc:	69b8      	ldr	r0, [r7, #24]
 800bdbe:	f7ff ff05 	bl	800bbcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	78fa      	ldrb	r2, [r7, #3]
 800bdc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bdca:	bf00      	nop
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
	...

0800bdd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b08e      	sub	sp, #56	; 0x38
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
 800bde0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bde2:	2300      	movs	r3, #0
 800bde4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10a      	bne.n	800be06 <xQueueGenericSend+0x32>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be02:	bf00      	nop
 800be04:	e7fe      	b.n	800be04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d103      	bne.n	800be14 <xQueueGenericSend+0x40>
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <xQueueGenericSend+0x44>
 800be14:	2301      	movs	r3, #1
 800be16:	e000      	b.n	800be1a <xQueueGenericSend+0x46>
 800be18:	2300      	movs	r3, #0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10a      	bne.n	800be34 <xQueueGenericSend+0x60>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be30:	bf00      	nop
 800be32:	e7fe      	b.n	800be32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	2b02      	cmp	r3, #2
 800be38:	d103      	bne.n	800be42 <xQueueGenericSend+0x6e>
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d101      	bne.n	800be46 <xQueueGenericSend+0x72>
 800be42:	2301      	movs	r3, #1
 800be44:	e000      	b.n	800be48 <xQueueGenericSend+0x74>
 800be46:	2300      	movs	r3, #0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10a      	bne.n	800be62 <xQueueGenericSend+0x8e>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	623b      	str	r3, [r7, #32]
}
 800be5e:	bf00      	nop
 800be60:	e7fe      	b.n	800be60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be62:	f001 fa0b 	bl	800d27c <xTaskGetSchedulerState>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d102      	bne.n	800be72 <xQueueGenericSend+0x9e>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d101      	bne.n	800be76 <xQueueGenericSend+0xa2>
 800be72:	2301      	movs	r3, #1
 800be74:	e000      	b.n	800be78 <xQueueGenericSend+0xa4>
 800be76:	2300      	movs	r3, #0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10a      	bne.n	800be92 <xQueueGenericSend+0xbe>
	__asm volatile
 800be7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be80:	f383 8811 	msr	BASEPRI, r3
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	61fb      	str	r3, [r7, #28]
}
 800be8e:	bf00      	nop
 800be90:	e7fe      	b.n	800be90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be92:	f001 ff4f 	bl	800dd34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d302      	bcc.n	800bea8 <xQueueGenericSend+0xd4>
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d129      	bne.n	800befc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beae:	f000 fa0b 	bl	800c2c8 <prvCopyDataToQueue>
 800beb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d010      	beq.n	800bede <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	3324      	adds	r3, #36	; 0x24
 800bec0:	4618      	mov	r0, r3
 800bec2:	f001 f817 	bl	800cef4 <xTaskRemoveFromEventList>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d013      	beq.n	800bef4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800becc:	4b3f      	ldr	r3, [pc, #252]	; (800bfcc <xQueueGenericSend+0x1f8>)
 800bece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	e00a      	b.n	800bef4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d007      	beq.n	800bef4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bee4:	4b39      	ldr	r3, [pc, #228]	; (800bfcc <xQueueGenericSend+0x1f8>)
 800bee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bef4:	f001 ff4e 	bl	800dd94 <vPortExitCritical>
				return pdPASS;
 800bef8:	2301      	movs	r3, #1
 800befa:	e063      	b.n	800bfc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d103      	bne.n	800bf0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf02:	f001 ff47 	bl	800dd94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf06:	2300      	movs	r3, #0
 800bf08:	e05c      	b.n	800bfc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d106      	bne.n	800bf1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf10:	f107 0314 	add.w	r3, r7, #20
 800bf14:	4618      	mov	r0, r3
 800bf16:	f001 f851 	bl	800cfbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf1e:	f001 ff39 	bl	800dd94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf22:	f000 fda1 	bl	800ca68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf26:	f001 ff05 	bl	800dd34 <vPortEnterCritical>
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf30:	b25b      	sxtb	r3, r3
 800bf32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf36:	d103      	bne.n	800bf40 <xQueueGenericSend+0x16c>
 800bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf46:	b25b      	sxtb	r3, r3
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4c:	d103      	bne.n	800bf56 <xQueueGenericSend+0x182>
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf56:	f001 ff1d 	bl	800dd94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf5a:	1d3a      	adds	r2, r7, #4
 800bf5c:	f107 0314 	add.w	r3, r7, #20
 800bf60:	4611      	mov	r1, r2
 800bf62:	4618      	mov	r0, r3
 800bf64:	f001 f840 	bl	800cfe8 <xTaskCheckForTimeOut>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d124      	bne.n	800bfb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf70:	f000 faa2 	bl	800c4b8 <prvIsQueueFull>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d018      	beq.n	800bfac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7c:	3310      	adds	r3, #16
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	4611      	mov	r1, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 ff66 	bl	800ce54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf8a:	f000 fa2d 	bl	800c3e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf8e:	f000 fd79 	bl	800ca84 <xTaskResumeAll>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f47f af7c 	bne.w	800be92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bf9a:	4b0c      	ldr	r3, [pc, #48]	; (800bfcc <xQueueGenericSend+0x1f8>)
 800bf9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	e772      	b.n	800be92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bfac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfae:	f000 fa1b 	bl	800c3e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfb2:	f000 fd67 	bl	800ca84 <xTaskResumeAll>
 800bfb6:	e76c      	b.n	800be92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bfb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfba:	f000 fa15 	bl	800c3e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfbe:	f000 fd61 	bl	800ca84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bfc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3738      	adds	r7, #56	; 0x38
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	e000ed04 	.word	0xe000ed04

0800bfd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b090      	sub	sp, #64	; 0x40
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10a      	bne.n	800bffe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bffa:	bf00      	nop
 800bffc:	e7fe      	b.n	800bffc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d103      	bne.n	800c00c <xQueueGenericSendFromISR+0x3c>
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d101      	bne.n	800c010 <xQueueGenericSendFromISR+0x40>
 800c00c:	2301      	movs	r3, #1
 800c00e:	e000      	b.n	800c012 <xQueueGenericSendFromISR+0x42>
 800c010:	2300      	movs	r3, #0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d10a      	bne.n	800c02c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c028:	bf00      	nop
 800c02a:	e7fe      	b.n	800c02a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d103      	bne.n	800c03a <xQueueGenericSendFromISR+0x6a>
 800c032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c036:	2b01      	cmp	r3, #1
 800c038:	d101      	bne.n	800c03e <xQueueGenericSendFromISR+0x6e>
 800c03a:	2301      	movs	r3, #1
 800c03c:	e000      	b.n	800c040 <xQueueGenericSendFromISR+0x70>
 800c03e:	2300      	movs	r3, #0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10a      	bne.n	800c05a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	623b      	str	r3, [r7, #32]
}
 800c056:	bf00      	nop
 800c058:	e7fe      	b.n	800c058 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c05a:	f001 ff4d 	bl	800def8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c05e:	f3ef 8211 	mrs	r2, BASEPRI
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	61fa      	str	r2, [r7, #28]
 800c074:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c076:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c078:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c082:	429a      	cmp	r2, r3
 800c084:	d302      	bcc.n	800c08c <xQueueGenericSendFromISR+0xbc>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d12f      	bne.n	800c0ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	68b9      	ldr	r1, [r7, #8]
 800c0a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0a2:	f000 f911 	bl	800c2c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ae:	d112      	bne.n	800c0d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d016      	beq.n	800c0e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ba:	3324      	adds	r3, #36	; 0x24
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f000 ff19 	bl	800cef4 <xTaskRemoveFromEventList>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d00e      	beq.n	800c0e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00b      	beq.n	800c0e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	e007      	b.n	800c0e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0da:	3301      	adds	r3, #1
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	b25a      	sxtb	r2, r3
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c0ea:	e001      	b.n	800c0f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c0fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3740      	adds	r7, #64	; 0x40
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
	...

0800c108 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08c      	sub	sp, #48	; 0x30
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c114:	2300      	movs	r3, #0
 800c116:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <xQueueReceive+0x30>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	623b      	str	r3, [r7, #32]
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d103      	bne.n	800c146 <xQueueReceive+0x3e>
 800c13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c142:	2b00      	cmp	r3, #0
 800c144:	d101      	bne.n	800c14a <xQueueReceive+0x42>
 800c146:	2301      	movs	r3, #1
 800c148:	e000      	b.n	800c14c <xQueueReceive+0x44>
 800c14a:	2300      	movs	r3, #0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10a      	bne.n	800c166 <xQueueReceive+0x5e>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	61fb      	str	r3, [r7, #28]
}
 800c162:	bf00      	nop
 800c164:	e7fe      	b.n	800c164 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c166:	f001 f889 	bl	800d27c <xTaskGetSchedulerState>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d102      	bne.n	800c176 <xQueueReceive+0x6e>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <xQueueReceive+0x72>
 800c176:	2301      	movs	r3, #1
 800c178:	e000      	b.n	800c17c <xQueueReceive+0x74>
 800c17a:	2300      	movs	r3, #0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <xQueueReceive+0x8e>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	61bb      	str	r3, [r7, #24]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c196:	f001 fdcd 	bl	800dd34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d01f      	beq.n	800c1e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1a6:	68b9      	ldr	r1, [r7, #8]
 800c1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1aa:	f000 f8f7 	bl	800c39c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b0:	1e5a      	subs	r2, r3, #1
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	691b      	ldr	r3, [r3, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00f      	beq.n	800c1de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c0:	3310      	adds	r3, #16
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 fe96 	bl	800cef4 <xTaskRemoveFromEventList>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d007      	beq.n	800c1de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1ce:	4b3d      	ldr	r3, [pc, #244]	; (800c2c4 <xQueueReceive+0x1bc>)
 800c1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1de:	f001 fdd9 	bl	800dd94 <vPortExitCritical>
				return pdPASS;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e069      	b.n	800c2ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d103      	bne.n	800c1f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1ec:	f001 fdd2 	bl	800dd94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e062      	b.n	800c2ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1fa:	f107 0310 	add.w	r3, r7, #16
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 fedc 	bl	800cfbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c204:	2301      	movs	r3, #1
 800c206:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c208:	f001 fdc4 	bl	800dd94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c20c:	f000 fc2c 	bl	800ca68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c210:	f001 fd90 	bl	800dd34 <vPortEnterCritical>
 800c214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c216:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c21a:	b25b      	sxtb	r3, r3
 800c21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c220:	d103      	bne.n	800c22a <xQueueReceive+0x122>
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	2200      	movs	r2, #0
 800c226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c230:	b25b      	sxtb	r3, r3
 800c232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c236:	d103      	bne.n	800c240 <xQueueReceive+0x138>
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c240:	f001 fda8 	bl	800dd94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c244:	1d3a      	adds	r2, r7, #4
 800c246:	f107 0310 	add.w	r3, r7, #16
 800c24a:	4611      	mov	r1, r2
 800c24c:	4618      	mov	r0, r3
 800c24e:	f000 fecb 	bl	800cfe8 <xTaskCheckForTimeOut>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d123      	bne.n	800c2a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c25a:	f000 f917 	bl	800c48c <prvIsQueueEmpty>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d017      	beq.n	800c294 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c266:	3324      	adds	r3, #36	; 0x24
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	4611      	mov	r1, r2
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 fdf1 	bl	800ce54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c274:	f000 f8b8 	bl	800c3e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c278:	f000 fc04 	bl	800ca84 <xTaskResumeAll>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d189      	bne.n	800c196 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c282:	4b10      	ldr	r3, [pc, #64]	; (800c2c4 <xQueueReceive+0x1bc>)
 800c284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c288:	601a      	str	r2, [r3, #0]
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	e780      	b.n	800c196 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c296:	f000 f8a7 	bl	800c3e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c29a:	f000 fbf3 	bl	800ca84 <xTaskResumeAll>
 800c29e:	e77a      	b.n	800c196 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2a2:	f000 f8a1 	bl	800c3e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2a6:	f000 fbed 	bl	800ca84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ac:	f000 f8ee 	bl	800c48c <prvIsQueueEmpty>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f43f af6f 	beq.w	800c196 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3730      	adds	r7, #48	; 0x30
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	e000ed04 	.word	0xe000ed04

0800c2c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10d      	bne.n	800c302 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d14d      	bne.n	800c38a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 ffe0 	bl	800d2b8 <xTaskPriorityDisinherit>
 800c2f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	609a      	str	r2, [r3, #8]
 800c300:	e043      	b.n	800c38a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d119      	bne.n	800c33c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6858      	ldr	r0, [r3, #4]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c310:	461a      	mov	r2, r3
 800c312:	68b9      	ldr	r1, [r7, #8]
 800c314:	f002 fd40 	bl	800ed98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c320:	441a      	add	r2, r3
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d32b      	bcc.n	800c38a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	605a      	str	r2, [r3, #4]
 800c33a:	e026      	b.n	800c38a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	68d8      	ldr	r0, [r3, #12]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c344:	461a      	mov	r2, r3
 800c346:	68b9      	ldr	r1, [r7, #8]
 800c348:	f002 fd26 	bl	800ed98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	68da      	ldr	r2, [r3, #12]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c354:	425b      	negs	r3, r3
 800c356:	441a      	add	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	68da      	ldr	r2, [r3, #12]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	429a      	cmp	r2, r3
 800c366:	d207      	bcs.n	800c378 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	689a      	ldr	r2, [r3, #8]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c370:	425b      	negs	r3, r3
 800c372:	441a      	add	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d105      	bne.n	800c38a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	3b01      	subs	r3, #1
 800c388:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	1c5a      	adds	r2, r3, #1
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c392:	697b      	ldr	r3, [r7, #20]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3718      	adds	r7, #24
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d018      	beq.n	800c3e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68da      	ldr	r2, [r3, #12]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b6:	441a      	add	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	68da      	ldr	r2, [r3, #12]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d303      	bcc.n	800c3d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68d9      	ldr	r1, [r3, #12]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d8:	461a      	mov	r2, r3
 800c3da:	6838      	ldr	r0, [r7, #0]
 800c3dc:	f002 fcdc 	bl	800ed98 <memcpy>
	}
}
 800c3e0:	bf00      	nop
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c3f0:	f001 fca0 	bl	800dd34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3fc:	e011      	b.n	800c422 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c402:	2b00      	cmp	r3, #0
 800c404:	d012      	beq.n	800c42c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	3324      	adds	r3, #36	; 0x24
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 fd72 	bl	800cef4 <xTaskRemoveFromEventList>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c416:	f000 fe49 	bl	800d0ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c426:	2b00      	cmp	r3, #0
 800c428:	dce9      	bgt.n	800c3fe <prvUnlockQueue+0x16>
 800c42a:	e000      	b.n	800c42e <prvUnlockQueue+0x46>
					break;
 800c42c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	22ff      	movs	r2, #255	; 0xff
 800c432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c436:	f001 fcad 	bl	800dd94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c43a:	f001 fc7b 	bl	800dd34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c444:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c446:	e011      	b.n	800c46c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d012      	beq.n	800c476 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	3310      	adds	r3, #16
 800c454:	4618      	mov	r0, r3
 800c456:	f000 fd4d 	bl	800cef4 <xTaskRemoveFromEventList>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d001      	beq.n	800c464 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c460:	f000 fe24 	bl	800d0ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c464:	7bbb      	ldrb	r3, [r7, #14]
 800c466:	3b01      	subs	r3, #1
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c46c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c470:	2b00      	cmp	r3, #0
 800c472:	dce9      	bgt.n	800c448 <prvUnlockQueue+0x60>
 800c474:	e000      	b.n	800c478 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c476:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	22ff      	movs	r2, #255	; 0xff
 800c47c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c480:	f001 fc88 	bl	800dd94 <vPortExitCritical>
}
 800c484:	bf00      	nop
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c494:	f001 fc4e 	bl	800dd34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	e001      	b.n	800c4aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4aa:	f001 fc73 	bl	800dd94 <vPortExitCritical>

	return xReturn;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4c0:	f001 fc38 	bl	800dd34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d102      	bne.n	800c4d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	60fb      	str	r3, [r7, #12]
 800c4d4:	e001      	b.n	800c4da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4da:	f001 fc5b 	bl	800dd94 <vPortExitCritical>

	return xReturn;
 800c4de:	68fb      	ldr	r3, [r7, #12]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60fb      	str	r3, [r7, #12]
 800c4f6:	e014      	b.n	800c522 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c4f8:	4a0f      	ldr	r2, [pc, #60]	; (800c538 <vQueueAddToRegistry+0x50>)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10b      	bne.n	800c51c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c504:	490c      	ldr	r1, [pc, #48]	; (800c538 <vQueueAddToRegistry+0x50>)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c50e:	4a0a      	ldr	r2, [pc, #40]	; (800c538 <vQueueAddToRegistry+0x50>)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	4413      	add	r3, r2
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c51a:	e006      	b.n	800c52a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	3301      	adds	r3, #1
 800c520:	60fb      	str	r3, [r7, #12]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2b07      	cmp	r3, #7
 800c526:	d9e7      	bls.n	800c4f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c528:	bf00      	nop
 800c52a:	bf00      	nop
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	20000ba8 	.word	0x20000ba8

0800c53c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c54c:	f001 fbf2 	bl	800dd34 <vPortEnterCritical>
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c556:	b25b      	sxtb	r3, r3
 800c558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55c:	d103      	bne.n	800c566 <vQueueWaitForMessageRestricted+0x2a>
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c56c:	b25b      	sxtb	r3, r3
 800c56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c572:	d103      	bne.n	800c57c <vQueueWaitForMessageRestricted+0x40>
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c57c:	f001 fc0a 	bl	800dd94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c584:	2b00      	cmp	r3, #0
 800c586:	d106      	bne.n	800c596 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	3324      	adds	r3, #36	; 0x24
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	68b9      	ldr	r1, [r7, #8]
 800c590:	4618      	mov	r0, r3
 800c592:	f000 fc83 	bl	800ce9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c596:	6978      	ldr	r0, [r7, #20]
 800c598:	f7ff ff26 	bl	800c3e8 <prvUnlockQueue>
	}
 800c59c:	bf00      	nop
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08e      	sub	sp, #56	; 0x38
 800c5a8:	af04      	add	r7, sp, #16
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10a      	bne.n	800c5ce <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	623b      	str	r3, [r7, #32]
}
 800c5ca:	bf00      	nop
 800c5cc:	e7fe      	b.n	800c5cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10a      	bne.n	800c5ea <xTaskCreateStatic+0x46>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	61fb      	str	r3, [r7, #28]
}
 800c5e6:	bf00      	nop
 800c5e8:	e7fe      	b.n	800c5e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c5ea:	23c0      	movs	r3, #192	; 0xc0
 800c5ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	2bc0      	cmp	r3, #192	; 0xc0
 800c5f2:	d00a      	beq.n	800c60a <xTaskCreateStatic+0x66>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	61bb      	str	r3, [r7, #24]
}
 800c606:	bf00      	nop
 800c608:	e7fe      	b.n	800c608 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c60a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d01e      	beq.n	800c650 <xTaskCreateStatic+0xac>
 800c612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c614:	2b00      	cmp	r3, #0
 800c616:	d01b      	beq.n	800c650 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c620:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	2202      	movs	r2, #2
 800c626:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c62a:	2300      	movs	r3, #0
 800c62c:	9303      	str	r3, [sp, #12]
 800c62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c630:	9302      	str	r3, [sp, #8]
 800c632:	f107 0314 	add.w	r3, r7, #20
 800c636:	9301      	str	r3, [sp, #4]
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	68b9      	ldr	r1, [r7, #8]
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f000 f850 	bl	800c6e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c64a:	f000 f8f7 	bl	800c83c <prvAddNewTaskToReadyList>
 800c64e:	e001      	b.n	800c654 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c654:	697b      	ldr	r3, [r7, #20]
	}
 800c656:	4618      	mov	r0, r3
 800c658:	3728      	adds	r7, #40	; 0x28
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b08c      	sub	sp, #48	; 0x30
 800c662:	af04      	add	r7, sp, #16
 800c664:	60f8      	str	r0, [r7, #12]
 800c666:	60b9      	str	r1, [r7, #8]
 800c668:	603b      	str	r3, [r7, #0]
 800c66a:	4613      	mov	r3, r2
 800c66c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c66e:	88fb      	ldrh	r3, [r7, #6]
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4618      	mov	r0, r3
 800c674:	f001 fc80 	bl	800df78 <pvPortMalloc>
 800c678:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00e      	beq.n	800c69e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c680:	20c0      	movs	r0, #192	; 0xc0
 800c682:	f001 fc79 	bl	800df78 <pvPortMalloc>
 800c686:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	697a      	ldr	r2, [r7, #20]
 800c692:	631a      	str	r2, [r3, #48]	; 0x30
 800c694:	e005      	b.n	800c6a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c696:	6978      	ldr	r0, [r7, #20]
 800c698:	f001 fd3a 	bl	800e110 <vPortFree>
 800c69c:	e001      	b.n	800c6a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d017      	beq.n	800c6d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6b0:	88fa      	ldrh	r2, [r7, #6]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	9303      	str	r3, [sp, #12]
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	9302      	str	r3, [sp, #8]
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	9301      	str	r3, [sp, #4]
 800c6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	68b9      	ldr	r1, [r7, #8]
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f000 f80e 	bl	800c6e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6cc:	69f8      	ldr	r0, [r7, #28]
 800c6ce:	f000 f8b5 	bl	800c83c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	61bb      	str	r3, [r7, #24]
 800c6d6:	e002      	b.n	800c6de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6de:	69bb      	ldr	r3, [r7, #24]
	}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3720      	adds	r7, #32
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	461a      	mov	r2, r3
 800c700:	21a5      	movs	r1, #165	; 0xa5
 800c702:	f002 fb57 	bl	800edb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c710:	3b01      	subs	r3, #1
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4413      	add	r3, r2
 800c716:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	f023 0307 	bic.w	r3, r3, #7
 800c71e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	f003 0307 	and.w	r3, r3, #7
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00a      	beq.n	800c740 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	f383 8811 	msr	BASEPRI, r3
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	617b      	str	r3, [r7, #20]
}
 800c73c:	bf00      	nop
 800c73e:	e7fe      	b.n	800c73e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d01f      	beq.n	800c786 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c746:	2300      	movs	r3, #0
 800c748:	61fb      	str	r3, [r7, #28]
 800c74a:	e012      	b.n	800c772 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	4413      	add	r3, r2
 800c752:	7819      	ldrb	r1, [r3, #0]
 800c754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	4413      	add	r3, r2
 800c75a:	3334      	adds	r3, #52	; 0x34
 800c75c:	460a      	mov	r2, r1
 800c75e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	4413      	add	r3, r2
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d006      	beq.n	800c77a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	3301      	adds	r3, #1
 800c770:	61fb      	str	r3, [r7, #28]
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	2b0f      	cmp	r3, #15
 800c776:	d9e9      	bls.n	800c74c <prvInitialiseNewTask+0x64>
 800c778:	e000      	b.n	800c77c <prvInitialiseNewTask+0x94>
			{
				break;
 800c77a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c784:	e003      	b.n	800c78e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c790:	2b37      	cmp	r3, #55	; 0x37
 800c792:	d901      	bls.n	800c798 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c794:	2337      	movs	r3, #55	; 0x37
 800c796:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c79c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7ff f978 	bl	800baa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	3318      	adds	r3, #24
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff f973 	bl	800baa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	3358      	adds	r3, #88	; 0x58
 800c7ee:	2260      	movs	r2, #96	; 0x60
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f002 fade 	bl	800edb4 <memset>
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	4a0d      	ldr	r2, [pc, #52]	; (800c830 <prvInitialiseNewTask+0x148>)
 800c7fc:	65da      	str	r2, [r3, #92]	; 0x5c
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	4a0c      	ldr	r2, [pc, #48]	; (800c834 <prvInitialiseNewTask+0x14c>)
 800c802:	661a      	str	r2, [r3, #96]	; 0x60
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	4a0c      	ldr	r2, [pc, #48]	; (800c838 <prvInitialiseNewTask+0x150>)
 800c808:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	68f9      	ldr	r1, [r7, #12]
 800c80e:	69b8      	ldr	r0, [r7, #24]
 800c810:	f001 f962 	bl	800dad8 <pxPortInitialiseStack>
 800c814:	4602      	mov	r2, r0
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d002      	beq.n	800c826 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c826:	bf00      	nop
 800c828:	3720      	adds	r7, #32
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	08012408 	.word	0x08012408
 800c834:	08012428 	.word	0x08012428
 800c838:	080123e8 	.word	0x080123e8

0800c83c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c844:	f001 fa76 	bl	800dd34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c848:	4b2d      	ldr	r3, [pc, #180]	; (800c900 <prvAddNewTaskToReadyList+0xc4>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3301      	adds	r3, #1
 800c84e:	4a2c      	ldr	r2, [pc, #176]	; (800c900 <prvAddNewTaskToReadyList+0xc4>)
 800c850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c852:	4b2c      	ldr	r3, [pc, #176]	; (800c904 <prvAddNewTaskToReadyList+0xc8>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d109      	bne.n	800c86e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c85a:	4a2a      	ldr	r2, [pc, #168]	; (800c904 <prvAddNewTaskToReadyList+0xc8>)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c860:	4b27      	ldr	r3, [pc, #156]	; (800c900 <prvAddNewTaskToReadyList+0xc4>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d110      	bne.n	800c88a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c868:	f000 fc46 	bl	800d0f8 <prvInitialiseTaskLists>
 800c86c:	e00d      	b.n	800c88a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c86e:	4b26      	ldr	r3, [pc, #152]	; (800c908 <prvAddNewTaskToReadyList+0xcc>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d109      	bne.n	800c88a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c876:	4b23      	ldr	r3, [pc, #140]	; (800c904 <prvAddNewTaskToReadyList+0xc8>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c880:	429a      	cmp	r2, r3
 800c882:	d802      	bhi.n	800c88a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c884:	4a1f      	ldr	r2, [pc, #124]	; (800c904 <prvAddNewTaskToReadyList+0xc8>)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c88a:	4b20      	ldr	r3, [pc, #128]	; (800c90c <prvAddNewTaskToReadyList+0xd0>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	3301      	adds	r3, #1
 800c890:	4a1e      	ldr	r2, [pc, #120]	; (800c90c <prvAddNewTaskToReadyList+0xd0>)
 800c892:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c894:	4b1d      	ldr	r3, [pc, #116]	; (800c90c <prvAddNewTaskToReadyList+0xd0>)
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a0:	4b1b      	ldr	r3, [pc, #108]	; (800c910 <prvAddNewTaskToReadyList+0xd4>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d903      	bls.n	800c8b0 <prvAddNewTaskToReadyList+0x74>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ac:	4a18      	ldr	r2, [pc, #96]	; (800c910 <prvAddNewTaskToReadyList+0xd4>)
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4a15      	ldr	r2, [pc, #84]	; (800c914 <prvAddNewTaskToReadyList+0xd8>)
 800c8be:	441a      	add	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f7ff f8f9 	bl	800babe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8cc:	f001 fa62 	bl	800dd94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8d0:	4b0d      	ldr	r3, [pc, #52]	; (800c908 <prvAddNewTaskToReadyList+0xcc>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00e      	beq.n	800c8f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8d8:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <prvAddNewTaskToReadyList+0xc8>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d207      	bcs.n	800c8f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8e6:	4b0c      	ldr	r3, [pc, #48]	; (800c918 <prvAddNewTaskToReadyList+0xdc>)
 800c8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8f6:	bf00      	nop
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	200010bc 	.word	0x200010bc
 800c904:	20000be8 	.word	0x20000be8
 800c908:	200010c8 	.word	0x200010c8
 800c90c:	200010d8 	.word	0x200010d8
 800c910:	200010c4 	.word	0x200010c4
 800c914:	20000bec 	.word	0x20000bec
 800c918:	e000ed04 	.word	0xe000ed04

0800c91c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c924:	2300      	movs	r3, #0
 800c926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d017      	beq.n	800c95e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c92e:	4b13      	ldr	r3, [pc, #76]	; (800c97c <vTaskDelay+0x60>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00a      	beq.n	800c94c <vTaskDelay+0x30>
	__asm volatile
 800c936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	60bb      	str	r3, [r7, #8]
}
 800c948:	bf00      	nop
 800c94a:	e7fe      	b.n	800c94a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c94c:	f000 f88c 	bl	800ca68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c950:	2100      	movs	r1, #0
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fd1e 	bl	800d394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c958:	f000 f894 	bl	800ca84 <xTaskResumeAll>
 800c95c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d107      	bne.n	800c974 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c964:	4b06      	ldr	r3, [pc, #24]	; (800c980 <vTaskDelay+0x64>)
 800c966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c96a:	601a      	str	r2, [r3, #0]
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c974:	bf00      	nop
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	200010e4 	.word	0x200010e4
 800c980:	e000ed04 	.word	0xe000ed04

0800c984 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08a      	sub	sp, #40	; 0x28
 800c988:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c98e:	2300      	movs	r3, #0
 800c990:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c992:	463a      	mov	r2, r7
 800c994:	1d39      	adds	r1, r7, #4
 800c996:	f107 0308 	add.w	r3, r7, #8
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff f82e 	bl	800b9fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9a0:	6839      	ldr	r1, [r7, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	9202      	str	r2, [sp, #8]
 800c9a8:	9301      	str	r3, [sp, #4]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	460a      	mov	r2, r1
 800c9b2:	4925      	ldr	r1, [pc, #148]	; (800ca48 <vTaskStartScheduler+0xc4>)
 800c9b4:	4825      	ldr	r0, [pc, #148]	; (800ca4c <vTaskStartScheduler+0xc8>)
 800c9b6:	f7ff fdf5 	bl	800c5a4 <xTaskCreateStatic>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	4a24      	ldr	r2, [pc, #144]	; (800ca50 <vTaskStartScheduler+0xcc>)
 800c9be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9c0:	4b23      	ldr	r3, [pc, #140]	; (800ca50 <vTaskStartScheduler+0xcc>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	617b      	str	r3, [r7, #20]
 800c9cc:	e001      	b.n	800c9d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d102      	bne.n	800c9de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c9d8:	f000 fd30 	bl	800d43c <xTimerCreateTimerTask>
 800c9dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d11d      	bne.n	800ca20 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	613b      	str	r3, [r7, #16]
}
 800c9f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c9f8:	4b16      	ldr	r3, [pc, #88]	; (800ca54 <vTaskStartScheduler+0xd0>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3358      	adds	r3, #88	; 0x58
 800c9fe:	4a16      	ldr	r2, [pc, #88]	; (800ca58 <vTaskStartScheduler+0xd4>)
 800ca00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca02:	4b16      	ldr	r3, [pc, #88]	; (800ca5c <vTaskStartScheduler+0xd8>)
 800ca04:	f04f 32ff 	mov.w	r2, #4294967295
 800ca08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca0a:	4b15      	ldr	r3, [pc, #84]	; (800ca60 <vTaskStartScheduler+0xdc>)
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca10:	4b14      	ldr	r3, [pc, #80]	; (800ca64 <vTaskStartScheduler+0xe0>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ca16:	f7f3 fec1 	bl	800079c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca1a:	f001 f8e9 	bl	800dbf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca1e:	e00e      	b.n	800ca3e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca26:	d10a      	bne.n	800ca3e <vTaskStartScheduler+0xba>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	60fb      	str	r3, [r7, #12]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <vTaskStartScheduler+0xb8>
}
 800ca3e:	bf00      	nop
 800ca40:	3718      	adds	r7, #24
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	0800fa50 	.word	0x0800fa50
 800ca4c:	0800d0c5 	.word	0x0800d0c5
 800ca50:	200010e0 	.word	0x200010e0
 800ca54:	20000be8 	.word	0x20000be8
 800ca58:	20000174 	.word	0x20000174
 800ca5c:	200010dc 	.word	0x200010dc
 800ca60:	200010c8 	.word	0x200010c8
 800ca64:	200010c0 	.word	0x200010c0

0800ca68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca68:	b480      	push	{r7}
 800ca6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca6c:	4b04      	ldr	r3, [pc, #16]	; (800ca80 <vTaskSuspendAll+0x18>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	3301      	adds	r3, #1
 800ca72:	4a03      	ldr	r2, [pc, #12]	; (800ca80 <vTaskSuspendAll+0x18>)
 800ca74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca76:	bf00      	nop
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr
 800ca80:	200010e4 	.word	0x200010e4

0800ca84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca92:	4b42      	ldr	r3, [pc, #264]	; (800cb9c <xTaskResumeAll+0x118>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10a      	bne.n	800cab0 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	603b      	str	r3, [r7, #0]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cab0:	f001 f940 	bl	800dd34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cab4:	4b39      	ldr	r3, [pc, #228]	; (800cb9c <xTaskResumeAll+0x118>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3b01      	subs	r3, #1
 800caba:	4a38      	ldr	r2, [pc, #224]	; (800cb9c <xTaskResumeAll+0x118>)
 800cabc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cabe:	4b37      	ldr	r3, [pc, #220]	; (800cb9c <xTaskResumeAll+0x118>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d162      	bne.n	800cb8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cac6:	4b36      	ldr	r3, [pc, #216]	; (800cba0 <xTaskResumeAll+0x11c>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d05e      	beq.n	800cb8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cace:	e02f      	b.n	800cb30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cad0:	4b34      	ldr	r3, [pc, #208]	; (800cba4 <xTaskResumeAll+0x120>)
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	3318      	adds	r3, #24
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff f84b 	bl	800bb78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3304      	adds	r3, #4
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff f846 	bl	800bb78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf0:	4b2d      	ldr	r3, [pc, #180]	; (800cba8 <xTaskResumeAll+0x124>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d903      	bls.n	800cb00 <xTaskResumeAll+0x7c>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafc:	4a2a      	ldr	r2, [pc, #168]	; (800cba8 <xTaskResumeAll+0x124>)
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb04:	4613      	mov	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4413      	add	r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	4a27      	ldr	r2, [pc, #156]	; (800cbac <xTaskResumeAll+0x128>)
 800cb0e:	441a      	add	r2, r3
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	3304      	adds	r3, #4
 800cb14:	4619      	mov	r1, r3
 800cb16:	4610      	mov	r0, r2
 800cb18:	f7fe ffd1 	bl	800babe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb20:	4b23      	ldr	r3, [pc, #140]	; (800cbb0 <xTaskResumeAll+0x12c>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d302      	bcc.n	800cb30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cb2a:	4b22      	ldr	r3, [pc, #136]	; (800cbb4 <xTaskResumeAll+0x130>)
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb30:	4b1c      	ldr	r3, [pc, #112]	; (800cba4 <xTaskResumeAll+0x120>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1cb      	bne.n	800cad0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d001      	beq.n	800cb42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb3e:	f000 fb7d 	bl	800d23c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb42:	4b1d      	ldr	r3, [pc, #116]	; (800cbb8 <xTaskResumeAll+0x134>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d010      	beq.n	800cb70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb4e:	f000 f847 	bl	800cbe0 <xTaskIncrementTick>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb58:	4b16      	ldr	r3, [pc, #88]	; (800cbb4 <xTaskResumeAll+0x130>)
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3b01      	subs	r3, #1
 800cb62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d1f1      	bne.n	800cb4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb6a:	4b13      	ldr	r3, [pc, #76]	; (800cbb8 <xTaskResumeAll+0x134>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb70:	4b10      	ldr	r3, [pc, #64]	; (800cbb4 <xTaskResumeAll+0x130>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d009      	beq.n	800cb8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb7c:	4b0f      	ldr	r3, [pc, #60]	; (800cbbc <xTaskResumeAll+0x138>)
 800cb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb8c:	f001 f902 	bl	800dd94 <vPortExitCritical>

	return xAlreadyYielded;
 800cb90:	68bb      	ldr	r3, [r7, #8]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	200010e4 	.word	0x200010e4
 800cba0:	200010bc 	.word	0x200010bc
 800cba4:	2000107c 	.word	0x2000107c
 800cba8:	200010c4 	.word	0x200010c4
 800cbac:	20000bec 	.word	0x20000bec
 800cbb0:	20000be8 	.word	0x20000be8
 800cbb4:	200010d0 	.word	0x200010d0
 800cbb8:	200010cc 	.word	0x200010cc
 800cbbc:	e000ed04 	.word	0xe000ed04

0800cbc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbc6:	4b05      	ldr	r3, [pc, #20]	; (800cbdc <xTaskGetTickCount+0x1c>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbcc:	687b      	ldr	r3, [r7, #4]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	370c      	adds	r7, #12
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	200010c0 	.word	0x200010c0

0800cbe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbea:	4b4f      	ldr	r3, [pc, #316]	; (800cd28 <xTaskIncrementTick+0x148>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f040 808f 	bne.w	800cd12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cbf4:	4b4d      	ldr	r3, [pc, #308]	; (800cd2c <xTaskIncrementTick+0x14c>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cbfc:	4a4b      	ldr	r2, [pc, #300]	; (800cd2c <xTaskIncrementTick+0x14c>)
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d120      	bne.n	800cc4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc08:	4b49      	ldr	r3, [pc, #292]	; (800cd30 <xTaskIncrementTick+0x150>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00a      	beq.n	800cc28 <xTaskIncrementTick+0x48>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	603b      	str	r3, [r7, #0]
}
 800cc24:	bf00      	nop
 800cc26:	e7fe      	b.n	800cc26 <xTaskIncrementTick+0x46>
 800cc28:	4b41      	ldr	r3, [pc, #260]	; (800cd30 <xTaskIncrementTick+0x150>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	60fb      	str	r3, [r7, #12]
 800cc2e:	4b41      	ldr	r3, [pc, #260]	; (800cd34 <xTaskIncrementTick+0x154>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a3f      	ldr	r2, [pc, #252]	; (800cd30 <xTaskIncrementTick+0x150>)
 800cc34:	6013      	str	r3, [r2, #0]
 800cc36:	4a3f      	ldr	r2, [pc, #252]	; (800cd34 <xTaskIncrementTick+0x154>)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6013      	str	r3, [r2, #0]
 800cc3c:	4b3e      	ldr	r3, [pc, #248]	; (800cd38 <xTaskIncrementTick+0x158>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3301      	adds	r3, #1
 800cc42:	4a3d      	ldr	r2, [pc, #244]	; (800cd38 <xTaskIncrementTick+0x158>)
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	f000 faf9 	bl	800d23c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc4a:	4b3c      	ldr	r3, [pc, #240]	; (800cd3c <xTaskIncrementTick+0x15c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d349      	bcc.n	800cce8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc54:	4b36      	ldr	r3, [pc, #216]	; (800cd30 <xTaskIncrementTick+0x150>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d104      	bne.n	800cc68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc5e:	4b37      	ldr	r3, [pc, #220]	; (800cd3c <xTaskIncrementTick+0x15c>)
 800cc60:	f04f 32ff 	mov.w	r2, #4294967295
 800cc64:	601a      	str	r2, [r3, #0]
					break;
 800cc66:	e03f      	b.n	800cce8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc68:	4b31      	ldr	r3, [pc, #196]	; (800cd30 <xTaskIncrementTick+0x150>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d203      	bcs.n	800cc88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc80:	4a2e      	ldr	r2, [pc, #184]	; (800cd3c <xTaskIncrementTick+0x15c>)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc86:	e02f      	b.n	800cce8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fe ff73 	bl	800bb78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d004      	beq.n	800cca4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	3318      	adds	r3, #24
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fe ff6a 	bl	800bb78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca8:	4b25      	ldr	r3, [pc, #148]	; (800cd40 <xTaskIncrementTick+0x160>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d903      	bls.n	800ccb8 <xTaskIncrementTick+0xd8>
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb4:	4a22      	ldr	r2, [pc, #136]	; (800cd40 <xTaskIncrementTick+0x160>)
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4413      	add	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	4a1f      	ldr	r2, [pc, #124]	; (800cd44 <xTaskIncrementTick+0x164>)
 800ccc6:	441a      	add	r2, r3
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	3304      	adds	r3, #4
 800cccc:	4619      	mov	r1, r3
 800ccce:	4610      	mov	r0, r2
 800ccd0:	f7fe fef5 	bl	800babe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd8:	4b1b      	ldr	r3, [pc, #108]	; (800cd48 <xTaskIncrementTick+0x168>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d3b8      	bcc.n	800cc54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cce2:	2301      	movs	r3, #1
 800cce4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cce6:	e7b5      	b.n	800cc54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cce8:	4b17      	ldr	r3, [pc, #92]	; (800cd48 <xTaskIncrementTick+0x168>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccee:	4915      	ldr	r1, [pc, #84]	; (800cd44 <xTaskIncrementTick+0x164>)
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4413      	add	r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	440b      	add	r3, r1
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d901      	bls.n	800cd04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cd00:	2301      	movs	r3, #1
 800cd02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd04:	4b11      	ldr	r3, [pc, #68]	; (800cd4c <xTaskIncrementTick+0x16c>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d007      	beq.n	800cd1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	617b      	str	r3, [r7, #20]
 800cd10:	e004      	b.n	800cd1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd12:	4b0f      	ldr	r3, [pc, #60]	; (800cd50 <xTaskIncrementTick+0x170>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	3301      	adds	r3, #1
 800cd18:	4a0d      	ldr	r2, [pc, #52]	; (800cd50 <xTaskIncrementTick+0x170>)
 800cd1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd1c:	697b      	ldr	r3, [r7, #20]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	200010e4 	.word	0x200010e4
 800cd2c:	200010c0 	.word	0x200010c0
 800cd30:	20001074 	.word	0x20001074
 800cd34:	20001078 	.word	0x20001078
 800cd38:	200010d4 	.word	0x200010d4
 800cd3c:	200010dc 	.word	0x200010dc
 800cd40:	200010c4 	.word	0x200010c4
 800cd44:	20000bec 	.word	0x20000bec
 800cd48:	20000be8 	.word	0x20000be8
 800cd4c:	200010d0 	.word	0x200010d0
 800cd50:	200010cc 	.word	0x200010cc

0800cd54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd5a:	4b36      	ldr	r3, [pc, #216]	; (800ce34 <vTaskSwitchContext+0xe0>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d003      	beq.n	800cd6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd62:	4b35      	ldr	r3, [pc, #212]	; (800ce38 <vTaskSwitchContext+0xe4>)
 800cd64:	2201      	movs	r2, #1
 800cd66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd68:	e05f      	b.n	800ce2a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800cd6a:	4b33      	ldr	r3, [pc, #204]	; (800ce38 <vTaskSwitchContext+0xe4>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800cd70:	f7f3 fd1c 	bl	80007ac <getRunTimeCounterValue>
 800cd74:	4603      	mov	r3, r0
 800cd76:	4a31      	ldr	r2, [pc, #196]	; (800ce3c <vTaskSwitchContext+0xe8>)
 800cd78:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800cd7a:	4b30      	ldr	r3, [pc, #192]	; (800ce3c <vTaskSwitchContext+0xe8>)
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	4b30      	ldr	r3, [pc, #192]	; (800ce40 <vTaskSwitchContext+0xec>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d909      	bls.n	800cd9a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800cd86:	4b2f      	ldr	r3, [pc, #188]	; (800ce44 <vTaskSwitchContext+0xf0>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cd8c:	4a2b      	ldr	r2, [pc, #172]	; (800ce3c <vTaskSwitchContext+0xe8>)
 800cd8e:	6810      	ldr	r0, [r2, #0]
 800cd90:	4a2b      	ldr	r2, [pc, #172]	; (800ce40 <vTaskSwitchContext+0xec>)
 800cd92:	6812      	ldr	r2, [r2, #0]
 800cd94:	1a82      	subs	r2, r0, r2
 800cd96:	440a      	add	r2, r1
 800cd98:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800cd9a:	4b28      	ldr	r3, [pc, #160]	; (800ce3c <vTaskSwitchContext+0xe8>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a28      	ldr	r2, [pc, #160]	; (800ce40 <vTaskSwitchContext+0xec>)
 800cda0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cda2:	4b29      	ldr	r3, [pc, #164]	; (800ce48 <vTaskSwitchContext+0xf4>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	e010      	b.n	800cdcc <vTaskSwitchContext+0x78>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10a      	bne.n	800cdc6 <vTaskSwitchContext+0x72>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	607b      	str	r3, [r7, #4]
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <vTaskSwitchContext+0x70>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	491f      	ldr	r1, [pc, #124]	; (800ce4c <vTaskSwitchContext+0xf8>)
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	440b      	add	r3, r1
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0e4      	beq.n	800cdaa <vTaskSwitchContext+0x56>
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	4613      	mov	r3, r2
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4a18      	ldr	r2, [pc, #96]	; (800ce4c <vTaskSwitchContext+0xf8>)
 800cdec:	4413      	add	r3, r2
 800cdee:	60bb      	str	r3, [r7, #8]
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	685a      	ldr	r2, [r3, #4]
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	605a      	str	r2, [r3, #4]
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	3308      	adds	r3, #8
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d104      	bne.n	800ce10 <vTaskSwitchContext+0xbc>
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	605a      	str	r2, [r3, #4]
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	4a0b      	ldr	r2, [pc, #44]	; (800ce44 <vTaskSwitchContext+0xf0>)
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	4a0b      	ldr	r2, [pc, #44]	; (800ce48 <vTaskSwitchContext+0xf4>)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce20:	4b08      	ldr	r3, [pc, #32]	; (800ce44 <vTaskSwitchContext+0xf0>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3358      	adds	r3, #88	; 0x58
 800ce26:	4a0a      	ldr	r2, [pc, #40]	; (800ce50 <vTaskSwitchContext+0xfc>)
 800ce28:	6013      	str	r3, [r2, #0]
}
 800ce2a:	bf00      	nop
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	200010e4 	.word	0x200010e4
 800ce38:	200010d0 	.word	0x200010d0
 800ce3c:	200010ec 	.word	0x200010ec
 800ce40:	200010e8 	.word	0x200010e8
 800ce44:	20000be8 	.word	0x20000be8
 800ce48:	200010c4 	.word	0x200010c4
 800ce4c:	20000bec 	.word	0x20000bec
 800ce50:	20000174 	.word	0x20000174

0800ce54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10a      	bne.n	800ce7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ce64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce68:	f383 8811 	msr	BASEPRI, r3
 800ce6c:	f3bf 8f6f 	isb	sy
 800ce70:	f3bf 8f4f 	dsb	sy
 800ce74:	60fb      	str	r3, [r7, #12]
}
 800ce76:	bf00      	nop
 800ce78:	e7fe      	b.n	800ce78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce7a:	4b07      	ldr	r3, [pc, #28]	; (800ce98 <vTaskPlaceOnEventList+0x44>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	3318      	adds	r3, #24
 800ce80:	4619      	mov	r1, r3
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7fe fe3f 	bl	800bb06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce88:	2101      	movs	r1, #1
 800ce8a:	6838      	ldr	r0, [r7, #0]
 800ce8c:	f000 fa82 	bl	800d394 <prvAddCurrentTaskToDelayedList>
}
 800ce90:	bf00      	nop
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	20000be8 	.word	0x20000be8

0800ce9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b086      	sub	sp, #24
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10a      	bne.n	800cec4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	617b      	str	r3, [r7, #20]
}
 800cec0:	bf00      	nop
 800cec2:	e7fe      	b.n	800cec2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cec4:	4b0a      	ldr	r3, [pc, #40]	; (800cef0 <vTaskPlaceOnEventListRestricted+0x54>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3318      	adds	r3, #24
 800ceca:	4619      	mov	r1, r3
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f7fe fdf6 	bl	800babe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d002      	beq.n	800cede <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ced8:	f04f 33ff 	mov.w	r3, #4294967295
 800cedc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cede:	6879      	ldr	r1, [r7, #4]
 800cee0:	68b8      	ldr	r0, [r7, #8]
 800cee2:	f000 fa57 	bl	800d394 <prvAddCurrentTaskToDelayedList>
	}
 800cee6:	bf00      	nop
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	20000be8 	.word	0x20000be8

0800cef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b086      	sub	sp, #24
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d10a      	bne.n	800cf20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	60fb      	str	r3, [r7, #12]
}
 800cf1c:	bf00      	nop
 800cf1e:	e7fe      	b.n	800cf1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	3318      	adds	r3, #24
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fe fe27 	bl	800bb78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf2a:	4b1e      	ldr	r3, [pc, #120]	; (800cfa4 <xTaskRemoveFromEventList+0xb0>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d11d      	bne.n	800cf6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	3304      	adds	r3, #4
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fe fe1e 	bl	800bb78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf40:	4b19      	ldr	r3, [pc, #100]	; (800cfa8 <xTaskRemoveFromEventList+0xb4>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d903      	bls.n	800cf50 <xTaskRemoveFromEventList+0x5c>
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	4a16      	ldr	r2, [pc, #88]	; (800cfa8 <xTaskRemoveFromEventList+0xb4>)
 800cf4e:	6013      	str	r3, [r2, #0]
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf54:	4613      	mov	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	4a13      	ldr	r2, [pc, #76]	; (800cfac <xTaskRemoveFromEventList+0xb8>)
 800cf5e:	441a      	add	r2, r3
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	3304      	adds	r3, #4
 800cf64:	4619      	mov	r1, r3
 800cf66:	4610      	mov	r0, r2
 800cf68:	f7fe fda9 	bl	800babe <vListInsertEnd>
 800cf6c:	e005      	b.n	800cf7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	3318      	adds	r3, #24
 800cf72:	4619      	mov	r1, r3
 800cf74:	480e      	ldr	r0, [pc, #56]	; (800cfb0 <xTaskRemoveFromEventList+0xbc>)
 800cf76:	f7fe fda2 	bl	800babe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf7e:	4b0d      	ldr	r3, [pc, #52]	; (800cfb4 <xTaskRemoveFromEventList+0xc0>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d905      	bls.n	800cf94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf8c:	4b0a      	ldr	r3, [pc, #40]	; (800cfb8 <xTaskRemoveFromEventList+0xc4>)
 800cf8e:	2201      	movs	r2, #1
 800cf90:	601a      	str	r2, [r3, #0]
 800cf92:	e001      	b.n	800cf98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf94:	2300      	movs	r3, #0
 800cf96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf98:	697b      	ldr	r3, [r7, #20]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3718      	adds	r7, #24
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	200010e4 	.word	0x200010e4
 800cfa8:	200010c4 	.word	0x200010c4
 800cfac:	20000bec 	.word	0x20000bec
 800cfb0:	2000107c 	.word	0x2000107c
 800cfb4:	20000be8 	.word	0x20000be8
 800cfb8:	200010d0 	.word	0x200010d0

0800cfbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cfc4:	4b06      	ldr	r3, [pc, #24]	; (800cfe0 <vTaskInternalSetTimeOutState+0x24>)
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cfcc:	4b05      	ldr	r3, [pc, #20]	; (800cfe4 <vTaskInternalSetTimeOutState+0x28>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	605a      	str	r2, [r3, #4]
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	200010d4 	.word	0x200010d4
 800cfe4:	200010c0 	.word	0x200010c0

0800cfe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b088      	sub	sp, #32
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10a      	bne.n	800d00e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	613b      	str	r3, [r7, #16]
}
 800d00a:	bf00      	nop
 800d00c:	e7fe      	b.n	800d00c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10a      	bne.n	800d02a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	60fb      	str	r3, [r7, #12]
}
 800d026:	bf00      	nop
 800d028:	e7fe      	b.n	800d028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d02a:	f000 fe83 	bl	800dd34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d02e:	4b1d      	ldr	r3, [pc, #116]	; (800d0a4 <xTaskCheckForTimeOut+0xbc>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	69ba      	ldr	r2, [r7, #24]
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d046:	d102      	bne.n	800d04e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d048:	2300      	movs	r3, #0
 800d04a:	61fb      	str	r3, [r7, #28]
 800d04c:	e023      	b.n	800d096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	4b15      	ldr	r3, [pc, #84]	; (800d0a8 <xTaskCheckForTimeOut+0xc0>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	429a      	cmp	r2, r3
 800d058:	d007      	beq.n	800d06a <xTaskCheckForTimeOut+0x82>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	69ba      	ldr	r2, [r7, #24]
 800d060:	429a      	cmp	r2, r3
 800d062:	d302      	bcc.n	800d06a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d064:	2301      	movs	r3, #1
 800d066:	61fb      	str	r3, [r7, #28]
 800d068:	e015      	b.n	800d096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	429a      	cmp	r2, r3
 800d072:	d20b      	bcs.n	800d08c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	1ad2      	subs	r2, r2, r3
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7ff ff9b 	bl	800cfbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d086:	2300      	movs	r3, #0
 800d088:	61fb      	str	r3, [r7, #28]
 800d08a:	e004      	b.n	800d096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d092:	2301      	movs	r3, #1
 800d094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d096:	f000 fe7d 	bl	800dd94 <vPortExitCritical>

	return xReturn;
 800d09a:	69fb      	ldr	r3, [r7, #28]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3720      	adds	r7, #32
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	200010c0 	.word	0x200010c0
 800d0a8:	200010d4 	.word	0x200010d4

0800d0ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d0b0:	4b03      	ldr	r3, [pc, #12]	; (800d0c0 <vTaskMissedYield+0x14>)
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	601a      	str	r2, [r3, #0]
}
 800d0b6:	bf00      	nop
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	200010d0 	.word	0x200010d0

0800d0c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d0cc:	f000 f854 	bl	800d178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0d0:	4b07      	ldr	r3, [pc, #28]	; (800d0f0 <prvIdleTask+0x2c>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d907      	bls.n	800d0e8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d0d8:	4b06      	ldr	r3, [pc, #24]	; (800d0f4 <prvIdleTask+0x30>)
 800d0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0de:	601a      	str	r2, [r3, #0]
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d0e8:	f7f3 fb6c 	bl	80007c4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d0ec:	e7ee      	b.n	800d0cc <prvIdleTask+0x8>
 800d0ee:	bf00      	nop
 800d0f0:	20000bec 	.word	0x20000bec
 800d0f4:	e000ed04 	.word	0xe000ed04

0800d0f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0fe:	2300      	movs	r3, #0
 800d100:	607b      	str	r3, [r7, #4]
 800d102:	e00c      	b.n	800d11e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	4613      	mov	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	4a12      	ldr	r2, [pc, #72]	; (800d158 <prvInitialiseTaskLists+0x60>)
 800d110:	4413      	add	r3, r2
 800d112:	4618      	mov	r0, r3
 800d114:	f7fe fca6 	bl	800ba64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	3301      	adds	r3, #1
 800d11c:	607b      	str	r3, [r7, #4]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b37      	cmp	r3, #55	; 0x37
 800d122:	d9ef      	bls.n	800d104 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d124:	480d      	ldr	r0, [pc, #52]	; (800d15c <prvInitialiseTaskLists+0x64>)
 800d126:	f7fe fc9d 	bl	800ba64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d12a:	480d      	ldr	r0, [pc, #52]	; (800d160 <prvInitialiseTaskLists+0x68>)
 800d12c:	f7fe fc9a 	bl	800ba64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d130:	480c      	ldr	r0, [pc, #48]	; (800d164 <prvInitialiseTaskLists+0x6c>)
 800d132:	f7fe fc97 	bl	800ba64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d136:	480c      	ldr	r0, [pc, #48]	; (800d168 <prvInitialiseTaskLists+0x70>)
 800d138:	f7fe fc94 	bl	800ba64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d13c:	480b      	ldr	r0, [pc, #44]	; (800d16c <prvInitialiseTaskLists+0x74>)
 800d13e:	f7fe fc91 	bl	800ba64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d142:	4b0b      	ldr	r3, [pc, #44]	; (800d170 <prvInitialiseTaskLists+0x78>)
 800d144:	4a05      	ldr	r2, [pc, #20]	; (800d15c <prvInitialiseTaskLists+0x64>)
 800d146:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d148:	4b0a      	ldr	r3, [pc, #40]	; (800d174 <prvInitialiseTaskLists+0x7c>)
 800d14a:	4a05      	ldr	r2, [pc, #20]	; (800d160 <prvInitialiseTaskLists+0x68>)
 800d14c:	601a      	str	r2, [r3, #0]
}
 800d14e:	bf00      	nop
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	20000bec 	.word	0x20000bec
 800d15c:	2000104c 	.word	0x2000104c
 800d160:	20001060 	.word	0x20001060
 800d164:	2000107c 	.word	0x2000107c
 800d168:	20001090 	.word	0x20001090
 800d16c:	200010a8 	.word	0x200010a8
 800d170:	20001074 	.word	0x20001074
 800d174:	20001078 	.word	0x20001078

0800d178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d17e:	e019      	b.n	800d1b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d180:	f000 fdd8 	bl	800dd34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d184:	4b10      	ldr	r3, [pc, #64]	; (800d1c8 <prvCheckTasksWaitingTermination+0x50>)
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3304      	adds	r3, #4
 800d190:	4618      	mov	r0, r3
 800d192:	f7fe fcf1 	bl	800bb78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d196:	4b0d      	ldr	r3, [pc, #52]	; (800d1cc <prvCheckTasksWaitingTermination+0x54>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	4a0b      	ldr	r2, [pc, #44]	; (800d1cc <prvCheckTasksWaitingTermination+0x54>)
 800d19e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1a0:	4b0b      	ldr	r3, [pc, #44]	; (800d1d0 <prvCheckTasksWaitingTermination+0x58>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	4a0a      	ldr	r2, [pc, #40]	; (800d1d0 <prvCheckTasksWaitingTermination+0x58>)
 800d1a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1aa:	f000 fdf3 	bl	800dd94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f810 	bl	800d1d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1b4:	4b06      	ldr	r3, [pc, #24]	; (800d1d0 <prvCheckTasksWaitingTermination+0x58>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1e1      	bne.n	800d180 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1bc:	bf00      	nop
 800d1be:	bf00      	nop
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20001090 	.word	0x20001090
 800d1cc:	200010bc 	.word	0x200010bc
 800d1d0:	200010a4 	.word	0x200010a4

0800d1d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	3358      	adds	r3, #88	; 0x58
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f001 fedd 	bl	800efa0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d108      	bne.n	800d202 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 ff8b 	bl	800e110 <vPortFree>
				vPortFree( pxTCB );
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 ff88 	bl	800e110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d200:	e018      	b.n	800d234 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d103      	bne.n	800d214 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 ff7f 	bl	800e110 <vPortFree>
	}
 800d212:	e00f      	b.n	800d234 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d00a      	beq.n	800d234 <prvDeleteTCB+0x60>
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	60fb      	str	r3, [r7, #12]
}
 800d230:	bf00      	nop
 800d232:	e7fe      	b.n	800d232 <prvDeleteTCB+0x5e>
	}
 800d234:	bf00      	nop
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d242:	4b0c      	ldr	r3, [pc, #48]	; (800d274 <prvResetNextTaskUnblockTime+0x38>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d104      	bne.n	800d256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d24c:	4b0a      	ldr	r3, [pc, #40]	; (800d278 <prvResetNextTaskUnblockTime+0x3c>)
 800d24e:	f04f 32ff 	mov.w	r2, #4294967295
 800d252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d254:	e008      	b.n	800d268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d256:	4b07      	ldr	r3, [pc, #28]	; (800d274 <prvResetNextTaskUnblockTime+0x38>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	4a04      	ldr	r2, [pc, #16]	; (800d278 <prvResetNextTaskUnblockTime+0x3c>)
 800d266:	6013      	str	r3, [r2, #0]
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr
 800d274:	20001074 	.word	0x20001074
 800d278:	200010dc 	.word	0x200010dc

0800d27c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d282:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <xTaskGetSchedulerState+0x34>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d102      	bne.n	800d290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d28a:	2301      	movs	r3, #1
 800d28c:	607b      	str	r3, [r7, #4]
 800d28e:	e008      	b.n	800d2a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d290:	4b08      	ldr	r3, [pc, #32]	; (800d2b4 <xTaskGetSchedulerState+0x38>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d102      	bne.n	800d29e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d298:	2302      	movs	r3, #2
 800d29a:	607b      	str	r3, [r7, #4]
 800d29c:	e001      	b.n	800d2a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2a2:	687b      	ldr	r3, [r7, #4]
	}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr
 800d2b0:	200010c8 	.word	0x200010c8
 800d2b4:	200010e4 	.word	0x200010e4

0800d2b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d056      	beq.n	800d37c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2ce:	4b2e      	ldr	r3, [pc, #184]	; (800d388 <xTaskPriorityDisinherit+0xd0>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d00a      	beq.n	800d2ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	60fb      	str	r3, [r7, #12]
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10a      	bne.n	800d30c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	60bb      	str	r3, [r7, #8]
}
 800d308:	bf00      	nop
 800d30a:	e7fe      	b.n	800d30a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d310:	1e5a      	subs	r2, r3, #1
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d31e:	429a      	cmp	r2, r3
 800d320:	d02c      	beq.n	800d37c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d326:	2b00      	cmp	r3, #0
 800d328:	d128      	bne.n	800d37c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	3304      	adds	r3, #4
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fe fc22 	bl	800bb78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d340:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d34c:	4b0f      	ldr	r3, [pc, #60]	; (800d38c <xTaskPriorityDisinherit+0xd4>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	429a      	cmp	r2, r3
 800d352:	d903      	bls.n	800d35c <xTaskPriorityDisinherit+0xa4>
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d358:	4a0c      	ldr	r2, [pc, #48]	; (800d38c <xTaskPriorityDisinherit+0xd4>)
 800d35a:	6013      	str	r3, [r2, #0]
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d360:	4613      	mov	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4413      	add	r3, r2
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	4a09      	ldr	r2, [pc, #36]	; (800d390 <xTaskPriorityDisinherit+0xd8>)
 800d36a:	441a      	add	r2, r3
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	3304      	adds	r3, #4
 800d370:	4619      	mov	r1, r3
 800d372:	4610      	mov	r0, r2
 800d374:	f7fe fba3 	bl	800babe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d378:	2301      	movs	r3, #1
 800d37a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d37c:	697b      	ldr	r3, [r7, #20]
	}
 800d37e:	4618      	mov	r0, r3
 800d380:	3718      	adds	r7, #24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20000be8 	.word	0x20000be8
 800d38c:	200010c4 	.word	0x200010c4
 800d390:	20000bec 	.word	0x20000bec

0800d394 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d39e:	4b21      	ldr	r3, [pc, #132]	; (800d424 <prvAddCurrentTaskToDelayedList+0x90>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3a4:	4b20      	ldr	r3, [pc, #128]	; (800d428 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe fbe4 	bl	800bb78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b6:	d10a      	bne.n	800d3ce <prvAddCurrentTaskToDelayedList+0x3a>
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d007      	beq.n	800d3ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3be:	4b1a      	ldr	r3, [pc, #104]	; (800d428 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	4819      	ldr	r0, [pc, #100]	; (800d42c <prvAddCurrentTaskToDelayedList+0x98>)
 800d3c8:	f7fe fb79 	bl	800babe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3cc:	e026      	b.n	800d41c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3d6:	4b14      	ldr	r3, [pc, #80]	; (800d428 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68ba      	ldr	r2, [r7, #8]
 800d3dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d209      	bcs.n	800d3fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3e6:	4b12      	ldr	r3, [pc, #72]	; (800d430 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	4b0f      	ldr	r3, [pc, #60]	; (800d428 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	f7fe fb87 	bl	800bb06 <vListInsert>
}
 800d3f8:	e010      	b.n	800d41c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3fa:	4b0e      	ldr	r3, [pc, #56]	; (800d434 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	4b0a      	ldr	r3, [pc, #40]	; (800d428 <prvAddCurrentTaskToDelayedList+0x94>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	3304      	adds	r3, #4
 800d404:	4619      	mov	r1, r3
 800d406:	4610      	mov	r0, r2
 800d408:	f7fe fb7d 	bl	800bb06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d40c:	4b0a      	ldr	r3, [pc, #40]	; (800d438 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	68ba      	ldr	r2, [r7, #8]
 800d412:	429a      	cmp	r2, r3
 800d414:	d202      	bcs.n	800d41c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d416:	4a08      	ldr	r2, [pc, #32]	; (800d438 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	6013      	str	r3, [r2, #0]
}
 800d41c:	bf00      	nop
 800d41e:	3710      	adds	r7, #16
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	200010c0 	.word	0x200010c0
 800d428:	20000be8 	.word	0x20000be8
 800d42c:	200010a8 	.word	0x200010a8
 800d430:	20001078 	.word	0x20001078
 800d434:	20001074 	.word	0x20001074
 800d438:	200010dc 	.word	0x200010dc

0800d43c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b08a      	sub	sp, #40	; 0x28
 800d440:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d442:	2300      	movs	r3, #0
 800d444:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d446:	f000 fb07 	bl	800da58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d44a:	4b1c      	ldr	r3, [pc, #112]	; (800d4bc <xTimerCreateTimerTask+0x80>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d021      	beq.n	800d496 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d452:	2300      	movs	r3, #0
 800d454:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d456:	2300      	movs	r3, #0
 800d458:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d45a:	1d3a      	adds	r2, r7, #4
 800d45c:	f107 0108 	add.w	r1, r7, #8
 800d460:	f107 030c 	add.w	r3, r7, #12
 800d464:	4618      	mov	r0, r3
 800d466:	f7fe fae3 	bl	800ba30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d46a:	6879      	ldr	r1, [r7, #4]
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	68fa      	ldr	r2, [r7, #12]
 800d470:	9202      	str	r2, [sp, #8]
 800d472:	9301      	str	r3, [sp, #4]
 800d474:	2302      	movs	r3, #2
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	2300      	movs	r3, #0
 800d47a:	460a      	mov	r2, r1
 800d47c:	4910      	ldr	r1, [pc, #64]	; (800d4c0 <xTimerCreateTimerTask+0x84>)
 800d47e:	4811      	ldr	r0, [pc, #68]	; (800d4c4 <xTimerCreateTimerTask+0x88>)
 800d480:	f7ff f890 	bl	800c5a4 <xTaskCreateStatic>
 800d484:	4603      	mov	r3, r0
 800d486:	4a10      	ldr	r2, [pc, #64]	; (800d4c8 <xTimerCreateTimerTask+0x8c>)
 800d488:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d48a:	4b0f      	ldr	r3, [pc, #60]	; (800d4c8 <xTimerCreateTimerTask+0x8c>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d492:	2301      	movs	r3, #1
 800d494:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10a      	bne.n	800d4b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	613b      	str	r3, [r7, #16]
}
 800d4ae:	bf00      	nop
 800d4b0:	e7fe      	b.n	800d4b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d4b2:	697b      	ldr	r3, [r7, #20]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3718      	adds	r7, #24
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	20001120 	.word	0x20001120
 800d4c0:	0800fa80 	.word	0x0800fa80
 800d4c4:	0800d601 	.word	0x0800d601
 800d4c8:	20001124 	.word	0x20001124

0800d4cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b08a      	sub	sp, #40	; 0x28
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
 800d4d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10a      	bne.n	800d4fa <xTimerGenericCommand+0x2e>
	__asm volatile
 800d4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e8:	f383 8811 	msr	BASEPRI, r3
 800d4ec:	f3bf 8f6f 	isb	sy
 800d4f0:	f3bf 8f4f 	dsb	sy
 800d4f4:	623b      	str	r3, [r7, #32]
}
 800d4f6:	bf00      	nop
 800d4f8:	e7fe      	b.n	800d4f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d4fa:	4b1a      	ldr	r3, [pc, #104]	; (800d564 <xTimerGenericCommand+0x98>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d02a      	beq.n	800d558 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	2b05      	cmp	r3, #5
 800d512:	dc18      	bgt.n	800d546 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d514:	f7ff feb2 	bl	800d27c <xTaskGetSchedulerState>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d109      	bne.n	800d532 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d51e:	4b11      	ldr	r3, [pc, #68]	; (800d564 <xTimerGenericCommand+0x98>)
 800d520:	6818      	ldr	r0, [r3, #0]
 800d522:	f107 0110 	add.w	r1, r7, #16
 800d526:	2300      	movs	r3, #0
 800d528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d52a:	f7fe fc53 	bl	800bdd4 <xQueueGenericSend>
 800d52e:	6278      	str	r0, [r7, #36]	; 0x24
 800d530:	e012      	b.n	800d558 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d532:	4b0c      	ldr	r3, [pc, #48]	; (800d564 <xTimerGenericCommand+0x98>)
 800d534:	6818      	ldr	r0, [r3, #0]
 800d536:	f107 0110 	add.w	r1, r7, #16
 800d53a:	2300      	movs	r3, #0
 800d53c:	2200      	movs	r2, #0
 800d53e:	f7fe fc49 	bl	800bdd4 <xQueueGenericSend>
 800d542:	6278      	str	r0, [r7, #36]	; 0x24
 800d544:	e008      	b.n	800d558 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d546:	4b07      	ldr	r3, [pc, #28]	; (800d564 <xTimerGenericCommand+0x98>)
 800d548:	6818      	ldr	r0, [r3, #0]
 800d54a:	f107 0110 	add.w	r1, r7, #16
 800d54e:	2300      	movs	r3, #0
 800d550:	683a      	ldr	r2, [r7, #0]
 800d552:	f7fe fd3d 	bl	800bfd0 <xQueueGenericSendFromISR>
 800d556:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3728      	adds	r7, #40	; 0x28
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	20001120 	.word	0x20001120

0800d568 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b088      	sub	sp, #32
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d572:	4b22      	ldr	r3, [pc, #136]	; (800d5fc <prvProcessExpiredTimer+0x94>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	3304      	adds	r3, #4
 800d580:	4618      	mov	r0, r3
 800d582:	f7fe faf9 	bl	800bb78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d58c:	f003 0304 	and.w	r3, r3, #4
 800d590:	2b00      	cmp	r3, #0
 800d592:	d022      	beq.n	800d5da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	699a      	ldr	r2, [r3, #24]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	18d1      	adds	r1, r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	6978      	ldr	r0, [r7, #20]
 800d5a2:	f000 f8d1 	bl	800d748 <prvInsertTimerInActiveList>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d01f      	beq.n	800d5ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	6978      	ldr	r0, [r7, #20]
 800d5b8:	f7ff ff88 	bl	800d4cc <xTimerGenericCommand>
 800d5bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d113      	bne.n	800d5ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	60fb      	str	r3, [r7, #12]
}
 800d5d6:	bf00      	nop
 800d5d8:	e7fe      	b.n	800d5d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5e0:	f023 0301 	bic.w	r3, r3, #1
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	6a1b      	ldr	r3, [r3, #32]
 800d5f0:	6978      	ldr	r0, [r7, #20]
 800d5f2:	4798      	blx	r3
}
 800d5f4:	bf00      	nop
 800d5f6:	3718      	adds	r7, #24
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	20001118 	.word	0x20001118

0800d600 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d608:	f107 0308 	add.w	r3, r7, #8
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 f857 	bl	800d6c0 <prvGetNextExpireTime>
 800d612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	4619      	mov	r1, r3
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f000 f803 	bl	800d624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d61e:	f000 f8d5 	bl	800d7cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d622:	e7f1      	b.n	800d608 <prvTimerTask+0x8>

0800d624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d62e:	f7ff fa1b 	bl	800ca68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d632:	f107 0308 	add.w	r3, r7, #8
 800d636:	4618      	mov	r0, r3
 800d638:	f000 f866 	bl	800d708 <prvSampleTimeNow>
 800d63c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d130      	bne.n	800d6a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10a      	bne.n	800d660 <prvProcessTimerOrBlockTask+0x3c>
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d806      	bhi.n	800d660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d652:	f7ff fa17 	bl	800ca84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d656:	68f9      	ldr	r1, [r7, #12]
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f7ff ff85 	bl	800d568 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d65e:	e024      	b.n	800d6aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d008      	beq.n	800d678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d666:	4b13      	ldr	r3, [pc, #76]	; (800d6b4 <prvProcessTimerOrBlockTask+0x90>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d101      	bne.n	800d674 <prvProcessTimerOrBlockTask+0x50>
 800d670:	2301      	movs	r3, #1
 800d672:	e000      	b.n	800d676 <prvProcessTimerOrBlockTask+0x52>
 800d674:	2300      	movs	r3, #0
 800d676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d678:	4b0f      	ldr	r3, [pc, #60]	; (800d6b8 <prvProcessTimerOrBlockTask+0x94>)
 800d67a:	6818      	ldr	r0, [r3, #0]
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	683a      	ldr	r2, [r7, #0]
 800d684:	4619      	mov	r1, r3
 800d686:	f7fe ff59 	bl	800c53c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d68a:	f7ff f9fb 	bl	800ca84 <xTaskResumeAll>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10a      	bne.n	800d6aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d694:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <prvProcessTimerOrBlockTask+0x98>)
 800d696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69a:	601a      	str	r2, [r3, #0]
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	f3bf 8f6f 	isb	sy
}
 800d6a4:	e001      	b.n	800d6aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d6a6:	f7ff f9ed 	bl	800ca84 <xTaskResumeAll>
}
 800d6aa:	bf00      	nop
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	2000111c 	.word	0x2000111c
 800d6b8:	20001120 	.word	0x20001120
 800d6bc:	e000ed04 	.word	0xe000ed04

0800d6c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d6c8:	4b0e      	ldr	r3, [pc, #56]	; (800d704 <prvGetNextExpireTime+0x44>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d101      	bne.n	800d6d6 <prvGetNextExpireTime+0x16>
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	e000      	b.n	800d6d8 <prvGetNextExpireTime+0x18>
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d105      	bne.n	800d6f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6e4:	4b07      	ldr	r3, [pc, #28]	; (800d704 <prvGetNextExpireTime+0x44>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	60fb      	str	r3, [r7, #12]
 800d6ee:	e001      	b.n	800d6f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3714      	adds	r7, #20
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop
 800d704:	20001118 	.word	0x20001118

0800d708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d710:	f7ff fa56 	bl	800cbc0 <xTaskGetTickCount>
 800d714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d716:	4b0b      	ldr	r3, [pc, #44]	; (800d744 <prvSampleTimeNow+0x3c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68fa      	ldr	r2, [r7, #12]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d205      	bcs.n	800d72c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d720:	f000 f936 	bl	800d990 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	601a      	str	r2, [r3, #0]
 800d72a:	e002      	b.n	800d732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d732:	4a04      	ldr	r2, [pc, #16]	; (800d744 <prvSampleTimeNow+0x3c>)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d738:	68fb      	ldr	r3, [r7, #12]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	20001128 	.word	0x20001128

0800d748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b086      	sub	sp, #24
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d756:	2300      	movs	r3, #0
 800d758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	68ba      	ldr	r2, [r7, #8]
 800d75e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d812      	bhi.n	800d794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	1ad2      	subs	r2, r2, r3
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d302      	bcc.n	800d782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d77c:	2301      	movs	r3, #1
 800d77e:	617b      	str	r3, [r7, #20]
 800d780:	e01b      	b.n	800d7ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d782:	4b10      	ldr	r3, [pc, #64]	; (800d7c4 <prvInsertTimerInActiveList+0x7c>)
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3304      	adds	r3, #4
 800d78a:	4619      	mov	r1, r3
 800d78c:	4610      	mov	r0, r2
 800d78e:	f7fe f9ba 	bl	800bb06 <vListInsert>
 800d792:	e012      	b.n	800d7ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d206      	bcs.n	800d7aa <prvInsertTimerInActiveList+0x62>
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d302      	bcc.n	800d7aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	617b      	str	r3, [r7, #20]
 800d7a8:	e007      	b.n	800d7ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7aa:	4b07      	ldr	r3, [pc, #28]	; (800d7c8 <prvInsertTimerInActiveList+0x80>)
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	3304      	adds	r3, #4
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	f7fe f9a6 	bl	800bb06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d7ba:	697b      	ldr	r3, [r7, #20]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3718      	adds	r7, #24
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	2000111c 	.word	0x2000111c
 800d7c8:	20001118 	.word	0x20001118

0800d7cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b08e      	sub	sp, #56	; 0x38
 800d7d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7d2:	e0ca      	b.n	800d96a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	da18      	bge.n	800d80c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d7da:	1d3b      	adds	r3, r7, #4
 800d7dc:	3304      	adds	r3, #4
 800d7de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d10a      	bne.n	800d7fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	61fb      	str	r3, [r7, #28]
}
 800d7f8:	bf00      	nop
 800d7fa:	e7fe      	b.n	800d7fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d802:	6850      	ldr	r0, [r2, #4]
 800d804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d806:	6892      	ldr	r2, [r2, #8]
 800d808:	4611      	mov	r1, r2
 800d80a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f2c0 80aa 	blt.w	800d968 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	695b      	ldr	r3, [r3, #20]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d004      	beq.n	800d82a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d822:	3304      	adds	r3, #4
 800d824:	4618      	mov	r0, r3
 800d826:	f7fe f9a7 	bl	800bb78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d82a:	463b      	mov	r3, r7
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7ff ff6b 	bl	800d708 <prvSampleTimeNow>
 800d832:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b09      	cmp	r3, #9
 800d838:	f200 8097 	bhi.w	800d96a <prvProcessReceivedCommands+0x19e>
 800d83c:	a201      	add	r2, pc, #4	; (adr r2, 800d844 <prvProcessReceivedCommands+0x78>)
 800d83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d842:	bf00      	nop
 800d844:	0800d86d 	.word	0x0800d86d
 800d848:	0800d86d 	.word	0x0800d86d
 800d84c:	0800d86d 	.word	0x0800d86d
 800d850:	0800d8e1 	.word	0x0800d8e1
 800d854:	0800d8f5 	.word	0x0800d8f5
 800d858:	0800d93f 	.word	0x0800d93f
 800d85c:	0800d86d 	.word	0x0800d86d
 800d860:	0800d86d 	.word	0x0800d86d
 800d864:	0800d8e1 	.word	0x0800d8e1
 800d868:	0800d8f5 	.word	0x0800d8f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d872:	f043 0301 	orr.w	r3, r3, #1
 800d876:	b2da      	uxtb	r2, r3
 800d878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d87e:	68ba      	ldr	r2, [r7, #8]
 800d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d882:	699b      	ldr	r3, [r3, #24]
 800d884:	18d1      	adds	r1, r2, r3
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d88c:	f7ff ff5c 	bl	800d748 <prvInsertTimerInActiveList>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d069      	beq.n	800d96a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d898:	6a1b      	ldr	r3, [r3, #32]
 800d89a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d89c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8a4:	f003 0304 	and.w	r3, r3, #4
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d05e      	beq.n	800d96a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d8ac:	68ba      	ldr	r2, [r7, #8]
 800d8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b0:	699b      	ldr	r3, [r3, #24]
 800d8b2:	441a      	add	r2, r3
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8be:	f7ff fe05 	bl	800d4cc <xTimerGenericCommand>
 800d8c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d8c4:	6a3b      	ldr	r3, [r7, #32]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d14f      	bne.n	800d96a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ce:	f383 8811 	msr	BASEPRI, r3
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	f3bf 8f4f 	dsb	sy
 800d8da:	61bb      	str	r3, [r7, #24]
}
 800d8dc:	bf00      	nop
 800d8de:	e7fe      	b.n	800d8de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8e6:	f023 0301 	bic.w	r3, r3, #1
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d8f2:	e03a      	b.n	800d96a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8fa:	f043 0301 	orr.w	r3, r3, #1
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	699b      	ldr	r3, [r3, #24]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10a      	bne.n	800d92a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	617b      	str	r3, [r7, #20]
}
 800d926:	bf00      	nop
 800d928:	e7fe      	b.n	800d928 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92c:	699a      	ldr	r2, [r3, #24]
 800d92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d930:	18d1      	adds	r1, r2, r3
 800d932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d938:	f7ff ff06 	bl	800d748 <prvInsertTimerInActiveList>
					break;
 800d93c:	e015      	b.n	800d96a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d944:	f003 0302 	and.w	r3, r3, #2
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d103      	bne.n	800d954 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d94c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d94e:	f000 fbdf 	bl	800e110 <vPortFree>
 800d952:	e00a      	b.n	800d96a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d95a:	f023 0301 	bic.w	r3, r3, #1
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d966:	e000      	b.n	800d96a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d968:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d96a:	4b08      	ldr	r3, [pc, #32]	; (800d98c <prvProcessReceivedCommands+0x1c0>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	1d39      	adds	r1, r7, #4
 800d970:	2200      	movs	r2, #0
 800d972:	4618      	mov	r0, r3
 800d974:	f7fe fbc8 	bl	800c108 <xQueueReceive>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f47f af2a 	bne.w	800d7d4 <prvProcessReceivedCommands+0x8>
	}
}
 800d980:	bf00      	nop
 800d982:	bf00      	nop
 800d984:	3730      	adds	r7, #48	; 0x30
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	20001120 	.word	0x20001120

0800d990 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b088      	sub	sp, #32
 800d994:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d996:	e048      	b.n	800da2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d998:	4b2d      	ldr	r3, [pc, #180]	; (800da50 <prvSwitchTimerLists+0xc0>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9a2:	4b2b      	ldr	r3, [pc, #172]	; (800da50 <prvSwitchTimerLists+0xc0>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	3304      	adds	r3, #4
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fe f8e1 	bl	800bb78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6a1b      	ldr	r3, [r3, #32]
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9c4:	f003 0304 	and.w	r3, r3, #4
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d02e      	beq.n	800da2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	693a      	ldr	r2, [r7, #16]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d9d6:	68ba      	ldr	r2, [r7, #8]
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d90e      	bls.n	800d9fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	68ba      	ldr	r2, [r7, #8]
 800d9e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	68fa      	ldr	r2, [r7, #12]
 800d9e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9ea:	4b19      	ldr	r3, [pc, #100]	; (800da50 <prvSwitchTimerLists+0xc0>)
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	f7fe f886 	bl	800bb06 <vListInsert>
 800d9fa:	e016      	b.n	800da2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	9300      	str	r3, [sp, #0]
 800da00:	2300      	movs	r3, #0
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	2100      	movs	r1, #0
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f7ff fd60 	bl	800d4cc <xTimerGenericCommand>
 800da0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d10a      	bne.n	800da2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	603b      	str	r3, [r7, #0]
}
 800da26:	bf00      	nop
 800da28:	e7fe      	b.n	800da28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da2a:	4b09      	ldr	r3, [pc, #36]	; (800da50 <prvSwitchTimerLists+0xc0>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1b1      	bne.n	800d998 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800da34:	4b06      	ldr	r3, [pc, #24]	; (800da50 <prvSwitchTimerLists+0xc0>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800da3a:	4b06      	ldr	r3, [pc, #24]	; (800da54 <prvSwitchTimerLists+0xc4>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a04      	ldr	r2, [pc, #16]	; (800da50 <prvSwitchTimerLists+0xc0>)
 800da40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800da42:	4a04      	ldr	r2, [pc, #16]	; (800da54 <prvSwitchTimerLists+0xc4>)
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	6013      	str	r3, [r2, #0]
}
 800da48:	bf00      	nop
 800da4a:	3718      	adds	r7, #24
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	20001118 	.word	0x20001118
 800da54:	2000111c 	.word	0x2000111c

0800da58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da5e:	f000 f969 	bl	800dd34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da62:	4b15      	ldr	r3, [pc, #84]	; (800dab8 <prvCheckForValidListAndQueue+0x60>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d120      	bne.n	800daac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800da6a:	4814      	ldr	r0, [pc, #80]	; (800dabc <prvCheckForValidListAndQueue+0x64>)
 800da6c:	f7fd fffa 	bl	800ba64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da70:	4813      	ldr	r0, [pc, #76]	; (800dac0 <prvCheckForValidListAndQueue+0x68>)
 800da72:	f7fd fff7 	bl	800ba64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da76:	4b13      	ldr	r3, [pc, #76]	; (800dac4 <prvCheckForValidListAndQueue+0x6c>)
 800da78:	4a10      	ldr	r2, [pc, #64]	; (800dabc <prvCheckForValidListAndQueue+0x64>)
 800da7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da7c:	4b12      	ldr	r3, [pc, #72]	; (800dac8 <prvCheckForValidListAndQueue+0x70>)
 800da7e:	4a10      	ldr	r2, [pc, #64]	; (800dac0 <prvCheckForValidListAndQueue+0x68>)
 800da80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da82:	2300      	movs	r3, #0
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	4b11      	ldr	r3, [pc, #68]	; (800dacc <prvCheckForValidListAndQueue+0x74>)
 800da88:	4a11      	ldr	r2, [pc, #68]	; (800dad0 <prvCheckForValidListAndQueue+0x78>)
 800da8a:	2110      	movs	r1, #16
 800da8c:	200a      	movs	r0, #10
 800da8e:	f7fe f905 	bl	800bc9c <xQueueGenericCreateStatic>
 800da92:	4603      	mov	r3, r0
 800da94:	4a08      	ldr	r2, [pc, #32]	; (800dab8 <prvCheckForValidListAndQueue+0x60>)
 800da96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800da98:	4b07      	ldr	r3, [pc, #28]	; (800dab8 <prvCheckForValidListAndQueue+0x60>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d005      	beq.n	800daac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800daa0:	4b05      	ldr	r3, [pc, #20]	; (800dab8 <prvCheckForValidListAndQueue+0x60>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	490b      	ldr	r1, [pc, #44]	; (800dad4 <prvCheckForValidListAndQueue+0x7c>)
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fe fd1e 	bl	800c4e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800daac:	f000 f972 	bl	800dd94 <vPortExitCritical>
}
 800dab0:	bf00      	nop
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20001120 	.word	0x20001120
 800dabc:	200010f0 	.word	0x200010f0
 800dac0:	20001104 	.word	0x20001104
 800dac4:	20001118 	.word	0x20001118
 800dac8:	2000111c 	.word	0x2000111c
 800dacc:	200011cc 	.word	0x200011cc
 800dad0:	2000112c 	.word	0x2000112c
 800dad4:	0800fa88 	.word	0x0800fa88

0800dad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	60f8      	str	r0, [r7, #12]
 800dae0:	60b9      	str	r1, [r7, #8]
 800dae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	3b04      	subs	r3, #4
 800dae8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800daf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	3b04      	subs	r3, #4
 800daf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	f023 0201 	bic.w	r2, r3, #1
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	3b04      	subs	r3, #4
 800db06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db08:	4a0c      	ldr	r2, [pc, #48]	; (800db3c <pxPortInitialiseStack+0x64>)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	3b14      	subs	r3, #20
 800db12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3b04      	subs	r3, #4
 800db1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f06f 0202 	mvn.w	r2, #2
 800db26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	3b20      	subs	r3, #32
 800db2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db2e:	68fb      	ldr	r3, [r7, #12]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	0800db41 	.word	0x0800db41

0800db40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800db46:	2300      	movs	r3, #0
 800db48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800db4a:	4b12      	ldr	r3, [pc, #72]	; (800db94 <prvTaskExitError+0x54>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db52:	d00a      	beq.n	800db6a <prvTaskExitError+0x2a>
	__asm volatile
 800db54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db58:	f383 8811 	msr	BASEPRI, r3
 800db5c:	f3bf 8f6f 	isb	sy
 800db60:	f3bf 8f4f 	dsb	sy
 800db64:	60fb      	str	r3, [r7, #12]
}
 800db66:	bf00      	nop
 800db68:	e7fe      	b.n	800db68 <prvTaskExitError+0x28>
	__asm volatile
 800db6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6e:	f383 8811 	msr	BASEPRI, r3
 800db72:	f3bf 8f6f 	isb	sy
 800db76:	f3bf 8f4f 	dsb	sy
 800db7a:	60bb      	str	r3, [r7, #8]
}
 800db7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db7e:	bf00      	nop
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d0fc      	beq.n	800db80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db86:	bf00      	nop
 800db88:	bf00      	nop
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	2000010c 	.word	0x2000010c
	...

0800dba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dba0:	4b07      	ldr	r3, [pc, #28]	; (800dbc0 <pxCurrentTCBConst2>)
 800dba2:	6819      	ldr	r1, [r3, #0]
 800dba4:	6808      	ldr	r0, [r1, #0]
 800dba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbaa:	f380 8809 	msr	PSP, r0
 800dbae:	f3bf 8f6f 	isb	sy
 800dbb2:	f04f 0000 	mov.w	r0, #0
 800dbb6:	f380 8811 	msr	BASEPRI, r0
 800dbba:	4770      	bx	lr
 800dbbc:	f3af 8000 	nop.w

0800dbc0 <pxCurrentTCBConst2>:
 800dbc0:	20000be8 	.word	0x20000be8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dbc4:	bf00      	nop
 800dbc6:	bf00      	nop

0800dbc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dbc8:	4808      	ldr	r0, [pc, #32]	; (800dbec <prvPortStartFirstTask+0x24>)
 800dbca:	6800      	ldr	r0, [r0, #0]
 800dbcc:	6800      	ldr	r0, [r0, #0]
 800dbce:	f380 8808 	msr	MSP, r0
 800dbd2:	f04f 0000 	mov.w	r0, #0
 800dbd6:	f380 8814 	msr	CONTROL, r0
 800dbda:	b662      	cpsie	i
 800dbdc:	b661      	cpsie	f
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	f3bf 8f6f 	isb	sy
 800dbe6:	df00      	svc	0
 800dbe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dbea:	bf00      	nop
 800dbec:	e000ed08 	.word	0xe000ed08

0800dbf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dbf6:	4b46      	ldr	r3, [pc, #280]	; (800dd10 <xPortStartScheduler+0x120>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a46      	ldr	r2, [pc, #280]	; (800dd14 <xPortStartScheduler+0x124>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d10a      	bne.n	800dc16 <xPortStartScheduler+0x26>
	__asm volatile
 800dc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc04:	f383 8811 	msr	BASEPRI, r3
 800dc08:	f3bf 8f6f 	isb	sy
 800dc0c:	f3bf 8f4f 	dsb	sy
 800dc10:	613b      	str	r3, [r7, #16]
}
 800dc12:	bf00      	nop
 800dc14:	e7fe      	b.n	800dc14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dc16:	4b3e      	ldr	r3, [pc, #248]	; (800dd10 <xPortStartScheduler+0x120>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a3f      	ldr	r2, [pc, #252]	; (800dd18 <xPortStartScheduler+0x128>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d10a      	bne.n	800dc36 <xPortStartScheduler+0x46>
	__asm volatile
 800dc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	60fb      	str	r3, [r7, #12]
}
 800dc32:	bf00      	nop
 800dc34:	e7fe      	b.n	800dc34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc36:	4b39      	ldr	r3, [pc, #228]	; (800dd1c <xPortStartScheduler+0x12c>)
 800dc38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	22ff      	movs	r2, #255	; 0xff
 800dc46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc50:	78fb      	ldrb	r3, [r7, #3]
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc58:	b2da      	uxtb	r2, r3
 800dc5a:	4b31      	ldr	r3, [pc, #196]	; (800dd20 <xPortStartScheduler+0x130>)
 800dc5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc5e:	4b31      	ldr	r3, [pc, #196]	; (800dd24 <xPortStartScheduler+0x134>)
 800dc60:	2207      	movs	r2, #7
 800dc62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc64:	e009      	b.n	800dc7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dc66:	4b2f      	ldr	r3, [pc, #188]	; (800dd24 <xPortStartScheduler+0x134>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	4a2d      	ldr	r2, [pc, #180]	; (800dd24 <xPortStartScheduler+0x134>)
 800dc6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc70:	78fb      	ldrb	r3, [r7, #3]
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc7a:	78fb      	ldrb	r3, [r7, #3]
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc82:	2b80      	cmp	r3, #128	; 0x80
 800dc84:	d0ef      	beq.n	800dc66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc86:	4b27      	ldr	r3, [pc, #156]	; (800dd24 <xPortStartScheduler+0x134>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f1c3 0307 	rsb	r3, r3, #7
 800dc8e:	2b04      	cmp	r3, #4
 800dc90:	d00a      	beq.n	800dca8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc96:	f383 8811 	msr	BASEPRI, r3
 800dc9a:	f3bf 8f6f 	isb	sy
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	60bb      	str	r3, [r7, #8]
}
 800dca4:	bf00      	nop
 800dca6:	e7fe      	b.n	800dca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dca8:	4b1e      	ldr	r3, [pc, #120]	; (800dd24 <xPortStartScheduler+0x134>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	021b      	lsls	r3, r3, #8
 800dcae:	4a1d      	ldr	r2, [pc, #116]	; (800dd24 <xPortStartScheduler+0x134>)
 800dcb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dcb2:	4b1c      	ldr	r3, [pc, #112]	; (800dd24 <xPortStartScheduler+0x134>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dcba:	4a1a      	ldr	r2, [pc, #104]	; (800dd24 <xPortStartScheduler+0x134>)
 800dcbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dcc6:	4b18      	ldr	r3, [pc, #96]	; (800dd28 <xPortStartScheduler+0x138>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a17      	ldr	r2, [pc, #92]	; (800dd28 <xPortStartScheduler+0x138>)
 800dccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dcd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dcd2:	4b15      	ldr	r3, [pc, #84]	; (800dd28 <xPortStartScheduler+0x138>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a14      	ldr	r2, [pc, #80]	; (800dd28 <xPortStartScheduler+0x138>)
 800dcd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dcdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dcde:	f000 f8dd 	bl	800de9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dce2:	4b12      	ldr	r3, [pc, #72]	; (800dd2c <xPortStartScheduler+0x13c>)
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dce8:	f000 f8fc 	bl	800dee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dcec:	4b10      	ldr	r3, [pc, #64]	; (800dd30 <xPortStartScheduler+0x140>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a0f      	ldr	r2, [pc, #60]	; (800dd30 <xPortStartScheduler+0x140>)
 800dcf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dcf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dcf8:	f7ff ff66 	bl	800dbc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dcfc:	f7ff f82a 	bl	800cd54 <vTaskSwitchContext>
	prvTaskExitError();
 800dd00:	f7ff ff1e 	bl	800db40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3718      	adds	r7, #24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	e000ed00 	.word	0xe000ed00
 800dd14:	410fc271 	.word	0x410fc271
 800dd18:	410fc270 	.word	0x410fc270
 800dd1c:	e000e400 	.word	0xe000e400
 800dd20:	2000121c 	.word	0x2000121c
 800dd24:	20001220 	.word	0x20001220
 800dd28:	e000ed20 	.word	0xe000ed20
 800dd2c:	2000010c 	.word	0x2000010c
 800dd30:	e000ef34 	.word	0xe000ef34

0800dd34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd34:	b480      	push	{r7}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
	__asm volatile
 800dd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3e:	f383 8811 	msr	BASEPRI, r3
 800dd42:	f3bf 8f6f 	isb	sy
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	607b      	str	r3, [r7, #4]
}
 800dd4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd4e:	4b0f      	ldr	r3, [pc, #60]	; (800dd8c <vPortEnterCritical+0x58>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	3301      	adds	r3, #1
 800dd54:	4a0d      	ldr	r2, [pc, #52]	; (800dd8c <vPortEnterCritical+0x58>)
 800dd56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd58:	4b0c      	ldr	r3, [pc, #48]	; (800dd8c <vPortEnterCritical+0x58>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d10f      	bne.n	800dd80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd60:	4b0b      	ldr	r3, [pc, #44]	; (800dd90 <vPortEnterCritical+0x5c>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00a      	beq.n	800dd80 <vPortEnterCritical+0x4c>
	__asm volatile
 800dd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6e:	f383 8811 	msr	BASEPRI, r3
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	603b      	str	r3, [r7, #0]
}
 800dd7c:	bf00      	nop
 800dd7e:	e7fe      	b.n	800dd7e <vPortEnterCritical+0x4a>
	}
}
 800dd80:	bf00      	nop
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	2000010c 	.word	0x2000010c
 800dd90:	e000ed04 	.word	0xe000ed04

0800dd94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd9a:	4b12      	ldr	r3, [pc, #72]	; (800dde4 <vPortExitCritical+0x50>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d10a      	bne.n	800ddb8 <vPortExitCritical+0x24>
	__asm volatile
 800dda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda6:	f383 8811 	msr	BASEPRI, r3
 800ddaa:	f3bf 8f6f 	isb	sy
 800ddae:	f3bf 8f4f 	dsb	sy
 800ddb2:	607b      	str	r3, [r7, #4]
}
 800ddb4:	bf00      	nop
 800ddb6:	e7fe      	b.n	800ddb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ddb8:	4b0a      	ldr	r3, [pc, #40]	; (800dde4 <vPortExitCritical+0x50>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	4a09      	ldr	r2, [pc, #36]	; (800dde4 <vPortExitCritical+0x50>)
 800ddc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ddc2:	4b08      	ldr	r3, [pc, #32]	; (800dde4 <vPortExitCritical+0x50>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d105      	bne.n	800ddd6 <vPortExitCritical+0x42>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	f383 8811 	msr	BASEPRI, r3
}
 800ddd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ddd6:	bf00      	nop
 800ddd8:	370c      	adds	r7, #12
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	2000010c 	.word	0x2000010c
	...

0800ddf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ddf0:	f3ef 8009 	mrs	r0, PSP
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	4b15      	ldr	r3, [pc, #84]	; (800de50 <pxCurrentTCBConst>)
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	f01e 0f10 	tst.w	lr, #16
 800de00:	bf08      	it	eq
 800de02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de0a:	6010      	str	r0, [r2, #0]
 800de0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de14:	f380 8811 	msr	BASEPRI, r0
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	f3bf 8f6f 	isb	sy
 800de20:	f7fe ff98 	bl	800cd54 <vTaskSwitchContext>
 800de24:	f04f 0000 	mov.w	r0, #0
 800de28:	f380 8811 	msr	BASEPRI, r0
 800de2c:	bc09      	pop	{r0, r3}
 800de2e:	6819      	ldr	r1, [r3, #0]
 800de30:	6808      	ldr	r0, [r1, #0]
 800de32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de36:	f01e 0f10 	tst.w	lr, #16
 800de3a:	bf08      	it	eq
 800de3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de40:	f380 8809 	msr	PSP, r0
 800de44:	f3bf 8f6f 	isb	sy
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	f3af 8000 	nop.w

0800de50 <pxCurrentTCBConst>:
 800de50:	20000be8 	.word	0x20000be8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de54:	bf00      	nop
 800de56:	bf00      	nop

0800de58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
	__asm volatile
 800de5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de62:	f383 8811 	msr	BASEPRI, r3
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	607b      	str	r3, [r7, #4]
}
 800de70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de72:	f7fe feb5 	bl	800cbe0 <xTaskIncrementTick>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d003      	beq.n	800de84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de7c:	4b06      	ldr	r3, [pc, #24]	; (800de98 <xPortSysTickHandler+0x40>)
 800de7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de82:	601a      	str	r2, [r3, #0]
 800de84:	2300      	movs	r3, #0
 800de86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	f383 8811 	msr	BASEPRI, r3
}
 800de8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800de90:	bf00      	nop
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	e000ed04 	.word	0xe000ed04

0800de9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de9c:	b480      	push	{r7}
 800de9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dea0:	4b0b      	ldr	r3, [pc, #44]	; (800ded0 <vPortSetupTimerInterrupt+0x34>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dea6:	4b0b      	ldr	r3, [pc, #44]	; (800ded4 <vPortSetupTimerInterrupt+0x38>)
 800dea8:	2200      	movs	r2, #0
 800deaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800deac:	4b0a      	ldr	r3, [pc, #40]	; (800ded8 <vPortSetupTimerInterrupt+0x3c>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a0a      	ldr	r2, [pc, #40]	; (800dedc <vPortSetupTimerInterrupt+0x40>)
 800deb2:	fba2 2303 	umull	r2, r3, r2, r3
 800deb6:	099b      	lsrs	r3, r3, #6
 800deb8:	4a09      	ldr	r2, [pc, #36]	; (800dee0 <vPortSetupTimerInterrupt+0x44>)
 800deba:	3b01      	subs	r3, #1
 800debc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800debe:	4b04      	ldr	r3, [pc, #16]	; (800ded0 <vPortSetupTimerInterrupt+0x34>)
 800dec0:	2207      	movs	r2, #7
 800dec2:	601a      	str	r2, [r3, #0]
}
 800dec4:	bf00      	nop
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr
 800dece:	bf00      	nop
 800ded0:	e000e010 	.word	0xe000e010
 800ded4:	e000e018 	.word	0xe000e018
 800ded8:	20000074 	.word	0x20000074
 800dedc:	10624dd3 	.word	0x10624dd3
 800dee0:	e000e014 	.word	0xe000e014

0800dee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800def4 <vPortEnableVFP+0x10>
 800dee8:	6801      	ldr	r1, [r0, #0]
 800deea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800deee:	6001      	str	r1, [r0, #0]
 800def0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800def2:	bf00      	nop
 800def4:	e000ed88 	.word	0xe000ed88

0800def8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800defe:	f3ef 8305 	mrs	r3, IPSR
 800df02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2b0f      	cmp	r3, #15
 800df08:	d914      	bls.n	800df34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df0a:	4a17      	ldr	r2, [pc, #92]	; (800df68 <vPortValidateInterruptPriority+0x70>)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	4413      	add	r3, r2
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df14:	4b15      	ldr	r3, [pc, #84]	; (800df6c <vPortValidateInterruptPriority+0x74>)
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	7afa      	ldrb	r2, [r7, #11]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d20a      	bcs.n	800df34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800df1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df22:	f383 8811 	msr	BASEPRI, r3
 800df26:	f3bf 8f6f 	isb	sy
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	607b      	str	r3, [r7, #4]
}
 800df30:	bf00      	nop
 800df32:	e7fe      	b.n	800df32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df34:	4b0e      	ldr	r3, [pc, #56]	; (800df70 <vPortValidateInterruptPriority+0x78>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df3c:	4b0d      	ldr	r3, [pc, #52]	; (800df74 <vPortValidateInterruptPriority+0x7c>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	429a      	cmp	r2, r3
 800df42:	d90a      	bls.n	800df5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800df44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df48:	f383 8811 	msr	BASEPRI, r3
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	603b      	str	r3, [r7, #0]
}
 800df56:	bf00      	nop
 800df58:	e7fe      	b.n	800df58 <vPortValidateInterruptPriority+0x60>
	}
 800df5a:	bf00      	nop
 800df5c:	3714      	adds	r7, #20
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	e000e3f0 	.word	0xe000e3f0
 800df6c:	2000121c 	.word	0x2000121c
 800df70:	e000ed0c 	.word	0xe000ed0c
 800df74:	20001220 	.word	0x20001220

0800df78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b08a      	sub	sp, #40	; 0x28
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df80:	2300      	movs	r3, #0
 800df82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df84:	f7fe fd70 	bl	800ca68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df88:	4b5b      	ldr	r3, [pc, #364]	; (800e0f8 <pvPortMalloc+0x180>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d101      	bne.n	800df94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df90:	f000 f920 	bl	800e1d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df94:	4b59      	ldr	r3, [pc, #356]	; (800e0fc <pvPortMalloc+0x184>)
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4013      	ands	r3, r2
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f040 8093 	bne.w	800e0c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d01d      	beq.n	800dfe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dfa8:	2208      	movs	r2, #8
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	4413      	add	r3, r2
 800dfae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f003 0307 	and.w	r3, r3, #7
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d014      	beq.n	800dfe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f023 0307 	bic.w	r3, r3, #7
 800dfc0:	3308      	adds	r3, #8
 800dfc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f003 0307 	and.w	r3, r3, #7
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00a      	beq.n	800dfe4 <pvPortMalloc+0x6c>
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	617b      	str	r3, [r7, #20]
}
 800dfe0:	bf00      	nop
 800dfe2:	e7fe      	b.n	800dfe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d06e      	beq.n	800e0c8 <pvPortMalloc+0x150>
 800dfea:	4b45      	ldr	r3, [pc, #276]	; (800e100 <pvPortMalloc+0x188>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d869      	bhi.n	800e0c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dff4:	4b43      	ldr	r3, [pc, #268]	; (800e104 <pvPortMalloc+0x18c>)
 800dff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dff8:	4b42      	ldr	r3, [pc, #264]	; (800e104 <pvPortMalloc+0x18c>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dffe:	e004      	b.n	800e00a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	429a      	cmp	r2, r3
 800e012:	d903      	bls.n	800e01c <pvPortMalloc+0xa4>
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d1f1      	bne.n	800e000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e01c:	4b36      	ldr	r3, [pc, #216]	; (800e0f8 <pvPortMalloc+0x180>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e022:	429a      	cmp	r2, r3
 800e024:	d050      	beq.n	800e0c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e026:	6a3b      	ldr	r3, [r7, #32]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2208      	movs	r2, #8
 800e02c:	4413      	add	r3, r2
 800e02e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	6a3b      	ldr	r3, [r7, #32]
 800e036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	1ad2      	subs	r2, r2, r3
 800e040:	2308      	movs	r3, #8
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	429a      	cmp	r2, r3
 800e046:	d91f      	bls.n	800e088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4413      	add	r3, r2
 800e04e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e050:	69bb      	ldr	r3, [r7, #24]
 800e052:	f003 0307 	and.w	r3, r3, #7
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00a      	beq.n	800e070 <pvPortMalloc+0xf8>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	613b      	str	r3, [r7, #16]
}
 800e06c:	bf00      	nop
 800e06e:	e7fe      	b.n	800e06e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	685a      	ldr	r2, [r3, #4]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	1ad2      	subs	r2, r2, r3
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e082:	69b8      	ldr	r0, [r7, #24]
 800e084:	f000 f908 	bl	800e298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e088:	4b1d      	ldr	r3, [pc, #116]	; (800e100 <pvPortMalloc+0x188>)
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	4a1b      	ldr	r2, [pc, #108]	; (800e100 <pvPortMalloc+0x188>)
 800e094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e096:	4b1a      	ldr	r3, [pc, #104]	; (800e100 <pvPortMalloc+0x188>)
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	4b1b      	ldr	r3, [pc, #108]	; (800e108 <pvPortMalloc+0x190>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d203      	bcs.n	800e0aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e0a2:	4b17      	ldr	r3, [pc, #92]	; (800e100 <pvPortMalloc+0x188>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4a18      	ldr	r2, [pc, #96]	; (800e108 <pvPortMalloc+0x190>)
 800e0a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	685a      	ldr	r2, [r3, #4]
 800e0ae:	4b13      	ldr	r3, [pc, #76]	; (800e0fc <pvPortMalloc+0x184>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	431a      	orrs	r2, r3
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e0be:	4b13      	ldr	r3, [pc, #76]	; (800e10c <pvPortMalloc+0x194>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	4a11      	ldr	r2, [pc, #68]	; (800e10c <pvPortMalloc+0x194>)
 800e0c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e0c8:	f7fe fcdc 	bl	800ca84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	f003 0307 	and.w	r3, r3, #7
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00a      	beq.n	800e0ec <pvPortMalloc+0x174>
	__asm volatile
 800e0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0da:	f383 8811 	msr	BASEPRI, r3
 800e0de:	f3bf 8f6f 	isb	sy
 800e0e2:	f3bf 8f4f 	dsb	sy
 800e0e6:	60fb      	str	r3, [r7, #12]
}
 800e0e8:	bf00      	nop
 800e0ea:	e7fe      	b.n	800e0ea <pvPortMalloc+0x172>
	return pvReturn;
 800e0ec:	69fb      	ldr	r3, [r7, #28]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3728      	adds	r7, #40	; 0x28
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	2001a22c 	.word	0x2001a22c
 800e0fc:	2001a240 	.word	0x2001a240
 800e100:	2001a230 	.word	0x2001a230
 800e104:	2001a224 	.word	0x2001a224
 800e108:	2001a234 	.word	0x2001a234
 800e10c:	2001a238 	.word	0x2001a238

0800e110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d04d      	beq.n	800e1be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e122:	2308      	movs	r3, #8
 800e124:	425b      	negs	r3, r3
 800e126:	697a      	ldr	r2, [r7, #20]
 800e128:	4413      	add	r3, r2
 800e12a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	685a      	ldr	r2, [r3, #4]
 800e134:	4b24      	ldr	r3, [pc, #144]	; (800e1c8 <vPortFree+0xb8>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4013      	ands	r3, r2
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d10a      	bne.n	800e154 <vPortFree+0x44>
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	60fb      	str	r3, [r7, #12]
}
 800e150:	bf00      	nop
 800e152:	e7fe      	b.n	800e152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00a      	beq.n	800e172 <vPortFree+0x62>
	__asm volatile
 800e15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e160:	f383 8811 	msr	BASEPRI, r3
 800e164:	f3bf 8f6f 	isb	sy
 800e168:	f3bf 8f4f 	dsb	sy
 800e16c:	60bb      	str	r3, [r7, #8]
}
 800e16e:	bf00      	nop
 800e170:	e7fe      	b.n	800e170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	685a      	ldr	r2, [r3, #4]
 800e176:	4b14      	ldr	r3, [pc, #80]	; (800e1c8 <vPortFree+0xb8>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4013      	ands	r3, r2
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d01e      	beq.n	800e1be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d11a      	bne.n	800e1be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	685a      	ldr	r2, [r3, #4]
 800e18c:	4b0e      	ldr	r3, [pc, #56]	; (800e1c8 <vPortFree+0xb8>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	43db      	mvns	r3, r3
 800e192:	401a      	ands	r2, r3
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e198:	f7fe fc66 	bl	800ca68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	4b0a      	ldr	r3, [pc, #40]	; (800e1cc <vPortFree+0xbc>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	4a09      	ldr	r2, [pc, #36]	; (800e1cc <vPortFree+0xbc>)
 800e1a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e1aa:	6938      	ldr	r0, [r7, #16]
 800e1ac:	f000 f874 	bl	800e298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e1b0:	4b07      	ldr	r3, [pc, #28]	; (800e1d0 <vPortFree+0xc0>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	4a06      	ldr	r2, [pc, #24]	; (800e1d0 <vPortFree+0xc0>)
 800e1b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e1ba:	f7fe fc63 	bl	800ca84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e1be:	bf00      	nop
 800e1c0:	3718      	adds	r7, #24
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	2001a240 	.word	0x2001a240
 800e1cc:	2001a230 	.word	0x2001a230
 800e1d0:	2001a23c 	.word	0x2001a23c

0800e1d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e1da:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800e1de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e1e0:	4b27      	ldr	r3, [pc, #156]	; (800e280 <prvHeapInit+0xac>)
 800e1e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f003 0307 	and.w	r3, r3, #7
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d00c      	beq.n	800e208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	3307      	adds	r3, #7
 800e1f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f023 0307 	bic.w	r3, r3, #7
 800e1fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	4a1f      	ldr	r2, [pc, #124]	; (800e280 <prvHeapInit+0xac>)
 800e204:	4413      	add	r3, r2
 800e206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e20c:	4a1d      	ldr	r2, [pc, #116]	; (800e284 <prvHeapInit+0xb0>)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e212:	4b1c      	ldr	r3, [pc, #112]	; (800e284 <prvHeapInit+0xb0>)
 800e214:	2200      	movs	r2, #0
 800e216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	68ba      	ldr	r2, [r7, #8]
 800e21c:	4413      	add	r3, r2
 800e21e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e220:	2208      	movs	r2, #8
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	1a9b      	subs	r3, r3, r2
 800e226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f023 0307 	bic.w	r3, r3, #7
 800e22e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4a15      	ldr	r2, [pc, #84]	; (800e288 <prvHeapInit+0xb4>)
 800e234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e236:	4b14      	ldr	r3, [pc, #80]	; (800e288 <prvHeapInit+0xb4>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2200      	movs	r2, #0
 800e23c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e23e:	4b12      	ldr	r3, [pc, #72]	; (800e288 <prvHeapInit+0xb4>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2200      	movs	r2, #0
 800e244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	1ad2      	subs	r2, r2, r3
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e254:	4b0c      	ldr	r3, [pc, #48]	; (800e288 <prvHeapInit+0xb4>)
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	4a0a      	ldr	r2, [pc, #40]	; (800e28c <prvHeapInit+0xb8>)
 800e262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	4a09      	ldr	r2, [pc, #36]	; (800e290 <prvHeapInit+0xbc>)
 800e26a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e26c:	4b09      	ldr	r3, [pc, #36]	; (800e294 <prvHeapInit+0xc0>)
 800e26e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e272:	601a      	str	r2, [r3, #0]
}
 800e274:	bf00      	nop
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr
 800e280:	20001224 	.word	0x20001224
 800e284:	2001a224 	.word	0x2001a224
 800e288:	2001a22c 	.word	0x2001a22c
 800e28c:	2001a234 	.word	0x2001a234
 800e290:	2001a230 	.word	0x2001a230
 800e294:	2001a240 	.word	0x2001a240

0800e298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e298:	b480      	push	{r7}
 800e29a:	b085      	sub	sp, #20
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e2a0:	4b28      	ldr	r3, [pc, #160]	; (800e344 <prvInsertBlockIntoFreeList+0xac>)
 800e2a2:	60fb      	str	r3, [r7, #12]
 800e2a4:	e002      	b.n	800e2ac <prvInsertBlockIntoFreeList+0x14>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	60fb      	str	r3, [r7, #12]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d8f7      	bhi.n	800e2a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	68ba      	ldr	r2, [r7, #8]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d108      	bne.n	800e2da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	685a      	ldr	r2, [r3, #4]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	441a      	add	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	441a      	add	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d118      	bne.n	800e320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	4b15      	ldr	r3, [pc, #84]	; (800e348 <prvInsertBlockIntoFreeList+0xb0>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d00d      	beq.n	800e316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	685a      	ldr	r2, [r3, #4]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	441a      	add	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	601a      	str	r2, [r3, #0]
 800e314:	e008      	b.n	800e328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e316:	4b0c      	ldr	r3, [pc, #48]	; (800e348 <prvInsertBlockIntoFreeList+0xb0>)
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	e003      	b.n	800e328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d002      	beq.n	800e336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e336:	bf00      	nop
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop
 800e344:	2001a224 	.word	0x2001a224
 800e348:	2001a22c 	.word	0x2001a22c

0800e34c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e350:	2200      	movs	r2, #0
 800e352:	4912      	ldr	r1, [pc, #72]	; (800e39c <MX_USB_DEVICE_Init+0x50>)
 800e354:	4812      	ldr	r0, [pc, #72]	; (800e3a0 <MX_USB_DEVICE_Init+0x54>)
 800e356:	f7fb ff23 	bl	800a1a0 <USBD_Init>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d001      	beq.n	800e364 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e360:	f7f2 fd70 	bl	8000e44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e364:	490f      	ldr	r1, [pc, #60]	; (800e3a4 <MX_USB_DEVICE_Init+0x58>)
 800e366:	480e      	ldr	r0, [pc, #56]	; (800e3a0 <MX_USB_DEVICE_Init+0x54>)
 800e368:	f7fb ff4a 	bl	800a200 <USBD_RegisterClass>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d001      	beq.n	800e376 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e372:	f7f2 fd67 	bl	8000e44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e376:	490c      	ldr	r1, [pc, #48]	; (800e3a8 <MX_USB_DEVICE_Init+0x5c>)
 800e378:	4809      	ldr	r0, [pc, #36]	; (800e3a0 <MX_USB_DEVICE_Init+0x54>)
 800e37a:	f7fb fe81 	bl	800a080 <USBD_CDC_RegisterInterface>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d001      	beq.n	800e388 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e384:	f7f2 fd5e 	bl	8000e44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e388:	4805      	ldr	r0, [pc, #20]	; (800e3a0 <MX_USB_DEVICE_Init+0x54>)
 800e38a:	f7fb ff6f 	bl	800a26c <USBD_Start>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e394:	f7f2 fd56 	bl	8000e44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e398:	bf00      	nop
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	20000124 	.word	0x20000124
 800e3a0:	2001a244 	.word	0x2001a244
 800e3a4:	2000008c 	.word	0x2000008c
 800e3a8:	20000110 	.word	0x20000110

0800e3ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	4905      	ldr	r1, [pc, #20]	; (800e3c8 <CDC_Init_FS+0x1c>)
 800e3b4:	4805      	ldr	r0, [pc, #20]	; (800e3cc <CDC_Init_FS+0x20>)
 800e3b6:	f7fb fe7d 	bl	800a0b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e3ba:	4905      	ldr	r1, [pc, #20]	; (800e3d0 <CDC_Init_FS+0x24>)
 800e3bc:	4803      	ldr	r0, [pc, #12]	; (800e3cc <CDC_Init_FS+0x20>)
 800e3be:	f7fb fe9b 	bl	800a0f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e3c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	2001ad20 	.word	0x2001ad20
 800e3cc:	2001a244 	.word	0x2001a244
 800e3d0:	2001a520 	.word	0x2001a520

0800e3d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e3d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	6039      	str	r1, [r7, #0]
 800e3ee:	71fb      	strb	r3, [r7, #7]
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	2b23      	cmp	r3, #35	; 0x23
 800e3f8:	d84a      	bhi.n	800e490 <CDC_Control_FS+0xac>
 800e3fa:	a201      	add	r2, pc, #4	; (adr r2, 800e400 <CDC_Control_FS+0x1c>)
 800e3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e400:	0800e491 	.word	0x0800e491
 800e404:	0800e491 	.word	0x0800e491
 800e408:	0800e491 	.word	0x0800e491
 800e40c:	0800e491 	.word	0x0800e491
 800e410:	0800e491 	.word	0x0800e491
 800e414:	0800e491 	.word	0x0800e491
 800e418:	0800e491 	.word	0x0800e491
 800e41c:	0800e491 	.word	0x0800e491
 800e420:	0800e491 	.word	0x0800e491
 800e424:	0800e491 	.word	0x0800e491
 800e428:	0800e491 	.word	0x0800e491
 800e42c:	0800e491 	.word	0x0800e491
 800e430:	0800e491 	.word	0x0800e491
 800e434:	0800e491 	.word	0x0800e491
 800e438:	0800e491 	.word	0x0800e491
 800e43c:	0800e491 	.word	0x0800e491
 800e440:	0800e491 	.word	0x0800e491
 800e444:	0800e491 	.word	0x0800e491
 800e448:	0800e491 	.word	0x0800e491
 800e44c:	0800e491 	.word	0x0800e491
 800e450:	0800e491 	.word	0x0800e491
 800e454:	0800e491 	.word	0x0800e491
 800e458:	0800e491 	.word	0x0800e491
 800e45c:	0800e491 	.word	0x0800e491
 800e460:	0800e491 	.word	0x0800e491
 800e464:	0800e491 	.word	0x0800e491
 800e468:	0800e491 	.word	0x0800e491
 800e46c:	0800e491 	.word	0x0800e491
 800e470:	0800e491 	.word	0x0800e491
 800e474:	0800e491 	.word	0x0800e491
 800e478:	0800e491 	.word	0x0800e491
 800e47c:	0800e491 	.word	0x0800e491
 800e480:	0800e491 	.word	0x0800e491
 800e484:	0800e491 	.word	0x0800e491
 800e488:	0800e491 	.word	0x0800e491
 800e48c:	0800e491 	.word	0x0800e491
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e490:	bf00      	nop
  }

  return (USBD_OK);
 800e492:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e494:	4618      	mov	r0, r3
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e4aa:	6879      	ldr	r1, [r7, #4]
 800e4ac:	4805      	ldr	r0, [pc, #20]	; (800e4c4 <CDC_Receive_FS+0x24>)
 800e4ae:	f7fb fe23 	bl	800a0f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e4b2:	4804      	ldr	r0, [pc, #16]	; (800e4c4 <CDC_Receive_FS+0x24>)
 800e4b4:	f7fb fe3e 	bl	800a134 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e4b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	2001a244 	.word	0x2001a244

0800e4c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b087      	sub	sp, #28
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e4da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	371c      	adds	r7, #28
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
	...

0800e4ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	6039      	str	r1, [r7, #0]
 800e4f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	2212      	movs	r2, #18
 800e4fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e4fe:	4b03      	ldr	r3, [pc, #12]	; (800e50c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e500:	4618      	mov	r0, r3
 800e502:	370c      	adds	r7, #12
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr
 800e50c:	20000140 	.word	0x20000140

0800e510 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	4603      	mov	r3, r0
 800e518:	6039      	str	r1, [r7, #0]
 800e51a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	2204      	movs	r2, #4
 800e520:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e522:	4b03      	ldr	r3, [pc, #12]	; (800e530 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e524:	4618      	mov	r0, r3
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr
 800e530:	20000154 	.word	0x20000154

0800e534 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	4603      	mov	r3, r0
 800e53c:	6039      	str	r1, [r7, #0]
 800e53e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e540:	79fb      	ldrb	r3, [r7, #7]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d105      	bne.n	800e552 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e546:	683a      	ldr	r2, [r7, #0]
 800e548:	4907      	ldr	r1, [pc, #28]	; (800e568 <USBD_FS_ProductStrDescriptor+0x34>)
 800e54a:	4808      	ldr	r0, [pc, #32]	; (800e56c <USBD_FS_ProductStrDescriptor+0x38>)
 800e54c:	f7fd f83a 	bl	800b5c4 <USBD_GetString>
 800e550:	e004      	b.n	800e55c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e552:	683a      	ldr	r2, [r7, #0]
 800e554:	4904      	ldr	r1, [pc, #16]	; (800e568 <USBD_FS_ProductStrDescriptor+0x34>)
 800e556:	4805      	ldr	r0, [pc, #20]	; (800e56c <USBD_FS_ProductStrDescriptor+0x38>)
 800e558:	f7fd f834 	bl	800b5c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e55c:	4b02      	ldr	r3, [pc, #8]	; (800e568 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	2001b520 	.word	0x2001b520
 800e56c:	0800fa90 	.word	0x0800fa90

0800e570 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	4603      	mov	r3, r0
 800e578:	6039      	str	r1, [r7, #0]
 800e57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	4904      	ldr	r1, [pc, #16]	; (800e590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e580:	4804      	ldr	r0, [pc, #16]	; (800e594 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e582:	f7fd f81f 	bl	800b5c4 <USBD_GetString>
  return USBD_StrDesc;
 800e586:	4b02      	ldr	r3, [pc, #8]	; (800e590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	2001b520 	.word	0x2001b520
 800e594:	0800faa8 	.word	0x0800faa8

0800e598 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	4603      	mov	r3, r0
 800e5a0:	6039      	str	r1, [r7, #0]
 800e5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	221a      	movs	r2, #26
 800e5a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e5aa:	f000 f843 	bl	800e634 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e5ae:	4b02      	ldr	r3, [pc, #8]	; (800e5b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	20000158 	.word	0x20000158

0800e5bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	6039      	str	r1, [r7, #0]
 800e5c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e5c8:	79fb      	ldrb	r3, [r7, #7]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d105      	bne.n	800e5da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	4907      	ldr	r1, [pc, #28]	; (800e5f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e5d2:	4808      	ldr	r0, [pc, #32]	; (800e5f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e5d4:	f7fc fff6 	bl	800b5c4 <USBD_GetString>
 800e5d8:	e004      	b.n	800e5e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	4904      	ldr	r1, [pc, #16]	; (800e5f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e5de:	4805      	ldr	r0, [pc, #20]	; (800e5f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e5e0:	f7fc fff0 	bl	800b5c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5e4:	4b02      	ldr	r3, [pc, #8]	; (800e5f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	2001b520 	.word	0x2001b520
 800e5f4:	0800fabc 	.word	0x0800fabc

0800e5f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	4603      	mov	r3, r0
 800e600:	6039      	str	r1, [r7, #0]
 800e602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d105      	bne.n	800e616 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e60a:	683a      	ldr	r2, [r7, #0]
 800e60c:	4907      	ldr	r1, [pc, #28]	; (800e62c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e60e:	4808      	ldr	r0, [pc, #32]	; (800e630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e610:	f7fc ffd8 	bl	800b5c4 <USBD_GetString>
 800e614:	e004      	b.n	800e620 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e616:	683a      	ldr	r2, [r7, #0]
 800e618:	4904      	ldr	r1, [pc, #16]	; (800e62c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e61a:	4805      	ldr	r0, [pc, #20]	; (800e630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e61c:	f7fc ffd2 	bl	800b5c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e620:	4b02      	ldr	r3, [pc, #8]	; (800e62c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e622:	4618      	mov	r0, r3
 800e624:	3708      	adds	r7, #8
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	2001b520 	.word	0x2001b520
 800e630:	0800fac8 	.word	0x0800fac8

0800e634 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e63a:	4b0f      	ldr	r3, [pc, #60]	; (800e678 <Get_SerialNum+0x44>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e640:	4b0e      	ldr	r3, [pc, #56]	; (800e67c <Get_SerialNum+0x48>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e646:	4b0e      	ldr	r3, [pc, #56]	; (800e680 <Get_SerialNum+0x4c>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e64c:	68fa      	ldr	r2, [r7, #12]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4413      	add	r3, r2
 800e652:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d009      	beq.n	800e66e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e65a:	2208      	movs	r2, #8
 800e65c:	4909      	ldr	r1, [pc, #36]	; (800e684 <Get_SerialNum+0x50>)
 800e65e:	68f8      	ldr	r0, [r7, #12]
 800e660:	f000 f814 	bl	800e68c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e664:	2204      	movs	r2, #4
 800e666:	4908      	ldr	r1, [pc, #32]	; (800e688 <Get_SerialNum+0x54>)
 800e668:	68b8      	ldr	r0, [r7, #8]
 800e66a:	f000 f80f 	bl	800e68c <IntToUnicode>
  }
}
 800e66e:	bf00      	nop
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	1fff7a10 	.word	0x1fff7a10
 800e67c:	1fff7a14 	.word	0x1fff7a14
 800e680:	1fff7a18 	.word	0x1fff7a18
 800e684:	2000015a 	.word	0x2000015a
 800e688:	2000016a 	.word	0x2000016a

0800e68c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b087      	sub	sp, #28
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	4613      	mov	r3, r2
 800e698:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e69e:	2300      	movs	r3, #0
 800e6a0:	75fb      	strb	r3, [r7, #23]
 800e6a2:	e027      	b.n	800e6f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	0f1b      	lsrs	r3, r3, #28
 800e6a8:	2b09      	cmp	r3, #9
 800e6aa:	d80b      	bhi.n	800e6c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	0f1b      	lsrs	r3, r3, #28
 800e6b0:	b2da      	uxtb	r2, r3
 800e6b2:	7dfb      	ldrb	r3, [r7, #23]
 800e6b4:	005b      	lsls	r3, r3, #1
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	440b      	add	r3, r1
 800e6bc:	3230      	adds	r2, #48	; 0x30
 800e6be:	b2d2      	uxtb	r2, r2
 800e6c0:	701a      	strb	r2, [r3, #0]
 800e6c2:	e00a      	b.n	800e6da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	0f1b      	lsrs	r3, r3, #28
 800e6c8:	b2da      	uxtb	r2, r3
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
 800e6cc:	005b      	lsls	r3, r3, #1
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	440b      	add	r3, r1
 800e6d4:	3237      	adds	r2, #55	; 0x37
 800e6d6:	b2d2      	uxtb	r2, r2
 800e6d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	011b      	lsls	r3, r3, #4
 800e6de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e6e0:	7dfb      	ldrb	r3, [r7, #23]
 800e6e2:	005b      	lsls	r3, r3, #1
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	75fb      	strb	r3, [r7, #23]
 800e6f4:	7dfa      	ldrb	r2, [r7, #23]
 800e6f6:	79fb      	ldrb	r3, [r7, #7]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d3d3      	bcc.n	800e6a4 <IntToUnicode+0x18>
  }
}
 800e6fc:	bf00      	nop
 800e6fe:	bf00      	nop
 800e700:	371c      	adds	r7, #28
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr
	...

0800e70c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08a      	sub	sp, #40	; 0x28
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e714:	f107 0314 	add.w	r3, r7, #20
 800e718:	2200      	movs	r2, #0
 800e71a:	601a      	str	r2, [r3, #0]
 800e71c:	605a      	str	r2, [r3, #4]
 800e71e:	609a      	str	r2, [r3, #8]
 800e720:	60da      	str	r2, [r3, #12]
 800e722:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e72c:	d13a      	bne.n	800e7a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e72e:	2300      	movs	r3, #0
 800e730:	613b      	str	r3, [r7, #16]
 800e732:	4b1e      	ldr	r3, [pc, #120]	; (800e7ac <HAL_PCD_MspInit+0xa0>)
 800e734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e736:	4a1d      	ldr	r2, [pc, #116]	; (800e7ac <HAL_PCD_MspInit+0xa0>)
 800e738:	f043 0301 	orr.w	r3, r3, #1
 800e73c:	6313      	str	r3, [r2, #48]	; 0x30
 800e73e:	4b1b      	ldr	r3, [pc, #108]	; (800e7ac <HAL_PCD_MspInit+0xa0>)
 800e740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e742:	f003 0301 	and.w	r3, r3, #1
 800e746:	613b      	str	r3, [r7, #16]
 800e748:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e74a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e74e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e750:	2302      	movs	r3, #2
 800e752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e754:	2300      	movs	r3, #0
 800e756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e758:	2303      	movs	r3, #3
 800e75a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e75c:	230a      	movs	r3, #10
 800e75e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e760:	f107 0314 	add.w	r3, r7, #20
 800e764:	4619      	mov	r1, r3
 800e766:	4812      	ldr	r0, [pc, #72]	; (800e7b0 <HAL_PCD_MspInit+0xa4>)
 800e768:	f7f3 fbf8 	bl	8001f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e76c:	4b0f      	ldr	r3, [pc, #60]	; (800e7ac <HAL_PCD_MspInit+0xa0>)
 800e76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e770:	4a0e      	ldr	r2, [pc, #56]	; (800e7ac <HAL_PCD_MspInit+0xa0>)
 800e772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e776:	6353      	str	r3, [r2, #52]	; 0x34
 800e778:	2300      	movs	r3, #0
 800e77a:	60fb      	str	r3, [r7, #12]
 800e77c:	4b0b      	ldr	r3, [pc, #44]	; (800e7ac <HAL_PCD_MspInit+0xa0>)
 800e77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e780:	4a0a      	ldr	r2, [pc, #40]	; (800e7ac <HAL_PCD_MspInit+0xa0>)
 800e782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e786:	6453      	str	r3, [r2, #68]	; 0x44
 800e788:	4b08      	ldr	r3, [pc, #32]	; (800e7ac <HAL_PCD_MspInit+0xa0>)
 800e78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e78c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e790:	60fb      	str	r3, [r7, #12]
 800e792:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e794:	2200      	movs	r2, #0
 800e796:	2105      	movs	r1, #5
 800e798:	2043      	movs	r0, #67	; 0x43
 800e79a:	f7f3 fb9b 	bl	8001ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e79e:	2043      	movs	r0, #67	; 0x43
 800e7a0:	f7f3 fbc4 	bl	8001f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e7a4:	bf00      	nop
 800e7a6:	3728      	adds	r7, #40	; 0x28
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	40023800 	.word	0x40023800
 800e7b0:	40020000 	.word	0x40020000

0800e7b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	4610      	mov	r0, r2
 800e7cc:	f7fb fd9b 	bl	800a306 <USBD_LL_SetupStage>
}
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e7ea:	78fa      	ldrb	r2, [r7, #3]
 800e7ec:	6879      	ldr	r1, [r7, #4]
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	00db      	lsls	r3, r3, #3
 800e7f2:	4413      	add	r3, r2
 800e7f4:	009b      	lsls	r3, r3, #2
 800e7f6:	440b      	add	r3, r1
 800e7f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	78fb      	ldrb	r3, [r7, #3]
 800e800:	4619      	mov	r1, r3
 800e802:	f7fb fdd5 	bl	800a3b0 <USBD_LL_DataOutStage>
}
 800e806:	bf00      	nop
 800e808:	3708      	adds	r7, #8
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b082      	sub	sp, #8
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
 800e816:	460b      	mov	r3, r1
 800e818:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e820:	78fa      	ldrb	r2, [r7, #3]
 800e822:	6879      	ldr	r1, [r7, #4]
 800e824:	4613      	mov	r3, r2
 800e826:	00db      	lsls	r3, r3, #3
 800e828:	4413      	add	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	440b      	add	r3, r1
 800e82e:	334c      	adds	r3, #76	; 0x4c
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	78fb      	ldrb	r3, [r7, #3]
 800e834:	4619      	mov	r1, r3
 800e836:	f7fb fe6e 	bl	800a516 <USBD_LL_DataInStage>
}
 800e83a:	bf00      	nop
 800e83c:	3708      	adds	r7, #8
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e842:	b580      	push	{r7, lr}
 800e844:	b082      	sub	sp, #8
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e850:	4618      	mov	r0, r3
 800e852:	f7fb ffa2 	bl	800a79a <USBD_LL_SOF>
}
 800e856:	bf00      	nop
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b084      	sub	sp, #16
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e866:	2301      	movs	r3, #1
 800e868:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	2b02      	cmp	r3, #2
 800e870:	d001      	beq.n	800e876 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e872:	f7f2 fae7 	bl	8000e44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e87c:	7bfa      	ldrb	r2, [r7, #15]
 800e87e:	4611      	mov	r1, r2
 800e880:	4618      	mov	r0, r3
 800e882:	f7fb ff4c 	bl	800a71e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fb fef4 	bl	800a67a <USBD_LL_Reset>
}
 800e892:	bf00      	nop
 800e894:	3710      	adds	r7, #16
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
	...

0800e89c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fb ff47 	bl	800a73e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	6812      	ldr	r2, [r2, #0]
 800e8be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e8c2:	f043 0301 	orr.w	r3, r3, #1
 800e8c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6a1b      	ldr	r3, [r3, #32]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d005      	beq.n	800e8dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e8d0:	4b04      	ldr	r3, [pc, #16]	; (800e8e4 <HAL_PCD_SuspendCallback+0x48>)
 800e8d2:	691b      	ldr	r3, [r3, #16]
 800e8d4:	4a03      	ldr	r2, [pc, #12]	; (800e8e4 <HAL_PCD_SuspendCallback+0x48>)
 800e8d6:	f043 0306 	orr.w	r3, r3, #6
 800e8da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e8dc:	bf00      	nop
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	e000ed00 	.word	0xe000ed00

0800e8e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fb ff37 	bl	800a76a <USBD_LL_Resume>
}
 800e8fc:	bf00      	nop
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	460b      	mov	r3, r1
 800e90e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e916:	78fa      	ldrb	r2, [r7, #3]
 800e918:	4611      	mov	r1, r2
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7fb ff8f 	bl	800a83e <USBD_LL_IsoOUTIncomplete>
}
 800e920:	bf00      	nop
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	460b      	mov	r3, r1
 800e932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e93a:	78fa      	ldrb	r2, [r7, #3]
 800e93c:	4611      	mov	r1, r2
 800e93e:	4618      	mov	r0, r3
 800e940:	f7fb ff4b 	bl	800a7da <USBD_LL_IsoINIncomplete>
}
 800e944:	bf00      	nop
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fb ffa1 	bl	800a8a2 <USBD_LL_DevConnected>
}
 800e960:	bf00      	nop
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e976:	4618      	mov	r0, r3
 800e978:	f7fb ff9e 	bl	800a8b8 <USBD_LL_DevDisconnected>
}
 800e97c:	bf00      	nop
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d13c      	bne.n	800ea0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e994:	4a20      	ldr	r2, [pc, #128]	; (800ea18 <USBD_LL_Init+0x94>)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4a1e      	ldr	r2, [pc, #120]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e9a4:	4b1c      	ldr	r3, [pc, #112]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e9aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e9ac:	4b1a      	ldr	r3, [pc, #104]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9ae:	2204      	movs	r2, #4
 800e9b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e9b2:	4b19      	ldr	r3, [pc, #100]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9b4:	2202      	movs	r2, #2
 800e9b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e9b8:	4b17      	ldr	r3, [pc, #92]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e9be:	4b16      	ldr	r3, [pc, #88]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e9c4:	4b14      	ldr	r3, [pc, #80]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e9ca:	4b13      	ldr	r3, [pc, #76]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e9d0:	4b11      	ldr	r3, [pc, #68]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e9d6:	4b10      	ldr	r3, [pc, #64]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e9dc:	4b0e      	ldr	r3, [pc, #56]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9de:	2200      	movs	r2, #0
 800e9e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e9e2:	480d      	ldr	r0, [pc, #52]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9e4:	f7f4 fbe4 	bl	80031b0 <HAL_PCD_Init>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d001      	beq.n	800e9f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e9ee:	f7f2 fa29 	bl	8000e44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e9f2:	2180      	movs	r1, #128	; 0x80
 800e9f4:	4808      	ldr	r0, [pc, #32]	; (800ea18 <USBD_LL_Init+0x94>)
 800e9f6:	f7f5 fe46 	bl	8004686 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e9fa:	2240      	movs	r2, #64	; 0x40
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	4806      	ldr	r0, [pc, #24]	; (800ea18 <USBD_LL_Init+0x94>)
 800ea00:	f7f5 fdfa 	bl	80045f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ea04:	2280      	movs	r2, #128	; 0x80
 800ea06:	2101      	movs	r1, #1
 800ea08:	4803      	ldr	r0, [pc, #12]	; (800ea18 <USBD_LL_Init+0x94>)
 800ea0a:	f7f5 fdf5 	bl	80045f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	2001b720 	.word	0x2001b720

0800ea1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7f4 fce4 	bl	8003400 <HAL_PCD_Start>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea3c:	7bfb      	ldrb	r3, [r7, #15]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f000 f942 	bl	800ecc8 <USBD_Get_USB_Status>
 800ea44:	4603      	mov	r3, r0
 800ea46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b084      	sub	sp, #16
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	4608      	mov	r0, r1
 800ea5c:	4611      	mov	r1, r2
 800ea5e:	461a      	mov	r2, r3
 800ea60:	4603      	mov	r3, r0
 800ea62:	70fb      	strb	r3, [r7, #3]
 800ea64:	460b      	mov	r3, r1
 800ea66:	70bb      	strb	r3, [r7, #2]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea70:	2300      	movs	r3, #0
 800ea72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ea7a:	78bb      	ldrb	r3, [r7, #2]
 800ea7c:	883a      	ldrh	r2, [r7, #0]
 800ea7e:	78f9      	ldrb	r1, [r7, #3]
 800ea80:	f7f5 f9b5 	bl	8003dee <HAL_PCD_EP_Open>
 800ea84:	4603      	mov	r3, r0
 800ea86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea88:	7bfb      	ldrb	r3, [r7, #15]
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f000 f91c 	bl	800ecc8 <USBD_Get_USB_Status>
 800ea90:	4603      	mov	r3, r0
 800ea92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b084      	sub	sp, #16
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eab8:	78fa      	ldrb	r2, [r7, #3]
 800eaba:	4611      	mov	r1, r2
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7f5 f9fe 	bl	8003ebe <HAL_PCD_EP_Close>
 800eac2:	4603      	mov	r3, r0
 800eac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eac6:	7bfb      	ldrb	r3, [r7, #15]
 800eac8:	4618      	mov	r0, r3
 800eaca:	f000 f8fd 	bl	800ecc8 <USBD_Get_USB_Status>
 800eace:	4603      	mov	r3, r0
 800ead0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ead2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3710      	adds	r7, #16
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	460b      	mov	r3, r1
 800eae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eae8:	2300      	movs	r3, #0
 800eaea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaec:	2300      	movs	r3, #0
 800eaee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eaf6:	78fa      	ldrb	r2, [r7, #3]
 800eaf8:	4611      	mov	r1, r2
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7f5 fad6 	bl	80040ac <HAL_PCD_EP_SetStall>
 800eb00:	4603      	mov	r3, r0
 800eb02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
 800eb06:	4618      	mov	r0, r3
 800eb08:	f000 f8de 	bl	800ecc8 <USBD_Get_USB_Status>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb10:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b084      	sub	sp, #16
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	460b      	mov	r3, r1
 800eb24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb26:	2300      	movs	r3, #0
 800eb28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb34:	78fa      	ldrb	r2, [r7, #3]
 800eb36:	4611      	mov	r1, r2
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7f5 fb1b 	bl	8004174 <HAL_PCD_EP_ClrStall>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f000 f8bf 	bl	800ecc8 <USBD_Get_USB_Status>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	460b      	mov	r3, r1
 800eb62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eb6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	da0b      	bge.n	800eb8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb74:	78fb      	ldrb	r3, [r7, #3]
 800eb76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb7a:	68f9      	ldr	r1, [r7, #12]
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	00db      	lsls	r3, r3, #3
 800eb80:	4413      	add	r3, r2
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	440b      	add	r3, r1
 800eb86:	333e      	adds	r3, #62	; 0x3e
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	e00b      	b.n	800eba4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eb8c:	78fb      	ldrb	r3, [r7, #3]
 800eb8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb92:	68f9      	ldr	r1, [r7, #12]
 800eb94:	4613      	mov	r3, r2
 800eb96:	00db      	lsls	r3, r3, #3
 800eb98:	4413      	add	r3, r2
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	440b      	add	r3, r1
 800eb9e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800eba2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	460b      	mov	r3, r1
 800ebba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebca:	78fa      	ldrb	r2, [r7, #3]
 800ebcc:	4611      	mov	r1, r2
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7f5 f8e8 	bl	8003da4 <HAL_PCD_SetAddress>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebd8:	7bfb      	ldrb	r3, [r7, #15]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f000 f874 	bl	800ecc8 <USBD_Get_USB_Status>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b086      	sub	sp, #24
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	60f8      	str	r0, [r7, #12]
 800ebf6:	607a      	str	r2, [r7, #4]
 800ebf8:	603b      	str	r3, [r7, #0]
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec02:	2300      	movs	r3, #0
 800ec04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec0c:	7af9      	ldrb	r1, [r7, #11]
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	f7f5 fa01 	bl	8004018 <HAL_PCD_EP_Transmit>
 800ec16:	4603      	mov	r3, r0
 800ec18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec1a:	7dfb      	ldrb	r3, [r7, #23]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f000 f853 	bl	800ecc8 <USBD_Get_USB_Status>
 800ec22:	4603      	mov	r3, r0
 800ec24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec26:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3718      	adds	r7, #24
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b086      	sub	sp, #24
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	607a      	str	r2, [r7, #4]
 800ec3a:	603b      	str	r3, [r7, #0]
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec40:	2300      	movs	r3, #0
 800ec42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec4e:	7af9      	ldrb	r1, [r7, #11]
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	f7f5 f97d 	bl	8003f52 <HAL_PCD_EP_Receive>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec5c:	7dfb      	ldrb	r3, [r7, #23]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f000 f832 	bl	800ecc8 <USBD_Get_USB_Status>
 800ec64:	4603      	mov	r3, r0
 800ec66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec68:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b082      	sub	sp, #8
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec84:	78fa      	ldrb	r2, [r7, #3]
 800ec86:	4611      	mov	r1, r2
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7f5 f9ad 	bl	8003fe8 <HAL_PCD_EP_GetRxCount>
 800ec8e:	4603      	mov	r3, r0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eca0:	4b03      	ldr	r3, [pc, #12]	; (800ecb0 <USBD_static_malloc+0x18>)
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	2001bc2c 	.word	0x2001bc2c

0800ecb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]

}
 800ecbc:	bf00      	nop
 800ecbe:	370c      	adds	r7, #12
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	4603      	mov	r3, r0
 800ecd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ecd6:	79fb      	ldrb	r3, [r7, #7]
 800ecd8:	2b03      	cmp	r3, #3
 800ecda:	d817      	bhi.n	800ed0c <USBD_Get_USB_Status+0x44>
 800ecdc:	a201      	add	r2, pc, #4	; (adr r2, 800ece4 <USBD_Get_USB_Status+0x1c>)
 800ecde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece2:	bf00      	nop
 800ece4:	0800ecf5 	.word	0x0800ecf5
 800ece8:	0800ecfb 	.word	0x0800ecfb
 800ecec:	0800ed01 	.word	0x0800ed01
 800ecf0:	0800ed07 	.word	0x0800ed07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ecf8:	e00b      	b.n	800ed12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecfa:	2303      	movs	r3, #3
 800ecfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ecfe:	e008      	b.n	800ed12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed00:	2301      	movs	r3, #1
 800ed02:	73fb      	strb	r3, [r7, #15]
    break;
 800ed04:	e005      	b.n	800ed12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed06:	2303      	movs	r3, #3
 800ed08:	73fb      	strb	r3, [r7, #15]
    break;
 800ed0a:	e002      	b.n	800ed12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ed0c:	2303      	movs	r3, #3
 800ed0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed10:	bf00      	nop
  }
  return usb_status;
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <__errno>:
 800ed20:	4b01      	ldr	r3, [pc, #4]	; (800ed28 <__errno+0x8>)
 800ed22:	6818      	ldr	r0, [r3, #0]
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	20000174 	.word	0x20000174

0800ed2c <__libc_init_array>:
 800ed2c:	b570      	push	{r4, r5, r6, lr}
 800ed2e:	4d0d      	ldr	r5, [pc, #52]	; (800ed64 <__libc_init_array+0x38>)
 800ed30:	4c0d      	ldr	r4, [pc, #52]	; (800ed68 <__libc_init_array+0x3c>)
 800ed32:	1b64      	subs	r4, r4, r5
 800ed34:	10a4      	asrs	r4, r4, #2
 800ed36:	2600      	movs	r6, #0
 800ed38:	42a6      	cmp	r6, r4
 800ed3a:	d109      	bne.n	800ed50 <__libc_init_array+0x24>
 800ed3c:	4d0b      	ldr	r5, [pc, #44]	; (800ed6c <__libc_init_array+0x40>)
 800ed3e:	4c0c      	ldr	r4, [pc, #48]	; (800ed70 <__libc_init_array+0x44>)
 800ed40:	f000 fd08 	bl	800f754 <_init>
 800ed44:	1b64      	subs	r4, r4, r5
 800ed46:	10a4      	asrs	r4, r4, #2
 800ed48:	2600      	movs	r6, #0
 800ed4a:	42a6      	cmp	r6, r4
 800ed4c:	d105      	bne.n	800ed5a <__libc_init_array+0x2e>
 800ed4e:	bd70      	pop	{r4, r5, r6, pc}
 800ed50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed54:	4798      	blx	r3
 800ed56:	3601      	adds	r6, #1
 800ed58:	e7ee      	b.n	800ed38 <__libc_init_array+0xc>
 800ed5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed5e:	4798      	blx	r3
 800ed60:	3601      	adds	r6, #1
 800ed62:	e7f2      	b.n	800ed4a <__libc_init_array+0x1e>
 800ed64:	08012484 	.word	0x08012484
 800ed68:	08012484 	.word	0x08012484
 800ed6c:	08012484 	.word	0x08012484
 800ed70:	08012488 	.word	0x08012488

0800ed74 <__retarget_lock_acquire_recursive>:
 800ed74:	4770      	bx	lr

0800ed76 <__retarget_lock_release_recursive>:
 800ed76:	4770      	bx	lr

0800ed78 <malloc>:
 800ed78:	4b02      	ldr	r3, [pc, #8]	; (800ed84 <malloc+0xc>)
 800ed7a:	4601      	mov	r1, r0
 800ed7c:	6818      	ldr	r0, [r3, #0]
 800ed7e:	f000 b88d 	b.w	800ee9c <_malloc_r>
 800ed82:	bf00      	nop
 800ed84:	20000174 	.word	0x20000174

0800ed88 <free>:
 800ed88:	4b02      	ldr	r3, [pc, #8]	; (800ed94 <free+0xc>)
 800ed8a:	4601      	mov	r1, r0
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	f000 b819 	b.w	800edc4 <_free_r>
 800ed92:	bf00      	nop
 800ed94:	20000174 	.word	0x20000174

0800ed98 <memcpy>:
 800ed98:	440a      	add	r2, r1
 800ed9a:	4291      	cmp	r1, r2
 800ed9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800eda0:	d100      	bne.n	800eda4 <memcpy+0xc>
 800eda2:	4770      	bx	lr
 800eda4:	b510      	push	{r4, lr}
 800eda6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edae:	4291      	cmp	r1, r2
 800edb0:	d1f9      	bne.n	800eda6 <memcpy+0xe>
 800edb2:	bd10      	pop	{r4, pc}

0800edb4 <memset>:
 800edb4:	4402      	add	r2, r0
 800edb6:	4603      	mov	r3, r0
 800edb8:	4293      	cmp	r3, r2
 800edba:	d100      	bne.n	800edbe <memset+0xa>
 800edbc:	4770      	bx	lr
 800edbe:	f803 1b01 	strb.w	r1, [r3], #1
 800edc2:	e7f9      	b.n	800edb8 <memset+0x4>

0800edc4 <_free_r>:
 800edc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edc6:	2900      	cmp	r1, #0
 800edc8:	d044      	beq.n	800ee54 <_free_r+0x90>
 800edca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edce:	9001      	str	r0, [sp, #4]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	f1a1 0404 	sub.w	r4, r1, #4
 800edd6:	bfb8      	it	lt
 800edd8:	18e4      	addlt	r4, r4, r3
 800edda:	f000 f96d 	bl	800f0b8 <__malloc_lock>
 800edde:	4a1e      	ldr	r2, [pc, #120]	; (800ee58 <_free_r+0x94>)
 800ede0:	9801      	ldr	r0, [sp, #4]
 800ede2:	6813      	ldr	r3, [r2, #0]
 800ede4:	b933      	cbnz	r3, 800edf4 <_free_r+0x30>
 800ede6:	6063      	str	r3, [r4, #4]
 800ede8:	6014      	str	r4, [r2, #0]
 800edea:	b003      	add	sp, #12
 800edec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edf0:	f000 b968 	b.w	800f0c4 <__malloc_unlock>
 800edf4:	42a3      	cmp	r3, r4
 800edf6:	d908      	bls.n	800ee0a <_free_r+0x46>
 800edf8:	6825      	ldr	r5, [r4, #0]
 800edfa:	1961      	adds	r1, r4, r5
 800edfc:	428b      	cmp	r3, r1
 800edfe:	bf01      	itttt	eq
 800ee00:	6819      	ldreq	r1, [r3, #0]
 800ee02:	685b      	ldreq	r3, [r3, #4]
 800ee04:	1949      	addeq	r1, r1, r5
 800ee06:	6021      	streq	r1, [r4, #0]
 800ee08:	e7ed      	b.n	800ede6 <_free_r+0x22>
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	b10b      	cbz	r3, 800ee14 <_free_r+0x50>
 800ee10:	42a3      	cmp	r3, r4
 800ee12:	d9fa      	bls.n	800ee0a <_free_r+0x46>
 800ee14:	6811      	ldr	r1, [r2, #0]
 800ee16:	1855      	adds	r5, r2, r1
 800ee18:	42a5      	cmp	r5, r4
 800ee1a:	d10b      	bne.n	800ee34 <_free_r+0x70>
 800ee1c:	6824      	ldr	r4, [r4, #0]
 800ee1e:	4421      	add	r1, r4
 800ee20:	1854      	adds	r4, r2, r1
 800ee22:	42a3      	cmp	r3, r4
 800ee24:	6011      	str	r1, [r2, #0]
 800ee26:	d1e0      	bne.n	800edea <_free_r+0x26>
 800ee28:	681c      	ldr	r4, [r3, #0]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	6053      	str	r3, [r2, #4]
 800ee2e:	4421      	add	r1, r4
 800ee30:	6011      	str	r1, [r2, #0]
 800ee32:	e7da      	b.n	800edea <_free_r+0x26>
 800ee34:	d902      	bls.n	800ee3c <_free_r+0x78>
 800ee36:	230c      	movs	r3, #12
 800ee38:	6003      	str	r3, [r0, #0]
 800ee3a:	e7d6      	b.n	800edea <_free_r+0x26>
 800ee3c:	6825      	ldr	r5, [r4, #0]
 800ee3e:	1961      	adds	r1, r4, r5
 800ee40:	428b      	cmp	r3, r1
 800ee42:	bf04      	itt	eq
 800ee44:	6819      	ldreq	r1, [r3, #0]
 800ee46:	685b      	ldreq	r3, [r3, #4]
 800ee48:	6063      	str	r3, [r4, #4]
 800ee4a:	bf04      	itt	eq
 800ee4c:	1949      	addeq	r1, r1, r5
 800ee4e:	6021      	streq	r1, [r4, #0]
 800ee50:	6054      	str	r4, [r2, #4]
 800ee52:	e7ca      	b.n	800edea <_free_r+0x26>
 800ee54:	b003      	add	sp, #12
 800ee56:	bd30      	pop	{r4, r5, pc}
 800ee58:	2001be50 	.word	0x2001be50

0800ee5c <sbrk_aligned>:
 800ee5c:	b570      	push	{r4, r5, r6, lr}
 800ee5e:	4e0e      	ldr	r6, [pc, #56]	; (800ee98 <sbrk_aligned+0x3c>)
 800ee60:	460c      	mov	r4, r1
 800ee62:	6831      	ldr	r1, [r6, #0]
 800ee64:	4605      	mov	r5, r0
 800ee66:	b911      	cbnz	r1, 800ee6e <sbrk_aligned+0x12>
 800ee68:	f000 f8f6 	bl	800f058 <_sbrk_r>
 800ee6c:	6030      	str	r0, [r6, #0]
 800ee6e:	4621      	mov	r1, r4
 800ee70:	4628      	mov	r0, r5
 800ee72:	f000 f8f1 	bl	800f058 <_sbrk_r>
 800ee76:	1c43      	adds	r3, r0, #1
 800ee78:	d00a      	beq.n	800ee90 <sbrk_aligned+0x34>
 800ee7a:	1cc4      	adds	r4, r0, #3
 800ee7c:	f024 0403 	bic.w	r4, r4, #3
 800ee80:	42a0      	cmp	r0, r4
 800ee82:	d007      	beq.n	800ee94 <sbrk_aligned+0x38>
 800ee84:	1a21      	subs	r1, r4, r0
 800ee86:	4628      	mov	r0, r5
 800ee88:	f000 f8e6 	bl	800f058 <_sbrk_r>
 800ee8c:	3001      	adds	r0, #1
 800ee8e:	d101      	bne.n	800ee94 <sbrk_aligned+0x38>
 800ee90:	f04f 34ff 	mov.w	r4, #4294967295
 800ee94:	4620      	mov	r0, r4
 800ee96:	bd70      	pop	{r4, r5, r6, pc}
 800ee98:	2001be54 	.word	0x2001be54

0800ee9c <_malloc_r>:
 800ee9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea0:	1ccd      	adds	r5, r1, #3
 800eea2:	f025 0503 	bic.w	r5, r5, #3
 800eea6:	3508      	adds	r5, #8
 800eea8:	2d0c      	cmp	r5, #12
 800eeaa:	bf38      	it	cc
 800eeac:	250c      	movcc	r5, #12
 800eeae:	2d00      	cmp	r5, #0
 800eeb0:	4607      	mov	r7, r0
 800eeb2:	db01      	blt.n	800eeb8 <_malloc_r+0x1c>
 800eeb4:	42a9      	cmp	r1, r5
 800eeb6:	d905      	bls.n	800eec4 <_malloc_r+0x28>
 800eeb8:	230c      	movs	r3, #12
 800eeba:	603b      	str	r3, [r7, #0]
 800eebc:	2600      	movs	r6, #0
 800eebe:	4630      	mov	r0, r6
 800eec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec4:	4e2e      	ldr	r6, [pc, #184]	; (800ef80 <_malloc_r+0xe4>)
 800eec6:	f000 f8f7 	bl	800f0b8 <__malloc_lock>
 800eeca:	6833      	ldr	r3, [r6, #0]
 800eecc:	461c      	mov	r4, r3
 800eece:	bb34      	cbnz	r4, 800ef1e <_malloc_r+0x82>
 800eed0:	4629      	mov	r1, r5
 800eed2:	4638      	mov	r0, r7
 800eed4:	f7ff ffc2 	bl	800ee5c <sbrk_aligned>
 800eed8:	1c43      	adds	r3, r0, #1
 800eeda:	4604      	mov	r4, r0
 800eedc:	d14d      	bne.n	800ef7a <_malloc_r+0xde>
 800eede:	6834      	ldr	r4, [r6, #0]
 800eee0:	4626      	mov	r6, r4
 800eee2:	2e00      	cmp	r6, #0
 800eee4:	d140      	bne.n	800ef68 <_malloc_r+0xcc>
 800eee6:	6823      	ldr	r3, [r4, #0]
 800eee8:	4631      	mov	r1, r6
 800eeea:	4638      	mov	r0, r7
 800eeec:	eb04 0803 	add.w	r8, r4, r3
 800eef0:	f000 f8b2 	bl	800f058 <_sbrk_r>
 800eef4:	4580      	cmp	r8, r0
 800eef6:	d13a      	bne.n	800ef6e <_malloc_r+0xd2>
 800eef8:	6821      	ldr	r1, [r4, #0]
 800eefa:	3503      	adds	r5, #3
 800eefc:	1a6d      	subs	r5, r5, r1
 800eefe:	f025 0503 	bic.w	r5, r5, #3
 800ef02:	3508      	adds	r5, #8
 800ef04:	2d0c      	cmp	r5, #12
 800ef06:	bf38      	it	cc
 800ef08:	250c      	movcc	r5, #12
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	4638      	mov	r0, r7
 800ef0e:	f7ff ffa5 	bl	800ee5c <sbrk_aligned>
 800ef12:	3001      	adds	r0, #1
 800ef14:	d02b      	beq.n	800ef6e <_malloc_r+0xd2>
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	442b      	add	r3, r5
 800ef1a:	6023      	str	r3, [r4, #0]
 800ef1c:	e00e      	b.n	800ef3c <_malloc_r+0xa0>
 800ef1e:	6822      	ldr	r2, [r4, #0]
 800ef20:	1b52      	subs	r2, r2, r5
 800ef22:	d41e      	bmi.n	800ef62 <_malloc_r+0xc6>
 800ef24:	2a0b      	cmp	r2, #11
 800ef26:	d916      	bls.n	800ef56 <_malloc_r+0xba>
 800ef28:	1961      	adds	r1, r4, r5
 800ef2a:	42a3      	cmp	r3, r4
 800ef2c:	6025      	str	r5, [r4, #0]
 800ef2e:	bf18      	it	ne
 800ef30:	6059      	strne	r1, [r3, #4]
 800ef32:	6863      	ldr	r3, [r4, #4]
 800ef34:	bf08      	it	eq
 800ef36:	6031      	streq	r1, [r6, #0]
 800ef38:	5162      	str	r2, [r4, r5]
 800ef3a:	604b      	str	r3, [r1, #4]
 800ef3c:	4638      	mov	r0, r7
 800ef3e:	f104 060b 	add.w	r6, r4, #11
 800ef42:	f000 f8bf 	bl	800f0c4 <__malloc_unlock>
 800ef46:	f026 0607 	bic.w	r6, r6, #7
 800ef4a:	1d23      	adds	r3, r4, #4
 800ef4c:	1af2      	subs	r2, r6, r3
 800ef4e:	d0b6      	beq.n	800eebe <_malloc_r+0x22>
 800ef50:	1b9b      	subs	r3, r3, r6
 800ef52:	50a3      	str	r3, [r4, r2]
 800ef54:	e7b3      	b.n	800eebe <_malloc_r+0x22>
 800ef56:	6862      	ldr	r2, [r4, #4]
 800ef58:	42a3      	cmp	r3, r4
 800ef5a:	bf0c      	ite	eq
 800ef5c:	6032      	streq	r2, [r6, #0]
 800ef5e:	605a      	strne	r2, [r3, #4]
 800ef60:	e7ec      	b.n	800ef3c <_malloc_r+0xa0>
 800ef62:	4623      	mov	r3, r4
 800ef64:	6864      	ldr	r4, [r4, #4]
 800ef66:	e7b2      	b.n	800eece <_malloc_r+0x32>
 800ef68:	4634      	mov	r4, r6
 800ef6a:	6876      	ldr	r6, [r6, #4]
 800ef6c:	e7b9      	b.n	800eee2 <_malloc_r+0x46>
 800ef6e:	230c      	movs	r3, #12
 800ef70:	603b      	str	r3, [r7, #0]
 800ef72:	4638      	mov	r0, r7
 800ef74:	f000 f8a6 	bl	800f0c4 <__malloc_unlock>
 800ef78:	e7a1      	b.n	800eebe <_malloc_r+0x22>
 800ef7a:	6025      	str	r5, [r4, #0]
 800ef7c:	e7de      	b.n	800ef3c <_malloc_r+0xa0>
 800ef7e:	bf00      	nop
 800ef80:	2001be50 	.word	0x2001be50

0800ef84 <cleanup_glue>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	460c      	mov	r4, r1
 800ef88:	6809      	ldr	r1, [r1, #0]
 800ef8a:	4605      	mov	r5, r0
 800ef8c:	b109      	cbz	r1, 800ef92 <cleanup_glue+0xe>
 800ef8e:	f7ff fff9 	bl	800ef84 <cleanup_glue>
 800ef92:	4621      	mov	r1, r4
 800ef94:	4628      	mov	r0, r5
 800ef96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef9a:	f7ff bf13 	b.w	800edc4 <_free_r>
	...

0800efa0 <_reclaim_reent>:
 800efa0:	4b2c      	ldr	r3, [pc, #176]	; (800f054 <_reclaim_reent+0xb4>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4283      	cmp	r3, r0
 800efa6:	b570      	push	{r4, r5, r6, lr}
 800efa8:	4604      	mov	r4, r0
 800efaa:	d051      	beq.n	800f050 <_reclaim_reent+0xb0>
 800efac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800efae:	b143      	cbz	r3, 800efc2 <_reclaim_reent+0x22>
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d14a      	bne.n	800f04c <_reclaim_reent+0xac>
 800efb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efb8:	6819      	ldr	r1, [r3, #0]
 800efba:	b111      	cbz	r1, 800efc2 <_reclaim_reent+0x22>
 800efbc:	4620      	mov	r0, r4
 800efbe:	f7ff ff01 	bl	800edc4 <_free_r>
 800efc2:	6961      	ldr	r1, [r4, #20]
 800efc4:	b111      	cbz	r1, 800efcc <_reclaim_reent+0x2c>
 800efc6:	4620      	mov	r0, r4
 800efc8:	f7ff fefc 	bl	800edc4 <_free_r>
 800efcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800efce:	b111      	cbz	r1, 800efd6 <_reclaim_reent+0x36>
 800efd0:	4620      	mov	r0, r4
 800efd2:	f7ff fef7 	bl	800edc4 <_free_r>
 800efd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800efd8:	b111      	cbz	r1, 800efe0 <_reclaim_reent+0x40>
 800efda:	4620      	mov	r0, r4
 800efdc:	f7ff fef2 	bl	800edc4 <_free_r>
 800efe0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800efe2:	b111      	cbz	r1, 800efea <_reclaim_reent+0x4a>
 800efe4:	4620      	mov	r0, r4
 800efe6:	f7ff feed 	bl	800edc4 <_free_r>
 800efea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800efec:	b111      	cbz	r1, 800eff4 <_reclaim_reent+0x54>
 800efee:	4620      	mov	r0, r4
 800eff0:	f7ff fee8 	bl	800edc4 <_free_r>
 800eff4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eff6:	b111      	cbz	r1, 800effe <_reclaim_reent+0x5e>
 800eff8:	4620      	mov	r0, r4
 800effa:	f7ff fee3 	bl	800edc4 <_free_r>
 800effe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f000:	b111      	cbz	r1, 800f008 <_reclaim_reent+0x68>
 800f002:	4620      	mov	r0, r4
 800f004:	f7ff fede 	bl	800edc4 <_free_r>
 800f008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f00a:	b111      	cbz	r1, 800f012 <_reclaim_reent+0x72>
 800f00c:	4620      	mov	r0, r4
 800f00e:	f7ff fed9 	bl	800edc4 <_free_r>
 800f012:	69a3      	ldr	r3, [r4, #24]
 800f014:	b1e3      	cbz	r3, 800f050 <_reclaim_reent+0xb0>
 800f016:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f018:	4620      	mov	r0, r4
 800f01a:	4798      	blx	r3
 800f01c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f01e:	b1b9      	cbz	r1, 800f050 <_reclaim_reent+0xb0>
 800f020:	4620      	mov	r0, r4
 800f022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f026:	f7ff bfad 	b.w	800ef84 <cleanup_glue>
 800f02a:	5949      	ldr	r1, [r1, r5]
 800f02c:	b941      	cbnz	r1, 800f040 <_reclaim_reent+0xa0>
 800f02e:	3504      	adds	r5, #4
 800f030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f032:	2d80      	cmp	r5, #128	; 0x80
 800f034:	68d9      	ldr	r1, [r3, #12]
 800f036:	d1f8      	bne.n	800f02a <_reclaim_reent+0x8a>
 800f038:	4620      	mov	r0, r4
 800f03a:	f7ff fec3 	bl	800edc4 <_free_r>
 800f03e:	e7ba      	b.n	800efb6 <_reclaim_reent+0x16>
 800f040:	680e      	ldr	r6, [r1, #0]
 800f042:	4620      	mov	r0, r4
 800f044:	f7ff febe 	bl	800edc4 <_free_r>
 800f048:	4631      	mov	r1, r6
 800f04a:	e7ef      	b.n	800f02c <_reclaim_reent+0x8c>
 800f04c:	2500      	movs	r5, #0
 800f04e:	e7ef      	b.n	800f030 <_reclaim_reent+0x90>
 800f050:	bd70      	pop	{r4, r5, r6, pc}
 800f052:	bf00      	nop
 800f054:	20000174 	.word	0x20000174

0800f058 <_sbrk_r>:
 800f058:	b538      	push	{r3, r4, r5, lr}
 800f05a:	4d06      	ldr	r5, [pc, #24]	; (800f074 <_sbrk_r+0x1c>)
 800f05c:	2300      	movs	r3, #0
 800f05e:	4604      	mov	r4, r0
 800f060:	4608      	mov	r0, r1
 800f062:	602b      	str	r3, [r5, #0]
 800f064:	f7f2 fbea 	bl	800183c <_sbrk>
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	d102      	bne.n	800f072 <_sbrk_r+0x1a>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	b103      	cbz	r3, 800f072 <_sbrk_r+0x1a>
 800f070:	6023      	str	r3, [r4, #0]
 800f072:	bd38      	pop	{r3, r4, r5, pc}
 800f074:	2001be58 	.word	0x2001be58

0800f078 <siprintf>:
 800f078:	b40e      	push	{r1, r2, r3}
 800f07a:	b500      	push	{lr}
 800f07c:	b09c      	sub	sp, #112	; 0x70
 800f07e:	ab1d      	add	r3, sp, #116	; 0x74
 800f080:	9002      	str	r0, [sp, #8]
 800f082:	9006      	str	r0, [sp, #24]
 800f084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f088:	4809      	ldr	r0, [pc, #36]	; (800f0b0 <siprintf+0x38>)
 800f08a:	9107      	str	r1, [sp, #28]
 800f08c:	9104      	str	r1, [sp, #16]
 800f08e:	4909      	ldr	r1, [pc, #36]	; (800f0b4 <siprintf+0x3c>)
 800f090:	f853 2b04 	ldr.w	r2, [r3], #4
 800f094:	9105      	str	r1, [sp, #20]
 800f096:	6800      	ldr	r0, [r0, #0]
 800f098:	9301      	str	r3, [sp, #4]
 800f09a:	a902      	add	r1, sp, #8
 800f09c:	f000 f874 	bl	800f188 <_svfiprintf_r>
 800f0a0:	9b02      	ldr	r3, [sp, #8]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	701a      	strb	r2, [r3, #0]
 800f0a6:	b01c      	add	sp, #112	; 0x70
 800f0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0ac:	b003      	add	sp, #12
 800f0ae:	4770      	bx	lr
 800f0b0:	20000174 	.word	0x20000174
 800f0b4:	ffff0208 	.word	0xffff0208

0800f0b8 <__malloc_lock>:
 800f0b8:	4801      	ldr	r0, [pc, #4]	; (800f0c0 <__malloc_lock+0x8>)
 800f0ba:	f7ff be5b 	b.w	800ed74 <__retarget_lock_acquire_recursive>
 800f0be:	bf00      	nop
 800f0c0:	2001be4c 	.word	0x2001be4c

0800f0c4 <__malloc_unlock>:
 800f0c4:	4801      	ldr	r0, [pc, #4]	; (800f0cc <__malloc_unlock+0x8>)
 800f0c6:	f7ff be56 	b.w	800ed76 <__retarget_lock_release_recursive>
 800f0ca:	bf00      	nop
 800f0cc:	2001be4c 	.word	0x2001be4c

0800f0d0 <__ssputs_r>:
 800f0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d4:	688e      	ldr	r6, [r1, #8]
 800f0d6:	429e      	cmp	r6, r3
 800f0d8:	4682      	mov	sl, r0
 800f0da:	460c      	mov	r4, r1
 800f0dc:	4690      	mov	r8, r2
 800f0de:	461f      	mov	r7, r3
 800f0e0:	d838      	bhi.n	800f154 <__ssputs_r+0x84>
 800f0e2:	898a      	ldrh	r2, [r1, #12]
 800f0e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0e8:	d032      	beq.n	800f150 <__ssputs_r+0x80>
 800f0ea:	6825      	ldr	r5, [r4, #0]
 800f0ec:	6909      	ldr	r1, [r1, #16]
 800f0ee:	eba5 0901 	sub.w	r9, r5, r1
 800f0f2:	6965      	ldr	r5, [r4, #20]
 800f0f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	444b      	add	r3, r9
 800f100:	106d      	asrs	r5, r5, #1
 800f102:	429d      	cmp	r5, r3
 800f104:	bf38      	it	cc
 800f106:	461d      	movcc	r5, r3
 800f108:	0553      	lsls	r3, r2, #21
 800f10a:	d531      	bpl.n	800f170 <__ssputs_r+0xa0>
 800f10c:	4629      	mov	r1, r5
 800f10e:	f7ff fec5 	bl	800ee9c <_malloc_r>
 800f112:	4606      	mov	r6, r0
 800f114:	b950      	cbnz	r0, 800f12c <__ssputs_r+0x5c>
 800f116:	230c      	movs	r3, #12
 800f118:	f8ca 3000 	str.w	r3, [sl]
 800f11c:	89a3      	ldrh	r3, [r4, #12]
 800f11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f122:	81a3      	strh	r3, [r4, #12]
 800f124:	f04f 30ff 	mov.w	r0, #4294967295
 800f128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f12c:	6921      	ldr	r1, [r4, #16]
 800f12e:	464a      	mov	r2, r9
 800f130:	f7ff fe32 	bl	800ed98 <memcpy>
 800f134:	89a3      	ldrh	r3, [r4, #12]
 800f136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f13e:	81a3      	strh	r3, [r4, #12]
 800f140:	6126      	str	r6, [r4, #16]
 800f142:	6165      	str	r5, [r4, #20]
 800f144:	444e      	add	r6, r9
 800f146:	eba5 0509 	sub.w	r5, r5, r9
 800f14a:	6026      	str	r6, [r4, #0]
 800f14c:	60a5      	str	r5, [r4, #8]
 800f14e:	463e      	mov	r6, r7
 800f150:	42be      	cmp	r6, r7
 800f152:	d900      	bls.n	800f156 <__ssputs_r+0x86>
 800f154:	463e      	mov	r6, r7
 800f156:	6820      	ldr	r0, [r4, #0]
 800f158:	4632      	mov	r2, r6
 800f15a:	4641      	mov	r1, r8
 800f15c:	f000 faa8 	bl	800f6b0 <memmove>
 800f160:	68a3      	ldr	r3, [r4, #8]
 800f162:	1b9b      	subs	r3, r3, r6
 800f164:	60a3      	str	r3, [r4, #8]
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	4433      	add	r3, r6
 800f16a:	6023      	str	r3, [r4, #0]
 800f16c:	2000      	movs	r0, #0
 800f16e:	e7db      	b.n	800f128 <__ssputs_r+0x58>
 800f170:	462a      	mov	r2, r5
 800f172:	f000 fab7 	bl	800f6e4 <_realloc_r>
 800f176:	4606      	mov	r6, r0
 800f178:	2800      	cmp	r0, #0
 800f17a:	d1e1      	bne.n	800f140 <__ssputs_r+0x70>
 800f17c:	6921      	ldr	r1, [r4, #16]
 800f17e:	4650      	mov	r0, sl
 800f180:	f7ff fe20 	bl	800edc4 <_free_r>
 800f184:	e7c7      	b.n	800f116 <__ssputs_r+0x46>
	...

0800f188 <_svfiprintf_r>:
 800f188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f18c:	4698      	mov	r8, r3
 800f18e:	898b      	ldrh	r3, [r1, #12]
 800f190:	061b      	lsls	r3, r3, #24
 800f192:	b09d      	sub	sp, #116	; 0x74
 800f194:	4607      	mov	r7, r0
 800f196:	460d      	mov	r5, r1
 800f198:	4614      	mov	r4, r2
 800f19a:	d50e      	bpl.n	800f1ba <_svfiprintf_r+0x32>
 800f19c:	690b      	ldr	r3, [r1, #16]
 800f19e:	b963      	cbnz	r3, 800f1ba <_svfiprintf_r+0x32>
 800f1a0:	2140      	movs	r1, #64	; 0x40
 800f1a2:	f7ff fe7b 	bl	800ee9c <_malloc_r>
 800f1a6:	6028      	str	r0, [r5, #0]
 800f1a8:	6128      	str	r0, [r5, #16]
 800f1aa:	b920      	cbnz	r0, 800f1b6 <_svfiprintf_r+0x2e>
 800f1ac:	230c      	movs	r3, #12
 800f1ae:	603b      	str	r3, [r7, #0]
 800f1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b4:	e0d1      	b.n	800f35a <_svfiprintf_r+0x1d2>
 800f1b6:	2340      	movs	r3, #64	; 0x40
 800f1b8:	616b      	str	r3, [r5, #20]
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f1be:	2320      	movs	r3, #32
 800f1c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1c8:	2330      	movs	r3, #48	; 0x30
 800f1ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f374 <_svfiprintf_r+0x1ec>
 800f1ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1d2:	f04f 0901 	mov.w	r9, #1
 800f1d6:	4623      	mov	r3, r4
 800f1d8:	469a      	mov	sl, r3
 800f1da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1de:	b10a      	cbz	r2, 800f1e4 <_svfiprintf_r+0x5c>
 800f1e0:	2a25      	cmp	r2, #37	; 0x25
 800f1e2:	d1f9      	bne.n	800f1d8 <_svfiprintf_r+0x50>
 800f1e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f1e8:	d00b      	beq.n	800f202 <_svfiprintf_r+0x7a>
 800f1ea:	465b      	mov	r3, fp
 800f1ec:	4622      	mov	r2, r4
 800f1ee:	4629      	mov	r1, r5
 800f1f0:	4638      	mov	r0, r7
 800f1f2:	f7ff ff6d 	bl	800f0d0 <__ssputs_r>
 800f1f6:	3001      	adds	r0, #1
 800f1f8:	f000 80aa 	beq.w	800f350 <_svfiprintf_r+0x1c8>
 800f1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1fe:	445a      	add	r2, fp
 800f200:	9209      	str	r2, [sp, #36]	; 0x24
 800f202:	f89a 3000 	ldrb.w	r3, [sl]
 800f206:	2b00      	cmp	r3, #0
 800f208:	f000 80a2 	beq.w	800f350 <_svfiprintf_r+0x1c8>
 800f20c:	2300      	movs	r3, #0
 800f20e:	f04f 32ff 	mov.w	r2, #4294967295
 800f212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f216:	f10a 0a01 	add.w	sl, sl, #1
 800f21a:	9304      	str	r3, [sp, #16]
 800f21c:	9307      	str	r3, [sp, #28]
 800f21e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f222:	931a      	str	r3, [sp, #104]	; 0x68
 800f224:	4654      	mov	r4, sl
 800f226:	2205      	movs	r2, #5
 800f228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f22c:	4851      	ldr	r0, [pc, #324]	; (800f374 <_svfiprintf_r+0x1ec>)
 800f22e:	f7f0 ffd7 	bl	80001e0 <memchr>
 800f232:	9a04      	ldr	r2, [sp, #16]
 800f234:	b9d8      	cbnz	r0, 800f26e <_svfiprintf_r+0xe6>
 800f236:	06d0      	lsls	r0, r2, #27
 800f238:	bf44      	itt	mi
 800f23a:	2320      	movmi	r3, #32
 800f23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f240:	0711      	lsls	r1, r2, #28
 800f242:	bf44      	itt	mi
 800f244:	232b      	movmi	r3, #43	; 0x2b
 800f246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f24a:	f89a 3000 	ldrb.w	r3, [sl]
 800f24e:	2b2a      	cmp	r3, #42	; 0x2a
 800f250:	d015      	beq.n	800f27e <_svfiprintf_r+0xf6>
 800f252:	9a07      	ldr	r2, [sp, #28]
 800f254:	4654      	mov	r4, sl
 800f256:	2000      	movs	r0, #0
 800f258:	f04f 0c0a 	mov.w	ip, #10
 800f25c:	4621      	mov	r1, r4
 800f25e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f262:	3b30      	subs	r3, #48	; 0x30
 800f264:	2b09      	cmp	r3, #9
 800f266:	d94e      	bls.n	800f306 <_svfiprintf_r+0x17e>
 800f268:	b1b0      	cbz	r0, 800f298 <_svfiprintf_r+0x110>
 800f26a:	9207      	str	r2, [sp, #28]
 800f26c:	e014      	b.n	800f298 <_svfiprintf_r+0x110>
 800f26e:	eba0 0308 	sub.w	r3, r0, r8
 800f272:	fa09 f303 	lsl.w	r3, r9, r3
 800f276:	4313      	orrs	r3, r2
 800f278:	9304      	str	r3, [sp, #16]
 800f27a:	46a2      	mov	sl, r4
 800f27c:	e7d2      	b.n	800f224 <_svfiprintf_r+0x9c>
 800f27e:	9b03      	ldr	r3, [sp, #12]
 800f280:	1d19      	adds	r1, r3, #4
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	9103      	str	r1, [sp, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	bfbb      	ittet	lt
 800f28a:	425b      	neglt	r3, r3
 800f28c:	f042 0202 	orrlt.w	r2, r2, #2
 800f290:	9307      	strge	r3, [sp, #28]
 800f292:	9307      	strlt	r3, [sp, #28]
 800f294:	bfb8      	it	lt
 800f296:	9204      	strlt	r2, [sp, #16]
 800f298:	7823      	ldrb	r3, [r4, #0]
 800f29a:	2b2e      	cmp	r3, #46	; 0x2e
 800f29c:	d10c      	bne.n	800f2b8 <_svfiprintf_r+0x130>
 800f29e:	7863      	ldrb	r3, [r4, #1]
 800f2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a2:	d135      	bne.n	800f310 <_svfiprintf_r+0x188>
 800f2a4:	9b03      	ldr	r3, [sp, #12]
 800f2a6:	1d1a      	adds	r2, r3, #4
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	9203      	str	r2, [sp, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	bfb8      	it	lt
 800f2b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2b4:	3402      	adds	r4, #2
 800f2b6:	9305      	str	r3, [sp, #20]
 800f2b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f384 <_svfiprintf_r+0x1fc>
 800f2bc:	7821      	ldrb	r1, [r4, #0]
 800f2be:	2203      	movs	r2, #3
 800f2c0:	4650      	mov	r0, sl
 800f2c2:	f7f0 ff8d 	bl	80001e0 <memchr>
 800f2c6:	b140      	cbz	r0, 800f2da <_svfiprintf_r+0x152>
 800f2c8:	2340      	movs	r3, #64	; 0x40
 800f2ca:	eba0 000a 	sub.w	r0, r0, sl
 800f2ce:	fa03 f000 	lsl.w	r0, r3, r0
 800f2d2:	9b04      	ldr	r3, [sp, #16]
 800f2d4:	4303      	orrs	r3, r0
 800f2d6:	3401      	adds	r4, #1
 800f2d8:	9304      	str	r3, [sp, #16]
 800f2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2de:	4826      	ldr	r0, [pc, #152]	; (800f378 <_svfiprintf_r+0x1f0>)
 800f2e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2e4:	2206      	movs	r2, #6
 800f2e6:	f7f0 ff7b 	bl	80001e0 <memchr>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d038      	beq.n	800f360 <_svfiprintf_r+0x1d8>
 800f2ee:	4b23      	ldr	r3, [pc, #140]	; (800f37c <_svfiprintf_r+0x1f4>)
 800f2f0:	bb1b      	cbnz	r3, 800f33a <_svfiprintf_r+0x1b2>
 800f2f2:	9b03      	ldr	r3, [sp, #12]
 800f2f4:	3307      	adds	r3, #7
 800f2f6:	f023 0307 	bic.w	r3, r3, #7
 800f2fa:	3308      	adds	r3, #8
 800f2fc:	9303      	str	r3, [sp, #12]
 800f2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f300:	4433      	add	r3, r6
 800f302:	9309      	str	r3, [sp, #36]	; 0x24
 800f304:	e767      	b.n	800f1d6 <_svfiprintf_r+0x4e>
 800f306:	fb0c 3202 	mla	r2, ip, r2, r3
 800f30a:	460c      	mov	r4, r1
 800f30c:	2001      	movs	r0, #1
 800f30e:	e7a5      	b.n	800f25c <_svfiprintf_r+0xd4>
 800f310:	2300      	movs	r3, #0
 800f312:	3401      	adds	r4, #1
 800f314:	9305      	str	r3, [sp, #20]
 800f316:	4619      	mov	r1, r3
 800f318:	f04f 0c0a 	mov.w	ip, #10
 800f31c:	4620      	mov	r0, r4
 800f31e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f322:	3a30      	subs	r2, #48	; 0x30
 800f324:	2a09      	cmp	r2, #9
 800f326:	d903      	bls.n	800f330 <_svfiprintf_r+0x1a8>
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d0c5      	beq.n	800f2b8 <_svfiprintf_r+0x130>
 800f32c:	9105      	str	r1, [sp, #20]
 800f32e:	e7c3      	b.n	800f2b8 <_svfiprintf_r+0x130>
 800f330:	fb0c 2101 	mla	r1, ip, r1, r2
 800f334:	4604      	mov	r4, r0
 800f336:	2301      	movs	r3, #1
 800f338:	e7f0      	b.n	800f31c <_svfiprintf_r+0x194>
 800f33a:	ab03      	add	r3, sp, #12
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	462a      	mov	r2, r5
 800f340:	4b0f      	ldr	r3, [pc, #60]	; (800f380 <_svfiprintf_r+0x1f8>)
 800f342:	a904      	add	r1, sp, #16
 800f344:	4638      	mov	r0, r7
 800f346:	f3af 8000 	nop.w
 800f34a:	1c42      	adds	r2, r0, #1
 800f34c:	4606      	mov	r6, r0
 800f34e:	d1d6      	bne.n	800f2fe <_svfiprintf_r+0x176>
 800f350:	89ab      	ldrh	r3, [r5, #12]
 800f352:	065b      	lsls	r3, r3, #25
 800f354:	f53f af2c 	bmi.w	800f1b0 <_svfiprintf_r+0x28>
 800f358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f35a:	b01d      	add	sp, #116	; 0x74
 800f35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f360:	ab03      	add	r3, sp, #12
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	462a      	mov	r2, r5
 800f366:	4b06      	ldr	r3, [pc, #24]	; (800f380 <_svfiprintf_r+0x1f8>)
 800f368:	a904      	add	r1, sp, #16
 800f36a:	4638      	mov	r0, r7
 800f36c:	f000 f87a 	bl	800f464 <_printf_i>
 800f370:	e7eb      	b.n	800f34a <_svfiprintf_r+0x1c2>
 800f372:	bf00      	nop
 800f374:	08012448 	.word	0x08012448
 800f378:	08012452 	.word	0x08012452
 800f37c:	00000000 	.word	0x00000000
 800f380:	0800f0d1 	.word	0x0800f0d1
 800f384:	0801244e 	.word	0x0801244e

0800f388 <_printf_common>:
 800f388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f38c:	4616      	mov	r6, r2
 800f38e:	4699      	mov	r9, r3
 800f390:	688a      	ldr	r2, [r1, #8]
 800f392:	690b      	ldr	r3, [r1, #16]
 800f394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f398:	4293      	cmp	r3, r2
 800f39a:	bfb8      	it	lt
 800f39c:	4613      	movlt	r3, r2
 800f39e:	6033      	str	r3, [r6, #0]
 800f3a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3a4:	4607      	mov	r7, r0
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	b10a      	cbz	r2, 800f3ae <_printf_common+0x26>
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	6033      	str	r3, [r6, #0]
 800f3ae:	6823      	ldr	r3, [r4, #0]
 800f3b0:	0699      	lsls	r1, r3, #26
 800f3b2:	bf42      	ittt	mi
 800f3b4:	6833      	ldrmi	r3, [r6, #0]
 800f3b6:	3302      	addmi	r3, #2
 800f3b8:	6033      	strmi	r3, [r6, #0]
 800f3ba:	6825      	ldr	r5, [r4, #0]
 800f3bc:	f015 0506 	ands.w	r5, r5, #6
 800f3c0:	d106      	bne.n	800f3d0 <_printf_common+0x48>
 800f3c2:	f104 0a19 	add.w	sl, r4, #25
 800f3c6:	68e3      	ldr	r3, [r4, #12]
 800f3c8:	6832      	ldr	r2, [r6, #0]
 800f3ca:	1a9b      	subs	r3, r3, r2
 800f3cc:	42ab      	cmp	r3, r5
 800f3ce:	dc26      	bgt.n	800f41e <_printf_common+0x96>
 800f3d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3d4:	1e13      	subs	r3, r2, #0
 800f3d6:	6822      	ldr	r2, [r4, #0]
 800f3d8:	bf18      	it	ne
 800f3da:	2301      	movne	r3, #1
 800f3dc:	0692      	lsls	r2, r2, #26
 800f3de:	d42b      	bmi.n	800f438 <_printf_common+0xb0>
 800f3e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3e4:	4649      	mov	r1, r9
 800f3e6:	4638      	mov	r0, r7
 800f3e8:	47c0      	blx	r8
 800f3ea:	3001      	adds	r0, #1
 800f3ec:	d01e      	beq.n	800f42c <_printf_common+0xa4>
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	68e5      	ldr	r5, [r4, #12]
 800f3f2:	6832      	ldr	r2, [r6, #0]
 800f3f4:	f003 0306 	and.w	r3, r3, #6
 800f3f8:	2b04      	cmp	r3, #4
 800f3fa:	bf08      	it	eq
 800f3fc:	1aad      	subeq	r5, r5, r2
 800f3fe:	68a3      	ldr	r3, [r4, #8]
 800f400:	6922      	ldr	r2, [r4, #16]
 800f402:	bf0c      	ite	eq
 800f404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f408:	2500      	movne	r5, #0
 800f40a:	4293      	cmp	r3, r2
 800f40c:	bfc4      	itt	gt
 800f40e:	1a9b      	subgt	r3, r3, r2
 800f410:	18ed      	addgt	r5, r5, r3
 800f412:	2600      	movs	r6, #0
 800f414:	341a      	adds	r4, #26
 800f416:	42b5      	cmp	r5, r6
 800f418:	d11a      	bne.n	800f450 <_printf_common+0xc8>
 800f41a:	2000      	movs	r0, #0
 800f41c:	e008      	b.n	800f430 <_printf_common+0xa8>
 800f41e:	2301      	movs	r3, #1
 800f420:	4652      	mov	r2, sl
 800f422:	4649      	mov	r1, r9
 800f424:	4638      	mov	r0, r7
 800f426:	47c0      	blx	r8
 800f428:	3001      	adds	r0, #1
 800f42a:	d103      	bne.n	800f434 <_printf_common+0xac>
 800f42c:	f04f 30ff 	mov.w	r0, #4294967295
 800f430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f434:	3501      	adds	r5, #1
 800f436:	e7c6      	b.n	800f3c6 <_printf_common+0x3e>
 800f438:	18e1      	adds	r1, r4, r3
 800f43a:	1c5a      	adds	r2, r3, #1
 800f43c:	2030      	movs	r0, #48	; 0x30
 800f43e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f442:	4422      	add	r2, r4
 800f444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f44c:	3302      	adds	r3, #2
 800f44e:	e7c7      	b.n	800f3e0 <_printf_common+0x58>
 800f450:	2301      	movs	r3, #1
 800f452:	4622      	mov	r2, r4
 800f454:	4649      	mov	r1, r9
 800f456:	4638      	mov	r0, r7
 800f458:	47c0      	blx	r8
 800f45a:	3001      	adds	r0, #1
 800f45c:	d0e6      	beq.n	800f42c <_printf_common+0xa4>
 800f45e:	3601      	adds	r6, #1
 800f460:	e7d9      	b.n	800f416 <_printf_common+0x8e>
	...

0800f464 <_printf_i>:
 800f464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f468:	7e0f      	ldrb	r7, [r1, #24]
 800f46a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f46c:	2f78      	cmp	r7, #120	; 0x78
 800f46e:	4691      	mov	r9, r2
 800f470:	4680      	mov	r8, r0
 800f472:	460c      	mov	r4, r1
 800f474:	469a      	mov	sl, r3
 800f476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f47a:	d807      	bhi.n	800f48c <_printf_i+0x28>
 800f47c:	2f62      	cmp	r7, #98	; 0x62
 800f47e:	d80a      	bhi.n	800f496 <_printf_i+0x32>
 800f480:	2f00      	cmp	r7, #0
 800f482:	f000 80d8 	beq.w	800f636 <_printf_i+0x1d2>
 800f486:	2f58      	cmp	r7, #88	; 0x58
 800f488:	f000 80a3 	beq.w	800f5d2 <_printf_i+0x16e>
 800f48c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f494:	e03a      	b.n	800f50c <_printf_i+0xa8>
 800f496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f49a:	2b15      	cmp	r3, #21
 800f49c:	d8f6      	bhi.n	800f48c <_printf_i+0x28>
 800f49e:	a101      	add	r1, pc, #4	; (adr r1, 800f4a4 <_printf_i+0x40>)
 800f4a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4a4:	0800f4fd 	.word	0x0800f4fd
 800f4a8:	0800f511 	.word	0x0800f511
 800f4ac:	0800f48d 	.word	0x0800f48d
 800f4b0:	0800f48d 	.word	0x0800f48d
 800f4b4:	0800f48d 	.word	0x0800f48d
 800f4b8:	0800f48d 	.word	0x0800f48d
 800f4bc:	0800f511 	.word	0x0800f511
 800f4c0:	0800f48d 	.word	0x0800f48d
 800f4c4:	0800f48d 	.word	0x0800f48d
 800f4c8:	0800f48d 	.word	0x0800f48d
 800f4cc:	0800f48d 	.word	0x0800f48d
 800f4d0:	0800f61d 	.word	0x0800f61d
 800f4d4:	0800f541 	.word	0x0800f541
 800f4d8:	0800f5ff 	.word	0x0800f5ff
 800f4dc:	0800f48d 	.word	0x0800f48d
 800f4e0:	0800f48d 	.word	0x0800f48d
 800f4e4:	0800f63f 	.word	0x0800f63f
 800f4e8:	0800f48d 	.word	0x0800f48d
 800f4ec:	0800f541 	.word	0x0800f541
 800f4f0:	0800f48d 	.word	0x0800f48d
 800f4f4:	0800f48d 	.word	0x0800f48d
 800f4f8:	0800f607 	.word	0x0800f607
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	1d1a      	adds	r2, r3, #4
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	602a      	str	r2, [r5, #0]
 800f504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f50c:	2301      	movs	r3, #1
 800f50e:	e0a3      	b.n	800f658 <_printf_i+0x1f4>
 800f510:	6820      	ldr	r0, [r4, #0]
 800f512:	6829      	ldr	r1, [r5, #0]
 800f514:	0606      	lsls	r6, r0, #24
 800f516:	f101 0304 	add.w	r3, r1, #4
 800f51a:	d50a      	bpl.n	800f532 <_printf_i+0xce>
 800f51c:	680e      	ldr	r6, [r1, #0]
 800f51e:	602b      	str	r3, [r5, #0]
 800f520:	2e00      	cmp	r6, #0
 800f522:	da03      	bge.n	800f52c <_printf_i+0xc8>
 800f524:	232d      	movs	r3, #45	; 0x2d
 800f526:	4276      	negs	r6, r6
 800f528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f52c:	485e      	ldr	r0, [pc, #376]	; (800f6a8 <_printf_i+0x244>)
 800f52e:	230a      	movs	r3, #10
 800f530:	e019      	b.n	800f566 <_printf_i+0x102>
 800f532:	680e      	ldr	r6, [r1, #0]
 800f534:	602b      	str	r3, [r5, #0]
 800f536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f53a:	bf18      	it	ne
 800f53c:	b236      	sxthne	r6, r6
 800f53e:	e7ef      	b.n	800f520 <_printf_i+0xbc>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	6820      	ldr	r0, [r4, #0]
 800f544:	1d19      	adds	r1, r3, #4
 800f546:	6029      	str	r1, [r5, #0]
 800f548:	0601      	lsls	r1, r0, #24
 800f54a:	d501      	bpl.n	800f550 <_printf_i+0xec>
 800f54c:	681e      	ldr	r6, [r3, #0]
 800f54e:	e002      	b.n	800f556 <_printf_i+0xf2>
 800f550:	0646      	lsls	r6, r0, #25
 800f552:	d5fb      	bpl.n	800f54c <_printf_i+0xe8>
 800f554:	881e      	ldrh	r6, [r3, #0]
 800f556:	4854      	ldr	r0, [pc, #336]	; (800f6a8 <_printf_i+0x244>)
 800f558:	2f6f      	cmp	r7, #111	; 0x6f
 800f55a:	bf0c      	ite	eq
 800f55c:	2308      	moveq	r3, #8
 800f55e:	230a      	movne	r3, #10
 800f560:	2100      	movs	r1, #0
 800f562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f566:	6865      	ldr	r5, [r4, #4]
 800f568:	60a5      	str	r5, [r4, #8]
 800f56a:	2d00      	cmp	r5, #0
 800f56c:	bfa2      	ittt	ge
 800f56e:	6821      	ldrge	r1, [r4, #0]
 800f570:	f021 0104 	bicge.w	r1, r1, #4
 800f574:	6021      	strge	r1, [r4, #0]
 800f576:	b90e      	cbnz	r6, 800f57c <_printf_i+0x118>
 800f578:	2d00      	cmp	r5, #0
 800f57a:	d04d      	beq.n	800f618 <_printf_i+0x1b4>
 800f57c:	4615      	mov	r5, r2
 800f57e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f582:	fb03 6711 	mls	r7, r3, r1, r6
 800f586:	5dc7      	ldrb	r7, [r0, r7]
 800f588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f58c:	4637      	mov	r7, r6
 800f58e:	42bb      	cmp	r3, r7
 800f590:	460e      	mov	r6, r1
 800f592:	d9f4      	bls.n	800f57e <_printf_i+0x11a>
 800f594:	2b08      	cmp	r3, #8
 800f596:	d10b      	bne.n	800f5b0 <_printf_i+0x14c>
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	07de      	lsls	r6, r3, #31
 800f59c:	d508      	bpl.n	800f5b0 <_printf_i+0x14c>
 800f59e:	6923      	ldr	r3, [r4, #16]
 800f5a0:	6861      	ldr	r1, [r4, #4]
 800f5a2:	4299      	cmp	r1, r3
 800f5a4:	bfde      	ittt	le
 800f5a6:	2330      	movle	r3, #48	; 0x30
 800f5a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f5b0:	1b52      	subs	r2, r2, r5
 800f5b2:	6122      	str	r2, [r4, #16]
 800f5b4:	f8cd a000 	str.w	sl, [sp]
 800f5b8:	464b      	mov	r3, r9
 800f5ba:	aa03      	add	r2, sp, #12
 800f5bc:	4621      	mov	r1, r4
 800f5be:	4640      	mov	r0, r8
 800f5c0:	f7ff fee2 	bl	800f388 <_printf_common>
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	d14c      	bne.n	800f662 <_printf_i+0x1fe>
 800f5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5cc:	b004      	add	sp, #16
 800f5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5d2:	4835      	ldr	r0, [pc, #212]	; (800f6a8 <_printf_i+0x244>)
 800f5d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f5d8:	6829      	ldr	r1, [r5, #0]
 800f5da:	6823      	ldr	r3, [r4, #0]
 800f5dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5e0:	6029      	str	r1, [r5, #0]
 800f5e2:	061d      	lsls	r5, r3, #24
 800f5e4:	d514      	bpl.n	800f610 <_printf_i+0x1ac>
 800f5e6:	07df      	lsls	r7, r3, #31
 800f5e8:	bf44      	itt	mi
 800f5ea:	f043 0320 	orrmi.w	r3, r3, #32
 800f5ee:	6023      	strmi	r3, [r4, #0]
 800f5f0:	b91e      	cbnz	r6, 800f5fa <_printf_i+0x196>
 800f5f2:	6823      	ldr	r3, [r4, #0]
 800f5f4:	f023 0320 	bic.w	r3, r3, #32
 800f5f8:	6023      	str	r3, [r4, #0]
 800f5fa:	2310      	movs	r3, #16
 800f5fc:	e7b0      	b.n	800f560 <_printf_i+0xfc>
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	f043 0320 	orr.w	r3, r3, #32
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	2378      	movs	r3, #120	; 0x78
 800f608:	4828      	ldr	r0, [pc, #160]	; (800f6ac <_printf_i+0x248>)
 800f60a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f60e:	e7e3      	b.n	800f5d8 <_printf_i+0x174>
 800f610:	0659      	lsls	r1, r3, #25
 800f612:	bf48      	it	mi
 800f614:	b2b6      	uxthmi	r6, r6
 800f616:	e7e6      	b.n	800f5e6 <_printf_i+0x182>
 800f618:	4615      	mov	r5, r2
 800f61a:	e7bb      	b.n	800f594 <_printf_i+0x130>
 800f61c:	682b      	ldr	r3, [r5, #0]
 800f61e:	6826      	ldr	r6, [r4, #0]
 800f620:	6961      	ldr	r1, [r4, #20]
 800f622:	1d18      	adds	r0, r3, #4
 800f624:	6028      	str	r0, [r5, #0]
 800f626:	0635      	lsls	r5, r6, #24
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	d501      	bpl.n	800f630 <_printf_i+0x1cc>
 800f62c:	6019      	str	r1, [r3, #0]
 800f62e:	e002      	b.n	800f636 <_printf_i+0x1d2>
 800f630:	0670      	lsls	r0, r6, #25
 800f632:	d5fb      	bpl.n	800f62c <_printf_i+0x1c8>
 800f634:	8019      	strh	r1, [r3, #0]
 800f636:	2300      	movs	r3, #0
 800f638:	6123      	str	r3, [r4, #16]
 800f63a:	4615      	mov	r5, r2
 800f63c:	e7ba      	b.n	800f5b4 <_printf_i+0x150>
 800f63e:	682b      	ldr	r3, [r5, #0]
 800f640:	1d1a      	adds	r2, r3, #4
 800f642:	602a      	str	r2, [r5, #0]
 800f644:	681d      	ldr	r5, [r3, #0]
 800f646:	6862      	ldr	r2, [r4, #4]
 800f648:	2100      	movs	r1, #0
 800f64a:	4628      	mov	r0, r5
 800f64c:	f7f0 fdc8 	bl	80001e0 <memchr>
 800f650:	b108      	cbz	r0, 800f656 <_printf_i+0x1f2>
 800f652:	1b40      	subs	r0, r0, r5
 800f654:	6060      	str	r0, [r4, #4]
 800f656:	6863      	ldr	r3, [r4, #4]
 800f658:	6123      	str	r3, [r4, #16]
 800f65a:	2300      	movs	r3, #0
 800f65c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f660:	e7a8      	b.n	800f5b4 <_printf_i+0x150>
 800f662:	6923      	ldr	r3, [r4, #16]
 800f664:	462a      	mov	r2, r5
 800f666:	4649      	mov	r1, r9
 800f668:	4640      	mov	r0, r8
 800f66a:	47d0      	blx	sl
 800f66c:	3001      	adds	r0, #1
 800f66e:	d0ab      	beq.n	800f5c8 <_printf_i+0x164>
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	079b      	lsls	r3, r3, #30
 800f674:	d413      	bmi.n	800f69e <_printf_i+0x23a>
 800f676:	68e0      	ldr	r0, [r4, #12]
 800f678:	9b03      	ldr	r3, [sp, #12]
 800f67a:	4298      	cmp	r0, r3
 800f67c:	bfb8      	it	lt
 800f67e:	4618      	movlt	r0, r3
 800f680:	e7a4      	b.n	800f5cc <_printf_i+0x168>
 800f682:	2301      	movs	r3, #1
 800f684:	4632      	mov	r2, r6
 800f686:	4649      	mov	r1, r9
 800f688:	4640      	mov	r0, r8
 800f68a:	47d0      	blx	sl
 800f68c:	3001      	adds	r0, #1
 800f68e:	d09b      	beq.n	800f5c8 <_printf_i+0x164>
 800f690:	3501      	adds	r5, #1
 800f692:	68e3      	ldr	r3, [r4, #12]
 800f694:	9903      	ldr	r1, [sp, #12]
 800f696:	1a5b      	subs	r3, r3, r1
 800f698:	42ab      	cmp	r3, r5
 800f69a:	dcf2      	bgt.n	800f682 <_printf_i+0x21e>
 800f69c:	e7eb      	b.n	800f676 <_printf_i+0x212>
 800f69e:	2500      	movs	r5, #0
 800f6a0:	f104 0619 	add.w	r6, r4, #25
 800f6a4:	e7f5      	b.n	800f692 <_printf_i+0x22e>
 800f6a6:	bf00      	nop
 800f6a8:	08012459 	.word	0x08012459
 800f6ac:	0801246a 	.word	0x0801246a

0800f6b0 <memmove>:
 800f6b0:	4288      	cmp	r0, r1
 800f6b2:	b510      	push	{r4, lr}
 800f6b4:	eb01 0402 	add.w	r4, r1, r2
 800f6b8:	d902      	bls.n	800f6c0 <memmove+0x10>
 800f6ba:	4284      	cmp	r4, r0
 800f6bc:	4623      	mov	r3, r4
 800f6be:	d807      	bhi.n	800f6d0 <memmove+0x20>
 800f6c0:	1e43      	subs	r3, r0, #1
 800f6c2:	42a1      	cmp	r1, r4
 800f6c4:	d008      	beq.n	800f6d8 <memmove+0x28>
 800f6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6ce:	e7f8      	b.n	800f6c2 <memmove+0x12>
 800f6d0:	4402      	add	r2, r0
 800f6d2:	4601      	mov	r1, r0
 800f6d4:	428a      	cmp	r2, r1
 800f6d6:	d100      	bne.n	800f6da <memmove+0x2a>
 800f6d8:	bd10      	pop	{r4, pc}
 800f6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6e2:	e7f7      	b.n	800f6d4 <memmove+0x24>

0800f6e4 <_realloc_r>:
 800f6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e8:	4680      	mov	r8, r0
 800f6ea:	4614      	mov	r4, r2
 800f6ec:	460e      	mov	r6, r1
 800f6ee:	b921      	cbnz	r1, 800f6fa <_realloc_r+0x16>
 800f6f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	f7ff bbd1 	b.w	800ee9c <_malloc_r>
 800f6fa:	b92a      	cbnz	r2, 800f708 <_realloc_r+0x24>
 800f6fc:	f7ff fb62 	bl	800edc4 <_free_r>
 800f700:	4625      	mov	r5, r4
 800f702:	4628      	mov	r0, r5
 800f704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f708:	f000 f81b 	bl	800f742 <_malloc_usable_size_r>
 800f70c:	4284      	cmp	r4, r0
 800f70e:	4607      	mov	r7, r0
 800f710:	d802      	bhi.n	800f718 <_realloc_r+0x34>
 800f712:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f716:	d812      	bhi.n	800f73e <_realloc_r+0x5a>
 800f718:	4621      	mov	r1, r4
 800f71a:	4640      	mov	r0, r8
 800f71c:	f7ff fbbe 	bl	800ee9c <_malloc_r>
 800f720:	4605      	mov	r5, r0
 800f722:	2800      	cmp	r0, #0
 800f724:	d0ed      	beq.n	800f702 <_realloc_r+0x1e>
 800f726:	42bc      	cmp	r4, r7
 800f728:	4622      	mov	r2, r4
 800f72a:	4631      	mov	r1, r6
 800f72c:	bf28      	it	cs
 800f72e:	463a      	movcs	r2, r7
 800f730:	f7ff fb32 	bl	800ed98 <memcpy>
 800f734:	4631      	mov	r1, r6
 800f736:	4640      	mov	r0, r8
 800f738:	f7ff fb44 	bl	800edc4 <_free_r>
 800f73c:	e7e1      	b.n	800f702 <_realloc_r+0x1e>
 800f73e:	4635      	mov	r5, r6
 800f740:	e7df      	b.n	800f702 <_realloc_r+0x1e>

0800f742 <_malloc_usable_size_r>:
 800f742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f746:	1f18      	subs	r0, r3, #4
 800f748:	2b00      	cmp	r3, #0
 800f74a:	bfbc      	itt	lt
 800f74c:	580b      	ldrlt	r3, [r1, r0]
 800f74e:	18c0      	addlt	r0, r0, r3
 800f750:	4770      	bx	lr
	...

0800f754 <_init>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	bf00      	nop
 800f758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75a:	bc08      	pop	{r3}
 800f75c:	469e      	mov	lr, r3
 800f75e:	4770      	bx	lr

0800f760 <_fini>:
 800f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f762:	bf00      	nop
 800f764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f766:	bc08      	pop	{r3}
 800f768:	469e      	mov	lr, r3
 800f76a:	4770      	bx	lr


rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f078  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002584  0800f218  0800f218  0001f218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801179c  0801179c  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  0801179c  0801179c  0002179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117a4  080117a4  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117a4  080117a4  000217a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080117a8  080117a8  000217a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  080117ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bc7c  20000174  08011920  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  2001bdf0  08011920  0003bdf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a359  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000632d  00000000  00000000  0005a4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002170  00000000  00000000  00060830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb8  00000000  00000000  000629a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f372  00000000  00000000  00064858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d74b  00000000  00000000  00083bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a677f  00000000  00000000  000b1315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008de8  00000000  00000000  00157ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f200 	.word	0x0800f200

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	0800f200 	.word	0x0800f200

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <displayBand>:
};
const int lastBand = (sizeof band / sizeof(Band)) - 1;
char buff[20];

void displayBand(int band_index)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 //      	ST7735_WriteString(0, 29, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 //      	sprintf(buff, "%s - %s", band[band_index].NminFreq, band[band_index].NmaxFreq);
 //      	ST7735_WriteString(0, 46, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 //   }

}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <getRunTimeCounterValue+0x14>)
 800050e:	681b      	ldr	r3, [r3, #0]
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	200001fc 	.word	0x200001fc

08000520 <vApplicationIdleHook>:


/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	//vTaskList(taskListStatus);
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &EncoderQueue_attributes);
 8000534:	4a18      	ldr	r2, [pc, #96]	; (8000598 <MX_FREERTOS_Init+0x68>)
 8000536:	2102      	movs	r1, #2
 8000538:	2001      	movs	r0, #1
 800053a:	f00b f930 	bl	800b79e <osMessageQueueNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a16      	ldr	r2, [pc, #88]	; (800059c <MX_FREERTOS_Init+0x6c>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &ButtonQueue_attributes);
 8000544:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <MX_FREERTOS_Init+0x70>)
 8000546:	2102      	movs	r1, #2
 8000548:	2001      	movs	r0, #1
 800054a:	f00b f928 	bl	800b79e <osMessageQueueNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <MX_FREERTOS_Init+0x74>)
 8000552:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <MX_FREERTOS_Init+0x78>)
 8000556:	2100      	movs	r1, #0
 8000558:	4814      	ldr	r0, [pc, #80]	; (80005ac <MX_FREERTOS_Init+0x7c>)
 800055a:	f00b f873 	bl	800b644 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <MX_FREERTOS_Init+0x80>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000564:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <MX_FREERTOS_Init+0x84>)
 8000566:	2100      	movs	r1, #0
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <MX_FREERTOS_Init+0x88>)
 800056a:	f00b f86b 	bl	800b644 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a12      	ldr	r2, [pc, #72]	; (80005bc <MX_FREERTOS_Init+0x8c>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000574:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <MX_FREERTOS_Init+0x90>)
 8000576:	2100      	movs	r1, #0
 8000578:	4812      	ldr	r0, [pc, #72]	; (80005c4 <MX_FREERTOS_Init+0x94>)
 800057a:	f00b f863 	bl	800b644 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <MX_FREERTOS_Init+0x98>)
 8000582:	6013      	str	r3, [r2, #0]

  /* creation of beaconTask */
  beaconTaskHandle = osThreadNew(StartBeaconTask, NULL, &beaconTask_attributes);
 8000584:	4a11      	ldr	r2, [pc, #68]	; (80005cc <MX_FREERTOS_Init+0x9c>)
 8000586:	2100      	movs	r1, #0
 8000588:	4811      	ldr	r0, [pc, #68]	; (80005d0 <MX_FREERTOS_Init+0xa0>)
 800058a:	f00b f85b 	bl	800b644 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <MX_FREERTOS_Init+0xa4>)
 8000592:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	0801167c 	.word	0x0801167c
 800059c:	200001a0 	.word	0x200001a0
 80005a0:	08011694 	.word	0x08011694
 80005a4:	200001a4 	.word	0x200001a4
 80005a8:	080115ec 	.word	0x080115ec
 80005ac:	080005d9 	.word	0x080005d9
 80005b0:	20000190 	.word	0x20000190
 80005b4:	08011610 	.word	0x08011610
 80005b8:	080005f1 	.word	0x080005f1
 80005bc:	20000194 	.word	0x20000194
 80005c0:	08011634 	.word	0x08011634
 80005c4:	080006c1 	.word	0x080006c1
 80005c8:	20000198 	.word	0x20000198
 80005cc:	08011658 	.word	0x08011658
 80005d0:	08000785 	.word	0x08000785
 80005d4:	2000019c 	.word	0x2000019c

080005d8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005e0:	f00d ff6c 	bl	800e4bc <MX_USB_DEVICE_Init>
		//CDC_Transmit_FS(buff, sizeof(buff));
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		//delay_us(1000);
		//fadeIN(0,100,2);
		//fadeOUT(0,100,2);
		osDelay(1000);
 80005e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e8:	f00b f8be 	bl	800b768 <osDelay>
 80005ec:	e7fa      	b.n	80005e4 <StartDefaultTask+0xc>
	...

080005f0 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	osStatus_t taskMessageHandler;
	int32_t counter = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
	int16_t button = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	81fb      	strh	r3, [r7, #14]
	int32_t last_counter = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
	int16_t max_index = 5;
 8000604:	2305      	movs	r3, #5
 8000606:	837b      	strh	r3, [r7, #26]
	ST7735_FillScreenFast(ST7735_BLACK);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 feca 	bl	80013a2 <ST7735_FillScreenFast>
	displayBand(last_counter);
 800060e:	69f8      	ldr	r0, [r7, #28]
 8000610:	f7ff ff68 	bl	80004e4 <displayBand>

	for (;;) {
		//Encoder Rotate
		taskMessageHandler = osMessageQueueGet(EncoderQueueHandle, &counter, 0,
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <StartDisplayTask+0xc4>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	f107 0110 	add.w	r1, r7, #16
 800061c:	2300      	movs	r3, #0
 800061e:	2200      	movs	r2, #0
 8000620:	f00b f990 	bl	800b944 <osMessageQueueGet>
 8000624:	6178      	str	r0, [r7, #20]
				0);
		if (taskMessageHandler == osOK)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d135      	bne.n	8000698 <StartDisplayTask+0xa8>
		{
			if (counter == 2) {
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	2b02      	cmp	r3, #2
 8000630:	d118      	bne.n	8000664 <StartDisplayTask+0x74>
				if (last_counter != max_index - 1) {
 8000632:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000636:	3b01      	subs	r3, #1
 8000638:	69fa      	ldr	r2, [r7, #28]
 800063a:	429a      	cmp	r2, r3
 800063c:	d00a      	beq.n	8000654 <StartDisplayTask+0x64>
					current_freq += 1;
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <StartDisplayTask+0xc8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <StartDisplayTask+0xc8>)
 8000646:	6013      	str	r3, [r2, #0]
					last_counter += 1;
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	3301      	adds	r3, #1
 800064c:	61fb      	str	r3, [r7, #28]
					counter = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	e003      	b.n	800065c <StartDisplayTask+0x6c>
				} else {
					last_counter = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
					counter = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
				}
				displayBand(last_counter);
 800065c:	69f8      	ldr	r0, [r7, #28]
 800065e:	f7ff ff41 	bl	80004e4 <displayBand>
 8000662:	e019      	b.n	8000698 <StartDisplayTask+0xa8>
				//setBand(last_counter);
			} else if (counter == 1) {
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d116      	bne.n	8000698 <StartDisplayTask+0xa8>
				if (last_counter != 0) {
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00a      	beq.n	8000686 <StartDisplayTask+0x96>
					current_freq -= 1;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <StartDisplayTask+0xc8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <StartDisplayTask+0xc8>)
 8000678:	6013      	str	r3, [r2, #0]
					last_counter -= 1;
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3b01      	subs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
					counter = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	e005      	b.n	8000692 <StartDisplayTask+0xa2>
				} else {
					last_counter = max_index - 1;
 8000686:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800068a:	3b01      	subs	r3, #1
 800068c:	61fb      	str	r3, [r7, #28]
					counter = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
				}
				displayBand(last_counter);
 8000692:	69f8      	ldr	r0, [r7, #28]
 8000694:	f7ff ff26 	bl	80004e4 <displayBand>
			} else {

			}
		}
		//Button click
		osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <StartDisplayTask+0xcc>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f107 010e 	add.w	r1, r7, #14
 80006a0:	2300      	movs	r3, #0
 80006a2:	2200      	movs	r2, #0
 80006a4:	f00b f94e 	bl	800b944 <osMessageQueueGet>
		if (button) {

		}
		osDelay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f00b f85c 	bl	800b768 <osDelay>
		taskMessageHandler = osMessageQueueGet(EncoderQueueHandle, &counter, 0,
 80006b0:	e7b0      	b.n	8000614 <StartDisplayTask+0x24>
 80006b2:	bf00      	nop
 80006b4:	200001a0 	.word	0x200001a0
 80006b8:	20000200 	.word	0x20000200
 80006bc:	200001a4 	.word	0x200001a4

080006c0 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	76fb      	strb	r3, [r7, #27]
	uint8_t buttonSend = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <StartEncoderTask+0xb4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	617b      	str	r3, [r7, #20]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	0fda      	lsrs	r2, r3, #31
 80006e8:	4413      	add	r3, r2
 80006ea:	105b      	asrs	r3, r3, #1
 80006ec:	425b      	negs	r3, r3
 80006ee:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80006f2:	337f      	adds	r3, #127	; 0x7f
 80006f4:	617b      	str	r3, [r7, #20]
		if (currCounter != prevCounter) {
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d024      	beq.n	8000748 <StartEncoderTask+0x88>
			if (currCounter > prevCounter) {
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	429a      	cmp	r2, r3
 8000704:	dd0d      	ble.n	8000722 <StartEncoderTask+0x62>
				counter = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <StartEncoderTask+0xb8>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	f107 0110 	add.w	r1, r7, #16
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	f00b f8b5 	bl	800b884 <osMessageQueuePut>
				osDelay(5);
 800071a:	2005      	movs	r0, #5
 800071c:	f00b f824 	bl	800b768 <osDelay>
 8000720:	e010      	b.n	8000744 <StartEncoderTask+0x84>
			} else if (currCounter < prevCounter) {
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	429a      	cmp	r2, r3
 8000728:	da0c      	bge.n	8000744 <StartEncoderTask+0x84>
				counter = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <StartEncoderTask+0xb8>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	f107 0110 	add.w	r1, r7, #16
 8000736:	2300      	movs	r3, #0
 8000738:	2200      	movs	r2, #0
 800073a:	f00b f8a3 	bl	800b884 <osMessageQueuePut>
				osDelay(5);
 800073e:	2005      	movs	r0, #5
 8000740:	f00b f812 	bl	800b768 <osDelay>
			} else {

			}
			prevCounter = currCounter;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if (buttonPressed[buttonNumber]) {
 8000748:	7efb      	ldrb	r3, [r7, #27]
 800074a:	4a0c      	ldr	r2, [pc, #48]	; (800077c <StartEncoderTask+0xbc>)
 800074c:	5cd3      	ldrb	r3, [r2, r3]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00b      	beq.n	800076c <StartEncoderTask+0xac>
			buttonPressed[buttonNumber] = 0;
 8000754:	7efb      	ldrb	r3, [r7, #27]
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <StartEncoderTask+0xbc>)
 8000758:	2100      	movs	r1, #0
 800075a:	54d1      	strb	r1, [r2, r3]
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <StartEncoderTask+0xc0>)
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	f107 010f 	add.w	r1, r7, #15
 8000764:	2300      	movs	r3, #0
 8000766:	2200      	movs	r2, #0
 8000768:	f00b f88c 	bl	800b884 <osMessageQueuePut>
		}
		osDelay(5);
 800076c:	2005      	movs	r0, #5
 800076e:	f00a fffb 	bl	800b768 <osDelay>
	for (;;) {
 8000772:	e7b1      	b.n	80006d8 <StartEncoderTask+0x18>
 8000774:	2000031c 	.word	0x2000031c
 8000778:	200001a0 	.word	0x200001a0
 800077c:	200002c4 	.word	0x200002c4
 8000780:	200001a4 	.word	0x200001a4

08000784 <StartBeaconTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBeaconTask */
void StartBeaconTask(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBeaconTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <StartBeaconTask+0x1c>)
 8000792:	f001 fd81 	bl	8002298 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079a:	f00a ffe5 	bl	800b768 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800079e:	e7f5      	b.n	800078c <StartBeaconTask+0x8>
 80007a0:	40020800 	.word	0x40020800

080007a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b45      	ldr	r3, [pc, #276]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a44      	ldr	r2, [pc, #272]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b42      	ldr	r3, [pc, #264]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b3e      	ldr	r3, [pc, #248]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a3d      	ldr	r2, [pc, #244]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a36      	ldr	r2, [pc, #216]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <MX_GPIO_Init+0x130>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <MX_GPIO_Init+0x130>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2f      	ldr	r2, [pc, #188]	; (80008d4 <MX_GPIO_Init+0x130>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <MX_GPIO_Init+0x130>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	4829      	ldr	r0, [pc, #164]	; (80008d8 <MX_GPIO_Init+0x134>)
 8000832:	f001 fcff 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2102      	movs	r1, #2
 800083a:	4828      	ldr	r0, [pc, #160]	; (80008dc <MX_GPIO_Init+0x138>)
 800083c:	f001 fcfa 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	211c      	movs	r1, #28
 8000844:	4825      	ldr	r0, [pc, #148]	; (80008dc <MX_GPIO_Init+0x138>)
 8000846:	f001 fcf5 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000854:	2302      	movs	r3, #2
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	481d      	ldr	r0, [pc, #116]	; (80008d8 <MX_GPIO_Init+0x134>)
 8000864:	f001 fa4c 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000868:	2301      	movs	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4817      	ldr	r0, [pc, #92]	; (80008dc <MX_GPIO_Init+0x138>)
 800087e:	f001 fa3f 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLK_Pin;
 8000882:	2302      	movs	r3, #2
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4810      	ldr	r0, [pc, #64]	; (80008dc <MX_GPIO_Init+0x138>)
 800089a:	f001 fa31 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 800089e:	231c      	movs	r3, #28
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <MX_GPIO_Init+0x138>)
 80008b6:	f001 fa23 	bl	8001d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2105      	movs	r1, #5
 80008be:	2006      	movs	r0, #6
 80008c0:	f001 f9da 	bl	8001c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008c4:	2006      	movs	r0, #6
 80008c6:	f001 fa03 	bl	8001cd0 <HAL_NVIC_EnableIRQ>

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40020000 	.word	0x40020000

080008e0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C3_Init+0x50>)
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_I2C3_Init+0x54>)
 80008e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C3_Init+0x50>)
 80008ec:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_I2C3_Init+0x58>)
 80008ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C3_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_I2C3_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_I2C3_Init+0x50>)
 80008fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000902:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_I2C3_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_I2C3_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_I2C3_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_I2C3_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_I2C3_Init+0x50>)
 800091e:	f001 fcfb 	bl	8002318 <HAL_I2C_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000928:	f000 f95e 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200001a8 	.word	0x200001a8
 8000934:	40005c00 	.word	0x40005c00
 8000938:	000186a0 	.word	0x000186a0

0800093c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a28      	ldr	r2, [pc, #160]	; (80009fc <HAL_I2C_MspInit+0xc0>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d14a      	bne.n	80009f4 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <HAL_I2C_MspInit+0xc4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a26      	ldr	r2, [pc, #152]	; (8000a00 <HAL_I2C_MspInit+0xc4>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <HAL_I2C_MspInit+0xc4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <HAL_I2C_MspInit+0xc4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a1f      	ldr	r2, [pc, #124]	; (8000a00 <HAL_I2C_MspInit+0xc4>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HAL_I2C_MspInit+0xc4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800099a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099c:	2312      	movs	r3, #18
 800099e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009a8:	2304      	movs	r3, #4
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <HAL_I2C_MspInit+0xc8>)
 80009b4:	f001 f9a4 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009b8:	2310      	movs	r3, #16
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80009c8:	2309      	movs	r3, #9
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <HAL_I2C_MspInit+0xcc>)
 80009d4:	f001 f994 	bl	8001d00 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_I2C_MspInit+0xc4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_I2C_MspInit+0xc4>)
 80009e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_I2C_MspInit+0xc4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40005c00 	.word	0x40005c00
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020400 	.word	0x40020400

08000a0c <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000a12:	f000 fae3 	bl	8000fdc <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 fcb2 	bl	8001380 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <Display_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	9202      	str	r2, [sp, #8]
 8000a22:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8000a26:	9201      	str	r2, [sp, #4]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	9200      	str	r2, [sp, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <Display_Init+0x5c>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	200f      	movs	r0, #15
 8000a34:	f000 fb63 	bl	80010fe <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <Display_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	9202      	str	r2, [sp, #8]
 8000a3e:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8000a42:	9201      	str	r2, [sp, #4]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	9200      	str	r2, [sp, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <Display_Init+0x64>)
 8000a4c:	2119      	movs	r1, #25
 8000a4e:	2022      	movs	r0, #34	; 0x22
 8000a50:	f000 fb55 	bl	80010fe <ST7735_WriteString>
    HAL_Delay(2000);
 8000a54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a58:	f001 f81c 	bl	8001a94 <HAL_Delay>
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	0800f264 	.word	0x0800f264
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	0800f270 	.word	0x0800f270

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a78:	f000 ffca 	bl	8001a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7c:	f000 f838 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a80:	f7ff fe90 	bl	80007a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a84:	f000 f946 	bl	8000d14 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000a88:	f000 fe42 	bl	8001710 <MX_TIM3_Init>
  MX_RTC_Init();
 8000a8c:	f000 f8bc 	bl	8000c08 <MX_RTC_Init>
  MX_TIM4_Init();
 8000a90:	f000 fe92 	bl	80017b8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000a94:	f000 fdec 	bl	8001670 <MX_TIM1_Init>
  MX_I2C3_Init();
 8000a98:	f7ff ff22 	bl	80008e0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000a9c:	f00d fd0e 	bl	800e4bc <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000aa0:	213c      	movs	r1, #60	; 0x3c
 8000aa2:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <main+0x6c>)
 8000aa4:	f005 ff64 	bl	8006970 <HAL_TIM_Encoder_Start>
  //HAL_TIM_Base_Init(&htim1);
  HAL_TIM_Base_Start_IT(&htim1);
 8000aa8:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <main+0x70>)
 8000aaa:	f005 fd35 	bl	8006518 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <main+0x74>)
 8000ab4:	f001 fbf0 	bl	8002298 <HAL_GPIO_TogglePin>
  //HAL_TIM_Base_Start(&htim11);
  Display_Init();
 8000ab8:	f7ff ffa8 	bl	8000a0c <Display_Init>
  si5351_Init(0);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f008 fafb 	bl	80090b8 <si5351_Init>
  si5351_SetupCLK0(7000000, SI5351_DRIVE_STRENGTH_4MA);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <main+0x78>)
 8000ac6:	f008 fcdd 	bl	8009484 <si5351_SetupCLK0>
  si5351_EnableOutputs(1 << 0);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f008 fcfb 	bl	80094c6 <si5351_EnableOutputs>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ad0:	f00a fd6e 	bl	800b5b0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ad4:	f7ff fd2c 	bl	8000530 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ad8:	f00a fd8e 	bl	800b5f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x68>
 8000ade:	bf00      	nop
 8000ae0:	2000031c 	.word	0x2000031c
 8000ae4:	200002d4 	.word	0x200002d4
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	006acfc0 	.word	0x006acfc0

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	; 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	2230      	movs	r2, #48	; 0x30
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f00e fa10 	bl	800ef24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <SystemClock_Config+0xd0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <SystemClock_Config+0xd0>)
 8000b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <SystemClock_Config+0xd0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b56:	2301      	movs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b64:	2319      	movs	r3, #25
 8000b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b68:	23c0      	movs	r3, #192	; 0xc0
 8000b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fc73 	bl	8004464 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b84:	f000 f830 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	230f      	movs	r3, #15
 8000b8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 ff85 	bl	8004ab4 <HAL_RCC_ClockConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bb0:	f000 f81a 	bl	8000be8 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3750      	adds	r7, #80	; 0x50
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d101      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bd6:	f000 ff3d 	bl	8001a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40014800 	.word	0x40014800

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>

08000bf2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <MX_RTC_Init+0xac>)
 8000c22:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <MX_RTC_Init+0xb0>)
 8000c24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c26:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <MX_RTC_Init+0xac>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <MX_RTC_Init+0xac>)
 8000c2e:	227f      	movs	r2, #127	; 0x7f
 8000c30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <MX_RTC_Init+0xac>)
 8000c34:	22ff      	movs	r2, #255	; 0xff
 8000c36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_RTC_Init+0xac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_RTC_Init+0xac>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_RTC_Init+0xac>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c4a:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <MX_RTC_Init+0xac>)
 8000c4c:	f004 fc02 	bl	8005454 <HAL_RTC_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000c56:	f7ff ffc7 	bl	8000be8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <MX_RTC_Init+0xac>)
 8000c76:	f004 fcc5 	bl	8005604 <HAL_RTC_SetTime>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000c80:	f7ff ffb2 	bl	8000be8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000c84:	2305      	movs	r3, #5
 8000c86:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000c88:	2305      	movs	r3, #5
 8000c8a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8000c8c:	2307      	movs	r3, #7
 8000c8e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000c90:	2316      	movs	r3, #22
 8000c92:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_RTC_Init+0xac>)
 8000c9c:	f004 fdfa 	bl	8005894 <HAL_RTC_SetDate>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000ca6:	f7ff ff9f 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000204 	.word	0x20000204
 8000cb8:	40002800 	.word	0x40002800

08000cbc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_RTC_MspInit+0x50>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d111      	bne.n	8000d04 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f004 f99a 	bl	8005028 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000cfa:	f7ff ff75 	bl	8000be8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <HAL_RTC_MspInit+0x54>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40002800 	.word	0x40002800
 8000d10:	42470e3c 	.word	0x42470e3c

08000d14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d1a:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <MX_SPI1_Init+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d60:	220a      	movs	r2, #10
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d66:	f004 ff5f 	bl	8005c28 <HAL_SPI_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d70:	f7ff ff3a 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000224 	.word	0x20000224
 8000d7c:	40013000 	.word	0x40013000

08000d80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_SPI_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12b      	bne.n	8000dfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dda:	23a0      	movs	r3, #160	; 0xa0
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dea:	2305      	movs	r3, #5
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_SPI_MspInit+0x8c>)
 8000df6:	f000 ff83 	bl	8001d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40013000 	.word	0x40013000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2110      	movs	r1, #16
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <ST7735_Select+0x14>)
 8000e1a:	f001 fa0b 	bl	8002234 <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40020000 	.word	0x40020000

08000e28 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2110      	movs	r1, #16
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <ST7735_Unselect+0x14>)
 8000e32:	f001 f9ff 	bl	8002234 <HAL_GPIO_WritePin>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020000 	.word	0x40020000

08000e40 <ST7735_Reset>:

static void ST7735_Reset() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2108      	movs	r1, #8
 8000e48:	4806      	ldr	r0, [pc, #24]	; (8000e64 <ST7735_Reset+0x24>)
 8000e4a:	f001 f9f3 	bl	8002234 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000e4e:	2005      	movs	r0, #5
 8000e50:	f000 fe20 	bl	8001a94 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2108      	movs	r1, #8
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <ST7735_Reset+0x24>)
 8000e5a:	f001 f9eb 	bl	8002234 <HAL_GPIO_WritePin>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40020000 	.word	0x40020000

08000e68 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2104      	movs	r1, #4
 8000e76:	4807      	ldr	r0, [pc, #28]	; (8000e94 <ST7735_WriteCommand+0x2c>)
 8000e78:	f001 f9dc 	bl	8002234 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000e7c:	1df9      	adds	r1, r7, #7
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	2201      	movs	r2, #1
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <ST7735_WriteCommand+0x30>)
 8000e86:	f005 f86b 	bl	8005f60 <HAL_SPI_Transmit>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40020000 	.word	0x40020000
 8000e98:	20000224 	.word	0x20000224

08000e9c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <ST7735_WriteData+0x2c>)
 8000eac:	f001 f9c2 	bl	8002234 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <ST7735_WriteData+0x30>)
 8000ebc:	f005 f850 	bl	8005f60 <HAL_SPI_Transmit>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	20000224 	.word	0x20000224

08000ed0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000ee2:	e034      	b.n	8000f4e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000eee:	7afb      	ldrb	r3, [r7, #11]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ffb9 	bl	8000e68 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000f00:	7abb      	ldrb	r3, [r7, #10]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f08:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000f0a:	7abb      	ldrb	r3, [r7, #10]
 8000f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f10:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000f12:	7abb      	ldrb	r3, [r7, #10]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000f18:	7abb      	ldrb	r3, [r7, #10]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ffbd 	bl	8000e9c <ST7735_WriteData>
            addr += numArgs;
 8000f22:	7abb      	ldrb	r3, [r7, #10]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	4413      	add	r3, r2
 8000f28:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000f2a:	89bb      	ldrh	r3, [r7, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00e      	beq.n	8000f4e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000f3a:	89bb      	ldrh	r3, [r7, #12]
 8000f3c:	2bff      	cmp	r3, #255	; 0xff
 8000f3e:	d102      	bne.n	8000f46 <ST7735_ExecuteCommandList+0x76>
 8000f40:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f44:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000f46:	89bb      	ldrh	r3, [r7, #12]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fda3 	bl	8001a94 <HAL_Delay>
    while(numCommands--) {
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	73fa      	strb	r2, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1c5      	bne.n	8000ee4 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000f62:	b590      	push	{r4, r7, lr}
 8000f64:	b085      	sub	sp, #20
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4604      	mov	r4, r0
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4623      	mov	r3, r4
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	4603      	mov	r3, r0
 8000f76:	71bb      	strb	r3, [r7, #6]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	717b      	strb	r3, [r7, #5]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000f80:	202a      	movs	r0, #42	; 0x2a
 8000f82:	f7ff ff71 	bl	8000e68 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000f86:	2300      	movs	r3, #0
 8000f88:	733b      	strb	r3, [r7, #12]
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	737b      	strb	r3, [r7, #13]
 8000f92:	2300      	movs	r3, #0
 8000f94:	73bb      	strb	r3, [r7, #14]
 8000f96:	797b      	ldrb	r3, [r7, #5]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff79 	bl	8000e9c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000faa:	202b      	movs	r0, #43	; 0x2b
 8000fac:	f7ff ff5c 	bl	8000e68 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	331a      	adds	r3, #26
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000fb8:	793b      	ldrb	r3, [r7, #4]
 8000fba:	331a      	adds	r3, #26
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff68 	bl	8000e9c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000fcc:	202c      	movs	r0, #44	; 0x2c
 8000fce:	f7ff ff4b 	bl	8000e68 <ST7735_WriteCommand>
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd90      	pop	{r4, r7, pc}
	...

08000fdc <ST7735_Init>:

void ST7735_Init() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000fe0:	f7ff ff16 	bl	8000e10 <ST7735_Select>
    ST7735_Reset();
 8000fe4:	f7ff ff2c 	bl	8000e40 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <ST7735_Init+0x28>)
 8000fea:	f7ff ff71 	bl	8000ed0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <ST7735_Init+0x2c>)
 8000ff0:	f7ff ff6e 	bl	8000ed0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <ST7735_Init+0x30>)
 8000ff6:	f7ff ff6b 	bl	8000ed0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000ffa:	f7ff ff15 	bl	8000e28 <ST7735_Unselect>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	080116ac 	.word	0x080116ac
 8001008:	080116e8 	.word	0x080116e8
 800100c:	080116f8 	.word	0x080116f8

08001010 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001010:	b082      	sub	sp, #8
 8001012:	b590      	push	{r4, r7, lr}
 8001014:	b089      	sub	sp, #36	; 0x24
 8001016:	af00      	add	r7, sp, #0
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
 800101e:	460b      	mov	r3, r1
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	b2d8      	uxtb	r0, r3
 800102a:	88bb      	ldrh	r3, [r7, #4]
 800102c:	b2d9      	uxtb	r1, r3
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001036:	4413      	add	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3b01      	subs	r3, #1
 800103c:	b2dc      	uxtb	r4, r3
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001046:	4413      	add	r3, r2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4622      	mov	r2, r4
 8001050:	f7ff ff87 	bl	8000f62 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e043      	b.n	80010e2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800105a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	3b20      	subs	r3, #32
 8001060:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001064:	fb01 f303 	mul.w	r3, r1, r3
 8001068:	4619      	mov	r1, r3
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	440b      	add	r3, r1
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	e029      	b.n	80010d0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00e      	beq.n	80010aa <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800108c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b29b      	uxth	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	743b      	strb	r3, [r7, #16]
 8001096:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001098:	b2db      	uxtb	r3, r3
 800109a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	2102      	movs	r1, #2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fefa 	bl	8000e9c <ST7735_WriteData>
 80010a8:	e00f      	b.n	80010ca <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80010aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	733b      	strb	r3, [r7, #12]
 80010b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2102      	movs	r1, #2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fee9 	bl	8000e9c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010d4:	461a      	mov	r2, r3
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4293      	cmp	r3, r2
 80010da:	d3cf      	bcc.n	800107c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3301      	adds	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010e6:	461a      	mov	r2, r3
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d3b5      	bcc.n	800105a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3724      	adds	r7, #36	; 0x24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010fa:	b002      	add	sp, #8
 80010fc:	4770      	bx	lr

080010fe <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010fe:	b082      	sub	sp, #8
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	603a      	str	r2, [r7, #0]
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
 800110e:	460b      	mov	r3, r1
 8001110:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001112:	f7ff fe7d 	bl	8000e10 <ST7735_Select>

    while(*str) {
 8001116:	e02d      	b.n	8001174 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	7d3a      	ldrb	r2, [r7, #20]
 800111c:	4413      	add	r3, r2
 800111e:	2b9f      	cmp	r3, #159	; 0x9f
 8001120:	dd13      	ble.n	800114a <ST7735_WriteString+0x4c>
            x = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001126:	7d7b      	ldrb	r3, [r7, #21]
 8001128:	b29a      	uxth	r2, r3
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	7d7a      	ldrb	r2, [r7, #21]
 8001134:	4413      	add	r3, r2
 8001136:	2b4f      	cmp	r3, #79	; 0x4f
 8001138:	dc21      	bgt.n	800117e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b20      	cmp	r3, #32
 8001140:	d103      	bne.n	800114a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	603b      	str	r3, [r7, #0]
                continue;
 8001148:	e014      	b.n	8001174 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	781a      	ldrb	r2, [r3, #0]
 800114e:	88b9      	ldrh	r1, [r7, #4]
 8001150:	88f8      	ldrh	r0, [r7, #6]
 8001152:	8c3b      	ldrh	r3, [r7, #32]
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	8bbb      	ldrh	r3, [r7, #28]
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f7ff ff56 	bl	8001010 <ST7735_WriteChar>
        x += font.width;
 8001164:	7d3b      	ldrb	r3, [r7, #20]
 8001166:	b29a      	uxth	r2, r3
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4413      	add	r3, r2
 800116c:	80fb      	strh	r3, [r7, #6]
        str++;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1cd      	bne.n	8001118 <ST7735_WriteString+0x1a>
 800117c:	e000      	b.n	8001180 <ST7735_WriteString+0x82>
                break;
 800117e:	bf00      	nop
    }

    ST7735_Unselect();
 8001180:	f7ff fe52 	bl	8000e28 <ST7735_Unselect>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800118e:	b002      	add	sp, #8
 8001190:	4770      	bx	lr
	...

08001194 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	4604      	mov	r4, r0
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4623      	mov	r3, r4
 80011a4:	80fb      	strh	r3, [r7, #6]
 80011a6:	4603      	mov	r3, r0
 80011a8:	80bb      	strh	r3, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	807b      	strh	r3, [r7, #2]
 80011ae:	4613      	mov	r3, r2
 80011b0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	2b9f      	cmp	r3, #159	; 0x9f
 80011b6:	d857      	bhi.n	8001268 <ST7735_FillRectangle+0xd4>
 80011b8:	88bb      	ldrh	r3, [r7, #4]
 80011ba:	2b4f      	cmp	r3, #79	; 0x4f
 80011bc:	d854      	bhi.n	8001268 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	4413      	add	r3, r2
 80011c4:	2ba0      	cmp	r3, #160	; 0xa0
 80011c6:	dd03      	ble.n	80011d0 <ST7735_FillRectangle+0x3c>
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80011ce:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80011d0:	88ba      	ldrh	r2, [r7, #4]
 80011d2:	883b      	ldrh	r3, [r7, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	2b50      	cmp	r3, #80	; 0x50
 80011d8:	dd03      	ble.n	80011e2 <ST7735_FillRectangle+0x4e>
 80011da:	88bb      	ldrh	r3, [r7, #4]
 80011dc:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80011e0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80011e2:	f7ff fe15 	bl	8000e10 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	b2d8      	uxtb	r0, r3
 80011ea:	88bb      	ldrh	r3, [r7, #4]
 80011ec:	b2d9      	uxtb	r1, r3
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b2dc      	uxtb	r4, r3
 80011fe:	88bb      	ldrh	r3, [r7, #4]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	883b      	ldrh	r3, [r7, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b01      	subs	r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4622      	mov	r2, r4
 8001210:	f7ff fea7 	bl	8000f62 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001214:	8c3b      	ldrh	r3, [r7, #32]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	b29b      	uxth	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	733b      	strb	r3, [r7, #12]
 800121e:	8c3b      	ldrh	r3, [r7, #32]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2104      	movs	r1, #4
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <ST7735_FillRectangle+0xdc>)
 800122a:	f001 f803 	bl	8002234 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800122e:	883b      	ldrh	r3, [r7, #0]
 8001230:	80bb      	strh	r3, [r7, #4]
 8001232:	e013      	b.n	800125c <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	80fb      	strh	r3, [r7, #6]
 8001238:	e00a      	b.n	8001250 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800123a:	f107 010c 	add.w	r1, r7, #12
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	2202      	movs	r2, #2
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <ST7735_FillRectangle+0xe0>)
 8001246:	f004 fe8b 	bl	8005f60 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	3b01      	subs	r3, #1
 800124e:	80fb      	strh	r3, [r7, #6]
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f1      	bne.n	800123a <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	3b01      	subs	r3, #1
 800125a:	80bb      	strh	r3, [r7, #4]
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1e8      	bne.n	8001234 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001262:	f7ff fde1 	bl	8000e28 <ST7735_Unselect>
 8001266:	e000      	b.n	800126a <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001268:	bf00      	nop
}
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	40020000 	.word	0x40020000
 8001274:	20000224 	.word	0x20000224

08001278 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	4604      	mov	r4, r0
 8001280:	4608      	mov	r0, r1
 8001282:	4611      	mov	r1, r2
 8001284:	461a      	mov	r2, r3
 8001286:	4623      	mov	r3, r4
 8001288:	80fb      	strh	r3, [r7, #6]
 800128a:	4603      	mov	r3, r0
 800128c:	80bb      	strh	r3, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	2b9f      	cmp	r3, #159	; 0x9f
 800129a:	d869      	bhi.n	8001370 <ST7735_FillRectangleFast+0xf8>
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	2b4f      	cmp	r3, #79	; 0x4f
 80012a0:	d866      	bhi.n	8001370 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80012a2:	88fa      	ldrh	r2, [r7, #6]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	4413      	add	r3, r2
 80012a8:	2ba0      	cmp	r3, #160	; 0xa0
 80012aa:	dd03      	ble.n	80012b4 <ST7735_FillRectangleFast+0x3c>
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80012b2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80012b4:	88ba      	ldrh	r2, [r7, #4]
 80012b6:	883b      	ldrh	r3, [r7, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	2b50      	cmp	r3, #80	; 0x50
 80012bc:	dd03      	ble.n	80012c6 <ST7735_FillRectangleFast+0x4e>
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80012c4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80012c6:	f7ff fda3 	bl	8000e10 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	b2d8      	uxtb	r0, r3
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	b2d9      	uxtb	r1, r3
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4413      	add	r3, r2
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	3b01      	subs	r3, #1
 80012e0:	b2dc      	uxtb	r4, r3
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	883b      	ldrh	r3, [r7, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4622      	mov	r2, r4
 80012f4:	f7ff fe35 	bl	8000f62 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80012f8:	8c3b      	ldrh	r3, [r7, #32]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	723b      	strb	r3, [r7, #8]
 8001302:	8c3b      	ldrh	r3, [r7, #32]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4618      	mov	r0, r3
 800130e:	f00d fdeb 	bl	800eee8 <malloc>
 8001312:	4603      	mov	r3, r0
 8001314:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8001316:	2300      	movs	r3, #0
 8001318:	80fb      	strh	r3, [r7, #6]
 800131a:	e008      	b.n	800132e <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	893a      	ldrh	r2, [r7, #8]
 8001326:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	3301      	adds	r3, #1
 800132c:	80fb      	strh	r3, [r7, #6]
 800132e:	88fa      	ldrh	r2, [r7, #6]
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3f2      	bcc.n	800131c <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2104      	movs	r1, #4
 800133a:	480f      	ldr	r0, [pc, #60]	; (8001378 <ST7735_FillRectangleFast+0x100>)
 800133c:	f000 ff7a 	bl	8002234 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001340:	883b      	ldrh	r3, [r7, #0]
 8001342:	80bb      	strh	r3, [r7, #4]
 8001344:	e00b      	b.n	800135e <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b29a      	uxth	r2, r3
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	68f9      	ldr	r1, [r7, #12]
 8001352:	480a      	ldr	r0, [pc, #40]	; (800137c <ST7735_FillRectangleFast+0x104>)
 8001354:	f004 fe04 	bl	8005f60 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	80bb      	strh	r3, [r7, #4]
 800135e:	88bb      	ldrh	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f0      	bne.n	8001346 <ST7735_FillRectangleFast+0xce>

    free(line);
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f00d fdc7 	bl	800eef8 <free>
    ST7735_Unselect();
 800136a:	f7ff fd5d 	bl	8000e28 <ST7735_Unselect>
 800136e:	e000      	b.n	8001372 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001370:	bf00      	nop
}
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	40020000 	.word	0x40020000
 800137c:	20000224 	.word	0x20000224

08001380 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af02      	add	r7, sp, #8
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2350      	movs	r3, #80	; 0x50
 8001390:	22a0      	movs	r2, #160	; 0xa0
 8001392:	2100      	movs	r1, #0
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fefd 	bl	8001194 <ST7735_FillRectangle>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af02      	add	r7, sp, #8
 80013a8:	4603      	mov	r3, r0
 80013aa:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2350      	movs	r3, #80	; 0x50
 80013b2:	22a0      	movs	r2, #160	; 0xa0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ff5e 	bl	8001278 <ST7735_FillRectangleFast>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_MspInit+0x54>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_MspInit+0x54>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_MspInit+0x54>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_MspInit+0x54>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_MspInit+0x54>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_MspInit+0x54>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	210f      	movs	r1, #15
 8001406:	f06f 0001 	mvn.w	r0, #1
 800140a:	f000 fc35 	bl	8001c78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	; 0x30
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	201a      	movs	r0, #26
 8001432:	f000 fc21 	bl	8001c78 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001436:	201a      	movs	r0, #26
 8001438:	f000 fc4a 	bl	8001cd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_InitTick+0xa0>)
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_InitTick+0xa0>)
 8001446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144a:	6453      	str	r3, [r2, #68]	; 0x44
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_InitTick+0xa0>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001458:	f107 0210 	add.w	r2, r7, #16
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fdae 	bl	8004fc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001468:	f003 fd98 	bl	8004f9c <HAL_RCC_GetPCLK2Freq>
 800146c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001470:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <HAL_InitTick+0xa4>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0c9b      	lsrs	r3, r3, #18
 8001478:	3b01      	subs	r3, #1
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_InitTick+0xa8>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <HAL_InitTick+0xac>)
 8001480:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_InitTick+0xa8>)
 8001484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001488:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_InitTick+0xa8>)
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_InitTick+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_InitTick+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <HAL_InitTick+0xa8>)
 800149e:	f004 ff75 	bl	800638c <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d104      	bne.n	80014b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <HAL_InitTick+0xa8>)
 80014aa:	f005 f835 	bl	8006518 <HAL_TIM_Base_Start_IT>
 80014ae:	4603      	mov	r3, r0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	431bde83 	.word	0x431bde83
 80014c4:	2000027c 	.word	0x2000027c
 80014c8:	40014800 	.word	0x40014800

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f000 fef3 	bl	80022e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800150e:	f005 faed 	bl	8006aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a02      	ldr	r2, [pc, #8]	; (8001524 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800151a:	6013      	str	r3, [r2, #0]
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200002d4 	.word	0x200002d4
 8001524:	200001fc 	.word	0x200001fc

08001528 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800152e:	f005 fadd 	bl	8006aec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001534:	f005 fada 	bl	8006aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200002d4 	.word	0x200002d4
 8001540:	2000027c 	.word	0x2000027c

08001544 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <TIM3_IRQHandler+0x28>)
 800154a:	f005 facf 	bl	8006aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <TIM3_IRQHandler+0x2c>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <TIM3_IRQHandler+0x2c>)
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <TIM3_IRQHandler+0x2c>)
 8001560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001564:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000031c 	.word	0x2000031c
 8001570:	40000400 	.word	0x40000400

08001574 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <OTG_FS_IRQHandler+0x10>)
 800157a:	f001 fe46 	bl	800320a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2001b6b4 	.word	0x2001b6b4

08001588 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 8001592:	23ff      	movs	r3, #255	; 0xff
 8001594:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 80015a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db11      	blt.n	80015cc <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 80015a8:	f000 fa68 	bl	8001a7c <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x50>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b63      	cmp	r3, #99	; 0x63
 80015b8:	d90a      	bls.n	80015d0 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 80015ba:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x50>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c4:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_GPIO_EXTI_Callback+0x54>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	54d1      	strb	r1, [r2, r3]
 80015ca:	e002      	b.n	80015d2 <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 80015cc:	bf00      	nop
 80015ce:	e000      	b.n	80015d2 <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 80015d0:	bf00      	nop
}
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200002cc 	.word	0x200002cc
 80015dc:	200002c4 	.word	0x200002c4

080015e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <_sbrk+0x5c>)
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <_sbrk+0x60>)
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <_sbrk+0x64>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <_sbrk+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001610:	f00d fc3e 	bl	800ee90 <__errno>
 8001614:	4603      	mov	r3, r0
 8001616:	220c      	movs	r2, #12
 8001618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	e009      	b.n	8001634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <_sbrk+0x64>)
 8001630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20020000 	.word	0x20020000
 8001640:	00001000 	.word	0x00001000
 8001644:	200002d0 	.word	0x200002d0
 8001648:	2001bdf0 	.word	0x2001bdf0

0800164c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <SystemInit+0x20>)
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <SystemInit+0x20>)
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <MX_TIM1_Init+0x98>)
 800168e:	4a1f      	ldr	r2, [pc, #124]	; (800170c <MX_TIM1_Init+0x9c>)
 8001690:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <MX_TIM1_Init+0x98>)
 8001694:	222f      	movs	r2, #47	; 0x2f
 8001696:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <MX_TIM1_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_TIM1_Init+0x98>)
 80016a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_TIM1_Init+0x98>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_TIM1_Init+0x98>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_TIM1_Init+0x98>)
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016b8:	4813      	ldr	r0, [pc, #76]	; (8001708 <MX_TIM1_Init+0x98>)
 80016ba:	f004 fe67 	bl	800638c <HAL_TIM_Base_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016c4:	f7ff fa90 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	4619      	mov	r1, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <MX_TIM1_Init+0x98>)
 80016d6:	f005 fb11 	bl	8006cfc <HAL_TIM_ConfigClockSource>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016e0:	f7ff fa82 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016e4:	2320      	movs	r3, #32
 80016e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_TIM1_Init+0x98>)
 80016f2:	f005 ffc1 	bl	8007678 <HAL_TIMEx_MasterConfigSynchronization>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016fc:	f7ff fa74 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200002d4 	.word	0x200002d4
 800170c:	40010000 	.word	0x40010000

08001710 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	2224      	movs	r2, #36	; 0x24
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f00d fc00 	bl	800ef24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <MX_TIM3_Init+0xa0>)
 800172e:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <MX_TIM3_Init+0xa4>)
 8001730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <MX_TIM3_Init+0xa0>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <MX_TIM3_Init+0xa0>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <MX_TIM3_Init+0xa0>)
 8001740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001744:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_TIM3_Init+0xa0>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_TIM3_Init+0xa0>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001752:	2301      	movs	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800175a:	2301      	movs	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8001762:	2306      	movs	r3, #6
 8001764:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800176a:	2301      	movs	r3, #1
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8001772:	2306      	movs	r3, #6
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	4619      	mov	r1, r3
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <MX_TIM3_Init+0xa0>)
 800177e:	f004 ff5d 	bl	800663c <HAL_TIM_Encoder_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001788:	f7ff fa2e 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_TIM3_Init+0xa0>)
 800179a:	f005 ff6d 	bl	8007678 <HAL_TIMEx_MasterConfigSynchronization>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017a4:	f7ff fa20 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	3730      	adds	r7, #48	; 0x30
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2000031c 	.word	0x2000031c
 80017b4:	40000400 	.word	0x40000400

080017b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <MX_TIM4_Init+0x90>)
 80017d6:	4a1d      	ldr	r2, [pc, #116]	; (800184c <MX_TIM4_Init+0x94>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <MX_TIM4_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <MX_TIM4_Init+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <MX_TIM4_Init+0x90>)
 80017e8:	223c      	movs	r2, #60	; 0x3c
 80017ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <MX_TIM4_Init+0x90>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_TIM4_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017f8:	4813      	ldr	r0, [pc, #76]	; (8001848 <MX_TIM4_Init+0x90>)
 80017fa:	f004 fdc7 	bl	800638c <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001804:	f7ff f9f0 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4619      	mov	r1, r3
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <MX_TIM4_Init+0x90>)
 8001816:	f005 fa71 	bl	8006cfc <HAL_TIM_ConfigClockSource>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001820:	f7ff f9e2 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_TIM4_Init+0x90>)
 8001832:	f005 ff21 	bl	8007678 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 800183c:	f7ff f9d4 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000364 	.word	0x20000364
 800184c:	40000800 	.word	0x40000800

08001850 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1c      	ldr	r2, [pc, #112]	; (80018d0 <HAL_TIM_Base_MspInit+0x80>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d11e      	bne.n	80018a0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_TIM_Base_MspInit+0x84>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <HAL_TIM_Base_MspInit+0x84>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_TIM_Base_MspInit+0x84>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2105      	movs	r1, #5
 8001882:	2019      	movs	r0, #25
 8001884:	f000 f9f8 	bl	8001c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001888:	2019      	movs	r0, #25
 800188a:	f000 fa21 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	210f      	movs	r1, #15
 8001892:	201a      	movs	r0, #26
 8001894:	f000 f9f0 	bl	8001c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001898:	201a      	movs	r0, #26
 800189a:	f000 fa19 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800189e:	e012      	b.n	80018c6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <HAL_TIM_Base_MspInit+0x88>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d10d      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_TIM_Base_MspInit+0x84>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_TIM_Base_MspInit+0x84>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_TIM_Base_MspInit+0x84>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40010000 	.word	0x40010000
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40000800 	.word	0x40000800

080018dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2c      	ldr	r2, [pc, #176]	; (80019ac <HAL_TIM_Encoder_MspInit+0xd0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d151      	bne.n	80019a2 <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001952:	2340      	movs	r3, #64	; 0x40
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195a:	2301      	movs	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001962:	2302      	movs	r3, #2
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800196e:	f000 f9c7 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001972:	2320      	movs	r3, #32
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197a:	2301      	movs	r3, #1
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001982:	2302      	movs	r3, #2
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <HAL_TIM_Encoder_MspInit+0xdc>)
 800198e:	f000 f9b7 	bl	8001d00 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2105      	movs	r1, #5
 8001996:	201d      	movs	r0, #29
 8001998:	f000 f96e 	bl	8001c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800199c:	201d      	movs	r0, #29
 800199e:	f000 f997 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40000400 	.word	0x40000400
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019c2:	490e      	ldr	r1, [pc, #56]	; (80019fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019d8:	4c0b      	ldr	r4, [pc, #44]	; (8001a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e6:	f7ff fe31 	bl	800164c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f00d fa57 	bl	800ee9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff f841 	bl	8000a74 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001a00:	080117ac 	.word	0x080117ac
  ldr r2, =_sbss
 8001a04:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001a08:	2001bdf0 	.word	0x2001bdf0

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <HAL_Init+0x40>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_Init+0x40>)
 8001a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_Init+0x40>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f8fd 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f7ff fcec 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fcbe 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_IncTick+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_IncTick+0x24>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000018 	.word	0x20000018
 8001a78:	200003ac 	.word	0x200003ac

08001a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_GetTick+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200003ac 	.word	0x200003ac

08001a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff ffee 	bl	8001a7c <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d005      	beq.n	8001aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_Delay+0x44>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aba:	bf00      	nop
 8001abc:	f7ff ffde 	bl	8001a7c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8f7      	bhi.n	8001abc <HAL_Delay+0x28>
  {
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000018 	.word	0x20000018

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	60d3      	str	r3, [r2, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0b      	blt.n	8001b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <__NVIC_EnableIRQ+0x38>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	fa00 f202 	lsl.w	r2, r0, r2
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b07      	cmp	r3, #7
 8001c44:	d00f      	beq.n	8001c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d00c      	beq.n	8001c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d009      	beq.n	8001c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d006      	beq.n	8001c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d003      	beq.n	8001c66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c5e:	2190      	movs	r1, #144	; 0x90
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001c62:	f7fe ffc6 	bl	8000bf2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ff38 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	0800f27c 	.word	0x0800f27c

08001c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d903      	bls.n	8001c98 <HAL_NVIC_SetPriority+0x20>
 8001c90:	21a8      	movs	r1, #168	; 0xa8
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <HAL_NVIC_SetPriority+0x54>)
 8001c94:	f7fe ffad 	bl	8000bf2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	d903      	bls.n	8001ca6 <HAL_NVIC_SetPriority+0x2e>
 8001c9e:	21a9      	movs	r1, #169	; 0xa9
 8001ca0:	480a      	ldr	r0, [pc, #40]	; (8001ccc <HAL_NVIC_SetPriority+0x54>)
 8001ca2:	f7fe ffa6 	bl	8000bf2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca6:	f7ff ff3d 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001caa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	6978      	ldr	r0, [r7, #20]
 8001cb2:	f7ff ff8d 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff5c 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	0800f27c 	.word	0x0800f27c

08001cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	da03      	bge.n	8001cea <HAL_NVIC_EnableIRQ+0x1a>
 8001ce2:	21bc      	movs	r1, #188	; 0xbc
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <HAL_NVIC_EnableIRQ+0x2c>)
 8001ce6:	f7fe ff84 	bl	8000bf2 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff26 	bl	8001b40 <__NVIC_EnableIRQ>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	0800f27c 	.word	0x0800f27c

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a33      	ldr	r2, [pc, #204]	; (8001de8 <HAL_GPIO_Init+0xe8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d017      	beq.n	8001d4e <HAL_GPIO_Init+0x4e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a32      	ldr	r2, [pc, #200]	; (8001dec <HAL_GPIO_Init+0xec>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x4e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <HAL_GPIO_Init+0xf0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00f      	beq.n	8001d4e <HAL_GPIO_Init+0x4e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <HAL_GPIO_Init+0xf4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00b      	beq.n	8001d4e <HAL_GPIO_Init+0x4e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a2f      	ldr	r2, [pc, #188]	; (8001df8 <HAL_GPIO_Init+0xf8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d007      	beq.n	8001d4e <HAL_GPIO_Init+0x4e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a2e      	ldr	r2, [pc, #184]	; (8001dfc <HAL_GPIO_Init+0xfc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x4e>
 8001d46:	21ac      	movs	r1, #172	; 0xac
 8001d48:	482d      	ldr	r0, [pc, #180]	; (8001e00 <HAL_GPIO_Init+0x100>)
 8001d4a:	f7fe ff52 	bl	8000bf2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_GPIO_Init+0x64>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x6c>
 8001d64:	21ad      	movs	r1, #173	; 0xad
 8001d66:	4826      	ldr	r0, [pc, #152]	; (8001e00 <HAL_GPIO_Init+0x100>)
 8001d68:	f7fe ff43 	bl	8000bf2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d035      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d031      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b11      	cmp	r3, #17
 8001d82:	d02d      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d029      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b12      	cmp	r3, #18
 8001d92:	d025      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001d9c:	d020      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001da6:	d01b      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001db0:	d016      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001dba:	d011      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001dc4:	d00c      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001dce:	d007      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0xe0>
 8001dd8:	21ae      	movs	r1, #174	; 0xae
 8001dda:	4809      	ldr	r0, [pc, #36]	; (8001e00 <HAL_GPIO_Init+0x100>)
 8001ddc:	f7fe ff09 	bl	8000bf2 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	e20c      	b.n	8002200 <HAL_GPIO_Init+0x500>
 8001de6:	bf00      	nop
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020c00 	.word	0x40020c00
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40021c00 	.word	0x40021c00
 8001e00:	0800f2b8 	.word	0x0800f2b8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 81ec 	bne.w	80021fa <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d005      	beq.n	8001e3a <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d144      	bne.n	8001ec4 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00f      	beq.n	8001e62 <HAL_GPIO_Init+0x162>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d00b      	beq.n	8001e62 <HAL_GPIO_Init+0x162>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x162>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x162>
 8001e5a:	21c0      	movs	r1, #192	; 0xc0
 8001e5c:	4884      	ldr	r0, [pc, #528]	; (8002070 <HAL_GPIO_Init+0x370>)
 8001e5e:	f7fe fec8 	bl	8000bf2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0201 	and.w	r2, r3, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d027      	beq.n	8001f20 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_GPIO_Init+0x1f0>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d007      	beq.n	8001ef0 <HAL_GPIO_Init+0x1f0>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x1f0>
 8001ee8:	21d1      	movs	r1, #209	; 0xd1
 8001eea:	4861      	ldr	r0, [pc, #388]	; (8002070 <HAL_GPIO_Init+0x370>)
 8001eec:	f7fe fe81 	bl	8000bf2 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	f040 80a3 	bne.w	8002074 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d077      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b09      	cmp	r3, #9
 8001f3c:	d073      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06f      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d06b      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d067      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d063      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d05f      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d05b      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d057      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d053      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d04f      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d04b      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d047      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d043      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d03f      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d03b      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	d037      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d033      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d02f      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d02b      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d027      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b07      	cmp	r3, #7
 8001fdc:	d023      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b07      	cmp	r3, #7
 8001fe4:	d01f      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b07      	cmp	r3, #7
 8001fec:	d01b      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d017      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b0a      	cmp	r3, #10
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b09      	cmp	r3, #9
 8002004:	d00f      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b09      	cmp	r3, #9
 800200c:	d00b      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x326>
 800201e:	21de      	movs	r1, #222	; 0xde
 8002020:	4813      	ldr	r0, [pc, #76]	; (8002070 <HAL_GPIO_Init+0x370>)
 8002022:	f7fe fde6 	bl	8000bf2 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	08da      	lsrs	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3208      	adds	r2, #8
 800202e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	08da      	lsrs	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3208      	adds	r2, #8
 8002068:	69b9      	ldr	r1, [r7, #24]
 800206a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800206e:	e001      	b.n	8002074 <HAL_GPIO_Init+0x374>
 8002070:	0800f2b8 	.word	0x0800f2b8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0203 	and.w	r2, r3, #3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80a2 	beq.w	80021fa <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b56      	ldr	r3, [pc, #344]	; (8002214 <HAL_GPIO_Init+0x514>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a55      	ldr	r2, [pc, #340]	; (8002214 <HAL_GPIO_Init+0x514>)
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_GPIO_Init+0x514>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d2:	4a51      	ldr	r2, [pc, #324]	; (8002218 <HAL_GPIO_Init+0x518>)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a48      	ldr	r2, [pc, #288]	; (800221c <HAL_GPIO_Init+0x51c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d019      	beq.n	8002132 <HAL_GPIO_Init+0x432>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a47      	ldr	r2, [pc, #284]	; (8002220 <HAL_GPIO_Init+0x520>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0x42e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a46      	ldr	r2, [pc, #280]	; (8002224 <HAL_GPIO_Init+0x524>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00d      	beq.n	800212a <HAL_GPIO_Init+0x42a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a45      	ldr	r2, [pc, #276]	; (8002228 <HAL_GPIO_Init+0x528>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x426>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a44      	ldr	r2, [pc, #272]	; (800222c <HAL_GPIO_Init+0x52c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_GPIO_Init+0x422>
 800211e:	2304      	movs	r3, #4
 8002120:	e008      	b.n	8002134 <HAL_GPIO_Init+0x434>
 8002122:	2307      	movs	r3, #7
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x434>
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x434>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x434>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x434>
 8002132:	2300      	movs	r3, #0
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f002 0203 	and.w	r2, r2, #3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002144:	4934      	ldr	r1, [pc, #208]	; (8002218 <HAL_GPIO_Init+0x518>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b37      	ldr	r3, [pc, #220]	; (8002230 <HAL_GPIO_Init+0x530>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002176:	4a2e      	ldr	r2, [pc, #184]	; (8002230 <HAL_GPIO_Init+0x530>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_GPIO_Init+0x530>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a0:	4a23      	ldr	r2, [pc, #140]	; (8002230 <HAL_GPIO_Init+0x530>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <HAL_GPIO_Init+0x530>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ca:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_GPIO_Init+0x530>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_GPIO_Init+0x530>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_GPIO_Init+0x530>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	f67f adfe 	bls.w	8001e04 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40013800 	.word	0x40013800
 800221c:	40020000 	.word	0x40020000
 8002220:	40020400 	.word	0x40020400
 8002224:	40020800 	.word	0x40020800
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40021000 	.word	0x40021000
 8002230:	40013c00 	.word	0x40013c00

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_GPIO_WritePin+0x20>
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	041b      	lsls	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <HAL_GPIO_WritePin+0x2a>
 8002254:	f240 119d 	movw	r1, #413	; 0x19d
 8002258:	480e      	ldr	r0, [pc, #56]	; (8002294 <HAL_GPIO_WritePin+0x60>)
 800225a:	f7fe fcca 	bl	8000bf2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800225e:	787b      	ldrb	r3, [r7, #1]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_GPIO_WritePin+0x40>
 8002264:	787b      	ldrb	r3, [r7, #1]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d004      	beq.n	8002274 <HAL_GPIO_WritePin+0x40>
 800226a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800226e:	4809      	ldr	r0, [pc, #36]	; (8002294 <HAL_GPIO_WritePin+0x60>)
 8002270:	f7fe fcbf 	bl	8000bf2 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002280:	e003      	b.n	800228a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	0800f2b8 	.word	0x0800f2b8

08002298 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <HAL_GPIO_TogglePin+0x1c>
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_GPIO_TogglePin+0x26>
 80022b4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80022b8:	480a      	ldr	r0, [pc, #40]	; (80022e4 <HAL_GPIO_TogglePin+0x4c>)
 80022ba:	f7fe fc9a 	bl	8000bf2 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c4:	887a      	ldrh	r2, [r7, #2]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	041a      	lsls	r2, r3, #16
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	887b      	ldrh	r3, [r7, #2]
 80022d2:	400b      	ands	r3, r1
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	619a      	str	r2, [r3, #24]
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0800f2b8 	.word	0x0800f2b8

080022e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d006      	beq.n	800230c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff f93e 	bl	8001588 <HAL_GPIO_EXTI_Callback>
  }
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1bd      	b.n	80026a6 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a93      	ldr	r2, [pc, #588]	; (800257c <HAL_I2C_Init+0x264>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00e      	beq.n	8002352 <HAL_I2C_Init+0x3a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a91      	ldr	r2, [pc, #580]	; (8002580 <HAL_I2C_Init+0x268>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_I2C_Init+0x3a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a90      	ldr	r2, [pc, #576]	; (8002584 <HAL_I2C_Init+0x26c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_I2C_Init+0x3a>
 8002348:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800234c:	488e      	ldr	r0, [pc, #568]	; (8002588 <HAL_I2C_Init+0x270>)
 800234e:	f7fe fc50 	bl	8000bf2 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_I2C_Init+0x4c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4a8b      	ldr	r2, [pc, #556]	; (800258c <HAL_I2C_Init+0x274>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d904      	bls.n	800236e <HAL_I2C_Init+0x56>
 8002364:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002368:	4887      	ldr	r0, [pc, #540]	; (8002588 <HAL_I2C_Init+0x270>)
 800236a:	f7fe fc42 	bl	8000bf2 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_I2C_Init+0x72>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800237e:	d004      	beq.n	800238a <HAL_I2C_Init+0x72>
 8002380:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002384:	4880      	ldr	r0, [pc, #512]	; (8002588 <HAL_I2C_Init+0x270>)
 8002386:	f7fe fc34 	bl	8000bf2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <HAL_I2C_Init+0x8c>
 800239a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800239e:	487a      	ldr	r0, [pc, #488]	; (8002588 <HAL_I2C_Init+0x270>)
 80023a0:	f7fe fc27 	bl	8000bf2 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ac:	d009      	beq.n	80023c2 <HAL_I2C_Init+0xaa>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023b6:	d004      	beq.n	80023c2 <HAL_I2C_Init+0xaa>
 80023b8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80023bc:	4872      	ldr	r0, [pc, #456]	; (8002588 <HAL_I2C_Init+0x270>)
 80023be:	f7fe fc18 	bl	8000bf2 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_I2C_Init+0xc4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d004      	beq.n	80023dc <HAL_I2C_Init+0xc4>
 80023d2:	f240 11c3 	movw	r1, #451	; 0x1c3
 80023d6:	486c      	ldr	r0, [pc, #432]	; (8002588 <HAL_I2C_Init+0x270>)
 80023d8:	f7fe fc0b 	bl	8000bf2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <HAL_I2C_Init+0xda>
 80023e8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80023ec:	4866      	ldr	r0, [pc, #408]	; (8002588 <HAL_I2C_Init+0x270>)
 80023ee:	f7fe fc00 	bl	8000bf2 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_I2C_Init+0xf4>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b40      	cmp	r3, #64	; 0x40
 8002400:	d004      	beq.n	800240c <HAL_I2C_Init+0xf4>
 8002402:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002406:	4860      	ldr	r0, [pc, #384]	; (8002588 <HAL_I2C_Init+0x270>)
 8002408:	f7fe fbf3 	bl	8000bf2 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_I2C_Init+0x10e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	2b80      	cmp	r3, #128	; 0x80
 800241a:	d004      	beq.n	8002426 <HAL_I2C_Init+0x10e>
 800241c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002420:	4859      	ldr	r0, [pc, #356]	; (8002588 <HAL_I2C_Init+0x270>)
 8002422:	f7fe fbe6 	bl	8000bf2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fa7e 	bl	800093c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002478:	f002 fd7c 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 800247c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a43      	ldr	r2, [pc, #268]	; (8002590 <HAL_I2C_Init+0x278>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d807      	bhi.n	8002498 <HAL_I2C_Init+0x180>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a42      	ldr	r2, [pc, #264]	; (8002594 <HAL_I2C_Init+0x27c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e006      	b.n	80024a6 <HAL_I2C_Init+0x18e>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <HAL_I2C_Init+0x280>)
 800249c:	4293      	cmp	r3, r2
 800249e:	bf94      	ite	ls
 80024a0:	2301      	movls	r3, #1
 80024a2:	2300      	movhi	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0fb      	b.n	80026a6 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a3a      	ldr	r2, [pc, #232]	; (800259c <HAL_I2C_Init+0x284>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0c9b      	lsrs	r3, r3, #18
 80024b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a2c      	ldr	r2, [pc, #176]	; (8002590 <HAL_I2C_Init+0x278>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d802      	bhi.n	80024e8 <HAL_I2C_Init+0x1d0>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3301      	adds	r3, #1
 80024e6:	e009      	b.n	80024fc <HAL_I2C_Init+0x1e4>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <HAL_I2C_Init+0x288>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	3301      	adds	r3, #1
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	430b      	orrs	r3, r1
 8002502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800250e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	491e      	ldr	r1, [pc, #120]	; (8002590 <HAL_I2C_Init+0x278>)
 8002518:	428b      	cmp	r3, r1
 800251a:	d819      	bhi.n	8002550 <HAL_I2C_Init+0x238>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1e59      	subs	r1, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fbb1 f3f3 	udiv	r3, r1, r3
 800252a:	1c59      	adds	r1, r3, #1
 800252c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002530:	400b      	ands	r3, r1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_I2C_Init+0x234>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1e59      	subs	r1, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fbb1 f3f3 	udiv	r3, r1, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254a:	e065      	b.n	8002618 <HAL_I2C_Init+0x300>
 800254c:	2304      	movs	r3, #4
 800254e:	e063      	b.n	8002618 <HAL_I2C_Init+0x300>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d125      	bne.n	80025a4 <HAL_I2C_Init+0x28c>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	440b      	add	r3, r1
 8002566:	fbb0 f3f3 	udiv	r3, r0, r3
 800256a:	3301      	adds	r3, #1
 800256c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e026      	b.n	80025ca <HAL_I2C_Init+0x2b2>
 800257c:	40005400 	.word	0x40005400
 8002580:	40005800 	.word	0x40005800
 8002584:	40005c00 	.word	0x40005c00
 8002588:	0800f2f4 	.word	0x0800f2f4
 800258c:	00061a80 	.word	0x00061a80
 8002590:	000186a0 	.word	0x000186a0
 8002594:	001e847f 	.word	0x001e847f
 8002598:	003d08ff 	.word	0x003d08ff
 800259c:	431bde83 	.word	0x431bde83
 80025a0:	10624dd3 	.word	0x10624dd3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	0099      	lsls	r1, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Init+0x2ba>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e022      	b.n	8002618 <HAL_I2C_Init+0x300>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10e      	bne.n	80025f8 <HAL_I2C_Init+0x2e0>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1e58      	subs	r0, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	440b      	add	r3, r1
 80025e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ec:	3301      	adds	r3, #1
 80025ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f6:	e00f      	b.n	8002618 <HAL_I2C_Init+0x300>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1e58      	subs	r0, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	0099      	lsls	r1, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	fbb0 f3f3 	udiv	r3, r0, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	6809      	ldr	r1, [r1, #0]
 800261c:	4313      	orrs	r3, r2
 800261e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69da      	ldr	r2, [r3, #28]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6911      	ldr	r1, [r2, #16]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68d2      	ldr	r2, [r2, #12]
 8002652:	4311      	orrs	r1, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	430b      	orrs	r3, r1
 800265a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop

080026b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	460b      	mov	r3, r1
 80026c4:	813b      	strh	r3, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ca:	f7ff f9d7 	bl	8001a7c <HAL_GetTick>
 80026ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d007      	beq.n	80026e6 <HAL_I2C_Mem_Write+0x36>
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d004      	beq.n	80026e6 <HAL_I2C_Mem_Write+0x36>
 80026dc:	f640 11b9 	movw	r1, #2489	; 0x9b9
 80026e0:	4873      	ldr	r0, [pc, #460]	; (80028b0 <HAL_I2C_Mem_Write+0x200>)
 80026e2:	f7fe fa86 	bl	8000bf2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	f040 80d9 	bne.w	80028a6 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2319      	movs	r3, #25
 80026fa:	2201      	movs	r2, #1
 80026fc:	496d      	ldr	r1, [pc, #436]	; (80028b4 <HAL_I2C_Mem_Write+0x204>)
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 faa0 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
 800270c:	e0cc      	b.n	80028a8 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_I2C_Mem_Write+0x6c>
 8002718:	2302      	movs	r3, #2
 800271a:	e0c5      	b.n	80028a8 <HAL_I2C_Mem_Write+0x1f8>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d007      	beq.n	8002742 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002750:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2221      	movs	r2, #33	; 0x21
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2240      	movs	r2, #64	; 0x40
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a3a      	ldr	r2, [r7, #32]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002772:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a4d      	ldr	r2, [pc, #308]	; (80028b8 <HAL_I2C_Mem_Write+0x208>)
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002784:	88f8      	ldrh	r0, [r7, #6]
 8002786:	893a      	ldrh	r2, [r7, #8]
 8002788:	8979      	ldrh	r1, [r7, #10]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	4603      	mov	r3, r0
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f9bf 	bl	8002b18 <I2C_RequestMemoryWrite>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d052      	beq.n	8002846 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e081      	b.n	80028a8 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fb21 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d107      	bne.n	80027cc <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e06b      	b.n	80028a8 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b04      	cmp	r3, #4
 800280c:	d11b      	bne.n	8002846 <HAL_I2C_Mem_Write+0x196>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002812:	2b00      	cmp	r3, #0
 8002814:	d017      	beq.n	8002846 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1aa      	bne.n	80027a4 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fb0d 	bl	8002e72 <I2C_WaitOnBTFFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e016      	b.n	80028a8 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002888:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
  }
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	0800f2f4 	.word	0x0800f2f4
 80028b4:	00100002 	.word	0x00100002
 80028b8:	ffff0000 	.word	0xffff0000

080028bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	460b      	mov	r3, r1
 80028ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff f8d6 	bl	8001a7c <HAL_GetTick>
 80028d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b20      	cmp	r3, #32
 80028e0:	f040 8111 	bne.w	8002b06 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2319      	movs	r3, #25
 80028ea:	2201      	movs	r2, #1
 80028ec:	4988      	ldr	r1, [pc, #544]	; (8002b10 <HAL_I2C_IsDeviceReady+0x254>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f9a8 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	e104      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_I2C_IsDeviceReady+0x50>
 8002908:	2302      	movs	r3, #2
 800290a:	e0fd      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x24c>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d007      	beq.n	8002932 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002940:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2224      	movs	r2, #36	; 0x24
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a70      	ldr	r2, [pc, #448]	; (8002b14 <HAL_I2C_IsDeviceReady+0x258>)
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002964:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f966 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00d      	beq.n	800299a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298c:	d103      	bne.n	8002996 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e0b6      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800299a:	897b      	ldrh	r3, [r7, #10]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029aa:	f7ff f867 	bl	8001a7c <HAL_GetTick>
 80029ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029de:	e025      	b.n	8002a2c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029e0:	f7ff f84c 	bl	8001a7c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d302      	bcc.n	80029f6 <HAL_I2C_IsDeviceReady+0x13a>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	22a0      	movs	r2, #160	; 0xa0
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2ba0      	cmp	r3, #160	; 0xa0
 8002a36:	d005      	beq.n	8002a44 <HAL_I2C_IsDeviceReady+0x188>
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <HAL_I2C_IsDeviceReady+0x188>
 8002a3e:	7dbb      	ldrb	r3, [r7, #22]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0cd      	beq.n	80029e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d129      	bne.n	8002aae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a68:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2319      	movs	r3, #25
 8002a86:	2201      	movs	r2, #1
 8002a88:	4921      	ldr	r1, [pc, #132]	; (8002b10 <HAL_I2C_IsDeviceReady+0x254>)
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f8da 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e036      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e02c      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2319      	movs	r3, #25
 8002ace:	2201      	movs	r2, #1
 8002ad0:	490f      	ldr	r1, [pc, #60]	; (8002b10 <HAL_I2C_IsDeviceReady+0x254>)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f8b6 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e012      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f4ff af32 	bcc.w	8002956 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	00100002 	.word	0x00100002
 8002b14:	ffff0000 	.word	0xffff0000

08002b18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	4608      	mov	r0, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	461a      	mov	r2, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	817b      	strh	r3, [r7, #10]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	813b      	strh	r3, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f878 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b68:	d103      	bne.n	8002b72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e05f      	b.n	8002c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	6a3a      	ldr	r2, [r7, #32]
 8002b8a:	492d      	ldr	r1, [pc, #180]	; (8002c40 <I2C_RequestMemoryWrite+0x128>)
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f8b0 	bl	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e04c      	b.n	8002c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb4:	6a39      	ldr	r1, [r7, #32]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f91a 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d107      	bne.n	8002bda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e02b      	b.n	8002c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002be4:	893b      	ldrh	r3, [r7, #8]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]
 8002bee:	e021      	b.n	8002c34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bf0:	893b      	ldrh	r3, [r7, #8]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c00:	6a39      	ldr	r1, [r7, #32]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f8f4 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d107      	bne.n	8002c26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e005      	b.n	8002c36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c2a:	893b      	ldrh	r3, [r7, #8]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	00010002 	.word	0x00010002

08002c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c54:	e025      	b.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d021      	beq.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7fe ff0d 	bl	8001a7c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d116      	bne.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e023      	b.n	8002cea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d10d      	bne.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	e00c      	b.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d0b6      	beq.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d00:	e051      	b.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d10:	d123      	bne.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f043 0204 	orr.w	r2, r3, #4
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e046      	b.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d021      	beq.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7fe fe8b 	bl	8001a7c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d116      	bne.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e020      	b.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d10c      	bne.n	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf14      	ite	ne
 8002dc2:	2301      	movne	r3, #1
 8002dc4:	2300      	moveq	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	e00b      	b.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d18d      	bne.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dfc:	e02d      	b.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f878 	bl	8002ef4 <I2C_IsAcknowledgeFailed>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e02d      	b.n	8002e6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d021      	beq.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fe fe31 	bl	8001a7c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d116      	bne.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d1ca      	bne.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e7e:	e02d      	b.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f837 	bl	8002ef4 <I2C_IsAcknowledgeFailed>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e02d      	b.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d021      	beq.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e98:	f7fe fdf0 	bl	8001a7c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d302      	bcc.n	8002eae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d116      	bne.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d1ca      	bne.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d11b      	bne.n	8002f44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f56:	b08f      	sub	sp, #60	; 0x3c
 8002f58:	af0a      	add	r7, sp, #40	; 0x28
 8002f5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e118      	b.n	8003198 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f6e:	d003      	beq.n	8002f78 <HAL_PCD_Init+0x24>
 8002f70:	2187      	movs	r1, #135	; 0x87
 8002f72:	488b      	ldr	r0, [pc, #556]	; (80031a0 <HAL_PCD_Init+0x24c>)
 8002f74:	f7fd fe3d 	bl	8000bf2 <assert_failed>

  USBx = hpcd->Instance;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f00b fc72 	bl	800e87c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 fd45 	bl	8007a46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	687e      	ldr	r6, [r7, #4]
 8002fc4:	466d      	mov	r5, sp
 8002fc6:	f106 0410 	add.w	r4, r6, #16
 8002fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fda:	1d33      	adds	r3, r6, #4
 8002fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fde:	6838      	ldr	r0, [r7, #0]
 8002fe0:	f004 fc1c 	bl	800781c <USB_CoreInit>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e0d0      	b.n	8003198 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f004 fd33 	bl	8007a68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e04a      	b.n	800309e <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	333d      	adds	r3, #61	; 0x3d
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	333c      	adds	r3, #60	; 0x3c
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	b298      	uxth	r0, r3
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	3344      	adds	r3, #68	; 0x44
 8003044:	4602      	mov	r2, r0
 8003046:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3340      	adds	r3, #64	; 0x40
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	3348      	adds	r3, #72	; 0x48
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	334c      	adds	r3, #76	; 0x4c
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3354      	adds	r3, #84	; 0x54
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	3301      	adds	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d3af      	bcc.n	8003008 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]
 80030ac:	e044      	b.n	8003138 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030d6:	7bfa      	ldrb	r2, [r7, #15]
 80030d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	3301      	adds	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	429a      	cmp	r2, r3
 8003140:	d3b5      	bcc.n	80030ae <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	687e      	ldr	r6, [r7, #4]
 800314a:	466d      	mov	r5, sp
 800314c:	f106 0410 	add.w	r4, r6, #16
 8003150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003158:	e894 0003 	ldmia.w	r4, {r0, r1}
 800315c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003160:	1d33      	adds	r3, r6, #4
 8003162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003164:	6838      	ldr	r0, [r7, #0]
 8003166:	f004 fccb 	bl	8007b00 <USB_DevInit>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e00d      	b.n	8003198 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f005 fe1a 	bl	8008dca <USB_DevDisconnect>

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a0:	0800f32c 	.word	0x0800f32c

080031a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_PCD_Start+0x1c>
 80031bc:	2302      	movs	r3, #2
 80031be:	e020      	b.n	8003202 <HAL_PCD_Start+0x5e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d109      	bne.n	80031e4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d005      	beq.n	80031e4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 fc1b 	bl	8007a24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f005 fdc8 	bl	8008d88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800320a:	b590      	push	{r4, r7, lr}
 800320c:	b08d      	sub	sp, #52	; 0x34
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f005 fe86 	bl	8008f32 <USB_GetMode>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	f040 848a 	bne.w	8003b42 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f005 fdea 	bl	8008e0c <USB_ReadInterrupts>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8480 	beq.w	8003b40 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f005 fdd7 	bl	8008e0c <USB_ReadInterrupts>
 800325e:	4603      	mov	r3, r0
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b02      	cmp	r3, #2
 8003266:	d107      	bne.n	8003278 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f002 0202 	and.w	r2, r2, #2
 8003276:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f005 fdc5 	bl	8008e0c <USB_ReadInterrupts>
 8003282:	4603      	mov	r3, r0
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b10      	cmp	r3, #16
 800328a:	d161      	bne.n	8003350 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0210 	bic.w	r2, r2, #16
 800329a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f003 020f 	and.w	r2, r3, #15
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	3304      	adds	r3, #4
 80032ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	0c5b      	lsrs	r3, r3, #17
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d124      	bne.n	8003312 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d035      	beq.n	8003340 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	6a38      	ldr	r0, [r7, #32]
 80032e8:	f005 fbfc 	bl	8008ae4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f8:	441a      	add	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	6a1a      	ldr	r2, [r3, #32]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800330a:	441a      	add	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	621a      	str	r2, [r3, #32]
 8003310:	e016      	b.n	8003340 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	0c5b      	lsrs	r3, r3, #17
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	2b06      	cmp	r3, #6
 800331c:	d110      	bne.n	8003340 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003324:	2208      	movs	r2, #8
 8003326:	4619      	mov	r1, r3
 8003328:	6a38      	ldr	r0, [r7, #32]
 800332a:	f005 fbdb 	bl	8008ae4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	6a1a      	ldr	r2, [r3, #32]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800333a:	441a      	add	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0210 	orr.w	r2, r2, #16
 800334e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f005 fd59 	bl	8008e0c <USB_ReadInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003360:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003364:	f040 80a7 	bne.w	80034b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f005 fd5e 	bl	8008e32 <USB_ReadDevAllOutEpInterrupt>
 8003376:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003378:	e099      	b.n	80034ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 808e 	beq.w	80034a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f005 fd82 	bl	8008e9a <USB_ReadDevOutEPInterrupt>
 8003396:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00c      	beq.n	80033bc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	461a      	mov	r2, r3
 80033b0:	2301      	movs	r3, #1
 80033b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fec2 	bl	8004140 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	2308      	movs	r3, #8
 80033d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 ff98 	bl	8004310 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f6:	461a      	mov	r2, r3
 80033f8:	2310      	movs	r3, #16
 80033fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d030      	beq.n	8003468 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b80      	cmp	r3, #128	; 0x80
 8003410:	d109      	bne.n	8003426 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003420:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003424:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	3304      	adds	r3, #4
 800343a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	78db      	ldrb	r3, [r3, #3]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d108      	bne.n	8003456 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	b2db      	uxtb	r3, r3
 800344e:	4619      	mov	r1, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f00b fb0f 	bl	800ea74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	2302      	movs	r3, #2
 8003466:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	2320      	movs	r3, #32
 8003482:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	4413      	add	r3, r2
 8003496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349a:	461a      	mov	r2, r3
 800349c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	3301      	adds	r3, #1
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f47f af62 	bne.w	800337a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f005 fca6 	bl	8008e0c <USB_ReadInterrupts>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034ca:	f040 80db 	bne.w	8003684 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f005 fcc7 	bl	8008e66 <USB_ReadDevAllInEpInterrupt>
 80034d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80034de:	e0cd      	b.n	800367c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80c2 	beq.w	8003670 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f005 fced 	bl	8008ed6 <USB_ReadDevInEPInterrupt>
 80034fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d057      	beq.n	80035b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	2201      	movs	r2, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	43db      	mvns	r3, r3
 8003522:	69f9      	ldr	r1, [r7, #28]
 8003524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003528:	4013      	ands	r3, r2
 800352a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	461a      	mov	r2, r3
 800353a:	2301      	movs	r3, #1
 800353c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d132      	bne.n	80035ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	334c      	adds	r3, #76	; 0x4c
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4403      	add	r3, r0
 8003566:	3348      	adds	r3, #72	; 0x48
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4419      	add	r1, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4403      	add	r3, r0
 800357a:	334c      	adds	r3, #76	; 0x4c
 800357c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	2b00      	cmp	r3, #0
 8003582:	d113      	bne.n	80035ac <HAL_PCD_IRQHandler+0x3a2>
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3354      	adds	r3, #84	; 0x54
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d108      	bne.n	80035ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035a4:	461a      	mov	r2, r3
 80035a6:	2101      	movs	r1, #1
 80035a8:	f005 fcf4 	bl	8008f94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	4619      	mov	r1, r3
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f00b f9e3 	bl	800e97e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ce:	461a      	mov	r2, r3
 80035d0:	2308      	movs	r3, #8
 80035d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ea:	461a      	mov	r2, r3
 80035ec:	2310      	movs	r3, #16
 80035ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003606:	461a      	mov	r2, r3
 8003608:	2340      	movs	r3, #64	; 0x40
 800360a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d023      	beq.n	800365e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003618:	6a38      	ldr	r0, [r7, #32]
 800361a:	f004 fbd5 	bl	8007dc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3338      	adds	r3, #56	; 0x38
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	3304      	adds	r3, #4
 8003630:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	78db      	ldrb	r3, [r3, #3]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d108      	bne.n	800364c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	b2db      	uxtb	r3, r3
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f00b fa26 	bl	800ea98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003658:	461a      	mov	r2, r3
 800365a:	2302      	movs	r3, #2
 800365c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fcdb 	bl	8004026 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	3301      	adds	r3, #1
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	2b00      	cmp	r3, #0
 8003680:	f47f af2e 	bne.w	80034e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f005 fbbf 	bl	8008e0c <USB_ReadInterrupts>
 800368e:	4603      	mov	r3, r0
 8003690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003698:	d122      	bne.n	80036e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d108      	bne.n	80036ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036c0:	2100      	movs	r1, #0
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fec2 	bl	800444c <HAL_PCDEx_LPM_Callback>
 80036c8:	e002      	b.n	80036d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f00b f9c4 	bl	800ea58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f005 fb91 	bl	8008e0c <USB_ReadInterrupts>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f4:	d112      	bne.n	800371c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f00b f980 	bl	800ea0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800371a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f005 fb73 	bl	8008e0c <USB_ReadInterrupts>
 8003726:	4603      	mov	r3, r0
 8003728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	f040 80b7 	bne.w	80038a2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2110      	movs	r1, #16
 800374e:	4618      	mov	r0, r3
 8003750:	f004 fb3a 	bl	8007dc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003754:	2300      	movs	r3, #0
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003758:	e046      	b.n	80037e8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003766:	461a      	mov	r2, r3
 8003768:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800376c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800377e:	0151      	lsls	r1, r2, #5
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	440a      	add	r2, r1
 8003784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003788:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800378c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	461a      	mov	r2, r3
 800379c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d2:	0151      	lsls	r1, r2, #5
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	440a      	add	r2, r1
 80037d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	3301      	adds	r3, #1
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d3b3      	bcc.n	800375a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003800:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003804:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800381e:	f043 030b 	orr.w	r3, r3, #11
 8003822:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003834:	f043 030b 	orr.w	r3, r3, #11
 8003838:	6453      	str	r3, [r2, #68]	; 0x44
 800383a:	e015      	b.n	8003868 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800384a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800384e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003852:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003862:	f043 030b 	orr.w	r3, r3, #11
 8003866:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003876:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800387a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800388c:	461a      	mov	r2, r3
 800388e:	f005 fb81 	bl	8008f94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f005 fab0 	bl	8008e0c <USB_ReadInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b6:	d124      	bne.n	8003902 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f005 fb46 	bl	8008f4e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 fafb 	bl	8007ec2 <USB_GetDevSpeed>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681c      	ldr	r4, [r3, #0]
 80038d8:	f001 fb40 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 80038dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	4620      	mov	r0, r4
 80038e8:	f003 fffa 	bl	80078e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f00b f86e 	bl	800e9ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003900:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f005 fa80 	bl	8008e0c <USB_ReadInterrupts>
 800390c:	4603      	mov	r3, r0
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b08      	cmp	r3, #8
 8003914:	d10a      	bne.n	800392c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f00b f84b 	bl	800e9b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f002 0208 	and.w	r2, r2, #8
 800392a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f005 fa6b 	bl	8008e0c <USB_ReadInterrupts>
 8003936:	4603      	mov	r3, r0
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d122      	bne.n	8003986 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800394c:	2301      	movs	r3, #1
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
 8003950:	e014      	b.n	800397c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d105      	bne.n	8003976 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fb27 	bl	8003fc4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	3301      	adds	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003982:	429a      	cmp	r2, r3
 8003984:	d3e5      	bcc.n	8003952 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f005 fa3e 	bl	8008e0c <USB_ReadInterrupts>
 8003990:	4603      	mov	r3, r0
 8003992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d13b      	bne.n	8003a14 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800399c:	2301      	movs	r3, #1
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	e02b      	b.n	80039fa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	3340      	adds	r3, #64	; 0x40
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d115      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	da12      	bge.n	80039f4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d2:	4613      	mov	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	333f      	adds	r3, #63	; 0x3f
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4619      	mov	r1, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fae8 	bl	8003fc4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	3301      	adds	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d3ce      	bcc.n	80039a2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f005 f9f7 	bl	8008e0c <USB_ReadInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a28:	d155      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	e045      	b.n	8003abc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d12e      	bne.n	8003ab6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	da2b      	bge.n	8003ab6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a6a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d121      	bne.n	8003ab6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a84:	2201      	movs	r2, #1
 8003a86:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ab2:	6053      	str	r3, [r2, #4]
            break;
 8003ab4:	e007      	b.n	8003ac6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	3301      	adds	r3, #1
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d3b4      	bcc.n	8003a30 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f005 f996 	bl	8008e0c <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aea:	d10a      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f00a ffe5 	bl	800eabc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f005 f980 	bl	8008e0c <USB_ReadInterrupts>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d115      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f00a ffd5 	bl	800ead8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e000      	b.n	8003b42 <HAL_PCD_IRQHandler+0x938>
      return;
 8003b40:	bf00      	nop
    }
  }
}
 8003b42:	3734      	adds	r7, #52	; 0x34
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd90      	pop	{r4, r7, pc}

08003b48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_PCD_SetAddress+0x1a>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e013      	b.n	8003b8a <HAL_PCD_SetAddress+0x42>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f005 f8de 	bl	8008d3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	4608      	mov	r0, r1
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	70fb      	strb	r3, [r7, #3]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	803b      	strh	r3, [r7, #0]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	da0f      	bge.n	8003bd8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	f003 020f 	and.w	r2, r3, #15
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	3338      	adds	r3, #56	; 0x38
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4413      	add	r3, r2
 8003bcc:	3304      	adds	r3, #4
 8003bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	705a      	strb	r2, [r3, #1]
 8003bd6:	e00f      	b.n	8003bf8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	f003 020f 	and.w	r2, r3, #15
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	3304      	adds	r3, #4
 8003bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c04:	883a      	ldrh	r2, [r7, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	78ba      	ldrb	r2, [r7, #2]
 8003c0e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	785b      	ldrb	r3, [r3, #1]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c22:	78bb      	ldrb	r3, [r7, #2]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d102      	bne.n	8003c2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_PCD_EP_Open+0xaa>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e00e      	b.n	8003c5a <HAL_PCD_EP_Open+0xc8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68f9      	ldr	r1, [r7, #12]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 f95e 	bl	8007f0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c58:	7afb      	ldrb	r3, [r7, #11]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da0f      	bge.n	8003c96 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f003 020f 	and.w	r2, r3, #15
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	3338      	adds	r3, #56	; 0x38
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	705a      	strb	r2, [r3, #1]
 8003c94:	e00f      	b.n	8003cb6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4413      	add	r3, r2
 8003cac:	3304      	adds	r3, #4
 8003cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_PCD_EP_Close+0x6e>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e00e      	b.n	8003cee <HAL_PCD_EP_Close+0x8c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f004 f99c 	bl	800801c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	460b      	mov	r3, r1
 8003d04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d06:	7afb      	ldrb	r3, [r7, #11]
 8003d08:	f003 020f 	and.w	r2, r3, #15
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2200      	movs	r2, #0
 8003d36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d102      	bne.n	8003d52 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d52:	7afb      	ldrb	r3, [r7, #11]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d109      	bne.n	8003d70 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	6979      	ldr	r1, [r7, #20]
 8003d6a:	f004 fc7b 	bl	8008664 <USB_EP0StartXfer>
 8003d6e:	e008      	b.n	8003d82 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6979      	ldr	r1, [r7, #20]
 8003d7e:	f004 fa29 	bl	80081d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f003 020f 	and.w	r2, r3, #15
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dcc:	7afb      	ldrb	r3, [r7, #11]
 8003dce:	f003 020f 	and.w	r2, r3, #15
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	3338      	adds	r3, #56	; 0x38
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	3304      	adds	r3, #4
 8003de2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dfc:	7afb      	ldrb	r3, [r7, #11]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e16:	7afb      	ldrb	r3, [r7, #11]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6979      	ldr	r1, [r7, #20]
 8003e2e:	f004 fc19 	bl	8008664 <USB_EP0StartXfer>
 8003e32:	e008      	b.n	8003e46 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6979      	ldr	r1, [r7, #20]
 8003e42:	f004 f9c7 	bl	80081d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	f003 020f 	and.w	r2, r3, #15
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d901      	bls.n	8003e6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e050      	b.n	8003f10 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da0f      	bge.n	8003e96 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	f003 020f 	and.w	r2, r3, #15
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	3338      	adds	r3, #56	; 0x38
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	705a      	strb	r2, [r3, #1]
 8003e94:	e00d      	b.n	8003eb2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_PCD_EP_SetStall+0x82>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e01e      	b.n	8003f10 <HAL_PCD_EP_SetStall+0xc0>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f004 fe57 	bl	8008b94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	b2d9      	uxtb	r1, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f00:	461a      	mov	r2, r3
 8003f02:	f005 f847 	bl	8008f94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	f003 020f 	and.w	r2, r3, #15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d901      	bls.n	8003f36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e042      	b.n	8003fbc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da0f      	bge.n	8003f5e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	f003 020f 	and.w	r2, r3, #15
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	3338      	adds	r3, #56	; 0x38
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	3304      	adds	r3, #4
 8003f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	705a      	strb	r2, [r3, #1]
 8003f5c:	e00f      	b.n	8003f7e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	3304      	adds	r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_PCD_EP_ClrStall+0x86>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e00e      	b.n	8003fbc <HAL_PCD_EP_ClrStall+0xa4>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f004 fe5f 	bl	8008c70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	da0c      	bge.n	8003ff2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	f003 020f 	and.w	r2, r3, #15
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	3338      	adds	r3, #56	; 0x38
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	3304      	adds	r3, #4
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e00c      	b.n	800400c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4413      	add	r3, r2
 8004008:	3304      	adds	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68f9      	ldr	r1, [r7, #12]
 8004012:	4618      	mov	r0, r3
 8004014:	f004 fc7e 	bl	8008914 <USB_EPStopXfer>
 8004018:	4603      	mov	r3, r0
 800401a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800401c:	7afb      	ldrb	r3, [r7, #11]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b08a      	sub	sp, #40	; 0x28
 800402a:	af02      	add	r7, sp, #8
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	3338      	adds	r3, #56	; 0x38
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	3304      	adds	r3, #4
 800404c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	429a      	cmp	r2, r3
 8004058:	d901      	bls.n	800405e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e06c      	b.n	8004138 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	429a      	cmp	r2, r3
 8004072:	d902      	bls.n	800407a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3303      	adds	r3, #3
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004082:	e02b      	b.n	80040dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	429a      	cmp	r2, r3
 8004098:	d902      	bls.n	80040a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	3303      	adds	r3, #3
 80040a4:	089b      	lsrs	r3, r3, #2
 80040a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6919      	ldr	r1, [r3, #16]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	4603      	mov	r3, r0
 80040be:	6978      	ldr	r0, [r7, #20]
 80040c0:	f004 fcd2 	bl	8008a68 <USB_WritePacket>

    ep->xfer_buff  += len;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	441a      	add	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1a      	ldr	r2, [r3, #32]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d809      	bhi.n	8004106 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1a      	ldr	r2, [r3, #32]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d203      	bcs.n	8004106 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1be      	bne.n	8004084 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	429a      	cmp	r2, r3
 8004110:	d811      	bhi.n	8004136 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	2201      	movs	r2, #1
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	43db      	mvns	r3, r3
 800412c:	6939      	ldr	r1, [r7, #16]
 800412e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004132:	4013      	ands	r3, r2
 8004134:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	333c      	adds	r3, #60	; 0x3c
 8004158:	3304      	adds	r3, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d17b      	bne.n	800426e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	4a61      	ldr	r2, [pc, #388]	; (8004308 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	f240 80b9 	bls.w	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80b3 	beq.w	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a2:	461a      	mov	r2, r3
 80041a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a8:	6093      	str	r3, [r2, #8]
 80041aa:	e0a7      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	461a      	mov	r2, r3
 80041c4:	2320      	movs	r3, #32
 80041c6:	6093      	str	r3, [r2, #8]
 80041c8:	e098      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f040 8093 	bne.w	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	4a4b      	ldr	r2, [pc, #300]	; (8004308 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d90f      	bls.n	80041fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f4:	461a      	mov	r2, r3
 80041f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fa:	6093      	str	r3, [r2, #8]
 80041fc:	e07e      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	3304      	adds	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	0159      	lsls	r1, r3, #5
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	440b      	add	r3, r1
 8004220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d114      	bne.n	8004260 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004248:	461a      	mov	r2, r3
 800424a:	2101      	movs	r1, #1
 800424c:	f004 fea2 	bl	8008f94 <USB_EP0_OutStart>
 8004250:	e006      	b.n	8004260 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	441a      	add	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f00a fb6e 	bl	800e948 <HAL_PCD_DataOutStageCallback>
 800426c:	e046      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	4a26      	ldr	r2, [pc, #152]	; (800430c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d124      	bne.n	80042c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428c:	461a      	mov	r2, r3
 800428e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004292:	6093      	str	r3, [r2, #8]
 8004294:	e032      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	461a      	mov	r2, r3
 80042ae:	2320      	movs	r3, #32
 80042b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f00a fb45 	bl	800e948 <HAL_PCD_DataOutStageCallback>
 80042be:	e01d      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d114      	bne.n	80042f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d108      	bne.n	80042f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042e8:	461a      	mov	r2, r3
 80042ea:	2100      	movs	r1, #0
 80042ec:	f004 fe52 	bl	8008f94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f00a fb26 	bl	800e948 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	4f54300a 	.word	0x4f54300a
 800430c:	4f54310a 	.word	0x4f54310a

08004310 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	333c      	adds	r3, #60	; 0x3c
 8004328:	3304      	adds	r3, #4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a15      	ldr	r2, [pc, #84]	; (8004398 <PCD_EP_OutSetupPacket_int+0x88>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d90e      	bls.n	8004364 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004362:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f00a fadd 	bl	800e924 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <PCD_EP_OutSetupPacket_int+0x88>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d90c      	bls.n	800438c <PCD_EP_OutSetupPacket_int+0x7c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d108      	bne.n	800438c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004384:	461a      	mov	r2, r3
 8004386:	2101      	movs	r1, #1
 8004388:	f004 fe04 	bl	8008f94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	4f54300a 	.word	0x4f54300a

0800439c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
 80043a8:	4613      	mov	r3, r2
 80043aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043ba:	883b      	ldrh	r3, [r7, #0]
 80043bc:	0419      	lsls	r1, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28
 80043c8:	e028      	b.n	800441c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4413      	add	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
 80043dc:	e00d      	b.n	80043fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	3340      	adds	r3, #64	; 0x40
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	4413      	add	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	3301      	adds	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
 80043fa:	7bfa      	ldrb	r2, [r7, #15]
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	3b01      	subs	r3, #1
 8004400:	429a      	cmp	r2, r3
 8004402:	d3ec      	bcc.n	80043de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004404:	883b      	ldrh	r3, [r7, #0]
 8004406:	0418      	lsls	r0, r3, #16
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	3b01      	subs	r3, #1
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	4302      	orrs	r2, r0
 8004414:	3340      	adds	r3, #64	; 0x40
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e314      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b0f      	cmp	r3, #15
 800447c:	d903      	bls.n	8004486 <HAL_RCC_OscConfig+0x22>
 800447e:	21e6      	movs	r1, #230	; 0xe6
 8004480:	4897      	ldr	r0, [pc, #604]	; (80046e0 <HAL_RCC_OscConfig+0x27c>)
 8004482:	f7fc fbb6 	bl	8000bf2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8088 	beq.w	80045a4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <HAL_RCC_OscConfig+0x54>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a4:	d008      	beq.n	80044b8 <HAL_RCC_OscConfig+0x54>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ae:	d003      	beq.n	80044b8 <HAL_RCC_OscConfig+0x54>
 80044b0:	21eb      	movs	r1, #235	; 0xeb
 80044b2:	488b      	ldr	r0, [pc, #556]	; (80046e0 <HAL_RCC_OscConfig+0x27c>)
 80044b4:	f7fc fb9d 	bl	8000bf2 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044b8:	4b8a      	ldr	r3, [pc, #552]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d00c      	beq.n	80044de <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c4:	4b87      	ldr	r3, [pc, #540]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d112      	bne.n	80044f6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d0:	4b84      	ldr	r3, [pc, #528]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044dc:	d10b      	bne.n	80044f6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044de:	4b81      	ldr	r3, [pc, #516]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d05b      	beq.n	80045a2 <HAL_RCC_OscConfig+0x13e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d157      	bne.n	80045a2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e2d4      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d106      	bne.n	800450e <HAL_RCC_OscConfig+0xaa>
 8004500:	4b78      	ldr	r3, [pc, #480]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a77      	ldr	r2, [pc, #476]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	e01d      	b.n	800454a <HAL_RCC_OscConfig+0xe6>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004516:	d10c      	bne.n	8004532 <HAL_RCC_OscConfig+0xce>
 8004518:	4b72      	ldr	r3, [pc, #456]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a71      	ldr	r2, [pc, #452]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 800451e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b6f      	ldr	r3, [pc, #444]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6e      	ldr	r2, [pc, #440]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e00b      	b.n	800454a <HAL_RCC_OscConfig+0xe6>
 8004532:	4b6c      	ldr	r3, [pc, #432]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6b      	ldr	r2, [pc, #428]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b69      	ldr	r3, [pc, #420]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a68      	ldr	r2, [pc, #416]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004548:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d013      	beq.n	800457a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004552:	f7fd fa93 	bl	8001a7c <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455a:	f7fd fa8f 	bl	8001a7c <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b64      	cmp	r3, #100	; 0x64
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e299      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456c:	4b5d      	ldr	r3, [pc, #372]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0xf6>
 8004578:	e014      	b.n	80045a4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd fa7f 	bl	8001a7c <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004582:	f7fd fa7b 	bl	8001a7c <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e285      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004594:	4b53      	ldr	r3, [pc, #332]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f0      	bne.n	8004582 <HAL_RCC_OscConfig+0x11e>
 80045a0:	e000      	b.n	80045a4 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d079      	beq.n	80046a4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCC_OscConfig+0x166>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d004      	beq.n	80045ca <HAL_RCC_OscConfig+0x166>
 80045c0:	f240 111d 	movw	r1, #285	; 0x11d
 80045c4:	4846      	ldr	r0, [pc, #280]	; (80046e0 <HAL_RCC_OscConfig+0x27c>)
 80045c6:	f7fc fb14 	bl	8000bf2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b1f      	cmp	r3, #31
 80045d0:	d904      	bls.n	80045dc <HAL_RCC_OscConfig+0x178>
 80045d2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80045d6:	4842      	ldr	r0, [pc, #264]	; (80046e0 <HAL_RCC_OscConfig+0x27c>)
 80045d8:	f7fc fb0b 	bl	8000bf2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045dc:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e8:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d11c      	bne.n	800462e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f4:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d116      	bne.n	800462e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004600:	4b38      	ldr	r3, [pc, #224]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_OscConfig+0x1b4>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d001      	beq.n	8004618 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e243      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	492f      	ldr	r1, [pc, #188]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004628:	4313      	orrs	r3, r2
 800462a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462c:	e03a      	b.n	80046a4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d020      	beq.n	8004678 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <HAL_RCC_OscConfig+0x284>)
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd fa1e 	bl	8001a7c <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004644:	f7fd fa1a 	bl	8001a7c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e224      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004656:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004662:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	491c      	ldr	r1, [pc, #112]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]
 8004676:	e015      	b.n	80046a4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004678:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <HAL_RCC_OscConfig+0x284>)
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467e:	f7fd f9fd 	bl	8001a7c <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004686:	f7fd f9f9 	bl	8001a7c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e203      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_RCC_OscConfig+0x280>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f0      	bne.n	8004686 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d045      	beq.n	800473c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_RCC_OscConfig+0x266>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d004      	beq.n	80046ca <HAL_RCC_OscConfig+0x266>
 80046c0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80046c4:	4806      	ldr	r0, [pc, #24]	; (80046e0 <HAL_RCC_OscConfig+0x27c>)
 80046c6:	f7fc fa94 	bl	8000bf2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01e      	beq.n	8004710 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_RCC_OscConfig+0x288>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fd f9d0 	bl	8001a7c <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046de:	e010      	b.n	8004702 <HAL_RCC_OscConfig+0x29e>
 80046e0:	0800f364 	.word	0x0800f364
 80046e4:	40023800 	.word	0x40023800
 80046e8:	42470000 	.word	0x42470000
 80046ec:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f0:	f7fd f9c4 	bl	8001a7c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e1ce      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	4b5e      	ldr	r3, [pc, #376]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x28c>
 800470e:	e015      	b.n	800473c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004710:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <HAL_RCC_OscConfig+0x41c>)
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004716:	f7fd f9b1 	bl	8001a7c <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800471e:	f7fd f9ad 	bl	8001a7c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e1b7      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	4b52      	ldr	r3, [pc, #328]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f0      	bne.n	800471e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80b0 	beq.w	80048aa <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_RCC_OscConfig+0x30c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d008      	beq.n	8004770 <HAL_RCC_OscConfig+0x30c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d004      	beq.n	8004770 <HAL_RCC_OscConfig+0x30c>
 8004766:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800476a:	4846      	ldr	r0, [pc, #280]	; (8004884 <HAL_RCC_OscConfig+0x420>)
 800476c:	f7fc fa41 	bl	8000bf2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004770:	4b42      	ldr	r3, [pc, #264]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10f      	bne.n	800479c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477c:	2300      	movs	r3, #0
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	4b3e      	ldr	r3, [pc, #248]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	4a3d      	ldr	r2, [pc, #244]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478a:	6413      	str	r3, [r2, #64]	; 0x40
 800478c:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_RCC_OscConfig+0x418>)
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004798:	2301      	movs	r3, #1
 800479a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCC_OscConfig+0x424>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d118      	bne.n	80047da <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a8:	4b37      	ldr	r3, [pc, #220]	; (8004888 <HAL_RCC_OscConfig+0x424>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a36      	ldr	r2, [pc, #216]	; (8004888 <HAL_RCC_OscConfig+0x424>)
 80047ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b4:	f7fd f962 	bl	8001a7c <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047bc:	f7fd f95e 	bl	8001a7c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e168      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ce:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <HAL_RCC_OscConfig+0x424>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d106      	bne.n	80047f0 <HAL_RCC_OscConfig+0x38c>
 80047e2:	4b26      	ldr	r3, [pc, #152]	; (800487c <HAL_RCC_OscConfig+0x418>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a25      	ldr	r2, [pc, #148]	; (800487c <HAL_RCC_OscConfig+0x418>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
 80047ee:	e01c      	b.n	800482a <HAL_RCC_OscConfig+0x3c6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d10c      	bne.n	8004812 <HAL_RCC_OscConfig+0x3ae>
 80047f8:	4b20      	ldr	r3, [pc, #128]	; (800487c <HAL_RCC_OscConfig+0x418>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fc:	4a1f      	ldr	r2, [pc, #124]	; (800487c <HAL_RCC_OscConfig+0x418>)
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	6713      	str	r3, [r2, #112]	; 0x70
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <HAL_RCC_OscConfig+0x418>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	; 0x70
 8004810:	e00b      	b.n	800482a <HAL_RCC_OscConfig+0x3c6>
 8004812:	4b1a      	ldr	r3, [pc, #104]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a19      	ldr	r2, [pc, #100]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	4b17      	ldr	r3, [pc, #92]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	4a16      	ldr	r2, [pc, #88]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004824:	f023 0304 	bic.w	r3, r3, #4
 8004828:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d015      	beq.n	800485e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fd f923 	bl	8001a7c <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fd f91f 	bl	8001a7c <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e127      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <HAL_RCC_OscConfig+0x418>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ee      	beq.n	800483a <HAL_RCC_OscConfig+0x3d6>
 800485c:	e01c      	b.n	8004898 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485e:	f7fd f90d 	bl	8001a7c <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004864:	e012      	b.n	800488c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fd f909 	bl	8001a7c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d909      	bls.n	800488c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e111      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
 800487c:	40023800 	.word	0x40023800
 8004880:	42470e80 	.word	0x42470e80
 8004884:	0800f364 	.word	0x0800f364
 8004888:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488c:	4b86      	ldr	r3, [pc, #536]	; (8004aa8 <HAL_RCC_OscConfig+0x644>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e6      	bne.n	8004866 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d105      	bne.n	80048aa <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489e:	4b82      	ldr	r3, [pc, #520]	; (8004aa8 <HAL_RCC_OscConfig+0x644>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4a81      	ldr	r2, [pc, #516]	; (8004aa8 <HAL_RCC_OscConfig+0x644>)
 80048a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <HAL_RCC_OscConfig+0x468>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d008      	beq.n	80048cc <HAL_RCC_OscConfig+0x468>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d004      	beq.n	80048cc <HAL_RCC_OscConfig+0x468>
 80048c2:	f240 11cd 	movw	r1, #461	; 0x1cd
 80048c6:	4879      	ldr	r0, [pc, #484]	; (8004aac <HAL_RCC_OscConfig+0x648>)
 80048c8:	f7fc f993 	bl	8000bf2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80e4 	beq.w	8004a9e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048d6:	4b74      	ldr	r3, [pc, #464]	; (8004aa8 <HAL_RCC_OscConfig+0x644>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	2b08      	cmp	r3, #8
 80048e0:	f000 80a5 	beq.w	8004a2e <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	f040 8089 	bne.w	8004a00 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <HAL_RCC_OscConfig+0x4a6>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048fe:	d004      	beq.n	800490a <HAL_RCC_OscConfig+0x4a6>
 8004900:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004904:	4869      	ldr	r0, [pc, #420]	; (8004aac <HAL_RCC_OscConfig+0x648>)
 8004906:	f7fc f974 	bl	8000bf2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	2b3f      	cmp	r3, #63	; 0x3f
 8004910:	d904      	bls.n	800491c <HAL_RCC_OscConfig+0x4b8>
 8004912:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004916:	4865      	ldr	r0, [pc, #404]	; (8004aac <HAL_RCC_OscConfig+0x648>)
 8004918:	f7fc f96b 	bl	8000bf2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2b31      	cmp	r3, #49	; 0x31
 8004922:	d904      	bls.n	800492e <HAL_RCC_OscConfig+0x4ca>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800492c:	d904      	bls.n	8004938 <HAL_RCC_OscConfig+0x4d4>
 800492e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004932:	485e      	ldr	r0, [pc, #376]	; (8004aac <HAL_RCC_OscConfig+0x648>)
 8004934:	f7fc f95d 	bl	8000bf2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	2b02      	cmp	r3, #2
 800493e:	d010      	beq.n	8004962 <HAL_RCC_OscConfig+0x4fe>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	2b04      	cmp	r3, #4
 8004946:	d00c      	beq.n	8004962 <HAL_RCC_OscConfig+0x4fe>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	2b06      	cmp	r3, #6
 800494e:	d008      	beq.n	8004962 <HAL_RCC_OscConfig+0x4fe>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	2b08      	cmp	r3, #8
 8004956:	d004      	beq.n	8004962 <HAL_RCC_OscConfig+0x4fe>
 8004958:	f240 11d9 	movw	r1, #473	; 0x1d9
 800495c:	4853      	ldr	r0, [pc, #332]	; (8004aac <HAL_RCC_OscConfig+0x648>)
 800495e:	f7fc f948 	bl	8000bf2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d903      	bls.n	8004972 <HAL_RCC_OscConfig+0x50e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d904      	bls.n	800497c <HAL_RCC_OscConfig+0x518>
 8004972:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004976:	484d      	ldr	r0, [pc, #308]	; (8004aac <HAL_RCC_OscConfig+0x648>)
 8004978:	f7fc f93b 	bl	8000bf2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497c:	4b4c      	ldr	r3, [pc, #304]	; (8004ab0 <HAL_RCC_OscConfig+0x64c>)
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004982:	f7fd f87b 	bl	8001a7c <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800498a:	f7fd f877 	bl	8001a7c <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e081      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499c:	4b42      	ldr	r3, [pc, #264]	; (8004aa8 <HAL_RCC_OscConfig+0x644>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f0      	bne.n	800498a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	019b      	lsls	r3, r3, #6
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	3b01      	subs	r3, #1
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	061b      	lsls	r3, r3, #24
 80049cc:	4936      	ldr	r1, [pc, #216]	; (8004aa8 <HAL_RCC_OscConfig+0x644>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d2:	4b37      	ldr	r3, [pc, #220]	; (8004ab0 <HAL_RCC_OscConfig+0x64c>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7fd f850 	bl	8001a7c <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fd f84c 	bl	8001a7c <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e056      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f2:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <HAL_RCC_OscConfig+0x644>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x57c>
 80049fe:	e04e      	b.n	8004a9e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a00:	4b2b      	ldr	r3, [pc, #172]	; (8004ab0 <HAL_RCC_OscConfig+0x64c>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fd f839 	bl	8001a7c <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fd f835 	bl	8001a7c <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e03f      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a20:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <HAL_RCC_OscConfig+0x644>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCC_OscConfig+0x5aa>
 8004a2c:	e037      	b.n	8004a9e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e032      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCC_OscConfig+0x644>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d028      	beq.n	8004a9a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d121      	bne.n	8004a9a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d11a      	bne.n	8004a9a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d111      	bne.n	8004a9a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	3b01      	subs	r3, #1
 8004a84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	0800f364 	.word	0x0800f364
 8004ab0:	42470060 	.word	0x42470060

08004ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e174      	b.n	8004db2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x24>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b0f      	cmp	r3, #15
 8004ad6:	d904      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x2e>
 8004ad8:	f240 215a 	movw	r1, #602	; 0x25a
 8004adc:	487b      	ldr	r0, [pc, #492]	; (8004ccc <HAL_RCC_ClockConfig+0x218>)
 8004ade:	f7fc f888 	bl	8000bf2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d019      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x68>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d016      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x68>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d013      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x68>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d010      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x68>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d00d      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x68>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b05      	cmp	r3, #5
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x68>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b06      	cmp	r3, #6
 8004b0a:	d007      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x68>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b07      	cmp	r3, #7
 8004b10:	d004      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x68>
 8004b12:	f240 215b 	movw	r1, #603	; 0x25b
 8004b16:	486d      	ldr	r0, [pc, #436]	; (8004ccc <HAL_RCC_ClockConfig+0x218>)
 8004b18:	f7fc f86b 	bl	8000bf2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b1c:	4b6c      	ldr	r3, [pc, #432]	; (8004cd0 <HAL_RCC_ClockConfig+0x21c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d90c      	bls.n	8004b44 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2a:	4b69      	ldr	r3, [pc, #420]	; (8004cd0 <HAL_RCC_ClockConfig+0x21c>)
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b67      	ldr	r3, [pc, #412]	; (8004cd0 <HAL_RCC_ClockConfig+0x21c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e136      	b.n	8004db2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d049      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b5c:	4b5d      	ldr	r3, [pc, #372]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4a5c      	ldr	r2, [pc, #368]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b74:	4b57      	ldr	r3, [pc, #348]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a56      	ldr	r2, [pc, #344]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d024      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x11e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d020      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x11e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b90      	cmp	r3, #144	; 0x90
 8004b96:	d01c      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x11e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2ba0      	cmp	r3, #160	; 0xa0
 8004b9e:	d018      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x11e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2bb0      	cmp	r3, #176	; 0xb0
 8004ba6:	d014      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x11e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2bc0      	cmp	r3, #192	; 0xc0
 8004bae:	d010      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x11e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2bd0      	cmp	r3, #208	; 0xd0
 8004bb6:	d00c      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x11e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2be0      	cmp	r3, #224	; 0xe0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x11e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2bf0      	cmp	r3, #240	; 0xf0
 8004bc6:	d004      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x11e>
 8004bc8:	f240 217e 	movw	r1, #638	; 0x27e
 8004bcc:	483f      	ldr	r0, [pc, #252]	; (8004ccc <HAL_RCC_ClockConfig+0x218>)
 8004bce:	f7fc f810 	bl	8000bf2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd2:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	493d      	ldr	r1, [pc, #244]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d059      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d010      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x166>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d00c      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x166>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d008      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x166>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d004      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x166>
 8004c10:	f240 2185 	movw	r1, #645	; 0x285
 8004c14:	482d      	ldr	r0, [pc, #180]	; (8004ccc <HAL_RCC_ClockConfig+0x218>)
 8004c16:	f7fb ffec 	bl	8000bf2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	4b2c      	ldr	r3, [pc, #176]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d119      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e0bf      	b.n	8004db2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d003      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c42:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e0af      	b.n	8004db2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0a7      	b.n	8004db2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c62:	4b1c      	ldr	r3, [pc, #112]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4919      	ldr	r1, [pc, #100]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c74:	f7fc ff02 	bl	8001a7c <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fc fefe 	bl	8001a7c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e08f      	b.n	8004db2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <HAL_RCC_ClockConfig+0x220>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 020c 	and.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1eb      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_RCC_ClockConfig+0x21c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d212      	bcs.n	8004cd8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <HAL_RCC_ClockConfig+0x21c>)
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCC_ClockConfig+0x21c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d007      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e072      	b.n	8004db2 <HAL_RCC_ClockConfig+0x2fe>
 8004ccc:	0800f364 	.word	0x0800f364
 8004cd0:	40023c00 	.word	0x40023c00
 8004cd4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d025      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d018      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x26a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf4:	d013      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x26a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004cfe:	d00e      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x26a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004d08:	d009      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x26a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004d12:	d004      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x26a>
 8004d14:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004d18:	4828      	ldr	r0, [pc, #160]	; (8004dbc <HAL_RCC_ClockConfig+0x308>)
 8004d1a:	f7fb ff6a 	bl	8000bf2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d1e:	4b28      	ldr	r3, [pc, #160]	; (8004dc0 <HAL_RCC_ClockConfig+0x30c>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4925      	ldr	r1, [pc, #148]	; (8004dc0 <HAL_RCC_ClockConfig+0x30c>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d026      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d018      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x2c2>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4c:	d013      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x2c2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d56:	d00e      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x2c2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004d60:	d009      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x2c2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004d6a:	d004      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x2c2>
 8004d6c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004d70:	4812      	ldr	r0, [pc, #72]	; (8004dbc <HAL_RCC_ClockConfig+0x308>)
 8004d72:	f7fb ff3e 	bl	8000bf2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d76:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <HAL_RCC_ClockConfig+0x30c>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	490e      	ldr	r1, [pc, #56]	; (8004dc0 <HAL_RCC_ClockConfig+0x30c>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d8a:	f000 f821 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_RCC_ClockConfig+0x30c>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	490a      	ldr	r1, [pc, #40]	; (8004dc4 <HAL_RCC_ClockConfig+0x310>)
 8004d9c:	5ccb      	ldrb	r3, [r1, r3]
 8004d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004da2:	4a09      	ldr	r2, [pc, #36]	; (8004dc8 <HAL_RCC_ClockConfig+0x314>)
 8004da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_RCC_ClockConfig+0x318>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fc fb36 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	0800f364 	.word	0x0800f364
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	08011724 	.word	0x08011724
 8004dc8:	20000010 	.word	0x20000010
 8004dcc:	20000014 	.word	0x20000014

08004dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b090      	sub	sp, #64	; 0x40
 8004dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
 8004ddc:	2300      	movs	r3, #0
 8004dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de0:	2300      	movs	r3, #0
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004de8:	4b59      	ldr	r3, [pc, #356]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d00d      	beq.n	8004e10 <HAL_RCC_GetSysClockFreq+0x40>
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	f200 80a1 	bhi.w	8004f3c <HAL_RCC_GetSysClockFreq+0x16c>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x34>
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d003      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e02:	e09b      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e04:	4b53      	ldr	r3, [pc, #332]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004e08:	e09b      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e0a:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e0e:	e098      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e10:	4b4f      	ldr	r3, [pc, #316]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1a:	4b4d      	ldr	r3, [pc, #308]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d028      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e26:	4b4a      	ldr	r3, [pc, #296]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	627a      	str	r2, [r7, #36]	; 0x24
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4b47      	ldr	r3, [pc, #284]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e3c:	fb03 f201 	mul.w	r2, r3, r1
 8004e40:	2300      	movs	r3, #0
 8004e42:	fb00 f303 	mul.w	r3, r0, r3
 8004e46:	4413      	add	r3, r2
 8004e48:	4a43      	ldr	r2, [pc, #268]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e4a:	fba0 1202 	umull	r1, r2, r0, r2
 8004e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e50:	460a      	mov	r2, r1
 8004e52:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e56:	4413      	add	r3, r2
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	61fa      	str	r2, [r7, #28]
 8004e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e6a:	f7fb f9b9 	bl	80001e0 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4613      	mov	r3, r2
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e76:	e053      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e78:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	099b      	lsrs	r3, r3, #6
 8004e7e:	2200      	movs	r2, #0
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	617a      	str	r2, [r7, #20]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e8a:	f04f 0b00 	mov.w	fp, #0
 8004e8e:	4652      	mov	r2, sl
 8004e90:	465b      	mov	r3, fp
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f04f 0100 	mov.w	r1, #0
 8004e9a:	0159      	lsls	r1, r3, #5
 8004e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea0:	0150      	lsls	r0, r2, #5
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	ebb2 080a 	subs.w	r8, r2, sl
 8004eaa:	eb63 090b 	sbc.w	r9, r3, fp
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004eba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ebe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ec2:	ebb2 0408 	subs.w	r4, r2, r8
 8004ec6:	eb63 0509 	sbc.w	r5, r3, r9
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	00eb      	lsls	r3, r5, #3
 8004ed4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed8:	00e2      	lsls	r2, r4, #3
 8004eda:	4614      	mov	r4, r2
 8004edc:	461d      	mov	r5, r3
 8004ede:	eb14 030a 	adds.w	r3, r4, sl
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	eb45 030b 	adc.w	r3, r5, fp
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	028b      	lsls	r3, r1, #10
 8004efa:	4621      	mov	r1, r4
 8004efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f00:	4621      	mov	r1, r4
 8004f02:	028a      	lsls	r2, r1, #10
 8004f04:	4610      	mov	r0, r2
 8004f06:	4619      	mov	r1, r3
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	60fa      	str	r2, [r7, #12]
 8004f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f14:	f7fb f964 	bl	80001e0 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004f30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f3a:	e002      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3740      	adds	r7, #64	; 0x40
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800
 8004f54:	00f42400 	.word	0x00f42400
 8004f58:	017d7840 	.word	0x017d7840

08004f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f60:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000010 	.word	0x20000010

08004f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f78:	f7ff fff0 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	0a9b      	lsrs	r3, r3, #10
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	4903      	ldr	r1, [pc, #12]	; (8004f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40023800 	.word	0x40023800
 8004f98:	08011734 	.word	0x08011734

08004f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fa0:	f7ff ffdc 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	0b5b      	lsrs	r3, r3, #13
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	4903      	ldr	r1, [pc, #12]	; (8004fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fb2:	5ccb      	ldrb	r3, [r1, r3]
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	08011734 	.word	0x08011734

08004fc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	220f      	movs	r2, #15
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fd4:	4b12      	ldr	r3, [pc, #72]	; (8005020 <HAL_RCC_GetClockConfig+0x5c>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0203 	and.w	r2, r3, #3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <HAL_RCC_GetClockConfig+0x5c>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <HAL_RCC_GetClockConfig+0x5c>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ff8:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCC_GetClockConfig+0x5c>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	08db      	lsrs	r3, r3, #3
 8004ffe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <HAL_RCC_GetClockConfig+0x60>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0207 	and.w	r2, r3, #7
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	601a      	str	r2, [r3, #0]
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40023800 	.word	0x40023800
 8005024:	40023c00 	.word	0x40023c00

08005028 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b0f      	cmp	r3, #15
 8005046:	d904      	bls.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8005048:	f640 11d7 	movw	r1, #2519	; 0x9d7
 800504c:	4834      	ldr	r0, [pc, #208]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800504e:	f7fb fdd0 	bl	8000bf2 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d105      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005066:	2b00      	cmp	r3, #0
 8005068:	d066      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d903      	bls.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b07      	cmp	r3, #7
 8005078:	d904      	bls.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800507a:	f640 11de 	movw	r1, #2526	; 0x9de
 800507e:	4828      	ldr	r0, [pc, #160]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005080:	f7fb fdb7 	bl	8000bf2 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b31      	cmp	r3, #49	; 0x31
 800508a:	d904      	bls.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005094:	d904      	bls.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005096:	f640 11df 	movw	r1, #2527	; 0x9df
 800509a:	4821      	ldr	r0, [pc, #132]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800509c:	f7fb fda9 	bl	8000bf2 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d903      	bls.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b3f      	cmp	r3, #63	; 0x3f
 80050ae:	d904      	bls.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x92>
 80050b0:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80050b4:	481a      	ldr	r0, [pc, #104]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80050b6:	f7fb fd9c 	bl	8000bf2 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050ba:	4b1a      	ldr	r3, [pc, #104]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050c0:	f7fc fcdc 	bl	8001a7c <HAL_GetTick>
 80050c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050c8:	f7fc fcd8 	bl	8001a7c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e1b3      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050da:	4b13      	ldr	r3, [pc, #76]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	019b      	lsls	r3, r3, #6
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	071b      	lsls	r3, r3, #28
 80050f8:	490b      	ldr	r1, [pc, #44]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8005102:	2201      	movs	r2, #1
 8005104:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005106:	f7fc fcb9 	bl	8001a7c <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800510c:	e00e      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800510e:	f7fc fcb5 	bl	8001a7c <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d907      	bls.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e190      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005120:	0800f39c 	.word	0x0800f39c
 8005124:	42470068 	.word	0x42470068
 8005128:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800512c:	4b88      	ldr	r3, [pc, #544]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ea      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 8173 	beq.w	800542c <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514e:	f000 80a6 	beq.w	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800515a:	f000 80a0 	beq.w	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	4a7c      	ldr	r2, [pc, #496]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	f000 809a 	beq.w	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	4a7a      	ldr	r2, [pc, #488]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005170:	4293      	cmp	r3, r2
 8005172:	f000 8094 	beq.w	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	4a78      	ldr	r2, [pc, #480]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800517c:	4293      	cmp	r3, r2
 800517e:	f000 808e 	beq.w	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	4a76      	ldr	r2, [pc, #472]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005188:	4293      	cmp	r3, r2
 800518a:	f000 8088 	beq.w	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	4a74      	ldr	r2, [pc, #464]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	f000 8082 	beq.w	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	4a72      	ldr	r2, [pc, #456]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d07c      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	4a70      	ldr	r2, [pc, #448]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d077      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	4a6f      	ldr	r2, [pc, #444]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d072      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	4a6d      	ldr	r2, [pc, #436]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d06d      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	4a6c      	ldr	r2, [pc, #432]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d068      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	4a6a      	ldr	r2, [pc, #424]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d063      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	4a69      	ldr	r2, [pc, #420]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d05e      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	4a67      	ldr	r2, [pc, #412]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d059      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	4a66      	ldr	r2, [pc, #408]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d054      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	4a64      	ldr	r2, [pc, #400]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d04f      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	4a63      	ldr	r2, [pc, #396]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d04a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	4a61      	ldr	r2, [pc, #388]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d045      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	4a60      	ldr	r2, [pc, #384]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d040      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	4a5e      	ldr	r2, [pc, #376]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d03b      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	4a5d      	ldr	r2, [pc, #372]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d036      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	4a5b      	ldr	r2, [pc, #364]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d031      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	4a5a      	ldr	r2, [pc, #360]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d02c      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	4a58      	ldr	r2, [pc, #352]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d027      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	4a57      	ldr	r2, [pc, #348]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d022      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	4a55      	ldr	r2, [pc, #340]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01d      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	4a54      	ldr	r2, [pc, #336]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d018      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	4a52      	ldr	r2, [pc, #328]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	4a51      	ldr	r2, [pc, #324]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00e      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	4a4f      	ldr	r2, [pc, #316]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	4a4e      	ldr	r2, [pc, #312]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005294:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8005298:	484c      	ldr	r0, [pc, #304]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800529a:	f7fb fcaa 	bl	8000bf2 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	4a2a      	ldr	r2, [pc, #168]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80052a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ac:	6413      	str	r3, [r2, #64]	; 0x40
 80052ae:	4b28      	ldr	r3, [pc, #160]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052ba:	4b45      	ldr	r3, [pc, #276]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a44      	ldr	r2, [pc, #272]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052c6:	f7fc fbd9 	bl	8001a7c <HAL_GetTick>
 80052ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052cc:	e008      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052ce:	f7fc fbd5 	bl	8001a7c <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e0b0      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052e0:	4b3b      	ldr	r3, [pc, #236]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ec:	4b18      	ldr	r3, [pc, #96]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d073      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	429a      	cmp	r2, r3
 8005308:	d06c      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800530a:	4b11      	ldr	r3, [pc, #68]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005312:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005314:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005316:	2201      	movs	r2, #1
 8005318:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800531a:	4b2e      	ldr	r3, [pc, #184]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005320:	4a0b      	ldr	r2, [pc, #44]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	d158      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005332:	f7fc fba3 	bl	8001a7c <HAL_GetTick>
 8005336:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005338:	e04e      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fc fb9f 	bl	8001a7c <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	; 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d945      	bls.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e078      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005350:	40023800 	.word	0x40023800
 8005354:	00020300 	.word	0x00020300
 8005358:	00030300 	.word	0x00030300
 800535c:	00040300 	.word	0x00040300
 8005360:	00050300 	.word	0x00050300
 8005364:	00060300 	.word	0x00060300
 8005368:	00070300 	.word	0x00070300
 800536c:	00080300 	.word	0x00080300
 8005370:	00090300 	.word	0x00090300
 8005374:	000a0300 	.word	0x000a0300
 8005378:	000b0300 	.word	0x000b0300
 800537c:	000c0300 	.word	0x000c0300
 8005380:	000d0300 	.word	0x000d0300
 8005384:	000e0300 	.word	0x000e0300
 8005388:	000f0300 	.word	0x000f0300
 800538c:	00100300 	.word	0x00100300
 8005390:	00110300 	.word	0x00110300
 8005394:	00120300 	.word	0x00120300
 8005398:	00130300 	.word	0x00130300
 800539c:	00140300 	.word	0x00140300
 80053a0:	00150300 	.word	0x00150300
 80053a4:	00160300 	.word	0x00160300
 80053a8:	00170300 	.word	0x00170300
 80053ac:	00180300 	.word	0x00180300
 80053b0:	00190300 	.word	0x00190300
 80053b4:	001a0300 	.word	0x001a0300
 80053b8:	001b0300 	.word	0x001b0300
 80053bc:	001c0300 	.word	0x001c0300
 80053c0:	001d0300 	.word	0x001d0300
 80053c4:	001e0300 	.word	0x001e0300
 80053c8:	001f0300 	.word	0x001f0300
 80053cc:	0800f39c 	.word	0x0800f39c
 80053d0:	40007000 	.word	0x40007000
 80053d4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d8:	4b1c      	ldr	r3, [pc, #112]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0aa      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f0:	d10d      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80053f2:	4b16      	ldr	r3, [pc, #88]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005406:	4911      	ldr	r1, [pc, #68]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005408:	4313      	orrs	r3, r2
 800540a:	608b      	str	r3, [r1, #8]
 800540c:	e005      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	4a0e      	ldr	r2, [pc, #56]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005414:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005418:	6093      	str	r3, [r2, #8]
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800541c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005426:	4909      	ldr	r1, [pc, #36]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005428:	4313      	orrs	r3, r2
 800542a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	7d1a      	ldrb	r2, [r3, #20]
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800543e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800
 8005450:	424711e0 	.word	0x424711e0

08005454 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e0c4      	b.n	80055f4 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a63      	ldr	r2, [pc, #396]	; (80055fc <HAL_RTC_Init+0x1a8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_RTC_Init+0x2a>
 8005474:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005478:	4861      	ldr	r0, [pc, #388]	; (8005600 <HAL_RTC_Init+0x1ac>)
 800547a:	f7fb fbba 	bl	8000bf2 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d008      	beq.n	8005498 <HAL_RTC_Init+0x44>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <HAL_RTC_Init+0x44>
 800548e:	f240 1105 	movw	r1, #261	; 0x105
 8005492:	485b      	ldr	r0, [pc, #364]	; (8005600 <HAL_RTC_Init+0x1ac>)
 8005494:	f7fb fbad 	bl	8000bf2 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b7f      	cmp	r3, #127	; 0x7f
 800549e:	d904      	bls.n	80054aa <HAL_RTC_Init+0x56>
 80054a0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80054a4:	4856      	ldr	r0, [pc, #344]	; (8005600 <HAL_RTC_Init+0x1ac>)
 80054a6:	f7fb fba4 	bl	8000bf2 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b2:	d304      	bcc.n	80054be <HAL_RTC_Init+0x6a>
 80054b4:	f240 1107 	movw	r1, #263	; 0x107
 80054b8:	4851      	ldr	r0, [pc, #324]	; (8005600 <HAL_RTC_Init+0x1ac>)
 80054ba:	f7fb fb9a 	bl	8000bf2 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d013      	beq.n	80054ee <HAL_RTC_Init+0x9a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ce:	d00e      	beq.n	80054ee <HAL_RTC_Init+0x9a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d8:	d009      	beq.n	80054ee <HAL_RTC_Init+0x9a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054e2:	d004      	beq.n	80054ee <HAL_RTC_Init+0x9a>
 80054e4:	f44f 7184 	mov.w	r1, #264	; 0x108
 80054e8:	4845      	ldr	r0, [pc, #276]	; (8005600 <HAL_RTC_Init+0x1ac>)
 80054ea:	f7fb fb82 	bl	8000bf2 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <HAL_RTC_Init+0xb6>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054fe:	d004      	beq.n	800550a <HAL_RTC_Init+0xb6>
 8005500:	f240 1109 	movw	r1, #265	; 0x109
 8005504:	483e      	ldr	r0, [pc, #248]	; (8005600 <HAL_RTC_Init+0x1ac>)
 8005506:	f7fb fb74 	bl	8000bf2 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d009      	beq.n	8005526 <HAL_RTC_Init+0xd2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800551a:	d004      	beq.n	8005526 <HAL_RTC_Init+0xd2>
 800551c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005520:	4837      	ldr	r0, [pc, #220]	; (8005600 <HAL_RTC_Init+0x1ac>)
 8005522:	f7fb fb66 	bl	8000bf2 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	7f5b      	ldrb	r3, [r3, #29]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d105      	bne.n	800553c <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fb fbc0 	bl	8000cbc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	22ca      	movs	r2, #202	; 0xca
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2253      	movs	r2, #83	; 0x53
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fad2 	bl	8005afc <RTC_EnterInitMode>
 8005558:	4603      	mov	r3, r0
 800555a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d12c      	bne.n	80055bc <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005574:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6899      	ldr	r1, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	68d2      	ldr	r2, [r2, #12]
 800559c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6919      	ldr	r1, [r3, #16]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	041a      	lsls	r2, r3, #16
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fad9 	bl	8005b6a <RTC_ExitInitMode>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d113      	bne.n	80055ea <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	22ff      	movs	r2, #255	; 0xff
 80055f0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40002800 	.word	0x40002800
 8005600:	0800f3d8 	.word	0x0800f3d8

08005604 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <HAL_RTC_SetTime+0x26>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d004      	beq.n	800562a <HAL_RTC_SetTime+0x26>
 8005620:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8005624:	489a      	ldr	r0, [pc, #616]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 8005626:	f7fb fae4 	bl	8000bf2 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005632:	d00d      	beq.n	8005650 <HAL_RTC_SetTime+0x4c>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563c:	d008      	beq.n	8005650 <HAL_RTC_SetTime+0x4c>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d004      	beq.n	8005650 <HAL_RTC_SetTime+0x4c>
 8005646:	f240 21b5 	movw	r1, #693	; 0x2b5
 800564a:	4891      	ldr	r0, [pc, #580]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 800564c:	f7fb fad1 	bl	8000bf2 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <HAL_RTC_SetTime+0x68>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005660:	d004      	beq.n	800566c <HAL_RTC_SetTime+0x68>
 8005662:	f240 21b6 	movw	r1, #694	; 0x2b6
 8005666:	488a      	ldr	r0, [pc, #552]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 8005668:	f7fb fac3 	bl	8000bf2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	7f1b      	ldrb	r3, [r3, #28]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_RTC_SetTime+0x74>
 8005674:	2302      	movs	r3, #2
 8005676:	e107      	b.n	8005888 <HAL_RTC_SetTime+0x284>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2202      	movs	r2, #2
 8005682:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d15c      	bne.n	8005744 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01a      	beq.n	80056ce <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_RTC_SetTime+0xa4>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d904      	bls.n	80056b2 <HAL_RTC_SetTime+0xae>
 80056a8:	f240 21c1 	movw	r1, #705	; 0x2c1
 80056ac:	4878      	ldr	r0, [pc, #480]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 80056ae:	f7fb faa0 	bl	8000bf2 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	78db      	ldrb	r3, [r3, #3]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d015      	beq.n	80056e6 <HAL_RTC_SetTime+0xe2>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	78db      	ldrb	r3, [r3, #3]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d011      	beq.n	80056e6 <HAL_RTC_SetTime+0xe2>
 80056c2:	f240 21c2 	movw	r1, #706	; 0x2c2
 80056c6:	4872      	ldr	r0, [pc, #456]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 80056c8:	f7fb fa93 	bl	8000bf2 <assert_failed>
 80056cc:	e00b      	b.n	80056e6 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2200      	movs	r2, #0
 80056d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b17      	cmp	r3, #23
 80056da:	d904      	bls.n	80056e6 <HAL_RTC_SetTime+0xe2>
 80056dc:	f240 21c7 	movw	r1, #711	; 0x2c7
 80056e0:	486b      	ldr	r0, [pc, #428]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 80056e2:	f7fb fa86 	bl	8000bf2 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	2b3b      	cmp	r3, #59	; 0x3b
 80056ec:	d904      	bls.n	80056f8 <HAL_RTC_SetTime+0xf4>
 80056ee:	f240 21c9 	movw	r1, #713	; 0x2c9
 80056f2:	4867      	ldr	r0, [pc, #412]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 80056f4:	f7fb fa7d 	bl	8000bf2 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	789b      	ldrb	r3, [r3, #2]
 80056fc:	2b3b      	cmp	r3, #59	; 0x3b
 80056fe:	d904      	bls.n	800570a <HAL_RTC_SetTime+0x106>
 8005700:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005704:	4862      	ldr	r0, [pc, #392]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 8005706:	f7fb fa74 	bl	8000bf2 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fa50 	bl	8005bb4 <RTC_ByteToBcd2>
 8005714:	4603      	mov	r3, r0
 8005716:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fa49 	bl	8005bb4 <RTC_ByteToBcd2>
 8005722:	4603      	mov	r3, r0
 8005724:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005726:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	789b      	ldrb	r3, [r3, #2]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fa41 	bl	8005bb4 <RTC_ByteToBcd2>
 8005732:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005734:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	e062      	b.n	800580a <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d022      	beq.n	8005798 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fa49 	bl	8005bee <RTC_Bcd2ToByte>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <HAL_RTC_SetTime+0x16e>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fa41 	bl	8005bee <RTC_Bcd2ToByte>
 800576c:	4603      	mov	r3, r0
 800576e:	2b0c      	cmp	r3, #12
 8005770:	d904      	bls.n	800577c <HAL_RTC_SetTime+0x178>
 8005772:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005776:	4846      	ldr	r0, [pc, #280]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 8005778:	f7fb fa3b 	bl	8000bf2 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	78db      	ldrb	r3, [r3, #3]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d019      	beq.n	80057b8 <HAL_RTC_SetTime+0x1b4>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	78db      	ldrb	r3, [r3, #3]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d015      	beq.n	80057b8 <HAL_RTC_SetTime+0x1b4>
 800578c:	f240 21d6 	movw	r1, #726	; 0x2d6
 8005790:	483f      	ldr	r0, [pc, #252]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 8005792:	f7fb fa2e 	bl	8000bf2 <assert_failed>
 8005796:	e00f      	b.n	80057b8 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2200      	movs	r2, #0
 800579c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fa23 	bl	8005bee <RTC_Bcd2ToByte>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b17      	cmp	r3, #23
 80057ac:	d904      	bls.n	80057b8 <HAL_RTC_SetTime+0x1b4>
 80057ae:	f240 21db 	movw	r1, #731	; 0x2db
 80057b2:	4837      	ldr	r0, [pc, #220]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 80057b4:	f7fb fa1d 	bl	8000bf2 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fa16 	bl	8005bee <RTC_Bcd2ToByte>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b3b      	cmp	r3, #59	; 0x3b
 80057c6:	d904      	bls.n	80057d2 <HAL_RTC_SetTime+0x1ce>
 80057c8:	f240 21dd 	movw	r1, #733	; 0x2dd
 80057cc:	4830      	ldr	r0, [pc, #192]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 80057ce:	f7fb fa10 	bl	8000bf2 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	789b      	ldrb	r3, [r3, #2]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fa09 	bl	8005bee <RTC_Bcd2ToByte>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b3b      	cmp	r3, #59	; 0x3b
 80057e0:	d904      	bls.n	80057ec <HAL_RTC_SetTime+0x1e8>
 80057e2:	f240 21de 	movw	r1, #734	; 0x2de
 80057e6:	482a      	ldr	r0, [pc, #168]	; (8005890 <HAL_RTC_SetTime+0x28c>)
 80057e8:	f7fb fa03 	bl	8000bf2 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80057f8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80057fe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	78db      	ldrb	r3, [r3, #3]
 8005804:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	22ca      	movs	r2, #202	; 0xca
 8005810:	625a      	str	r2, [r3, #36]	; 0x24
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2253      	movs	r2, #83	; 0x53
 8005818:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f96e 	bl	8005afc <RTC_EnterInitMode>
 8005820:	4603      	mov	r3, r0
 8005822:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d120      	bne.n	800586c <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005834:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005838:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005848:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6899      	ldr	r1, [r3, #8]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f981 	bl	8005b6a <RTC_ExitInitMode>
 8005868:	4603      	mov	r3, r0
 800586a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800586c:	7cfb      	ldrb	r3, [r7, #19]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	22ff      	movs	r2, #255	; 0xff
 800587e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	771a      	strb	r2, [r3, #28]

  return status;
 8005886:	7cfb      	ldrb	r3, [r7, #19]
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd90      	pop	{r4, r7, pc}
 8005890:	0800f3d8 	.word	0x0800f3d8

08005894 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <HAL_RTC_SetDate+0x26>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d004      	beq.n	80058ba <HAL_RTC_SetDate+0x26>
 80058b0:	f240 3153 	movw	r1, #851	; 0x353
 80058b4:	487c      	ldr	r0, [pc, #496]	; (8005aa8 <HAL_RTC_SetDate+0x214>)
 80058b6:	f7fb f99c 	bl	8000bf2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	7f1b      	ldrb	r3, [r3, #28]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_RTC_SetDate+0x32>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e0ec      	b.n	8005aa0 <HAL_RTC_SetDate+0x20c>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2202      	movs	r2, #2
 80058d0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10e      	bne.n	80058f6 <HAL_RTC_SetDate+0x62>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	f023 0310 	bic.w	r3, r3, #16
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	330a      	adds	r3, #10
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d01c      	beq.n	8005938 <HAL_RTC_SetDate+0xa4>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d018      	beq.n	8005938 <HAL_RTC_SetDate+0xa4>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d014      	beq.n	8005938 <HAL_RTC_SetDate+0xa4>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b04      	cmp	r3, #4
 8005914:	d010      	beq.n	8005938 <HAL_RTC_SetDate+0xa4>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b05      	cmp	r3, #5
 800591c:	d00c      	beq.n	8005938 <HAL_RTC_SetDate+0xa4>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b06      	cmp	r3, #6
 8005924:	d008      	beq.n	8005938 <HAL_RTC_SetDate+0xa4>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b07      	cmp	r3, #7
 800592c:	d004      	beq.n	8005938 <HAL_RTC_SetDate+0xa4>
 800592e:	f240 315f 	movw	r1, #863	; 0x35f
 8005932:	485d      	ldr	r0, [pc, #372]	; (8005aa8 <HAL_RTC_SetDate+0x214>)
 8005934:	f7fb f95d 	bl	8000bf2 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d13f      	bne.n	80059be <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	78db      	ldrb	r3, [r3, #3]
 8005942:	2b63      	cmp	r3, #99	; 0x63
 8005944:	d904      	bls.n	8005950 <HAL_RTC_SetDate+0xbc>
 8005946:	f240 3163 	movw	r1, #867	; 0x363
 800594a:	4857      	ldr	r0, [pc, #348]	; (8005aa8 <HAL_RTC_SetDate+0x214>)
 800594c:	f7fb f951 	bl	8000bf2 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_RTC_SetDate+0xcc>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	2b0c      	cmp	r3, #12
 800595e:	d904      	bls.n	800596a <HAL_RTC_SetDate+0xd6>
 8005960:	f44f 7159 	mov.w	r1, #868	; 0x364
 8005964:	4850      	ldr	r0, [pc, #320]	; (8005aa8 <HAL_RTC_SetDate+0x214>)
 8005966:	f7fb f944 	bl	8000bf2 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	789b      	ldrb	r3, [r3, #2]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_RTC_SetDate+0xe6>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	789b      	ldrb	r3, [r3, #2]
 8005976:	2b1f      	cmp	r3, #31
 8005978:	d904      	bls.n	8005984 <HAL_RTC_SetDate+0xf0>
 800597a:	f240 3165 	movw	r1, #869	; 0x365
 800597e:	484a      	ldr	r0, [pc, #296]	; (8005aa8 <HAL_RTC_SetDate+0x214>)
 8005980:	f7fb f937 	bl	8000bf2 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	78db      	ldrb	r3, [r3, #3]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f913 	bl	8005bb4 <RTC_ByteToBcd2>
 800598e:	4603      	mov	r3, r0
 8005990:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f90c 	bl	8005bb4 <RTC_ByteToBcd2>
 800599c:	4603      	mov	r3, r0
 800599e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	789b      	ldrb	r3, [r3, #2]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 f904 	bl	8005bb4 <RTC_ByteToBcd2>
 80059ac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80059ae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e045      	b.n	8005a4a <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	78db      	ldrb	r3, [r3, #3]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f913 	bl	8005bee <RTC_Bcd2ToByte>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b63      	cmp	r3, #99	; 0x63
 80059cc:	d904      	bls.n	80059d8 <HAL_RTC_SetDate+0x144>
 80059ce:	f240 316e 	movw	r1, #878	; 0x36e
 80059d2:	4835      	ldr	r0, [pc, #212]	; (8005aa8 <HAL_RTC_SetDate+0x214>)
 80059d4:	f7fb f90d 	bl	8000bf2 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 f906 	bl	8005bee <RTC_Bcd2ToByte>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_RTC_SetDate+0x164>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 f8fe 	bl	8005bee <RTC_Bcd2ToByte>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d904      	bls.n	8005a02 <HAL_RTC_SetDate+0x16e>
 80059f8:	f240 316f 	movw	r1, #879	; 0x36f
 80059fc:	482a      	ldr	r0, [pc, #168]	; (8005aa8 <HAL_RTC_SetDate+0x214>)
 80059fe:	f7fb f8f8 	bl	8000bf2 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	789b      	ldrb	r3, [r3, #2]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f8f1 	bl	8005bee <RTC_Bcd2ToByte>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <HAL_RTC_SetDate+0x18e>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	789b      	ldrb	r3, [r3, #2]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 f8e9 	bl	8005bee <RTC_Bcd2ToByte>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b1f      	cmp	r3, #31
 8005a20:	d904      	bls.n	8005a2c <HAL_RTC_SetDate+0x198>
 8005a22:	f44f 715c 	mov.w	r1, #880	; 0x370
 8005a26:	4820      	ldr	r0, [pc, #128]	; (8005aa8 <HAL_RTC_SetDate+0x214>)
 8005a28:	f7fb f8e3 	bl	8000bf2 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	78db      	ldrb	r3, [r3, #3]
 8005a30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005a38:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005a3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	22ca      	movs	r2, #202	; 0xca
 8005a50:	625a      	str	r2, [r3, #36]	; 0x24
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2253      	movs	r2, #83	; 0x53
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 f84e 	bl	8005afc <RTC_EnterInitMode>
 8005a60:	4603      	mov	r3, r0
 8005a62:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a64:	7cfb      	ldrb	r3, [r7, #19]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10c      	bne.n	8005a84 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f875 	bl	8005b6a <RTC_ExitInitMode>
 8005a80:	4603      	mov	r3, r0
 8005a82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	771a      	strb	r2, [r3, #28]

  return status;
 8005a9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd90      	pop	{r4, r7, pc}
 8005aa8:	0800f3d8 	.word	0x0800f3d8

08005aac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ac6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ac8:	f7fb ffd8 	bl	8001a7c <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ace:	e009      	b.n	8005ae4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ad0:	f7fb ffd4 	bl	8001a7c <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ade:	d901      	bls.n	8005ae4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e007      	b.n	8005af4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0ee      	beq.n	8005ad0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d122      	bne.n	8005b60 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b2a:	f7fb ffa7 	bl	8001a7c <HAL_GetTick>
 8005b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b30:	e00c      	b.n	8005b4c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b32:	f7fb ffa3 	bl	8001a7c <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b40:	d904      	bls.n	8005b4c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2204      	movs	r2, #4
 8005b46:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <RTC_EnterInitMode+0x64>
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d1e8      	bne.n	8005b32 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b84:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff ff89 	bl	8005aac <HAL_RTC_WaitForSynchro>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005bc2:	e005      	b.n	8005bd0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	3b0a      	subs	r3, #10
 8005bce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	2b09      	cmp	r3, #9
 8005bd4:	d8f6      	bhi.n	8005bc4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	b2db      	uxtb	r3, r3
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	0092      	lsls	r2, r2, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	4413      	add	r3, r2
 8005c18:	b2db      	uxtb	r3, r3
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e18c      	b.n	8005f54 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a75      	ldr	r2, [pc, #468]	; (8005e14 <HAL_SPI_Init+0x1ec>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d018      	beq.n	8005c76 <HAL_SPI_Init+0x4e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a73      	ldr	r2, [pc, #460]	; (8005e18 <HAL_SPI_Init+0x1f0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <HAL_SPI_Init+0x4e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a72      	ldr	r2, [pc, #456]	; (8005e1c <HAL_SPI_Init+0x1f4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00e      	beq.n	8005c76 <HAL_SPI_Init+0x4e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a70      	ldr	r2, [pc, #448]	; (8005e20 <HAL_SPI_Init+0x1f8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d009      	beq.n	8005c76 <HAL_SPI_Init+0x4e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a6f      	ldr	r2, [pc, #444]	; (8005e24 <HAL_SPI_Init+0x1fc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_SPI_Init+0x4e>
 8005c6c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c70:	486d      	ldr	r0, [pc, #436]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005c72:	f7fa ffbe 	bl	8000bf2 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <HAL_SPI_Init+0x6a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c86:	d004      	beq.n	8005c92 <HAL_SPI_Init+0x6a>
 8005c88:	f240 1141 	movw	r1, #321	; 0x141
 8005c8c:	4866      	ldr	r0, [pc, #408]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005c8e:	f7fa ffb0 	bl	8000bf2 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00e      	beq.n	8005cb8 <HAL_SPI_Init+0x90>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca2:	d009      	beq.n	8005cb8 <HAL_SPI_Init+0x90>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cac:	d004      	beq.n	8005cb8 <HAL_SPI_Init+0x90>
 8005cae:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005cb2:	485d      	ldr	r0, [pc, #372]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005cb4:	f7fa ff9d 	bl	8000bf2 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc0:	d008      	beq.n	8005cd4 <HAL_SPI_Init+0xac>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d004      	beq.n	8005cd4 <HAL_SPI_Init+0xac>
 8005cca:	f240 1143 	movw	r1, #323	; 0x143
 8005cce:	4856      	ldr	r0, [pc, #344]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005cd0:	f7fa ff8f 	bl	8000bf2 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cdc:	d00d      	beq.n	8005cfa <HAL_SPI_Init+0xd2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_SPI_Init+0xd2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cee:	d004      	beq.n	8005cfa <HAL_SPI_Init+0xd2>
 8005cf0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005cf4:	484c      	ldr	r0, [pc, #304]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005cf6:	f7fa ff7c 	bl	8000bf2 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d020      	beq.n	8005d44 <HAL_SPI_Init+0x11c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d01c      	beq.n	8005d44 <HAL_SPI_Init+0x11c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d018      	beq.n	8005d44 <HAL_SPI_Init+0x11c>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	2b18      	cmp	r3, #24
 8005d18:	d014      	beq.n	8005d44 <HAL_SPI_Init+0x11c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d010      	beq.n	8005d44 <HAL_SPI_Init+0x11c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	2b28      	cmp	r3, #40	; 0x28
 8005d28:	d00c      	beq.n	8005d44 <HAL_SPI_Init+0x11c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	2b30      	cmp	r3, #48	; 0x30
 8005d30:	d008      	beq.n	8005d44 <HAL_SPI_Init+0x11c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	2b38      	cmp	r3, #56	; 0x38
 8005d38:	d004      	beq.n	8005d44 <HAL_SPI_Init+0x11c>
 8005d3a:	f240 1145 	movw	r1, #325	; 0x145
 8005d3e:	483a      	ldr	r0, [pc, #232]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005d40:	f7fa ff57 	bl	8000bf2 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d008      	beq.n	8005d5e <HAL_SPI_Init+0x136>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	2b80      	cmp	r3, #128	; 0x80
 8005d52:	d004      	beq.n	8005d5e <HAL_SPI_Init+0x136>
 8005d54:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005d58:	4833      	ldr	r0, [pc, #204]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005d5a:	f7fa ff4a 	bl	8000bf2 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <HAL_SPI_Init+0x150>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d004      	beq.n	8005d78 <HAL_SPI_Init+0x150>
 8005d6e:	f240 1147 	movw	r1, #327	; 0x147
 8005d72:	482d      	ldr	r0, [pc, #180]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005d74:	f7fa ff3d 	bl	8000bf2 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d155      	bne.n	8005e2c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_SPI_Init+0x172>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d004      	beq.n	8005d9a <HAL_SPI_Init+0x172>
 8005d90:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005d94:	4824      	ldr	r0, [pc, #144]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005d96:	f7fa ff2c 	bl	8000bf2 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <HAL_SPI_Init+0x18c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d004      	beq.n	8005db4 <HAL_SPI_Init+0x18c>
 8005daa:	f240 114b 	movw	r1, #331	; 0x14b
 8005dae:	481e      	ldr	r0, [pc, #120]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005db0:	f7fa ff1f 	bl	8000bf2 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dbc:	d125      	bne.n	8005e0a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d05d      	beq.n	8005e82 <HAL_SPI_Init+0x25a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d059      	beq.n	8005e82 <HAL_SPI_Init+0x25a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d055      	beq.n	8005e82 <HAL_SPI_Init+0x25a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	2b18      	cmp	r3, #24
 8005ddc:	d051      	beq.n	8005e82 <HAL_SPI_Init+0x25a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d04d      	beq.n	8005e82 <HAL_SPI_Init+0x25a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	2b28      	cmp	r3, #40	; 0x28
 8005dec:	d049      	beq.n	8005e82 <HAL_SPI_Init+0x25a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	2b30      	cmp	r3, #48	; 0x30
 8005df4:	d045      	beq.n	8005e82 <HAL_SPI_Init+0x25a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	2b38      	cmp	r3, #56	; 0x38
 8005dfc:	d041      	beq.n	8005e82 <HAL_SPI_Init+0x25a>
 8005dfe:	f240 114f 	movw	r1, #335	; 0x14f
 8005e02:	4809      	ldr	r0, [pc, #36]	; (8005e28 <HAL_SPI_Init+0x200>)
 8005e04:	f7fa fef5 	bl	8000bf2 <assert_failed>
 8005e08:	e03b      	b.n	8005e82 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	61da      	str	r2, [r3, #28]
 8005e10:	e037      	b.n	8005e82 <HAL_SPI_Init+0x25a>
 8005e12:	bf00      	nop
 8005e14:	40013000 	.word	0x40013000
 8005e18:	40003800 	.word	0x40003800
 8005e1c:	40003c00 	.word	0x40003c00
 8005e20:	40013400 	.word	0x40013400
 8005e24:	40015000 	.word	0x40015000
 8005e28:	0800f410 	.word	0x0800f410
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d020      	beq.n	8005e76 <HAL_SPI_Init+0x24e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d01c      	beq.n	8005e76 <HAL_SPI_Init+0x24e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d018      	beq.n	8005e76 <HAL_SPI_Init+0x24e>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	2b18      	cmp	r3, #24
 8005e4a:	d014      	beq.n	8005e76 <HAL_SPI_Init+0x24e>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d010      	beq.n	8005e76 <HAL_SPI_Init+0x24e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	2b28      	cmp	r3, #40	; 0x28
 8005e5a:	d00c      	beq.n	8005e76 <HAL_SPI_Init+0x24e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	2b30      	cmp	r3, #48	; 0x30
 8005e62:	d008      	beq.n	8005e76 <HAL_SPI_Init+0x24e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	2b38      	cmp	r3, #56	; 0x38
 8005e6a:	d004      	beq.n	8005e76 <HAL_SPI_Init+0x24e>
 8005e6c:	f240 1159 	movw	r1, #345	; 0x159
 8005e70:	483a      	ldr	r0, [pc, #232]	; (8005f5c <HAL_SPI_Init+0x334>)
 8005e72:	f7fa febe 	bl	8000bf2 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7fa ff6f 	bl	8000d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f06:	ea42 0103 	orr.w	r1, r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	0c1b      	lsrs	r3, r3, #16
 8005f20:	f003 0104 	and.w	r1, r3, #4
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	f003 0210 	and.w	r2, r3, #16
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69da      	ldr	r2, [r3, #28]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	0800f410 	.word	0x0800f410

08005f60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d009      	beq.n	8005f90 <HAL_SPI_Transmit+0x30>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f84:	d004      	beq.n	8005f90 <HAL_SPI_Transmit+0x30>
 8005f86:	f44f 7142 	mov.w	r1, #776	; 0x308
 8005f8a:	4880      	ldr	r0, [pc, #512]	; (800618c <HAL_SPI_Transmit+0x22c>)
 8005f8c:	f7fa fe31 	bl	8000bf2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_SPI_Transmit+0x3e>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e128      	b.n	80061f0 <HAL_SPI_Transmit+0x290>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa6:	f7fb fd69 	bl	8001a7c <HAL_GetTick>
 8005faa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d002      	beq.n	8005fc2 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fc0:	e10d      	b.n	80061de <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_Transmit+0x6e>
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fd2:	e104      	b.n	80061de <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	88fa      	ldrh	r2, [r7, #6]
 8005ff2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601a:	d10f      	bne.n	800603c <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800603a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d007      	beq.n	800605a <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006058:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006062:	d14b      	bne.n	80060fc <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <HAL_SPI_Transmit+0x112>
 800606c:	8afb      	ldrh	r3, [r7, #22]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d13e      	bne.n	80060f0 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	881a      	ldrh	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	1c9a      	adds	r2, r3, #2
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006096:	e02b      	b.n	80060f0 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d112      	bne.n	80060cc <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	881a      	ldrh	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	1c9a      	adds	r2, r3, #2
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80060ca:	e011      	b.n	80060f0 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060cc:	f7fb fcd6 	bl	8001a7c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d803      	bhi.n	80060e4 <HAL_SPI_Transmit+0x184>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d102      	bne.n	80060ea <HAL_SPI_Transmit+0x18a>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060ee:	e076      	b.n	80061de <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1ce      	bne.n	8006098 <HAL_SPI_Transmit+0x138>
 80060fa:	e04e      	b.n	800619a <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <HAL_SPI_Transmit+0x1aa>
 8006104:	8afb      	ldrh	r3, [r7, #22]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d142      	bne.n	8006190 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	7812      	ldrb	r2, [r2, #0]
 8006116:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006130:	e02e      	b.n	8006190 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b02      	cmp	r3, #2
 800613e:	d113      	bne.n	8006168 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	7812      	ldrb	r2, [r2, #0]
 800614c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	86da      	strh	r2, [r3, #54]	; 0x36
 8006166:	e013      	b.n	8006190 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006168:	f7fb fc88 	bl	8001a7c <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d803      	bhi.n	8006180 <HAL_SPI_Transmit+0x220>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d102      	bne.n	8006186 <HAL_SPI_Transmit+0x226>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	77fb      	strb	r3, [r7, #31]
          goto error;
 800618a:	e028      	b.n	80061de <HAL_SPI_Transmit+0x27e>
 800618c:	0800f410 	.word	0x0800f410
    while (hspi->TxXferCount > 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1cb      	bne.n	8006132 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f8b2 	bl	8006308 <SPI_EndRxTxTransaction>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e000      	b.n	80061de <HAL_SPI_Transmit+0x27e>
  }

error:
 80061dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	4613      	mov	r3, r2
 8006206:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006208:	f7fb fc38 	bl	8001a7c <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	4413      	add	r3, r2
 8006216:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006218:	f7fb fc30 	bl	8001a7c <HAL_GetTick>
 800621c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800621e:	4b39      	ldr	r3, [pc, #228]	; (8006304 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	015b      	lsls	r3, r3, #5
 8006224:	0d1b      	lsrs	r3, r3, #20
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	fb02 f303 	mul.w	r3, r2, r3
 800622c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800622e:	e054      	b.n	80062da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006236:	d050      	beq.n	80062da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006238:	f7fb fc20 	bl	8001a7c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	429a      	cmp	r2, r3
 8006246:	d902      	bls.n	800624e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d13d      	bne.n	80062ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800625c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006266:	d111      	bne.n	800628c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006270:	d004      	beq.n	800627c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627a:	d107      	bne.n	800628c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800628a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006294:	d10f      	bne.n	80062b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e017      	b.n	80062fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4013      	ands	r3, r2
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	bf0c      	ite	eq
 80062ea:	2301      	moveq	r3, #1
 80062ec:	2300      	movne	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	461a      	mov	r2, r3
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d19b      	bne.n	8006230 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000010 	.word	0x20000010

08006308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006314:	4b1b      	ldr	r3, [pc, #108]	; (8006384 <SPI_EndRxTxTransaction+0x7c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1b      	ldr	r2, [pc, #108]	; (8006388 <SPI_EndRxTxTransaction+0x80>)
 800631a:	fba2 2303 	umull	r2, r3, r2, r3
 800631e:	0d5b      	lsrs	r3, r3, #21
 8006320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006324:	fb02 f303 	mul.w	r3, r2, r3
 8006328:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006332:	d112      	bne.n	800635a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2200      	movs	r2, #0
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff ff5a 	bl	80061f8 <SPI_WaitFlagStateUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e00f      	b.n	800637a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	3b01      	subs	r3, #1
 8006364:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006370:	2b80      	cmp	r3, #128	; 0x80
 8006372:	d0f2      	beq.n	800635a <SPI_EndRxTxTransaction+0x52>
 8006374:	e000      	b.n	8006378 <SPI_EndRxTxTransaction+0x70>
        break;
 8006376:	bf00      	nop
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000010 	.word	0x20000010
 8006388:	165e9f81 	.word	0x165e9f81

0800638c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e0a7      	b.n	80064ee <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a55      	ldr	r2, [pc, #340]	; (80064f8 <HAL_TIM_Base_Init+0x16c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d027      	beq.n	80063f8 <HAL_TIM_Base_Init+0x6c>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b0:	d022      	beq.n	80063f8 <HAL_TIM_Base_Init+0x6c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a51      	ldr	r2, [pc, #324]	; (80064fc <HAL_TIM_Base_Init+0x170>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d01d      	beq.n	80063f8 <HAL_TIM_Base_Init+0x6c>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a4f      	ldr	r2, [pc, #316]	; (8006500 <HAL_TIM_Base_Init+0x174>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d018      	beq.n	80063f8 <HAL_TIM_Base_Init+0x6c>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a4e      	ldr	r2, [pc, #312]	; (8006504 <HAL_TIM_Base_Init+0x178>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <HAL_TIM_Base_Init+0x6c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a4c      	ldr	r2, [pc, #304]	; (8006508 <HAL_TIM_Base_Init+0x17c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00e      	beq.n	80063f8 <HAL_TIM_Base_Init+0x6c>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a4b      	ldr	r2, [pc, #300]	; (800650c <HAL_TIM_Base_Init+0x180>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_TIM_Base_Init+0x6c>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a49      	ldr	r2, [pc, #292]	; (8006510 <HAL_TIM_Base_Init+0x184>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_TIM_Base_Init+0x6c>
 80063ee:	f240 1113 	movw	r1, #275	; 0x113
 80063f2:	4848      	ldr	r0, [pc, #288]	; (8006514 <HAL_TIM_Base_Init+0x188>)
 80063f4:	f7fa fbfd 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d014      	beq.n	800642a <HAL_TIM_Base_Init+0x9e>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b10      	cmp	r3, #16
 8006406:	d010      	beq.n	800642a <HAL_TIM_Base_Init+0x9e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b20      	cmp	r3, #32
 800640e:	d00c      	beq.n	800642a <HAL_TIM_Base_Init+0x9e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	d008      	beq.n	800642a <HAL_TIM_Base_Init+0x9e>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b60      	cmp	r3, #96	; 0x60
 800641e:	d004      	beq.n	800642a <HAL_TIM_Base_Init+0x9e>
 8006420:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006424:	483b      	ldr	r0, [pc, #236]	; (8006514 <HAL_TIM_Base_Init+0x188>)
 8006426:	f7fa fbe4 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00e      	beq.n	8006450 <HAL_TIM_Base_Init+0xc4>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643a:	d009      	beq.n	8006450 <HAL_TIM_Base_Init+0xc4>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006444:	d004      	beq.n	8006450 <HAL_TIM_Base_Init+0xc4>
 8006446:	f240 1115 	movw	r1, #277	; 0x115
 800644a:	4832      	ldr	r0, [pc, #200]	; (8006514 <HAL_TIM_Base_Init+0x188>)
 800644c:	f7fa fbd1 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_TIM_Base_Init+0xde>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b80      	cmp	r3, #128	; 0x80
 800645e:	d004      	beq.n	800646a <HAL_TIM_Base_Init+0xde>
 8006460:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006464:	482b      	ldr	r0, [pc, #172]	; (8006514 <HAL_TIM_Base_Init+0x188>)
 8006466:	f7fa fbc4 	bl	8000bf2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fb f9e6 	bl	8001850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3304      	adds	r3, #4
 8006494:	4619      	mov	r1, r3
 8006496:	4610      	mov	r0, r2
 8006498:	f000 ff68 	bl	800736c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40000c00 	.word	0x40000c00
 8006508:	40014000 	.word	0x40014000
 800650c:	40014400 	.word	0x40014400
 8006510:	40014800 	.word	0x40014800
 8006514:	0800f448 	.word	0x0800f448

08006518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a3d      	ldr	r2, [pc, #244]	; (800661c <HAL_TIM_Base_Start_IT+0x104>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d027      	beq.n	800657a <HAL_TIM_Base_Start_IT+0x62>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006532:	d022      	beq.n	800657a <HAL_TIM_Base_Start_IT+0x62>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a39      	ldr	r2, [pc, #228]	; (8006620 <HAL_TIM_Base_Start_IT+0x108>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01d      	beq.n	800657a <HAL_TIM_Base_Start_IT+0x62>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a38      	ldr	r2, [pc, #224]	; (8006624 <HAL_TIM_Base_Start_IT+0x10c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d018      	beq.n	800657a <HAL_TIM_Base_Start_IT+0x62>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a36      	ldr	r2, [pc, #216]	; (8006628 <HAL_TIM_Base_Start_IT+0x110>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d013      	beq.n	800657a <HAL_TIM_Base_Start_IT+0x62>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a35      	ldr	r2, [pc, #212]	; (800662c <HAL_TIM_Base_Start_IT+0x114>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00e      	beq.n	800657a <HAL_TIM_Base_Start_IT+0x62>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a33      	ldr	r2, [pc, #204]	; (8006630 <HAL_TIM_Base_Start_IT+0x118>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d009      	beq.n	800657a <HAL_TIM_Base_Start_IT+0x62>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a32      	ldr	r2, [pc, #200]	; (8006634 <HAL_TIM_Base_Start_IT+0x11c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d004      	beq.n	800657a <HAL_TIM_Base_Start_IT+0x62>
 8006570:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006574:	4830      	ldr	r0, [pc, #192]	; (8006638 <HAL_TIM_Base_Start_IT+0x120>)
 8006576:	f7fa fb3c 	bl	8000bf2 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b01      	cmp	r3, #1
 8006584:	d001      	beq.n	800658a <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e044      	b.n	8006614 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0201 	orr.w	r2, r2, #1
 80065a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1d      	ldr	r2, [pc, #116]	; (800661c <HAL_TIM_Base_Start_IT+0x104>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d018      	beq.n	80065de <HAL_TIM_Base_Start_IT+0xc6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b4:	d013      	beq.n	80065de <HAL_TIM_Base_Start_IT+0xc6>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a19      	ldr	r2, [pc, #100]	; (8006620 <HAL_TIM_Base_Start_IT+0x108>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00e      	beq.n	80065de <HAL_TIM_Base_Start_IT+0xc6>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a17      	ldr	r2, [pc, #92]	; (8006624 <HAL_TIM_Base_Start_IT+0x10c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d009      	beq.n	80065de <HAL_TIM_Base_Start_IT+0xc6>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a16      	ldr	r2, [pc, #88]	; (8006628 <HAL_TIM_Base_Start_IT+0x110>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d004      	beq.n	80065de <HAL_TIM_Base_Start_IT+0xc6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a14      	ldr	r2, [pc, #80]	; (800662c <HAL_TIM_Base_Start_IT+0x114>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d111      	bne.n	8006602 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b06      	cmp	r3, #6
 80065ee:	d010      	beq.n	8006612 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0201 	orr.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006600:	e007      	b.n	8006612 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40010000 	.word	0x40010000
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40000c00 	.word	0x40000c00
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800
 8006638:	0800f448 	.word	0x0800f448

0800663c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e18a      	b.n	8006966 <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a78      	ldr	r2, [pc, #480]	; (8006838 <HAL_TIM_Encoder_Init+0x1fc>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01d      	beq.n	8006696 <HAL_TIM_Encoder_Init+0x5a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006662:	d018      	beq.n	8006696 <HAL_TIM_Encoder_Init+0x5a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a74      	ldr	r2, [pc, #464]	; (800683c <HAL_TIM_Encoder_Init+0x200>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <HAL_TIM_Encoder_Init+0x5a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a73      	ldr	r2, [pc, #460]	; (8006840 <HAL_TIM_Encoder_Init+0x204>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <HAL_TIM_Encoder_Init+0x5a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a71      	ldr	r2, [pc, #452]	; (8006844 <HAL_TIM_Encoder_Init+0x208>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_TIM_Encoder_Init+0x5a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a70      	ldr	r2, [pc, #448]	; (8006848 <HAL_TIM_Encoder_Init+0x20c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_TIM_Encoder_Init+0x5a>
 800668c:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8006690:	486e      	ldr	r0, [pc, #440]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 8006692:	f7fa faae 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d014      	beq.n	80066c8 <HAL_TIM_Encoder_Init+0x8c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d010      	beq.n	80066c8 <HAL_TIM_Encoder_Init+0x8c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d00c      	beq.n	80066c8 <HAL_TIM_Encoder_Init+0x8c>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b40      	cmp	r3, #64	; 0x40
 80066b4:	d008      	beq.n	80066c8 <HAL_TIM_Encoder_Init+0x8c>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b60      	cmp	r3, #96	; 0x60
 80066bc:	d004      	beq.n	80066c8 <HAL_TIM_Encoder_Init+0x8c>
 80066be:	f640 31d2 	movw	r1, #3026	; 0xbd2
 80066c2:	4862      	ldr	r0, [pc, #392]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 80066c4:	f7fa fa95 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00e      	beq.n	80066ee <HAL_TIM_Encoder_Init+0xb2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d8:	d009      	beq.n	80066ee <HAL_TIM_Encoder_Init+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e2:	d004      	beq.n	80066ee <HAL_TIM_Encoder_Init+0xb2>
 80066e4:	f640 31d3 	movw	r1, #3027	; 0xbd3
 80066e8:	4858      	ldr	r0, [pc, #352]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 80066ea:	f7fa fa82 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d008      	beq.n	8006708 <HAL_TIM_Encoder_Init+0xcc>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	2b80      	cmp	r3, #128	; 0x80
 80066fc:	d004      	beq.n	8006708 <HAL_TIM_Encoder_Init+0xcc>
 80066fe:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8006702:	4852      	ldr	r0, [pc, #328]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 8006704:	f7fa fa75 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d00c      	beq.n	800672a <HAL_TIM_Encoder_Init+0xee>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d008      	beq.n	800672a <HAL_TIM_Encoder_Init+0xee>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b03      	cmp	r3, #3
 800671e:	d004      	beq.n	800672a <HAL_TIM_Encoder_Init+0xee>
 8006720:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8006724:	4849      	ldr	r0, [pc, #292]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 8006726:	f7fa fa64 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d00c      	beq.n	800674c <HAL_TIM_Encoder_Init+0x110>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d008      	beq.n	800674c <HAL_TIM_Encoder_Init+0x110>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2b03      	cmp	r3, #3
 8006740:	d004      	beq.n	800674c <HAL_TIM_Encoder_Init+0x110>
 8006742:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8006746:	4841      	ldr	r0, [pc, #260]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 8006748:	f7fa fa53 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d00c      	beq.n	800676e <HAL_TIM_Encoder_Init+0x132>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d008      	beq.n	800676e <HAL_TIM_Encoder_Init+0x132>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d004      	beq.n	800676e <HAL_TIM_Encoder_Init+0x132>
 8006764:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8006768:	4838      	ldr	r0, [pc, #224]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 800676a:	f7fa fa42 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d008      	beq.n	8006788 <HAL_TIM_Encoder_Init+0x14c>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d004      	beq.n	8006788 <HAL_TIM_Encoder_Init+0x14c>
 800677e:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8006782:	4832      	ldr	r0, [pc, #200]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 8006784:	f7fa fa35 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d008      	beq.n	80067a2 <HAL_TIM_Encoder_Init+0x166>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d004      	beq.n	80067a2 <HAL_TIM_Encoder_Init+0x166>
 8006798:	f640 31d9 	movw	r1, #3033	; 0xbd9
 800679c:	482b      	ldr	r0, [pc, #172]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 800679e:	f7fa fa28 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d010      	beq.n	80067cc <HAL_TIM_Encoder_Init+0x190>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d00c      	beq.n	80067cc <HAL_TIM_Encoder_Init+0x190>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d008      	beq.n	80067cc <HAL_TIM_Encoder_Init+0x190>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	2b0c      	cmp	r3, #12
 80067c0:	d004      	beq.n	80067cc <HAL_TIM_Encoder_Init+0x190>
 80067c2:	f640 31da 	movw	r1, #3034	; 0xbda
 80067c6:	4821      	ldr	r0, [pc, #132]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 80067c8:	f7fa fa13 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d010      	beq.n	80067f6 <HAL_TIM_Encoder_Init+0x1ba>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d00c      	beq.n	80067f6 <HAL_TIM_Encoder_Init+0x1ba>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d008      	beq.n	80067f6 <HAL_TIM_Encoder_Init+0x1ba>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	2b0c      	cmp	r3, #12
 80067ea:	d004      	beq.n	80067f6 <HAL_TIM_Encoder_Init+0x1ba>
 80067ec:	f640 31db 	movw	r1, #3035	; 0xbdb
 80067f0:	4816      	ldr	r0, [pc, #88]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 80067f2:	f7fa f9fe 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b0f      	cmp	r3, #15
 80067fc:	d904      	bls.n	8006808 <HAL_TIM_Encoder_Init+0x1cc>
 80067fe:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8006802:	4812      	ldr	r0, [pc, #72]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 8006804:	f7fa f9f5 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	2b0f      	cmp	r3, #15
 800680e:	d904      	bls.n	800681a <HAL_TIM_Encoder_Init+0x1de>
 8006810:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8006814:	480d      	ldr	r0, [pc, #52]	; (800684c <HAL_TIM_Encoder_Init+0x210>)
 8006816:	f7fa f9ec 	bl	8000bf2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d114      	bne.n	8006850 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fb f854 	bl	80018dc <HAL_TIM_Encoder_MspInit>
 8006834:	e00c      	b.n	8006850 <HAL_TIM_Encoder_Init+0x214>
 8006836:	bf00      	nop
 8006838:	40010000 	.word	0x40010000
 800683c:	40000400 	.word	0x40000400
 8006840:	40000800 	.word	0x40000800
 8006844:	40000c00 	.word	0x40000c00
 8006848:	40014000 	.word	0x40014000
 800684c:	0800f448 	.word	0x0800f448
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6812      	ldr	r2, [r2, #0]
 8006862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006866:	f023 0307 	bic.w	r3, r3, #7
 800686a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f000 fd78 	bl	800736c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a4:	f023 0303 	bic.w	r3, r3, #3
 80068a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	4313      	orrs	r3, r2
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068c2:	f023 030c 	bic.w	r3, r3, #12
 80068c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	4313      	orrs	r3, r2
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	011a      	lsls	r2, r3, #4
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	031b      	lsls	r3, r3, #12
 80068f2:	4313      	orrs	r3, r2
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006900:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006908:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	4313      	orrs	r3, r2
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop

08006970 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006980:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006988:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006990:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006998:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a4d      	ldr	r2, [pc, #308]	; (8006ad4 <HAL_TIM_Encoder_Start+0x164>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d01d      	beq.n	80069e0 <HAL_TIM_Encoder_Start+0x70>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ac:	d018      	beq.n	80069e0 <HAL_TIM_Encoder_Start+0x70>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a49      	ldr	r2, [pc, #292]	; (8006ad8 <HAL_TIM_Encoder_Start+0x168>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d013      	beq.n	80069e0 <HAL_TIM_Encoder_Start+0x70>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a47      	ldr	r2, [pc, #284]	; (8006adc <HAL_TIM_Encoder_Start+0x16c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00e      	beq.n	80069e0 <HAL_TIM_Encoder_Start+0x70>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a46      	ldr	r2, [pc, #280]	; (8006ae0 <HAL_TIM_Encoder_Start+0x170>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d009      	beq.n	80069e0 <HAL_TIM_Encoder_Start+0x70>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a44      	ldr	r2, [pc, #272]	; (8006ae4 <HAL_TIM_Encoder_Start+0x174>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d004      	beq.n	80069e0 <HAL_TIM_Encoder_Start+0x70>
 80069d6:	f640 418e 	movw	r1, #3214	; 0xc8e
 80069da:	4843      	ldr	r0, [pc, #268]	; (8006ae8 <HAL_TIM_Encoder_Start+0x178>)
 80069dc:	f7fa f909 	bl	8000bf2 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d110      	bne.n	8006a08 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d102      	bne.n	80069f2 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069ec:	7b7b      	ldrb	r3, [r7, #13]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d001      	beq.n	80069f6 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e069      	b.n	8006aca <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a06:	e031      	b.n	8006a6c <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d110      	bne.n	8006a30 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d102      	bne.n	8006a1a <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a14:	7b3b      	ldrb	r3, [r7, #12]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d001      	beq.n	8006a1e <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e055      	b.n	8006aca <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a2e:	e01d      	b.n	8006a6c <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d108      	bne.n	8006a48 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d105      	bne.n	8006a48 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a3c:	7b7b      	ldrb	r3, [r7, #13]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d102      	bne.n	8006a48 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a42:	7b3b      	ldrb	r3, [r7, #12]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d001      	beq.n	8006a4c <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e03e      	b.n	8006aca <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_TIM_Encoder_Start+0x10a>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d008      	beq.n	8006a8a <HAL_TIM_Encoder_Start+0x11a>
 8006a78:	e00f      	b.n	8006a9a <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fd8c 	bl	80075a0 <TIM_CCxChannelCmd>
      break;
 8006a88:	e016      	b.n	8006ab8 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	2104      	movs	r1, #4
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fd84 	bl	80075a0 <TIM_CCxChannelCmd>
      break;
 8006a98:	e00e      	b.n	8006ab8 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fd7c 	bl	80075a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2201      	movs	r2, #1
 8006aae:	2104      	movs	r1, #4
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fd75 	bl	80075a0 <TIM_CCxChannelCmd>
      break;
 8006ab6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0201 	orr.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40010000 	.word	0x40010000
 8006ad8:	40000400 	.word	0x40000400
 8006adc:	40000800 	.word	0x40000800
 8006ae0:	40000c00 	.word	0x40000c00
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	0800f448 	.word	0x0800f448

08006aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d122      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d11b      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0202 	mvn.w	r2, #2
 8006b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fbfe 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8006b34:	e005      	b.n	8006b42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fbf0 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fc01 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d122      	bne.n	8006b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d11b      	bne.n	8006b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0204 	mvn.w	r2, #4
 8006b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fbd4 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8006b88:	e005      	b.n	8006b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fbc6 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fbd7 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d122      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0208 	mvn.w	r2, #8
 8006bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fbaa 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8006bdc:	e005      	b.n	8006bea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fb9c 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fbad 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b10      	cmp	r3, #16
 8006bfc:	d122      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0310 	and.w	r3, r3, #16
 8006c08:	2b10      	cmp	r3, #16
 8006c0a:	d11b      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0210 	mvn.w	r2, #16
 8006c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2208      	movs	r2, #8
 8006c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fb80 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8006c30:	e005      	b.n	8006c3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fb72 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fb83 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d10e      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d107      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0201 	mvn.w	r2, #1
 8006c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7f9 ffaa 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7a:	2b80      	cmp	r3, #128	; 0x80
 8006c7c:	d10e      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c88:	2b80      	cmp	r3, #128	; 0x80
 8006c8a:	d107      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fdb6 	bl	8007808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca6:	2b40      	cmp	r3, #64	; 0x40
 8006ca8:	d10e      	bne.n	8006cc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	d107      	bne.n	8006cc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fb48 	bl	8007358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d10e      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f003 0320 	and.w	r3, r3, #32
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d107      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f06f 0220 	mvn.w	r2, #32
 8006cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fd80 	bl	80077f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_TIM_ConfigClockSource+0x1c>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e2f0      	b.n	80072fa <HAL_TIM_ConfigClockSource+0x5fe>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d30:	d029      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x8a>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b70      	cmp	r3, #112	; 0x70
 8006d38:	d025      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x8a>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d42:	d020      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x8a>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b40      	cmp	r3, #64	; 0x40
 8006d4a:	d01c      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x8a>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b50      	cmp	r3, #80	; 0x50
 8006d52:	d018      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x8a>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b60      	cmp	r3, #96	; 0x60
 8006d5a:	d014      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x8a>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d010      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x8a>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b10      	cmp	r3, #16
 8006d6a:	d00c      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x8a>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d008      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x8a>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b30      	cmp	r3, #48	; 0x30
 8006d7a:	d004      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x8a>
 8006d7c:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8006d80:	487c      	ldr	r0, [pc, #496]	; (8006f74 <HAL_TIM_ConfigClockSource+0x278>)
 8006d82:	f7f9 ff36 	bl	8000bf2 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dae:	f000 80f1 	beq.w	8006f94 <HAL_TIM_ConfigClockSource+0x298>
 8006db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db6:	f200 8293 	bhi.w	80072e0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbe:	d02d      	beq.n	8006e1c <HAL_TIM_ConfigClockSource+0x120>
 8006dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc4:	f200 828c 	bhi.w	80072e0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006dc8:	2b70      	cmp	r3, #112	; 0x70
 8006dca:	d05d      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x18c>
 8006dcc:	2b70      	cmp	r3, #112	; 0x70
 8006dce:	f200 8287 	bhi.w	80072e0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006dd2:	2b60      	cmp	r3, #96	; 0x60
 8006dd4:	f000 81a0 	beq.w	8007118 <HAL_TIM_ConfigClockSource+0x41c>
 8006dd8:	2b60      	cmp	r3, #96	; 0x60
 8006dda:	f200 8281 	bhi.w	80072e0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006dde:	2b50      	cmp	r3, #80	; 0x50
 8006de0:	f000 8144 	beq.w	800706c <HAL_TIM_ConfigClockSource+0x370>
 8006de4:	2b50      	cmp	r3, #80	; 0x50
 8006de6:	f200 827b 	bhi.w	80072e0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	f000 81f6 	beq.w	80071dc <HAL_TIM_ConfigClockSource+0x4e0>
 8006df0:	2b40      	cmp	r3, #64	; 0x40
 8006df2:	f200 8275 	bhi.w	80072e0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006df6:	2b30      	cmp	r3, #48	; 0x30
 8006df8:	f000 8246 	beq.w	8007288 <HAL_TIM_ConfigClockSource+0x58c>
 8006dfc:	2b30      	cmp	r3, #48	; 0x30
 8006dfe:	f200 826f 	bhi.w	80072e0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	f000 8240 	beq.w	8007288 <HAL_TIM_ConfigClockSource+0x58c>
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	f200 8269 	bhi.w	80072e0 <HAL_TIM_ConfigClockSource+0x5e4>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 823a 	beq.w	8007288 <HAL_TIM_ConfigClockSource+0x58c>
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	f000 8237 	beq.w	8007288 <HAL_TIM_ConfigClockSource+0x58c>
 8006e1a:	e261      	b.n	80072e0 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a55      	ldr	r2, [pc, #340]	; (8006f78 <HAL_TIM_ConfigClockSource+0x27c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	f000 825f 	beq.w	80072e6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e30:	f000 8259 	beq.w	80072e6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a50      	ldr	r2, [pc, #320]	; (8006f7c <HAL_TIM_ConfigClockSource+0x280>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	f000 8253 	beq.w	80072e6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a4e      	ldr	r2, [pc, #312]	; (8006f80 <HAL_TIM_ConfigClockSource+0x284>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f000 824d 	beq.w	80072e6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a4c      	ldr	r2, [pc, #304]	; (8006f84 <HAL_TIM_ConfigClockSource+0x288>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	f000 8247 	beq.w	80072e6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a4a      	ldr	r2, [pc, #296]	; (8006f88 <HAL_TIM_ConfigClockSource+0x28c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	f000 8241 	beq.w	80072e6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a48      	ldr	r2, [pc, #288]	; (8006f8c <HAL_TIM_ConfigClockSource+0x290>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	f000 823b 	beq.w	80072e6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a46      	ldr	r2, [pc, #280]	; (8006f90 <HAL_TIM_ConfigClockSource+0x294>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	f000 8235 	beq.w	80072e6 <HAL_TIM_ConfigClockSource+0x5ea>
 8006e7c:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8006e80:	483c      	ldr	r0, [pc, #240]	; (8006f74 <HAL_TIM_ConfigClockSource+0x278>)
 8006e82:	f7f9 feb6 	bl	8000bf2 <assert_failed>
      break;
 8006e86:	e22e      	b.n	80072e6 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a3a      	ldr	r2, [pc, #232]	; (8006f78 <HAL_TIM_ConfigClockSource+0x27c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01d      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x1d2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d018      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x1d2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a36      	ldr	r2, [pc, #216]	; (8006f7c <HAL_TIM_ConfigClockSource+0x280>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d013      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x1d2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a35      	ldr	r2, [pc, #212]	; (8006f80 <HAL_TIM_ConfigClockSource+0x284>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00e      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x1d2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a33      	ldr	r2, [pc, #204]	; (8006f84 <HAL_TIM_ConfigClockSource+0x288>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x1d2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a32      	ldr	r2, [pc, #200]	; (8006f88 <HAL_TIM_ConfigClockSource+0x28c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x1d2>
 8006ec4:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8006ec8:	482a      	ldr	r0, [pc, #168]	; (8006f74 <HAL_TIM_ConfigClockSource+0x278>)
 8006eca:	f7f9 fe92 	bl	8000bf2 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d013      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0x202>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ede:	d00e      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0x202>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee8:	d009      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0x202>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ef2:	d004      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0x202>
 8006ef4:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8006ef8:	481e      	ldr	r0, [pc, #120]	; (8006f74 <HAL_TIM_ConfigClockSource+0x278>)
 8006efa:	f7f9 fe7a 	bl	8000bf2 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f06:	d014      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x236>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d010      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x236>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00c      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x236>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d008      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x236>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	2b0a      	cmp	r3, #10
 8006f26:	d004      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x236>
 8006f28:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8006f2c:	4811      	ldr	r0, [pc, #68]	; (8006f74 <HAL_TIM_ConfigClockSource+0x278>)
 8006f2e:	f7f9 fe60 	bl	8000bf2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	2b0f      	cmp	r3, #15
 8006f38:	d904      	bls.n	8006f44 <HAL_TIM_ConfigClockSource+0x248>
 8006f3a:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8006f3e:	480d      	ldr	r0, [pc, #52]	; (8006f74 <HAL_TIM_ConfigClockSource+0x278>)
 8006f40:	f7f9 fe57 	bl	8000bf2 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6818      	ldr	r0, [r3, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6899      	ldr	r1, [r3, #8]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f000 fb04 	bl	8007560 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	609a      	str	r2, [r3, #8]
      break;
 8006f70:	e1ba      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x5ec>
 8006f72:	bf00      	nop
 8006f74:	0800f448 	.word	0x0800f448
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	40014400 	.word	0x40014400
 8006f90:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a8a      	ldr	r2, [pc, #552]	; (80071c4 <HAL_TIM_ConfigClockSource+0x4c8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d018      	beq.n	8006fd0 <HAL_TIM_ConfigClockSource+0x2d4>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa6:	d013      	beq.n	8006fd0 <HAL_TIM_ConfigClockSource+0x2d4>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a86      	ldr	r2, [pc, #536]	; (80071c8 <HAL_TIM_ConfigClockSource+0x4cc>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00e      	beq.n	8006fd0 <HAL_TIM_ConfigClockSource+0x2d4>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a85      	ldr	r2, [pc, #532]	; (80071cc <HAL_TIM_ConfigClockSource+0x4d0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_TIM_ConfigClockSource+0x2d4>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a83      	ldr	r2, [pc, #524]	; (80071d0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIM_ConfigClockSource+0x2d4>
 8006fc6:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8006fca:	4882      	ldr	r0, [pc, #520]	; (80071d4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006fcc:	f7f9 fe11 	bl	8000bf2 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d013      	beq.n	8007000 <HAL_TIM_ConfigClockSource+0x304>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe0:	d00e      	beq.n	8007000 <HAL_TIM_ConfigClockSource+0x304>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fea:	d009      	beq.n	8007000 <HAL_TIM_ConfigClockSource+0x304>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ff4:	d004      	beq.n	8007000 <HAL_TIM_ConfigClockSource+0x304>
 8006ff6:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8006ffa:	4876      	ldr	r0, [pc, #472]	; (80071d4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006ffc:	f7f9 fdf9 	bl	8000bf2 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007008:	d014      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0x338>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d010      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0x338>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00c      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0x338>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d008      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0x338>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b0a      	cmp	r3, #10
 8007028:	d004      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0x338>
 800702a:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800702e:	4869      	ldr	r0, [pc, #420]	; (80071d4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007030:	f7f9 fddf 	bl	8000bf2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b0f      	cmp	r3, #15
 800703a:	d904      	bls.n	8007046 <HAL_TIM_ConfigClockSource+0x34a>
 800703c:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8007040:	4864      	ldr	r0, [pc, #400]	; (80071d4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007042:	f7f9 fdd6 	bl	8000bf2 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6899      	ldr	r1, [r3, #8]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f000 fa83 	bl	8007560 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007068:	609a      	str	r2, [r3, #8]
      break;
 800706a:	e13d      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a54      	ldr	r2, [pc, #336]	; (80071c4 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d01d      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x3b6>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707e:	d018      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x3b6>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a50      	ldr	r2, [pc, #320]	; (80071c8 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d013      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x3b6>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a4f      	ldr	r2, [pc, #316]	; (80071cc <HAL_TIM_ConfigClockSource+0x4d0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00e      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x3b6>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a4d      	ldr	r2, [pc, #308]	; (80071d0 <HAL_TIM_ConfigClockSource+0x4d4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d009      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x3b6>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a4d      	ldr	r2, [pc, #308]	; (80071d8 <HAL_TIM_ConfigClockSource+0x4dc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d004      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x3b6>
 80070a8:	f241 41f6 	movw	r1, #5366	; 0x14f6
 80070ac:	4849      	ldr	r0, [pc, #292]	; (80071d4 <HAL_TIM_ConfigClockSource+0x4d8>)
 80070ae:	f7f9 fda0 	bl	8000bf2 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ba:	d014      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x3ea>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d010      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x3ea>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00c      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x3ea>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d008      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x3ea>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b0a      	cmp	r3, #10
 80070da:	d004      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x3ea>
 80070dc:	f241 41f9 	movw	r1, #5369	; 0x14f9
 80070e0:	483c      	ldr	r0, [pc, #240]	; (80071d4 <HAL_TIM_ConfigClockSource+0x4d8>)
 80070e2:	f7f9 fd86 	bl	8000bf2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	2b0f      	cmp	r3, #15
 80070ec:	d904      	bls.n	80070f8 <HAL_TIM_ConfigClockSource+0x3fc>
 80070ee:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80070f2:	4838      	ldr	r0, [pc, #224]	; (80071d4 <HAL_TIM_ConfigClockSource+0x4d8>)
 80070f4:	f7f9 fd7d 	bl	8000bf2 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6818      	ldr	r0, [r3, #0]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	6859      	ldr	r1, [r3, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	461a      	mov	r2, r3
 8007106:	f000 f9b1 	bl	800746c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2150      	movs	r1, #80	; 0x50
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fa0a 	bl	800752a <TIM_ITRx_SetConfig>
      break;
 8007116:	e0e7      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a29      	ldr	r2, [pc, #164]	; (80071c4 <HAL_TIM_ConfigClockSource+0x4c8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d01d      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x462>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712a:	d018      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x462>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a25      	ldr	r2, [pc, #148]	; (80071c8 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x462>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a24      	ldr	r2, [pc, #144]	; (80071cc <HAL_TIM_ConfigClockSource+0x4d0>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00e      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x462>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a22      	ldr	r2, [pc, #136]	; (80071d0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d009      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x462>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a22      	ldr	r2, [pc, #136]	; (80071d8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d004      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x462>
 8007154:	f241 5106 	movw	r1, #5382	; 0x1506
 8007158:	481e      	ldr	r0, [pc, #120]	; (80071d4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800715a:	f7f9 fd4a 	bl	8000bf2 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007166:	d014      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x496>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d010      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x496>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00c      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x496>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b02      	cmp	r3, #2
 800717e:	d008      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x496>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b0a      	cmp	r3, #10
 8007186:	d004      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x496>
 8007188:	f241 5109 	movw	r1, #5385	; 0x1509
 800718c:	4811      	ldr	r0, [pc, #68]	; (80071d4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800718e:	f7f9 fd30 	bl	8000bf2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	2b0f      	cmp	r3, #15
 8007198:	d904      	bls.n	80071a4 <HAL_TIM_ConfigClockSource+0x4a8>
 800719a:	f241 510a 	movw	r1, #5386	; 0x150a
 800719e:	480d      	ldr	r0, [pc, #52]	; (80071d4 <HAL_TIM_ConfigClockSource+0x4d8>)
 80071a0:	f7f9 fd27 	bl	8000bf2 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	6859      	ldr	r1, [r3, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	461a      	mov	r2, r3
 80071b2:	f000 f98a 	bl	80074ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2160      	movs	r1, #96	; 0x60
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 f9b4 	bl	800752a <TIM_ITRx_SetConfig>
      break;
 80071c2:	e091      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x5ec>
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40000c00 	.word	0x40000c00
 80071d4:	0800f448 	.word	0x0800f448
 80071d8:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a48      	ldr	r2, [pc, #288]	; (8007304 <HAL_TIM_ConfigClockSource+0x608>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01d      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x526>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ee:	d018      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x526>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a44      	ldr	r2, [pc, #272]	; (8007308 <HAL_TIM_ConfigClockSource+0x60c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x526>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a43      	ldr	r2, [pc, #268]	; (800730c <HAL_TIM_ConfigClockSource+0x610>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00e      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x526>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a41      	ldr	r2, [pc, #260]	; (8007310 <HAL_TIM_ConfigClockSource+0x614>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x526>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a40      	ldr	r2, [pc, #256]	; (8007314 <HAL_TIM_ConfigClockSource+0x618>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x526>
 8007218:	f241 5116 	movw	r1, #5398	; 0x1516
 800721c:	483e      	ldr	r0, [pc, #248]	; (8007318 <HAL_TIM_ConfigClockSource+0x61c>)
 800721e:	f7f9 fce8 	bl	8000bf2 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800722a:	d014      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x55a>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x55a>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00c      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x55a>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b02      	cmp	r3, #2
 8007242:	d008      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x55a>
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b0a      	cmp	r3, #10
 800724a:	d004      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x55a>
 800724c:	f241 5119 	movw	r1, #5401	; 0x1519
 8007250:	4831      	ldr	r0, [pc, #196]	; (8007318 <HAL_TIM_ConfigClockSource+0x61c>)
 8007252:	f7f9 fcce 	bl	8000bf2 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d904      	bls.n	8007268 <HAL_TIM_ConfigClockSource+0x56c>
 800725e:	f241 511a 	movw	r1, #5402	; 0x151a
 8007262:	482d      	ldr	r0, [pc, #180]	; (8007318 <HAL_TIM_ConfigClockSource+0x61c>)
 8007264:	f7f9 fcc5 	bl	8000bf2 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6818      	ldr	r0, [r3, #0]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	6859      	ldr	r1, [r3, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	461a      	mov	r2, r3
 8007276:	f000 f8f9 	bl	800746c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2140      	movs	r1, #64	; 0x40
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f952 	bl	800752a <TIM_ITRx_SetConfig>
      break;
 8007286:	e02f      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <HAL_TIM_ConfigClockSource+0x608>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01d      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x5d2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729a:	d018      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x5d2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a19      	ldr	r2, [pc, #100]	; (8007308 <HAL_TIM_ConfigClockSource+0x60c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d013      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x5d2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a18      	ldr	r2, [pc, #96]	; (800730c <HAL_TIM_ConfigClockSource+0x610>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00e      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x5d2>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a16      	ldr	r2, [pc, #88]	; (8007310 <HAL_TIM_ConfigClockSource+0x614>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d009      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x5d2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a15      	ldr	r2, [pc, #84]	; (8007314 <HAL_TIM_ConfigClockSource+0x618>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d004      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x5d2>
 80072c4:	f241 5129 	movw	r1, #5417	; 0x1529
 80072c8:	4813      	ldr	r0, [pc, #76]	; (8007318 <HAL_TIM_ConfigClockSource+0x61c>)
 80072ca:	f7f9 fc92 	bl	8000bf2 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f000 f926 	bl	800752a <TIM_ITRx_SetConfig>
      break;
 80072de:	e003      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]
      break;
 80072e4:	e000      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80072e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	40010000 	.word	0x40010000
 8007308:	40000400 	.word	0x40000400
 800730c:	40000800 	.word	0x40000800
 8007310:	40000c00 	.word	0x40000c00
 8007314:	40014000 	.word	0x40014000
 8007318:	0800f448 	.word	0x0800f448

0800731c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a34      	ldr	r2, [pc, #208]	; (8007450 <TIM_Base_SetConfig+0xe4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00f      	beq.n	80073a4 <TIM_Base_SetConfig+0x38>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738a:	d00b      	beq.n	80073a4 <TIM_Base_SetConfig+0x38>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a31      	ldr	r2, [pc, #196]	; (8007454 <TIM_Base_SetConfig+0xe8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d007      	beq.n	80073a4 <TIM_Base_SetConfig+0x38>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a30      	ldr	r2, [pc, #192]	; (8007458 <TIM_Base_SetConfig+0xec>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_Base_SetConfig+0x38>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a2f      	ldr	r2, [pc, #188]	; (800745c <TIM_Base_SetConfig+0xf0>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d108      	bne.n	80073b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a25      	ldr	r2, [pc, #148]	; (8007450 <TIM_Base_SetConfig+0xe4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d01b      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c4:	d017      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a22      	ldr	r2, [pc, #136]	; (8007454 <TIM_Base_SetConfig+0xe8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d013      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a21      	ldr	r2, [pc, #132]	; (8007458 <TIM_Base_SetConfig+0xec>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00f      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a20      	ldr	r2, [pc, #128]	; (800745c <TIM_Base_SetConfig+0xf0>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00b      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a1f      	ldr	r2, [pc, #124]	; (8007460 <TIM_Base_SetConfig+0xf4>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d007      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a1e      	ldr	r2, [pc, #120]	; (8007464 <TIM_Base_SetConfig+0xf8>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d003      	beq.n	80073f6 <TIM_Base_SetConfig+0x8a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a1d      	ldr	r2, [pc, #116]	; (8007468 <TIM_Base_SetConfig+0xfc>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d108      	bne.n	8007408 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	4313      	orrs	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a08      	ldr	r2, [pc, #32]	; (8007450 <TIM_Base_SetConfig+0xe4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d103      	bne.n	800743c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	615a      	str	r2, [r3, #20]
}
 8007442:	bf00      	nop
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40010000 	.word	0x40010000
 8007454:	40000400 	.word	0x40000400
 8007458:	40000800 	.word	0x40000800
 800745c:	40000c00 	.word	0x40000c00
 8007460:	40014000 	.word	0x40014000
 8007464:	40014400 	.word	0x40014400
 8007468:	40014800 	.word	0x40014800

0800746c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f023 0201 	bic.w	r2, r3, #1
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f023 030a 	bic.w	r3, r3, #10
 80074a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	621a      	str	r2, [r3, #32]
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b087      	sub	sp, #28
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f023 0210 	bic.w	r2, r3, #16
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	031b      	lsls	r3, r3, #12
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007506:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	621a      	str	r2, [r3, #32]
}
 800751e:	bf00      	nop
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	f043 0307 	orr.w	r3, r3, #7
 800754c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	609a      	str	r2, [r3, #8]
}
 8007554:	bf00      	nop
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800757a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	021a      	lsls	r2, r3, #8
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	431a      	orrs	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4313      	orrs	r3, r2
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	609a      	str	r2, [r3, #8]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4a2a      	ldr	r2, [pc, #168]	; (8007658 <TIM_CCxChannelCmd+0xb8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d020      	beq.n	80075f6 <TIM_CCxChannelCmd+0x56>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ba:	d01c      	beq.n	80075f6 <TIM_CCxChannelCmd+0x56>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4a27      	ldr	r2, [pc, #156]	; (800765c <TIM_CCxChannelCmd+0xbc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d018      	beq.n	80075f6 <TIM_CCxChannelCmd+0x56>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4a26      	ldr	r2, [pc, #152]	; (8007660 <TIM_CCxChannelCmd+0xc0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d014      	beq.n	80075f6 <TIM_CCxChannelCmd+0x56>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4a25      	ldr	r2, [pc, #148]	; (8007664 <TIM_CCxChannelCmd+0xc4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d010      	beq.n	80075f6 <TIM_CCxChannelCmd+0x56>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4a24      	ldr	r2, [pc, #144]	; (8007668 <TIM_CCxChannelCmd+0xc8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00c      	beq.n	80075f6 <TIM_CCxChannelCmd+0x56>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4a23      	ldr	r2, [pc, #140]	; (800766c <TIM_CCxChannelCmd+0xcc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d008      	beq.n	80075f6 <TIM_CCxChannelCmd+0x56>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4a22      	ldr	r2, [pc, #136]	; (8007670 <TIM_CCxChannelCmd+0xd0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d004      	beq.n	80075f6 <TIM_CCxChannelCmd+0x56>
 80075ec:	f641 5194 	movw	r1, #7572	; 0x1d94
 80075f0:	4820      	ldr	r0, [pc, #128]	; (8007674 <TIM_CCxChannelCmd+0xd4>)
 80075f2:	f7f9 fafe 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d010      	beq.n	800761e <TIM_CCxChannelCmd+0x7e>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d00d      	beq.n	800761e <TIM_CCxChannelCmd+0x7e>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b08      	cmp	r3, #8
 8007606:	d00a      	beq.n	800761e <TIM_CCxChannelCmd+0x7e>
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b0c      	cmp	r3, #12
 800760c:	d007      	beq.n	800761e <TIM_CCxChannelCmd+0x7e>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b3c      	cmp	r3, #60	; 0x3c
 8007612:	d004      	beq.n	800761e <TIM_CCxChannelCmd+0x7e>
 8007614:	f641 5195 	movw	r1, #7573	; 0x1d95
 8007618:	4816      	ldr	r0, [pc, #88]	; (8007674 <TIM_CCxChannelCmd+0xd4>)
 800761a:	f7f9 faea 	bl	8000bf2 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	2201      	movs	r2, #1
 8007626:	fa02 f303 	lsl.w	r3, r2, r3
 800762a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6a1a      	ldr	r2, [r3, #32]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	43db      	mvns	r3, r3
 8007634:	401a      	ands	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a1a      	ldr	r2, [r3, #32]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f003 031f 	and.w	r3, r3, #31
 8007644:	6879      	ldr	r1, [r7, #4]
 8007646:	fa01 f303 	lsl.w	r3, r1, r3
 800764a:	431a      	orrs	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	621a      	str	r2, [r3, #32]
}
 8007650:	bf00      	nop
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40010000 	.word	0x40010000
 800765c:	40000400 	.word	0x40000400
 8007660:	40000800 	.word	0x40000800
 8007664:	40000c00 	.word	0x40000c00
 8007668:	40014000 	.word	0x40014000
 800766c:	40014400 	.word	0x40014400
 8007670:	40014800 	.word	0x40014800
 8007674:	0800f448 	.word	0x0800f448

08007678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a55      	ldr	r2, [pc, #340]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d018      	beq.n	80076be <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007694:	d013      	beq.n	80076be <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a51      	ldr	r2, [pc, #324]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00e      	beq.n	80076be <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a4f      	ldr	r2, [pc, #316]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d009      	beq.n	80076be <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4e      	ldr	r2, [pc, #312]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80076b4:	f240 71b1 	movw	r1, #1969	; 0x7b1
 80076b8:	484c      	ldr	r0, [pc, #304]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80076ba:	f7f9 fa9a 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d020      	beq.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b10      	cmp	r3, #16
 80076cc:	d01c      	beq.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d018      	beq.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b30      	cmp	r3, #48	; 0x30
 80076dc:	d014      	beq.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d010      	beq.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b50      	cmp	r3, #80	; 0x50
 80076ec:	d00c      	beq.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b60      	cmp	r3, #96	; 0x60
 80076f4:	d008      	beq.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b70      	cmp	r3, #112	; 0x70
 80076fc:	d004      	beq.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076fe:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8007702:	483a      	ldr	r0, [pc, #232]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007704:	f7f9 fa75 	bl	8000bf2 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	d008      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d004      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007718:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800771c:	4833      	ldr	r0, [pc, #204]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800771e:	f7f9 fa68 	bl	8000bf2 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007728:	2b01      	cmp	r3, #1
 800772a:	d101      	bne.n	8007730 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800772c:	2302      	movs	r3, #2
 800772e:	e050      	b.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d018      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800777c:	d013      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00e      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d009      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d004      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a13      	ldr	r2, [pc, #76]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d10c      	bne.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	40010000 	.word	0x40010000
 80077e0:	40000400 	.word	0x40000400
 80077e4:	40000800 	.word	0x40000800
 80077e8:	40000c00 	.word	0x40000c00
 80077ec:	0800f480 	.word	0x0800f480
 80077f0:	40014000 	.word	0x40014000

080077f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800781c:	b084      	sub	sp, #16
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	f107 001c 	add.w	r0, r7, #28
 800782a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	2b01      	cmp	r3, #1
 8007832:	d122      	bne.n	800787a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800785c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800785e:	2b01      	cmp	r3, #1
 8007860:	d105      	bne.n	800786e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fbee 	bl	8009050 <USB_CoreReset>
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]
 8007878:	e01a      	b.n	80078b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fbe2 	bl	8009050 <USB_CoreReset>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	639a      	str	r2, [r3, #56]	; 0x38
 80078a2:	e005      	b.n	80078b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d10b      	bne.n	80078ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f043 0206 	orr.w	r2, r3, #6
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f043 0220 	orr.w	r2, r3, #32
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078da:	b004      	add	sp, #16
 80078dc:	4770      	bx	lr
	...

080078e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d165      	bne.n	80079c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4a41      	ldr	r2, [pc, #260]	; (80079fc <USB_SetTurnaroundTime+0x11c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d906      	bls.n	800790a <USB_SetTurnaroundTime+0x2a>
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4a40      	ldr	r2, [pc, #256]	; (8007a00 <USB_SetTurnaroundTime+0x120>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d202      	bcs.n	800790a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007904:	230f      	movs	r3, #15
 8007906:	617b      	str	r3, [r7, #20]
 8007908:	e062      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	4a3c      	ldr	r2, [pc, #240]	; (8007a00 <USB_SetTurnaroundTime+0x120>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d306      	bcc.n	8007920 <USB_SetTurnaroundTime+0x40>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4a3b      	ldr	r2, [pc, #236]	; (8007a04 <USB_SetTurnaroundTime+0x124>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d202      	bcs.n	8007920 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800791a:	230e      	movs	r3, #14
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	e057      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	4a38      	ldr	r2, [pc, #224]	; (8007a04 <USB_SetTurnaroundTime+0x124>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d306      	bcc.n	8007936 <USB_SetTurnaroundTime+0x56>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4a37      	ldr	r2, [pc, #220]	; (8007a08 <USB_SetTurnaroundTime+0x128>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d202      	bcs.n	8007936 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007930:	230d      	movs	r3, #13
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e04c      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4a33      	ldr	r2, [pc, #204]	; (8007a08 <USB_SetTurnaroundTime+0x128>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d306      	bcc.n	800794c <USB_SetTurnaroundTime+0x6c>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	4a32      	ldr	r2, [pc, #200]	; (8007a0c <USB_SetTurnaroundTime+0x12c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d802      	bhi.n	800794c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007946:	230c      	movs	r3, #12
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	e041      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4a2f      	ldr	r2, [pc, #188]	; (8007a0c <USB_SetTurnaroundTime+0x12c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d906      	bls.n	8007962 <USB_SetTurnaroundTime+0x82>
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	4a2e      	ldr	r2, [pc, #184]	; (8007a10 <USB_SetTurnaroundTime+0x130>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d802      	bhi.n	8007962 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800795c:	230b      	movs	r3, #11
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	e036      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	4a2a      	ldr	r2, [pc, #168]	; (8007a10 <USB_SetTurnaroundTime+0x130>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d906      	bls.n	8007978 <USB_SetTurnaroundTime+0x98>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	4a29      	ldr	r2, [pc, #164]	; (8007a14 <USB_SetTurnaroundTime+0x134>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d802      	bhi.n	8007978 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007972:	230a      	movs	r3, #10
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	e02b      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4a26      	ldr	r2, [pc, #152]	; (8007a14 <USB_SetTurnaroundTime+0x134>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d906      	bls.n	800798e <USB_SetTurnaroundTime+0xae>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4a25      	ldr	r2, [pc, #148]	; (8007a18 <USB_SetTurnaroundTime+0x138>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d202      	bcs.n	800798e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007988:	2309      	movs	r3, #9
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	e020      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4a21      	ldr	r2, [pc, #132]	; (8007a18 <USB_SetTurnaroundTime+0x138>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d306      	bcc.n	80079a4 <USB_SetTurnaroundTime+0xc4>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	4a20      	ldr	r2, [pc, #128]	; (8007a1c <USB_SetTurnaroundTime+0x13c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d802      	bhi.n	80079a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800799e:	2308      	movs	r3, #8
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	e015      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4a1d      	ldr	r2, [pc, #116]	; (8007a1c <USB_SetTurnaroundTime+0x13c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d906      	bls.n	80079ba <USB_SetTurnaroundTime+0xda>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4a1c      	ldr	r2, [pc, #112]	; (8007a20 <USB_SetTurnaroundTime+0x140>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d202      	bcs.n	80079ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80079b4:	2307      	movs	r3, #7
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e00a      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80079ba:	2306      	movs	r3, #6
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e007      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80079c6:	2309      	movs	r3, #9
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	e001      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80079cc:	2309      	movs	r3, #9
 80079ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	029b      	lsls	r3, r3, #10
 80079e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80079e8:	431a      	orrs	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	371c      	adds	r7, #28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	00d8acbf 	.word	0x00d8acbf
 8007a00:	00e4e1c0 	.word	0x00e4e1c0
 8007a04:	00f42400 	.word	0x00f42400
 8007a08:	01067380 	.word	0x01067380
 8007a0c:	011a499f 	.word	0x011a499f
 8007a10:	01312cff 	.word	0x01312cff
 8007a14:	014ca43f 	.word	0x014ca43f
 8007a18:	016e3600 	.word	0x016e3600
 8007a1c:	01a6ab1f 	.word	0x01a6ab1f
 8007a20:	01e84800 	.word	0x01e84800

08007a24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f043 0201 	orr.w	r2, r3, #1
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f023 0201 	bic.w	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d115      	bne.n	8007ab6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a96:	2001      	movs	r0, #1
 8007a98:	f7f9 fffc 	bl	8001a94 <HAL_Delay>
      ms++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fa45 	bl	8008f32 <USB_GetMode>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d01e      	beq.n	8007aec <USB_SetCurrentMode+0x84>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2b31      	cmp	r3, #49	; 0x31
 8007ab2:	d9f0      	bls.n	8007a96 <USB_SetCurrentMode+0x2e>
 8007ab4:	e01a      	b.n	8007aec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ab6:	78fb      	ldrb	r3, [r7, #3]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d115      	bne.n	8007ae8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ac8:	2001      	movs	r0, #1
 8007aca:	f7f9 ffe3 	bl	8001a94 <HAL_Delay>
      ms++;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fa2c 	bl	8008f32 <USB_GetMode>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <USB_SetCurrentMode+0x84>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b31      	cmp	r3, #49	; 0x31
 8007ae4:	d9f0      	bls.n	8007ac8 <USB_SetCurrentMode+0x60>
 8007ae6:	e001      	b.n	8007aec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e005      	b.n	8007af8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b32      	cmp	r3, #50	; 0x32
 8007af0:	d101      	bne.n	8007af6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e000      	b.n	8007af8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b00:	b084      	sub	sp, #16
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b086      	sub	sp, #24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	613b      	str	r3, [r7, #16]
 8007b1e:	e009      	b.n	8007b34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	3340      	adds	r3, #64	; 0x40
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	3301      	adds	r3, #1
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b0e      	cmp	r3, #14
 8007b38:	d9f2      	bls.n	8007b20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11c      	bne.n	8007b7a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b4e:	f043 0302 	orr.w	r3, r3, #2
 8007b52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	639a      	str	r2, [r3, #56]	; 0x38
 8007b78:	e00b      	b.n	8007b92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b98:	461a      	mov	r2, r3
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bac:	461a      	mov	r2, r3
 8007bae:	680b      	ldr	r3, [r1, #0]
 8007bb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d10c      	bne.n	8007bd2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d104      	bne.n	8007bc8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f965 	bl	8007e90 <USB_SetDevSpeed>
 8007bc6:	e008      	b.n	8007bda <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bc8:	2101      	movs	r1, #1
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f960 	bl	8007e90 <USB_SetDevSpeed>
 8007bd0:	e003      	b.n	8007bda <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bd2:	2103      	movs	r1, #3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f95b 	bl	8007e90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bda:	2110      	movs	r1, #16
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f8f3 	bl	8007dc8 <USB_FlushTxFifo>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f91f 	bl	8007e30 <USB_FlushRxFifo>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c02:	461a      	mov	r2, r3
 8007c04:	2300      	movs	r3, #0
 8007c06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2300      	movs	r3, #0
 8007c12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	e043      	b.n	8007cae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c3c:	d118      	bne.n	8007c70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	461a      	mov	r2, r3
 8007c52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	e013      	b.n	8007c82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c66:	461a      	mov	r2, r3
 8007c68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	e008      	b.n	8007c82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8e:	461a      	mov	r2, r3
 8007c90:	2300      	movs	r3, #0
 8007c92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	3301      	adds	r3, #1
 8007cac:	613b      	str	r3, [r7, #16]
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d3b7      	bcc.n	8007c26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
 8007cba:	e043      	b.n	8007d44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cd2:	d118      	bne.n	8007d06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e013      	b.n	8007d18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	e008      	b.n	8007d18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d12:	461a      	mov	r2, r3
 8007d14:	2300      	movs	r3, #0
 8007d16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d24:	461a      	mov	r2, r3
 8007d26:	2300      	movs	r3, #0
 8007d28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d36:	461a      	mov	r2, r3
 8007d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	3301      	adds	r3, #1
 8007d42:	613b      	str	r3, [r7, #16]
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d3b7      	bcc.n	8007cbc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d105      	bne.n	8007d80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	f043 0210 	orr.w	r2, r3, #16
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699a      	ldr	r2, [r3, #24]
 8007d84:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <USB_DevInit+0x2c4>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	f043 0208 	orr.w	r2, r3, #8
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d107      	bne.n	8007db4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dac:	f043 0304 	orr.w	r3, r3, #4
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dc0:	b004      	add	sp, #16
 8007dc2:	4770      	bx	lr
 8007dc4:	803c3800 	.word	0x803c3800

08007dc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <USB_FlushTxFifo+0x64>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d901      	bls.n	8007de8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e01b      	b.n	8007e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	daf2      	bge.n	8007dd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	019b      	lsls	r3, r3, #6
 8007df8:	f043 0220 	orr.w	r2, r3, #32
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4a08      	ldr	r2, [pc, #32]	; (8007e2c <USB_FlushTxFifo+0x64>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d901      	bls.n	8007e12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e006      	b.n	8007e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d0f0      	beq.n	8007e00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	00030d40 	.word	0x00030d40

08007e30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a11      	ldr	r2, [pc, #68]	; (8007e8c <USB_FlushRxFifo+0x5c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d901      	bls.n	8007e4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e018      	b.n	8007e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	daf2      	bge.n	8007e3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2210      	movs	r2, #16
 8007e5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <USB_FlushRxFifo+0x5c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d901      	bls.n	8007e72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e006      	b.n	8007e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b10      	cmp	r3, #16
 8007e7c:	d0f0      	beq.n	8007e60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	00030d40 	.word	0x00030d40

08007e90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	68f9      	ldr	r1, [r7, #12]
 8007eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b087      	sub	sp, #28
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 0306 	and.w	r3, r3, #6
 8007eda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	75fb      	strb	r3, [r7, #23]
 8007ee6:	e00a      	b.n	8007efe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d002      	beq.n	8007ef4 <USB_GetDevSpeed+0x32>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b06      	cmp	r3, #6
 8007ef2:	d102      	bne.n	8007efa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	75fb      	strb	r3, [r7, #23]
 8007ef8:	e001      	b.n	8007efe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007efa:	230f      	movs	r3, #15
 8007efc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d13a      	bne.n	8007f9e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	f003 030f 	and.w	r3, r3, #15
 8007f38:	2101      	movs	r1, #1
 8007f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	68f9      	ldr	r1, [r7, #12]
 8007f42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f46:	4313      	orrs	r3, r2
 8007f48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d155      	bne.n	800800c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	791b      	ldrb	r3, [r3, #4]
 8007f7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	059b      	lsls	r3, r3, #22
 8007f82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f84:	4313      	orrs	r3, r2
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	e036      	b.n	800800c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa4:	69da      	ldr	r2, [r3, #28]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	2101      	movs	r1, #1
 8007fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb4:	041b      	lsls	r3, r3, #16
 8007fb6:	68f9      	ldr	r1, [r7, #12]
 8007fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d11a      	bne.n	800800c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	791b      	ldrb	r3, [r3, #4]
 8007ff0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ff2:	430b      	orrs	r3, r1
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800800a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d161      	bne.n	80080fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800804a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800804e:	d11f      	bne.n	8008090 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	440a      	add	r2, r1
 8008066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800806e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	440a      	add	r2, r1
 8008086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800808e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f003 030f 	and.w	r3, r3, #15
 80080a0:	2101      	movs	r1, #1
 80080a2:	fa01 f303 	lsl.w	r3, r1, r3
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	43db      	mvns	r3, r3
 80080aa:	68f9      	ldr	r1, [r7, #12]
 80080ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080b0:	4013      	ands	r3, r2
 80080b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ba:	69da      	ldr	r2, [r3, #28]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	2101      	movs	r1, #1
 80080c6:	fa01 f303 	lsl.w	r3, r1, r3
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	43db      	mvns	r3, r3
 80080ce:	68f9      	ldr	r1, [r7, #12]
 80080d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080d4:	4013      	ands	r3, r2
 80080d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	0159      	lsls	r1, r3, #5
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	440b      	add	r3, r1
 80080ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f2:	4619      	mov	r1, r3
 80080f4:	4b35      	ldr	r3, [pc, #212]	; (80081cc <USB_DeactivateEndpoint+0x1b0>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	600b      	str	r3, [r1, #0]
 80080fa:	e060      	b.n	80081be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800810e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008112:	d11f      	bne.n	8008154 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	0151      	lsls	r1, r2, #5
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	440a      	add	r2, r1
 800812a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800812e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008132:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	0151      	lsls	r1, r2, #5
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	440a      	add	r2, r1
 800814a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800814e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008152:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800815a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	f003 030f 	and.w	r3, r3, #15
 8008164:	2101      	movs	r1, #1
 8008166:	fa01 f303 	lsl.w	r3, r1, r3
 800816a:	041b      	lsls	r3, r3, #16
 800816c:	43db      	mvns	r3, r3
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008174:	4013      	ands	r3, r2
 8008176:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	69da      	ldr	r2, [r3, #28]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	f003 030f 	and.w	r3, r3, #15
 8008188:	2101      	movs	r1, #1
 800818a:	fa01 f303 	lsl.w	r3, r1, r3
 800818e:	041b      	lsls	r3, r3, #16
 8008190:	43db      	mvns	r3, r3
 8008192:	68f9      	ldr	r1, [r7, #12]
 8008194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008198:	4013      	ands	r3, r2
 800819a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	0159      	lsls	r1, r3, #5
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	440b      	add	r3, r1
 80081b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b6:	4619      	mov	r1, r3
 80081b8:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <USB_DeactivateEndpoint+0x1b4>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	ec337800 	.word	0xec337800
 80081d0:	eff37800 	.word	0xeff37800

080081d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af02      	add	r7, sp, #8
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	785b      	ldrb	r3, [r3, #1]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	f040 815c 	bne.w	80084ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d132      	bne.n	8008264 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	4413      	add	r3, r2
 8008206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	0151      	lsls	r1, r2, #5
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	440a      	add	r2, r1
 8008214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008218:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800821c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008220:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	0151      	lsls	r1, r2, #5
 8008234:	69fa      	ldr	r2, [r7, #28]
 8008236:	440a      	add	r2, r1
 8008238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800823c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	0151      	lsls	r1, r2, #5
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	440a      	add	r2, r1
 8008258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800825c:	0cdb      	lsrs	r3, r3, #19
 800825e:	04db      	lsls	r3, r3, #19
 8008260:	6113      	str	r3, [r2, #16]
 8008262:	e074      	b.n	800834e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	0151      	lsls	r1, r2, #5
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	440a      	add	r2, r1
 800827a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800827e:	0cdb      	lsrs	r3, r3, #19
 8008280:	04db      	lsls	r3, r3, #19
 8008282:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	0151      	lsls	r1, r2, #5
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	440a      	add	r2, r1
 800829a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800829e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6999      	ldr	r1, [r3, #24]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	440b      	add	r3, r1
 80082c0:	1e59      	subs	r1, r3, #1
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80082ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80082cc:	4b9d      	ldr	r3, [pc, #628]	; (8008544 <USB_EPStartXfer+0x370>)
 80082ce:	400b      	ands	r3, r1
 80082d0:	69b9      	ldr	r1, [r7, #24]
 80082d2:	0148      	lsls	r0, r1, #5
 80082d4:	69f9      	ldr	r1, [r7, #28]
 80082d6:	4401      	add	r1, r0
 80082d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80082dc:	4313      	orrs	r3, r2
 80082de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ec:	691a      	ldr	r2, [r3, #16]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082f6:	69b9      	ldr	r1, [r7, #24]
 80082f8:	0148      	lsls	r0, r1, #5
 80082fa:	69f9      	ldr	r1, [r7, #28]
 80082fc:	4401      	add	r1, r0
 80082fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008302:	4313      	orrs	r3, r2
 8008304:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	791b      	ldrb	r3, [r3, #4]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d11f      	bne.n	800834e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	0151      	lsls	r1, r2, #5
 8008320:	69fa      	ldr	r2, [r7, #28]
 8008322:	440a      	add	r2, r1
 8008324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008328:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800832c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	0151      	lsls	r1, r2, #5
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	440a      	add	r2, r1
 8008344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008348:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800834c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d14b      	bne.n	80083ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d009      	beq.n	8008370 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008368:	461a      	mov	r2, r3
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	791b      	ldrb	r3, [r3, #4]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d128      	bne.n	80083ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d110      	bne.n	80083aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	69fa      	ldr	r2, [r7, #28]
 800839c:	440a      	add	r2, r1
 800839e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	e00f      	b.n	80083ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	0151      	lsls	r1, r2, #5
 80083dc:	69fa      	ldr	r2, [r7, #28]
 80083de:	440a      	add	r2, r1
 80083e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	e133      	b.n	8008654 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	440a      	add	r2, r1
 8008402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800840a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	791b      	ldrb	r3, [r3, #4]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d015      	beq.n	8008440 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 811b 	beq.w	8008654 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	2101      	movs	r1, #1
 8008430:	fa01 f303 	lsl.w	r3, r1, r3
 8008434:	69f9      	ldr	r1, [r7, #28]
 8008436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800843a:	4313      	orrs	r3, r2
 800843c:	634b      	str	r3, [r1, #52]	; 0x34
 800843e:	e109      	b.n	8008654 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844c:	2b00      	cmp	r3, #0
 800844e:	d110      	bne.n	8008472 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	69ba      	ldr	r2, [r7, #24]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	440a      	add	r2, r1
 8008466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800846a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	e00f      	b.n	8008492 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	0151      	lsls	r1, r2, #5
 8008484:	69fa      	ldr	r2, [r7, #28]
 8008486:	440a      	add	r2, r1
 8008488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800848c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008490:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	6919      	ldr	r1, [r3, #16]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	781a      	ldrb	r2, [r3, #0]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	b298      	uxth	r0, r3
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4603      	mov	r3, r0
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fade 	bl	8008a68 <USB_WritePacket>
 80084ac:	e0d2      	b.n	8008654 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c8:	0cdb      	lsrs	r3, r3, #19
 80084ca:	04db      	lsls	r3, r3, #19
 80084cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	0151      	lsls	r1, r2, #5
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	440a      	add	r2, r1
 80084e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d126      	bne.n	8008548 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008510:	69b9      	ldr	r1, [r7, #24]
 8008512:	0148      	lsls	r0, r1, #5
 8008514:	69f9      	ldr	r1, [r7, #28]
 8008516:	4401      	add	r1, r0
 8008518:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800851c:	4313      	orrs	r3, r2
 800851e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	440a      	add	r2, r1
 8008536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800853a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800853e:	6113      	str	r3, [r2, #16]
 8008540:	e03a      	b.n	80085b8 <USB_EPStartXfer+0x3e4>
 8008542:	bf00      	nop
 8008544:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	699a      	ldr	r2, [r3, #24]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	4413      	add	r3, r2
 8008552:	1e5a      	subs	r2, r3, #1
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	fbb2 f3f3 	udiv	r3, r2, r3
 800855c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	8afa      	ldrh	r2, [r7, #22]
 8008564:	fb03 f202 	mul.w	r2, r3, r2
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	8afb      	ldrh	r3, [r7, #22]
 800857c:	04d9      	lsls	r1, r3, #19
 800857e:	4b38      	ldr	r3, [pc, #224]	; (8008660 <USB_EPStartXfer+0x48c>)
 8008580:	400b      	ands	r3, r1
 8008582:	69b9      	ldr	r1, [r7, #24]
 8008584:	0148      	lsls	r0, r1, #5
 8008586:	69f9      	ldr	r1, [r7, #28]
 8008588:	4401      	add	r1, r0
 800858a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800858e:	4313      	orrs	r3, r2
 8008590:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085a8:	69b9      	ldr	r1, [r7, #24]
 80085aa:	0148      	lsls	r0, r1, #5
 80085ac:	69f9      	ldr	r1, [r7, #28]
 80085ae:	4401      	add	r1, r0
 80085b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085b4:	4313      	orrs	r3, r2
 80085b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d10d      	bne.n	80085da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d009      	beq.n	80085da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	6919      	ldr	r1, [r3, #16]
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d6:	460a      	mov	r2, r1
 80085d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	791b      	ldrb	r3, [r3, #4]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d128      	bne.n	8008634 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d110      	bne.n	8008614 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	0151      	lsls	r1, r2, #5
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	440a      	add	r2, r1
 8008608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800860c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	e00f      	b.n	8008634 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	0151      	lsls	r1, r2, #5
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	440a      	add	r2, r1
 800862a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800862e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008632:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	440a      	add	r2, r1
 800864a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800864e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3720      	adds	r7, #32
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	1ff80000 	.word	0x1ff80000

08008664 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	4613      	mov	r3, r2
 8008670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	785b      	ldrb	r3, [r3, #1]
 8008680:	2b01      	cmp	r3, #1
 8008682:	f040 80ce 	bne.w	8008822 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d132      	bne.n	80086f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	0151      	lsls	r1, r2, #5
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	440a      	add	r2, r1
 80086c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	0151      	lsls	r1, r2, #5
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	440a      	add	r2, r1
 80086e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ec:	0cdb      	lsrs	r3, r3, #19
 80086ee:	04db      	lsls	r3, r3, #19
 80086f0:	6113      	str	r3, [r2, #16]
 80086f2:	e04e      	b.n	8008792 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	0151      	lsls	r1, r2, #5
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	440a      	add	r2, r1
 800870a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800870e:	0cdb      	lsrs	r3, r3, #19
 8008710:	04db      	lsls	r3, r3, #19
 8008712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	440a      	add	r2, r1
 800872a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800872e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008732:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008736:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	699a      	ldr	r2, [r3, #24]
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	429a      	cmp	r2, r3
 8008742:	d903      	bls.n	800874c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	0151      	lsls	r1, r2, #5
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	440a      	add	r2, r1
 8008762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800876a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008778:	691a      	ldr	r2, [r3, #16]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008782:	6939      	ldr	r1, [r7, #16]
 8008784:	0148      	lsls	r0, r1, #5
 8008786:	6979      	ldr	r1, [r7, #20]
 8008788:	4401      	add	r1, r0
 800878a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800878e:	4313      	orrs	r3, r2
 8008790:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d11e      	bne.n	80087d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d009      	beq.n	80087b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ac:	461a      	mov	r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	0151      	lsls	r1, r2, #5
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	440a      	add	r2, r1
 80087ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	e097      	b.n	8008906 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	0151      	lsls	r1, r2, #5
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	440a      	add	r2, r1
 80087ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 8083 	beq.w	8008906 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	2101      	movs	r1, #1
 8008812:	fa01 f303 	lsl.w	r3, r1, r3
 8008816:	6979      	ldr	r1, [r7, #20]
 8008818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800881c:	4313      	orrs	r3, r2
 800881e:	634b      	str	r3, [r1, #52]	; 0x34
 8008820:	e071      	b.n	8008906 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	4413      	add	r3, r2
 800882a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	0151      	lsls	r1, r2, #5
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	440a      	add	r2, r1
 8008838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800883c:	0cdb      	lsrs	r3, r3, #19
 800883e:	04db      	lsls	r3, r3, #19
 8008840:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	0151      	lsls	r1, r2, #5
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	440a      	add	r2, r1
 8008858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800885c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008864:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	440a      	add	r2, r1
 8008894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800889c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088aa:	691a      	ldr	r2, [r3, #16]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088b4:	6939      	ldr	r1, [r7, #16]
 80088b6:	0148      	lsls	r0, r1, #5
 80088b8:	6979      	ldr	r1, [r7, #20]
 80088ba:	4401      	add	r1, r0
 80088bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088c0:	4313      	orrs	r3, r2
 80088c2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d10d      	bne.n	80088e6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	6919      	ldr	r1, [r3, #16]
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e2:	460a      	mov	r2, r1
 80088e4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	0151      	lsls	r1, r2, #5
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	440a      	add	r2, r1
 80088fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008900:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008904:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	371c      	adds	r7, #28
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	785b      	ldrb	r3, [r3, #1]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d14a      	bne.n	80089c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800894a:	f040 8086 	bne.w	8008a5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	7812      	ldrb	r2, [r2, #0]
 8008962:	0151      	lsls	r1, r2, #5
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	440a      	add	r2, r1
 8008968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800896c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008970:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	7812      	ldrb	r2, [r2, #0]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008994:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3301      	adds	r3, #1
 800899a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f242 7210 	movw	r2, #10000	; 0x2710
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d902      	bls.n	80089ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	75fb      	strb	r3, [r7, #23]
          break;
 80089aa:	e056      	b.n	8008a5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089c4:	d0e7      	beq.n	8008996 <USB_EPStopXfer+0x82>
 80089c6:	e048      	b.n	8008a5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089e0:	d13b      	bne.n	8008a5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	7812      	ldrb	r2, [r2, #0]
 80089f6:	0151      	lsls	r1, r2, #5
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	440a      	add	r2, r1
 80089fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	0151      	lsls	r1, r2, #5
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	440a      	add	r2, r1
 8008a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f242 7210 	movw	r2, #10000	; 0x2710
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d902      	bls.n	8008a40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a3e:	e00c      	b.n	8008a5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a58:	d0e7      	beq.n	8008a2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	371c      	adds	r7, #28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b089      	sub	sp, #36	; 0x24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4611      	mov	r1, r2
 8008a74:	461a      	mov	r2, r3
 8008a76:	460b      	mov	r3, r1
 8008a78:	71fb      	strb	r3, [r7, #7]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d123      	bne.n	8008ad6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a8e:	88bb      	ldrh	r3, [r7, #4]
 8008a90:	3303      	adds	r3, #3
 8008a92:	089b      	lsrs	r3, r3, #2
 8008a94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a96:	2300      	movs	r3, #0
 8008a98:	61bb      	str	r3, [r7, #24]
 8008a9a:	e018      	b.n	8008ace <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a9c:	79fb      	ldrb	r3, [r7, #7]
 8008a9e:	031a      	lsls	r2, r3, #12
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	3301      	adds	r3, #1
 8008acc:	61bb      	str	r3, [r7, #24]
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d3e2      	bcc.n	8008a9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3724      	adds	r7, #36	; 0x24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b08b      	sub	sp, #44	; 0x2c
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	4613      	mov	r3, r2
 8008af0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	089b      	lsrs	r3, r3, #2
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	623b      	str	r3, [r7, #32]
 8008b0e:	e014      	b.n	8008b3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	3301      	adds	r3, #1
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	3301      	adds	r3, #1
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	3301      	adds	r3, #1
 8008b32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	3301      	adds	r3, #1
 8008b38:	623b      	str	r3, [r7, #32]
 8008b3a:	6a3a      	ldr	r2, [r7, #32]
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d3e6      	bcc.n	8008b10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b42:	8bfb      	ldrh	r3, [r7, #30]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d01e      	beq.n	8008b86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b52:	461a      	mov	r2, r3
 8008b54:	f107 0310 	add.w	r3, r7, #16
 8008b58:	6812      	ldr	r2, [r2, #0]
 8008b5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	fa22 f303 	lsr.w	r3, r2, r3
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	701a      	strb	r2, [r3, #0]
      i++;
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	3301      	adds	r3, #1
 8008b72:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	3301      	adds	r3, #1
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b7a:	8bfb      	ldrh	r3, [r7, #30]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b80:	8bfb      	ldrh	r3, [r7, #30]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1ea      	bne.n	8008b5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	372c      	adds	r7, #44	; 0x2c
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	785b      	ldrb	r3, [r3, #1]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d12c      	bne.n	8008c0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	db12      	blt.n	8008be8 <USB_EPSetStall+0x54>
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00f      	beq.n	8008be8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008be6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	0151      	lsls	r1, r2, #5
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	e02b      	b.n	8008c62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	db12      	blt.n	8008c42 <USB_EPSetStall+0xae>
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00f      	beq.n	8008c42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	0151      	lsls	r1, r2, #5
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	440a      	add	r2, r1
 8008c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	785b      	ldrb	r3, [r3, #1]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d128      	bne.n	8008cde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	0151      	lsls	r1, r2, #5
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	440a      	add	r2, r1
 8008ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008caa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	791b      	ldrb	r3, [r3, #4]
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	d003      	beq.n	8008cbc <USB_EPClearStall+0x4c>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	791b      	ldrb	r3, [r3, #4]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d138      	bne.n	8008d2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	0151      	lsls	r1, r2, #5
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	440a      	add	r2, r1
 8008cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	e027      	b.n	8008d2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	791b      	ldrb	r3, [r3, #4]
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d003      	beq.n	8008d0e <USB_EPClearStall+0x9e>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	791b      	ldrb	r3, [r3, #4]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d10f      	bne.n	8008d2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	0151      	lsls	r1, r2, #5
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	440a      	add	r2, r1
 8008d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	78fb      	ldrb	r3, [r7, #3]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d70:	68f9      	ldr	r1, [r7, #12]
 8008d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d76:	4313      	orrs	r3, r2
 8008d78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008da2:	f023 0303 	bic.w	r3, r3, #3
 8008da6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008db6:	f023 0302 	bic.w	r3, r3, #2
 8008dba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008de4:	f023 0303 	bic.w	r3, r3, #3
 8008de8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008df8:	f043 0302 	orr.w	r3, r3, #2
 8008dfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4013      	ands	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008e24:	68fb      	ldr	r3, [r7, #12]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b085      	sub	sp, #20
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	4013      	ands	r3, r2
 8008e54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	0c1b      	lsrs	r3, r3, #16
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	4013      	ands	r3, r2
 8008e88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	b29b      	uxth	r3, r3
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b087      	sub	sp, #28
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	fa22 f303 	lsr.w	r3, r2, r3
 8008f06:	01db      	lsls	r3, r3, #7
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	4013      	ands	r3, r2
 8008f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f24:	68bb      	ldr	r3, [r7, #8]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b085      	sub	sp, #20
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f6c:	f023 0307 	bic.w	r3, r3, #7
 8008f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	333c      	adds	r3, #60	; 0x3c
 8008faa:	3304      	adds	r3, #4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	4a26      	ldr	r2, [pc, #152]	; (800904c <USB_EP0_OutStart+0xb8>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d90a      	bls.n	8008fce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fc8:	d101      	bne.n	8008fce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e037      	b.n	800903e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ffc:	f043 0318 	orr.w	r3, r3, #24
 8009000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009010:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009014:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d10f      	bne.n	800903c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009022:	461a      	mov	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009036:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800903a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	371c      	adds	r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	4f54300a 	.word	0x4f54300a

08009050 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009058:	2300      	movs	r3, #0
 800905a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3301      	adds	r3, #1
 8009060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4a13      	ldr	r2, [pc, #76]	; (80090b4 <USB_CoreReset+0x64>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d901      	bls.n	800906e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e01b      	b.n	80090a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	daf2      	bge.n	800905c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	f043 0201 	orr.w	r2, r3, #1
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3301      	adds	r3, #1
 800908a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4a09      	ldr	r2, [pc, #36]	; (80090b4 <USB_CoreReset+0x64>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d901      	bls.n	8009098 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e006      	b.n	80090a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d0f0      	beq.n	8009086 <USB_CoreReset+0x36>

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	00030d40 	.word	0x00030d40

080090b8 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 80090c0:	4a18      	ldr	r2, [pc, #96]	; (8009124 <si5351_Init+0x6c>)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 80090c6:	21ff      	movs	r1, #255	; 0xff
 80090c8:	2003      	movs	r0, #3
 80090ca:	f000 fa0d 	bl	80094e8 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 80090ce:	2180      	movs	r1, #128	; 0x80
 80090d0:	2010      	movs	r0, #16
 80090d2:	f000 fa09 	bl	80094e8 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 80090d6:	2180      	movs	r1, #128	; 0x80
 80090d8:	2011      	movs	r0, #17
 80090da:	f000 fa05 	bl	80094e8 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 80090de:	2180      	movs	r1, #128	; 0x80
 80090e0:	2012      	movs	r0, #18
 80090e2:	f000 fa01 	bl	80094e8 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 80090e6:	2180      	movs	r1, #128	; 0x80
 80090e8:	2013      	movs	r0, #19
 80090ea:	f000 f9fd 	bl	80094e8 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 80090ee:	2180      	movs	r1, #128	; 0x80
 80090f0:	2014      	movs	r0, #20
 80090f2:	f000 f9f9 	bl	80094e8 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 80090f6:	2180      	movs	r1, #128	; 0x80
 80090f8:	2015      	movs	r0, #21
 80090fa:	f000 f9f5 	bl	80094e8 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 80090fe:	2180      	movs	r1, #128	; 0x80
 8009100:	2016      	movs	r0, #22
 8009102:	f000 f9f1 	bl	80094e8 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 8009106:	2180      	movs	r1, #128	; 0x80
 8009108:	2017      	movs	r0, #23
 800910a:	f000 f9ed 	bl	80094e8 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 800910e:	23c0      	movs	r3, #192	; 0xc0
 8009110:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	4619      	mov	r1, r3
 8009116:	20b7      	movs	r0, #183	; 0xb7
 8009118:	f000 f9e6 	bl	80094e8 <si5351_write>
}
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	200003b0 	.word	0x200003b0

08009128 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 8009128:	b580      	push	{r7, lr}
 800912a:	b08c      	sub	sp, #48	; 0x30
 800912c:	af02      	add	r7, sp, #8
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 8009146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009148:	01da      	lsls	r2, r3, #7
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	01d9      	lsls	r1, r3, #7
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	fb91 f3f3 	sdiv	r3, r1, r3
 8009154:	4413      	add	r3, r2
 8009156:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800915a:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	01db      	lsls	r3, r3, #7
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	fb93 f2f2 	sdiv	r2, r3, r2
 8009166:	69f9      	ldr	r1, [r7, #28]
 8009168:	fb01 f202 	mul.w	r2, r1, r2
 800916c:	1a9b      	subs	r3, r3, r2
 800916e:	617b      	str	r3, [r7, #20]
    P3 = denom;
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <si5351_SetupPLL+0x56>
 800917a:	231a      	movs	r3, #26
 800917c:	e000      	b.n	8009180 <si5351_SetupPLL+0x58>
 800917e:	2322      	movs	r3, #34	; 0x22
 8009180:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 8009182:	7bf8      	ldrb	r0, [r7, #15]
 8009184:	2300      	movs	r3, #0
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	2300      	movs	r3, #0
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	69b9      	ldr	r1, [r7, #24]
 8009192:	f000 f9d1 	bl	8009538 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 8009196:	21a0      	movs	r1, #160	; 0xa0
 8009198:	20b1      	movs	r0, #177	; 0xb1
 800919a:	f000 f9a5 	bl	80094e8 <si5351_write>
}
 800919e:	bf00      	nop
 80091a0:	3728      	adds	r7, #40	; 0x28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b08c      	sub	sp, #48	; 0x30
 80091aa:	af02      	add	r7, sp, #8
 80091ac:	603b      	str	r3, [r7, #0]
 80091ae:	4603      	mov	r3, r0
 80091b0:	71fb      	strb	r3, [r7, #7]
 80091b2:	460b      	mov	r3, r1
 80091b4:	71bb      	strb	r3, [r7, #6]
 80091b6:	4613      	mov	r3, r2
 80091b8:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d901      	bls.n	80091dc <si5351_SetupOutput+0x36>
        return 1;
 80091d8:	2301      	movs	r3, #1
 80091da:	e08d      	b.n	80092f8 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10a      	bne.n	80091fa <si5351_SetupOutput+0x54>
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2b07      	cmp	r3, #7
 80091e8:	dd05      	ble.n	80091f6 <si5351_SetupOutput+0x50>
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2b08      	cmp	r3, #8
 80091ee:	d104      	bne.n	80091fa <si5351_SetupOutput+0x54>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 80091f6:	2302      	movs	r3, #2
 80091f8:	e07e      	b.n	80092f8 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d109      	bne.n	8009214 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	623b      	str	r3, [r7, #32]
        P2 = 0;
 8009204:	2300      	movs	r3, #0
 8009206:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 8009208:	2301      	movs	r3, #1
 800920a:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 800920c:	2303      	movs	r3, #3
 800920e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009212:	e016      	b.n	8009242 <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	01da      	lsls	r2, r3, #7
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	01d9      	lsls	r1, r3, #7
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	fb91 f3f3 	sdiv	r3, r1, r3
 8009222:	4413      	add	r3, r2
 8009224:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8009228:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	01db      	lsls	r3, r3, #7
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	fb93 f2f2 	sdiv	r2, r3, r2
 8009234:	68b9      	ldr	r1, [r7, #8]
 8009236:	fb01 f202 	mul.w	r2, r1, r2
 800923a:	1a9b      	subs	r3, r3, r2
 800923c:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	757b      	strb	r3, [r7, #21]
    switch (output) {
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	2b02      	cmp	r3, #2
 8009252:	d014      	beq.n	800927e <si5351_SetupOutput+0xd8>
 8009254:	2b02      	cmp	r3, #2
 8009256:	dc19      	bgt.n	800928c <si5351_SetupOutput+0xe6>
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <si5351_SetupOutput+0xbc>
 800925c:	2b01      	cmp	r3, #1
 800925e:	d007      	beq.n	8009270 <si5351_SetupOutput+0xca>
 8009260:	e014      	b.n	800928c <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 8009262:	232a      	movs	r3, #42	; 0x2a
 8009264:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 8009266:	23a5      	movs	r3, #165	; 0xa5
 8009268:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800926a:	2310      	movs	r3, #16
 800926c:	757b      	strb	r3, [r7, #21]
        break;
 800926e:	e00d      	b.n	800928c <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 8009270:	2332      	movs	r3, #50	; 0x32
 8009272:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 8009274:	23a6      	movs	r3, #166	; 0xa6
 8009276:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 8009278:	2311      	movs	r3, #17
 800927a:	757b      	strb	r3, [r7, #21]
        break;
 800927c:	e006      	b.n	800928c <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800927e:	233a      	movs	r3, #58	; 0x3a
 8009280:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 8009282:	23a7      	movs	r3, #167	; 0xa7
 8009284:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 8009286:	2312      	movs	r3, #18
 8009288:	757b      	strb	r3, [r7, #21]
        break;
 800928a:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 800928c:	797b      	ldrb	r3, [r7, #5]
 800928e:	f043 030c 	orr.w	r3, r3, #12
 8009292:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 8009294:	79bb      	ldrb	r3, [r7, #6]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d103      	bne.n	80092a2 <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 800929a:	7d3b      	ldrb	r3, [r7, #20]
 800929c:	f043 0320 	orr.w	r3, r3, #32
 80092a0:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d009      	beq.n	80092be <si5351_SetupOutput+0x118>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <si5351_SetupOutput+0x110>
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	2b04      	cmp	r3, #4
 80092b4:	d103      	bne.n	80092be <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 80092b6:	7d3b      	ldrb	r3, [r7, #20]
 80092b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092bc:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 80092be:	7d3a      	ldrb	r2, [r7, #20]
 80092c0:	7d7b      	ldrb	r3, [r7, #21]
 80092c2:	4611      	mov	r1, r2
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 f90f 	bl	80094e8 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	7c1b      	ldrb	r3, [r3, #16]
 80092ce:	7df8      	ldrb	r0, [r7, #23]
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	6a39      	ldr	r1, [r7, #32]
 80092de:	f000 f92b 	bl	8009538 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 80092e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80092e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	7dbb      	ldrb	r3, [r7, #22]
 80092ee:	4611      	mov	r1, r2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 f8f9 	bl	80094e8 <si5351_write>

    return 0;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3728      	adds	r7, #40	; 0x28
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 8009300:	b480      	push	{r7}
 8009302:	b08f      	sub	sp, #60	; 0x3c
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8009312:	da03      	bge.n	800931c <si5351_Calc+0x1c>
 8009314:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	e005      	b.n	8009328 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4a4f      	ldr	r2, [pc, #316]	; (800945c <si5351_Calc+0x15c>)
 8009320:	4293      	cmp	r3, r2
 8009322:	dd01      	ble.n	8009328 <si5351_Calc+0x28>
 8009324:	4b4d      	ldr	r3, [pc, #308]	; (800945c <si5351_Calc+0x15c>)
 8009326:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4a4b      	ldr	r2, [pc, #300]	; (8009460 <si5351_Calc+0x160>)
 8009332:	4293      	cmp	r3, r2
 8009334:	dc06      	bgt.n	8009344 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	019b      	lsls	r3, r3, #6
 800933a:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2206      	movs	r2, #6
 8009340:	741a      	strb	r2, [r3, #16]
 8009342:	e002      	b.n	800934a <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	4a45      	ldr	r2, [pc, #276]	; (8009464 <si5351_Calc+0x164>)
 800934e:	fb82 1203 	smull	r1, r2, r2, r3
 8009352:	1492      	asrs	r2, r2, #18
 8009354:	17db      	asrs	r3, r3, #31
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	4a43      	ldr	r2, [pc, #268]	; (8009468 <si5351_Calc+0x168>)
 800935a:	6812      	ldr	r2, [r2, #0]
 800935c:	fb02 f303 	mul.w	r3, r2, r3
 8009360:	4a42      	ldr	r2, [pc, #264]	; (800946c <si5351_Calc+0x16c>)
 8009362:	fb82 1203 	smull	r1, r2, r2, r3
 8009366:	1152      	asrs	r2, r2, #5
 8009368:	17db      	asrs	r3, r3, #31
 800936a:	1a9b      	subs	r3, r3, r2
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4413      	add	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 8009372:	4b3f      	ldr	r3, [pc, #252]	; (8009470 <si5351_Calc+0x170>)
 8009374:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4a3e      	ldr	r2, [pc, #248]	; (8009474 <si5351_Calc+0x174>)
 800937a:	4293      	cmp	r3, r2
 800937c:	dc22      	bgt.n	80093c4 <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 800937e:	2324      	movs	r3, #36	; 0x24
 8009380:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 8009386:	2301      	movs	r3, #1
 8009388:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 800938a:	4b3b      	ldr	r3, [pc, #236]	; (8009478 <si5351_Calc+0x178>)
 800938c:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	fb92 f3f3 	sdiv	r3, r2, r3
 8009396:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	151b      	asrs	r3, r3, #20
 800939c:	3301      	adds	r3, #1
 800939e:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	fb93 f2f2 	sdiv	r2, r3, r2
 80093a8:	68f9      	ldr	r1, [r7, #12]
 80093aa:	fb01 f202 	mul.w	r2, r1, r2
 80093ae:	1a9a      	subs	r2, r3, r2
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80093b6:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80093c0:	623b      	str	r3, [r7, #32]
 80093c2:	e032      	b.n	800942a <si5351_Calc+0x12a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4a2d      	ldr	r2, [pc, #180]	; (800947c <si5351_Calc+0x17c>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	dd02      	ble.n	80093d2 <si5351_Calc+0xd2>
            x = 4;
 80093cc:	2304      	movs	r3, #4
 80093ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80093d0:	e008      	b.n	80093e4 <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4a2a      	ldr	r2, [pc, #168]	; (8009480 <si5351_Calc+0x180>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	dd02      	ble.n	80093e0 <si5351_Calc+0xe0>
            x = 6;
 80093da:	2306      	movs	r3, #6
 80093dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093de:	e001      	b.n	80093e4 <si5351_Calc+0xe4>
        } else {
            x = 8;
 80093e0:	2308      	movs	r3, #8
 80093e2:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 80093e8:	2301      	movs	r3, #1
 80093ea:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	fb02 f303 	mul.w	r3, r2, r3
 80093f4:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80093fe:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	151b      	asrs	r3, r3, #20
 8009404:	3301      	adds	r3, #1
 8009406:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	69fa      	ldr	r2, [r7, #28]
 800940c:	fb93 f2f2 	sdiv	r2, r3, r2
 8009410:	69f9      	ldr	r1, [r7, #28]
 8009412:	fb01 f202 	mul.w	r2, r1, r2
 8009416:	1a9a      	subs	r2, r3, r2
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	fb92 f3f3 	sdiv	r3, r2, r3
 800941e:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	fb92 f3f3 	sdiv	r3, r2, r3
 8009428:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800942e:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009434:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800943a:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009440:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009446:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a3a      	ldr	r2, [r7, #32]
 800944c:	60da      	str	r2, [r3, #12]
}
 800944e:	bf00      	nop
 8009450:	373c      	adds	r7, #60	; 0x3c
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	09896800 	.word	0x09896800
 8009460:	000f423f 	.word	0x000f423f
 8009464:	431bde83 	.word	0x431bde83
 8009468:	200003b0 	.word	0x200003b0
 800946c:	51eb851f 	.word	0x51eb851f
 8009470:	017d7840 	.word	0x017d7840
 8009474:	04d3f63f 	.word	0x04d3f63f
 8009478:	35a4e900 	.word	0x35a4e900
 800947c:	08f0d17f 	.word	0x08f0d17f
 8009480:	05f5e0ff 	.word	0x05f5e0ff

08009484 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 8009484:	b580      	push	{r7, lr}
 8009486:	b08c      	sub	sp, #48	; 0x30
 8009488:	af02      	add	r7, sp, #8
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 8009490:	f107 0208 	add.w	r2, r7, #8
 8009494:	f107 031c 	add.w	r3, r7, #28
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff ff30 	bl	8009300 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 80094a0:	f107 031c 	add.w	r3, r7, #28
 80094a4:	4619      	mov	r1, r3
 80094a6:	2000      	movs	r0, #0
 80094a8:	f7ff fe3e 	bl	8009128 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 80094ac:	f107 0308 	add.w	r3, r7, #8
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	2100      	movs	r1, #0
 80094b4:	9100      	str	r1, [sp, #0]
 80094b6:	2100      	movs	r1, #0
 80094b8:	2000      	movs	r0, #0
 80094ba:	f7ff fe74 	bl	80091a6 <si5351_SetupOutput>
}
 80094be:	bf00      	nop
 80094c0:	3728      	adds	r7, #40	; 0x28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b082      	sub	sp, #8
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	4603      	mov	r3, r0
 80094ce:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	43db      	mvns	r3, r3
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	4619      	mov	r1, r3
 80094d8:	2003      	movs	r0, #3
 80094da:	f000 f805 	bl	80094e8 <si5351_write>
}
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af04      	add	r7, sp, #16
 80094ee:	4603      	mov	r3, r0
 80094f0:	460a      	mov	r2, r1
 80094f2:	71fb      	strb	r3, [r7, #7]
 80094f4:	4613      	mov	r3, r2
 80094f6:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 80094f8:	bf00      	nop
 80094fa:	f04f 33ff 	mov.w	r3, #4294967295
 80094fe:	2203      	movs	r2, #3
 8009500:	21c0      	movs	r1, #192	; 0xc0
 8009502:	480c      	ldr	r0, [pc, #48]	; (8009534 <si5351_write+0x4c>)
 8009504:	f7f9 f9da 	bl	80028bc <HAL_I2C_IsDeviceReady>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1f5      	bne.n	80094fa <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	b29a      	uxth	r2, r3
 8009512:	f04f 33ff 	mov.w	r3, #4294967295
 8009516:	9302      	str	r3, [sp, #8]
 8009518:	2301      	movs	r3, #1
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	1dbb      	adds	r3, r7, #6
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	2301      	movs	r3, #1
 8009522:	21c0      	movs	r1, #192	; 0xc0
 8009524:	4803      	ldr	r0, [pc, #12]	; (8009534 <si5351_write+0x4c>)
 8009526:	f7f9 f8c3 	bl	80026b0 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	200001a8 	.word	0x200001a8

08009538 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607a      	str	r2, [r7, #4]
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	121b      	asrs	r3, r3, #8
 800954c:	b2da      	uxtb	r2, r3
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	4611      	mov	r1, r2
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff ffc8 	bl	80094e8 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	3301      	adds	r3, #1
 800955c:	b2db      	uxtb	r3, r3
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	b2d2      	uxtb	r2, r2
 8009562:	4611      	mov	r1, r2
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff ffbf 	bl	80094e8 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	3302      	adds	r3, #2
 800956e:	b2d8      	uxtb	r0, r3
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	141b      	asrs	r3, r3, #16
 8009574:	b25b      	sxtb	r3, r3
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	b25a      	sxtb	r2, r3
 800957c:	7e3b      	ldrb	r3, [r7, #24]
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	b25b      	sxtb	r3, r3
 8009582:	f003 030c 	and.w	r3, r3, #12
 8009586:	b25b      	sxtb	r3, r3
 8009588:	4313      	orrs	r3, r2
 800958a:	b25a      	sxtb	r2, r3
 800958c:	7f3b      	ldrb	r3, [r7, #28]
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	b25b      	sxtb	r3, r3
 8009592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009596:	b25b      	sxtb	r3, r3
 8009598:	4313      	orrs	r3, r2
 800959a:	b25b      	sxtb	r3, r3
 800959c:	b2db      	uxtb	r3, r3
 800959e:	4619      	mov	r1, r3
 80095a0:	f7ff ffa2 	bl	80094e8 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	3303      	adds	r3, #3
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	121b      	asrs	r3, r3, #8
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	4619      	mov	r1, r3
 80095b2:	4610      	mov	r0, r2
 80095b4:	f7ff ff98 	bl	80094e8 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	3304      	adds	r3, #4
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	b2d2      	uxtb	r2, r2
 80095c2:	4611      	mov	r1, r2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff ff8f 	bl	80094e8 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	3305      	adds	r3, #5
 80095ce:	b2d8      	uxtb	r0, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	131b      	asrs	r3, r3, #12
 80095d4:	b25b      	sxtb	r3, r3
 80095d6:	f023 030f 	bic.w	r3, r3, #15
 80095da:	b25a      	sxtb	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	141b      	asrs	r3, r3, #16
 80095e0:	b25b      	sxtb	r3, r3
 80095e2:	f003 030f 	and.w	r3, r3, #15
 80095e6:	b25b      	sxtb	r3, r3
 80095e8:	4313      	orrs	r3, r2
 80095ea:	b25b      	sxtb	r3, r3
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	4619      	mov	r1, r3
 80095f0:	f7ff ff7a 	bl	80094e8 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	3306      	adds	r3, #6
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	121b      	asrs	r3, r3, #8
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	4619      	mov	r1, r3
 8009602:	4610      	mov	r0, r2
 8009604:	f7ff ff70 	bl	80094e8 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	3307      	adds	r3, #7
 800960c:	b2db      	uxtb	r3, r3
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	b2d2      	uxtb	r2, r2
 8009612:	4611      	mov	r1, r2
 8009614:	4618      	mov	r0, r3
 8009616:	f7ff ff67 	bl	80094e8 <si5351_write>
}
 800961a:	bf00      	nop
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	460b      	mov	r3, r1
 800962e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009630:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009634:	f005 fbe8 	bl	800ee08 <USBD_static_malloc>
 8009638:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d109      	bne.n	8009654 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	32b0      	adds	r2, #176	; 0xb0
 800964a:	2100      	movs	r1, #0
 800964c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009650:	2302      	movs	r3, #2
 8009652:	e0d4      	b.n	80097fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009654:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009658:	2100      	movs	r1, #0
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f005 fc62 	bl	800ef24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	32b0      	adds	r2, #176	; 0xb0
 800966a:	68f9      	ldr	r1, [r7, #12]
 800966c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	32b0      	adds	r2, #176	; 0xb0
 800967a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7c1b      	ldrb	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d138      	bne.n	80096fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800968c:	4b5e      	ldr	r3, [pc, #376]	; (8009808 <USBD_CDC_Init+0x1e4>)
 800968e:	7819      	ldrb	r1, [r3, #0]
 8009690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009694:	2202      	movs	r2, #2
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f005 fa93 	bl	800ebc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800969c:	4b5a      	ldr	r3, [pc, #360]	; (8009808 <USBD_CDC_Init+0x1e4>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	f003 020f 	and.w	r2, r3, #15
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	4613      	mov	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	440b      	add	r3, r1
 80096b0:	3324      	adds	r3, #36	; 0x24
 80096b2:	2201      	movs	r2, #1
 80096b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096b6:	4b55      	ldr	r3, [pc, #340]	; (800980c <USBD_CDC_Init+0x1e8>)
 80096b8:	7819      	ldrb	r1, [r3, #0]
 80096ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096be:	2202      	movs	r2, #2
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f005 fa7e 	bl	800ebc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096c6:	4b51      	ldr	r3, [pc, #324]	; (800980c <USBD_CDC_Init+0x1e8>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	f003 020f 	and.w	r2, r3, #15
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	440b      	add	r3, r1
 80096da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096de:	2201      	movs	r2, #1
 80096e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80096e2:	4b4b      	ldr	r3, [pc, #300]	; (8009810 <USBD_CDC_Init+0x1ec>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	f003 020f 	and.w	r2, r3, #15
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	440b      	add	r3, r1
 80096f6:	3326      	adds	r3, #38	; 0x26
 80096f8:	2210      	movs	r2, #16
 80096fa:	801a      	strh	r2, [r3, #0]
 80096fc:	e035      	b.n	800976a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096fe:	4b42      	ldr	r3, [pc, #264]	; (8009808 <USBD_CDC_Init+0x1e4>)
 8009700:	7819      	ldrb	r1, [r3, #0]
 8009702:	2340      	movs	r3, #64	; 0x40
 8009704:	2202      	movs	r2, #2
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f005 fa5b 	bl	800ebc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800970c:	4b3e      	ldr	r3, [pc, #248]	; (8009808 <USBD_CDC_Init+0x1e4>)
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	f003 020f 	and.w	r2, r3, #15
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	3324      	adds	r3, #36	; 0x24
 8009722:	2201      	movs	r2, #1
 8009724:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009726:	4b39      	ldr	r3, [pc, #228]	; (800980c <USBD_CDC_Init+0x1e8>)
 8009728:	7819      	ldrb	r1, [r3, #0]
 800972a:	2340      	movs	r3, #64	; 0x40
 800972c:	2202      	movs	r2, #2
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f005 fa47 	bl	800ebc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009734:	4b35      	ldr	r3, [pc, #212]	; (800980c <USBD_CDC_Init+0x1e8>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	f003 020f 	and.w	r2, r3, #15
 800973c:	6879      	ldr	r1, [r7, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	440b      	add	r3, r1
 8009748:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800974c:	2201      	movs	r2, #1
 800974e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009750:	4b2f      	ldr	r3, [pc, #188]	; (8009810 <USBD_CDC_Init+0x1ec>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	f003 020f 	and.w	r2, r3, #15
 8009758:	6879      	ldr	r1, [r7, #4]
 800975a:	4613      	mov	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	440b      	add	r3, r1
 8009764:	3326      	adds	r3, #38	; 0x26
 8009766:	2210      	movs	r2, #16
 8009768:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800976a:	4b29      	ldr	r3, [pc, #164]	; (8009810 <USBD_CDC_Init+0x1ec>)
 800976c:	7819      	ldrb	r1, [r3, #0]
 800976e:	2308      	movs	r3, #8
 8009770:	2203      	movs	r2, #3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f005 fa25 	bl	800ebc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009778:	4b25      	ldr	r3, [pc, #148]	; (8009810 <USBD_CDC_Init+0x1ec>)
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	f003 020f 	and.w	r2, r3, #15
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	4613      	mov	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	440b      	add	r3, r1
 800978c:	3324      	adds	r3, #36	; 0x24
 800978e:	2201      	movs	r2, #1
 8009790:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	33b0      	adds	r3, #176	; 0xb0
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80097c8:	2302      	movs	r3, #2
 80097ca:	e018      	b.n	80097fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	7c1b      	ldrb	r3, [r3, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097d4:	4b0d      	ldr	r3, [pc, #52]	; (800980c <USBD_CDC_Init+0x1e8>)
 80097d6:	7819      	ldrb	r1, [r3, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f005 fadc 	bl	800eda0 <USBD_LL_PrepareReceive>
 80097e8:	e008      	b.n	80097fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097ea:	4b08      	ldr	r3, [pc, #32]	; (800980c <USBD_CDC_Init+0x1e8>)
 80097ec:	7819      	ldrb	r1, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097f4:	2340      	movs	r3, #64	; 0x40
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f005 fad2 	bl	800eda0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	200000a3 	.word	0x200000a3
 800980c:	200000a4 	.word	0x200000a4
 8009810:	200000a5 	.word	0x200000a5

08009814 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009820:	4b3a      	ldr	r3, [pc, #232]	; (800990c <USBD_CDC_DeInit+0xf8>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	4619      	mov	r1, r3
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f005 f9f1 	bl	800ec0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800982c:	4b37      	ldr	r3, [pc, #220]	; (800990c <USBD_CDC_DeInit+0xf8>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	f003 020f 	and.w	r2, r3, #15
 8009834:	6879      	ldr	r1, [r7, #4]
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	440b      	add	r3, r1
 8009840:	3324      	adds	r3, #36	; 0x24
 8009842:	2200      	movs	r2, #0
 8009844:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009846:	4b32      	ldr	r3, [pc, #200]	; (8009910 <USBD_CDC_DeInit+0xfc>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f005 f9de 	bl	800ec0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009852:	4b2f      	ldr	r3, [pc, #188]	; (8009910 <USBD_CDC_DeInit+0xfc>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	f003 020f 	and.w	r2, r3, #15
 800985a:	6879      	ldr	r1, [r7, #4]
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	440b      	add	r3, r1
 8009866:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800986a:	2200      	movs	r2, #0
 800986c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800986e:	4b29      	ldr	r3, [pc, #164]	; (8009914 <USBD_CDC_DeInit+0x100>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f005 f9ca 	bl	800ec0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800987a:	4b26      	ldr	r3, [pc, #152]	; (8009914 <USBD_CDC_DeInit+0x100>)
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	f003 020f 	and.w	r2, r3, #15
 8009882:	6879      	ldr	r1, [r7, #4]
 8009884:	4613      	mov	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	440b      	add	r3, r1
 800988e:	3324      	adds	r3, #36	; 0x24
 8009890:	2200      	movs	r2, #0
 8009892:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009894:	4b1f      	ldr	r3, [pc, #124]	; (8009914 <USBD_CDC_DeInit+0x100>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	f003 020f 	and.w	r2, r3, #15
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	440b      	add	r3, r1
 80098a8:	3326      	adds	r3, #38	; 0x26
 80098aa:	2200      	movs	r2, #0
 80098ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	32b0      	adds	r2, #176	; 0xb0
 80098b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01f      	beq.n	8009900 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	33b0      	adds	r3, #176	; 0xb0
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	32b0      	adds	r2, #176	; 0xb0
 80098de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f005 fa9e 	bl	800ee24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	32b0      	adds	r2, #176	; 0xb0
 80098f2:	2100      	movs	r1, #0
 80098f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	200000a3 	.word	0x200000a3
 8009910:	200000a4 	.word	0x200000a4
 8009914:	200000a5 	.word	0x200000a5

08009918 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	32b0      	adds	r2, #176	; 0xb0
 800992c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009930:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009944:	2303      	movs	r3, #3
 8009946:	e0bf      	b.n	8009ac8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009950:	2b00      	cmp	r3, #0
 8009952:	d050      	beq.n	80099f6 <USBD_CDC_Setup+0xde>
 8009954:	2b20      	cmp	r3, #32
 8009956:	f040 80af 	bne.w	8009ab8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	88db      	ldrh	r3, [r3, #6]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d03a      	beq.n	80099d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	b25b      	sxtb	r3, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	da1b      	bge.n	80099a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	33b0      	adds	r3, #176	; 0xb0
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009982:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	88d2      	ldrh	r2, [r2, #6]
 8009988:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	88db      	ldrh	r3, [r3, #6]
 800998e:	2b07      	cmp	r3, #7
 8009990:	bf28      	it	cs
 8009992:	2307      	movcs	r3, #7
 8009994:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	89fa      	ldrh	r2, [r7, #14]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 fd43 	bl	800b428 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80099a2:	e090      	b.n	8009ac6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	785a      	ldrb	r2, [r3, #1]
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	88db      	ldrh	r3, [r3, #6]
 80099b2:	2b3f      	cmp	r3, #63	; 0x3f
 80099b4:	d803      	bhi.n	80099be <USBD_CDC_Setup+0xa6>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	88db      	ldrh	r3, [r3, #6]
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	e000      	b.n	80099c0 <USBD_CDC_Setup+0xa8>
 80099be:	2240      	movs	r2, #64	; 0x40
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80099c6:	6939      	ldr	r1, [r7, #16]
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80099ce:	461a      	mov	r2, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 fd55 	bl	800b480 <USBD_CtlPrepareRx>
      break;
 80099d6:	e076      	b.n	8009ac6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	33b0      	adds	r3, #176	; 0xb0
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	7850      	ldrb	r0, [r2, #1]
 80099ee:	2200      	movs	r2, #0
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	4798      	blx	r3
      break;
 80099f4:	e067      	b.n	8009ac6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	785b      	ldrb	r3, [r3, #1]
 80099fa:	2b0b      	cmp	r3, #11
 80099fc:	d851      	bhi.n	8009aa2 <USBD_CDC_Setup+0x18a>
 80099fe:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <USBD_CDC_Setup+0xec>)
 8009a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a04:	08009a35 	.word	0x08009a35
 8009a08:	08009ab1 	.word	0x08009ab1
 8009a0c:	08009aa3 	.word	0x08009aa3
 8009a10:	08009aa3 	.word	0x08009aa3
 8009a14:	08009aa3 	.word	0x08009aa3
 8009a18:	08009aa3 	.word	0x08009aa3
 8009a1c:	08009aa3 	.word	0x08009aa3
 8009a20:	08009aa3 	.word	0x08009aa3
 8009a24:	08009aa3 	.word	0x08009aa3
 8009a28:	08009aa3 	.word	0x08009aa3
 8009a2c:	08009a5f 	.word	0x08009a5f
 8009a30:	08009a89 	.word	0x08009a89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d107      	bne.n	8009a50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a40:	f107 030a 	add.w	r3, r7, #10
 8009a44:	2202      	movs	r2, #2
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f001 fced 	bl	800b428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a4e:	e032      	b.n	8009ab6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 fc77 	bl	800b346 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	75fb      	strb	r3, [r7, #23]
          break;
 8009a5c:	e02b      	b.n	8009ab6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d107      	bne.n	8009a7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a6a:	f107 030d 	add.w	r3, r7, #13
 8009a6e:	2201      	movs	r2, #1
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 fcd8 	bl	800b428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a78:	e01d      	b.n	8009ab6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f001 fc62 	bl	800b346 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a82:	2303      	movs	r3, #3
 8009a84:	75fb      	strb	r3, [r7, #23]
          break;
 8009a86:	e016      	b.n	8009ab6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d00f      	beq.n	8009ab4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f001 fc55 	bl	800b346 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009aa0:	e008      	b.n	8009ab4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 fc4e 	bl	800b346 <USBD_CtlError>
          ret = USBD_FAIL;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	75fb      	strb	r3, [r7, #23]
          break;
 8009aae:	e002      	b.n	8009ab6 <USBD_CDC_Setup+0x19e>
          break;
 8009ab0:	bf00      	nop
 8009ab2:	e008      	b.n	8009ac6 <USBD_CDC_Setup+0x1ae>
          break;
 8009ab4:	bf00      	nop
      }
      break;
 8009ab6:	e006      	b.n	8009ac6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f001 fc43 	bl	800b346 <USBD_CtlError>
      ret = USBD_FAIL;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac4:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ae2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	32b0      	adds	r2, #176	; 0xb0
 8009aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e065      	b.n	8009bc6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	32b0      	adds	r2, #176	; 0xb0
 8009b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	f003 020f 	and.w	r2, r3, #15
 8009b10:	6879      	ldr	r1, [r7, #4]
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	440b      	add	r3, r1
 8009b1c:	3318      	adds	r3, #24
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d02f      	beq.n	8009b84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	f003 020f 	and.w	r2, r3, #15
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	440b      	add	r3, r1
 8009b36:	3318      	adds	r3, #24
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	f003 010f 	and.w	r1, r3, #15
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	460b      	mov	r3, r1
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	440b      	add	r3, r1
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4403      	add	r3, r0
 8009b4c:	3348      	adds	r3, #72	; 0x48
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b54:	fb01 f303 	mul.w	r3, r1, r3
 8009b58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d112      	bne.n	8009b84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009b5e:	78fb      	ldrb	r3, [r7, #3]
 8009b60:	f003 020f 	and.w	r2, r3, #15
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	440b      	add	r3, r1
 8009b70:	3318      	adds	r3, #24
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b76:	78f9      	ldrb	r1, [r7, #3]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f005 f8ee 	bl	800ed5e <USBD_LL_Transmit>
 8009b82:	e01f      	b.n	8009bc4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	33b0      	adds	r3, #176	; 0xb0
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d010      	beq.n	8009bc4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	33b0      	adds	r3, #176	; 0xb0
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009bc0:	78fa      	ldrb	r2, [r7, #3]
 8009bc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	32b0      	adds	r2, #176	; 0xb0
 8009be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	32b0      	adds	r2, #176	; 0xb0
 8009bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e01a      	b.n	8009c36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c00:	78fb      	ldrb	r3, [r7, #3]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f005 f8ec 	bl	800ede2 <USBD_LL_GetRxDataSize>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	33b0      	adds	r3, #176	; 0xb0
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4413      	add	r3, r2
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c30:	4611      	mov	r1, r2
 8009c32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	32b0      	adds	r2, #176	; 0xb0
 8009c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e025      	b.n	8009cac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	33b0      	adds	r3, #176	; 0xb0
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01a      	beq.n	8009caa <USBD_CDC_EP0_RxReady+0x6c>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009c7a:	2bff      	cmp	r3, #255	; 0xff
 8009c7c:	d015      	beq.n	8009caa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	33b0      	adds	r3, #176	; 0xb0
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009c96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c9e:	b292      	uxth	r2, r2
 8009ca0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	22ff      	movs	r2, #255	; 0xff
 8009ca6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cbc:	2182      	movs	r1, #130	; 0x82
 8009cbe:	4818      	ldr	r0, [pc, #96]	; (8009d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cc0:	f000 fd09 	bl	800a6d6 <USBD_GetEpDesc>
 8009cc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	4815      	ldr	r0, [pc, #84]	; (8009d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cca:	f000 fd04 	bl	800a6d6 <USBD_GetEpDesc>
 8009cce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009cd0:	2181      	movs	r1, #129	; 0x81
 8009cd2:	4813      	ldr	r0, [pc, #76]	; (8009d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cd4:	f000 fcff 	bl	800a6d6 <USBD_GetEpDesc>
 8009cd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2210      	movs	r2, #16
 8009ce4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d006      	beq.n	8009cfa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cf4:	711a      	strb	r2, [r3, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d006      	beq.n	8009d0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d08:	711a      	strb	r2, [r3, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2243      	movs	r2, #67	; 0x43
 8009d12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d14:	4b02      	ldr	r3, [pc, #8]	; (8009d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20000060 	.word	0x20000060

08009d24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d2c:	2182      	movs	r1, #130	; 0x82
 8009d2e:	4818      	ldr	r0, [pc, #96]	; (8009d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d30:	f000 fcd1 	bl	800a6d6 <USBD_GetEpDesc>
 8009d34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d36:	2101      	movs	r1, #1
 8009d38:	4815      	ldr	r0, [pc, #84]	; (8009d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d3a:	f000 fccc 	bl	800a6d6 <USBD_GetEpDesc>
 8009d3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d40:	2181      	movs	r1, #129	; 0x81
 8009d42:	4813      	ldr	r0, [pc, #76]	; (8009d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d44:	f000 fcc7 	bl	800a6d6 <USBD_GetEpDesc>
 8009d48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	2210      	movs	r2, #16
 8009d54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d006      	beq.n	8009d6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	711a      	strb	r2, [r3, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f042 0202 	orr.w	r2, r2, #2
 8009d68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d006      	beq.n	8009d7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	711a      	strb	r2, [r3, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f042 0202 	orr.w	r2, r2, #2
 8009d7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2243      	movs	r2, #67	; 0x43
 8009d82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d84:	4b02      	ldr	r3, [pc, #8]	; (8009d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20000060 	.word	0x20000060

08009d94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d9c:	2182      	movs	r1, #130	; 0x82
 8009d9e:	4818      	ldr	r0, [pc, #96]	; (8009e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009da0:	f000 fc99 	bl	800a6d6 <USBD_GetEpDesc>
 8009da4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009da6:	2101      	movs	r1, #1
 8009da8:	4815      	ldr	r0, [pc, #84]	; (8009e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009daa:	f000 fc94 	bl	800a6d6 <USBD_GetEpDesc>
 8009dae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009db0:	2181      	movs	r1, #129	; 0x81
 8009db2:	4813      	ldr	r0, [pc, #76]	; (8009e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009db4:	f000 fc8f 	bl	800a6d6 <USBD_GetEpDesc>
 8009db8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2210      	movs	r2, #16
 8009dc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d006      	beq.n	8009dda <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dd4:	711a      	strb	r2, [r3, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d006      	beq.n	8009dee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009de8:	711a      	strb	r2, [r3, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2243      	movs	r2, #67	; 0x43
 8009df2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009df4:	4b02      	ldr	r3, [pc, #8]	; (8009e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	20000060 	.word	0x20000060

08009e04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	220a      	movs	r2, #10
 8009e10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e12:	4b03      	ldr	r3, [pc, #12]	; (8009e20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	2000001c 	.word	0x2000001c

08009e24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e009      	b.n	8009e4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	33b0      	adds	r3, #176	; 0xb0
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	32b0      	adds	r2, #176	; 0xb0
 8009e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e72:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e008      	b.n	8009e90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	371c      	adds	r7, #28
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	32b0      	adds	r2, #176	; 0xb0
 8009eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e004      	b.n	8009eca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
	...

08009ed8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	32b0      	adds	r2, #176	; 0xb0
 8009eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	32b0      	adds	r2, #176	; 0xb0
 8009efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e018      	b.n	8009f38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	7c1b      	ldrb	r3, [r3, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10a      	bne.n	8009f24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f0e:	4b0c      	ldr	r3, [pc, #48]	; (8009f40 <USBD_CDC_ReceivePacket+0x68>)
 8009f10:	7819      	ldrb	r1, [r3, #0]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f004 ff3f 	bl	800eda0 <USBD_LL_PrepareReceive>
 8009f22:	e008      	b.n	8009f36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f24:	4b06      	ldr	r3, [pc, #24]	; (8009f40 <USBD_CDC_ReceivePacket+0x68>)
 8009f26:	7819      	ldrb	r1, [r3, #0]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f2e:	2340      	movs	r3, #64	; 0x40
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f004 ff35 	bl	800eda0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	200000a4 	.word	0x200000a4

08009f44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e01f      	b.n	8009f9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	79fa      	ldrb	r2, [r7, #7]
 8009f8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f004 fdaf 	bl	800eaf4 <USBD_LL_Init>
 8009f96:	4603      	mov	r3, r0
 8009f98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e025      	b.n	800a008 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	32ae      	adds	r2, #174	; 0xae
 8009fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00f      	beq.n	8009ff8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	32ae      	adds	r2, #174	; 0xae
 8009fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	f107 020e 	add.w	r2, r7, #14
 8009fec:	4610      	mov	r0, r2
 8009fee:	4798      	blx	r3
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f004 fdb7 	bl	800eb8c <USBD_LL_Start>
 800a01e:	4603      	mov	r3, r0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a030:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a032:	4618      	mov	r0, r3
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	460b      	mov	r3, r1
 800a048:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a054:	2b00      	cmp	r3, #0
 800a056:	d009      	beq.n	800a06c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	78fa      	ldrb	r2, [r7, #3]
 800a062:	4611      	mov	r1, r2
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4798      	blx	r3
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	4611      	mov	r1, r2
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	4798      	blx	r3
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a09c:	2303      	movs	r3, #3
 800a09e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f001 f908 	bl	800b2d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0de:	f003 031f 	and.w	r3, r3, #31
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d01a      	beq.n	800a11c <USBD_LL_SetupStage+0x72>
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d822      	bhi.n	800a130 <USBD_LL_SetupStage+0x86>
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d002      	beq.n	800a0f4 <USBD_LL_SetupStage+0x4a>
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d00a      	beq.n	800a108 <USBD_LL_SetupStage+0x5e>
 800a0f2:	e01d      	b.n	800a130 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fb5f 	bl	800a7c0 <USBD_StdDevReq>
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]
      break;
 800a106:	e020      	b.n	800a14a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fbc7 	bl	800a8a4 <USBD_StdItfReq>
 800a116:	4603      	mov	r3, r0
 800a118:	73fb      	strb	r3, [r7, #15]
      break;
 800a11a:	e016      	b.n	800a14a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fc29 	bl	800a97c <USBD_StdEPReq>
 800a12a:	4603      	mov	r3, r0
 800a12c:	73fb      	strb	r3, [r7, #15]
      break;
 800a12e:	e00c      	b.n	800a14a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a136:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f004 fd84 	bl	800ec4c <USBD_LL_StallEP>
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]
      break;
 800a148:	bf00      	nop
  }

  return ret;
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	460b      	mov	r3, r1
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a166:	7afb      	ldrb	r3, [r7, #11]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d16e      	bne.n	800a24a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a172:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	f040 8098 	bne.w	800a2b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	689a      	ldr	r2, [r3, #8]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d913      	bls.n	800a1b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	1ad2      	subs	r2, r2, r3
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	bf28      	it	cs
 800a1a6:	4613      	movcs	r3, r2
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f001 f984 	bl	800b4ba <USBD_CtlContinueRx>
 800a1b2:	e07d      	b.n	800a2b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1ba:	f003 031f 	and.w	r3, r3, #31
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d014      	beq.n	800a1ec <USBD_LL_DataOutStage+0x98>
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d81d      	bhi.n	800a202 <USBD_LL_DataOutStage+0xae>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <USBD_LL_DataOutStage+0x7c>
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d003      	beq.n	800a1d6 <USBD_LL_DataOutStage+0x82>
 800a1ce:	e018      	b.n	800a202 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	75bb      	strb	r3, [r7, #22]
            break;
 800a1d4:	e018      	b.n	800a208 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	4619      	mov	r1, r3
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f000 fa5e 	bl	800a6a2 <USBD_CoreFindIF>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	75bb      	strb	r3, [r7, #22]
            break;
 800a1ea:	e00d      	b.n	800a208 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 fa60 	bl	800a6bc <USBD_CoreFindEP>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75bb      	strb	r3, [r7, #22]
            break;
 800a200:	e002      	b.n	800a208 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	75bb      	strb	r3, [r7, #22]
            break;
 800a206:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a208:	7dbb      	ldrb	r3, [r7, #22]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d119      	bne.n	800a242 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b03      	cmp	r3, #3
 800a218:	d113      	bne.n	800a242 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a21a:	7dba      	ldrb	r2, [r7, #22]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	32ae      	adds	r2, #174	; 0xae
 800a220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00b      	beq.n	800a242 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a22a:	7dba      	ldrb	r2, [r7, #22]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a232:	7dba      	ldrb	r2, [r7, #22]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	32ae      	adds	r2, #174	; 0xae
 800a238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f001 f94a 	bl	800b4dc <USBD_CtlSendStatus>
 800a248:	e032      	b.n	800a2b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a24a:	7afb      	ldrb	r3, [r7, #11]
 800a24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a250:	b2db      	uxtb	r3, r3
 800a252:	4619      	mov	r1, r3
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 fa31 	bl	800a6bc <USBD_CoreFindEP>
 800a25a:	4603      	mov	r3, r0
 800a25c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a25e:	7dbb      	ldrb	r3, [r7, #22]
 800a260:	2bff      	cmp	r3, #255	; 0xff
 800a262:	d025      	beq.n	800a2b0 <USBD_LL_DataOutStage+0x15c>
 800a264:	7dbb      	ldrb	r3, [r7, #22]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d122      	bne.n	800a2b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b03      	cmp	r3, #3
 800a274:	d117      	bne.n	800a2a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a276:	7dba      	ldrb	r2, [r7, #22]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	32ae      	adds	r2, #174	; 0xae
 800a27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00f      	beq.n	800a2a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a286:	7dba      	ldrb	r2, [r7, #22]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a28e:	7dba      	ldrb	r2, [r7, #22]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	32ae      	adds	r2, #174	; 0xae
 800a294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	7afa      	ldrb	r2, [r7, #11]
 800a29c:	4611      	mov	r1, r2
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	4798      	blx	r3
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	e000      	b.n	800a2b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b086      	sub	sp, #24
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	60f8      	str	r0, [r7, #12]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	607a      	str	r2, [r7, #4]
 800a2c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a2c8:	7afb      	ldrb	r3, [r7, #11]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d16f      	bne.n	800a3ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3314      	adds	r3, #20
 800a2d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d15a      	bne.n	800a394 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d914      	bls.n	800a314 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	689a      	ldr	r2, [r3, #8]
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	1ad2      	subs	r2, r2, r3
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f001 f8ac 	bl	800b45e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a306:	2300      	movs	r3, #0
 800a308:	2200      	movs	r2, #0
 800a30a:	2100      	movs	r1, #0
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f004 fd47 	bl	800eda0 <USBD_LL_PrepareReceive>
 800a312:	e03f      	b.n	800a394 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	68da      	ldr	r2, [r3, #12]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d11c      	bne.n	800a35a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a328:	429a      	cmp	r2, r3
 800a32a:	d316      	bcc.n	800a35a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a336:	429a      	cmp	r2, r3
 800a338:	d20f      	bcs.n	800a35a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a33a:	2200      	movs	r2, #0
 800a33c:	2100      	movs	r1, #0
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f001 f88d 	bl	800b45e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a34c:	2300      	movs	r3, #0
 800a34e:	2200      	movs	r2, #0
 800a350:	2100      	movs	r1, #0
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f004 fd24 	bl	800eda0 <USBD_LL_PrepareReceive>
 800a358:	e01c      	b.n	800a394 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b03      	cmp	r3, #3
 800a364:	d10f      	bne.n	800a386 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d009      	beq.n	800a386 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a386:	2180      	movs	r1, #128	; 0x80
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f004 fc5f 	bl	800ec4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f001 f8b7 	bl	800b502 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d03a      	beq.n	800a414 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f7ff fe42 	bl	800a028 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a3ac:	e032      	b.n	800a414 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a3ae:	7afb      	ldrb	r3, [r7, #11]
 800a3b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 f97f 	bl	800a6bc <USBD_CoreFindEP>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	2bff      	cmp	r3, #255	; 0xff
 800a3c6:	d025      	beq.n	800a414 <USBD_LL_DataInStage+0x15a>
 800a3c8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d122      	bne.n	800a414 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d11c      	bne.n	800a414 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a3da:	7dfa      	ldrb	r2, [r7, #23]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	32ae      	adds	r2, #174	; 0xae
 800a3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d014      	beq.n	800a414 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a3ea:	7dfa      	ldrb	r2, [r7, #23]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a3f2:	7dfa      	ldrb	r2, [r7, #23]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	32ae      	adds	r2, #174	; 0xae
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	7afa      	ldrb	r2, [r7, #11]
 800a400:	4611      	mov	r1, r2
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	4798      	blx	r3
 800a406:	4603      	mov	r3, r0
 800a408:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a40a:	7dbb      	ldrb	r3, [r7, #22]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a410:	7dbb      	ldrb	r3, [r7, #22]
 800a412:	e000      	b.n	800a416 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a456:	2b00      	cmp	r3, #0
 800a458:	d014      	beq.n	800a484 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00e      	beq.n	800a484 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	6852      	ldr	r2, [r2, #4]
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	4611      	mov	r1, r2
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	4798      	blx	r3
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a480:	2303      	movs	r3, #3
 800a482:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a484:	2340      	movs	r3, #64	; 0x40
 800a486:	2200      	movs	r2, #0
 800a488:	2100      	movs	r1, #0
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f004 fb99 	bl	800ebc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2240      	movs	r2, #64	; 0x40
 800a49c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4a0:	2340      	movs	r3, #64	; 0x40
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2180      	movs	r1, #128	; 0x80
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f004 fb8b 	bl	800ebc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2240      	movs	r2, #64	; 0x40
 800a4b6:	621a      	str	r2, [r3, #32]

  return ret;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	78fa      	ldrb	r2, [r7, #3]
 800a4d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2204      	movs	r2, #4
 800a4fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d106      	bne.n	800a530 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d110      	bne.n	800a574 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00b      	beq.n	800a574 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d005      	beq.n	800a574 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a56e:	69db      	ldr	r3, [r3, #28]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	460b      	mov	r3, r1
 800a588:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	32ae      	adds	r2, #174	; 0xae
 800a594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d101      	bne.n	800a5a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e01c      	b.n	800a5da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d115      	bne.n	800a5d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	32ae      	adds	r2, #174	; 0xae
 800a5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ba:	6a1b      	ldr	r3, [r3, #32]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00b      	beq.n	800a5d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	32ae      	adds	r2, #174	; 0xae
 800a5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	32ae      	adds	r2, #174	; 0xae
 800a5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d101      	bne.n	800a604 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a600:	2303      	movs	r3, #3
 800a602:	e01c      	b.n	800a63e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b03      	cmp	r3, #3
 800a60e:	d115      	bne.n	800a63c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	32ae      	adds	r2, #174	; 0xae
 800a61a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00b      	beq.n	800a63c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	32ae      	adds	r2, #174	; 0xae
 800a62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a634:	78fa      	ldrb	r2, [r7, #3]
 800a636:	4611      	mov	r1, r2
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a646:	b480      	push	{r7}
 800a648:	b083      	sub	sp, #12
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00e      	beq.n	800a698 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	6852      	ldr	r2, [r2, #4]
 800a686:	b2d2      	uxtb	r2, r2
 800a688:	4611      	mov	r1, r2
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	4798      	blx	r3
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a694:	2303      	movs	r3, #3
 800a696:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a698:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b086      	sub	sp, #24
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	885b      	ldrh	r3, [r3, #2]
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d920      	bls.n	800a740 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	b29b      	uxth	r3, r3
 800a704:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a706:	e013      	b.n	800a730 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a708:	f107 030a 	add.w	r3, r7, #10
 800a70c:	4619      	mov	r1, r3
 800a70e:	6978      	ldr	r0, [r7, #20]
 800a710:	f000 f81b 	bl	800a74a <USBD_GetNextDesc>
 800a714:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	785b      	ldrb	r3, [r3, #1]
 800a71a:	2b05      	cmp	r3, #5
 800a71c:	d108      	bne.n	800a730 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	789b      	ldrb	r3, [r3, #2]
 800a726:	78fa      	ldrb	r2, [r7, #3]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d008      	beq.n	800a73e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a72c:	2300      	movs	r3, #0
 800a72e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	885b      	ldrh	r3, [r3, #2]
 800a734:	b29a      	uxth	r2, r3
 800a736:	897b      	ldrh	r3, [r7, #10]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d8e5      	bhi.n	800a708 <USBD_GetEpDesc+0x32>
 800a73c:	e000      	b.n	800a740 <USBD_GetEpDesc+0x6a>
          break;
 800a73e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a740:	693b      	ldr	r3, [r7, #16]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b085      	sub	sp, #20
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	881a      	ldrh	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	b29b      	uxth	r3, r3
 800a762:	4413      	add	r3, r2
 800a764:	b29a      	uxth	r2, r3
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4413      	add	r3, r2
 800a774:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a776:	68fb      	ldr	r3, [r7, #12]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a784:	b480      	push	{r7}
 800a786:	b087      	sub	sp, #28
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	3301      	adds	r3, #1
 800a79a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7a2:	8a3b      	ldrh	r3, [r7, #16]
 800a7a4:	021b      	lsls	r3, r3, #8
 800a7a6:	b21a      	sxth	r2, r3
 800a7a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	b21b      	sxth	r3, r3
 800a7b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7b2:	89fb      	ldrh	r3, [r7, #14]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	371c      	adds	r7, #28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7d6:	2b40      	cmp	r3, #64	; 0x40
 800a7d8:	d005      	beq.n	800a7e6 <USBD_StdDevReq+0x26>
 800a7da:	2b40      	cmp	r3, #64	; 0x40
 800a7dc:	d857      	bhi.n	800a88e <USBD_StdDevReq+0xce>
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00f      	beq.n	800a802 <USBD_StdDevReq+0x42>
 800a7e2:	2b20      	cmp	r3, #32
 800a7e4:	d153      	bne.n	800a88e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	32ae      	adds	r2, #174	; 0xae
 800a7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	4798      	blx	r3
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a800:	e04a      	b.n	800a898 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	2b09      	cmp	r3, #9
 800a808:	d83b      	bhi.n	800a882 <USBD_StdDevReq+0xc2>
 800a80a:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <USBD_StdDevReq+0x50>)
 800a80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a810:	0800a865 	.word	0x0800a865
 800a814:	0800a879 	.word	0x0800a879
 800a818:	0800a883 	.word	0x0800a883
 800a81c:	0800a86f 	.word	0x0800a86f
 800a820:	0800a883 	.word	0x0800a883
 800a824:	0800a843 	.word	0x0800a843
 800a828:	0800a839 	.word	0x0800a839
 800a82c:	0800a883 	.word	0x0800a883
 800a830:	0800a85b 	.word	0x0800a85b
 800a834:	0800a84d 	.word	0x0800a84d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fa3c 	bl	800acb8 <USBD_GetDescriptor>
          break;
 800a840:	e024      	b.n	800a88c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fba1 	bl	800af8c <USBD_SetAddress>
          break;
 800a84a:	e01f      	b.n	800a88c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fbe0 	bl	800b014 <USBD_SetConfig>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]
          break;
 800a858:	e018      	b.n	800a88c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fc83 	bl	800b168 <USBD_GetConfig>
          break;
 800a862:	e013      	b.n	800a88c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fcb4 	bl	800b1d4 <USBD_GetStatus>
          break;
 800a86c:	e00e      	b.n	800a88c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fce3 	bl	800b23c <USBD_SetFeature>
          break;
 800a876:	e009      	b.n	800a88c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fd07 	bl	800b28e <USBD_ClrFeature>
          break;
 800a880:	e004      	b.n	800a88c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fd5e 	bl	800b346 <USBD_CtlError>
          break;
 800a88a:	bf00      	nop
      }
      break;
 800a88c:	e004      	b.n	800a898 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fd58 	bl	800b346 <USBD_CtlError>
      break;
 800a896:	bf00      	nop
  }

  return ret;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop

0800a8a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ba:	2b40      	cmp	r3, #64	; 0x40
 800a8bc:	d005      	beq.n	800a8ca <USBD_StdItfReq+0x26>
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	d852      	bhi.n	800a968 <USBD_StdItfReq+0xc4>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <USBD_StdItfReq+0x26>
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d14e      	bne.n	800a968 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d840      	bhi.n	800a95a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	889b      	ldrh	r3, [r3, #4]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d836      	bhi.n	800a950 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	889b      	ldrh	r3, [r3, #4]
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fed9 	bl	800a6a2 <USBD_CoreFindIF>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8f4:	7bbb      	ldrb	r3, [r7, #14]
 800a8f6:	2bff      	cmp	r3, #255	; 0xff
 800a8f8:	d01d      	beq.n	800a936 <USBD_StdItfReq+0x92>
 800a8fa:	7bbb      	ldrb	r3, [r7, #14]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d11a      	bne.n	800a936 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a900:	7bba      	ldrb	r2, [r7, #14]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	32ae      	adds	r2, #174	; 0xae
 800a906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00f      	beq.n	800a930 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a910:	7bba      	ldrb	r2, [r7, #14]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a918:	7bba      	ldrb	r2, [r7, #14]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	32ae      	adds	r2, #174	; 0xae
 800a91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	4798      	blx	r3
 800a92a:	4603      	mov	r3, r0
 800a92c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a92e:	e004      	b.n	800a93a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a930:	2303      	movs	r3, #3
 800a932:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a934:	e001      	b.n	800a93a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a936:	2303      	movs	r3, #3
 800a938:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	88db      	ldrh	r3, [r3, #6]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d110      	bne.n	800a964 <USBD_StdItfReq+0xc0>
 800a942:	7bfb      	ldrb	r3, [r7, #15]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10d      	bne.n	800a964 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fdc7 	bl	800b4dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a94e:	e009      	b.n	800a964 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fcf7 	bl	800b346 <USBD_CtlError>
          break;
 800a958:	e004      	b.n	800a964 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fcf2 	bl	800b346 <USBD_CtlError>
          break;
 800a962:	e000      	b.n	800a966 <USBD_StdItfReq+0xc2>
          break;
 800a964:	bf00      	nop
      }
      break;
 800a966:	e004      	b.n	800a972 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fceb 	bl	800b346 <USBD_CtlError>
      break;
 800a970:	bf00      	nop
  }

  return ret;
 800a972:	7bfb      	ldrb	r3, [r7, #15]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	889b      	ldrh	r3, [r3, #4]
 800a98e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a998:	2b40      	cmp	r3, #64	; 0x40
 800a99a:	d007      	beq.n	800a9ac <USBD_StdEPReq+0x30>
 800a99c:	2b40      	cmp	r3, #64	; 0x40
 800a99e:	f200 817f 	bhi.w	800aca0 <USBD_StdEPReq+0x324>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d02a      	beq.n	800a9fc <USBD_StdEPReq+0x80>
 800a9a6:	2b20      	cmp	r3, #32
 800a9a8:	f040 817a 	bne.w	800aca0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7ff fe83 	bl	800a6bc <USBD_CoreFindEP>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9ba:	7b7b      	ldrb	r3, [r7, #13]
 800a9bc:	2bff      	cmp	r3, #255	; 0xff
 800a9be:	f000 8174 	beq.w	800acaa <USBD_StdEPReq+0x32e>
 800a9c2:	7b7b      	ldrb	r3, [r7, #13]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f040 8170 	bne.w	800acaa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a9ca:	7b7a      	ldrb	r2, [r7, #13]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a9d2:	7b7a      	ldrb	r2, [r7, #13]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	32ae      	adds	r2, #174	; 0xae
 800a9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 8163 	beq.w	800acaa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a9e4:	7b7a      	ldrb	r2, [r7, #13]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	32ae      	adds	r2, #174	; 0xae
 800a9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	4798      	blx	r3
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a9fa:	e156      	b.n	800acaa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	785b      	ldrb	r3, [r3, #1]
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d008      	beq.n	800aa16 <USBD_StdEPReq+0x9a>
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	f300 8145 	bgt.w	800ac94 <USBD_StdEPReq+0x318>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 809b 	beq.w	800ab46 <USBD_StdEPReq+0x1ca>
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d03c      	beq.n	800aa8e <USBD_StdEPReq+0x112>
 800aa14:	e13e      	b.n	800ac94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d002      	beq.n	800aa28 <USBD_StdEPReq+0xac>
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d016      	beq.n	800aa54 <USBD_StdEPReq+0xd8>
 800aa26:	e02c      	b.n	800aa82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00d      	beq.n	800aa4a <USBD_StdEPReq+0xce>
 800aa2e:	7bbb      	ldrb	r3, [r7, #14]
 800aa30:	2b80      	cmp	r3, #128	; 0x80
 800aa32:	d00a      	beq.n	800aa4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa34:	7bbb      	ldrb	r3, [r7, #14]
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f004 f907 	bl	800ec4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa3e:	2180      	movs	r1, #128	; 0x80
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f004 f903 	bl	800ec4c <USBD_LL_StallEP>
 800aa46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa48:	e020      	b.n	800aa8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fc7a 	bl	800b346 <USBD_CtlError>
              break;
 800aa52:	e01b      	b.n	800aa8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	885b      	ldrh	r3, [r3, #2]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10e      	bne.n	800aa7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00b      	beq.n	800aa7a <USBD_StdEPReq+0xfe>
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	2b80      	cmp	r3, #128	; 0x80
 800aa66:	d008      	beq.n	800aa7a <USBD_StdEPReq+0xfe>
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	88db      	ldrh	r3, [r3, #6]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d104      	bne.n	800aa7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f004 f8e9 	bl	800ec4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fd2e 	bl	800b4dc <USBD_CtlSendStatus>

              break;
 800aa80:	e004      	b.n	800aa8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fc5e 	bl	800b346 <USBD_CtlError>
              break;
 800aa8a:	bf00      	nop
          }
          break;
 800aa8c:	e107      	b.n	800ac9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d002      	beq.n	800aaa0 <USBD_StdEPReq+0x124>
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d016      	beq.n	800aacc <USBD_StdEPReq+0x150>
 800aa9e:	e04b      	b.n	800ab38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00d      	beq.n	800aac2 <USBD_StdEPReq+0x146>
 800aaa6:	7bbb      	ldrb	r3, [r7, #14]
 800aaa8:	2b80      	cmp	r3, #128	; 0x80
 800aaaa:	d00a      	beq.n	800aac2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f004 f8cb 	bl	800ec4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aab6:	2180      	movs	r1, #128	; 0x80
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f004 f8c7 	bl	800ec4c <USBD_LL_StallEP>
 800aabe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aac0:	e040      	b.n	800ab44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fc3e 	bl	800b346 <USBD_CtlError>
              break;
 800aaca:	e03b      	b.n	800ab44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	885b      	ldrh	r3, [r3, #2]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d136      	bne.n	800ab42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d004      	beq.n	800aae8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aade:	7bbb      	ldrb	r3, [r7, #14]
 800aae0:	4619      	mov	r1, r3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f004 f8d1 	bl	800ec8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fcf7 	bl	800b4dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aaee:	7bbb      	ldrb	r3, [r7, #14]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7ff fde2 	bl	800a6bc <USBD_CoreFindEP>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aafc:	7b7b      	ldrb	r3, [r7, #13]
 800aafe:	2bff      	cmp	r3, #255	; 0xff
 800ab00:	d01f      	beq.n	800ab42 <USBD_StdEPReq+0x1c6>
 800ab02:	7b7b      	ldrb	r3, [r7, #13]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11c      	bne.n	800ab42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab08:	7b7a      	ldrb	r2, [r7, #13]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab10:	7b7a      	ldrb	r2, [r7, #13]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	32ae      	adds	r2, #174	; 0xae
 800ab16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d010      	beq.n	800ab42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab20:	7b7a      	ldrb	r2, [r7, #13]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	32ae      	adds	r2, #174	; 0xae
 800ab26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	4798      	blx	r3
 800ab32:	4603      	mov	r3, r0
 800ab34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ab36:	e004      	b.n	800ab42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fc03 	bl	800b346 <USBD_CtlError>
              break;
 800ab40:	e000      	b.n	800ab44 <USBD_StdEPReq+0x1c8>
              break;
 800ab42:	bf00      	nop
          }
          break;
 800ab44:	e0ab      	b.n	800ac9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d002      	beq.n	800ab58 <USBD_StdEPReq+0x1dc>
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d032      	beq.n	800abbc <USBD_StdEPReq+0x240>
 800ab56:	e097      	b.n	800ac88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d007      	beq.n	800ab6e <USBD_StdEPReq+0x1f2>
 800ab5e:	7bbb      	ldrb	r3, [r7, #14]
 800ab60:	2b80      	cmp	r3, #128	; 0x80
 800ab62:	d004      	beq.n	800ab6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab64:	6839      	ldr	r1, [r7, #0]
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fbed 	bl	800b346 <USBD_CtlError>
                break;
 800ab6c:	e091      	b.n	800ac92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	da0b      	bge.n	800ab8e <USBD_StdEPReq+0x212>
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	3310      	adds	r3, #16
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	4413      	add	r3, r2
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	e00b      	b.n	800aba6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	4413      	add	r3, r2
 800aba4:	3304      	adds	r3, #4
 800aba6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2200      	movs	r2, #0
 800abac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2202      	movs	r2, #2
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fc37 	bl	800b428 <USBD_CtlSendData>
              break;
 800abba:	e06a      	b.n	800ac92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	da11      	bge.n	800abe8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	f003 020f 	and.w	r2, r3, #15
 800abca:	6879      	ldr	r1, [r7, #4]
 800abcc:	4613      	mov	r3, r2
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	4413      	add	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	440b      	add	r3, r1
 800abd6:	3324      	adds	r3, #36	; 0x24
 800abd8:	881b      	ldrh	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d117      	bne.n	800ac0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 fbb0 	bl	800b346 <USBD_CtlError>
                  break;
 800abe6:	e054      	b.n	800ac92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800abe8:	7bbb      	ldrb	r3, [r7, #14]
 800abea:	f003 020f 	and.w	r2, r3, #15
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	440b      	add	r3, r1
 800abfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d104      	bne.n	800ac0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fb9d 	bl	800b346 <USBD_CtlError>
                  break;
 800ac0c:	e041      	b.n	800ac92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	da0b      	bge.n	800ac2e <USBD_StdEPReq+0x2b2>
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	3310      	adds	r3, #16
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	4413      	add	r3, r2
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	e00b      	b.n	800ac46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac2e:	7bbb      	ldrb	r3, [r7, #14]
 800ac30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac34:	4613      	mov	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	4413      	add	r3, r2
 800ac44:	3304      	adds	r3, #4
 800ac46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac48:	7bbb      	ldrb	r3, [r7, #14]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d002      	beq.n	800ac54 <USBD_StdEPReq+0x2d8>
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	2b80      	cmp	r3, #128	; 0x80
 800ac52:	d103      	bne.n	800ac5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2200      	movs	r2, #0
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	e00e      	b.n	800ac7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac5c:	7bbb      	ldrb	r3, [r7, #14]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f004 f831 	bl	800ecc8 <USBD_LL_IsStallEP>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d003      	beq.n	800ac74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	e002      	b.n	800ac7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2200      	movs	r2, #0
 800ac78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fbd1 	bl	800b428 <USBD_CtlSendData>
              break;
 800ac86:	e004      	b.n	800ac92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fb5b 	bl	800b346 <USBD_CtlError>
              break;
 800ac90:	bf00      	nop
          }
          break;
 800ac92:	e004      	b.n	800ac9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fb55 	bl	800b346 <USBD_CtlError>
          break;
 800ac9c:	bf00      	nop
      }
      break;
 800ac9e:	e005      	b.n	800acac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aca0:	6839      	ldr	r1, [r7, #0]
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fb4f 	bl	800b346 <USBD_CtlError>
      break;
 800aca8:	e000      	b.n	800acac <USBD_StdEPReq+0x330>
      break;
 800acaa:	bf00      	nop
  }

  return ret;
 800acac:	7bfb      	ldrb	r3, [r7, #15]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
	...

0800acb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acca:	2300      	movs	r3, #0
 800accc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	885b      	ldrh	r3, [r3, #2]
 800acd2:	0a1b      	lsrs	r3, r3, #8
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	3b01      	subs	r3, #1
 800acd8:	2b06      	cmp	r3, #6
 800acda:	f200 8128 	bhi.w	800af2e <USBD_GetDescriptor+0x276>
 800acde:	a201      	add	r2, pc, #4	; (adr r2, 800ace4 <USBD_GetDescriptor+0x2c>)
 800ace0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace4:	0800ad01 	.word	0x0800ad01
 800ace8:	0800ad19 	.word	0x0800ad19
 800acec:	0800ad59 	.word	0x0800ad59
 800acf0:	0800af2f 	.word	0x0800af2f
 800acf4:	0800af2f 	.word	0x0800af2f
 800acf8:	0800aecf 	.word	0x0800aecf
 800acfc:	0800aefb 	.word	0x0800aefb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	7c12      	ldrb	r2, [r2, #16]
 800ad0c:	f107 0108 	add.w	r1, r7, #8
 800ad10:	4610      	mov	r0, r2
 800ad12:	4798      	blx	r3
 800ad14:	60f8      	str	r0, [r7, #12]
      break;
 800ad16:	e112      	b.n	800af3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	7c1b      	ldrb	r3, [r3, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10d      	bne.n	800ad3c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad28:	f107 0208 	add.w	r2, r7, #8
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3301      	adds	r3, #1
 800ad36:	2202      	movs	r2, #2
 800ad38:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad3a:	e100      	b.n	800af3e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad44:	f107 0208 	add.w	r2, r7, #8
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
 800ad4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3301      	adds	r3, #1
 800ad52:	2202      	movs	r2, #2
 800ad54:	701a      	strb	r2, [r3, #0]
      break;
 800ad56:	e0f2      	b.n	800af3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	885b      	ldrh	r3, [r3, #2]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	f200 80ac 	bhi.w	800aebc <USBD_GetDescriptor+0x204>
 800ad64:	a201      	add	r2, pc, #4	; (adr r2, 800ad6c <USBD_GetDescriptor+0xb4>)
 800ad66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6a:	bf00      	nop
 800ad6c:	0800ad85 	.word	0x0800ad85
 800ad70:	0800adb9 	.word	0x0800adb9
 800ad74:	0800aded 	.word	0x0800aded
 800ad78:	0800ae21 	.word	0x0800ae21
 800ad7c:	0800ae55 	.word	0x0800ae55
 800ad80:	0800ae89 	.word	0x0800ae89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00b      	beq.n	800ada8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	7c12      	ldrb	r2, [r2, #16]
 800ad9c:	f107 0108 	add.w	r1, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ada6:	e091      	b.n	800aecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 facb 	bl	800b346 <USBD_CtlError>
            err++;
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	3301      	adds	r3, #1
 800adb4:	72fb      	strb	r3, [r7, #11]
          break;
 800adb6:	e089      	b.n	800aecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00b      	beq.n	800addc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	7c12      	ldrb	r2, [r2, #16]
 800add0:	f107 0108 	add.w	r1, r7, #8
 800add4:	4610      	mov	r0, r2
 800add6:	4798      	blx	r3
 800add8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adda:	e077      	b.n	800aecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fab1 	bl	800b346 <USBD_CtlError>
            err++;
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	3301      	adds	r3, #1
 800ade8:	72fb      	strb	r3, [r7, #11]
          break;
 800adea:	e06f      	b.n	800aecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00b      	beq.n	800ae10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	7c12      	ldrb	r2, [r2, #16]
 800ae04:	f107 0108 	add.w	r1, r7, #8
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4798      	blx	r3
 800ae0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae0e:	e05d      	b.n	800aecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fa97 	bl	800b346 <USBD_CtlError>
            err++;
 800ae18:	7afb      	ldrb	r3, [r7, #11]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae1e:	e055      	b.n	800aecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	7c12      	ldrb	r2, [r2, #16]
 800ae38:	f107 0108 	add.w	r1, r7, #8
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae42:	e043      	b.n	800aecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fa7d 	bl	800b346 <USBD_CtlError>
            err++;
 800ae4c:	7afb      	ldrb	r3, [r7, #11]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	72fb      	strb	r3, [r7, #11]
          break;
 800ae52:	e03b      	b.n	800aecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00b      	beq.n	800ae78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	7c12      	ldrb	r2, [r2, #16]
 800ae6c:	f107 0108 	add.w	r1, r7, #8
 800ae70:	4610      	mov	r0, r2
 800ae72:	4798      	blx	r3
 800ae74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae76:	e029      	b.n	800aecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fa63 	bl	800b346 <USBD_CtlError>
            err++;
 800ae80:	7afb      	ldrb	r3, [r7, #11]
 800ae82:	3301      	adds	r3, #1
 800ae84:	72fb      	strb	r3, [r7, #11]
          break;
 800ae86:	e021      	b.n	800aecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	7c12      	ldrb	r2, [r2, #16]
 800aea0:	f107 0108 	add.w	r1, r7, #8
 800aea4:	4610      	mov	r0, r2
 800aea6:	4798      	blx	r3
 800aea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeaa:	e00f      	b.n	800aecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fa49 	bl	800b346 <USBD_CtlError>
            err++;
 800aeb4:	7afb      	ldrb	r3, [r7, #11]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeba:	e007      	b.n	800aecc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fa41 	bl	800b346 <USBD_CtlError>
          err++;
 800aec4:	7afb      	ldrb	r3, [r7, #11]
 800aec6:	3301      	adds	r3, #1
 800aec8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aeca:	bf00      	nop
      }
      break;
 800aecc:	e037      	b.n	800af3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	7c1b      	ldrb	r3, [r3, #16]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d109      	bne.n	800aeea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aede:	f107 0208 	add.w	r2, r7, #8
 800aee2:	4610      	mov	r0, r2
 800aee4:	4798      	blx	r3
 800aee6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aee8:	e029      	b.n	800af3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fa2a 	bl	800b346 <USBD_CtlError>
        err++;
 800aef2:	7afb      	ldrb	r3, [r7, #11]
 800aef4:	3301      	adds	r3, #1
 800aef6:	72fb      	strb	r3, [r7, #11]
      break;
 800aef8:	e021      	b.n	800af3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	7c1b      	ldrb	r3, [r3, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10d      	bne.n	800af1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0a:	f107 0208 	add.w	r2, r7, #8
 800af0e:	4610      	mov	r0, r2
 800af10:	4798      	blx	r3
 800af12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3301      	adds	r3, #1
 800af18:	2207      	movs	r2, #7
 800af1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af1c:	e00f      	b.n	800af3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fa10 	bl	800b346 <USBD_CtlError>
        err++;
 800af26:	7afb      	ldrb	r3, [r7, #11]
 800af28:	3301      	adds	r3, #1
 800af2a:	72fb      	strb	r3, [r7, #11]
      break;
 800af2c:	e007      	b.n	800af3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fa08 	bl	800b346 <USBD_CtlError>
      err++;
 800af36:	7afb      	ldrb	r3, [r7, #11]
 800af38:	3301      	adds	r3, #1
 800af3a:	72fb      	strb	r3, [r7, #11]
      break;
 800af3c:	bf00      	nop
  }

  if (err != 0U)
 800af3e:	7afb      	ldrb	r3, [r7, #11]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d11e      	bne.n	800af82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	88db      	ldrh	r3, [r3, #6]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d016      	beq.n	800af7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800af4c:	893b      	ldrh	r3, [r7, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00e      	beq.n	800af70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	88da      	ldrh	r2, [r3, #6]
 800af56:	893b      	ldrh	r3, [r7, #8]
 800af58:	4293      	cmp	r3, r2
 800af5a:	bf28      	it	cs
 800af5c:	4613      	movcs	r3, r2
 800af5e:	b29b      	uxth	r3, r3
 800af60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af62:	893b      	ldrh	r3, [r7, #8]
 800af64:	461a      	mov	r2, r3
 800af66:	68f9      	ldr	r1, [r7, #12]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fa5d 	bl	800b428 <USBD_CtlSendData>
 800af6e:	e009      	b.n	800af84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f9e7 	bl	800b346 <USBD_CtlError>
 800af78:	e004      	b.n	800af84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 faae 	bl	800b4dc <USBD_CtlSendStatus>
 800af80:	e000      	b.n	800af84 <USBD_GetDescriptor+0x2cc>
    return;
 800af82:	bf00      	nop
  }
}
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop

0800af8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	889b      	ldrh	r3, [r3, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d131      	bne.n	800b002 <USBD_SetAddress+0x76>
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	88db      	ldrh	r3, [r3, #6]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d12d      	bne.n	800b002 <USBD_SetAddress+0x76>
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	885b      	ldrh	r3, [r3, #2]
 800afaa:	2b7f      	cmp	r3, #127	; 0x7f
 800afac:	d829      	bhi.n	800b002 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	885b      	ldrh	r3, [r3, #2]
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d104      	bne.n	800afd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f9bc 	bl	800b346 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afce:	e01d      	b.n	800b00c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	7bfa      	ldrb	r2, [r7, #15]
 800afd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afd8:	7bfb      	ldrb	r3, [r7, #15]
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f003 fe9f 	bl	800ed20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fa7a 	bl	800b4dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d004      	beq.n	800aff8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2202      	movs	r2, #2
 800aff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff6:	e009      	b.n	800b00c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b000:	e004      	b.n	800b00c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f99e 	bl	800b346 <USBD_CtlError>
  }
}
 800b00a:	bf00      	nop
 800b00c:	bf00      	nop
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	885b      	ldrh	r3, [r3, #2]
 800b026:	b2da      	uxtb	r2, r3
 800b028:	4b4e      	ldr	r3, [pc, #312]	; (800b164 <USBD_SetConfig+0x150>)
 800b02a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b02c:	4b4d      	ldr	r3, [pc, #308]	; (800b164 <USBD_SetConfig+0x150>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d905      	bls.n	800b040 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f985 	bl	800b346 <USBD_CtlError>
    return USBD_FAIL;
 800b03c:	2303      	movs	r3, #3
 800b03e:	e08c      	b.n	800b15a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b046:	b2db      	uxtb	r3, r3
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d002      	beq.n	800b052 <USBD_SetConfig+0x3e>
 800b04c:	2b03      	cmp	r3, #3
 800b04e:	d029      	beq.n	800b0a4 <USBD_SetConfig+0x90>
 800b050:	e075      	b.n	800b13e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b052:	4b44      	ldr	r3, [pc, #272]	; (800b164 <USBD_SetConfig+0x150>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d020      	beq.n	800b09c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b05a:	4b42      	ldr	r3, [pc, #264]	; (800b164 <USBD_SetConfig+0x150>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b064:	4b3f      	ldr	r3, [pc, #252]	; (800b164 <USBD_SetConfig+0x150>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7fe ffe7 	bl	800a03e <USBD_SetClassConfig>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f962 	bl	800b346 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2202      	movs	r2, #2
 800b086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b08a:	e065      	b.n	800b158 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fa25 	bl	800b4dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2203      	movs	r2, #3
 800b096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b09a:	e05d      	b.n	800b158 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 fa1d 	bl	800b4dc <USBD_CtlSendStatus>
      break;
 800b0a2:	e059      	b.n	800b158 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b0a4:	4b2f      	ldr	r3, [pc, #188]	; (800b164 <USBD_SetConfig+0x150>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d112      	bne.n	800b0d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b0b4:	4b2b      	ldr	r3, [pc, #172]	; (800b164 <USBD_SetConfig+0x150>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0be:	4b29      	ldr	r3, [pc, #164]	; (800b164 <USBD_SetConfig+0x150>)
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7fe ffd6 	bl	800a076 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fa06 	bl	800b4dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0d0:	e042      	b.n	800b158 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b0d2:	4b24      	ldr	r3, [pc, #144]	; (800b164 <USBD_SetConfig+0x150>)
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d02a      	beq.n	800b136 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7fe ffc4 	bl	800a076 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b0ee:	4b1d      	ldr	r3, [pc, #116]	; (800b164 <USBD_SetConfig+0x150>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0f8:	4b1a      	ldr	r3, [pc, #104]	; (800b164 <USBD_SetConfig+0x150>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7fe ff9d 	bl	800a03e <USBD_SetClassConfig>
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00f      	beq.n	800b12e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f918 	bl	800b346 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7fe ffa9 	bl	800a076 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2202      	movs	r2, #2
 800b128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b12c:	e014      	b.n	800b158 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f9d4 	bl	800b4dc <USBD_CtlSendStatus>
      break;
 800b134:	e010      	b.n	800b158 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f9d0 	bl	800b4dc <USBD_CtlSendStatus>
      break;
 800b13c:	e00c      	b.n	800b158 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f900 	bl	800b346 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b146:	4b07      	ldr	r3, [pc, #28]	; (800b164 <USBD_SetConfig+0x150>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7fe ff92 	bl	800a076 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b152:	2303      	movs	r3, #3
 800b154:	73fb      	strb	r3, [r7, #15]
      break;
 800b156:	bf00      	nop
  }

  return ret;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	200003b4 	.word	0x200003b4

0800b168 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	88db      	ldrh	r3, [r3, #6]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d004      	beq.n	800b184 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f8e2 	bl	800b346 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b182:	e023      	b.n	800b1cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	dc02      	bgt.n	800b196 <USBD_GetConfig+0x2e>
 800b190:	2b00      	cmp	r3, #0
 800b192:	dc03      	bgt.n	800b19c <USBD_GetConfig+0x34>
 800b194:	e015      	b.n	800b1c2 <USBD_GetConfig+0x5a>
 800b196:	2b03      	cmp	r3, #3
 800b198:	d00b      	beq.n	800b1b2 <USBD_GetConfig+0x4a>
 800b19a:	e012      	b.n	800b1c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f93c 	bl	800b428 <USBD_CtlSendData>
        break;
 800b1b0:	e00c      	b.n	800b1cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f934 	bl	800b428 <USBD_CtlSendData>
        break;
 800b1c0:	e004      	b.n	800b1cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f8be 	bl	800b346 <USBD_CtlError>
        break;
 800b1ca:	bf00      	nop
}
 800b1cc:	bf00      	nop
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d81e      	bhi.n	800b22a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	88db      	ldrh	r3, [r3, #6]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d004      	beq.n	800b1fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f8a5 	bl	800b346 <USBD_CtlError>
        break;
 800b1fc:	e01a      	b.n	800b234 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d005      	beq.n	800b21a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	f043 0202 	orr.w	r2, r3, #2
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	330c      	adds	r3, #12
 800b21e:	2202      	movs	r2, #2
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f900 	bl	800b428 <USBD_CtlSendData>
      break;
 800b228:	e004      	b.n	800b234 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f88a 	bl	800b346 <USBD_CtlError>
      break;
 800b232:	bf00      	nop
  }
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	885b      	ldrh	r3, [r3, #2]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d107      	bne.n	800b25e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f940 	bl	800b4dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b25c:	e013      	b.n	800b286 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	885b      	ldrh	r3, [r3, #2]
 800b262:	2b02      	cmp	r3, #2
 800b264:	d10b      	bne.n	800b27e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	889b      	ldrh	r3, [r3, #4]
 800b26a:	0a1b      	lsrs	r3, r3, #8
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f930 	bl	800b4dc <USBD_CtlSendStatus>
}
 800b27c:	e003      	b.n	800b286 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f860 	bl	800b346 <USBD_CtlError>
}
 800b286:	bf00      	nop
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b082      	sub	sp, #8
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	d80b      	bhi.n	800b2be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	885b      	ldrh	r3, [r3, #2]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d10c      	bne.n	800b2c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f910 	bl	800b4dc <USBD_CtlSendStatus>
      }
      break;
 800b2bc:	e004      	b.n	800b2c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f840 	bl	800b346 <USBD_CtlError>
      break;
 800b2c6:	e000      	b.n	800b2ca <USBD_ClrFeature+0x3c>
      break;
 800b2c8:	bf00      	nop
  }
}
 800b2ca:	bf00      	nop
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	781a      	ldrb	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	781a      	ldrb	r2, [r3, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7ff fa41 	bl	800a784 <SWAPBYTE>
 800b302:	4603      	mov	r3, r0
 800b304:	461a      	mov	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3301      	adds	r3, #1
 800b30e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3301      	adds	r3, #1
 800b314:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7ff fa34 	bl	800a784 <SWAPBYTE>
 800b31c:	4603      	mov	r3, r0
 800b31e:	461a      	mov	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3301      	adds	r3, #1
 800b328:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3301      	adds	r3, #1
 800b32e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f7ff fa27 	bl	800a784 <SWAPBYTE>
 800b336:	4603      	mov	r3, r0
 800b338:	461a      	mov	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	80da      	strh	r2, [r3, #6]
}
 800b33e:	bf00      	nop
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b350:	2180      	movs	r1, #128	; 0x80
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f003 fc7a 	bl	800ec4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b358:	2100      	movs	r1, #0
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f003 fc76 	bl	800ec4c <USBD_LL_StallEP>
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b374:	2300      	movs	r3, #0
 800b376:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d036      	beq.n	800b3ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b382:	6938      	ldr	r0, [r7, #16]
 800b384:	f000 f836 	bl	800b3f4 <USBD_GetLen>
 800b388:	4603      	mov	r3, r0
 800b38a:	3301      	adds	r3, #1
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	005b      	lsls	r3, r3, #1
 800b390:	b29a      	uxth	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b396:	7dfb      	ldrb	r3, [r7, #23]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	4413      	add	r3, r2
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	7812      	ldrb	r2, [r2, #0]
 800b3a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3a2:	7dfb      	ldrb	r3, [r7, #23]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b3b8:	e013      	b.n	800b3e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b3ba:	7dfb      	ldrb	r3, [r7, #23]
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	4413      	add	r3, r2
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	7812      	ldrb	r2, [r2, #0]
 800b3c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	613b      	str	r3, [r7, #16]
    idx++;
 800b3cc:	7dfb      	ldrb	r3, [r7, #23]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	2200      	movs	r2, #0
 800b3da:	701a      	strb	r2, [r3, #0]
    idx++;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1e7      	bne.n	800b3ba <USBD_GetString+0x52>
 800b3ea:	e000      	b.n	800b3ee <USBD_GetString+0x86>
    return;
 800b3ec:	bf00      	nop
  }
}
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b404:	e005      	b.n	800b412 <USBD_GetLen+0x1e>
  {
    len++;
 800b406:	7bfb      	ldrb	r3, [r7, #15]
 800b408:	3301      	adds	r3, #1
 800b40a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	3301      	adds	r3, #1
 800b410:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1f5      	bne.n	800b406 <USBD_GetLen+0x12>
  }

  return len;
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2202      	movs	r2, #2
 800b438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	2100      	movs	r1, #0
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f003 fc85 	bl	800ed5e <USBD_LL_Transmit>

  return USBD_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	60b9      	str	r1, [r7, #8]
 800b468:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	2100      	movs	r1, #0
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f003 fc74 	bl	800ed5e <USBD_LL_Transmit>

  return USBD_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2203      	movs	r2, #3
 800b490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f003 fc78 	bl	800eda0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	60f8      	str	r0, [r7, #12]
 800b4c2:	60b9      	str	r1, [r7, #8]
 800b4c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f003 fc67 	bl	800eda0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2204      	movs	r2, #4
 800b4e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f003 fc33 	bl	800ed5e <USBD_LL_Transmit>

  return USBD_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b082      	sub	sp, #8
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2205      	movs	r2, #5
 800b50e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b512:	2300      	movs	r3, #0
 800b514:	2200      	movs	r2, #0
 800b516:	2100      	movs	r1, #0
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f003 fc41 	bl	800eda0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <__NVIC_SetPriority>:
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	6039      	str	r1, [r7, #0]
 800b532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	db0a      	blt.n	800b552 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	490c      	ldr	r1, [pc, #48]	; (800b574 <__NVIC_SetPriority+0x4c>)
 800b542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b546:	0112      	lsls	r2, r2, #4
 800b548:	b2d2      	uxtb	r2, r2
 800b54a:	440b      	add	r3, r1
 800b54c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b550:	e00a      	b.n	800b568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	b2da      	uxtb	r2, r3
 800b556:	4908      	ldr	r1, [pc, #32]	; (800b578 <__NVIC_SetPriority+0x50>)
 800b558:	79fb      	ldrb	r3, [r7, #7]
 800b55a:	f003 030f 	and.w	r3, r3, #15
 800b55e:	3b04      	subs	r3, #4
 800b560:	0112      	lsls	r2, r2, #4
 800b562:	b2d2      	uxtb	r2, r2
 800b564:	440b      	add	r3, r1
 800b566:	761a      	strb	r2, [r3, #24]
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	e000e100 	.word	0xe000e100
 800b578:	e000ed00 	.word	0xe000ed00

0800b57c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b57c:	b580      	push	{r7, lr}
 800b57e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b580:	4b05      	ldr	r3, [pc, #20]	; (800b598 <SysTick_Handler+0x1c>)
 800b582:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b584:	f001 ff36 	bl	800d3f4 <xTaskGetSchedulerState>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d001      	beq.n	800b592 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b58e:	f002 fd1b 	bl	800dfc8 <xPortSysTickHandler>
  }
}
 800b592:	bf00      	nop
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	e000e010 	.word	0xe000e010

0800b59c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b59c:	b580      	push	{r7, lr}
 800b59e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	f06f 0004 	mvn.w	r0, #4
 800b5a6:	f7ff ffbf 	bl	800b528 <__NVIC_SetPriority>
#endif
}
 800b5aa:	bf00      	nop
 800b5ac:	bd80      	pop	{r7, pc}
	...

0800b5b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5b6:	f3ef 8305 	mrs	r3, IPSR
 800b5ba:	603b      	str	r3, [r7, #0]
  return(result);
 800b5bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d003      	beq.n	800b5ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b5c2:	f06f 0305 	mvn.w	r3, #5
 800b5c6:	607b      	str	r3, [r7, #4]
 800b5c8:	e00c      	b.n	800b5e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b5ca:	4b0a      	ldr	r3, [pc, #40]	; (800b5f4 <osKernelInitialize+0x44>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d105      	bne.n	800b5de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b5d2:	4b08      	ldr	r3, [pc, #32]	; (800b5f4 <osKernelInitialize+0x44>)
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	607b      	str	r3, [r7, #4]
 800b5dc:	e002      	b.n	800b5e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b5de:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b5e4:	687b      	ldr	r3, [r7, #4]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	370c      	adds	r7, #12
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	200003b8 	.word	0x200003b8

0800b5f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5fe:	f3ef 8305 	mrs	r3, IPSR
 800b602:	603b      	str	r3, [r7, #0]
  return(result);
 800b604:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b606:	2b00      	cmp	r3, #0
 800b608:	d003      	beq.n	800b612 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b60a:	f06f 0305 	mvn.w	r3, #5
 800b60e:	607b      	str	r3, [r7, #4]
 800b610:	e010      	b.n	800b634 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b612:	4b0b      	ldr	r3, [pc, #44]	; (800b640 <osKernelStart+0x48>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b01      	cmp	r3, #1
 800b618:	d109      	bne.n	800b62e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b61a:	f7ff ffbf 	bl	800b59c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b61e:	4b08      	ldr	r3, [pc, #32]	; (800b640 <osKernelStart+0x48>)
 800b620:	2202      	movs	r2, #2
 800b622:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b624:	f001 fa6a 	bl	800cafc <vTaskStartScheduler>
      stat = osOK;
 800b628:	2300      	movs	r3, #0
 800b62a:	607b      	str	r3, [r7, #4]
 800b62c:	e002      	b.n	800b634 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b62e:	f04f 33ff 	mov.w	r3, #4294967295
 800b632:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b634:	687b      	ldr	r3, [r7, #4]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	200003b8 	.word	0x200003b8

0800b644 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b644:	b580      	push	{r7, lr}
 800b646:	b08e      	sub	sp, #56	; 0x38
 800b648:	af04      	add	r7, sp, #16
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b650:	2300      	movs	r3, #0
 800b652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b654:	f3ef 8305 	mrs	r3, IPSR
 800b658:	617b      	str	r3, [r7, #20]
  return(result);
 800b65a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d17e      	bne.n	800b75e <osThreadNew+0x11a>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d07b      	beq.n	800b75e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b666:	2380      	movs	r3, #128	; 0x80
 800b668:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b66a:	2318      	movs	r3, #24
 800b66c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b66e:	2300      	movs	r3, #0
 800b670:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b672:	f04f 33ff 	mov.w	r3, #4294967295
 800b676:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d045      	beq.n	800b70a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d002      	beq.n	800b68c <osThreadNew+0x48>
        name = attr->name;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d008      	beq.n	800b6b2 <osThreadNew+0x6e>
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	2b38      	cmp	r3, #56	; 0x38
 800b6a4:	d805      	bhi.n	800b6b2 <osThreadNew+0x6e>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <osThreadNew+0x72>
        return (NULL);
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e054      	b.n	800b760 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	695b      	ldr	r3, [r3, #20]
 800b6c2:	089b      	lsrs	r3, r3, #2
 800b6c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00e      	beq.n	800b6ec <osThreadNew+0xa8>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	2bbf      	cmp	r3, #191	; 0xbf
 800b6d4:	d90a      	bls.n	800b6ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d006      	beq.n	800b6ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <osThreadNew+0xa8>
        mem = 1;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	61bb      	str	r3, [r7, #24]
 800b6ea:	e010      	b.n	800b70e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10c      	bne.n	800b70e <osThreadNew+0xca>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d108      	bne.n	800b70e <osThreadNew+0xca>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d104      	bne.n	800b70e <osThreadNew+0xca>
          mem = 0;
 800b704:	2300      	movs	r3, #0
 800b706:	61bb      	str	r3, [r7, #24]
 800b708:	e001      	b.n	800b70e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d110      	bne.n	800b736 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b71c:	9202      	str	r2, [sp, #8]
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	6a3a      	ldr	r2, [r7, #32]
 800b728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f000 fff6 	bl	800c71c <xTaskCreateStatic>
 800b730:	4603      	mov	r3, r0
 800b732:	613b      	str	r3, [r7, #16]
 800b734:	e013      	b.n	800b75e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d110      	bne.n	800b75e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	b29a      	uxth	r2, r3
 800b740:	f107 0310 	add.w	r3, r7, #16
 800b744:	9301      	str	r3, [sp, #4]
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f001 f841 	bl	800c7d6 <xTaskCreate>
 800b754:	4603      	mov	r3, r0
 800b756:	2b01      	cmp	r3, #1
 800b758:	d001      	beq.n	800b75e <osThreadNew+0x11a>
            hTask = NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b75e:	693b      	ldr	r3, [r7, #16]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3728      	adds	r7, #40	; 0x28
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b770:	f3ef 8305 	mrs	r3, IPSR
 800b774:	60bb      	str	r3, [r7, #8]
  return(result);
 800b776:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d003      	beq.n	800b784 <osDelay+0x1c>
    stat = osErrorISR;
 800b77c:	f06f 0305 	mvn.w	r3, #5
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	e007      	b.n	800b794 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b784:	2300      	movs	r3, #0
 800b786:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 f980 	bl	800ca94 <vTaskDelay>
    }
  }

  return (stat);
 800b794:	68fb      	ldr	r3, [r7, #12]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b08a      	sub	sp, #40	; 0x28
 800b7a2:	af02      	add	r7, sp, #8
 800b7a4:	60f8      	str	r0, [r7, #12]
 800b7a6:	60b9      	str	r1, [r7, #8]
 800b7a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7ae:	f3ef 8305 	mrs	r3, IPSR
 800b7b2:	613b      	str	r3, [r7, #16]
  return(result);
 800b7b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d15f      	bne.n	800b87a <osMessageQueueNew+0xdc>
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d05c      	beq.n	800b87a <osMessageQueueNew+0xdc>
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d059      	beq.n	800b87a <osMessageQueueNew+0xdc>
    mem = -1;
 800b7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d029      	beq.n	800b826 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d012      	beq.n	800b800 <osMessageQueueNew+0x62>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	2b4f      	cmp	r3, #79	; 0x4f
 800b7e0:	d90e      	bls.n	800b800 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00a      	beq.n	800b800 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	695a      	ldr	r2, [r3, #20]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	68b9      	ldr	r1, [r7, #8]
 800b7f2:	fb01 f303 	mul.w	r3, r1, r3
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d302      	bcc.n	800b800 <osMessageQueueNew+0x62>
        mem = 1;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	61bb      	str	r3, [r7, #24]
 800b7fe:	e014      	b.n	800b82a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d110      	bne.n	800b82a <osMessageQueueNew+0x8c>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10c      	bne.n	800b82a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b814:	2b00      	cmp	r3, #0
 800b816:	d108      	bne.n	800b82a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	695b      	ldr	r3, [r3, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d104      	bne.n	800b82a <osMessageQueueNew+0x8c>
          mem = 0;
 800b820:	2300      	movs	r3, #0
 800b822:	61bb      	str	r3, [r7, #24]
 800b824:	e001      	b.n	800b82a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d10b      	bne.n	800b848 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	691a      	ldr	r2, [r3, #16]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	2100      	movs	r1, #0
 800b83a:	9100      	str	r1, [sp, #0]
 800b83c:	68b9      	ldr	r1, [r7, #8]
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 fa2e 	bl	800bca0 <xQueueGenericCreateStatic>
 800b844:	61f8      	str	r0, [r7, #28]
 800b846:	e008      	b.n	800b85a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d105      	bne.n	800b85a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b84e:	2200      	movs	r2, #0
 800b850:	68b9      	ldr	r1, [r7, #8]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 fa9c 	bl	800bd90 <xQueueGenericCreate>
 800b858:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00c      	beq.n	800b87a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d003      	beq.n	800b86e <osMessageQueueNew+0xd0>
        name = attr->name;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	617b      	str	r3, [r7, #20]
 800b86c:	e001      	b.n	800b872 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b872:	6979      	ldr	r1, [r7, #20]
 800b874:	69f8      	ldr	r0, [r7, #28]
 800b876:	f000 fef3 	bl	800c660 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b87a:	69fb      	ldr	r3, [r7, #28]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3720      	adds	r7, #32
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b884:	b580      	push	{r7, lr}
 800b886:	b088      	sub	sp, #32
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	603b      	str	r3, [r7, #0]
 800b890:	4613      	mov	r3, r2
 800b892:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b898:	2300      	movs	r3, #0
 800b89a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b89c:	f3ef 8305 	mrs	r3, IPSR
 800b8a0:	617b      	str	r3, [r7, #20]
  return(result);
 800b8a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d028      	beq.n	800b8fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d005      	beq.n	800b8ba <osMessageQueuePut+0x36>
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <osMessageQueuePut+0x36>
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b8ba:	f06f 0303 	mvn.w	r3, #3
 800b8be:	61fb      	str	r3, [r7, #28]
 800b8c0:	e038      	b.n	800b934 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b8c6:	f107 0210 	add.w	r2, r7, #16
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	68b9      	ldr	r1, [r7, #8]
 800b8ce:	69b8      	ldr	r0, [r7, #24]
 800b8d0:	f000 fbba 	bl	800c048 <xQueueGenericSendFromISR>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d003      	beq.n	800b8e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b8da:	f06f 0302 	mvn.w	r3, #2
 800b8de:	61fb      	str	r3, [r7, #28]
 800b8e0:	e028      	b.n	800b934 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d025      	beq.n	800b934 <osMessageQueuePut+0xb0>
 800b8e8:	4b15      	ldr	r3, [pc, #84]	; (800b940 <osMessageQueuePut+0xbc>)
 800b8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	e01c      	b.n	800b934 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <osMessageQueuePut+0x82>
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d103      	bne.n	800b90e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b906:	f06f 0303 	mvn.w	r3, #3
 800b90a:	61fb      	str	r3, [r7, #28]
 800b90c:	e012      	b.n	800b934 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b90e:	2300      	movs	r3, #0
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	68b9      	ldr	r1, [r7, #8]
 800b914:	69b8      	ldr	r0, [r7, #24]
 800b916:	f000 fa99 	bl	800be4c <xQueueGenericSend>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d009      	beq.n	800b934 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d003      	beq.n	800b92e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b926:	f06f 0301 	mvn.w	r3, #1
 800b92a:	61fb      	str	r3, [r7, #28]
 800b92c:	e002      	b.n	800b934 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b92e:	f06f 0302 	mvn.w	r3, #2
 800b932:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b934:	69fb      	ldr	r3, [r7, #28]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3720      	adds	r7, #32
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	e000ed04 	.word	0xe000ed04

0800b944 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b944:	b580      	push	{r7, lr}
 800b946:	b088      	sub	sp, #32
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
 800b950:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b956:	2300      	movs	r3, #0
 800b958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b95a:	f3ef 8305 	mrs	r3, IPSR
 800b95e:	617b      	str	r3, [r7, #20]
  return(result);
 800b960:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b962:	2b00      	cmp	r3, #0
 800b964:	d028      	beq.n	800b9b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d005      	beq.n	800b978 <osMessageQueueGet+0x34>
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d002      	beq.n	800b978 <osMessageQueueGet+0x34>
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d003      	beq.n	800b980 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b978:	f06f 0303 	mvn.w	r3, #3
 800b97c:	61fb      	str	r3, [r7, #28]
 800b97e:	e037      	b.n	800b9f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b980:	2300      	movs	r3, #0
 800b982:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b984:	f107 0310 	add.w	r3, r7, #16
 800b988:	461a      	mov	r2, r3
 800b98a:	68b9      	ldr	r1, [r7, #8]
 800b98c:	69b8      	ldr	r0, [r7, #24]
 800b98e:	f000 fcd7 	bl	800c340 <xQueueReceiveFromISR>
 800b992:	4603      	mov	r3, r0
 800b994:	2b01      	cmp	r3, #1
 800b996:	d003      	beq.n	800b9a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b998:	f06f 0302 	mvn.w	r3, #2
 800b99c:	61fb      	str	r3, [r7, #28]
 800b99e:	e027      	b.n	800b9f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d024      	beq.n	800b9f0 <osMessageQueueGet+0xac>
 800b9a6:	4b15      	ldr	r3, [pc, #84]	; (800b9fc <osMessageQueueGet+0xb8>)
 800b9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	e01b      	b.n	800b9f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d002      	beq.n	800b9c4 <osMessageQueueGet+0x80>
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d103      	bne.n	800b9cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b9c4:	f06f 0303 	mvn.w	r3, #3
 800b9c8:	61fb      	str	r3, [r7, #28]
 800b9ca:	e011      	b.n	800b9f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b9cc:	683a      	ldr	r2, [r7, #0]
 800b9ce:	68b9      	ldr	r1, [r7, #8]
 800b9d0:	69b8      	ldr	r0, [r7, #24]
 800b9d2:	f000 fbd5 	bl	800c180 <xQueueReceive>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d009      	beq.n	800b9f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b9e2:	f06f 0301 	mvn.w	r3, #1
 800b9e6:	61fb      	str	r3, [r7, #28]
 800b9e8:	e002      	b.n	800b9f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b9ea:	f06f 0302 	mvn.w	r3, #2
 800b9ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b9f0:	69fb      	ldr	r3, [r7, #28]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3720      	adds	r7, #32
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	e000ed04 	.word	0xe000ed04

0800ba00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	4a07      	ldr	r2, [pc, #28]	; (800ba2c <vApplicationGetIdleTaskMemory+0x2c>)
 800ba10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	4a06      	ldr	r2, [pc, #24]	; (800ba30 <vApplicationGetIdleTaskMemory+0x30>)
 800ba16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2280      	movs	r2, #128	; 0x80
 800ba1c:	601a      	str	r2, [r3, #0]
}
 800ba1e:	bf00      	nop
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	200003bc 	.word	0x200003bc
 800ba30:	2000047c 	.word	0x2000047c

0800ba34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	4a07      	ldr	r2, [pc, #28]	; (800ba60 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	4a06      	ldr	r2, [pc, #24]	; (800ba64 <vApplicationGetTimerTaskMemory+0x30>)
 800ba4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba52:	601a      	str	r2, [r3, #0]
}
 800ba54:	bf00      	nop
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr
 800ba60:	2000067c 	.word	0x2000067c
 800ba64:	2000073c 	.word	0x2000073c

0800ba68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f103 0208 	add.w	r2, r3, #8
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f103 0208 	add.w	r2, r3, #8
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f103 0208 	add.w	r2, r3, #8
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bab6:	bf00      	nop
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bac2:	b480      	push	{r7}
 800bac4:	b085      	sub	sp, #20
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	689a      	ldr	r2, [r3, #8]
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	683a      	ldr	r2, [r7, #0]
 800bae6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	601a      	str	r2, [r3, #0]
}
 800bafe:	bf00      	nop
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b085      	sub	sp, #20
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb20:	d103      	bne.n	800bb2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	e00c      	b.n	800bb44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	3308      	adds	r3, #8
 800bb2e:	60fb      	str	r3, [r7, #12]
 800bb30:	e002      	b.n	800bb38 <vListInsert+0x2e>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	60fb      	str	r3, [r7, #12]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d2f6      	bcs.n	800bb32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	683a      	ldr	r2, [r7, #0]
 800bb5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	601a      	str	r2, [r3, #0]
}
 800bb70:	bf00      	nop
 800bb72:	3714      	adds	r7, #20
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	6892      	ldr	r2, [r2, #8]
 800bb92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	6852      	ldr	r2, [r2, #4]
 800bb9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d103      	bne.n	800bbb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	689a      	ldr	r2, [r3, #8]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	1e5a      	subs	r2, r3, #1
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10a      	bne.n	800bbfa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bbf6:	bf00      	nop
 800bbf8:	e7fe      	b.n	800bbf8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bbfa:	f002 f953 	bl	800dea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc06:	68f9      	ldr	r1, [r7, #12]
 800bc08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc0a:	fb01 f303 	mul.w	r3, r1, r3
 800bc0e:	441a      	add	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	68f9      	ldr	r1, [r7, #12]
 800bc2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc30:	fb01 f303 	mul.w	r3, r1, r3
 800bc34:	441a      	add	r2, r3
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	22ff      	movs	r2, #255	; 0xff
 800bc3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	22ff      	movs	r2, #255	; 0xff
 800bc46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d114      	bne.n	800bc7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	691b      	ldr	r3, [r3, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d01a      	beq.n	800bc8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	3310      	adds	r3, #16
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f001 fa05 	bl	800d06c <xTaskRemoveFromEventList>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d012      	beq.n	800bc8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc68:	4b0c      	ldr	r3, [pc, #48]	; (800bc9c <xQueueGenericReset+0xcc>)
 800bc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	e009      	b.n	800bc8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	3310      	adds	r3, #16
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff fef2 	bl	800ba68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3324      	adds	r3, #36	; 0x24
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7ff feed 	bl	800ba68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc8e:	f002 f939 	bl	800df04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc92:	2301      	movs	r3, #1
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	e000ed04 	.word	0xe000ed04

0800bca0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b08e      	sub	sp, #56	; 0x38
 800bca4:	af02      	add	r7, sp, #8
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
 800bcac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <xQueueGenericCreateStatic+0x52>
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d001      	beq.n	800bcf6 <xQueueGenericCreateStatic+0x56>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e000      	b.n	800bcf8 <xQueueGenericCreateStatic+0x58>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10a      	bne.n	800bd12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	623b      	str	r3, [r7, #32]
}
 800bd0e:	bf00      	nop
 800bd10:	e7fe      	b.n	800bd10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d102      	bne.n	800bd1e <xQueueGenericCreateStatic+0x7e>
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d101      	bne.n	800bd22 <xQueueGenericCreateStatic+0x82>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e000      	b.n	800bd24 <xQueueGenericCreateStatic+0x84>
 800bd22:	2300      	movs	r3, #0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10a      	bne.n	800bd3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	61fb      	str	r3, [r7, #28]
}
 800bd3a:	bf00      	nop
 800bd3c:	e7fe      	b.n	800bd3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd3e:	2350      	movs	r3, #80	; 0x50
 800bd40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	2b50      	cmp	r3, #80	; 0x50
 800bd46:	d00a      	beq.n	800bd5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4c:	f383 8811 	msr	BASEPRI, r3
 800bd50:	f3bf 8f6f 	isb	sy
 800bd54:	f3bf 8f4f 	dsb	sy
 800bd58:	61bb      	str	r3, [r7, #24]
}
 800bd5a:	bf00      	nop
 800bd5c:	e7fe      	b.n	800bd5c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00d      	beq.n	800bd86 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	68b9      	ldr	r1, [r7, #8]
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 f83f 	bl	800be04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3730      	adds	r7, #48	; 0x30
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08a      	sub	sp, #40	; 0x28
 800bd94:	af02      	add	r7, sp, #8
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <xQueueGenericCreate+0x2a>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	613b      	str	r3, [r7, #16]
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	fb02 f303 	mul.w	r3, r2, r3
 800bdc2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	3350      	adds	r3, #80	; 0x50
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f002 f98d 	bl	800e0e8 <pvPortMalloc>
 800bdce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d011      	beq.n	800bdfa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	3350      	adds	r3, #80	; 0x50
 800bdde:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bde8:	79fa      	ldrb	r2, [r7, #7]
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	68b9      	ldr	r1, [r7, #8]
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f000 f805 	bl	800be04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdfa:	69bb      	ldr	r3, [r7, #24]
	}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3720      	adds	r7, #32
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d103      	bne.n	800be20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	69ba      	ldr	r2, [r7, #24]
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	e002      	b.n	800be26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be32:	2101      	movs	r1, #1
 800be34:	69b8      	ldr	r0, [r7, #24]
 800be36:	f7ff fecb 	bl	800bbd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	78fa      	ldrb	r2, [r7, #3]
 800be3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be42:	bf00      	nop
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
	...

0800be4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08e      	sub	sp, #56	; 0x38
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be5a:	2300      	movs	r3, #0
 800be5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10a      	bne.n	800be7e <xQueueGenericSend+0x32>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d103      	bne.n	800be8c <xQueueGenericSend+0x40>
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <xQueueGenericSend+0x44>
 800be8c:	2301      	movs	r3, #1
 800be8e:	e000      	b.n	800be92 <xQueueGenericSend+0x46>
 800be90:	2300      	movs	r3, #0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10a      	bne.n	800beac <xQueueGenericSend+0x60>
	__asm volatile
 800be96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bea8:	bf00      	nop
 800beaa:	e7fe      	b.n	800beaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d103      	bne.n	800beba <xQueueGenericSend+0x6e>
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d101      	bne.n	800bebe <xQueueGenericSend+0x72>
 800beba:	2301      	movs	r3, #1
 800bebc:	e000      	b.n	800bec0 <xQueueGenericSend+0x74>
 800bebe:	2300      	movs	r3, #0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <xQueueGenericSend+0x8e>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	623b      	str	r3, [r7, #32]
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800beda:	f001 fa8b 	bl	800d3f4 <xTaskGetSchedulerState>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <xQueueGenericSend+0x9e>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <xQueueGenericSend+0xa2>
 800beea:	2301      	movs	r3, #1
 800beec:	e000      	b.n	800bef0 <xQueueGenericSend+0xa4>
 800beee:	2300      	movs	r3, #0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <xQueueGenericSend+0xbe>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	61fb      	str	r3, [r7, #28]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf0a:	f001 ffcb 	bl	800dea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d302      	bcc.n	800bf20 <xQueueGenericSend+0xd4>
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d129      	bne.n	800bf74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	68b9      	ldr	r1, [r7, #8]
 800bf24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf26:	f000 fa8b 	bl	800c440 <prvCopyDataToQueue>
 800bf2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d010      	beq.n	800bf56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	3324      	adds	r3, #36	; 0x24
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f001 f897 	bl	800d06c <xTaskRemoveFromEventList>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d013      	beq.n	800bf6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf44:	4b3f      	ldr	r3, [pc, #252]	; (800c044 <xQueueGenericSend+0x1f8>)
 800bf46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	e00a      	b.n	800bf6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d007      	beq.n	800bf6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf5c:	4b39      	ldr	r3, [pc, #228]	; (800c044 <xQueueGenericSend+0x1f8>)
 800bf5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf6c:	f001 ffca 	bl	800df04 <vPortExitCritical>
				return pdPASS;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e063      	b.n	800c03c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d103      	bne.n	800bf82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf7a:	f001 ffc3 	bl	800df04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	e05c      	b.n	800c03c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf88:	f107 0314 	add.w	r3, r7, #20
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 f8d1 	bl	800d134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf92:	2301      	movs	r3, #1
 800bf94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf96:	f001 ffb5 	bl	800df04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf9a:	f000 fe21 	bl	800cbe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf9e:	f001 ff81 	bl	800dea4 <vPortEnterCritical>
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfa8:	b25b      	sxtb	r3, r3
 800bfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfae:	d103      	bne.n	800bfb8 <xQueueGenericSend+0x16c>
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfbe:	b25b      	sxtb	r3, r3
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d103      	bne.n	800bfce <xQueueGenericSend+0x182>
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfce:	f001 ff99 	bl	800df04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfd2:	1d3a      	adds	r2, r7, #4
 800bfd4:	f107 0314 	add.w	r3, r7, #20
 800bfd8:	4611      	mov	r1, r2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f001 f8c0 	bl	800d160 <xTaskCheckForTimeOut>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d124      	bne.n	800c030 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe8:	f000 fb22 	bl	800c630 <prvIsQueueFull>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d018      	beq.n	800c024 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff4:	3310      	adds	r3, #16
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	4611      	mov	r1, r2
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 ffe6 	bl	800cfcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c002:	f000 faad 	bl	800c560 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c006:	f000 fdf9 	bl	800cbfc <xTaskResumeAll>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f47f af7c 	bne.w	800bf0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c012:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <xQueueGenericSend+0x1f8>)
 800c014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	e772      	b.n	800bf0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c026:	f000 fa9b 	bl	800c560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c02a:	f000 fde7 	bl	800cbfc <xTaskResumeAll>
 800c02e:	e76c      	b.n	800bf0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c032:	f000 fa95 	bl	800c560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c036:	f000 fde1 	bl	800cbfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c03a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3738      	adds	r7, #56	; 0x38
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	e000ed04 	.word	0xe000ed04

0800c048 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b090      	sub	sp, #64	; 0x40
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
 800c054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10a      	bne.n	800c076 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d103      	bne.n	800c084 <xQueueGenericSendFromISR+0x3c>
 800c07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <xQueueGenericSendFromISR+0x40>
 800c084:	2301      	movs	r3, #1
 800c086:	e000      	b.n	800c08a <xQueueGenericSendFromISR+0x42>
 800c088:	2300      	movs	r3, #0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10a      	bne.n	800c0a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0a0:	bf00      	nop
 800c0a2:	e7fe      	b.n	800c0a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d103      	bne.n	800c0b2 <xQueueGenericSendFromISR+0x6a>
 800c0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d101      	bne.n	800c0b6 <xQueueGenericSendFromISR+0x6e>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e000      	b.n	800c0b8 <xQueueGenericSendFromISR+0x70>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	623b      	str	r3, [r7, #32]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0d2:	f001 ffc9 	bl	800e068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c0d6:	f3ef 8211 	mrs	r2, BASEPRI
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	61fa      	str	r2, [r7, #28]
 800c0ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c0ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d302      	bcc.n	800c104 <xQueueGenericSendFromISR+0xbc>
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	2b02      	cmp	r3, #2
 800c102:	d12f      	bne.n	800c164 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	68b9      	ldr	r1, [r7, #8]
 800c118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c11a:	f000 f991 	bl	800c440 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c11e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c126:	d112      	bne.n	800c14e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d016      	beq.n	800c15e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c132:	3324      	adds	r3, #36	; 0x24
 800c134:	4618      	mov	r0, r3
 800c136:	f000 ff99 	bl	800d06c <xTaskRemoveFromEventList>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00e      	beq.n	800c15e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00b      	beq.n	800c15e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2201      	movs	r2, #1
 800c14a:	601a      	str	r2, [r3, #0]
 800c14c:	e007      	b.n	800c15e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c14e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c152:	3301      	adds	r3, #1
 800c154:	b2db      	uxtb	r3, r3
 800c156:	b25a      	sxtb	r2, r3
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c15e:	2301      	movs	r3, #1
 800c160:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c162:	e001      	b.n	800c168 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c164:	2300      	movs	r3, #0
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c172:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c176:	4618      	mov	r0, r3
 800c178:	3740      	adds	r7, #64	; 0x40
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
	...

0800c180 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b08c      	sub	sp, #48	; 0x30
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c18c:	2300      	movs	r3, #0
 800c18e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10a      	bne.n	800c1b0 <xQueueReceive+0x30>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	623b      	str	r3, [r7, #32]
}
 800c1ac:	bf00      	nop
 800c1ae:	e7fe      	b.n	800c1ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d103      	bne.n	800c1be <xQueueReceive+0x3e>
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <xQueueReceive+0x42>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e000      	b.n	800c1c4 <xQueueReceive+0x44>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10a      	bne.n	800c1de <xQueueReceive+0x5e>
	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1cc:	f383 8811 	msr	BASEPRI, r3
 800c1d0:	f3bf 8f6f 	isb	sy
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	61fb      	str	r3, [r7, #28]
}
 800c1da:	bf00      	nop
 800c1dc:	e7fe      	b.n	800c1dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1de:	f001 f909 	bl	800d3f4 <xTaskGetSchedulerState>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d102      	bne.n	800c1ee <xQueueReceive+0x6e>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <xQueueReceive+0x72>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e000      	b.n	800c1f4 <xQueueReceive+0x74>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10a      	bne.n	800c20e <xQueueReceive+0x8e>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	61bb      	str	r3, [r7, #24]
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c20e:	f001 fe49 	bl	800dea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c216:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d01f      	beq.n	800c25e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c21e:	68b9      	ldr	r1, [r7, #8]
 800c220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c222:	f000 f977 	bl	800c514 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	1e5a      	subs	r2, r3, #1
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00f      	beq.n	800c256 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	3310      	adds	r3, #16
 800c23a:	4618      	mov	r0, r3
 800c23c:	f000 ff16 	bl	800d06c <xTaskRemoveFromEventList>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d007      	beq.n	800c256 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c246:	4b3d      	ldr	r3, [pc, #244]	; (800c33c <xQueueReceive+0x1bc>)
 800c248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c256:	f001 fe55 	bl	800df04 <vPortExitCritical>
				return pdPASS;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e069      	b.n	800c332 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d103      	bne.n	800c26c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c264:	f001 fe4e 	bl	800df04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c268:	2300      	movs	r3, #0
 800c26a:	e062      	b.n	800c332 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d106      	bne.n	800c280 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c272:	f107 0310 	add.w	r3, r7, #16
 800c276:	4618      	mov	r0, r3
 800c278:	f000 ff5c 	bl	800d134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c27c:	2301      	movs	r3, #1
 800c27e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c280:	f001 fe40 	bl	800df04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c284:	f000 fcac 	bl	800cbe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c288:	f001 fe0c 	bl	800dea4 <vPortEnterCritical>
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c292:	b25b      	sxtb	r3, r3
 800c294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c298:	d103      	bne.n	800c2a2 <xQueueReceive+0x122>
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2a8:	b25b      	sxtb	r3, r3
 800c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ae:	d103      	bne.n	800c2b8 <xQueueReceive+0x138>
 800c2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2b8:	f001 fe24 	bl	800df04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2bc:	1d3a      	adds	r2, r7, #4
 800c2be:	f107 0310 	add.w	r3, r7, #16
 800c2c2:	4611      	mov	r1, r2
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f000 ff4b 	bl	800d160 <xTaskCheckForTimeOut>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d123      	bne.n	800c318 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2d2:	f000 f997 	bl	800c604 <prvIsQueueEmpty>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d017      	beq.n	800c30c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	3324      	adds	r3, #36	; 0x24
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 fe71 	bl	800cfcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ec:	f000 f938 	bl	800c560 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2f0:	f000 fc84 	bl	800cbfc <xTaskResumeAll>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d189      	bne.n	800c20e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c2fa:	4b10      	ldr	r3, [pc, #64]	; (800c33c <xQueueReceive+0x1bc>)
 800c2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	e780      	b.n	800c20e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30e:	f000 f927 	bl	800c560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c312:	f000 fc73 	bl	800cbfc <xTaskResumeAll>
 800c316:	e77a      	b.n	800c20e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c31a:	f000 f921 	bl	800c560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c31e:	f000 fc6d 	bl	800cbfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c324:	f000 f96e 	bl	800c604 <prvIsQueueEmpty>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f43f af6f 	beq.w	800c20e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c332:	4618      	mov	r0, r3
 800c334:	3730      	adds	r7, #48	; 0x30
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	e000ed04 	.word	0xe000ed04

0800c340 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b08e      	sub	sp, #56	; 0x38
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10a      	bne.n	800c36c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	623b      	str	r3, [r7, #32]
}
 800c368:	bf00      	nop
 800c36a:	e7fe      	b.n	800c36a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d103      	bne.n	800c37a <xQueueReceiveFromISR+0x3a>
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <xQueueReceiveFromISR+0x3e>
 800c37a:	2301      	movs	r3, #1
 800c37c:	e000      	b.n	800c380 <xQueueReceiveFromISR+0x40>
 800c37e:	2300      	movs	r3, #0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10a      	bne.n	800c39a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	61fb      	str	r3, [r7, #28]
}
 800c396:	bf00      	nop
 800c398:	e7fe      	b.n	800c398 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c39a:	f001 fe65 	bl	800e068 <vPortValidateInterruptPriority>
	__asm volatile
 800c39e:	f3ef 8211 	mrs	r2, BASEPRI
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	61ba      	str	r2, [r7, #24]
 800c3b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c3b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d02f      	beq.n	800c426 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3d0:	68b9      	ldr	r1, [r7, #8]
 800c3d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3d4:	f000 f89e 	bl	800c514 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3da:	1e5a      	subs	r2, r3, #1
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c3e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e8:	d112      	bne.n	800c410 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d016      	beq.n	800c420 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	3310      	adds	r3, #16
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 fe38 	bl	800d06c <xTaskRemoveFromEventList>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00e      	beq.n	800c420 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00b      	beq.n	800c420 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	e007      	b.n	800c420 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c414:	3301      	adds	r3, #1
 800c416:	b2db      	uxtb	r3, r3
 800c418:	b25a      	sxtb	r2, r3
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c420:	2301      	movs	r3, #1
 800c422:	637b      	str	r3, [r7, #52]	; 0x34
 800c424:	e001      	b.n	800c42a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c426:	2300      	movs	r3, #0
 800c428:	637b      	str	r3, [r7, #52]	; 0x34
 800c42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	f383 8811 	msr	BASEPRI, r3
}
 800c434:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3738      	adds	r7, #56	; 0x38
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c44c:	2300      	movs	r3, #0
 800c44e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c454:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10d      	bne.n	800c47a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d14d      	bne.n	800c502 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 ffe0 	bl	800d430 <xTaskPriorityDisinherit>
 800c470:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2200      	movs	r2, #0
 800c476:	609a      	str	r2, [r3, #8]
 800c478:	e043      	b.n	800c502 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d119      	bne.n	800c4b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6858      	ldr	r0, [r3, #4]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c488:	461a      	mov	r2, r3
 800c48a:	68b9      	ldr	r1, [r7, #8]
 800c48c:	f002 fd3c 	bl	800ef08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	685a      	ldr	r2, [r3, #4]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c498:	441a      	add	r2, r3
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d32b      	bcc.n	800c502 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	605a      	str	r2, [r3, #4]
 800c4b2:	e026      	b.n	800c502 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	68d8      	ldr	r0, [r3, #12]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4bc:	461a      	mov	r2, r3
 800c4be:	68b9      	ldr	r1, [r7, #8]
 800c4c0:	f002 fd22 	bl	800ef08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	68da      	ldr	r2, [r3, #12]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4cc:	425b      	negs	r3, r3
 800c4ce:	441a      	add	r2, r3
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	68da      	ldr	r2, [r3, #12]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d207      	bcs.n	800c4f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	689a      	ldr	r2, [r3, #8]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e8:	425b      	negs	r3, r3
 800c4ea:	441a      	add	r2, r3
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d105      	bne.n	800c502 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d002      	beq.n	800c502 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	3b01      	subs	r3, #1
 800c500:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	1c5a      	adds	r2, r3, #1
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c50a:	697b      	ldr	r3, [r7, #20]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3718      	adds	r7, #24
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c522:	2b00      	cmp	r3, #0
 800c524:	d018      	beq.n	800c558 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	68da      	ldr	r2, [r3, #12]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52e:	441a      	add	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	68da      	ldr	r2, [r3, #12]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d303      	bcc.n	800c548 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	68d9      	ldr	r1, [r3, #12]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c550:	461a      	mov	r2, r3
 800c552:	6838      	ldr	r0, [r7, #0]
 800c554:	f002 fcd8 	bl	800ef08 <memcpy>
	}
}
 800c558:	bf00      	nop
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c568:	f001 fc9c 	bl	800dea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c572:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c574:	e011      	b.n	800c59a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d012      	beq.n	800c5a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	3324      	adds	r3, #36	; 0x24
 800c582:	4618      	mov	r0, r3
 800c584:	f000 fd72 	bl	800d06c <xTaskRemoveFromEventList>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d001      	beq.n	800c592 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c58e:	f000 fe49 	bl	800d224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c592:	7bfb      	ldrb	r3, [r7, #15]
 800c594:	3b01      	subs	r3, #1
 800c596:	b2db      	uxtb	r3, r3
 800c598:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	dce9      	bgt.n	800c576 <prvUnlockQueue+0x16>
 800c5a2:	e000      	b.n	800c5a6 <prvUnlockQueue+0x46>
					break;
 800c5a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	22ff      	movs	r2, #255	; 0xff
 800c5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c5ae:	f001 fca9 	bl	800df04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c5b2:	f001 fc77 	bl	800dea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5be:	e011      	b.n	800c5e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d012      	beq.n	800c5ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	3310      	adds	r3, #16
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 fd4d 	bl	800d06c <xTaskRemoveFromEventList>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d001      	beq.n	800c5dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c5d8:	f000 fe24 	bl	800d224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c5dc:	7bbb      	ldrb	r3, [r7, #14]
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	dce9      	bgt.n	800c5c0 <prvUnlockQueue+0x60>
 800c5ec:	e000      	b.n	800c5f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c5ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	22ff      	movs	r2, #255	; 0xff
 800c5f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c5f8:	f001 fc84 	bl	800df04 <vPortExitCritical>
}
 800c5fc:	bf00      	nop
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c60c:	f001 fc4a 	bl	800dea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c614:	2b00      	cmp	r3, #0
 800c616:	d102      	bne.n	800c61e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c618:	2301      	movs	r3, #1
 800c61a:	60fb      	str	r3, [r7, #12]
 800c61c:	e001      	b.n	800c622 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c61e:	2300      	movs	r3, #0
 800c620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c622:	f001 fc6f 	bl	800df04 <vPortExitCritical>

	return xReturn;
 800c626:	68fb      	ldr	r3, [r7, #12]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c638:	f001 fc34 	bl	800dea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c644:	429a      	cmp	r2, r3
 800c646:	d102      	bne.n	800c64e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c648:	2301      	movs	r3, #1
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	e001      	b.n	800c652 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c64e:	2300      	movs	r3, #0
 800c650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c652:	f001 fc57 	bl	800df04 <vPortExitCritical>

	return xReturn;
 800c656:	68fb      	ldr	r3, [r7, #12]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c66a:	2300      	movs	r3, #0
 800c66c:	60fb      	str	r3, [r7, #12]
 800c66e:	e014      	b.n	800c69a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c670:	4a0f      	ldr	r2, [pc, #60]	; (800c6b0 <vQueueAddToRegistry+0x50>)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10b      	bne.n	800c694 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c67c:	490c      	ldr	r1, [pc, #48]	; (800c6b0 <vQueueAddToRegistry+0x50>)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c686:	4a0a      	ldr	r2, [pc, #40]	; (800c6b0 <vQueueAddToRegistry+0x50>)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	00db      	lsls	r3, r3, #3
 800c68c:	4413      	add	r3, r2
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c692:	e006      	b.n	800c6a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	3301      	adds	r3, #1
 800c698:	60fb      	str	r3, [r7, #12]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2b07      	cmp	r3, #7
 800c69e:	d9e7      	bls.n	800c670 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c6a0:	bf00      	nop
 800c6a2:	bf00      	nop
 800c6a4:	3714      	adds	r7, #20
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	20000b3c 	.word	0x20000b3c

0800c6b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c6c4:	f001 fbee 	bl	800dea4 <vPortEnterCritical>
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6ce:	b25b      	sxtb	r3, r3
 800c6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d4:	d103      	bne.n	800c6de <vQueueWaitForMessageRestricted+0x2a>
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6e4:	b25b      	sxtb	r3, r3
 800c6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ea:	d103      	bne.n	800c6f4 <vQueueWaitForMessageRestricted+0x40>
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6f4:	f001 fc06 	bl	800df04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d106      	bne.n	800c70e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	3324      	adds	r3, #36	; 0x24
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	68b9      	ldr	r1, [r7, #8]
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 fc83 	bl	800d014 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c70e:	6978      	ldr	r0, [r7, #20]
 800c710:	f7ff ff26 	bl	800c560 <prvUnlockQueue>
	}
 800c714:	bf00      	nop
 800c716:	3718      	adds	r7, #24
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b08e      	sub	sp, #56	; 0x38
 800c720:	af04      	add	r7, sp, #16
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10a      	bne.n	800c746 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	623b      	str	r3, [r7, #32]
}
 800c742:	bf00      	nop
 800c744:	e7fe      	b.n	800c744 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10a      	bne.n	800c762 <xTaskCreateStatic+0x46>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	61fb      	str	r3, [r7, #28]
}
 800c75e:	bf00      	nop
 800c760:	e7fe      	b.n	800c760 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c762:	23c0      	movs	r3, #192	; 0xc0
 800c764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	2bc0      	cmp	r3, #192	; 0xc0
 800c76a:	d00a      	beq.n	800c782 <xTaskCreateStatic+0x66>
	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	61bb      	str	r3, [r7, #24]
}
 800c77e:	bf00      	nop
 800c780:	e7fe      	b.n	800c780 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c786:	2b00      	cmp	r3, #0
 800c788:	d01e      	beq.n	800c7c8 <xTaskCreateStatic+0xac>
 800c78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d01b      	beq.n	800c7c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c792:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c798:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	2202      	movs	r2, #2
 800c79e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	9303      	str	r3, [sp, #12]
 800c7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a8:	9302      	str	r3, [sp, #8]
 800c7aa:	f107 0314 	add.w	r3, r7, #20
 800c7ae:	9301      	str	r3, [sp, #4]
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	68b9      	ldr	r1, [r7, #8]
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f000 f850 	bl	800c860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7c2:	f000 f8f7 	bl	800c9b4 <prvAddNewTaskToReadyList>
 800c7c6:	e001      	b.n	800c7cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c7cc:	697b      	ldr	r3, [r7, #20]
	}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3728      	adds	r7, #40	; 0x28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b08c      	sub	sp, #48	; 0x30
 800c7da:	af04      	add	r7, sp, #16
 800c7dc:	60f8      	str	r0, [r7, #12]
 800c7de:	60b9      	str	r1, [r7, #8]
 800c7e0:	603b      	str	r3, [r7, #0]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c7e6:	88fb      	ldrh	r3, [r7, #6]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f001 fc7c 	bl	800e0e8 <pvPortMalloc>
 800c7f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00e      	beq.n	800c816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c7f8:	20c0      	movs	r0, #192	; 0xc0
 800c7fa:	f001 fc75 	bl	800e0e8 <pvPortMalloc>
 800c7fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	697a      	ldr	r2, [r7, #20]
 800c80a:	631a      	str	r2, [r3, #48]	; 0x30
 800c80c:	e005      	b.n	800c81a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c80e:	6978      	ldr	r0, [r7, #20]
 800c810:	f001 fd36 	bl	800e280 <vPortFree>
 800c814:	e001      	b.n	800c81a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c816:	2300      	movs	r3, #0
 800c818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d017      	beq.n	800c850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	2200      	movs	r2, #0
 800c824:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c828:	88fa      	ldrh	r2, [r7, #6]
 800c82a:	2300      	movs	r3, #0
 800c82c:	9303      	str	r3, [sp, #12]
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	9302      	str	r3, [sp, #8]
 800c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	68b9      	ldr	r1, [r7, #8]
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	f000 f80e 	bl	800c860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c844:	69f8      	ldr	r0, [r7, #28]
 800c846:	f000 f8b5 	bl	800c9b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c84a:	2301      	movs	r3, #1
 800c84c:	61bb      	str	r3, [r7, #24]
 800c84e:	e002      	b.n	800c856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c850:	f04f 33ff 	mov.w	r3, #4294967295
 800c854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c856:	69bb      	ldr	r3, [r7, #24]
	}
 800c858:	4618      	mov	r0, r3
 800c85a:	3720      	adds	r7, #32
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b088      	sub	sp, #32
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
 800c86c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	461a      	mov	r2, r3
 800c878:	21a5      	movs	r1, #165	; 0xa5
 800c87a:	f002 fb53 	bl	800ef24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c888:	3b01      	subs	r3, #1
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	4413      	add	r3, r2
 800c88e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	f023 0307 	bic.w	r3, r3, #7
 800c896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	f003 0307 	and.w	r3, r3, #7
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00a      	beq.n	800c8b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a6:	f383 8811 	msr	BASEPRI, r3
 800c8aa:	f3bf 8f6f 	isb	sy
 800c8ae:	f3bf 8f4f 	dsb	sy
 800c8b2:	617b      	str	r3, [r7, #20]
}
 800c8b4:	bf00      	nop
 800c8b6:	e7fe      	b.n	800c8b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d01f      	beq.n	800c8fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8be:	2300      	movs	r3, #0
 800c8c0:	61fb      	str	r3, [r7, #28]
 800c8c2:	e012      	b.n	800c8ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	7819      	ldrb	r1, [r3, #0]
 800c8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	3334      	adds	r3, #52	; 0x34
 800c8d4:	460a      	mov	r2, r1
 800c8d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	4413      	add	r3, r2
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d006      	beq.n	800c8f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	61fb      	str	r3, [r7, #28]
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	2b0f      	cmp	r3, #15
 800c8ee:	d9e9      	bls.n	800c8c4 <prvInitialiseNewTask+0x64>
 800c8f0:	e000      	b.n	800c8f4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c8f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c8fc:	e003      	b.n	800c906 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c900:	2200      	movs	r2, #0
 800c902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c908:	2b37      	cmp	r3, #55	; 0x37
 800c90a:	d901      	bls.n	800c910 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c90c:	2337      	movs	r3, #55	; 0x37
 800c90e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c914:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c91a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91e:	2200      	movs	r2, #0
 800c920:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c924:	3304      	adds	r3, #4
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff f8be 	bl	800baa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92e:	3318      	adds	r3, #24
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff f8b9 	bl	800baa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c93a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c94a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94e:	2200      	movs	r2, #0
 800c950:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c954:	2200      	movs	r2, #0
 800c956:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c964:	3358      	adds	r3, #88	; 0x58
 800c966:	2260      	movs	r2, #96	; 0x60
 800c968:	2100      	movs	r1, #0
 800c96a:	4618      	mov	r0, r3
 800c96c:	f002 fada 	bl	800ef24 <memset>
 800c970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c972:	4a0d      	ldr	r2, [pc, #52]	; (800c9a8 <prvInitialiseNewTask+0x148>)
 800c974:	65da      	str	r2, [r3, #92]	; 0x5c
 800c976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c978:	4a0c      	ldr	r2, [pc, #48]	; (800c9ac <prvInitialiseNewTask+0x14c>)
 800c97a:	661a      	str	r2, [r3, #96]	; 0x60
 800c97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97e:	4a0c      	ldr	r2, [pc, #48]	; (800c9b0 <prvInitialiseNewTask+0x150>)
 800c980:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	68f9      	ldr	r1, [r7, #12]
 800c986:	69b8      	ldr	r0, [r7, #24]
 800c988:	f001 f962 	bl	800dc50 <pxPortInitialiseStack>
 800c98c:	4602      	mov	r2, r0
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c99c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c99e:	bf00      	nop
 800c9a0:	3720      	adds	r7, #32
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	0801175c 	.word	0x0801175c
 800c9ac:	0801177c 	.word	0x0801177c
 800c9b0:	0801173c 	.word	0x0801173c

0800c9b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c9bc:	f001 fa72 	bl	800dea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c9c0:	4b2d      	ldr	r3, [pc, #180]	; (800ca78 <prvAddNewTaskToReadyList+0xc4>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	4a2c      	ldr	r2, [pc, #176]	; (800ca78 <prvAddNewTaskToReadyList+0xc4>)
 800c9c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c9ca:	4b2c      	ldr	r3, [pc, #176]	; (800ca7c <prvAddNewTaskToReadyList+0xc8>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d109      	bne.n	800c9e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c9d2:	4a2a      	ldr	r2, [pc, #168]	; (800ca7c <prvAddNewTaskToReadyList+0xc8>)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c9d8:	4b27      	ldr	r3, [pc, #156]	; (800ca78 <prvAddNewTaskToReadyList+0xc4>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d110      	bne.n	800ca02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c9e0:	f000 fc46 	bl	800d270 <prvInitialiseTaskLists>
 800c9e4:	e00d      	b.n	800ca02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c9e6:	4b26      	ldr	r3, [pc, #152]	; (800ca80 <prvAddNewTaskToReadyList+0xcc>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d109      	bne.n	800ca02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c9ee:	4b23      	ldr	r3, [pc, #140]	; (800ca7c <prvAddNewTaskToReadyList+0xc8>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d802      	bhi.n	800ca02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c9fc:	4a1f      	ldr	r2, [pc, #124]	; (800ca7c <prvAddNewTaskToReadyList+0xc8>)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca02:	4b20      	ldr	r3, [pc, #128]	; (800ca84 <prvAddNewTaskToReadyList+0xd0>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	3301      	adds	r3, #1
 800ca08:	4a1e      	ldr	r2, [pc, #120]	; (800ca84 <prvAddNewTaskToReadyList+0xd0>)
 800ca0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ca0c:	4b1d      	ldr	r3, [pc, #116]	; (800ca84 <prvAddNewTaskToReadyList+0xd0>)
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca18:	4b1b      	ldr	r3, [pc, #108]	; (800ca88 <prvAddNewTaskToReadyList+0xd4>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d903      	bls.n	800ca28 <prvAddNewTaskToReadyList+0x74>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca24:	4a18      	ldr	r2, [pc, #96]	; (800ca88 <prvAddNewTaskToReadyList+0xd4>)
 800ca26:	6013      	str	r3, [r2, #0]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4413      	add	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4a15      	ldr	r2, [pc, #84]	; (800ca8c <prvAddNewTaskToReadyList+0xd8>)
 800ca36:	441a      	add	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	3304      	adds	r3, #4
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	4610      	mov	r0, r2
 800ca40:	f7ff f83f 	bl	800bac2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca44:	f001 fa5e 	bl	800df04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca48:	4b0d      	ldr	r3, [pc, #52]	; (800ca80 <prvAddNewTaskToReadyList+0xcc>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00e      	beq.n	800ca6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca50:	4b0a      	ldr	r3, [pc, #40]	; (800ca7c <prvAddNewTaskToReadyList+0xc8>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d207      	bcs.n	800ca6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca5e:	4b0c      	ldr	r3, [pc, #48]	; (800ca90 <prvAddNewTaskToReadyList+0xdc>)
 800ca60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca64:	601a      	str	r2, [r3, #0]
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca6e:	bf00      	nop
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20001050 	.word	0x20001050
 800ca7c:	20000b7c 	.word	0x20000b7c
 800ca80:	2000105c 	.word	0x2000105c
 800ca84:	2000106c 	.word	0x2000106c
 800ca88:	20001058 	.word	0x20001058
 800ca8c:	20000b80 	.word	0x20000b80
 800ca90:	e000ed04 	.word	0xe000ed04

0800ca94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d017      	beq.n	800cad6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800caa6:	4b13      	ldr	r3, [pc, #76]	; (800caf4 <vTaskDelay+0x60>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00a      	beq.n	800cac4 <vTaskDelay+0x30>
	__asm volatile
 800caae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab2:	f383 8811 	msr	BASEPRI, r3
 800cab6:	f3bf 8f6f 	isb	sy
 800caba:	f3bf 8f4f 	dsb	sy
 800cabe:	60bb      	str	r3, [r7, #8]
}
 800cac0:	bf00      	nop
 800cac2:	e7fe      	b.n	800cac2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cac4:	f000 f88c 	bl	800cbe0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cac8:	2100      	movs	r1, #0
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fd1e 	bl	800d50c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cad0:	f000 f894 	bl	800cbfc <xTaskResumeAll>
 800cad4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d107      	bne.n	800caec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cadc:	4b06      	ldr	r3, [pc, #24]	; (800caf8 <vTaskDelay+0x64>)
 800cade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800caec:	bf00      	nop
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	20001078 	.word	0x20001078
 800caf8:	e000ed04 	.word	0xe000ed04

0800cafc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b08a      	sub	sp, #40	; 0x28
 800cb00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb02:	2300      	movs	r3, #0
 800cb04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb0a:	463a      	mov	r2, r7
 800cb0c:	1d39      	adds	r1, r7, #4
 800cb0e:	f107 0308 	add.w	r3, r7, #8
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe ff74 	bl	800ba00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	9202      	str	r2, [sp, #8]
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	2300      	movs	r3, #0
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	2300      	movs	r3, #0
 800cb28:	460a      	mov	r2, r1
 800cb2a:	4925      	ldr	r1, [pc, #148]	; (800cbc0 <vTaskStartScheduler+0xc4>)
 800cb2c:	4825      	ldr	r0, [pc, #148]	; (800cbc4 <vTaskStartScheduler+0xc8>)
 800cb2e:	f7ff fdf5 	bl	800c71c <xTaskCreateStatic>
 800cb32:	4603      	mov	r3, r0
 800cb34:	4a24      	ldr	r2, [pc, #144]	; (800cbc8 <vTaskStartScheduler+0xcc>)
 800cb36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb38:	4b23      	ldr	r3, [pc, #140]	; (800cbc8 <vTaskStartScheduler+0xcc>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb40:	2301      	movs	r3, #1
 800cb42:	617b      	str	r3, [r7, #20]
 800cb44:	e001      	b.n	800cb4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb46:	2300      	movs	r3, #0
 800cb48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d102      	bne.n	800cb56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cb50:	f000 fd30 	bl	800d5b4 <xTimerCreateTimerTask>
 800cb54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d11d      	bne.n	800cb98 <vTaskStartScheduler+0x9c>
	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	613b      	str	r3, [r7, #16]
}
 800cb6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb70:	4b16      	ldr	r3, [pc, #88]	; (800cbcc <vTaskStartScheduler+0xd0>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	3358      	adds	r3, #88	; 0x58
 800cb76:	4a16      	ldr	r2, [pc, #88]	; (800cbd0 <vTaskStartScheduler+0xd4>)
 800cb78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cb7a:	4b16      	ldr	r3, [pc, #88]	; (800cbd4 <vTaskStartScheduler+0xd8>)
 800cb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb82:	4b15      	ldr	r3, [pc, #84]	; (800cbd8 <vTaskStartScheduler+0xdc>)
 800cb84:	2201      	movs	r2, #1
 800cb86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb88:	4b14      	ldr	r3, [pc, #80]	; (800cbdc <vTaskStartScheduler+0xe0>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800cb8e:	f7f3 fcb3 	bl	80004f8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb92:	f001 f8e5 	bl	800dd60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb96:	e00e      	b.n	800cbb6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb9e:	d10a      	bne.n	800cbb6 <vTaskStartScheduler+0xba>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	60fb      	str	r3, [r7, #12]
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <vTaskStartScheduler+0xb8>
}
 800cbb6:	bf00      	nop
 800cbb8:	3718      	adds	r7, #24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	0800f4bc 	.word	0x0800f4bc
 800cbc4:	0800d23d 	.word	0x0800d23d
 800cbc8:	20001074 	.word	0x20001074
 800cbcc:	20000b7c 	.word	0x20000b7c
 800cbd0:	20000110 	.word	0x20000110
 800cbd4:	20001070 	.word	0x20001070
 800cbd8:	2000105c 	.word	0x2000105c
 800cbdc:	20001054 	.word	0x20001054

0800cbe0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cbe4:	4b04      	ldr	r3, [pc, #16]	; (800cbf8 <vTaskSuspendAll+0x18>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	4a03      	ldr	r2, [pc, #12]	; (800cbf8 <vTaskSuspendAll+0x18>)
 800cbec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cbee:	bf00      	nop
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr
 800cbf8:	20001078 	.word	0x20001078

0800cbfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc02:	2300      	movs	r3, #0
 800cc04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc06:	2300      	movs	r3, #0
 800cc08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc0a:	4b42      	ldr	r3, [pc, #264]	; (800cd14 <xTaskResumeAll+0x118>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10a      	bne.n	800cc28 <xTaskResumeAll+0x2c>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	603b      	str	r3, [r7, #0]
}
 800cc24:	bf00      	nop
 800cc26:	e7fe      	b.n	800cc26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc28:	f001 f93c 	bl	800dea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc2c:	4b39      	ldr	r3, [pc, #228]	; (800cd14 <xTaskResumeAll+0x118>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	3b01      	subs	r3, #1
 800cc32:	4a38      	ldr	r2, [pc, #224]	; (800cd14 <xTaskResumeAll+0x118>)
 800cc34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc36:	4b37      	ldr	r3, [pc, #220]	; (800cd14 <xTaskResumeAll+0x118>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d162      	bne.n	800cd04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc3e:	4b36      	ldr	r3, [pc, #216]	; (800cd18 <xTaskResumeAll+0x11c>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d05e      	beq.n	800cd04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc46:	e02f      	b.n	800cca8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc48:	4b34      	ldr	r3, [pc, #208]	; (800cd1c <xTaskResumeAll+0x120>)
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3318      	adds	r3, #24
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fe ff91 	bl	800bb7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	3304      	adds	r3, #4
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fe ff8c 	bl	800bb7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc68:	4b2d      	ldr	r3, [pc, #180]	; (800cd20 <xTaskResumeAll+0x124>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d903      	bls.n	800cc78 <xTaskResumeAll+0x7c>
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc74:	4a2a      	ldr	r2, [pc, #168]	; (800cd20 <xTaskResumeAll+0x124>)
 800cc76:	6013      	str	r3, [r2, #0]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	4413      	add	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4a27      	ldr	r2, [pc, #156]	; (800cd24 <xTaskResumeAll+0x128>)
 800cc86:	441a      	add	r2, r3
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	4610      	mov	r0, r2
 800cc90:	f7fe ff17 	bl	800bac2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc98:	4b23      	ldr	r3, [pc, #140]	; (800cd28 <xTaskResumeAll+0x12c>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d302      	bcc.n	800cca8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cca2:	4b22      	ldr	r3, [pc, #136]	; (800cd2c <xTaskResumeAll+0x130>)
 800cca4:	2201      	movs	r2, #1
 800cca6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cca8:	4b1c      	ldr	r3, [pc, #112]	; (800cd1c <xTaskResumeAll+0x120>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1cb      	bne.n	800cc48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d001      	beq.n	800ccba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ccb6:	f000 fb7d 	bl	800d3b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ccba:	4b1d      	ldr	r3, [pc, #116]	; (800cd30 <xTaskResumeAll+0x134>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d010      	beq.n	800cce8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ccc6:	f000 f847 	bl	800cd58 <xTaskIncrementTick>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ccd0:	4b16      	ldr	r3, [pc, #88]	; (800cd2c <xTaskResumeAll+0x130>)
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1f1      	bne.n	800ccc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cce2:	4b13      	ldr	r3, [pc, #76]	; (800cd30 <xTaskResumeAll+0x134>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cce8:	4b10      	ldr	r3, [pc, #64]	; (800cd2c <xTaskResumeAll+0x130>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d009      	beq.n	800cd04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ccf4:	4b0f      	ldr	r3, [pc, #60]	; (800cd34 <xTaskResumeAll+0x138>)
 800ccf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd04:	f001 f8fe 	bl	800df04 <vPortExitCritical>

	return xAlreadyYielded;
 800cd08:	68bb      	ldr	r3, [r7, #8]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	20001078 	.word	0x20001078
 800cd18:	20001050 	.word	0x20001050
 800cd1c:	20001010 	.word	0x20001010
 800cd20:	20001058 	.word	0x20001058
 800cd24:	20000b80 	.word	0x20000b80
 800cd28:	20000b7c 	.word	0x20000b7c
 800cd2c:	20001064 	.word	0x20001064
 800cd30:	20001060 	.word	0x20001060
 800cd34:	e000ed04 	.word	0xe000ed04

0800cd38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cd3e:	4b05      	ldr	r3, [pc, #20]	; (800cd54 <xTaskGetTickCount+0x1c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cd44:	687b      	ldr	r3, [r7, #4]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	20001054 	.word	0x20001054

0800cd58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd62:	4b4f      	ldr	r3, [pc, #316]	; (800cea0 <xTaskIncrementTick+0x148>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f040 808f 	bne.w	800ce8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd6c:	4b4d      	ldr	r3, [pc, #308]	; (800cea4 <xTaskIncrementTick+0x14c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	3301      	adds	r3, #1
 800cd72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd74:	4a4b      	ldr	r2, [pc, #300]	; (800cea4 <xTaskIncrementTick+0x14c>)
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d120      	bne.n	800cdc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd80:	4b49      	ldr	r3, [pc, #292]	; (800cea8 <xTaskIncrementTick+0x150>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d00a      	beq.n	800cda0 <xTaskIncrementTick+0x48>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	603b      	str	r3, [r7, #0]
}
 800cd9c:	bf00      	nop
 800cd9e:	e7fe      	b.n	800cd9e <xTaskIncrementTick+0x46>
 800cda0:	4b41      	ldr	r3, [pc, #260]	; (800cea8 <xTaskIncrementTick+0x150>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	60fb      	str	r3, [r7, #12]
 800cda6:	4b41      	ldr	r3, [pc, #260]	; (800ceac <xTaskIncrementTick+0x154>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a3f      	ldr	r2, [pc, #252]	; (800cea8 <xTaskIncrementTick+0x150>)
 800cdac:	6013      	str	r3, [r2, #0]
 800cdae:	4a3f      	ldr	r2, [pc, #252]	; (800ceac <xTaskIncrementTick+0x154>)
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	4b3e      	ldr	r3, [pc, #248]	; (800ceb0 <xTaskIncrementTick+0x158>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	4a3d      	ldr	r2, [pc, #244]	; (800ceb0 <xTaskIncrementTick+0x158>)
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	f000 faf9 	bl	800d3b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cdc2:	4b3c      	ldr	r3, [pc, #240]	; (800ceb4 <xTaskIncrementTick+0x15c>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d349      	bcc.n	800ce60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdcc:	4b36      	ldr	r3, [pc, #216]	; (800cea8 <xTaskIncrementTick+0x150>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d104      	bne.n	800cde0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdd6:	4b37      	ldr	r3, [pc, #220]	; (800ceb4 <xTaskIncrementTick+0x15c>)
 800cdd8:	f04f 32ff 	mov.w	r2, #4294967295
 800cddc:	601a      	str	r2, [r3, #0]
					break;
 800cdde:	e03f      	b.n	800ce60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cde0:	4b31      	ldr	r3, [pc, #196]	; (800cea8 <xTaskIncrementTick+0x150>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d203      	bcs.n	800ce00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cdf8:	4a2e      	ldr	r2, [pc, #184]	; (800ceb4 <xTaskIncrementTick+0x15c>)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cdfe:	e02f      	b.n	800ce60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	3304      	adds	r3, #4
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe feb9 	bl	800bb7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d004      	beq.n	800ce1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	3318      	adds	r3, #24
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe feb0 	bl	800bb7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce20:	4b25      	ldr	r3, [pc, #148]	; (800ceb8 <xTaskIncrementTick+0x160>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d903      	bls.n	800ce30 <xTaskIncrementTick+0xd8>
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2c:	4a22      	ldr	r2, [pc, #136]	; (800ceb8 <xTaskIncrementTick+0x160>)
 800ce2e:	6013      	str	r3, [r2, #0]
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce34:	4613      	mov	r3, r2
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4413      	add	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4a1f      	ldr	r2, [pc, #124]	; (800cebc <xTaskIncrementTick+0x164>)
 800ce3e:	441a      	add	r2, r3
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	3304      	adds	r3, #4
 800ce44:	4619      	mov	r1, r3
 800ce46:	4610      	mov	r0, r2
 800ce48:	f7fe fe3b 	bl	800bac2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce50:	4b1b      	ldr	r3, [pc, #108]	; (800cec0 <xTaskIncrementTick+0x168>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d3b8      	bcc.n	800cdcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce5e:	e7b5      	b.n	800cdcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce60:	4b17      	ldr	r3, [pc, #92]	; (800cec0 <xTaskIncrementTick+0x168>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce66:	4915      	ldr	r1, [pc, #84]	; (800cebc <xTaskIncrementTick+0x164>)
 800ce68:	4613      	mov	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	440b      	add	r3, r1
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d901      	bls.n	800ce7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce7c:	4b11      	ldr	r3, [pc, #68]	; (800cec4 <xTaskIncrementTick+0x16c>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d007      	beq.n	800ce94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ce84:	2301      	movs	r3, #1
 800ce86:	617b      	str	r3, [r7, #20]
 800ce88:	e004      	b.n	800ce94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ce8a:	4b0f      	ldr	r3, [pc, #60]	; (800cec8 <xTaskIncrementTick+0x170>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	4a0d      	ldr	r2, [pc, #52]	; (800cec8 <xTaskIncrementTick+0x170>)
 800ce92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce94:	697b      	ldr	r3, [r7, #20]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	20001078 	.word	0x20001078
 800cea4:	20001054 	.word	0x20001054
 800cea8:	20001008 	.word	0x20001008
 800ceac:	2000100c 	.word	0x2000100c
 800ceb0:	20001068 	.word	0x20001068
 800ceb4:	20001070 	.word	0x20001070
 800ceb8:	20001058 	.word	0x20001058
 800cebc:	20000b80 	.word	0x20000b80
 800cec0:	20000b7c 	.word	0x20000b7c
 800cec4:	20001064 	.word	0x20001064
 800cec8:	20001060 	.word	0x20001060

0800cecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ced2:	4b36      	ldr	r3, [pc, #216]	; (800cfac <vTaskSwitchContext+0xe0>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d003      	beq.n	800cee2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ceda:	4b35      	ldr	r3, [pc, #212]	; (800cfb0 <vTaskSwitchContext+0xe4>)
 800cedc:	2201      	movs	r2, #1
 800cede:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cee0:	e05f      	b.n	800cfa2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800cee2:	4b33      	ldr	r3, [pc, #204]	; (800cfb0 <vTaskSwitchContext+0xe4>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800cee8:	f7f3 fb0e 	bl	8000508 <getRunTimeCounterValue>
 800ceec:	4603      	mov	r3, r0
 800ceee:	4a31      	ldr	r2, [pc, #196]	; (800cfb4 <vTaskSwitchContext+0xe8>)
 800cef0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800cef2:	4b30      	ldr	r3, [pc, #192]	; (800cfb4 <vTaskSwitchContext+0xe8>)
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	4b30      	ldr	r3, [pc, #192]	; (800cfb8 <vTaskSwitchContext+0xec>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d909      	bls.n	800cf12 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800cefe:	4b2f      	ldr	r3, [pc, #188]	; (800cfbc <vTaskSwitchContext+0xf0>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cf04:	4a2b      	ldr	r2, [pc, #172]	; (800cfb4 <vTaskSwitchContext+0xe8>)
 800cf06:	6810      	ldr	r0, [r2, #0]
 800cf08:	4a2b      	ldr	r2, [pc, #172]	; (800cfb8 <vTaskSwitchContext+0xec>)
 800cf0a:	6812      	ldr	r2, [r2, #0]
 800cf0c:	1a82      	subs	r2, r0, r2
 800cf0e:	440a      	add	r2, r1
 800cf10:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800cf12:	4b28      	ldr	r3, [pc, #160]	; (800cfb4 <vTaskSwitchContext+0xe8>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a28      	ldr	r2, [pc, #160]	; (800cfb8 <vTaskSwitchContext+0xec>)
 800cf18:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf1a:	4b29      	ldr	r3, [pc, #164]	; (800cfc0 <vTaskSwitchContext+0xf4>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	e010      	b.n	800cf44 <vTaskSwitchContext+0x78>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10a      	bne.n	800cf3e <vTaskSwitchContext+0x72>
	__asm volatile
 800cf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	607b      	str	r3, [r7, #4]
}
 800cf3a:	bf00      	nop
 800cf3c:	e7fe      	b.n	800cf3c <vTaskSwitchContext+0x70>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	3b01      	subs	r3, #1
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	491f      	ldr	r1, [pc, #124]	; (800cfc4 <vTaskSwitchContext+0xf8>)
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	4613      	mov	r3, r2
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	4413      	add	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	440b      	add	r3, r1
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d0e4      	beq.n	800cf22 <vTaskSwitchContext+0x56>
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	4413      	add	r3, r2
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	4a18      	ldr	r2, [pc, #96]	; (800cfc4 <vTaskSwitchContext+0xf8>)
 800cf64:	4413      	add	r3, r2
 800cf66:	60bb      	str	r3, [r7, #8]
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	605a      	str	r2, [r3, #4]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	685a      	ldr	r2, [r3, #4]
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	3308      	adds	r3, #8
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d104      	bne.n	800cf88 <vTaskSwitchContext+0xbc>
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	605a      	str	r2, [r3, #4]
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	4a0b      	ldr	r2, [pc, #44]	; (800cfbc <vTaskSwitchContext+0xf0>)
 800cf90:	6013      	str	r3, [r2, #0]
 800cf92:	4a0b      	ldr	r2, [pc, #44]	; (800cfc0 <vTaskSwitchContext+0xf4>)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf98:	4b08      	ldr	r3, [pc, #32]	; (800cfbc <vTaskSwitchContext+0xf0>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3358      	adds	r3, #88	; 0x58
 800cf9e:	4a0a      	ldr	r2, [pc, #40]	; (800cfc8 <vTaskSwitchContext+0xfc>)
 800cfa0:	6013      	str	r3, [r2, #0]
}
 800cfa2:	bf00      	nop
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	20001078 	.word	0x20001078
 800cfb0:	20001064 	.word	0x20001064
 800cfb4:	20001080 	.word	0x20001080
 800cfb8:	2000107c 	.word	0x2000107c
 800cfbc:	20000b7c 	.word	0x20000b7c
 800cfc0:	20001058 	.word	0x20001058
 800cfc4:	20000b80 	.word	0x20000b80
 800cfc8:	20000110 	.word	0x20000110

0800cfcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10a      	bne.n	800cff2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	60fb      	str	r3, [r7, #12]
}
 800cfee:	bf00      	nop
 800cff0:	e7fe      	b.n	800cff0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cff2:	4b07      	ldr	r3, [pc, #28]	; (800d010 <vTaskPlaceOnEventList+0x44>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3318      	adds	r3, #24
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7fe fd85 	bl	800bb0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d000:	2101      	movs	r1, #1
 800d002:	6838      	ldr	r0, [r7, #0]
 800d004:	f000 fa82 	bl	800d50c <prvAddCurrentTaskToDelayedList>
}
 800d008:	bf00      	nop
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	20000b7c 	.word	0x20000b7c

0800d014 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10a      	bne.n	800d03c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	617b      	str	r3, [r7, #20]
}
 800d038:	bf00      	nop
 800d03a:	e7fe      	b.n	800d03a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d03c:	4b0a      	ldr	r3, [pc, #40]	; (800d068 <vTaskPlaceOnEventListRestricted+0x54>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3318      	adds	r3, #24
 800d042:	4619      	mov	r1, r3
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f7fe fd3c 	bl	800bac2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d002      	beq.n	800d056 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d050:	f04f 33ff 	mov.w	r3, #4294967295
 800d054:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d056:	6879      	ldr	r1, [r7, #4]
 800d058:	68b8      	ldr	r0, [r7, #8]
 800d05a:	f000 fa57 	bl	800d50c <prvAddCurrentTaskToDelayedList>
	}
 800d05e:	bf00      	nop
 800d060:	3718      	adds	r7, #24
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	20000b7c 	.word	0x20000b7c

0800d06c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10a      	bne.n	800d098 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	60fb      	str	r3, [r7, #12]
}
 800d094:	bf00      	nop
 800d096:	e7fe      	b.n	800d096 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	3318      	adds	r3, #24
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7fe fd6d 	bl	800bb7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0a2:	4b1e      	ldr	r3, [pc, #120]	; (800d11c <xTaskRemoveFromEventList+0xb0>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d11d      	bne.n	800d0e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fe fd64 	bl	800bb7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b8:	4b19      	ldr	r3, [pc, #100]	; (800d120 <xTaskRemoveFromEventList+0xb4>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d903      	bls.n	800d0c8 <xTaskRemoveFromEventList+0x5c>
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c4:	4a16      	ldr	r2, [pc, #88]	; (800d120 <xTaskRemoveFromEventList+0xb4>)
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4a13      	ldr	r2, [pc, #76]	; (800d124 <xTaskRemoveFromEventList+0xb8>)
 800d0d6:	441a      	add	r2, r3
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	3304      	adds	r3, #4
 800d0dc:	4619      	mov	r1, r3
 800d0de:	4610      	mov	r0, r2
 800d0e0:	f7fe fcef 	bl	800bac2 <vListInsertEnd>
 800d0e4:	e005      	b.n	800d0f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	3318      	adds	r3, #24
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	480e      	ldr	r0, [pc, #56]	; (800d128 <xTaskRemoveFromEventList+0xbc>)
 800d0ee:	f7fe fce8 	bl	800bac2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f6:	4b0d      	ldr	r3, [pc, #52]	; (800d12c <xTaskRemoveFromEventList+0xc0>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d905      	bls.n	800d10c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d100:	2301      	movs	r3, #1
 800d102:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d104:	4b0a      	ldr	r3, [pc, #40]	; (800d130 <xTaskRemoveFromEventList+0xc4>)
 800d106:	2201      	movs	r2, #1
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	e001      	b.n	800d110 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d10c:	2300      	movs	r3, #0
 800d10e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d110:	697b      	ldr	r3, [r7, #20]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3718      	adds	r7, #24
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	20001078 	.word	0x20001078
 800d120:	20001058 	.word	0x20001058
 800d124:	20000b80 	.word	0x20000b80
 800d128:	20001010 	.word	0x20001010
 800d12c:	20000b7c 	.word	0x20000b7c
 800d130:	20001064 	.word	0x20001064

0800d134 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d13c:	4b06      	ldr	r3, [pc, #24]	; (800d158 <vTaskInternalSetTimeOutState+0x24>)
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d144:	4b05      	ldr	r3, [pc, #20]	; (800d15c <vTaskInternalSetTimeOutState+0x28>)
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	605a      	str	r2, [r3, #4]
}
 800d14c:	bf00      	nop
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	20001068 	.word	0x20001068
 800d15c:	20001054 	.word	0x20001054

0800d160 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d10a      	bne.n	800d186 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	613b      	str	r3, [r7, #16]
}
 800d182:	bf00      	nop
 800d184:	e7fe      	b.n	800d184 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	60fb      	str	r3, [r7, #12]
}
 800d19e:	bf00      	nop
 800d1a0:	e7fe      	b.n	800d1a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d1a2:	f000 fe7f 	bl	800dea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d1a6:	4b1d      	ldr	r3, [pc, #116]	; (800d21c <xTaskCheckForTimeOut+0xbc>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	69ba      	ldr	r2, [r7, #24]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1be:	d102      	bne.n	800d1c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	61fb      	str	r3, [r7, #28]
 800d1c4:	e023      	b.n	800d20e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	4b15      	ldr	r3, [pc, #84]	; (800d220 <xTaskCheckForTimeOut+0xc0>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d007      	beq.n	800d1e2 <xTaskCheckForTimeOut+0x82>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	69ba      	ldr	r2, [r7, #24]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d302      	bcc.n	800d1e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	61fb      	str	r3, [r7, #28]
 800d1e0:	e015      	b.n	800d20e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	697a      	ldr	r2, [r7, #20]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d20b      	bcs.n	800d204 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	1ad2      	subs	r2, r2, r3
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f7ff ff9b 	bl	800d134 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d1fe:	2300      	movs	r3, #0
 800d200:	61fb      	str	r3, [r7, #28]
 800d202:	e004      	b.n	800d20e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	2200      	movs	r2, #0
 800d208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d20a:	2301      	movs	r3, #1
 800d20c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d20e:	f000 fe79 	bl	800df04 <vPortExitCritical>

	return xReturn;
 800d212:	69fb      	ldr	r3, [r7, #28]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3720      	adds	r7, #32
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	20001054 	.word	0x20001054
 800d220:	20001068 	.word	0x20001068

0800d224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d224:	b480      	push	{r7}
 800d226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d228:	4b03      	ldr	r3, [pc, #12]	; (800d238 <vTaskMissedYield+0x14>)
 800d22a:	2201      	movs	r2, #1
 800d22c:	601a      	str	r2, [r3, #0]
}
 800d22e:	bf00      	nop
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr
 800d238:	20001064 	.word	0x20001064

0800d23c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d244:	f000 f854 	bl	800d2f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d248:	4b07      	ldr	r3, [pc, #28]	; (800d268 <prvIdleTask+0x2c>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d907      	bls.n	800d260 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d250:	4b06      	ldr	r3, [pc, #24]	; (800d26c <prvIdleTask+0x30>)
 800d252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d256:	601a      	str	r2, [r3, #0]
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d260:	f7f3 f95e 	bl	8000520 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d264:	e7ee      	b.n	800d244 <prvIdleTask+0x8>
 800d266:	bf00      	nop
 800d268:	20000b80 	.word	0x20000b80
 800d26c:	e000ed04 	.word	0xe000ed04

0800d270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d276:	2300      	movs	r3, #0
 800d278:	607b      	str	r3, [r7, #4]
 800d27a:	e00c      	b.n	800d296 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	4613      	mov	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	4413      	add	r3, r2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4a12      	ldr	r2, [pc, #72]	; (800d2d0 <prvInitialiseTaskLists+0x60>)
 800d288:	4413      	add	r3, r2
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe fbec 	bl	800ba68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	3301      	adds	r3, #1
 800d294:	607b      	str	r3, [r7, #4]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b37      	cmp	r3, #55	; 0x37
 800d29a:	d9ef      	bls.n	800d27c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d29c:	480d      	ldr	r0, [pc, #52]	; (800d2d4 <prvInitialiseTaskLists+0x64>)
 800d29e:	f7fe fbe3 	bl	800ba68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d2a2:	480d      	ldr	r0, [pc, #52]	; (800d2d8 <prvInitialiseTaskLists+0x68>)
 800d2a4:	f7fe fbe0 	bl	800ba68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d2a8:	480c      	ldr	r0, [pc, #48]	; (800d2dc <prvInitialiseTaskLists+0x6c>)
 800d2aa:	f7fe fbdd 	bl	800ba68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d2ae:	480c      	ldr	r0, [pc, #48]	; (800d2e0 <prvInitialiseTaskLists+0x70>)
 800d2b0:	f7fe fbda 	bl	800ba68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d2b4:	480b      	ldr	r0, [pc, #44]	; (800d2e4 <prvInitialiseTaskLists+0x74>)
 800d2b6:	f7fe fbd7 	bl	800ba68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d2ba:	4b0b      	ldr	r3, [pc, #44]	; (800d2e8 <prvInitialiseTaskLists+0x78>)
 800d2bc:	4a05      	ldr	r2, [pc, #20]	; (800d2d4 <prvInitialiseTaskLists+0x64>)
 800d2be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d2c0:	4b0a      	ldr	r3, [pc, #40]	; (800d2ec <prvInitialiseTaskLists+0x7c>)
 800d2c2:	4a05      	ldr	r2, [pc, #20]	; (800d2d8 <prvInitialiseTaskLists+0x68>)
 800d2c4:	601a      	str	r2, [r3, #0]
}
 800d2c6:	bf00      	nop
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	20000b80 	.word	0x20000b80
 800d2d4:	20000fe0 	.word	0x20000fe0
 800d2d8:	20000ff4 	.word	0x20000ff4
 800d2dc:	20001010 	.word	0x20001010
 800d2e0:	20001024 	.word	0x20001024
 800d2e4:	2000103c 	.word	0x2000103c
 800d2e8:	20001008 	.word	0x20001008
 800d2ec:	2000100c 	.word	0x2000100c

0800d2f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2f6:	e019      	b.n	800d32c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d2f8:	f000 fdd4 	bl	800dea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2fc:	4b10      	ldr	r3, [pc, #64]	; (800d340 <prvCheckTasksWaitingTermination+0x50>)
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	3304      	adds	r3, #4
 800d308:	4618      	mov	r0, r3
 800d30a:	f7fe fc37 	bl	800bb7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d30e:	4b0d      	ldr	r3, [pc, #52]	; (800d344 <prvCheckTasksWaitingTermination+0x54>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	3b01      	subs	r3, #1
 800d314:	4a0b      	ldr	r2, [pc, #44]	; (800d344 <prvCheckTasksWaitingTermination+0x54>)
 800d316:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d318:	4b0b      	ldr	r3, [pc, #44]	; (800d348 <prvCheckTasksWaitingTermination+0x58>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3b01      	subs	r3, #1
 800d31e:	4a0a      	ldr	r2, [pc, #40]	; (800d348 <prvCheckTasksWaitingTermination+0x58>)
 800d320:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d322:	f000 fdef 	bl	800df04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f810 	bl	800d34c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d32c:	4b06      	ldr	r3, [pc, #24]	; (800d348 <prvCheckTasksWaitingTermination+0x58>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1e1      	bne.n	800d2f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d334:	bf00      	nop
 800d336:	bf00      	nop
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	20001024 	.word	0x20001024
 800d344:	20001050 	.word	0x20001050
 800d348:	20001038 	.word	0x20001038

0800d34c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	3358      	adds	r3, #88	; 0x58
 800d358:	4618      	mov	r0, r3
 800d35a:	f001 fed9 	bl	800f110 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d364:	2b00      	cmp	r3, #0
 800d366:	d108      	bne.n	800d37a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d36c:	4618      	mov	r0, r3
 800d36e:	f000 ff87 	bl	800e280 <vPortFree>
				vPortFree( pxTCB );
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 ff84 	bl	800e280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d378:	e018      	b.n	800d3ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d380:	2b01      	cmp	r3, #1
 800d382:	d103      	bne.n	800d38c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 ff7b 	bl	800e280 <vPortFree>
	}
 800d38a:	e00f      	b.n	800d3ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d392:	2b02      	cmp	r3, #2
 800d394:	d00a      	beq.n	800d3ac <prvDeleteTCB+0x60>
	__asm volatile
 800d396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39a:	f383 8811 	msr	BASEPRI, r3
 800d39e:	f3bf 8f6f 	isb	sy
 800d3a2:	f3bf 8f4f 	dsb	sy
 800d3a6:	60fb      	str	r3, [r7, #12]
}
 800d3a8:	bf00      	nop
 800d3aa:	e7fe      	b.n	800d3aa <prvDeleteTCB+0x5e>
	}
 800d3ac:	bf00      	nop
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3ba:	4b0c      	ldr	r3, [pc, #48]	; (800d3ec <prvResetNextTaskUnblockTime+0x38>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d104      	bne.n	800d3ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d3c4:	4b0a      	ldr	r3, [pc, #40]	; (800d3f0 <prvResetNextTaskUnblockTime+0x3c>)
 800d3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d3cc:	e008      	b.n	800d3e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ce:	4b07      	ldr	r3, [pc, #28]	; (800d3ec <prvResetNextTaskUnblockTime+0x38>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	4a04      	ldr	r2, [pc, #16]	; (800d3f0 <prvResetNextTaskUnblockTime+0x3c>)
 800d3de:	6013      	str	r3, [r2, #0]
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	20001008 	.word	0x20001008
 800d3f0:	20001070 	.word	0x20001070

0800d3f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <xTaskGetSchedulerState+0x34>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d102      	bne.n	800d408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d402:	2301      	movs	r3, #1
 800d404:	607b      	str	r3, [r7, #4]
 800d406:	e008      	b.n	800d41a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d408:	4b08      	ldr	r3, [pc, #32]	; (800d42c <xTaskGetSchedulerState+0x38>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d102      	bne.n	800d416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d410:	2302      	movs	r3, #2
 800d412:	607b      	str	r3, [r7, #4]
 800d414:	e001      	b.n	800d41a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d416:	2300      	movs	r3, #0
 800d418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d41a:	687b      	ldr	r3, [r7, #4]
	}
 800d41c:	4618      	mov	r0, r3
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr
 800d428:	2000105c 	.word	0x2000105c
 800d42c:	20001078 	.word	0x20001078

0800d430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d43c:	2300      	movs	r3, #0
 800d43e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d056      	beq.n	800d4f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d446:	4b2e      	ldr	r3, [pc, #184]	; (800d500 <xTaskPriorityDisinherit+0xd0>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	693a      	ldr	r2, [r7, #16]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d00a      	beq.n	800d466 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d454:	f383 8811 	msr	BASEPRI, r3
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	60fb      	str	r3, [r7, #12]
}
 800d462:	bf00      	nop
 800d464:	e7fe      	b.n	800d464 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10a      	bne.n	800d484 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	60bb      	str	r3, [r7, #8]
}
 800d480:	bf00      	nop
 800d482:	e7fe      	b.n	800d482 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d488:	1e5a      	subs	r2, r3, #1
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d496:	429a      	cmp	r2, r3
 800d498:	d02c      	beq.n	800d4f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d128      	bne.n	800d4f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe fb68 	bl	800bb7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c4:	4b0f      	ldr	r3, [pc, #60]	; (800d504 <xTaskPriorityDisinherit+0xd4>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d903      	bls.n	800d4d4 <xTaskPriorityDisinherit+0xa4>
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d0:	4a0c      	ldr	r2, [pc, #48]	; (800d504 <xTaskPriorityDisinherit+0xd4>)
 800d4d2:	6013      	str	r3, [r2, #0]
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d8:	4613      	mov	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4a09      	ldr	r2, [pc, #36]	; (800d508 <xTaskPriorityDisinherit+0xd8>)
 800d4e2:	441a      	add	r2, r3
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	f7fe fae9 	bl	800bac2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d4f4:	697b      	ldr	r3, [r7, #20]
	}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3718      	adds	r7, #24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	20000b7c 	.word	0x20000b7c
 800d504:	20001058 	.word	0x20001058
 800d508:	20000b80 	.word	0x20000b80

0800d50c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d516:	4b21      	ldr	r3, [pc, #132]	; (800d59c <prvAddCurrentTaskToDelayedList+0x90>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d51c:	4b20      	ldr	r3, [pc, #128]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	3304      	adds	r3, #4
 800d522:	4618      	mov	r0, r3
 800d524:	f7fe fb2a 	bl	800bb7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d52e:	d10a      	bne.n	800d546 <prvAddCurrentTaskToDelayedList+0x3a>
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d007      	beq.n	800d546 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d536:	4b1a      	ldr	r3, [pc, #104]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3304      	adds	r3, #4
 800d53c:	4619      	mov	r1, r3
 800d53e:	4819      	ldr	r0, [pc, #100]	; (800d5a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d540:	f7fe fabf 	bl	800bac2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d544:	e026      	b.n	800d594 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4413      	add	r3, r2
 800d54c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d54e:	4b14      	ldr	r3, [pc, #80]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d209      	bcs.n	800d572 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d55e:	4b12      	ldr	r3, [pc, #72]	; (800d5a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	4b0f      	ldr	r3, [pc, #60]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	3304      	adds	r3, #4
 800d568:	4619      	mov	r1, r3
 800d56a:	4610      	mov	r0, r2
 800d56c:	f7fe facd 	bl	800bb0a <vListInsert>
}
 800d570:	e010      	b.n	800d594 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d572:	4b0e      	ldr	r3, [pc, #56]	; (800d5ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	4b0a      	ldr	r3, [pc, #40]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	3304      	adds	r3, #4
 800d57c:	4619      	mov	r1, r3
 800d57e:	4610      	mov	r0, r2
 800d580:	f7fe fac3 	bl	800bb0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d584:	4b0a      	ldr	r3, [pc, #40]	; (800d5b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d202      	bcs.n	800d594 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d58e:	4a08      	ldr	r2, [pc, #32]	; (800d5b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	6013      	str	r3, [r2, #0]
}
 800d594:	bf00      	nop
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20001054 	.word	0x20001054
 800d5a0:	20000b7c 	.word	0x20000b7c
 800d5a4:	2000103c 	.word	0x2000103c
 800d5a8:	2000100c 	.word	0x2000100c
 800d5ac:	20001008 	.word	0x20001008
 800d5b0:	20001070 	.word	0x20001070

0800d5b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b08a      	sub	sp, #40	; 0x28
 800d5b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d5be:	f000 fb07 	bl	800dbd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d5c2:	4b1c      	ldr	r3, [pc, #112]	; (800d634 <xTimerCreateTimerTask+0x80>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d021      	beq.n	800d60e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d5d2:	1d3a      	adds	r2, r7, #4
 800d5d4:	f107 0108 	add.w	r1, r7, #8
 800d5d8:	f107 030c 	add.w	r3, r7, #12
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fe fa29 	bl	800ba34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	9202      	str	r2, [sp, #8]
 800d5ea:	9301      	str	r3, [sp, #4]
 800d5ec:	2302      	movs	r3, #2
 800d5ee:	9300      	str	r3, [sp, #0]
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	460a      	mov	r2, r1
 800d5f4:	4910      	ldr	r1, [pc, #64]	; (800d638 <xTimerCreateTimerTask+0x84>)
 800d5f6:	4811      	ldr	r0, [pc, #68]	; (800d63c <xTimerCreateTimerTask+0x88>)
 800d5f8:	f7ff f890 	bl	800c71c <xTaskCreateStatic>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	4a10      	ldr	r2, [pc, #64]	; (800d640 <xTimerCreateTimerTask+0x8c>)
 800d600:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d602:	4b0f      	ldr	r3, [pc, #60]	; (800d640 <xTimerCreateTimerTask+0x8c>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d001      	beq.n	800d60e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d60a:	2301      	movs	r3, #1
 800d60c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10a      	bne.n	800d62a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	613b      	str	r3, [r7, #16]
}
 800d626:	bf00      	nop
 800d628:	e7fe      	b.n	800d628 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d62a:	697b      	ldr	r3, [r7, #20]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3718      	adds	r7, #24
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	200010b4 	.word	0x200010b4
 800d638:	0800f4ec 	.word	0x0800f4ec
 800d63c:	0800d779 	.word	0x0800d779
 800d640:	200010b8 	.word	0x200010b8

0800d644 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b08a      	sub	sp, #40	; 0x28
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d652:	2300      	movs	r3, #0
 800d654:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10a      	bne.n	800d672 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	623b      	str	r3, [r7, #32]
}
 800d66e:	bf00      	nop
 800d670:	e7fe      	b.n	800d670 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d672:	4b1a      	ldr	r3, [pc, #104]	; (800d6dc <xTimerGenericCommand+0x98>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d02a      	beq.n	800d6d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2b05      	cmp	r3, #5
 800d68a:	dc18      	bgt.n	800d6be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d68c:	f7ff feb2 	bl	800d3f4 <xTaskGetSchedulerState>
 800d690:	4603      	mov	r3, r0
 800d692:	2b02      	cmp	r3, #2
 800d694:	d109      	bne.n	800d6aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d696:	4b11      	ldr	r3, [pc, #68]	; (800d6dc <xTimerGenericCommand+0x98>)
 800d698:	6818      	ldr	r0, [r3, #0]
 800d69a:	f107 0110 	add.w	r1, r7, #16
 800d69e:	2300      	movs	r3, #0
 800d6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6a2:	f7fe fbd3 	bl	800be4c <xQueueGenericSend>
 800d6a6:	6278      	str	r0, [r7, #36]	; 0x24
 800d6a8:	e012      	b.n	800d6d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d6aa:	4b0c      	ldr	r3, [pc, #48]	; (800d6dc <xTimerGenericCommand+0x98>)
 800d6ac:	6818      	ldr	r0, [r3, #0]
 800d6ae:	f107 0110 	add.w	r1, r7, #16
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f7fe fbc9 	bl	800be4c <xQueueGenericSend>
 800d6ba:	6278      	str	r0, [r7, #36]	; 0x24
 800d6bc:	e008      	b.n	800d6d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d6be:	4b07      	ldr	r3, [pc, #28]	; (800d6dc <xTimerGenericCommand+0x98>)
 800d6c0:	6818      	ldr	r0, [r3, #0]
 800d6c2:	f107 0110 	add.w	r1, r7, #16
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	683a      	ldr	r2, [r7, #0]
 800d6ca:	f7fe fcbd 	bl	800c048 <xQueueGenericSendFromISR>
 800d6ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3728      	adds	r7, #40	; 0x28
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	200010b4 	.word	0x200010b4

0800d6e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b088      	sub	sp, #32
 800d6e4:	af02      	add	r7, sp, #8
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ea:	4b22      	ldr	r3, [pc, #136]	; (800d774 <prvProcessExpiredTimer+0x94>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	3304      	adds	r3, #4
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe fa3f 	bl	800bb7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d704:	f003 0304 	and.w	r3, r3, #4
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d022      	beq.n	800d752 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	699a      	ldr	r2, [r3, #24]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	18d1      	adds	r1, r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	6978      	ldr	r0, [r7, #20]
 800d71a:	f000 f8d1 	bl	800d8c0 <prvInsertTimerInActiveList>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d01f      	beq.n	800d764 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d724:	2300      	movs	r3, #0
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	2300      	movs	r3, #0
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	2100      	movs	r1, #0
 800d72e:	6978      	ldr	r0, [r7, #20]
 800d730:	f7ff ff88 	bl	800d644 <xTimerGenericCommand>
 800d734:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d113      	bne.n	800d764 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	60fb      	str	r3, [r7, #12]
}
 800d74e:	bf00      	nop
 800d750:	e7fe      	b.n	800d750 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d758:	f023 0301 	bic.w	r3, r3, #1
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	6a1b      	ldr	r3, [r3, #32]
 800d768:	6978      	ldr	r0, [r7, #20]
 800d76a:	4798      	blx	r3
}
 800d76c:	bf00      	nop
 800d76e:	3718      	adds	r7, #24
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	200010ac 	.word	0x200010ac

0800d778 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d780:	f107 0308 	add.w	r3, r7, #8
 800d784:	4618      	mov	r0, r3
 800d786:	f000 f857 	bl	800d838 <prvGetNextExpireTime>
 800d78a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	4619      	mov	r1, r3
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f000 f803 	bl	800d79c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d796:	f000 f8d5 	bl	800d944 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d79a:	e7f1      	b.n	800d780 <prvTimerTask+0x8>

0800d79c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d7a6:	f7ff fa1b 	bl	800cbe0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7aa:	f107 0308 	add.w	r3, r7, #8
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 f866 	bl	800d880 <prvSampleTimeNow>
 800d7b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d130      	bne.n	800d81e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10a      	bne.n	800d7d8 <prvProcessTimerOrBlockTask+0x3c>
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d806      	bhi.n	800d7d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d7ca:	f7ff fa17 	bl	800cbfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d7ce:	68f9      	ldr	r1, [r7, #12]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7ff ff85 	bl	800d6e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d7d6:	e024      	b.n	800d822 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d008      	beq.n	800d7f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d7de:	4b13      	ldr	r3, [pc, #76]	; (800d82c <prvProcessTimerOrBlockTask+0x90>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d101      	bne.n	800d7ec <prvProcessTimerOrBlockTask+0x50>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e000      	b.n	800d7ee <prvProcessTimerOrBlockTask+0x52>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d7f0:	4b0f      	ldr	r3, [pc, #60]	; (800d830 <prvProcessTimerOrBlockTask+0x94>)
 800d7f2:	6818      	ldr	r0, [r3, #0]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	f7fe ff59 	bl	800c6b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d802:	f7ff f9fb 	bl	800cbfc <xTaskResumeAll>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10a      	bne.n	800d822 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d80c:	4b09      	ldr	r3, [pc, #36]	; (800d834 <prvProcessTimerOrBlockTask+0x98>)
 800d80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	f3bf 8f6f 	isb	sy
}
 800d81c:	e001      	b.n	800d822 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d81e:	f7ff f9ed 	bl	800cbfc <xTaskResumeAll>
}
 800d822:	bf00      	nop
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	200010b0 	.word	0x200010b0
 800d830:	200010b4 	.word	0x200010b4
 800d834:	e000ed04 	.word	0xe000ed04

0800d838 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d840:	4b0e      	ldr	r3, [pc, #56]	; (800d87c <prvGetNextExpireTime+0x44>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <prvGetNextExpireTime+0x16>
 800d84a:	2201      	movs	r2, #1
 800d84c:	e000      	b.n	800d850 <prvGetNextExpireTime+0x18>
 800d84e:	2200      	movs	r2, #0
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d105      	bne.n	800d868 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d85c:	4b07      	ldr	r3, [pc, #28]	; (800d87c <prvGetNextExpireTime+0x44>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	60fb      	str	r3, [r7, #12]
 800d866:	e001      	b.n	800d86c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d868:	2300      	movs	r3, #0
 800d86a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d86c:	68fb      	ldr	r3, [r7, #12]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3714      	adds	r7, #20
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	200010ac 	.word	0x200010ac

0800d880 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d888:	f7ff fa56 	bl	800cd38 <xTaskGetTickCount>
 800d88c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d88e:	4b0b      	ldr	r3, [pc, #44]	; (800d8bc <prvSampleTimeNow+0x3c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	429a      	cmp	r2, r3
 800d896:	d205      	bcs.n	800d8a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d898:	f000 f936 	bl	800db08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	601a      	str	r2, [r3, #0]
 800d8a2:	e002      	b.n	800d8aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d8aa:	4a04      	ldr	r2, [pc, #16]	; (800d8bc <prvSampleTimeNow+0x3c>)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	200010bc 	.word	0x200010bc

0800d8c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	607a      	str	r2, [r7, #4]
 800d8cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d812      	bhi.n	800d90c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	1ad2      	subs	r2, r2, r3
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	699b      	ldr	r3, [r3, #24]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d302      	bcc.n	800d8fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	617b      	str	r3, [r7, #20]
 800d8f8:	e01b      	b.n	800d932 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d8fa:	4b10      	ldr	r3, [pc, #64]	; (800d93c <prvInsertTimerInActiveList+0x7c>)
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	3304      	adds	r3, #4
 800d902:	4619      	mov	r1, r3
 800d904:	4610      	mov	r0, r2
 800d906:	f7fe f900 	bl	800bb0a <vListInsert>
 800d90a:	e012      	b.n	800d932 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	429a      	cmp	r2, r3
 800d912:	d206      	bcs.n	800d922 <prvInsertTimerInActiveList+0x62>
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d302      	bcc.n	800d922 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d91c:	2301      	movs	r3, #1
 800d91e:	617b      	str	r3, [r7, #20]
 800d920:	e007      	b.n	800d932 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d922:	4b07      	ldr	r3, [pc, #28]	; (800d940 <prvInsertTimerInActiveList+0x80>)
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	3304      	adds	r3, #4
 800d92a:	4619      	mov	r1, r3
 800d92c:	4610      	mov	r0, r2
 800d92e:	f7fe f8ec 	bl	800bb0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d932:	697b      	ldr	r3, [r7, #20]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3718      	adds	r7, #24
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	200010b0 	.word	0x200010b0
 800d940:	200010ac 	.word	0x200010ac

0800d944 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b08e      	sub	sp, #56	; 0x38
 800d948:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d94a:	e0ca      	b.n	800dae2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	da18      	bge.n	800d984 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d952:	1d3b      	adds	r3, r7, #4
 800d954:	3304      	adds	r3, #4
 800d956:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10a      	bne.n	800d974 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	61fb      	str	r3, [r7, #28]
}
 800d970:	bf00      	nop
 800d972:	e7fe      	b.n	800d972 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d97a:	6850      	ldr	r0, [r2, #4]
 800d97c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d97e:	6892      	ldr	r2, [r2, #8]
 800d980:	4611      	mov	r1, r2
 800d982:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	f2c0 80aa 	blt.w	800dae0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	695b      	ldr	r3, [r3, #20]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d004      	beq.n	800d9a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99a:	3304      	adds	r3, #4
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fe f8ed 	bl	800bb7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9a2:	463b      	mov	r3, r7
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff ff6b 	bl	800d880 <prvSampleTimeNow>
 800d9aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b09      	cmp	r3, #9
 800d9b0:	f200 8097 	bhi.w	800dae2 <prvProcessReceivedCommands+0x19e>
 800d9b4:	a201      	add	r2, pc, #4	; (adr r2, 800d9bc <prvProcessReceivedCommands+0x78>)
 800d9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ba:	bf00      	nop
 800d9bc:	0800d9e5 	.word	0x0800d9e5
 800d9c0:	0800d9e5 	.word	0x0800d9e5
 800d9c4:	0800d9e5 	.word	0x0800d9e5
 800d9c8:	0800da59 	.word	0x0800da59
 800d9cc:	0800da6d 	.word	0x0800da6d
 800d9d0:	0800dab7 	.word	0x0800dab7
 800d9d4:	0800d9e5 	.word	0x0800d9e5
 800d9d8:	0800d9e5 	.word	0x0800d9e5
 800d9dc:	0800da59 	.word	0x0800da59
 800d9e0:	0800da6d 	.word	0x0800da6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9ea:	f043 0301 	orr.w	r3, r3, #1
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d9f6:	68ba      	ldr	r2, [r7, #8]
 800d9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fa:	699b      	ldr	r3, [r3, #24]
 800d9fc:	18d1      	adds	r1, r2, r3
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da04:	f7ff ff5c 	bl	800d8c0 <prvInsertTimerInActiveList>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d069      	beq.n	800dae2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da1c:	f003 0304 	and.w	r3, r3, #4
 800da20:	2b00      	cmp	r3, #0
 800da22:	d05e      	beq.n	800dae2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	441a      	add	r2, r3
 800da2c:	2300      	movs	r3, #0
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	2300      	movs	r3, #0
 800da32:	2100      	movs	r1, #0
 800da34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da36:	f7ff fe05 	bl	800d644 <xTimerGenericCommand>
 800da3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d14f      	bne.n	800dae2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	61bb      	str	r3, [r7, #24]
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da5e:	f023 0301 	bic.w	r3, r3, #1
 800da62:	b2da      	uxtb	r2, r3
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800da6a:	e03a      	b.n	800dae2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da72:	f043 0301 	orr.w	r3, r3, #1
 800da76:	b2da      	uxtb	r2, r3
 800da78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10a      	bne.n	800daa2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800da8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da90:	f383 8811 	msr	BASEPRI, r3
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	617b      	str	r3, [r7, #20]
}
 800da9e:	bf00      	nop
 800daa0:	e7fe      	b.n	800daa0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800daa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa4:	699a      	ldr	r2, [r3, #24]
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	18d1      	adds	r1, r2, r3
 800daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dab0:	f7ff ff06 	bl	800d8c0 <prvInsertTimerInActiveList>
					break;
 800dab4:	e015      	b.n	800dae2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d103      	bne.n	800dacc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dac6:	f000 fbdb 	bl	800e280 <vPortFree>
 800daca:	e00a      	b.n	800dae2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dad2:	f023 0301 	bic.w	r3, r3, #1
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dade:	e000      	b.n	800dae2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dae0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dae2:	4b08      	ldr	r3, [pc, #32]	; (800db04 <prvProcessReceivedCommands+0x1c0>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	1d39      	adds	r1, r7, #4
 800dae8:	2200      	movs	r2, #0
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe fb48 	bl	800c180 <xQueueReceive>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f47f af2a 	bne.w	800d94c <prvProcessReceivedCommands+0x8>
	}
}
 800daf8:	bf00      	nop
 800dafa:	bf00      	nop
 800dafc:	3730      	adds	r7, #48	; 0x30
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	200010b4 	.word	0x200010b4

0800db08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db0e:	e048      	b.n	800dba2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db10:	4b2d      	ldr	r3, [pc, #180]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db1a:	4b2b      	ldr	r3, [pc, #172]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	3304      	adds	r3, #4
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fe f827 	bl	800bb7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6a1b      	ldr	r3, [r3, #32]
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db3c:	f003 0304 	and.w	r3, r3, #4
 800db40:	2b00      	cmp	r3, #0
 800db42:	d02e      	beq.n	800dba2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	699b      	ldr	r3, [r3, #24]
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	4413      	add	r3, r2
 800db4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	429a      	cmp	r2, r3
 800db54:	d90e      	bls.n	800db74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	68ba      	ldr	r2, [r7, #8]
 800db5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db62:	4b19      	ldr	r3, [pc, #100]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3304      	adds	r3, #4
 800db6a:	4619      	mov	r1, r3
 800db6c:	4610      	mov	r0, r2
 800db6e:	f7fd ffcc 	bl	800bb0a <vListInsert>
 800db72:	e016      	b.n	800dba2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db74:	2300      	movs	r3, #0
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	2300      	movs	r3, #0
 800db7a:	693a      	ldr	r2, [r7, #16]
 800db7c:	2100      	movs	r1, #0
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f7ff fd60 	bl	800d644 <xTimerGenericCommand>
 800db84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10a      	bne.n	800dba2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db90:	f383 8811 	msr	BASEPRI, r3
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	603b      	str	r3, [r7, #0]
}
 800db9e:	bf00      	nop
 800dba0:	e7fe      	b.n	800dba0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dba2:	4b09      	ldr	r3, [pc, #36]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1b1      	bne.n	800db10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dbac:	4b06      	ldr	r3, [pc, #24]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dbb2:	4b06      	ldr	r3, [pc, #24]	; (800dbcc <prvSwitchTimerLists+0xc4>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4a04      	ldr	r2, [pc, #16]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800dbb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dbba:	4a04      	ldr	r2, [pc, #16]	; (800dbcc <prvSwitchTimerLists+0xc4>)
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	6013      	str	r3, [r2, #0]
}
 800dbc0:	bf00      	nop
 800dbc2:	3718      	adds	r7, #24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	200010ac 	.word	0x200010ac
 800dbcc:	200010b0 	.word	0x200010b0

0800dbd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dbd6:	f000 f965 	bl	800dea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dbda:	4b15      	ldr	r3, [pc, #84]	; (800dc30 <prvCheckForValidListAndQueue+0x60>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d120      	bne.n	800dc24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dbe2:	4814      	ldr	r0, [pc, #80]	; (800dc34 <prvCheckForValidListAndQueue+0x64>)
 800dbe4:	f7fd ff40 	bl	800ba68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dbe8:	4813      	ldr	r0, [pc, #76]	; (800dc38 <prvCheckForValidListAndQueue+0x68>)
 800dbea:	f7fd ff3d 	bl	800ba68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dbee:	4b13      	ldr	r3, [pc, #76]	; (800dc3c <prvCheckForValidListAndQueue+0x6c>)
 800dbf0:	4a10      	ldr	r2, [pc, #64]	; (800dc34 <prvCheckForValidListAndQueue+0x64>)
 800dbf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dbf4:	4b12      	ldr	r3, [pc, #72]	; (800dc40 <prvCheckForValidListAndQueue+0x70>)
 800dbf6:	4a10      	ldr	r2, [pc, #64]	; (800dc38 <prvCheckForValidListAndQueue+0x68>)
 800dbf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	4b11      	ldr	r3, [pc, #68]	; (800dc44 <prvCheckForValidListAndQueue+0x74>)
 800dc00:	4a11      	ldr	r2, [pc, #68]	; (800dc48 <prvCheckForValidListAndQueue+0x78>)
 800dc02:	2110      	movs	r1, #16
 800dc04:	200a      	movs	r0, #10
 800dc06:	f7fe f84b 	bl	800bca0 <xQueueGenericCreateStatic>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	4a08      	ldr	r2, [pc, #32]	; (800dc30 <prvCheckForValidListAndQueue+0x60>)
 800dc0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc10:	4b07      	ldr	r3, [pc, #28]	; (800dc30 <prvCheckForValidListAndQueue+0x60>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d005      	beq.n	800dc24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <prvCheckForValidListAndQueue+0x60>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	490b      	ldr	r1, [pc, #44]	; (800dc4c <prvCheckForValidListAndQueue+0x7c>)
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7fe fd1e 	bl	800c660 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc24:	f000 f96e 	bl	800df04 <vPortExitCritical>
}
 800dc28:	bf00      	nop
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	200010b4 	.word	0x200010b4
 800dc34:	20001084 	.word	0x20001084
 800dc38:	20001098 	.word	0x20001098
 800dc3c:	200010ac 	.word	0x200010ac
 800dc40:	200010b0 	.word	0x200010b0
 800dc44:	20001160 	.word	0x20001160
 800dc48:	200010c0 	.word	0x200010c0
 800dc4c:	0800f4f4 	.word	0x0800f4f4

0800dc50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc50:	b480      	push	{r7}
 800dc52:	b085      	sub	sp, #20
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	3b04      	subs	r3, #4
 800dc60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	3b04      	subs	r3, #4
 800dc6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	f023 0201 	bic.w	r2, r3, #1
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	3b04      	subs	r3, #4
 800dc7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc80:	4a0c      	ldr	r2, [pc, #48]	; (800dcb4 <pxPortInitialiseStack+0x64>)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	3b14      	subs	r3, #20
 800dc8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	3b04      	subs	r3, #4
 800dc96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f06f 0202 	mvn.w	r2, #2
 800dc9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	3b20      	subs	r3, #32
 800dca4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dca6:	68fb      	ldr	r3, [r7, #12]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3714      	adds	r7, #20
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr
 800dcb4:	0800dcb9 	.word	0x0800dcb9

0800dcb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcc2:	4b12      	ldr	r3, [pc, #72]	; (800dd0c <prvTaskExitError+0x54>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcca:	d00a      	beq.n	800dce2 <prvTaskExitError+0x2a>
	__asm volatile
 800dccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	60fb      	str	r3, [r7, #12]
}
 800dcde:	bf00      	nop
 800dce0:	e7fe      	b.n	800dce0 <prvTaskExitError+0x28>
	__asm volatile
 800dce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	60bb      	str	r3, [r7, #8]
}
 800dcf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dcf6:	bf00      	nop
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d0fc      	beq.n	800dcf8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dcfe:	bf00      	nop
 800dd00:	bf00      	nop
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	200000a8 	.word	0x200000a8

0800dd10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd10:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <pxCurrentTCBConst2>)
 800dd12:	6819      	ldr	r1, [r3, #0]
 800dd14:	6808      	ldr	r0, [r1, #0]
 800dd16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1a:	f380 8809 	msr	PSP, r0
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f04f 0000 	mov.w	r0, #0
 800dd26:	f380 8811 	msr	BASEPRI, r0
 800dd2a:	4770      	bx	lr
 800dd2c:	f3af 8000 	nop.w

0800dd30 <pxCurrentTCBConst2>:
 800dd30:	20000b7c 	.word	0x20000b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop

0800dd38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd38:	4808      	ldr	r0, [pc, #32]	; (800dd5c <prvPortStartFirstTask+0x24>)
 800dd3a:	6800      	ldr	r0, [r0, #0]
 800dd3c:	6800      	ldr	r0, [r0, #0]
 800dd3e:	f380 8808 	msr	MSP, r0
 800dd42:	f04f 0000 	mov.w	r0, #0
 800dd46:	f380 8814 	msr	CONTROL, r0
 800dd4a:	b662      	cpsie	i
 800dd4c:	b661      	cpsie	f
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	df00      	svc	0
 800dd58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd5a:	bf00      	nop
 800dd5c:	e000ed08 	.word	0xe000ed08

0800dd60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dd66:	4b46      	ldr	r3, [pc, #280]	; (800de80 <xPortStartScheduler+0x120>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a46      	ldr	r2, [pc, #280]	; (800de84 <xPortStartScheduler+0x124>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d10a      	bne.n	800dd86 <xPortStartScheduler+0x26>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	613b      	str	r3, [r7, #16]
}
 800dd82:	bf00      	nop
 800dd84:	e7fe      	b.n	800dd84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dd86:	4b3e      	ldr	r3, [pc, #248]	; (800de80 <xPortStartScheduler+0x120>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a3f      	ldr	r2, [pc, #252]	; (800de88 <xPortStartScheduler+0x128>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d10a      	bne.n	800dda6 <xPortStartScheduler+0x46>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	60fb      	str	r3, [r7, #12]
}
 800dda2:	bf00      	nop
 800dda4:	e7fe      	b.n	800dda4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dda6:	4b39      	ldr	r3, [pc, #228]	; (800de8c <xPortStartScheduler+0x12c>)
 800dda8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	22ff      	movs	r2, #255	; 0xff
 800ddb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ddc0:	78fb      	ldrb	r3, [r7, #3]
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	4b31      	ldr	r3, [pc, #196]	; (800de90 <xPortStartScheduler+0x130>)
 800ddcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ddce:	4b31      	ldr	r3, [pc, #196]	; (800de94 <xPortStartScheduler+0x134>)
 800ddd0:	2207      	movs	r2, #7
 800ddd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddd4:	e009      	b.n	800ddea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ddd6:	4b2f      	ldr	r3, [pc, #188]	; (800de94 <xPortStartScheduler+0x134>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3b01      	subs	r3, #1
 800dddc:	4a2d      	ldr	r2, [pc, #180]	; (800de94 <xPortStartScheduler+0x134>)
 800ddde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dde0:	78fb      	ldrb	r3, [r7, #3]
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	005b      	lsls	r3, r3, #1
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddea:	78fb      	ldrb	r3, [r7, #3]
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddf2:	2b80      	cmp	r3, #128	; 0x80
 800ddf4:	d0ef      	beq.n	800ddd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ddf6:	4b27      	ldr	r3, [pc, #156]	; (800de94 <xPortStartScheduler+0x134>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f1c3 0307 	rsb	r3, r3, #7
 800ddfe:	2b04      	cmp	r3, #4
 800de00:	d00a      	beq.n	800de18 <xPortStartScheduler+0xb8>
	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	60bb      	str	r3, [r7, #8]
}
 800de14:	bf00      	nop
 800de16:	e7fe      	b.n	800de16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de18:	4b1e      	ldr	r3, [pc, #120]	; (800de94 <xPortStartScheduler+0x134>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	021b      	lsls	r3, r3, #8
 800de1e:	4a1d      	ldr	r2, [pc, #116]	; (800de94 <xPortStartScheduler+0x134>)
 800de20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de22:	4b1c      	ldr	r3, [pc, #112]	; (800de94 <xPortStartScheduler+0x134>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de2a:	4a1a      	ldr	r2, [pc, #104]	; (800de94 <xPortStartScheduler+0x134>)
 800de2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	b2da      	uxtb	r2, r3
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de36:	4b18      	ldr	r3, [pc, #96]	; (800de98 <xPortStartScheduler+0x138>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a17      	ldr	r2, [pc, #92]	; (800de98 <xPortStartScheduler+0x138>)
 800de3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de42:	4b15      	ldr	r3, [pc, #84]	; (800de98 <xPortStartScheduler+0x138>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a14      	ldr	r2, [pc, #80]	; (800de98 <xPortStartScheduler+0x138>)
 800de48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de4e:	f000 f8dd 	bl	800e00c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de52:	4b12      	ldr	r3, [pc, #72]	; (800de9c <xPortStartScheduler+0x13c>)
 800de54:	2200      	movs	r2, #0
 800de56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de58:	f000 f8fc 	bl	800e054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de5c:	4b10      	ldr	r3, [pc, #64]	; (800dea0 <xPortStartScheduler+0x140>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a0f      	ldr	r2, [pc, #60]	; (800dea0 <xPortStartScheduler+0x140>)
 800de62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800de66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de68:	f7ff ff66 	bl	800dd38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de6c:	f7ff f82e 	bl	800cecc <vTaskSwitchContext>
	prvTaskExitError();
 800de70:	f7ff ff22 	bl	800dcb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	e000ed00 	.word	0xe000ed00
 800de84:	410fc271 	.word	0x410fc271
 800de88:	410fc270 	.word	0x410fc270
 800de8c:	e000e400 	.word	0xe000e400
 800de90:	200011b0 	.word	0x200011b0
 800de94:	200011b4 	.word	0x200011b4
 800de98:	e000ed20 	.word	0xe000ed20
 800de9c:	200000a8 	.word	0x200000a8
 800dea0:	e000ef34 	.word	0xe000ef34

0800dea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	607b      	str	r3, [r7, #4]
}
 800debc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800debe:	4b0f      	ldr	r3, [pc, #60]	; (800defc <vPortEnterCritical+0x58>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	3301      	adds	r3, #1
 800dec4:	4a0d      	ldr	r2, [pc, #52]	; (800defc <vPortEnterCritical+0x58>)
 800dec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dec8:	4b0c      	ldr	r3, [pc, #48]	; (800defc <vPortEnterCritical+0x58>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d10f      	bne.n	800def0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ded0:	4b0b      	ldr	r3, [pc, #44]	; (800df00 <vPortEnterCritical+0x5c>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00a      	beq.n	800def0 <vPortEnterCritical+0x4c>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	603b      	str	r3, [r7, #0]
}
 800deec:	bf00      	nop
 800deee:	e7fe      	b.n	800deee <vPortEnterCritical+0x4a>
	}
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	200000a8 	.word	0x200000a8
 800df00:	e000ed04 	.word	0xe000ed04

0800df04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df0a:	4b12      	ldr	r3, [pc, #72]	; (800df54 <vPortExitCritical+0x50>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10a      	bne.n	800df28 <vPortExitCritical+0x24>
	__asm volatile
 800df12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	607b      	str	r3, [r7, #4]
}
 800df24:	bf00      	nop
 800df26:	e7fe      	b.n	800df26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <vPortExitCritical+0x50>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	3b01      	subs	r3, #1
 800df2e:	4a09      	ldr	r2, [pc, #36]	; (800df54 <vPortExitCritical+0x50>)
 800df30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df32:	4b08      	ldr	r3, [pc, #32]	; (800df54 <vPortExitCritical+0x50>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d105      	bne.n	800df46 <vPortExitCritical+0x42>
 800df3a:	2300      	movs	r3, #0
 800df3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	f383 8811 	msr	BASEPRI, r3
}
 800df44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df46:	bf00      	nop
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	200000a8 	.word	0x200000a8
	...

0800df60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df60:	f3ef 8009 	mrs	r0, PSP
 800df64:	f3bf 8f6f 	isb	sy
 800df68:	4b15      	ldr	r3, [pc, #84]	; (800dfc0 <pxCurrentTCBConst>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	f01e 0f10 	tst.w	lr, #16
 800df70:	bf08      	it	eq
 800df72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7a:	6010      	str	r0, [r2, #0]
 800df7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800df84:	f380 8811 	msr	BASEPRI, r0
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f7fe ff9c 	bl	800cecc <vTaskSwitchContext>
 800df94:	f04f 0000 	mov.w	r0, #0
 800df98:	f380 8811 	msr	BASEPRI, r0
 800df9c:	bc09      	pop	{r0, r3}
 800df9e:	6819      	ldr	r1, [r3, #0]
 800dfa0:	6808      	ldr	r0, [r1, #0]
 800dfa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa6:	f01e 0f10 	tst.w	lr, #16
 800dfaa:	bf08      	it	eq
 800dfac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dfb0:	f380 8809 	msr	PSP, r0
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w

0800dfc0 <pxCurrentTCBConst>:
 800dfc0:	20000b7c 	.word	0x20000b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dfc4:	bf00      	nop
 800dfc6:	bf00      	nop

0800dfc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	607b      	str	r3, [r7, #4]
}
 800dfe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dfe2:	f7fe feb9 	bl	800cd58 <xTaskIncrementTick>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d003      	beq.n	800dff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dfec:	4b06      	ldr	r3, [pc, #24]	; (800e008 <xPortSysTickHandler+0x40>)
 800dfee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dff2:	601a      	str	r2, [r3, #0]
 800dff4:	2300      	movs	r3, #0
 800dff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	f383 8811 	msr	BASEPRI, r3
}
 800dffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	e000ed04 	.word	0xe000ed04

0800e00c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e00c:	b480      	push	{r7}
 800e00e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e010:	4b0b      	ldr	r3, [pc, #44]	; (800e040 <vPortSetupTimerInterrupt+0x34>)
 800e012:	2200      	movs	r2, #0
 800e014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e016:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <vPortSetupTimerInterrupt+0x38>)
 800e018:	2200      	movs	r2, #0
 800e01a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e01c:	4b0a      	ldr	r3, [pc, #40]	; (800e048 <vPortSetupTimerInterrupt+0x3c>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a0a      	ldr	r2, [pc, #40]	; (800e04c <vPortSetupTimerInterrupt+0x40>)
 800e022:	fba2 2303 	umull	r2, r3, r2, r3
 800e026:	099b      	lsrs	r3, r3, #6
 800e028:	4a09      	ldr	r2, [pc, #36]	; (800e050 <vPortSetupTimerInterrupt+0x44>)
 800e02a:	3b01      	subs	r3, #1
 800e02c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e02e:	4b04      	ldr	r3, [pc, #16]	; (800e040 <vPortSetupTimerInterrupt+0x34>)
 800e030:	2207      	movs	r2, #7
 800e032:	601a      	str	r2, [r3, #0]
}
 800e034:	bf00      	nop
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	e000e010 	.word	0xe000e010
 800e044:	e000e018 	.word	0xe000e018
 800e048:	20000010 	.word	0x20000010
 800e04c:	10624dd3 	.word	0x10624dd3
 800e050:	e000e014 	.word	0xe000e014

0800e054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e064 <vPortEnableVFP+0x10>
 800e058:	6801      	ldr	r1, [r0, #0]
 800e05a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e05e:	6001      	str	r1, [r0, #0]
 800e060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e062:	bf00      	nop
 800e064:	e000ed88 	.word	0xe000ed88

0800e068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e068:	b480      	push	{r7}
 800e06a:	b085      	sub	sp, #20
 800e06c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e06e:	f3ef 8305 	mrs	r3, IPSR
 800e072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2b0f      	cmp	r3, #15
 800e078:	d914      	bls.n	800e0a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e07a:	4a17      	ldr	r2, [pc, #92]	; (800e0d8 <vPortValidateInterruptPriority+0x70>)
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	4413      	add	r3, r2
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e084:	4b15      	ldr	r3, [pc, #84]	; (800e0dc <vPortValidateInterruptPriority+0x74>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	7afa      	ldrb	r2, [r7, #11]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d20a      	bcs.n	800e0a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	607b      	str	r3, [r7, #4]
}
 800e0a0:	bf00      	nop
 800e0a2:	e7fe      	b.n	800e0a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0a4:	4b0e      	ldr	r3, [pc, #56]	; (800e0e0 <vPortValidateInterruptPriority+0x78>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0ac:	4b0d      	ldr	r3, [pc, #52]	; (800e0e4 <vPortValidateInterruptPriority+0x7c>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d90a      	bls.n	800e0ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b8:	f383 8811 	msr	BASEPRI, r3
 800e0bc:	f3bf 8f6f 	isb	sy
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	603b      	str	r3, [r7, #0]
}
 800e0c6:	bf00      	nop
 800e0c8:	e7fe      	b.n	800e0c8 <vPortValidateInterruptPriority+0x60>
	}
 800e0ca:	bf00      	nop
 800e0cc:	3714      	adds	r7, #20
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr
 800e0d6:	bf00      	nop
 800e0d8:	e000e3f0 	.word	0xe000e3f0
 800e0dc:	200011b0 	.word	0x200011b0
 800e0e0:	e000ed0c 	.word	0xe000ed0c
 800e0e4:	200011b4 	.word	0x200011b4

0800e0e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b08a      	sub	sp, #40	; 0x28
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e0f4:	f7fe fd74 	bl	800cbe0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e0f8:	4b5b      	ldr	r3, [pc, #364]	; (800e268 <pvPortMalloc+0x180>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d101      	bne.n	800e104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e100:	f000 f920 	bl	800e344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e104:	4b59      	ldr	r3, [pc, #356]	; (800e26c <pvPortMalloc+0x184>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4013      	ands	r3, r2
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f040 8093 	bne.w	800e238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d01d      	beq.n	800e154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e118:	2208      	movs	r2, #8
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4413      	add	r3, r2
 800e11e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f003 0307 	and.w	r3, r3, #7
 800e126:	2b00      	cmp	r3, #0
 800e128:	d014      	beq.n	800e154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f023 0307 	bic.w	r3, r3, #7
 800e130:	3308      	adds	r3, #8
 800e132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00a      	beq.n	800e154 <pvPortMalloc+0x6c>
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	617b      	str	r3, [r7, #20]
}
 800e150:	bf00      	nop
 800e152:	e7fe      	b.n	800e152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d06e      	beq.n	800e238 <pvPortMalloc+0x150>
 800e15a:	4b45      	ldr	r3, [pc, #276]	; (800e270 <pvPortMalloc+0x188>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d869      	bhi.n	800e238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e164:	4b43      	ldr	r3, [pc, #268]	; (800e274 <pvPortMalloc+0x18c>)
 800e166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e168:	4b42      	ldr	r3, [pc, #264]	; (800e274 <pvPortMalloc+0x18c>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e16e:	e004      	b.n	800e17a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	429a      	cmp	r2, r3
 800e182:	d903      	bls.n	800e18c <pvPortMalloc+0xa4>
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1f1      	bne.n	800e170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e18c:	4b36      	ldr	r3, [pc, #216]	; (800e268 <pvPortMalloc+0x180>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e192:	429a      	cmp	r2, r3
 800e194:	d050      	beq.n	800e238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e196:	6a3b      	ldr	r3, [r7, #32]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2208      	movs	r2, #8
 800e19c:	4413      	add	r3, r2
 800e19e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	1ad2      	subs	r2, r2, r3
 800e1b0:	2308      	movs	r3, #8
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d91f      	bls.n	800e1f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4413      	add	r3, r2
 800e1be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	f003 0307 	and.w	r3, r3, #7
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00a      	beq.n	800e1e0 <pvPortMalloc+0xf8>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	613b      	str	r3, [r7, #16]
}
 800e1dc:	bf00      	nop
 800e1de:	e7fe      	b.n	800e1de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	685a      	ldr	r2, [r3, #4]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	1ad2      	subs	r2, r2, r3
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e1f2:	69b8      	ldr	r0, [r7, #24]
 800e1f4:	f000 f908 	bl	800e408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e1f8:	4b1d      	ldr	r3, [pc, #116]	; (800e270 <pvPortMalloc+0x188>)
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	4a1b      	ldr	r2, [pc, #108]	; (800e270 <pvPortMalloc+0x188>)
 800e204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e206:	4b1a      	ldr	r3, [pc, #104]	; (800e270 <pvPortMalloc+0x188>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	4b1b      	ldr	r3, [pc, #108]	; (800e278 <pvPortMalloc+0x190>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d203      	bcs.n	800e21a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e212:	4b17      	ldr	r3, [pc, #92]	; (800e270 <pvPortMalloc+0x188>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4a18      	ldr	r2, [pc, #96]	; (800e278 <pvPortMalloc+0x190>)
 800e218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	685a      	ldr	r2, [r3, #4]
 800e21e:	4b13      	ldr	r3, [pc, #76]	; (800e26c <pvPortMalloc+0x184>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	431a      	orrs	r2, r3
 800e224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e22e:	4b13      	ldr	r3, [pc, #76]	; (800e27c <pvPortMalloc+0x194>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	4a11      	ldr	r2, [pc, #68]	; (800e27c <pvPortMalloc+0x194>)
 800e236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e238:	f7fe fce0 	bl	800cbfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	f003 0307 	and.w	r3, r3, #7
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00a      	beq.n	800e25c <pvPortMalloc+0x174>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24a:	f383 8811 	msr	BASEPRI, r3
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	60fb      	str	r3, [r7, #12]
}
 800e258:	bf00      	nop
 800e25a:	e7fe      	b.n	800e25a <pvPortMalloc+0x172>
	return pvReturn;
 800e25c:	69fb      	ldr	r3, [r7, #28]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3728      	adds	r7, #40	; 0x28
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	2001a1c0 	.word	0x2001a1c0
 800e26c:	2001a1d4 	.word	0x2001a1d4
 800e270:	2001a1c4 	.word	0x2001a1c4
 800e274:	2001a1b8 	.word	0x2001a1b8
 800e278:	2001a1c8 	.word	0x2001a1c8
 800e27c:	2001a1cc 	.word	0x2001a1cc

0800e280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d04d      	beq.n	800e32e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e292:	2308      	movs	r3, #8
 800e294:	425b      	negs	r3, r3
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	4413      	add	r3, r2
 800e29a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	685a      	ldr	r2, [r3, #4]
 800e2a4:	4b24      	ldr	r3, [pc, #144]	; (800e338 <vPortFree+0xb8>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10a      	bne.n	800e2c4 <vPortFree+0x44>
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	60fb      	str	r3, [r7, #12]
}
 800e2c0:	bf00      	nop
 800e2c2:	e7fe      	b.n	800e2c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d00a      	beq.n	800e2e2 <vPortFree+0x62>
	__asm volatile
 800e2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d0:	f383 8811 	msr	BASEPRI, r3
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	60bb      	str	r3, [r7, #8]
}
 800e2de:	bf00      	nop
 800e2e0:	e7fe      	b.n	800e2e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	685a      	ldr	r2, [r3, #4]
 800e2e6:	4b14      	ldr	r3, [pc, #80]	; (800e338 <vPortFree+0xb8>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d01e      	beq.n	800e32e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d11a      	bne.n	800e32e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	4b0e      	ldr	r3, [pc, #56]	; (800e338 <vPortFree+0xb8>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	43db      	mvns	r3, r3
 800e302:	401a      	ands	r2, r3
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e308:	f7fe fc6a 	bl	800cbe0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	685a      	ldr	r2, [r3, #4]
 800e310:	4b0a      	ldr	r3, [pc, #40]	; (800e33c <vPortFree+0xbc>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4413      	add	r3, r2
 800e316:	4a09      	ldr	r2, [pc, #36]	; (800e33c <vPortFree+0xbc>)
 800e318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e31a:	6938      	ldr	r0, [r7, #16]
 800e31c:	f000 f874 	bl	800e408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e320:	4b07      	ldr	r3, [pc, #28]	; (800e340 <vPortFree+0xc0>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3301      	adds	r3, #1
 800e326:	4a06      	ldr	r2, [pc, #24]	; (800e340 <vPortFree+0xc0>)
 800e328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e32a:	f7fe fc67 	bl	800cbfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e32e:	bf00      	nop
 800e330:	3718      	adds	r7, #24
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	2001a1d4 	.word	0x2001a1d4
 800e33c:	2001a1c4 	.word	0x2001a1c4
 800e340:	2001a1d0 	.word	0x2001a1d0

0800e344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e344:	b480      	push	{r7}
 800e346:	b085      	sub	sp, #20
 800e348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e34a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800e34e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e350:	4b27      	ldr	r3, [pc, #156]	; (800e3f0 <prvHeapInit+0xac>)
 800e352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f003 0307 	and.w	r3, r3, #7
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d00c      	beq.n	800e378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3307      	adds	r3, #7
 800e362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f023 0307 	bic.w	r3, r3, #7
 800e36a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	4a1f      	ldr	r2, [pc, #124]	; (800e3f0 <prvHeapInit+0xac>)
 800e374:	4413      	add	r3, r2
 800e376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e37c:	4a1d      	ldr	r2, [pc, #116]	; (800e3f4 <prvHeapInit+0xb0>)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e382:	4b1c      	ldr	r3, [pc, #112]	; (800e3f4 <prvHeapInit+0xb0>)
 800e384:	2200      	movs	r2, #0
 800e386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	4413      	add	r3, r2
 800e38e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e390:	2208      	movs	r2, #8
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	1a9b      	subs	r3, r3, r2
 800e396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f023 0307 	bic.w	r3, r3, #7
 800e39e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	4a15      	ldr	r2, [pc, #84]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3a6:	4b14      	ldr	r3, [pc, #80]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3ae:	4b12      	ldr	r3, [pc, #72]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	1ad2      	subs	r2, r2, r3
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e3c4:	4b0c      	ldr	r3, [pc, #48]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	4a0a      	ldr	r2, [pc, #40]	; (800e3fc <prvHeapInit+0xb8>)
 800e3d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	4a09      	ldr	r2, [pc, #36]	; (800e400 <prvHeapInit+0xbc>)
 800e3da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e3dc:	4b09      	ldr	r3, [pc, #36]	; (800e404 <prvHeapInit+0xc0>)
 800e3de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e3e2:	601a      	str	r2, [r3, #0]
}
 800e3e4:	bf00      	nop
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	200011b8 	.word	0x200011b8
 800e3f4:	2001a1b8 	.word	0x2001a1b8
 800e3f8:	2001a1c0 	.word	0x2001a1c0
 800e3fc:	2001a1c8 	.word	0x2001a1c8
 800e400:	2001a1c4 	.word	0x2001a1c4
 800e404:	2001a1d4 	.word	0x2001a1d4

0800e408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e410:	4b28      	ldr	r3, [pc, #160]	; (800e4b4 <prvInsertBlockIntoFreeList+0xac>)
 800e412:	60fb      	str	r3, [r7, #12]
 800e414:	e002      	b.n	800e41c <prvInsertBlockIntoFreeList+0x14>
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	429a      	cmp	r2, r3
 800e424:	d8f7      	bhi.n	800e416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	68ba      	ldr	r2, [r7, #8]
 800e430:	4413      	add	r3, r2
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	429a      	cmp	r2, r3
 800e436:	d108      	bne.n	800e44a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	685a      	ldr	r2, [r3, #4]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	441a      	add	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	68ba      	ldr	r2, [r7, #8]
 800e454:	441a      	add	r2, r3
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d118      	bne.n	800e490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	4b15      	ldr	r3, [pc, #84]	; (800e4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	429a      	cmp	r2, r3
 800e468:	d00d      	beq.n	800e486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	685a      	ldr	r2, [r3, #4]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	441a      	add	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	e008      	b.n	800e498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e486:	4b0c      	ldr	r3, [pc, #48]	; (800e4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	601a      	str	r2, [r3, #0]
 800e48e:	e003      	b.n	800e498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d002      	beq.n	800e4a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4a6:	bf00      	nop
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	2001a1b8 	.word	0x2001a1b8
 800e4b8:	2001a1c0 	.word	0x2001a1c0

0800e4bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	4912      	ldr	r1, [pc, #72]	; (800e50c <MX_USB_DEVICE_Init+0x50>)
 800e4c4:	4812      	ldr	r0, [pc, #72]	; (800e510 <MX_USB_DEVICE_Init+0x54>)
 800e4c6:	f7fb fd3d 	bl	8009f44 <USBD_Init>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e4d0:	f7f2 fb8a 	bl	8000be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e4d4:	490f      	ldr	r1, [pc, #60]	; (800e514 <MX_USB_DEVICE_Init+0x58>)
 800e4d6:	480e      	ldr	r0, [pc, #56]	; (800e510 <MX_USB_DEVICE_Init+0x54>)
 800e4d8:	f7fb fd64 	bl	8009fa4 <USBD_RegisterClass>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e4e2:	f7f2 fb81 	bl	8000be8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e4e6:	490c      	ldr	r1, [pc, #48]	; (800e518 <MX_USB_DEVICE_Init+0x5c>)
 800e4e8:	4809      	ldr	r0, [pc, #36]	; (800e510 <MX_USB_DEVICE_Init+0x54>)
 800e4ea:	f7fb fc9b 	bl	8009e24 <USBD_CDC_RegisterInterface>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d001      	beq.n	800e4f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e4f4:	f7f2 fb78 	bl	8000be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e4f8:	4805      	ldr	r0, [pc, #20]	; (800e510 <MX_USB_DEVICE_Init+0x54>)
 800e4fa:	f7fb fd89 	bl	800a010 <USBD_Start>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e504:	f7f2 fb70 	bl	8000be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e508:	bf00      	nop
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	200000c0 	.word	0x200000c0
 800e510:	2001a1d8 	.word	0x2001a1d8
 800e514:	20000028 	.word	0x20000028
 800e518:	200000ac 	.word	0x200000ac

0800e51c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e520:	2200      	movs	r2, #0
 800e522:	4905      	ldr	r1, [pc, #20]	; (800e538 <CDC_Init_FS+0x1c>)
 800e524:	4805      	ldr	r0, [pc, #20]	; (800e53c <CDC_Init_FS+0x20>)
 800e526:	f7fb fc97 	bl	8009e58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e52a:	4905      	ldr	r1, [pc, #20]	; (800e540 <CDC_Init_FS+0x24>)
 800e52c:	4803      	ldr	r0, [pc, #12]	; (800e53c <CDC_Init_FS+0x20>)
 800e52e:	f7fb fcb5 	bl	8009e9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e532:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e534:	4618      	mov	r0, r3
 800e536:	bd80      	pop	{r7, pc}
 800e538:	2001acb4 	.word	0x2001acb4
 800e53c:	2001a1d8 	.word	0x2001a1d8
 800e540:	2001a4b4 	.word	0x2001a4b4

0800e544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e544:	b480      	push	{r7}
 800e546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	4603      	mov	r3, r0
 800e55c:	6039      	str	r1, [r7, #0]
 800e55e:	71fb      	strb	r3, [r7, #7]
 800e560:	4613      	mov	r3, r2
 800e562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e564:	79fb      	ldrb	r3, [r7, #7]
 800e566:	2b23      	cmp	r3, #35	; 0x23
 800e568:	d84a      	bhi.n	800e600 <CDC_Control_FS+0xac>
 800e56a:	a201      	add	r2, pc, #4	; (adr r2, 800e570 <CDC_Control_FS+0x1c>)
 800e56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e570:	0800e601 	.word	0x0800e601
 800e574:	0800e601 	.word	0x0800e601
 800e578:	0800e601 	.word	0x0800e601
 800e57c:	0800e601 	.word	0x0800e601
 800e580:	0800e601 	.word	0x0800e601
 800e584:	0800e601 	.word	0x0800e601
 800e588:	0800e601 	.word	0x0800e601
 800e58c:	0800e601 	.word	0x0800e601
 800e590:	0800e601 	.word	0x0800e601
 800e594:	0800e601 	.word	0x0800e601
 800e598:	0800e601 	.word	0x0800e601
 800e59c:	0800e601 	.word	0x0800e601
 800e5a0:	0800e601 	.word	0x0800e601
 800e5a4:	0800e601 	.word	0x0800e601
 800e5a8:	0800e601 	.word	0x0800e601
 800e5ac:	0800e601 	.word	0x0800e601
 800e5b0:	0800e601 	.word	0x0800e601
 800e5b4:	0800e601 	.word	0x0800e601
 800e5b8:	0800e601 	.word	0x0800e601
 800e5bc:	0800e601 	.word	0x0800e601
 800e5c0:	0800e601 	.word	0x0800e601
 800e5c4:	0800e601 	.word	0x0800e601
 800e5c8:	0800e601 	.word	0x0800e601
 800e5cc:	0800e601 	.word	0x0800e601
 800e5d0:	0800e601 	.word	0x0800e601
 800e5d4:	0800e601 	.word	0x0800e601
 800e5d8:	0800e601 	.word	0x0800e601
 800e5dc:	0800e601 	.word	0x0800e601
 800e5e0:	0800e601 	.word	0x0800e601
 800e5e4:	0800e601 	.word	0x0800e601
 800e5e8:	0800e601 	.word	0x0800e601
 800e5ec:	0800e601 	.word	0x0800e601
 800e5f0:	0800e601 	.word	0x0800e601
 800e5f4:	0800e601 	.word	0x0800e601
 800e5f8:	0800e601 	.word	0x0800e601
 800e5fc:	0800e601 	.word	0x0800e601
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e600:	bf00      	nop
  }

  return (USBD_OK);
 800e602:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e604:	4618      	mov	r0, r3
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e61a:	6879      	ldr	r1, [r7, #4]
 800e61c:	4805      	ldr	r0, [pc, #20]	; (800e634 <CDC_Receive_FS+0x24>)
 800e61e:	f7fb fc3d 	bl	8009e9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e622:	4804      	ldr	r0, [pc, #16]	; (800e634 <CDC_Receive_FS+0x24>)
 800e624:	f7fb fc58 	bl	8009ed8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e628:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	2001a1d8 	.word	0x2001a1d8

0800e638 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e638:	b480      	push	{r7}
 800e63a:	b087      	sub	sp, #28
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	4613      	mov	r3, r2
 800e644:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e64a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	371c      	adds	r7, #28
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr
	...

0800e65c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	4603      	mov	r3, r0
 800e664:	6039      	str	r1, [r7, #0]
 800e666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2212      	movs	r2, #18
 800e66c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e66e:	4b03      	ldr	r3, [pc, #12]	; (800e67c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e670:	4618      	mov	r0, r3
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	200000dc 	.word	0x200000dc

0800e680 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	4603      	mov	r3, r0
 800e688:	6039      	str	r1, [r7, #0]
 800e68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2204      	movs	r2, #4
 800e690:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e692:	4b03      	ldr	r3, [pc, #12]	; (800e6a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e694:	4618      	mov	r0, r3
 800e696:	370c      	adds	r7, #12
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr
 800e6a0:	200000f0 	.word	0x200000f0

0800e6a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	6039      	str	r1, [r7, #0]
 800e6ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6b0:	79fb      	ldrb	r3, [r7, #7]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d105      	bne.n	800e6c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6b6:	683a      	ldr	r2, [r7, #0]
 800e6b8:	4907      	ldr	r1, [pc, #28]	; (800e6d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e6ba:	4808      	ldr	r0, [pc, #32]	; (800e6dc <USBD_FS_ProductStrDescriptor+0x38>)
 800e6bc:	f7fc fe54 	bl	800b368 <USBD_GetString>
 800e6c0:	e004      	b.n	800e6cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6c2:	683a      	ldr	r2, [r7, #0]
 800e6c4:	4904      	ldr	r1, [pc, #16]	; (800e6d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e6c6:	4805      	ldr	r0, [pc, #20]	; (800e6dc <USBD_FS_ProductStrDescriptor+0x38>)
 800e6c8:	f7fc fe4e 	bl	800b368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6cc:	4b02      	ldr	r3, [pc, #8]	; (800e6d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	2001b4b4 	.word	0x2001b4b4
 800e6dc:	0800f4fc 	.word	0x0800f4fc

0800e6e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	6039      	str	r1, [r7, #0]
 800e6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e6ec:	683a      	ldr	r2, [r7, #0]
 800e6ee:	4904      	ldr	r1, [pc, #16]	; (800e700 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e6f0:	4804      	ldr	r0, [pc, #16]	; (800e704 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e6f2:	f7fc fe39 	bl	800b368 <USBD_GetString>
  return USBD_StrDesc;
 800e6f6:	4b02      	ldr	r3, [pc, #8]	; (800e700 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	2001b4b4 	.word	0x2001b4b4
 800e704:	0800f514 	.word	0x0800f514

0800e708 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	4603      	mov	r3, r0
 800e710:	6039      	str	r1, [r7, #0]
 800e712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	221a      	movs	r2, #26
 800e718:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e71a:	f000 f843 	bl	800e7a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e71e:	4b02      	ldr	r3, [pc, #8]	; (800e728 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e720:	4618      	mov	r0, r3
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	200000f4 	.word	0x200000f4

0800e72c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	4603      	mov	r3, r0
 800e734:	6039      	str	r1, [r7, #0]
 800e736:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e738:	79fb      	ldrb	r3, [r7, #7]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d105      	bne.n	800e74a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e73e:	683a      	ldr	r2, [r7, #0]
 800e740:	4907      	ldr	r1, [pc, #28]	; (800e760 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e742:	4808      	ldr	r0, [pc, #32]	; (800e764 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e744:	f7fc fe10 	bl	800b368 <USBD_GetString>
 800e748:	e004      	b.n	800e754 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e74a:	683a      	ldr	r2, [r7, #0]
 800e74c:	4904      	ldr	r1, [pc, #16]	; (800e760 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e74e:	4805      	ldr	r0, [pc, #20]	; (800e764 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e750:	f7fc fe0a 	bl	800b368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e754:	4b02      	ldr	r3, [pc, #8]	; (800e760 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e756:	4618      	mov	r0, r3
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	2001b4b4 	.word	0x2001b4b4
 800e764:	0800f528 	.word	0x0800f528

0800e768 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	4603      	mov	r3, r0
 800e770:	6039      	str	r1, [r7, #0]
 800e772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e774:	79fb      	ldrb	r3, [r7, #7]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d105      	bne.n	800e786 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	4907      	ldr	r1, [pc, #28]	; (800e79c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e77e:	4808      	ldr	r0, [pc, #32]	; (800e7a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e780:	f7fc fdf2 	bl	800b368 <USBD_GetString>
 800e784:	e004      	b.n	800e790 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e786:	683a      	ldr	r2, [r7, #0]
 800e788:	4904      	ldr	r1, [pc, #16]	; (800e79c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e78a:	4805      	ldr	r0, [pc, #20]	; (800e7a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e78c:	f7fc fdec 	bl	800b368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e790:	4b02      	ldr	r3, [pc, #8]	; (800e79c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e792:	4618      	mov	r0, r3
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	2001b4b4 	.word	0x2001b4b4
 800e7a0:	0800f534 	.word	0x0800f534

0800e7a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e7aa:	4b0f      	ldr	r3, [pc, #60]	; (800e7e8 <Get_SerialNum+0x44>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e7b0:	4b0e      	ldr	r3, [pc, #56]	; (800e7ec <Get_SerialNum+0x48>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e7b6:	4b0e      	ldr	r3, [pc, #56]	; (800e7f0 <Get_SerialNum+0x4c>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d009      	beq.n	800e7de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e7ca:	2208      	movs	r2, #8
 800e7cc:	4909      	ldr	r1, [pc, #36]	; (800e7f4 <Get_SerialNum+0x50>)
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f000 f814 	bl	800e7fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e7d4:	2204      	movs	r2, #4
 800e7d6:	4908      	ldr	r1, [pc, #32]	; (800e7f8 <Get_SerialNum+0x54>)
 800e7d8:	68b8      	ldr	r0, [r7, #8]
 800e7da:	f000 f80f 	bl	800e7fc <IntToUnicode>
  }
}
 800e7de:	bf00      	nop
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	1fff7a10 	.word	0x1fff7a10
 800e7ec:	1fff7a14 	.word	0x1fff7a14
 800e7f0:	1fff7a18 	.word	0x1fff7a18
 800e7f4:	200000f6 	.word	0x200000f6
 800e7f8:	20000106 	.word	0x20000106

0800e7fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b087      	sub	sp, #28
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	4613      	mov	r3, r2
 800e808:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e80a:	2300      	movs	r3, #0
 800e80c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e80e:	2300      	movs	r3, #0
 800e810:	75fb      	strb	r3, [r7, #23]
 800e812:	e027      	b.n	800e864 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	0f1b      	lsrs	r3, r3, #28
 800e818:	2b09      	cmp	r3, #9
 800e81a:	d80b      	bhi.n	800e834 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	0f1b      	lsrs	r3, r3, #28
 800e820:	b2da      	uxtb	r2, r3
 800e822:	7dfb      	ldrb	r3, [r7, #23]
 800e824:	005b      	lsls	r3, r3, #1
 800e826:	4619      	mov	r1, r3
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	440b      	add	r3, r1
 800e82c:	3230      	adds	r2, #48	; 0x30
 800e82e:	b2d2      	uxtb	r2, r2
 800e830:	701a      	strb	r2, [r3, #0]
 800e832:	e00a      	b.n	800e84a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	0f1b      	lsrs	r3, r3, #28
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
 800e83c:	005b      	lsls	r3, r3, #1
 800e83e:	4619      	mov	r1, r3
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	440b      	add	r3, r1
 800e844:	3237      	adds	r2, #55	; 0x37
 800e846:	b2d2      	uxtb	r2, r2
 800e848:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	011b      	lsls	r3, r3, #4
 800e84e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e850:	7dfb      	ldrb	r3, [r7, #23]
 800e852:	005b      	lsls	r3, r3, #1
 800e854:	3301      	adds	r3, #1
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	4413      	add	r3, r2
 800e85a:	2200      	movs	r2, #0
 800e85c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e85e:	7dfb      	ldrb	r3, [r7, #23]
 800e860:	3301      	adds	r3, #1
 800e862:	75fb      	strb	r3, [r7, #23]
 800e864:	7dfa      	ldrb	r2, [r7, #23]
 800e866:	79fb      	ldrb	r3, [r7, #7]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d3d3      	bcc.n	800e814 <IntToUnicode+0x18>
  }
}
 800e86c:	bf00      	nop
 800e86e:	bf00      	nop
 800e870:	371c      	adds	r7, #28
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr
	...

0800e87c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08a      	sub	sp, #40	; 0x28
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e884:	f107 0314 	add.w	r3, r7, #20
 800e888:	2200      	movs	r2, #0
 800e88a:	601a      	str	r2, [r3, #0]
 800e88c:	605a      	str	r2, [r3, #4]
 800e88e:	609a      	str	r2, [r3, #8]
 800e890:	60da      	str	r2, [r3, #12]
 800e892:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e89c:	d13a      	bne.n	800e914 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e89e:	2300      	movs	r3, #0
 800e8a0:	613b      	str	r3, [r7, #16]
 800e8a2:	4b1e      	ldr	r3, [pc, #120]	; (800e91c <HAL_PCD_MspInit+0xa0>)
 800e8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a6:	4a1d      	ldr	r2, [pc, #116]	; (800e91c <HAL_PCD_MspInit+0xa0>)
 800e8a8:	f043 0301 	orr.w	r3, r3, #1
 800e8ac:	6313      	str	r3, [r2, #48]	; 0x30
 800e8ae:	4b1b      	ldr	r3, [pc, #108]	; (800e91c <HAL_PCD_MspInit+0xa0>)
 800e8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b2:	f003 0301 	and.w	r3, r3, #1
 800e8b6:	613b      	str	r3, [r7, #16]
 800e8b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e8ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e8be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8c0:	2302      	movs	r3, #2
 800e8c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e8cc:	230a      	movs	r3, #10
 800e8ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8d0:	f107 0314 	add.w	r3, r7, #20
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	4812      	ldr	r0, [pc, #72]	; (800e920 <HAL_PCD_MspInit+0xa4>)
 800e8d8:	f7f3 fa12 	bl	8001d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e8dc:	4b0f      	ldr	r3, [pc, #60]	; (800e91c <HAL_PCD_MspInit+0xa0>)
 800e8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e0:	4a0e      	ldr	r2, [pc, #56]	; (800e91c <HAL_PCD_MspInit+0xa0>)
 800e8e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8e6:	6353      	str	r3, [r2, #52]	; 0x34
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	60fb      	str	r3, [r7, #12]
 800e8ec:	4b0b      	ldr	r3, [pc, #44]	; (800e91c <HAL_PCD_MspInit+0xa0>)
 800e8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8f0:	4a0a      	ldr	r2, [pc, #40]	; (800e91c <HAL_PCD_MspInit+0xa0>)
 800e8f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e8f6:	6453      	str	r3, [r2, #68]	; 0x44
 800e8f8:	4b08      	ldr	r3, [pc, #32]	; (800e91c <HAL_PCD_MspInit+0xa0>)
 800e8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e900:	60fb      	str	r3, [r7, #12]
 800e902:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e904:	2200      	movs	r2, #0
 800e906:	2105      	movs	r1, #5
 800e908:	2043      	movs	r0, #67	; 0x43
 800e90a:	f7f3 f9b5 	bl	8001c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e90e:	2043      	movs	r0, #67	; 0x43
 800e910:	f7f3 f9de 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e914:	bf00      	nop
 800e916:	3728      	adds	r7, #40	; 0x28
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	40023800 	.word	0x40023800
 800e920:	40020000 	.word	0x40020000

0800e924 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e938:	4619      	mov	r1, r3
 800e93a:	4610      	mov	r0, r2
 800e93c:	f7fb fbb5 	bl	800a0aa <USBD_LL_SetupStage>
}
 800e940:	bf00      	nop
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	460b      	mov	r3, r1
 800e952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e95a:	78fa      	ldrb	r2, [r7, #3]
 800e95c:	6879      	ldr	r1, [r7, #4]
 800e95e:	4613      	mov	r3, r2
 800e960:	00db      	lsls	r3, r3, #3
 800e962:	4413      	add	r3, r2
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	440b      	add	r3, r1
 800e968:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	78fb      	ldrb	r3, [r7, #3]
 800e970:	4619      	mov	r1, r3
 800e972:	f7fb fbef 	bl	800a154 <USBD_LL_DataOutStage>
}
 800e976:	bf00      	nop
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b082      	sub	sp, #8
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
 800e986:	460b      	mov	r3, r1
 800e988:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e990:	78fa      	ldrb	r2, [r7, #3]
 800e992:	6879      	ldr	r1, [r7, #4]
 800e994:	4613      	mov	r3, r2
 800e996:	00db      	lsls	r3, r3, #3
 800e998:	4413      	add	r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	440b      	add	r3, r1
 800e99e:	334c      	adds	r3, #76	; 0x4c
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	78fb      	ldrb	r3, [r7, #3]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	f7fb fc88 	bl	800a2ba <USBD_LL_DataInStage>
}
 800e9aa:	bf00      	nop
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b082      	sub	sp, #8
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fb fdbc 	bl	800a53e <USBD_LL_SOF>
}
 800e9c6:	bf00      	nop
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b084      	sub	sp, #16
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	2b02      	cmp	r3, #2
 800e9e0:	d001      	beq.n	800e9e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e9e2:	f7f2 f901 	bl	8000be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9ec:	7bfa      	ldrb	r2, [r7, #15]
 800e9ee:	4611      	mov	r1, r2
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fb fd66 	bl	800a4c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fb fd0e 	bl	800a41e <USBD_LL_Reset>
}
 800ea02:	bf00      	nop
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
	...

0800ea0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fb fd61 	bl	800a4e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	6812      	ldr	r2, [r2, #0]
 800ea2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea32:	f043 0301 	orr.w	r3, r3, #1
 800ea36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6a1b      	ldr	r3, [r3, #32]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d005      	beq.n	800ea4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea40:	4b04      	ldr	r3, [pc, #16]	; (800ea54 <HAL_PCD_SuspendCallback+0x48>)
 800ea42:	691b      	ldr	r3, [r3, #16]
 800ea44:	4a03      	ldr	r2, [pc, #12]	; (800ea54 <HAL_PCD_SuspendCallback+0x48>)
 800ea46:	f043 0306 	orr.w	r3, r3, #6
 800ea4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ea4c:	bf00      	nop
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	e000ed00 	.word	0xe000ed00

0800ea58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fb fd51 	bl	800a50e <USBD_LL_Resume>
}
 800ea6c:	bf00      	nop
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea86:	78fa      	ldrb	r2, [r7, #3]
 800ea88:	4611      	mov	r1, r2
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fb fda9 	bl	800a5e2 <USBD_LL_IsoOUTIncomplete>
}
 800ea90:	bf00      	nop
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eaaa:	78fa      	ldrb	r2, [r7, #3]
 800eaac:	4611      	mov	r1, r2
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fb fd65 	bl	800a57e <USBD_LL_IsoINIncomplete>
}
 800eab4:	bf00      	nop
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fb fdbb 	bl	800a646 <USBD_LL_DevConnected>
}
 800ead0:	bf00      	nop
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fb fdb8 	bl	800a65c <USBD_LL_DevDisconnected>
}
 800eaec:	bf00      	nop
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d13c      	bne.n	800eb7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eb04:	4a20      	ldr	r2, [pc, #128]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	4a1e      	ldr	r2, [pc, #120]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb14:	4b1c      	ldr	r3, [pc, #112]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eb1c:	4b1a      	ldr	r3, [pc, #104]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb1e:	2204      	movs	r2, #4
 800eb20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb22:	4b19      	ldr	r3, [pc, #100]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb24:	2202      	movs	r2, #2
 800eb26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb28:	4b17      	ldr	r3, [pc, #92]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb2e:	4b16      	ldr	r3, [pc, #88]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb30:	2202      	movs	r2, #2
 800eb32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb34:	4b14      	ldr	r3, [pc, #80]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eb3a:	4b13      	ldr	r3, [pc, #76]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eb40:	4b11      	ldr	r3, [pc, #68]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eb46:	4b10      	ldr	r3, [pc, #64]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eb4c:	4b0e      	ldr	r3, [pc, #56]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb4e:	2200      	movs	r2, #0
 800eb50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eb52:	480d      	ldr	r0, [pc, #52]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb54:	f7f4 f9fe 	bl	8002f54 <HAL_PCD_Init>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800eb5e:	f7f2 f843 	bl	8000be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eb62:	2180      	movs	r1, #128	; 0x80
 800eb64:	4808      	ldr	r0, [pc, #32]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb66:	f7f5 fc60 	bl	800442a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eb6a:	2240      	movs	r2, #64	; 0x40
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	4806      	ldr	r0, [pc, #24]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb70:	f7f5 fc14 	bl	800439c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800eb74:	2280      	movs	r2, #128	; 0x80
 800eb76:	2101      	movs	r1, #1
 800eb78:	4803      	ldr	r0, [pc, #12]	; (800eb88 <USBD_LL_Init+0x94>)
 800eb7a:	f7f5 fc0f 	bl	800439c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	2001b6b4 	.word	0x2001b6b4

0800eb8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb94:	2300      	movs	r3, #0
 800eb96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7f4 fafe 	bl	80031a4 <HAL_PCD_Start>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebac:	7bfb      	ldrb	r3, [r7, #15]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 f942 	bl	800ee38 <USBD_Get_USB_Status>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	4608      	mov	r0, r1
 800ebcc:	4611      	mov	r1, r2
 800ebce:	461a      	mov	r2, r3
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	70fb      	strb	r3, [r7, #3]
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	70bb      	strb	r3, [r7, #2]
 800ebd8:	4613      	mov	r3, r2
 800ebda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebea:	78bb      	ldrb	r3, [r7, #2]
 800ebec:	883a      	ldrh	r2, [r7, #0]
 800ebee:	78f9      	ldrb	r1, [r7, #3]
 800ebf0:	f7f4 ffcf 	bl	8003b92 <HAL_PCD_EP_Open>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebf8:	7bfb      	ldrb	r3, [r7, #15]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f000 f91c 	bl	800ee38 <USBD_Get_USB_Status>
 800ec00:	4603      	mov	r3, r0
 800ec02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b084      	sub	sp, #16
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	460b      	mov	r3, r1
 800ec18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec28:	78fa      	ldrb	r2, [r7, #3]
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7f5 f818 	bl	8003c62 <HAL_PCD_EP_Close>
 800ec32:	4603      	mov	r3, r0
 800ec34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f000 f8fd 	bl	800ee38 <USBD_Get_USB_Status>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3710      	adds	r7, #16
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	460b      	mov	r3, r1
 800ec56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec66:	78fa      	ldrb	r2, [r7, #3]
 800ec68:	4611      	mov	r1, r2
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7f5 f8f0 	bl	8003e50 <HAL_PCD_EP_SetStall>
 800ec70:	4603      	mov	r3, r0
 800ec72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec74:	7bfb      	ldrb	r3, [r7, #15]
 800ec76:	4618      	mov	r0, r3
 800ec78:	f000 f8de 	bl	800ee38 <USBD_Get_USB_Status>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b084      	sub	sp, #16
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	460b      	mov	r3, r1
 800ec94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec96:	2300      	movs	r3, #0
 800ec98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eca4:	78fa      	ldrb	r2, [r7, #3]
 800eca6:	4611      	mov	r1, r2
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7f5 f935 	bl	8003f18 <HAL_PCD_EP_ClrStall>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecb2:	7bfb      	ldrb	r3, [r7, #15]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f000 f8bf 	bl	800ee38 <USBD_Get_USB_Status>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ecdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	da0b      	bge.n	800ecfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ece4:	78fb      	ldrb	r3, [r7, #3]
 800ece6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecea:	68f9      	ldr	r1, [r7, #12]
 800ecec:	4613      	mov	r3, r2
 800ecee:	00db      	lsls	r3, r3, #3
 800ecf0:	4413      	add	r3, r2
 800ecf2:	009b      	lsls	r3, r3, #2
 800ecf4:	440b      	add	r3, r1
 800ecf6:	333e      	adds	r3, #62	; 0x3e
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	e00b      	b.n	800ed14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ecfc:	78fb      	ldrb	r3, [r7, #3]
 800ecfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed02:	68f9      	ldr	r1, [r7, #12]
 800ed04:	4613      	mov	r3, r2
 800ed06:	00db      	lsls	r3, r3, #3
 800ed08:	4413      	add	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	440b      	add	r3, r1
 800ed0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ed12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed30:	2300      	movs	r3, #0
 800ed32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed3a:	78fa      	ldrb	r2, [r7, #3]
 800ed3c:	4611      	mov	r1, r2
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7f4 ff02 	bl	8003b48 <HAL_PCD_SetAddress>
 800ed44:	4603      	mov	r3, r0
 800ed46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed48:	7bfb      	ldrb	r3, [r7, #15]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f000 f874 	bl	800ee38 <USBD_Get_USB_Status>
 800ed50:	4603      	mov	r3, r0
 800ed52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b086      	sub	sp, #24
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	60f8      	str	r0, [r7, #12]
 800ed66:	607a      	str	r2, [r7, #4]
 800ed68:	603b      	str	r3, [r7, #0]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed72:	2300      	movs	r3, #0
 800ed74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ed7c:	7af9      	ldrb	r1, [r7, #11]
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	f7f5 f81b 	bl	8003dbc <HAL_PCD_EP_Transmit>
 800ed86:	4603      	mov	r3, r0
 800ed88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed8a:	7dfb      	ldrb	r3, [r7, #23]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f000 f853 	bl	800ee38 <USBD_Get_USB_Status>
 800ed92:	4603      	mov	r3, r0
 800ed94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed96:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3718      	adds	r7, #24
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b086      	sub	sp, #24
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	607a      	str	r2, [r7, #4]
 800edaa:	603b      	str	r3, [r7, #0]
 800edac:	460b      	mov	r3, r1
 800edae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edb0:	2300      	movs	r3, #0
 800edb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edb4:	2300      	movs	r3, #0
 800edb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edbe:	7af9      	ldrb	r1, [r7, #11]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	f7f4 ff97 	bl	8003cf6 <HAL_PCD_EP_Receive>
 800edc8:	4603      	mov	r3, r0
 800edca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edcc:	7dfb      	ldrb	r3, [r7, #23]
 800edce:	4618      	mov	r0, r3
 800edd0:	f000 f832 	bl	800ee38 <USBD_Get_USB_Status>
 800edd4:	4603      	mov	r3, r0
 800edd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800edd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3718      	adds	r7, #24
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b082      	sub	sp, #8
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
 800edea:	460b      	mov	r3, r1
 800edec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800edf4:	78fa      	ldrb	r2, [r7, #3]
 800edf6:	4611      	mov	r1, r2
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7f4 ffc7 	bl	8003d8c <HAL_PCD_EP_GetRxCount>
 800edfe:	4603      	mov	r3, r0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee10:	4b03      	ldr	r3, [pc, #12]	; (800ee20 <USBD_static_malloc+0x18>)
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	370c      	adds	r7, #12
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	2001bbc0 	.word	0x2001bbc0

0800ee24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]

}
 800ee2c:	bf00      	nop
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b085      	sub	sp, #20
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	4603      	mov	r3, r0
 800ee40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee42:	2300      	movs	r3, #0
 800ee44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee46:	79fb      	ldrb	r3, [r7, #7]
 800ee48:	2b03      	cmp	r3, #3
 800ee4a:	d817      	bhi.n	800ee7c <USBD_Get_USB_Status+0x44>
 800ee4c:	a201      	add	r2, pc, #4	; (adr r2, 800ee54 <USBD_Get_USB_Status+0x1c>)
 800ee4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee52:	bf00      	nop
 800ee54:	0800ee65 	.word	0x0800ee65
 800ee58:	0800ee6b 	.word	0x0800ee6b
 800ee5c:	0800ee71 	.word	0x0800ee71
 800ee60:	0800ee77 	.word	0x0800ee77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	73fb      	strb	r3, [r7, #15]
    break;
 800ee68:	e00b      	b.n	800ee82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee6a:	2303      	movs	r3, #3
 800ee6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ee6e:	e008      	b.n	800ee82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee70:	2301      	movs	r3, #1
 800ee72:	73fb      	strb	r3, [r7, #15]
    break;
 800ee74:	e005      	b.n	800ee82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee76:	2303      	movs	r3, #3
 800ee78:	73fb      	strb	r3, [r7, #15]
    break;
 800ee7a:	e002      	b.n	800ee82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ee7c:	2303      	movs	r3, #3
 800ee7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee80:	bf00      	nop
  }
  return usb_status;
 800ee82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3714      	adds	r7, #20
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <__errno>:
 800ee90:	4b01      	ldr	r3, [pc, #4]	; (800ee98 <__errno+0x8>)
 800ee92:	6818      	ldr	r0, [r3, #0]
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop
 800ee98:	20000110 	.word	0x20000110

0800ee9c <__libc_init_array>:
 800ee9c:	b570      	push	{r4, r5, r6, lr}
 800ee9e:	4d0d      	ldr	r5, [pc, #52]	; (800eed4 <__libc_init_array+0x38>)
 800eea0:	4c0d      	ldr	r4, [pc, #52]	; (800eed8 <__libc_init_array+0x3c>)
 800eea2:	1b64      	subs	r4, r4, r5
 800eea4:	10a4      	asrs	r4, r4, #2
 800eea6:	2600      	movs	r6, #0
 800eea8:	42a6      	cmp	r6, r4
 800eeaa:	d109      	bne.n	800eec0 <__libc_init_array+0x24>
 800eeac:	4d0b      	ldr	r5, [pc, #44]	; (800eedc <__libc_init_array+0x40>)
 800eeae:	4c0c      	ldr	r4, [pc, #48]	; (800eee0 <__libc_init_array+0x44>)
 800eeb0:	f000 f9a6 	bl	800f200 <_init>
 800eeb4:	1b64      	subs	r4, r4, r5
 800eeb6:	10a4      	asrs	r4, r4, #2
 800eeb8:	2600      	movs	r6, #0
 800eeba:	42a6      	cmp	r6, r4
 800eebc:	d105      	bne.n	800eeca <__libc_init_array+0x2e>
 800eebe:	bd70      	pop	{r4, r5, r6, pc}
 800eec0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eec4:	4798      	blx	r3
 800eec6:	3601      	adds	r6, #1
 800eec8:	e7ee      	b.n	800eea8 <__libc_init_array+0xc>
 800eeca:	f855 3b04 	ldr.w	r3, [r5], #4
 800eece:	4798      	blx	r3
 800eed0:	3601      	adds	r6, #1
 800eed2:	e7f2      	b.n	800eeba <__libc_init_array+0x1e>
 800eed4:	080117a4 	.word	0x080117a4
 800eed8:	080117a4 	.word	0x080117a4
 800eedc:	080117a4 	.word	0x080117a4
 800eee0:	080117a8 	.word	0x080117a8

0800eee4 <__retarget_lock_acquire_recursive>:
 800eee4:	4770      	bx	lr

0800eee6 <__retarget_lock_release_recursive>:
 800eee6:	4770      	bx	lr

0800eee8 <malloc>:
 800eee8:	4b02      	ldr	r3, [pc, #8]	; (800eef4 <malloc+0xc>)
 800eeea:	4601      	mov	r1, r0
 800eeec:	6818      	ldr	r0, [r3, #0]
 800eeee:	f000 b88d 	b.w	800f00c <_malloc_r>
 800eef2:	bf00      	nop
 800eef4:	20000110 	.word	0x20000110

0800eef8 <free>:
 800eef8:	4b02      	ldr	r3, [pc, #8]	; (800ef04 <free+0xc>)
 800eefa:	4601      	mov	r1, r0
 800eefc:	6818      	ldr	r0, [r3, #0]
 800eefe:	f000 b819 	b.w	800ef34 <_free_r>
 800ef02:	bf00      	nop
 800ef04:	20000110 	.word	0x20000110

0800ef08 <memcpy>:
 800ef08:	440a      	add	r2, r1
 800ef0a:	4291      	cmp	r1, r2
 800ef0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef10:	d100      	bne.n	800ef14 <memcpy+0xc>
 800ef12:	4770      	bx	lr
 800ef14:	b510      	push	{r4, lr}
 800ef16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef1e:	4291      	cmp	r1, r2
 800ef20:	d1f9      	bne.n	800ef16 <memcpy+0xe>
 800ef22:	bd10      	pop	{r4, pc}

0800ef24 <memset>:
 800ef24:	4402      	add	r2, r0
 800ef26:	4603      	mov	r3, r0
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d100      	bne.n	800ef2e <memset+0xa>
 800ef2c:	4770      	bx	lr
 800ef2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ef32:	e7f9      	b.n	800ef28 <memset+0x4>

0800ef34 <_free_r>:
 800ef34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef36:	2900      	cmp	r1, #0
 800ef38:	d044      	beq.n	800efc4 <_free_r+0x90>
 800ef3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef3e:	9001      	str	r0, [sp, #4]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f1a1 0404 	sub.w	r4, r1, #4
 800ef46:	bfb8      	it	lt
 800ef48:	18e4      	addlt	r4, r4, r3
 800ef4a:	f000 f94d 	bl	800f1e8 <__malloc_lock>
 800ef4e:	4a1e      	ldr	r2, [pc, #120]	; (800efc8 <_free_r+0x94>)
 800ef50:	9801      	ldr	r0, [sp, #4]
 800ef52:	6813      	ldr	r3, [r2, #0]
 800ef54:	b933      	cbnz	r3, 800ef64 <_free_r+0x30>
 800ef56:	6063      	str	r3, [r4, #4]
 800ef58:	6014      	str	r4, [r2, #0]
 800ef5a:	b003      	add	sp, #12
 800ef5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef60:	f000 b948 	b.w	800f1f4 <__malloc_unlock>
 800ef64:	42a3      	cmp	r3, r4
 800ef66:	d908      	bls.n	800ef7a <_free_r+0x46>
 800ef68:	6825      	ldr	r5, [r4, #0]
 800ef6a:	1961      	adds	r1, r4, r5
 800ef6c:	428b      	cmp	r3, r1
 800ef6e:	bf01      	itttt	eq
 800ef70:	6819      	ldreq	r1, [r3, #0]
 800ef72:	685b      	ldreq	r3, [r3, #4]
 800ef74:	1949      	addeq	r1, r1, r5
 800ef76:	6021      	streq	r1, [r4, #0]
 800ef78:	e7ed      	b.n	800ef56 <_free_r+0x22>
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	b10b      	cbz	r3, 800ef84 <_free_r+0x50>
 800ef80:	42a3      	cmp	r3, r4
 800ef82:	d9fa      	bls.n	800ef7a <_free_r+0x46>
 800ef84:	6811      	ldr	r1, [r2, #0]
 800ef86:	1855      	adds	r5, r2, r1
 800ef88:	42a5      	cmp	r5, r4
 800ef8a:	d10b      	bne.n	800efa4 <_free_r+0x70>
 800ef8c:	6824      	ldr	r4, [r4, #0]
 800ef8e:	4421      	add	r1, r4
 800ef90:	1854      	adds	r4, r2, r1
 800ef92:	42a3      	cmp	r3, r4
 800ef94:	6011      	str	r1, [r2, #0]
 800ef96:	d1e0      	bne.n	800ef5a <_free_r+0x26>
 800ef98:	681c      	ldr	r4, [r3, #0]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	6053      	str	r3, [r2, #4]
 800ef9e:	4421      	add	r1, r4
 800efa0:	6011      	str	r1, [r2, #0]
 800efa2:	e7da      	b.n	800ef5a <_free_r+0x26>
 800efa4:	d902      	bls.n	800efac <_free_r+0x78>
 800efa6:	230c      	movs	r3, #12
 800efa8:	6003      	str	r3, [r0, #0]
 800efaa:	e7d6      	b.n	800ef5a <_free_r+0x26>
 800efac:	6825      	ldr	r5, [r4, #0]
 800efae:	1961      	adds	r1, r4, r5
 800efb0:	428b      	cmp	r3, r1
 800efb2:	bf04      	itt	eq
 800efb4:	6819      	ldreq	r1, [r3, #0]
 800efb6:	685b      	ldreq	r3, [r3, #4]
 800efb8:	6063      	str	r3, [r4, #4]
 800efba:	bf04      	itt	eq
 800efbc:	1949      	addeq	r1, r1, r5
 800efbe:	6021      	streq	r1, [r4, #0]
 800efc0:	6054      	str	r4, [r2, #4]
 800efc2:	e7ca      	b.n	800ef5a <_free_r+0x26>
 800efc4:	b003      	add	sp, #12
 800efc6:	bd30      	pop	{r4, r5, pc}
 800efc8:	2001bde4 	.word	0x2001bde4

0800efcc <sbrk_aligned>:
 800efcc:	b570      	push	{r4, r5, r6, lr}
 800efce:	4e0e      	ldr	r6, [pc, #56]	; (800f008 <sbrk_aligned+0x3c>)
 800efd0:	460c      	mov	r4, r1
 800efd2:	6831      	ldr	r1, [r6, #0]
 800efd4:	4605      	mov	r5, r0
 800efd6:	b911      	cbnz	r1, 800efde <sbrk_aligned+0x12>
 800efd8:	f000 f8f6 	bl	800f1c8 <_sbrk_r>
 800efdc:	6030      	str	r0, [r6, #0]
 800efde:	4621      	mov	r1, r4
 800efe0:	4628      	mov	r0, r5
 800efe2:	f000 f8f1 	bl	800f1c8 <_sbrk_r>
 800efe6:	1c43      	adds	r3, r0, #1
 800efe8:	d00a      	beq.n	800f000 <sbrk_aligned+0x34>
 800efea:	1cc4      	adds	r4, r0, #3
 800efec:	f024 0403 	bic.w	r4, r4, #3
 800eff0:	42a0      	cmp	r0, r4
 800eff2:	d007      	beq.n	800f004 <sbrk_aligned+0x38>
 800eff4:	1a21      	subs	r1, r4, r0
 800eff6:	4628      	mov	r0, r5
 800eff8:	f000 f8e6 	bl	800f1c8 <_sbrk_r>
 800effc:	3001      	adds	r0, #1
 800effe:	d101      	bne.n	800f004 <sbrk_aligned+0x38>
 800f000:	f04f 34ff 	mov.w	r4, #4294967295
 800f004:	4620      	mov	r0, r4
 800f006:	bd70      	pop	{r4, r5, r6, pc}
 800f008:	2001bde8 	.word	0x2001bde8

0800f00c <_malloc_r>:
 800f00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f010:	1ccd      	adds	r5, r1, #3
 800f012:	f025 0503 	bic.w	r5, r5, #3
 800f016:	3508      	adds	r5, #8
 800f018:	2d0c      	cmp	r5, #12
 800f01a:	bf38      	it	cc
 800f01c:	250c      	movcc	r5, #12
 800f01e:	2d00      	cmp	r5, #0
 800f020:	4607      	mov	r7, r0
 800f022:	db01      	blt.n	800f028 <_malloc_r+0x1c>
 800f024:	42a9      	cmp	r1, r5
 800f026:	d905      	bls.n	800f034 <_malloc_r+0x28>
 800f028:	230c      	movs	r3, #12
 800f02a:	603b      	str	r3, [r7, #0]
 800f02c:	2600      	movs	r6, #0
 800f02e:	4630      	mov	r0, r6
 800f030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f034:	4e2e      	ldr	r6, [pc, #184]	; (800f0f0 <_malloc_r+0xe4>)
 800f036:	f000 f8d7 	bl	800f1e8 <__malloc_lock>
 800f03a:	6833      	ldr	r3, [r6, #0]
 800f03c:	461c      	mov	r4, r3
 800f03e:	bb34      	cbnz	r4, 800f08e <_malloc_r+0x82>
 800f040:	4629      	mov	r1, r5
 800f042:	4638      	mov	r0, r7
 800f044:	f7ff ffc2 	bl	800efcc <sbrk_aligned>
 800f048:	1c43      	adds	r3, r0, #1
 800f04a:	4604      	mov	r4, r0
 800f04c:	d14d      	bne.n	800f0ea <_malloc_r+0xde>
 800f04e:	6834      	ldr	r4, [r6, #0]
 800f050:	4626      	mov	r6, r4
 800f052:	2e00      	cmp	r6, #0
 800f054:	d140      	bne.n	800f0d8 <_malloc_r+0xcc>
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	4631      	mov	r1, r6
 800f05a:	4638      	mov	r0, r7
 800f05c:	eb04 0803 	add.w	r8, r4, r3
 800f060:	f000 f8b2 	bl	800f1c8 <_sbrk_r>
 800f064:	4580      	cmp	r8, r0
 800f066:	d13a      	bne.n	800f0de <_malloc_r+0xd2>
 800f068:	6821      	ldr	r1, [r4, #0]
 800f06a:	3503      	adds	r5, #3
 800f06c:	1a6d      	subs	r5, r5, r1
 800f06e:	f025 0503 	bic.w	r5, r5, #3
 800f072:	3508      	adds	r5, #8
 800f074:	2d0c      	cmp	r5, #12
 800f076:	bf38      	it	cc
 800f078:	250c      	movcc	r5, #12
 800f07a:	4629      	mov	r1, r5
 800f07c:	4638      	mov	r0, r7
 800f07e:	f7ff ffa5 	bl	800efcc <sbrk_aligned>
 800f082:	3001      	adds	r0, #1
 800f084:	d02b      	beq.n	800f0de <_malloc_r+0xd2>
 800f086:	6823      	ldr	r3, [r4, #0]
 800f088:	442b      	add	r3, r5
 800f08a:	6023      	str	r3, [r4, #0]
 800f08c:	e00e      	b.n	800f0ac <_malloc_r+0xa0>
 800f08e:	6822      	ldr	r2, [r4, #0]
 800f090:	1b52      	subs	r2, r2, r5
 800f092:	d41e      	bmi.n	800f0d2 <_malloc_r+0xc6>
 800f094:	2a0b      	cmp	r2, #11
 800f096:	d916      	bls.n	800f0c6 <_malloc_r+0xba>
 800f098:	1961      	adds	r1, r4, r5
 800f09a:	42a3      	cmp	r3, r4
 800f09c:	6025      	str	r5, [r4, #0]
 800f09e:	bf18      	it	ne
 800f0a0:	6059      	strne	r1, [r3, #4]
 800f0a2:	6863      	ldr	r3, [r4, #4]
 800f0a4:	bf08      	it	eq
 800f0a6:	6031      	streq	r1, [r6, #0]
 800f0a8:	5162      	str	r2, [r4, r5]
 800f0aa:	604b      	str	r3, [r1, #4]
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	f104 060b 	add.w	r6, r4, #11
 800f0b2:	f000 f89f 	bl	800f1f4 <__malloc_unlock>
 800f0b6:	f026 0607 	bic.w	r6, r6, #7
 800f0ba:	1d23      	adds	r3, r4, #4
 800f0bc:	1af2      	subs	r2, r6, r3
 800f0be:	d0b6      	beq.n	800f02e <_malloc_r+0x22>
 800f0c0:	1b9b      	subs	r3, r3, r6
 800f0c2:	50a3      	str	r3, [r4, r2]
 800f0c4:	e7b3      	b.n	800f02e <_malloc_r+0x22>
 800f0c6:	6862      	ldr	r2, [r4, #4]
 800f0c8:	42a3      	cmp	r3, r4
 800f0ca:	bf0c      	ite	eq
 800f0cc:	6032      	streq	r2, [r6, #0]
 800f0ce:	605a      	strne	r2, [r3, #4]
 800f0d0:	e7ec      	b.n	800f0ac <_malloc_r+0xa0>
 800f0d2:	4623      	mov	r3, r4
 800f0d4:	6864      	ldr	r4, [r4, #4]
 800f0d6:	e7b2      	b.n	800f03e <_malloc_r+0x32>
 800f0d8:	4634      	mov	r4, r6
 800f0da:	6876      	ldr	r6, [r6, #4]
 800f0dc:	e7b9      	b.n	800f052 <_malloc_r+0x46>
 800f0de:	230c      	movs	r3, #12
 800f0e0:	603b      	str	r3, [r7, #0]
 800f0e2:	4638      	mov	r0, r7
 800f0e4:	f000 f886 	bl	800f1f4 <__malloc_unlock>
 800f0e8:	e7a1      	b.n	800f02e <_malloc_r+0x22>
 800f0ea:	6025      	str	r5, [r4, #0]
 800f0ec:	e7de      	b.n	800f0ac <_malloc_r+0xa0>
 800f0ee:	bf00      	nop
 800f0f0:	2001bde4 	.word	0x2001bde4

0800f0f4 <cleanup_glue>:
 800f0f4:	b538      	push	{r3, r4, r5, lr}
 800f0f6:	460c      	mov	r4, r1
 800f0f8:	6809      	ldr	r1, [r1, #0]
 800f0fa:	4605      	mov	r5, r0
 800f0fc:	b109      	cbz	r1, 800f102 <cleanup_glue+0xe>
 800f0fe:	f7ff fff9 	bl	800f0f4 <cleanup_glue>
 800f102:	4621      	mov	r1, r4
 800f104:	4628      	mov	r0, r5
 800f106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f10a:	f7ff bf13 	b.w	800ef34 <_free_r>
	...

0800f110 <_reclaim_reent>:
 800f110:	4b2c      	ldr	r3, [pc, #176]	; (800f1c4 <_reclaim_reent+0xb4>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4283      	cmp	r3, r0
 800f116:	b570      	push	{r4, r5, r6, lr}
 800f118:	4604      	mov	r4, r0
 800f11a:	d051      	beq.n	800f1c0 <_reclaim_reent+0xb0>
 800f11c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f11e:	b143      	cbz	r3, 800f132 <_reclaim_reent+0x22>
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d14a      	bne.n	800f1bc <_reclaim_reent+0xac>
 800f126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f128:	6819      	ldr	r1, [r3, #0]
 800f12a:	b111      	cbz	r1, 800f132 <_reclaim_reent+0x22>
 800f12c:	4620      	mov	r0, r4
 800f12e:	f7ff ff01 	bl	800ef34 <_free_r>
 800f132:	6961      	ldr	r1, [r4, #20]
 800f134:	b111      	cbz	r1, 800f13c <_reclaim_reent+0x2c>
 800f136:	4620      	mov	r0, r4
 800f138:	f7ff fefc 	bl	800ef34 <_free_r>
 800f13c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f13e:	b111      	cbz	r1, 800f146 <_reclaim_reent+0x36>
 800f140:	4620      	mov	r0, r4
 800f142:	f7ff fef7 	bl	800ef34 <_free_r>
 800f146:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f148:	b111      	cbz	r1, 800f150 <_reclaim_reent+0x40>
 800f14a:	4620      	mov	r0, r4
 800f14c:	f7ff fef2 	bl	800ef34 <_free_r>
 800f150:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f152:	b111      	cbz	r1, 800f15a <_reclaim_reent+0x4a>
 800f154:	4620      	mov	r0, r4
 800f156:	f7ff feed 	bl	800ef34 <_free_r>
 800f15a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f15c:	b111      	cbz	r1, 800f164 <_reclaim_reent+0x54>
 800f15e:	4620      	mov	r0, r4
 800f160:	f7ff fee8 	bl	800ef34 <_free_r>
 800f164:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f166:	b111      	cbz	r1, 800f16e <_reclaim_reent+0x5e>
 800f168:	4620      	mov	r0, r4
 800f16a:	f7ff fee3 	bl	800ef34 <_free_r>
 800f16e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f170:	b111      	cbz	r1, 800f178 <_reclaim_reent+0x68>
 800f172:	4620      	mov	r0, r4
 800f174:	f7ff fede 	bl	800ef34 <_free_r>
 800f178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f17a:	b111      	cbz	r1, 800f182 <_reclaim_reent+0x72>
 800f17c:	4620      	mov	r0, r4
 800f17e:	f7ff fed9 	bl	800ef34 <_free_r>
 800f182:	69a3      	ldr	r3, [r4, #24]
 800f184:	b1e3      	cbz	r3, 800f1c0 <_reclaim_reent+0xb0>
 800f186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f188:	4620      	mov	r0, r4
 800f18a:	4798      	blx	r3
 800f18c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f18e:	b1b9      	cbz	r1, 800f1c0 <_reclaim_reent+0xb0>
 800f190:	4620      	mov	r0, r4
 800f192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f196:	f7ff bfad 	b.w	800f0f4 <cleanup_glue>
 800f19a:	5949      	ldr	r1, [r1, r5]
 800f19c:	b941      	cbnz	r1, 800f1b0 <_reclaim_reent+0xa0>
 800f19e:	3504      	adds	r5, #4
 800f1a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1a2:	2d80      	cmp	r5, #128	; 0x80
 800f1a4:	68d9      	ldr	r1, [r3, #12]
 800f1a6:	d1f8      	bne.n	800f19a <_reclaim_reent+0x8a>
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f7ff fec3 	bl	800ef34 <_free_r>
 800f1ae:	e7ba      	b.n	800f126 <_reclaim_reent+0x16>
 800f1b0:	680e      	ldr	r6, [r1, #0]
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f7ff febe 	bl	800ef34 <_free_r>
 800f1b8:	4631      	mov	r1, r6
 800f1ba:	e7ef      	b.n	800f19c <_reclaim_reent+0x8c>
 800f1bc:	2500      	movs	r5, #0
 800f1be:	e7ef      	b.n	800f1a0 <_reclaim_reent+0x90>
 800f1c0:	bd70      	pop	{r4, r5, r6, pc}
 800f1c2:	bf00      	nop
 800f1c4:	20000110 	.word	0x20000110

0800f1c8 <_sbrk_r>:
 800f1c8:	b538      	push	{r3, r4, r5, lr}
 800f1ca:	4d06      	ldr	r5, [pc, #24]	; (800f1e4 <_sbrk_r+0x1c>)
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	4608      	mov	r0, r1
 800f1d2:	602b      	str	r3, [r5, #0]
 800f1d4:	f7f2 fa04 	bl	80015e0 <_sbrk>
 800f1d8:	1c43      	adds	r3, r0, #1
 800f1da:	d102      	bne.n	800f1e2 <_sbrk_r+0x1a>
 800f1dc:	682b      	ldr	r3, [r5, #0]
 800f1de:	b103      	cbz	r3, 800f1e2 <_sbrk_r+0x1a>
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	bd38      	pop	{r3, r4, r5, pc}
 800f1e4:	2001bdec 	.word	0x2001bdec

0800f1e8 <__malloc_lock>:
 800f1e8:	4801      	ldr	r0, [pc, #4]	; (800f1f0 <__malloc_lock+0x8>)
 800f1ea:	f7ff be7b 	b.w	800eee4 <__retarget_lock_acquire_recursive>
 800f1ee:	bf00      	nop
 800f1f0:	2001bde0 	.word	0x2001bde0

0800f1f4 <__malloc_unlock>:
 800f1f4:	4801      	ldr	r0, [pc, #4]	; (800f1fc <__malloc_unlock+0x8>)
 800f1f6:	f7ff be76 	b.w	800eee6 <__retarget_lock_release_recursive>
 800f1fa:	bf00      	nop
 800f1fc:	2001bde0 	.word	0x2001bde0

0800f200 <_init>:
 800f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f202:	bf00      	nop
 800f204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f206:	bc08      	pop	{r3}
 800f208:	469e      	mov	lr, r3
 800f20a:	4770      	bx	lr

0800f20c <_fini>:
 800f20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f20e:	bf00      	nop
 800f210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f212:	bc08      	pop	{r3}
 800f214:	469e      	mov	lr, r3
 800f216:	4770      	bx	lr

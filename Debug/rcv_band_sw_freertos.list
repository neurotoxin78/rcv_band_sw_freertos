
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012304  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026ec  080124a4  080124a4  000224a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b90  08014b90  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014b90  08014b90  00024b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b98  08014b98  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b98  08014b98  00024b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b9c  08014b9c  00024b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08014ba0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ce9c  200001f0  08014d90  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2001d08c  08014d90  0003d08c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e05d  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072ff  00000000  00000000  0005e27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024e8  00000000  00000000  00065580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021d8  00000000  00000000  00067a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022094  00000000  00000000  00069c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034086  00000000  00000000  0008bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3c3f  00000000  00000000  000bfd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173999  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d94  00000000  00000000  001739ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801248c 	.word	0x0801248c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0801248c 	.word	0x0801248c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <ARGB_Init>:
/**
 * @brief Init timer & prescalers
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8000ba6:	f006 fa3b 	bl	8007020 <HAL_RCC_GetPCLK2Freq>
 8000baa:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <ARGB_Init+0xd8>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <ARGB_Init+0x1c>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <ARGB_Init+0x1e>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	4a2b      	ldr	r2, [pc, #172]	; (8000c7c <ARGB_Init+0xdc>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	607b      	str	r3, [r7, #4]
#endif

    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <ARGB_Init+0xe0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <ARGB_Init+0xe0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <ARGB_Init+0xe0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fdb7 	bl	8000768 <__aeabi_ui2d>
 8000bfa:	a31b      	add	r3, pc, #108	; (adr r3, 8000c68 <ARGB_Init+0xc8>)
 8000bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c00:	f7ff fb46 	bl	8000290 <__aeabi_dmul>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fe26 	bl	800085c <__aeabi_d2uiz>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	3b01      	subs	r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <ARGB_Init+0xe4>)
 8000c1a:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fda3 	bl	8000768 <__aeabi_ui2d>
 8000c22:	a313      	add	r3, pc, #76	; (adr r3, 8000c70 <ARGB_Init+0xd0>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fb32 	bl	8000290 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff fe12 	bl	800085c <__aeabi_d2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <ARGB_Init+0xe8>)
 8000c42:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <ARGB_Init+0xec>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <ARGB_Init+0xe0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2108      	movs	r1, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f009 fa46 	bl	800a0e4 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f002 fac3 	bl	80031e4 <HAL_Delay>
    return ARGB_OK;
 8000c5e:	2302      	movs	r3, #2
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	1eb851ec 	.word	0x1eb851ec
 8000c6c:	3fe1eb85 	.word	0x3fe1eb85
 8000c70:	1eb851ec 	.word	0x1eb851ec
 8000c74:	3fd1eb85 	.word	0x3fd1eb85
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	014f8b59 	.word	0x014f8b59
 8000c80:	2000150c 	.word	0x2000150c
 8000c84:	2000020c 	.word	0x2000020c
 8000c88:	2000020d 	.word	0x2000020d
 8000c8c:	200002d6 	.word	0x200002d6

08000c90 <ARGB_Clear>:
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Clear(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 f885 	bl	8000da8 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
    return ARGB_OK;
 8000c9e:	2302      	movs	r3, #2
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <ARGB_SetBrightness>:
/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetBrightness(u8_t br) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <ARGB_SetBrightness+0x20>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	7013      	strb	r3, [r2, #0]
    return ARGB_OK;
 8000cb4:	2302      	movs	r3, #2
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <ARGB_SetRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4623      	mov	r3, r4
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	4603      	mov	r3, r0
 8000cdc:	717b      	strb	r3, [r7, #5]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	713b      	strb	r3, [r7, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <ARGB_SetRGB+0x30>
        u16_t _i = i / NUM_PIXELS;
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	80fb      	strh	r3, [r7, #6]
    }

    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <ARGB_SetRGB+0xd8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d04:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d08:	797a      	ldrb	r2, [r7, #5]
 8000d0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d0e:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <ARGB_SetRGB+0xd8>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	3301      	adds	r3, #1
 8000d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d20:	793a      	ldrb	r2, [r7, #4]
 8000d22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d26:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <ARGB_SetRGB+0xd8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d3e:	70fb      	strb	r3, [r7, #3]

#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000d40:	793b      	ldrb	r3, [r7, #4]
 8000d42:	21b0      	movs	r1, #176	; 0xb0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f9cb 	bl	80010e0 <scale8>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	21f0      	movs	r1, #240	; 0xf0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9c4 	bl	80010e0 <scale8>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8000d5c:	793b      	ldrb	r3, [r7, #4]
 8000d5e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000d60:	797b      	ldrb	r3, [r7, #5]
 8000d62:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000d68:	88fa      	ldrh	r2, [r7, #6]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <ARGB_SetRGB+0xdc>)
 8000d72:	7b7a      	ldrb	r2, [r7, #13]
 8000d74:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000d76:	88fa      	ldrh	r2, [r7, #6]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4908      	ldr	r1, [pc, #32]	; (8000da4 <ARGB_SetRGB+0xdc>)
 8000d82:	7b3a      	ldrb	r2, [r7, #12]
 8000d84:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	4904      	ldr	r1, [pc, #16]	; (8000da4 <ARGB_SetRGB+0xdc>)
 8000d92:	7afa      	ldrb	r2, [r7, #11]
 8000d94:	54ca      	strb	r2, [r1, r3]
#endif
    return ARGB_OK;
 8000d96:	2302      	movs	r3, #2
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000210 	.word	0x20000210

08000da8 <ARGB_FillRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	460b      	mov	r3, r1
 8000db4:	71bb      	strb	r3, [r7, #6]
 8000db6:	4613      	mov	r3, r2
 8000db8:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	81fb      	strh	r3, [r7, #14]
 8000dbe:	e00b      	b.n	8000dd8 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	797b      	ldrb	r3, [r7, #5]
 8000dc6:	79ba      	ldrb	r2, [r7, #6]
 8000dc8:	79f9      	ldrb	r1, [r7, #7]
 8000dca:	f7ff ff7d 	bl	8000cc8 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	81fb      	strh	r3, [r7, #14]
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0ef      	beq.n	8000dc0 <ARGB_FillRGB+0x18>
    return ARGB_OK;
 8000de0:	2302      	movs	r3, #2
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8000df2:	4b9d      	ldr	r3, [pc, #628]	; (8001068 <ARGB_Show+0x27c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8000df8:	4b9c      	ldr	r3, [pc, #624]	; (800106c <ARGB_Show+0x280>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d105      	bne.n	8000e0e <ARGB_Show+0x22>
 8000e02:	4b9b      	ldr	r3, [pc, #620]	; (8001070 <ARGB_Show+0x284>)
 8000e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d001      	beq.n	8000e12 <ARGB_Show+0x26>
        return ARGB_BUSY;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e15e      	b.n	80010d0 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	e0a6      	b.n	8000f66 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e18:	4b96      	ldr	r3, [pc, #600]	; (8001074 <ARGB_Show+0x288>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dd04      	ble.n	8000e3a <ARGB_Show+0x4e>
 8000e30:	4b91      	ldr	r3, [pc, #580]	; (8001078 <ARGB_Show+0x28c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	e003      	b.n	8000e42 <ARGB_Show+0x56>
 8000e3a:	4b90      	ldr	r3, [pc, #576]	; (800107c <ARGB_Show+0x290>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	4b8d      	ldr	r3, [pc, #564]	; (8001080 <ARGB_Show+0x294>)
 8000e4a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e4e:	4b89      	ldr	r3, [pc, #548]	; (8001074 <ARGB_Show+0x288>)
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dd04      	ble.n	8000e70 <ARGB_Show+0x84>
 8000e66:	4b84      	ldr	r3, [pc, #528]	; (8001078 <ARGB_Show+0x28c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	e003      	b.n	8000e78 <ARGB_Show+0x8c>
 8000e70:	4b82      	ldr	r3, [pc, #520]	; (800107c <ARGB_Show+0x290>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4619      	mov	r1, r3
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	4a80      	ldr	r2, [pc, #512]	; (8001080 <ARGB_Show+0x294>)
 8000e80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e84:	4b7b      	ldr	r3, [pc, #492]	; (8001074 <ARGB_Show+0x288>)
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dd04      	ble.n	8000ea6 <ARGB_Show+0xba>
 8000e9c:	4b76      	ldr	r3, [pc, #472]	; (8001078 <ARGB_Show+0x28c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	e003      	b.n	8000eae <ARGB_Show+0xc2>
 8000ea6:	4b75      	ldr	r3, [pc, #468]	; (800107c <ARGB_Show+0x290>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4619      	mov	r1, r3
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3310      	adds	r3, #16
 8000eb4:	4a72      	ldr	r2, [pc, #456]	; (8001080 <ARGB_Show+0x294>)
 8000eb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000eba:	4b6e      	ldr	r3, [pc, #440]	; (8001074 <ARGB_Show+0x288>)
 8000ebc:	78db      	ldrb	r3, [r3, #3]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	dd04      	ble.n	8000edc <ARGB_Show+0xf0>
 8000ed2:	4b69      	ldr	r3, [pc, #420]	; (8001078 <ARGB_Show+0x28c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	e003      	b.n	8000ee4 <ARGB_Show+0xf8>
 8000edc:	4b67      	ldr	r3, [pc, #412]	; (800107c <ARGB_Show+0x290>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	3318      	adds	r3, #24
 8000eea:	4a65      	ldr	r2, [pc, #404]	; (8001080 <ARGB_Show+0x294>)
 8000eec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ef0:	4b60      	ldr	r3, [pc, #384]	; (8001074 <ARGB_Show+0x288>)
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd04      	ble.n	8000f12 <ARGB_Show+0x126>
 8000f08:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <ARGB_Show+0x28c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	e003      	b.n	8000f1a <ARGB_Show+0x12e>
 8000f12:	4b5a      	ldr	r3, [pc, #360]	; (800107c <ARGB_Show+0x290>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3320      	adds	r3, #32
 8000f20:	4a57      	ldr	r2, [pc, #348]	; (8001080 <ARGB_Show+0x294>)
 8000f22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f26:	4b53      	ldr	r3, [pc, #332]	; (8001074 <ARGB_Show+0x288>)
 8000f28:	795b      	ldrb	r3, [r3, #5]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	dd04      	ble.n	8000f48 <ARGB_Show+0x15c>
 8000f3e:	4b4e      	ldr	r3, [pc, #312]	; (8001078 <ARGB_Show+0x28c>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4619      	mov	r1, r3
 8000f46:	e003      	b.n	8000f50 <ARGB_Show+0x164>
 8000f48:	4b4c      	ldr	r3, [pc, #304]	; (800107c <ARGB_Show+0x290>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3328      	adds	r3, #40	; 0x28
 8000f56:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <ARGB_Show+0x294>)
 8000f58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	f67f af54 	bls.w	8000e18 <ARGB_Show+0x2c>
#endif
        }

        //HAL_TIM_DMABurst_WriteStart(&TIM_HANDLE, TIM_DMABASE_ARR)

        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000f74:	e0a4      	b.n	80010c0 <ARGB_Show+0x2d4>

            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000f76:	4b43      	ldr	r3, [pc, #268]	; (8001084 <ARGB_Show+0x298>)
 8000f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d102      	bne.n	8000f88 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8000f82:	2302      	movs	r3, #2
 8000f84:	73fb      	strb	r3, [r7, #15]
                continue;
 8000f86:	e09b      	b.n	80010c0 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000f88:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <ARGB_Show+0x298>)
 8000f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d11d      	bne.n	8000fd0 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000f94:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <ARGB_Show+0x298>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <ARGB_Show+0x298>)
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	4a39      	ldr	r2, [pc, #228]	; (8001088 <ARGB_Show+0x29c>)
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000fa4:	4b37      	ldr	r3, [pc, #220]	; (8001084 <ARGB_Show+0x298>)
 8000fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa8:	4a38      	ldr	r2, [pc, #224]	; (800108c <ARGB_Show+0x2a0>)
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <ARGB_Show+0x298>)
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	4a37      	ldr	r2, [pc, #220]	; (8001090 <ARGB_Show+0x2a4>)
 8000fb2:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <ARGB_Show+0x298>)
 8000fb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000fb8:	4931      	ldr	r1, [pc, #196]	; (8001080 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <ARGB_Show+0x298>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2330      	movs	r3, #48	; 0x30
 8000fc4:	f003 f866 	bl	8004094 <HAL_DMA_Start_IT>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <ARGB_Show+0x1f0>
 8000fce:	e002      	b.n	8000fd6 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fd4:	e074      	b.n	80010c0 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fda:	e071      	b.n	80010c0 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <ARGB_Show+0x298>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <ARGB_Show+0x298>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fea:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <ARGB_Show+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a28      	ldr	r2, [pc, #160]	; (8001094 <ARGB_Show+0x2a8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d107      	bne.n	8001006 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <ARGB_Show+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <ARGB_Show+0x298>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001004:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <ARGB_Show+0x298>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <ARGB_Show+0x2a8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d018      	beq.n	8001042 <ARGB_Show+0x256>
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <ARGB_Show+0x298>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d013      	beq.n	8001042 <ARGB_Show+0x256>
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <ARGB_Show+0x298>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <ARGB_Show+0x2ac>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00e      	beq.n	8001042 <ARGB_Show+0x256>
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <ARGB_Show+0x298>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <ARGB_Show+0x2b0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d009      	beq.n	8001042 <ARGB_Show+0x256>
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <ARGB_Show+0x298>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <ARGB_Show+0x2b4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d004      	beq.n	8001042 <ARGB_Show+0x256>
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <ARGB_Show+0x298>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <ARGB_Show+0x2b8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d132      	bne.n	80010a8 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <ARGB_Show+0x298>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b06      	cmp	r3, #6
 8001052:	d032      	beq.n	80010ba <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <ARGB_Show+0x298>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <ARGB_Show+0x298>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0201 	orr.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001064:	e029      	b.n	80010ba <ARGB_Show+0x2ce>
 8001066:	bf00      	nop
 8001068:	200002d6 	.word	0x200002d6
 800106c:	200002d4 	.word	0x200002d4
 8001070:	200015e4 	.word	0x200015e4
 8001074:	20000210 	.word	0x20000210
 8001078:	2000020c 	.word	0x2000020c
 800107c:	2000020d 	.word	0x2000020d
 8001080:	20000214 	.word	0x20000214
 8001084:	2000150c 	.word	0x2000150c
 8001088:	08001109 	.word	0x08001109
 800108c:	08001389 	.word	0x08001389
 8001090:	080099f1 	.word	0x080099f1
 8001094:	40010000 	.word	0x40010000
 8001098:	40000400 	.word	0x40000400
 800109c:	40000800 	.word	0x40000800
 80010a0:	40000c00 	.word	0x40000c00
 80010a4:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <ARGB_Show+0x2ec>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <ARGB_Show+0x2ec>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e000      	b.n	80010bc <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80010ba:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f47f af57 	bne.w	8000f76 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <ARGB_Show+0x2f0>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	801a      	strh	r2, [r3, #0]

        return ARGB_OK;
 80010ce:	2302      	movs	r3, #2
    }
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000150c 	.word	0x2000150c
 80010dc:	200002d4 	.word	0x200002d4

080010e0 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	79ba      	ldrb	r2, [r7, #6]
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	121b      	asrs	r3, r3, #8
 80010fa:	b2db      	uxtb	r3, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001114:	60fb      	str	r3, [r7, #12]

    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	d10b      	bne.n	8001138 <ARGB_TIM_DMADelayPulseCplt+0x30>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2201      	movs	r2, #1
 8001124:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d136      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001136:	e031      	b.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d10b      	bne.n	800115a <ARGB_TIM_DMADelayPulseCplt+0x52>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2202      	movs	r2, #2
 8001146:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d125      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001158:	e020      	b.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d10b      	bne.n	800117c <ARGB_TIM_DMADelayPulseCplt+0x74>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2204      	movs	r2, #4
 8001168:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d114      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800117a:	e00f      	b.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d10a      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2208      	movs	r2, #8
 800118a:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 800119c:	4b72      	ldr	r3, [pc, #456]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d17b      	bne.n	800129e <ARGB_TIM_DMADelayPulseCplt+0x196>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	72fb      	strb	r3, [r7, #11]
 80011aa:	e06c      	b.n	8001286 <ARGB_TIM_DMADelayPulseCplt+0x17e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011ac:	4b6e      	ldr	r3, [pc, #440]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	4a6c      	ldr	r2, [pc, #432]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd04      	ble.n	80011dc <ARGB_TIM_DMADelayPulseCplt+0xd4>
 80011d2:	4b67      	ldr	r3, [pc, #412]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	e003      	b.n	80011e4 <ARGB_TIM_DMADelayPulseCplt+0xdc>
 80011dc:	4b65      	ldr	r3, [pc, #404]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3318      	adds	r3, #24
 80011ea:	4a63      	ldr	r2, [pc, #396]	; (8001378 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 80011ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011f0:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	3301      	adds	r3, #1
 8001200:	4a5a      	ldr	r2, [pc, #360]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	7afb      	ldrb	r3, [r7, #11]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001214:	2b00      	cmp	r3, #0
 8001216:	dd04      	ble.n	8001222 <ARGB_TIM_DMADelayPulseCplt+0x11a>
 8001218:	4b55      	ldr	r3, [pc, #340]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4619      	mov	r1, r3
 8001220:	e003      	b.n	800122a <ARGB_TIM_DMADelayPulseCplt+0x122>
 8001222:	4b54      	ldr	r3, [pc, #336]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3320      	adds	r3, #32
 8001230:	4a51      	ldr	r2, [pc, #324]	; (8001378 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001236:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	3302      	adds	r3, #2
 8001246:	4a49      	ldr	r2, [pc, #292]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	2b00      	cmp	r3, #0
 800125c:	dd04      	ble.n	8001268 <ARGB_TIM_DMADelayPulseCplt+0x160>
 800125e:	4b44      	ldr	r3, [pc, #272]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4619      	mov	r1, r3
 8001266:	e003      	b.n	8001270 <ARGB_TIM_DMADelayPulseCplt+0x168>
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4619      	mov	r1, r3
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	3328      	adds	r3, #40	; 0x28
 8001276:	4a40      	ldr	r2, [pc, #256]	; (8001378 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	72fb      	strb	r3, [r7, #11]
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b07      	cmp	r3, #7
 800128c:	d98e      	bls.n	80011ac <ARGB_TIM_DMADelayPulseCplt+0xa4>
#endif
        }
        BUF_COUNTER++;
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	3301      	adds	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e05d      	b.n	800135a <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d80c      	bhi.n	80012c2 <ARGB_TIM_DMADelayPulseCplt+0x1ba>
        memset((u32_t *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // second part
 80012a8:	2260      	movs	r2, #96	; 0x60
 80012aa:	2100      	movs	r1, #0
 80012ac:	4833      	ldr	r0, [pc, #204]	; (800137c <ARGB_TIM_DMADelayPulseCplt+0x274>)
 80012ae:	f010 fc15 	bl	8011adc <memset>
        BUF_COUNTER++;
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3301      	adds	r3, #1
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012be:	801a      	strh	r2, [r3, #0]
 80012c0:	e04b      	b.n	800135a <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d6:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 ff3f 	bl	8004160 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <ARGB_TIM_DMADelayPulseCplt+0x278>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d117      	bne.n	800131c <ARGB_TIM_DMADelayPulseCplt+0x214>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10f      	bne.n	800131c <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	f240 4344 	movw	r3, #1092	; 0x444
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d107      	bne.n	800131c <ARGB_TIM_DMADelayPulseCplt+0x214>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800131a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a1a      	ldr	r2, [r3, #32]
 8001322:	f241 1311 	movw	r3, #4369	; 0x1111
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10f      	bne.n	800134c <ARGB_TIM_DMADelayPulseCplt+0x244>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	f240 4344 	movw	r3, #1092	; 0x444
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d107      	bne.n	800134c <ARGB_TIM_DMADelayPulseCplt+0x244>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]

        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST = ARGB_READY;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <ARGB_TIM_DMADelayPulseCplt+0x27c>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
    }

    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	771a      	strb	r2, [r3, #28]
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002d4 	.word	0x200002d4
 800136c:	20000210 	.word	0x20000210
 8001370:	2000020c 	.word	0x2000020c
 8001374:	2000020d 	.word	0x2000020d
 8001378:	20000214 	.word	0x20000214
 800137c:	20000274 	.word	0x20000274
 8001380:	40010000 	.word	0x40010000
 8001384:	200002d6 	.word	0x200002d6

08001388 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001394:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4f      	ldr	r2, [pc, #316]	; (80014d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x150>)
 800139a:	4293      	cmp	r3, r2
 800139c:	f040 8098 	bne.w	80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <ARGB_TIM_DMADelayPulseHalfCplt+0x154>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	f040 8093 	bne.w	80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>

    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 80013aa:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d17b      	bne.n	80014ac <ARGB_TIM_DMADelayPulseHalfCplt+0x124>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	72fb      	strb	r3, [r7, #11]
 80013b8:	e06c      	b.n	8001494 <ARGB_TIM_DMADelayPulseHalfCplt+0x10c>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	4a46      	ldr	r2, [pc, #280]	; (80014e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013dc:	2b00      	cmp	r3, #0
 80013de:	dd04      	ble.n	80013ea <ARGB_TIM_DMADelayPulseHalfCplt+0x62>
 80013e0:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	e003      	b.n	80013f2 <ARGB_TIM_DMADelayPulseHalfCplt+0x6a>
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	3301      	adds	r3, #1
 800140e:	4a35      	ldr	r2, [pc, #212]	; (80014e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001422:	2b00      	cmp	r3, #0
 8001424:	dd04      	ble.n	8001430 <ARGB_TIM_DMADelayPulseHalfCplt+0xa8>
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4619      	mov	r1, r3
 800142e:	e003      	b.n	8001438 <ARGB_TIM_DMADelayPulseHalfCplt+0xb0>
 8001430:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3308      	adds	r3, #8
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	3302      	adds	r3, #2
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001468:	2b00      	cmp	r3, #0
 800146a:	dd04      	ble.n	8001476 <ARGB_TIM_DMADelayPulseHalfCplt+0xee>
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4619      	mov	r1, r3
 8001474:	e003      	b.n	800147e <ARGB_TIM_DMADelayPulseHalfCplt+0xf6>
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4619      	mov	r1, r3
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	3310      	adds	r3, #16
 8001484:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001486:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800148a:	7afb      	ldrb	r3, [r7, #11]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3301      	adds	r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	72fb      	strb	r3, [r7, #11]
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b07      	cmp	r3, #7
 800149a:	d98e      	bls.n	80013ba <ARGB_TIM_DMADelayPulseHalfCplt+0x32>
#endif
        }
        BUF_COUNTER++;
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014a8:	801a      	strh	r2, [r3, #0]
 80014aa:	e012      	b.n	80014d2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d80d      	bhi.n	80014d2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
        memset((u32_t*) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // first part
 80014b6:	2260      	movs	r2, #96	; 0x60
 80014b8:	2100      	movs	r1, #0
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014bc:	f010 fb0e 	bl	8011adc <memset>
        BUF_COUNTER++;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	e000      	b.n	80014d2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80014d0:	bf00      	nop
    }
}
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200015e4 	.word	0x200015e4
 80014dc:	2000150c 	.word	0x2000150c
 80014e0:	200002d4 	.word	0x200002d4
 80014e4:	20000210 	.word	0x20000210
 80014e8:	2000020c 	.word	0x2000020c
 80014ec:	2000020d 	.word	0x2000020d
 80014f0:	20000214 	.word	0x20000214

080014f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_ADC1_Init+0x98>)
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <MX_ADC1_Init+0x9c>)
 800150a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_ADC1_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_ADC1_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_ADC1_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_ADC1_Init+0x98>)
 8001534:	4a17      	ldr	r2, [pc, #92]	; (8001594 <MX_ADC1_Init+0xa0>)
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_ADC1_Init+0x98>)
 8001540:	2201      	movs	r2, #1
 8001542:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_ADC1_Init+0x98>)
 800154e:	2201      	movs	r2, #1
 8001550:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001552:	480e      	ldr	r0, [pc, #56]	; (800158c <MX_ADC1_Init+0x98>)
 8001554:	f001 fe6a 	bl	800322c <HAL_ADC_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800155e:	f000 fccd 	bl	8001efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001562:	2309      	movs	r3, #9
 8001564:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001566:	2301      	movs	r3, #1
 8001568:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_ADC1_Init+0x98>)
 8001574:	f001 ffb8 	bl	80034e8 <HAL_ADC_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800157e:	f000 fcbd 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200002d8 	.word	0x200002d8
 8001590:	40012000 	.word	0x40012000
 8001594:	0f000001 	.word	0x0f000001

08001598 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_ADC_MspInit+0x7c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d127      	bne.n	800160a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015f2:	2302      	movs	r3, #2
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f6:	2303      	movs	r3, #3
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_ADC_MspInit+0x84>)
 8001606:	f003 f837 	bl	8004678 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40012000 	.word	0x40012000
 8001618:	40023800 	.word	0x40023800
 800161c:	40020400 	.word	0x40020400

08001620 <displayBand>:
int currentBand = 0;                          // First band. For this case, AM is the current band.
char buff[20];
uint32_t ticks;

void displayBand(int band_index)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af04      	add	r7, sp, #16
 8001626:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 8001628:	2304      	movs	r3, #4
 800162a:	3301      	adds	r3, #1
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	d07d      	beq.n	800172e <displayBand+0x10e>
    {
        ST7735_FillRectangleFast(0,0,160,80,ST7735_COLOR565(10, 10, 10));
 8001632:	f640 0341 	movw	r3, #2113	; 0x841
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2350      	movs	r3, #80	; 0x50
 800163a:	22a0      	movs	r2, #160	; 0xa0
 800163c:	2100      	movs	r1, #0
 800163e:	2000      	movs	r0, #0
 8001640:	f000 ffa4 	bl	800258c <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,64,160,16,ST7735_COLOR565(50, 50, 50));
 8001644:	f243 1386 	movw	r3, #12678	; 0x3186
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2310      	movs	r3, #16
 800164c:	22a0      	movs	r2, #160	; 0xa0
 800164e:	2140      	movs	r1, #64	; 0x40
 8001650:	2000      	movs	r0, #0
 8001652:	f000 ff9b 	bl	800258c <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,0,160,26,ST7735_COLOR565(50, 50, 50));
 8001656:	f243 1386 	movw	r3, #12678	; 0x3186
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	231a      	movs	r3, #26
 800165e:	22a0      	movs	r2, #160	; 0xa0
 8001660:	2100      	movs	r1, #0
 8001662:	2000      	movs	r0, #0
 8001664:	f000 ff92 	bl	800258c <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 2, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(50, 50, 50));
 8001668:	4933      	ldr	r1, [pc, #204]	; (8001738 <displayBand+0x118>)
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	6819      	ldr	r1, [r3, #0]
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <displayBand+0x11c>)
 800167a:	f243 1286 	movw	r2, #12678	; 0x3186
 800167e:	9202      	str	r2, [sp, #8]
 8001680:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8001684:	9201      	str	r2, [sp, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	9200      	str	r2, [sp, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	460a      	mov	r2, r1
 800168e:	2102      	movs	r1, #2
 8001690:	2001      	movs	r0, #1
 8001692:	f000 febe 	bl	8002412 <ST7735_WriteString>
        // freq
       	sprintf(buff, "%s - %s", band[band_index].WminFreq, band[band_index].WmaxFreq);
 8001696:	4928      	ldr	r1, [pc, #160]	; (8001738 <displayBand+0x118>)
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	3304      	adds	r3, #4
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	4823      	ldr	r0, [pc, #140]	; (8001738 <displayBand+0x118>)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4403      	add	r3, r0
 80016b6:	3308      	adds	r3, #8
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	460a      	mov	r2, r1
 80016bc:	4920      	ldr	r1, [pc, #128]	; (8001740 <displayBand+0x120>)
 80016be:	4821      	ldr	r0, [pc, #132]	; (8001744 <displayBand+0x124>)
 80016c0:	f010 fb6e 	bl	8011da0 <siprintf>
       	ST7735_WriteString(0, 29, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <displayBand+0x128>)
 80016c6:	f640 0241 	movw	r2, #2113	; 0x841
 80016ca:	9202      	str	r2, [sp, #8]
 80016cc:	f244 52df 	movw	r2, #17887	; 0x45df
 80016d0:	9201      	str	r2, [sp, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <displayBand+0x124>)
 80016da:	211d      	movs	r1, #29
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 fe98 	bl	8002412 <ST7735_WriteString>
       	sprintf(buff, "%s - %s", band[band_index].NminFreq, band[band_index].NmaxFreq);
 80016e2:	4915      	ldr	r1, [pc, #84]	; (8001738 <displayBand+0x118>)
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	330c      	adds	r3, #12
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	4810      	ldr	r0, [pc, #64]	; (8001738 <displayBand+0x118>)
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4403      	add	r3, r0
 8001702:	3310      	adds	r3, #16
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	460a      	mov	r2, r1
 8001708:	490d      	ldr	r1, [pc, #52]	; (8001740 <displayBand+0x120>)
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <displayBand+0x124>)
 800170c:	f010 fb48 	bl	8011da0 <siprintf>
       	ST7735_WriteString(0, 46, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <displayBand+0x128>)
 8001712:	f640 0241 	movw	r2, #2113	; 0x841
 8001716:	9202      	str	r2, [sp, #8]
 8001718:	f244 52df 	movw	r2, #17887	; 0x45df
 800171c:	9201      	str	r2, [sp, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <displayBand+0x124>)
 8001726:	212e      	movs	r1, #46	; 0x2e
 8001728:	2000      	movs	r0, #0
 800172a:	f000 fe72 	bl	8002412 <ST7735_WriteString>
    }

}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000004 	.word	0x20000004
 800173c:	20000084 	.word	0x20000084
 8001740:	08012548 	.word	0x08012548
 8001744:	20000320 	.word	0x20000320
 8001748:	2000007c 	.word	0x2000007c

0800174c <setBand>:
    HAL_GPIO_WritePin(GPIOB, CHIP, GPIO_PIN_SET); // HIGH
	delay_us(300);
}

void setBand(int band_index)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af04      	add	r7, sp, #16
 8001752:	6078      	str	r0, [r7, #4]
	ticks = band[band_index].ticks; //- START_RESISTANCE_KOM;
 8001754:	4912      	ldr	r1, [pc, #72]	; (80017a0 <setBand+0x54>)
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3314      	adds	r3, #20
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <setBand+0x58>)
 8001768:	6013      	str	r3, [r2, #0]
	sprintf(buff, "R:%ld", ticks);
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <setBand+0x58>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	490d      	ldr	r1, [pc, #52]	; (80017a8 <setBand+0x5c>)
 8001772:	480e      	ldr	r0, [pc, #56]	; (80017ac <setBand+0x60>)
 8001774:	f010 fb14 	bl	8011da0 <siprintf>
	ST7735_WriteString(0, 64, buff, Font_11x18, ST7735_COLOR565(165, 214, 2), ST7735_COLOR565(50, 50, 50));
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <setBand+0x64>)
 800177a:	f243 1286 	movw	r2, #12678	; 0x3186
 800177e:	9202      	str	r2, [sp, #8]
 8001780:	f24a 62a0 	movw	r2, #42656	; 0xa6a0
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	9200      	str	r2, [sp, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <setBand+0x60>)
 800178e:	2140      	movs	r1, #64	; 0x40
 8001790:	2000      	movs	r0, #0
 8001792:	f000 fe3e 	bl	8002412 <ST7735_WriteString>
	//setResistanceUP(CS_PIN, ticks, false);
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000004 	.word	0x20000004
 80017a4:	20000334 	.word	0x20000334
 80017a8:	08012550 	.word	0x08012550
 80017ac:	20000320 	.word	0x20000320
 80017b0:	2000007c 	.word	0x2000007c

080017b4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_CRC_Init+0x20>)
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <MX_CRC_Init+0x24>)
 80017bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_CRC_Init+0x20>)
 80017c0:	f002 fa24 	bl	8003c0c <HAL_CRC_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017ca:	f000 fb97 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000338 	.word	0x20000338
 80017d8:	40023000 	.word	0x40023000

080017dc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_CRC_MspInit+0x3c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10d      	bne.n	800180a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_CRC_MspInit+0x40>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_CRC_MspInit+0x40>)
 80017f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_CRC_MspInit+0x40>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023000 	.word	0x40023000
 800181c:	40023800 	.word	0x40023800

08001820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_DMA_Init+0x3c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <MX_DMA_Init+0x3c>)
 8001830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_DMA_Init+0x3c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2105      	movs	r1, #5
 8001846:	202f      	movs	r0, #47	; 0x2f
 8001848:	f002 f99c 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800184c:	202f      	movs	r0, #47	; 0x2f
 800184e:	f002 f9c5 	bl	8003bdc <HAL_NVIC_EnableIRQ>

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <getRunTimeCounterValue+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	200013a8 	.word	0x200013a8

08001888 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	vTaskList(taskListStatus);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <vApplicationIdleHook+0x10>)
 800188e:	f00e fb5f 	bl	800ff50 <vTaskList>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000340 	.word	0x20000340

0800189c <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of EncoderQueue */
	EncoderQueueHandle = osMessageQueueNew(1, sizeof(uint16_t),
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <MX_FREERTOS_Init+0x58>)
 80018a2:	2102      	movs	r1, #2
 80018a4:	2001      	movs	r0, #1
 80018a6:	f00c faac 	bl	800de02 <osMessageQueueNew>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <MX_FREERTOS_Init+0x5c>)
 80018ae:	6013      	str	r3, [r2, #0]
			&EncoderQueue_attributes);

	/* creation of ButtonQueue */
	ButtonQueueHandle = osMessageQueueNew(1, sizeof(uint16_t),
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_FREERTOS_Init+0x60>)
 80018b2:	2102      	movs	r1, #2
 80018b4:	2001      	movs	r0, #1
 80018b6:	f00c faa4 	bl	800de02 <osMessageQueueNew>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a10      	ldr	r2, [pc, #64]	; (8001900 <MX_FREERTOS_Init+0x64>)
 80018be:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80018c0:	4a10      	ldr	r2, [pc, #64]	; (8001904 <MX_FREERTOS_Init+0x68>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4810      	ldr	r0, [pc, #64]	; (8001908 <MX_FREERTOS_Init+0x6c>)
 80018c6:	f00c f9ef 	bl	800dca8 <osThreadNew>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a0f      	ldr	r2, [pc, #60]	; (800190c <MX_FREERTOS_Init+0x70>)
 80018ce:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of displayTask */
	displayTaskHandle = osThreadNew(StartDisplayTask, NULL,
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <MX_FREERTOS_Init+0x74>)
 80018d2:	2100      	movs	r1, #0
 80018d4:	480f      	ldr	r0, [pc, #60]	; (8001914 <MX_FREERTOS_Init+0x78>)
 80018d6:	f00c f9e7 	bl	800dca8 <osThreadNew>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <MX_FREERTOS_Init+0x7c>)
 80018de:	6013      	str	r3, [r2, #0]
			&displayTask_attributes);

	/* creation of encoderTask */
	encoderTaskHandle = osThreadNew(StartEncoderTask, NULL,
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <MX_FREERTOS_Init+0x80>)
 80018e2:	2100      	movs	r1, #0
 80018e4:	480e      	ldr	r0, [pc, #56]	; (8001920 <MX_FREERTOS_Init+0x84>)
 80018e6:	f00c f9df 	bl	800dca8 <osThreadNew>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <MX_FREERTOS_Init+0x88>)
 80018ee:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	08014a34 	.word	0x08014a34
 80018f8:	2000134c 	.word	0x2000134c
 80018fc:	08014a4c 	.word	0x08014a4c
 8001900:	20001350 	.word	0x20001350
 8001904:	080149c8 	.word	0x080149c8
 8001908:	08001929 	.word	0x08001929
 800190c:	20001340 	.word	0x20001340
 8001910:	080149ec 	.word	0x080149ec
 8001914:	0800194d 	.word	0x0800194d
 8001918:	20001344 	.word	0x20001344
 800191c:	08014a10 	.word	0x08014a10
 8001920:	08001a15 	.word	0x08001a15
 8001924:	20001348 	.word	0x20001348

08001928 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8001930:	f00f fb7c 	bl	801102c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		CDC_Transmit_FS(taskListStatus, sizeof(taskListStatus));
 8001934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <StartDefaultTask+0x20>)
 800193a:	f00f fc35 	bl	80111a8 <CDC_Transmit_FS>
		osDelay(5000);
 800193e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001942:	f00c fa43 	bl	800ddcc <osDelay>
		CDC_Transmit_FS(taskListStatus, sizeof(taskListStatus));
 8001946:	e7f5      	b.n	8001934 <StartDefaultTask+0xc>
 8001948:	20000340 	.word	0x20000340

0800194c <StartDisplayTask>:
 * @brief Function implementing the displayTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	osStatus_t taskMessageHandler;
	int32_t counter = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
	int16_t button = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	81fb      	strh	r3, [r7, #14]
	int32_t last_counter = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
	int16_t max_index = 5;
 8001960:	2305      	movs	r3, #5
 8001962:	837b      	strh	r3, [r7, #26]
	ST7735_FillScreenFast(ST7735_BLACK);
 8001964:	2000      	movs	r0, #0
 8001966:	f000 fea6 	bl	80026b6 <ST7735_FillScreenFast>
	displayBand(last_counter);
 800196a:	69f8      	ldr	r0, [r7, #28]
 800196c:	f7ff fe58 	bl	8001620 <displayBand>
	setBand(last_counter);
 8001970:	69f8      	ldr	r0, [r7, #28]
 8001972:	f7ff feeb 	bl	800174c <setBand>
	for (;;) {
		//Encoder Rotate
		taskMessageHandler = osMessageQueueGet(EncoderQueueHandle, &counter, 0,
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <StartDisplayTask+0xc0>)
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	f107 0110 	add.w	r1, r7, #16
 800197e:	2300      	movs	r3, #0
 8001980:	2200      	movs	r2, #0
 8001982:	f00c fb11 	bl	800dfa8 <osMessageQueueGet>
 8001986:	6178      	str	r0, [r7, #20]
				0);
		if (taskMessageHandler == osOK)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d131      	bne.n	80019f2 <StartDisplayTask+0xa6>
		{
			if (counter == 2) {
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d116      	bne.n	80019c2 <StartDisplayTask+0x76>
				if (last_counter != max_index - 1) {
 8001994:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001998:	3b01      	subs	r3, #1
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	429a      	cmp	r2, r3
 800199e:	d005      	beq.n	80019ac <StartDisplayTask+0x60>
					last_counter += 1;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	3301      	adds	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
					counter = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	e003      	b.n	80019b4 <StartDisplayTask+0x68>
				} else {
					last_counter = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
					counter = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
				}
				displayBand(last_counter);
 80019b4:	69f8      	ldr	r0, [r7, #28]
 80019b6:	f7ff fe33 	bl	8001620 <displayBand>
				setBand(last_counter);
 80019ba:	69f8      	ldr	r0, [r7, #28]
 80019bc:	f7ff fec6 	bl	800174c <setBand>
 80019c0:	e017      	b.n	80019f2 <StartDisplayTask+0xa6>
			} else if (counter == 1) {
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d114      	bne.n	80019f2 <StartDisplayTask+0xa6>
				if (last_counter != 0) {
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <StartDisplayTask+0x8e>
					last_counter -= 1;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
					counter = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	e005      	b.n	80019e6 <StartDisplayTask+0x9a>
				} else {
					last_counter = max_index - 1;
 80019da:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019de:	3b01      	subs	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
					counter = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
				}
				displayBand(last_counter);
 80019e6:	69f8      	ldr	r0, [r7, #28]
 80019e8:	f7ff fe1a 	bl	8001620 <displayBand>
				setBand(last_counter);
 80019ec:	69f8      	ldr	r0, [r7, #28]
 80019ee:	f7ff fead 	bl	800174c <setBand>
			} else {

			}
		}
		//Button click
		osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <StartDisplayTask+0xc4>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f107 010e 	add.w	r1, r7, #14
 80019fa:	2300      	movs	r3, #0
 80019fc:	2200      	movs	r2, #0
 80019fe:	f00c fad3 	bl	800dfa8 <osMessageQueueGet>
		if (button) {

		}
		osDelay(1000);
 8001a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a06:	f00c f9e1 	bl	800ddcc <osDelay>
		taskMessageHandler = osMessageQueueGet(EncoderQueueHandle, &counter, 0,
 8001a0a:	e7b4      	b.n	8001976 <StartDisplayTask+0x2a>
 8001a0c:	2000134c 	.word	0x2000134c
 8001a10:	20001350 	.word	0x20001350

08001a14 <StartEncoderTask>:
 * @brief Function implementing the encoderTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	76fb      	strb	r3, [r7, #27]
	uint8_t buttonSend = 1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <StartEncoderTask+0xac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	617b      	str	r3, [r7, #20]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	0fda      	lsrs	r2, r3, #31
 8001a3c:	4413      	add	r3, r2
 8001a3e:	105b      	asrs	r3, r3, #1
 8001a40:	425b      	negs	r3, r3
 8001a42:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001a46:	337f      	adds	r3, #127	; 0x7f
 8001a48:	617b      	str	r3, [r7, #20]
		if (currCounter != prevCounter) {
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d01e      	beq.n	8001a90 <StartEncoderTask+0x7c>
			if (currCounter > prevCounter) {
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	dd0a      	ble.n	8001a70 <StartEncoderTask+0x5c>
				counter = 1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <StartEncoderTask+0xb0>)
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	f107 0110 	add.w	r1, r7, #16
 8001a66:	2300      	movs	r3, #0
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f00c fa3d 	bl	800dee8 <osMessageQueuePut>
 8001a6e:	e00d      	b.n	8001a8c <StartEncoderTask+0x78>
			} else if (currCounter < prevCounter) {
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	da09      	bge.n	8001a8c <StartEncoderTask+0x78>
				counter = 2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <StartEncoderTask+0xb0>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	f107 0110 	add.w	r1, r7, #16
 8001a84:	2300      	movs	r3, #0
 8001a86:	2200      	movs	r2, #0
 8001a88:	f00c fa2e 	bl	800dee8 <osMessageQueuePut>
			} else {

			}
			prevCounter = currCounter;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if (buttonPressed[buttonNumber]) {
 8001a90:	7efb      	ldrb	r3, [r7, #27]
 8001a92:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <StartEncoderTask+0xb4>)
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00b      	beq.n	8001ab4 <StartEncoderTask+0xa0>
			buttonPressed[buttonNumber] = 0;
 8001a9c:	7efb      	ldrb	r3, [r7, #27]
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <StartEncoderTask+0xb4>)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	54d1      	strb	r1, [r2, r3]
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <StartEncoderTask+0xb8>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f107 010f 	add.w	r1, r7, #15
 8001aac:	2300      	movs	r3, #0
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f00c fa1a 	bl	800dee8 <osMessageQueuePut>
		}
		osDelay(500);
 8001ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab8:	f00c f988 	bl	800ddcc <osDelay>
	for (;;) {
 8001abc:	e7b6      	b.n	8001a2c <StartEncoderTask+0x18>
 8001abe:	bf00      	nop
 8001ac0:	200014c4 	.word	0x200014c4
 8001ac4:	2000134c 	.word	0x2000134c
 8001ac8:	2000146c 	.word	0x2000146c
 8001acc:	20001350 	.word	0x20001350

08001ad0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a3a      	ldr	r2, [pc, #232]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a33      	ldr	r2, [pc, #204]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a2c      	ldr	r2, [pc, #176]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <MX_GPIO_Init+0x108>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	211c      	movs	r1, #28
 8001b5a:	4820      	ldr	r0, [pc, #128]	; (8001bdc <MX_GPIO_Init+0x10c>)
 8001b5c:	f003 f826 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_INC_Pin|DP_UD_Pin|DP_CS_Pin, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b66:	481e      	ldr	r0, [pc, #120]	; (8001be0 <MX_GPIO_Init+0x110>)
 8001b68:	f003 f820 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4816      	ldr	r0, [pc, #88]	; (8001bdc <MX_GPIO_Init+0x10c>)
 8001b82:	f002 fd79 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8001b86:	231c      	movs	r3, #28
 8001b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480f      	ldr	r0, [pc, #60]	; (8001bdc <MX_GPIO_Init+0x10c>)
 8001b9e:	f002 fd6b 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DP_INC_Pin|DP_UD_Pin|DP_CS_Pin;
 8001ba2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <MX_GPIO_Init+0x110>)
 8001bbc:	f002 fd5c 	bl	8004678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	2006      	movs	r0, #6
 8001bc6:	f001 ffdd 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bca:	2006      	movs	r0, #6
 8001bcc:	f002 f806 	bl	8003bdc <HAL_NVIC_EnableIRQ>

}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	; 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400

08001be4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001bea:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <MX_I2C1_Init+0x54>)
 8001bec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001bf0:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_I2C1_Init+0x58>)
 8001bf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <MX_I2C1_Init+0x50>)
 8001c22:	f003 f80d 	bl	8004c40 <HAL_I2C_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c2c:	f000 f966 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20001354 	.word	0x20001354
 8001c38:	40005400 	.word	0x40005400
 8001c3c:	000186a0 	.word	0x000186a0

08001c40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_I2C_MspInit+0x84>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d12b      	bne.n	8001cba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_I2C_MspInit+0x88>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a17      	ldr	r2, [pc, #92]	; (8001cc8 <HAL_I2C_MspInit+0x88>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_I2C_MspInit+0x88>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c7e:	23c0      	movs	r3, #192	; 0xc0
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c82:	2312      	movs	r3, #18
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <HAL_I2C_MspInit+0x8c>)
 8001c9a:	f002 fced 	bl	8004678 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_I2C_MspInit+0x88>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_I2C_MspInit+0x88>)
 8001ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_I2C_MspInit+0x88>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40005400 	.word	0x40005400
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <pixel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pixel(void){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
    ARGB_Init();  // Initialization
 8001cd4:	f7fe ff64 	bl	8000ba0 <ARGB_Init>

    ARGB_Clear(); // Clear stirp
 8001cd8:	f7fe ffda 	bl	8000c90 <ARGB_Clear>
    while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001cdc:	bf00      	nop
 8001cde:	f7ff f885 	bl	8000dec <ARGB_Show>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d1fa      	bne.n	8001cde <pixel+0xe>

    ARGB_SetBrightness(50);  // Set global brightness to 40%
 8001ce8:	2032      	movs	r0, #50	; 0x32
 8001cea:	f7fe ffdb 	bl	8000ca4 <ARGB_SetBrightness>

    ARGB_FillRGB(25, 0, 100); // Fill all the strip with Red
 8001cee:	2264      	movs	r2, #100	; 0x64
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2019      	movs	r0, #25
 8001cf4:	f7ff f858 	bl	8000da8 <ARGB_FillRGB>
    while (!ARGB_Show());
 8001cf8:	bf00      	nop
 8001cfa:	f7ff f877 	bl	8000dec <ARGB_Show>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0fa      	beq.n	8001cfa <pixel+0x2a>
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <Display_Init>:

void Display_Init() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af04      	add	r7, sp, #16
    ST7735_Init();
 8001d12:	f000 faed 	bl	80022f0 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f000 fcbc 	bl	8002694 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <Display_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	9202      	str	r2, [sp, #8]
 8001d22:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8001d26:	9201      	str	r2, [sp, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	9200      	str	r2, [sp, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <Display_Init+0x5c>)
 8001d30:	2100      	movs	r1, #0
 8001d32:	200f      	movs	r0, #15
 8001d34:	f000 fb6d 	bl	8002412 <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <Display_Init+0x60>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	9202      	str	r2, [sp, #8]
 8001d3e:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8001d42:	9201      	str	r2, [sp, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	9200      	str	r2, [sp, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <Display_Init+0x64>)
 8001d4c:	2119      	movs	r1, #25
 8001d4e:	2022      	movs	r0, #34	; 0x22
 8001d50:	f000 fb5f 	bl	8002412 <ST7735_WriteString>
    HAL_Delay(2000);
 8001d54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d58:	f001 fa44 	bl	80031e4 <HAL_Delay>
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000084 	.word	0x20000084
 8001d68:	08012598 	.word	0x08012598
 8001d6c:	2000007c 	.word	0x2000007c
 8001d70:	080125a4 	.word	0x080125a4

08001d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d78:	f001 f9f2 	bl	8003160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7c:	f000 f834 	bl	8001de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d80:	f7ff fea6 	bl	8001ad0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d84:	f7ff ff2e 	bl	8001be4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d88:	f000 f94e 	bl	8002028 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001d8c:	f000 fe7c 	bl	8002a88 <MX_TIM3_Init>
  MX_CRC_Init();
 8001d90:	f7ff fd10 	bl	80017b4 <MX_CRC_Init>
  MX_TIM2_Init();
 8001d94:	f000 fe20 	bl	80029d8 <MX_TIM2_Init>
  MX_DMA_Init();
 8001d98:	f7ff fd42 	bl	8001820 <MX_DMA_Init>
  MX_RTC_Init();
 8001d9c:	f000 f8be 	bl	8001f1c <MX_RTC_Init>
  MX_TIM4_Init();
 8001da0:	f000 fec6 	bl	8002b30 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001da4:	f7ff fba6 	bl	80014f4 <MX_ADC1_Init>
  MX_TIM11_Init();
 8001da8:	f000 ff84 	bl	8002cb4 <MX_TIM11_Init>
  MX_TIM5_Init();
 8001dac:	f000 ff36 	bl	8002c1c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001db0:	213c      	movs	r1, #60	; 0x3c
 8001db2:	480a      	ldr	r0, [pc, #40]	; (8001ddc <main+0x68>)
 8001db4:	f006 ff6e 	bl	8008c94 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim5);
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <main+0x6c>)
 8001dba:	f006 fbef 	bl	800859c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 8001dbe:	4809      	ldr	r0, [pc, #36]	; (8001de4 <main+0x70>)
 8001dc0:	f006 fbec 	bl	800859c <HAL_TIM_Base_Start>
  pixel();
 8001dc4:	f7ff ff84 	bl	8001cd0 <pixel>
  Display_Init();
 8001dc8:	f7ff ffa0 	bl	8001d0c <Display_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001dcc:	f00b ff22 	bl	800dc14 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001dd0:	f7ff fd64 	bl	800189c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001dd4:	f00b ff42 	bl	800dc5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <main+0x64>
 8001dda:	bf00      	nop
 8001ddc:	200014c4 	.word	0x200014c4
 8001de0:	20001554 	.word	0x20001554
 8001de4:	2000159c 	.word	0x2000159c

08001de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b094      	sub	sp, #80	; 0x50
 8001dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	2230      	movs	r2, #48	; 0x30
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00f fe70 	bl	8011adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <SystemClock_Config+0xcc>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	4a27      	ldr	r2, [pc, #156]	; (8001eb4 <SystemClock_Config+0xcc>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <SystemClock_Config+0xcc>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <SystemClock_Config+0xd0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <SystemClock_Config+0xd0>)
 8001e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <SystemClock_Config+0xd0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001e44:	2305      	movs	r3, #5
 8001e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e52:	2302      	movs	r3, #2
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e5c:	2319      	movs	r3, #25
 8001e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001e60:	23c0      	movs	r3, #192	; 0xc0
 8001e62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6c:	f107 0320 	add.w	r3, r7, #32
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 fb39 	bl	80064e8 <HAL_RCC_OscConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e7c:	f000 f83e 	bl	8001efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e80:	230f      	movs	r3, #15
 8001e82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e84:	2302      	movs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 fe4b 	bl	8006b38 <HAL_RCC_ClockConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ea8:	f000 f828 	bl	8001efc <Error_Handler>
  }
}
 8001eac:	bf00      	nop
 8001eae:	3750      	adds	r7, #80	; 0x50
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40007000 	.word	0x40007000

08001ebc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM5) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d104      	bne.n	8001ed8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  ulHighFrequencyTimerTicks++;
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ed6:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8001ee2:	f001 f95f 	bl	80031a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	200013a8 	.word	0x200013a8
 8001ef8:	40010000 	.word	0x40010000

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
}
 8001f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <Error_Handler+0x8>

08001f06 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f30:	2300      	movs	r3, #0
 8001f32:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <MX_RTC_Init+0xac>)
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <MX_RTC_Init+0xb0>)
 8001f38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <MX_RTC_Init+0xac>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <MX_RTC_Init+0xac>)
 8001f42:	227f      	movs	r2, #127	; 0x7f
 8001f44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <MX_RTC_Init+0xac>)
 8001f48:	22ff      	movs	r2, #255	; 0xff
 8001f4a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <MX_RTC_Init+0xac>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <MX_RTC_Init+0xac>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <MX_RTC_Init+0xac>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f5e:	481a      	ldr	r0, [pc, #104]	; (8001fc8 <MX_RTC_Init+0xac>)
 8001f60:	f005 faba 	bl	80074d8 <HAL_RTC_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001f6a:	f7ff ffc7 	bl	8001efc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	4619      	mov	r1, r3
 8001f88:	480f      	ldr	r0, [pc, #60]	; (8001fc8 <MX_RTC_Init+0xac>)
 8001f8a:	f005 fb7d 	bl	8007688 <HAL_RTC_SetTime>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f94:	f7ff ffb2 	bl	8001efc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001f98:	2305      	movs	r3, #5
 8001f9a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001f9c:	2305      	movs	r3, #5
 8001f9e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8001fa4:	2316      	movs	r3, #22
 8001fa6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001fa8:	463b      	mov	r3, r7
 8001faa:	2200      	movs	r2, #0
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <MX_RTC_Init+0xac>)
 8001fb0:	f005 fcb2 	bl	8007918 <HAL_RTC_SetDate>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001fba:	f7ff ff9f 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200013ac 	.word	0x200013ac
 8001fcc:	40002800 	.word	0x40002800

08001fd0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd8:	f107 0308 	add.w	r3, r7, #8
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_RTC_MspInit+0x50>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d111      	bne.n	8002018 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	4618      	mov	r0, r3
 8002004:	f005 f852 	bl	80070ac <HAL_RCCEx_PeriphCLKConfig>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800200e:	f7ff ff75 	bl	8001efc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <HAL_RTC_MspInit+0x54>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002018:	bf00      	nop
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40002800 	.word	0x40002800
 8002024:	42470e3c 	.word	0x42470e3c

08002028 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <MX_SPI1_Init+0x64>)
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <MX_SPI1_Init+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <MX_SPI1_Init+0x64>)
 8002034:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <MX_SPI1_Init+0x64>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <MX_SPI1_Init+0x64>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_SPI1_Init+0x64>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_SPI1_Init+0x64>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_SPI1_Init+0x64>)
 8002054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002058:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_SPI1_Init+0x64>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <MX_SPI1_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_SPI1_Init+0x64>)
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <MX_SPI1_Init+0x64>)
 800206e:	2200      	movs	r2, #0
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_SPI1_Init+0x64>)
 8002074:	220a      	movs	r2, #10
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <MX_SPI1_Init+0x64>)
 800207a:	f005 fe17 	bl	8007cac <HAL_SPI_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002084:	f7ff ff3a 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200013cc 	.word	0x200013cc
 8002090:	40013000 	.word	0x40013000

08002094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_SPI_MspInit+0x84>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d12b      	bne.n	800210e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80020ee:	23a0      	movs	r3, #160	; 0xa0
 80020f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020fe:	2305      	movs	r3, #5
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <HAL_SPI_MspInit+0x8c>)
 800210a:	f002 fab5 	bl	8004678 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800210e:	bf00      	nop
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40013000 	.word	0x40013000
 800211c:	40023800 	.word	0x40023800
 8002120:	40020000 	.word	0x40020000

08002124 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	2110      	movs	r1, #16
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <ST7735_Select+0x14>)
 800212e:	f002 fd3d 	bl	8004bac <HAL_GPIO_WritePin>
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40020000 	.word	0x40020000

0800213c <ST7735_Unselect>:

void ST7735_Unselect() {
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	2110      	movs	r1, #16
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <ST7735_Unselect+0x14>)
 8002146:	f002 fd31 	bl	8004bac <HAL_GPIO_WritePin>
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40020000 	.word	0x40020000

08002154 <ST7735_Reset>:

static void ST7735_Reset() {
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	2108      	movs	r1, #8
 800215c:	4806      	ldr	r0, [pc, #24]	; (8002178 <ST7735_Reset+0x24>)
 800215e:	f002 fd25 	bl	8004bac <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002162:	2005      	movs	r0, #5
 8002164:	f001 f83e 	bl	80031e4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	2108      	movs	r1, #8
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <ST7735_Reset+0x24>)
 800216e:	f002 fd1d 	bl	8004bac <HAL_GPIO_WritePin>
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40020000 	.word	0x40020000

0800217c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2104      	movs	r1, #4
 800218a:	4807      	ldr	r0, [pc, #28]	; (80021a8 <ST7735_WriteCommand+0x2c>)
 800218c:	f002 fd0e 	bl	8004bac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002190:	1df9      	adds	r1, r7, #7
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	2201      	movs	r2, #1
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <ST7735_WriteCommand+0x30>)
 800219a:	f005 ff23 	bl	8007fe4 <HAL_SPI_Transmit>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40020000 	.word	0x40020000
 80021ac:	200013cc 	.word	0x200013cc

080021b0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80021ba:	2201      	movs	r2, #1
 80021bc:	2104      	movs	r1, #4
 80021be:	4807      	ldr	r0, [pc, #28]	; (80021dc <ST7735_WriteData+0x2c>)
 80021c0:	f002 fcf4 	bl	8004bac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4804      	ldr	r0, [pc, #16]	; (80021e0 <ST7735_WriteData+0x30>)
 80021d0:	f005 ff08 	bl	8007fe4 <HAL_SPI_Transmit>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40020000 	.word	0x40020000
 80021e0:	200013cc 	.word	0x200013cc

080021e4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80021f6:	e034      	b.n	8002262 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ffb9 	bl	800217c <ST7735_WriteCommand>

        numArgs = *addr++;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002214:	7abb      	ldrb	r3, [r7, #10]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800221e:	7abb      	ldrb	r3, [r7, #10]
 8002220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002224:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002226:	7abb      	ldrb	r3, [r7, #10]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800222c:	7abb      	ldrb	r3, [r7, #10]
 800222e:	4619      	mov	r1, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ffbd 	bl	80021b0 <ST7735_WriteData>
            addr += numArgs;
 8002236:	7abb      	ldrb	r3, [r7, #10]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800223e:	89bb      	ldrh	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800224e:	89bb      	ldrh	r3, [r7, #12]
 8002250:	2bff      	cmp	r3, #255	; 0xff
 8002252:	d102      	bne.n	800225a <ST7735_ExecuteCommandList+0x76>
 8002254:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002258:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800225a:	89bb      	ldrh	r3, [r7, #12]
 800225c:	4618      	mov	r0, r3
 800225e:	f000 ffc1 	bl	80031e4 <HAL_Delay>
    while(numCommands--) {
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	1e5a      	subs	r2, r3, #1
 8002266:	73fa      	strb	r2, [r7, #15]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1c5      	bne.n	80021f8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002276:	b590      	push	{r4, r7, lr}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	4604      	mov	r4, r0
 800227e:	4608      	mov	r0, r1
 8002280:	4611      	mov	r1, r2
 8002282:	461a      	mov	r2, r3
 8002284:	4623      	mov	r3, r4
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	4603      	mov	r3, r0
 800228a:	71bb      	strb	r3, [r7, #6]
 800228c:	460b      	mov	r3, r1
 800228e:	717b      	strb	r3, [r7, #5]
 8002290:	4613      	mov	r3, r2
 8002292:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002294:	202a      	movs	r0, #42	; 0x2a
 8002296:	f7ff ff71 	bl	800217c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800229a:	2300      	movs	r3, #0
 800229c:	733b      	strb	r3, [r7, #12]
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	737b      	strb	r3, [r7, #13]
 80022a6:	2300      	movs	r3, #0
 80022a8:	73bb      	strb	r3, [r7, #14]
 80022aa:	797b      	ldrb	r3, [r7, #5]
 80022ac:	3301      	adds	r3, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	2104      	movs	r1, #4
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff79 	bl	80021b0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80022be:	202b      	movs	r0, #43	; 0x2b
 80022c0:	f7ff ff5c 	bl	800217c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80022c4:	79bb      	ldrb	r3, [r7, #6]
 80022c6:	331a      	adds	r3, #26
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80022cc:	793b      	ldrb	r3, [r7, #4]
 80022ce:	331a      	adds	r3, #26
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	2104      	movs	r1, #4
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff68 	bl	80021b0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80022e0:	202c      	movs	r0, #44	; 0x2c
 80022e2:	f7ff ff4b 	bl	800217c <ST7735_WriteCommand>
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
	...

080022f0 <ST7735_Init>:

void ST7735_Init() {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
    ST7735_Select();
 80022f4:	f7ff ff16 	bl	8002124 <ST7735_Select>
    ST7735_Reset();
 80022f8:	f7ff ff2c 	bl	8002154 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80022fc:	4806      	ldr	r0, [pc, #24]	; (8002318 <ST7735_Init+0x28>)
 80022fe:	f7ff ff71 	bl	80021e4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <ST7735_Init+0x2c>)
 8002304:	f7ff ff6e 	bl	80021e4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <ST7735_Init+0x30>)
 800230a:	f7ff ff6b 	bl	80021e4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800230e:	f7ff ff15 	bl	800213c <ST7735_Unselect>
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	08014a64 	.word	0x08014a64
 800231c:	08014aa0 	.word	0x08014aa0
 8002320:	08014ab0 	.word	0x08014ab0

08002324 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002324:	b082      	sub	sp, #8
 8002326:	b590      	push	{r4, r7, lr}
 8002328:	b089      	sub	sp, #36	; 0x24
 800232a:	af00      	add	r7, sp, #0
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
 8002332:	460b      	mov	r3, r1
 8002334:	80bb      	strh	r3, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	b2d8      	uxtb	r0, r3
 800233e:	88bb      	ldrh	r3, [r7, #4]
 8002340:	b2d9      	uxtb	r1, r3
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800234a:	4413      	add	r3, r2
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b2dc      	uxtb	r4, r3
 8002352:	88bb      	ldrh	r3, [r7, #4]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800235a:	4413      	add	r3, r2
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4622      	mov	r2, r4
 8002364:	f7ff ff87 	bl	8002276 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	e043      	b.n	80023f6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800236e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	3b20      	subs	r3, #32
 8002374:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4619      	mov	r1, r3
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	440b      	add	r3, r1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	e029      	b.n	80023e4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80023a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	743b      	strb	r3, [r7, #16]
 80023aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	2102      	movs	r1, #2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fefa 	bl	80021b0 <ST7735_WriteData>
 80023bc:	e00f      	b.n	80023de <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80023be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	733b      	strb	r3, [r7, #12]
 80023ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	2102      	movs	r1, #2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fee9 	bl	80021b0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023e8:	461a      	mov	r2, r3
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d3cf      	bcc.n	8002390 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	3301      	adds	r3, #1
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023fa:	461a      	mov	r2, r3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	4293      	cmp	r3, r2
 8002400:	d3b5      	bcc.n	800236e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	3724      	adds	r7, #36	; 0x24
 8002408:	46bd      	mov	sp, r7
 800240a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800240e:	b002      	add	sp, #8
 8002410:	4770      	bx	lr

08002412 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002412:	b082      	sub	sp, #8
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af04      	add	r7, sp, #16
 800241a:	603a      	str	r2, [r7, #0]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	4603      	mov	r3, r0
 8002420:	80fb      	strh	r3, [r7, #6]
 8002422:	460b      	mov	r3, r1
 8002424:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002426:	f7ff fe7d 	bl	8002124 <ST7735_Select>

    while(*str) {
 800242a:	e02d      	b.n	8002488 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	7d3a      	ldrb	r2, [r7, #20]
 8002430:	4413      	add	r3, r2
 8002432:	2b9f      	cmp	r3, #159	; 0x9f
 8002434:	dd13      	ble.n	800245e <ST7735_WriteString+0x4c>
            x = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800243a:	7d7b      	ldrb	r3, [r7, #21]
 800243c:	b29a      	uxth	r2, r3
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002444:	88bb      	ldrh	r3, [r7, #4]
 8002446:	7d7a      	ldrb	r2, [r7, #21]
 8002448:	4413      	add	r3, r2
 800244a:	2b4f      	cmp	r3, #79	; 0x4f
 800244c:	dc21      	bgt.n	8002492 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b20      	cmp	r3, #32
 8002454:	d103      	bne.n	800245e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	603b      	str	r3, [r7, #0]
                continue;
 800245c:	e014      	b.n	8002488 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	88b9      	ldrh	r1, [r7, #4]
 8002464:	88f8      	ldrh	r0, [r7, #6]
 8002466:	8c3b      	ldrh	r3, [r7, #32]
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	8bbb      	ldrh	r3, [r7, #28]
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f7ff ff56 	bl	8002324 <ST7735_WriteChar>
        x += font.width;
 8002478:	7d3b      	ldrb	r3, [r7, #20]
 800247a:	b29a      	uxth	r2, r3
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	4413      	add	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
        str++;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1cd      	bne.n	800242c <ST7735_WriteString+0x1a>
 8002490:	e000      	b.n	8002494 <ST7735_WriteString+0x82>
                break;
 8002492:	bf00      	nop
    }

    ST7735_Unselect();
 8002494:	f7ff fe52 	bl	800213c <ST7735_Unselect>
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024a2:	b002      	add	sp, #8
 80024a4:	4770      	bx	lr
	...

080024a8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4604      	mov	r4, r0
 80024b0:	4608      	mov	r0, r1
 80024b2:	4611      	mov	r1, r2
 80024b4:	461a      	mov	r2, r3
 80024b6:	4623      	mov	r3, r4
 80024b8:	80fb      	strh	r3, [r7, #6]
 80024ba:	4603      	mov	r3, r0
 80024bc:	80bb      	strh	r3, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	807b      	strh	r3, [r7, #2]
 80024c2:	4613      	mov	r3, r2
 80024c4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	2b9f      	cmp	r3, #159	; 0x9f
 80024ca:	d857      	bhi.n	800257c <ST7735_FillRectangle+0xd4>
 80024cc:	88bb      	ldrh	r3, [r7, #4]
 80024ce:	2b4f      	cmp	r3, #79	; 0x4f
 80024d0:	d854      	bhi.n	800257c <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80024d2:	88fa      	ldrh	r2, [r7, #6]
 80024d4:	887b      	ldrh	r3, [r7, #2]
 80024d6:	4413      	add	r3, r2
 80024d8:	2ba0      	cmp	r3, #160	; 0xa0
 80024da:	dd03      	ble.n	80024e4 <ST7735_FillRectangle+0x3c>
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80024e2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80024e4:	88ba      	ldrh	r2, [r7, #4]
 80024e6:	883b      	ldrh	r3, [r7, #0]
 80024e8:	4413      	add	r3, r2
 80024ea:	2b50      	cmp	r3, #80	; 0x50
 80024ec:	dd03      	ble.n	80024f6 <ST7735_FillRectangle+0x4e>
 80024ee:	88bb      	ldrh	r3, [r7, #4]
 80024f0:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80024f4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80024f6:	f7ff fe15 	bl	8002124 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	b2d8      	uxtb	r0, r3
 80024fe:	88bb      	ldrh	r3, [r7, #4]
 8002500:	b2d9      	uxtb	r1, r3
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	4413      	add	r3, r2
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b2dc      	uxtb	r4, r3
 8002512:	88bb      	ldrh	r3, [r7, #4]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	883b      	ldrh	r3, [r7, #0]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4413      	add	r3, r2
 800251c:	b2db      	uxtb	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	4622      	mov	r2, r4
 8002524:	f7ff fea7 	bl	8002276 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002528:	8c3b      	ldrh	r3, [r7, #32]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	b29b      	uxth	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	733b      	strb	r3, [r7, #12]
 8002532:	8c3b      	ldrh	r3, [r7, #32]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002538:	2201      	movs	r2, #1
 800253a:	2104      	movs	r1, #4
 800253c:	4811      	ldr	r0, [pc, #68]	; (8002584 <ST7735_FillRectangle+0xdc>)
 800253e:	f002 fb35 	bl	8004bac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002542:	883b      	ldrh	r3, [r7, #0]
 8002544:	80bb      	strh	r3, [r7, #4]
 8002546:	e013      	b.n	8002570 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	80fb      	strh	r3, [r7, #6]
 800254c:	e00a      	b.n	8002564 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800254e:	f107 010c 	add.w	r1, r7, #12
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	2202      	movs	r2, #2
 8002558:	480b      	ldr	r0, [pc, #44]	; (8002588 <ST7735_FillRectangle+0xe0>)
 800255a:	f005 fd43 	bl	8007fe4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	3b01      	subs	r3, #1
 8002562:	80fb      	strh	r3, [r7, #6]
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f1      	bne.n	800254e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800256a:	88bb      	ldrh	r3, [r7, #4]
 800256c:	3b01      	subs	r3, #1
 800256e:	80bb      	strh	r3, [r7, #4]
 8002570:	88bb      	ldrh	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e8      	bne.n	8002548 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8002576:	f7ff fde1 	bl	800213c <ST7735_Unselect>
 800257a:	e000      	b.n	800257e <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800257c:	bf00      	nop
}
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	40020000 	.word	0x40020000
 8002588:	200013cc 	.word	0x200013cc

0800258c <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	4604      	mov	r4, r0
 8002594:	4608      	mov	r0, r1
 8002596:	4611      	mov	r1, r2
 8002598:	461a      	mov	r2, r3
 800259a:	4623      	mov	r3, r4
 800259c:	80fb      	strh	r3, [r7, #6]
 800259e:	4603      	mov	r3, r0
 80025a0:	80bb      	strh	r3, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	807b      	strh	r3, [r7, #2]
 80025a6:	4613      	mov	r3, r2
 80025a8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	2b9f      	cmp	r3, #159	; 0x9f
 80025ae:	d869      	bhi.n	8002684 <ST7735_FillRectangleFast+0xf8>
 80025b0:	88bb      	ldrh	r3, [r7, #4]
 80025b2:	2b4f      	cmp	r3, #79	; 0x4f
 80025b4:	d866      	bhi.n	8002684 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80025b6:	88fa      	ldrh	r2, [r7, #6]
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	4413      	add	r3, r2
 80025bc:	2ba0      	cmp	r3, #160	; 0xa0
 80025be:	dd03      	ble.n	80025c8 <ST7735_FillRectangleFast+0x3c>
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80025c6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80025c8:	88ba      	ldrh	r2, [r7, #4]
 80025ca:	883b      	ldrh	r3, [r7, #0]
 80025cc:	4413      	add	r3, r2
 80025ce:	2b50      	cmp	r3, #80	; 0x50
 80025d0:	dd03      	ble.n	80025da <ST7735_FillRectangleFast+0x4e>
 80025d2:	88bb      	ldrh	r3, [r7, #4]
 80025d4:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80025d8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80025da:	f7ff fda3 	bl	8002124 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	b2d8      	uxtb	r0, r3
 80025e2:	88bb      	ldrh	r3, [r7, #4]
 80025e4:	b2d9      	uxtb	r1, r3
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b2dc      	uxtb	r4, r3
 80025f6:	88bb      	ldrh	r3, [r7, #4]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	883b      	ldrh	r3, [r7, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4413      	add	r3, r2
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4622      	mov	r2, r4
 8002608:	f7ff fe35 	bl	8002276 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 800260c:	8c3b      	ldrh	r3, [r7, #32]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	b29b      	uxth	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	723b      	strb	r3, [r7, #8]
 8002616:	8c3b      	ldrh	r3, [r7, #32]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4618      	mov	r0, r3
 8002622:	f00f fa3d 	bl	8011aa0 <malloc>
 8002626:	4603      	mov	r3, r0
 8002628:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800262a:	2300      	movs	r3, #0
 800262c:	80fb      	strh	r3, [r7, #6]
 800262e:	e008      	b.n	8002642 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	893a      	ldrh	r2, [r7, #8]
 800263a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	3301      	adds	r3, #1
 8002640:	80fb      	strh	r3, [r7, #6]
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	887b      	ldrh	r3, [r7, #2]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3f2      	bcc.n	8002630 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800264a:	2201      	movs	r2, #1
 800264c:	2104      	movs	r1, #4
 800264e:	480f      	ldr	r0, [pc, #60]	; (800268c <ST7735_FillRectangleFast+0x100>)
 8002650:	f002 faac 	bl	8004bac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8002654:	883b      	ldrh	r3, [r7, #0]
 8002656:	80bb      	strh	r3, [r7, #4]
 8002658:	e00b      	b.n	8002672 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	68f9      	ldr	r1, [r7, #12]
 8002666:	480a      	ldr	r0, [pc, #40]	; (8002690 <ST7735_FillRectangleFast+0x104>)
 8002668:	f005 fcbc 	bl	8007fe4 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 800266c:	88bb      	ldrh	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	80bb      	strh	r3, [r7, #4]
 8002672:	88bb      	ldrh	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <ST7735_FillRectangleFast+0xce>

    free(line);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f00f fa19 	bl	8011ab0 <free>
    ST7735_Unselect();
 800267e:	f7ff fd5d 	bl	800213c <ST7735_Unselect>
 8002682:	e000      	b.n	8002686 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002684:	bf00      	nop
}
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bd90      	pop	{r4, r7, pc}
 800268c:	40020000 	.word	0x40020000
 8002690:	200013cc 	.word	0x200013cc

08002694 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af02      	add	r7, sp, #8
 800269a:	4603      	mov	r3, r0
 800269c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2350      	movs	r3, #80	; 0x50
 80026a4:	22a0      	movs	r2, #160	; 0xa0
 80026a6:	2100      	movs	r1, #0
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7ff fefd 	bl	80024a8 <ST7735_FillRectangle>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af02      	add	r7, sp, #8
 80026bc:	4603      	mov	r3, r0
 80026be:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2350      	movs	r3, #80	; 0x50
 80026c6:	22a0      	movs	r2, #160	; 0xa0
 80026c8:	2100      	movs	r1, #0
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7ff ff5e 	bl	800258c <ST7735_FillRectangleFast>
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_MspInit+0x74>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a19      	ldr	r2, [pc, #100]	; (800274c <HAL_MspInit+0x74>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_MspInit+0x74>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_MspInit+0x74>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <HAL_MspInit+0x74>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_MspInit+0x74>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	210f      	movs	r1, #15
 800271a:	f06f 0001 	mvn.w	r0, #1
 800271e:	f001 fa31 	bl	8003b84 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2105      	movs	r1, #5
 8002726:	2005      	movs	r0, #5
 8002728:	f001 fa2c 	bl	8003b84 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800272c:	2005      	movs	r0, #5
 800272e:	f001 fa55 	bl	8003bdc <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2105      	movs	r1, #5
 8002736:	2005      	movs	r0, #5
 8002738:	f001 fa24 	bl	8003b84 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800273c:	2005      	movs	r0, #5
 800273e:	f001 fa4d 	bl	8003bdc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800

08002750 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002760:	2200      	movs	r2, #0
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	2019      	movs	r0, #25
 8002766:	f001 fa0d 	bl	8003b84 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800276a:	2019      	movs	r0, #25
 800276c:	f001 fa36 	bl	8003bdc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <HAL_InitTick+0xa0>)
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <HAL_InitTick+0xa0>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6453      	str	r3, [r2, #68]	; 0x44
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_InitTick+0xa0>)
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800278c:	f107 0210 	add.w	r2, r7, #16
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f004 fc56 	bl	8007048 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800279c:	f004 fc40 	bl	8007020 <HAL_RCC_GetPCLK2Freq>
 80027a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <HAL_InitTick+0xa4>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0c9b      	lsrs	r3, r3, #18
 80027ac:	3b01      	subs	r3, #1
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_InitTick+0xa8>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_InitTick+0xac>)
 80027b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_InitTick+0xa8>)
 80027b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <HAL_InitTick+0xa8>)
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_InitTick+0xa8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_InitTick+0xa8>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80027d0:	4809      	ldr	r0, [pc, #36]	; (80027f8 <HAL_InitTick+0xa8>)
 80027d2:	f005 fe1d 	bl	8008410 <HAL_TIM_Base_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d104      	bne.n	80027e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80027dc:	4806      	ldr	r0, [pc, #24]	; (80027f8 <HAL_InitTick+0xa8>)
 80027de:	f005 ff67 	bl	80086b0 <HAL_TIM_Base_Start_IT>
 80027e2:	4603      	mov	r3, r0
 80027e4:	e000      	b.n	80027e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3730      	adds	r7, #48	; 0x30
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	431bde83 	.word	0x431bde83
 80027f8:	20001424 	.word	0x20001424
 80027fc:	40010000 	.word	0x40010000

08002800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <NMI_Handler+0x4>

08002806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280a:	e7fe      	b.n	800280a <HardFault_Handler+0x4>

0800280c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <MemManage_Handler+0x4>

08002812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002816:	e7fe      	b.n	8002816 <BusFault_Handler+0x4>

08002818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800281c:	e7fe      	b.n	800281c <UsageFault_Handler+0x4>

0800281e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800283e:	2001      	movs	r0, #1
 8002840:	f002 f9e6 	bl	8004c10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}

08002848 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800284e:	f006 fadf 	bl	8008e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20001424 	.word	0x20001424

0800285c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <TIM2_IRQHandler+0x10>)
 8002862:	f006 fad5 	bl	8008e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000147c 	.word	0x2000147c

08002870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002874:	4808      	ldr	r0, [pc, #32]	; (8002898 <TIM3_IRQHandler+0x28>)
 8002876:	f006 facb 	bl	8008e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <TIM3_IRQHandler+0x2c>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <TIM3_IRQHandler+0x2c>)
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	4a04      	ldr	r2, [pc, #16]	; (800289c <TIM3_IRQHandler+0x2c>)
 800288c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002890:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200014c4 	.word	0x200014c4
 800289c:	40000400 	.word	0x40000400

080028a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <TIM4_IRQHandler+0x10>)
 80028a6:	f006 fab3 	bl	8008e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000150c 	.word	0x2000150c

080028b4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <DMA1_Stream7_IRQHandler+0x10>)
 80028ba:	f001 fc73 	bl	80041a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200015e4 	.word	0x200015e4

080028c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <TIM5_IRQHandler+0x10>)
 80028ce:	f006 fa9f 	bl	8008e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20001554 	.word	0x20001554

080028dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <OTG_FS_IRQHandler+0x10>)
 80028e2:	f002 fcd4 	bl	800528e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2001c954 	.word	0x2001c954

080028f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 80028fa:	23ff      	movs	r3, #255	; 0xff
 80028fc:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db11      	blt.n	8002934 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8002910:	f000 fc5c 	bl	80031cc <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_GPIO_EXTI_Callback+0x50>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b63      	cmp	r3, #99	; 0x63
 8002920:	d90a      	bls.n	8002938 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 8002922:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_GPIO_EXTI_Callback+0x50>)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8002928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292c:	4a05      	ldr	r2, [pc, #20]	; (8002944 <HAL_GPIO_EXTI_Callback+0x54>)
 800292e:	2101      	movs	r1, #1
 8002930:	54d1      	strb	r1, [r2, r3]
 8002932:	e002      	b.n	800293a <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 8002938:	bf00      	nop
}
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20001474 	.word	0x20001474
 8002944:	2000146c 	.word	0x2000146c

08002948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002950:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <_sbrk+0x5c>)
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <_sbrk+0x60>)
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <_sbrk+0x64>)
 8002966:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <_sbrk+0x68>)
 8002968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <_sbrk+0x64>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	429a      	cmp	r2, r3
 8002976:	d207      	bcs.n	8002988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002978:	f00f f868 	bl	8011a4c <__errno>
 800297c:	4603      	mov	r3, r0
 800297e:	220c      	movs	r2, #12
 8002980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	e009      	b.n	800299c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <_sbrk+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	4a05      	ldr	r2, [pc, #20]	; (80029ac <_sbrk+0x64>)
 8002998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20020000 	.word	0x20020000
 80029a8:	00000800 	.word	0x00000800
 80029ac:	20001478 	.word	0x20001478
 80029b0:	2001d090 	.word	0x2001d090

080029b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <SystemInit+0x20>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <SystemInit+0x20>)
 80029c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029de:	f107 0320 	add.w	r3, r7, #32
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	615a      	str	r2, [r3, #20]
 80029f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <MX_TIM2_Init+0xac>)
 80029fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <MX_TIM2_Init+0xac>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <MX_TIM2_Init+0xac>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <MX_TIM2_Init+0xac>)
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295
 8002a14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <MX_TIM2_Init+0xac>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_TIM2_Init+0xac>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a22:	4818      	ldr	r0, [pc, #96]	; (8002a84 <MX_TIM2_Init+0xac>)
 8002a24:	f005 fed6 	bl	80087d4 <HAL_TIM_PWM_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002a2e:	f7ff fa65 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a3a:	f107 0320 	add.w	r3, r7, #32
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4810      	ldr	r0, [pc, #64]	; (8002a84 <MX_TIM2_Init+0xac>)
 8002a42:	f007 fbbb 	bl	800a1bc <HAL_TIMEx_MasterConfigSynchronization>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002a4c:	f7ff fa56 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a50:	2360      	movs	r3, #96	; 0x60
 8002a52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2204      	movs	r2, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4807      	ldr	r0, [pc, #28]	; (8002a84 <MX_TIM2_Init+0xac>)
 8002a68:	f006 fada 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002a72:	f7ff fa43 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a76:	4803      	ldr	r0, [pc, #12]	; (8002a84 <MX_TIM2_Init+0xac>)
 8002a78:	f000 fa66 	bl	8002f48 <HAL_TIM_MspPostInit>

}
 8002a7c:	bf00      	nop
 8002a7e:	3728      	adds	r7, #40	; 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2000147c 	.word	0x2000147c

08002a88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	2224      	movs	r2, #36	; 0x24
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f00f f820 	bl	8011adc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aa4:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <MX_TIM3_Init+0xa0>)
 8002aa6:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <MX_TIM3_Init+0xa4>)
 8002aa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <MX_TIM3_Init+0xa0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <MX_TIM3_Init+0xa0>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <MX_TIM3_Init+0xa0>)
 8002ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002abc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <MX_TIM3_Init+0xa0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <MX_TIM3_Init+0xa0>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8002ada:	2306      	movs	r3, #6
 8002adc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8002aea:	2306      	movs	r3, #6
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	4619      	mov	r1, r3
 8002af4:	480c      	ldr	r0, [pc, #48]	; (8002b28 <MX_TIM3_Init+0xa0>)
 8002af6:	f005 ff33 	bl	8008960 <HAL_TIM_Encoder_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002b00:	f7ff f9fc 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b04:	2300      	movs	r3, #0
 8002b06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_TIM3_Init+0xa0>)
 8002b12:	f007 fb53 	bl	800a1bc <HAL_TIMEx_MasterConfigSynchronization>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002b1c:	f7ff f9ee 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b20:	bf00      	nop
 8002b22:	3730      	adds	r7, #48	; 0x30
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200014c4 	.word	0x200014c4
 8002b2c:	40000400 	.word	0x40000400

08002b30 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08e      	sub	sp, #56	; 0x38
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b44:	f107 0320 	add.w	r3, r7, #32
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
 8002b5c:	615a      	str	r2, [r3, #20]
 8002b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b60:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002b62:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <MX_TIM4_Init+0xe8>)
 8002b64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 8002b72:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002b74:	223c      	movs	r2, #60	; 0x3c
 8002b76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b78:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7e:	4b25      	ldr	r3, [pc, #148]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b84:	4823      	ldr	r0, [pc, #140]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002b86:	f005 fc43 	bl	8008410 <HAL_TIM_Base_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002b90:	f7ff f9b4 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	481c      	ldr	r0, [pc, #112]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002ba2:	f006 fbe3 	bl	800936c <HAL_TIM_ConfigClockSource>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002bac:	f7ff f9a6 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002bb0:	4818      	ldr	r0, [pc, #96]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002bb2:	f005 fe0f 	bl	80087d4 <HAL_TIM_PWM_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002bbc:	f7ff f99e 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bc8:	f107 0320 	add.w	r3, r7, #32
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4811      	ldr	r0, [pc, #68]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002bd0:	f007 faf4 	bl	800a1bc <HAL_TIMEx_MasterConfigSynchronization>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002bda:	f7ff f98f 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bde:	2360      	movs	r3, #96	; 0x60
 8002be0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4807      	ldr	r0, [pc, #28]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002bf6:	f006 fa13 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002c00:	f7ff f97c 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <MX_TIM4_Init+0xe4>)
 8002c06:	f000 f99f 	bl	8002f48 <HAL_TIM_MspPostInit>

}
 8002c0a:	bf00      	nop
 8002c0c:	3738      	adds	r7, #56	; 0x38
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	2000150c 	.word	0x2000150c
 8002c18:	40000800 	.word	0x40000800

08002c1c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c30:	463b      	mov	r3, r7
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <MX_TIM5_Init+0x90>)
 8002c3a:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <MX_TIM5_Init+0x94>)
 8002c3c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <MX_TIM5_Init+0x90>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <MX_TIM5_Init+0x90>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10;
 8002c4a:	4b18      	ldr	r3, [pc, #96]	; (8002cac <MX_TIM5_Init+0x90>)
 8002c4c:	220a      	movs	r2, #10
 8002c4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c50:	4b16      	ldr	r3, [pc, #88]	; (8002cac <MX_TIM5_Init+0x90>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <MX_TIM5_Init+0x90>)
 8002c58:	2280      	movs	r2, #128	; 0x80
 8002c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c5c:	4813      	ldr	r0, [pc, #76]	; (8002cac <MX_TIM5_Init+0x90>)
 8002c5e:	f005 fbd7 	bl	8008410 <HAL_TIM_Base_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002c68:	f7ff f948 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c72:	f107 0308 	add.w	r3, r7, #8
 8002c76:	4619      	mov	r1, r3
 8002c78:	480c      	ldr	r0, [pc, #48]	; (8002cac <MX_TIM5_Init+0x90>)
 8002c7a:	f006 fb77 	bl	800936c <HAL_TIM_ConfigClockSource>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8002c84:	f7ff f93a 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c90:	463b      	mov	r3, r7
 8002c92:	4619      	mov	r1, r3
 8002c94:	4805      	ldr	r0, [pc, #20]	; (8002cac <MX_TIM5_Init+0x90>)
 8002c96:	f007 fa91 	bl	800a1bc <HAL_TIMEx_MasterConfigSynchronization>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8002ca0:	f7ff f92c 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002ca4:	bf00      	nop
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20001554 	.word	0x20001554
 8002cb0:	40000c00 	.word	0x40000c00

08002cb4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <MX_TIM11_Init+0x40>)
 8002cba:	4a0f      	ldr	r2, [pc, #60]	; (8002cf8 <MX_TIM11_Init+0x44>)
 8002cbc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <MX_TIM11_Init+0x40>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <MX_TIM11_Init+0x40>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <MX_TIM11_Init+0x40>)
 8002ccc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <MX_TIM11_Init+0x40>)
 8002cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <MX_TIM11_Init+0x40>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002ce0:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <MX_TIM11_Init+0x40>)
 8002ce2:	f005 fb95 	bl	8008410 <HAL_TIM_Base_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002cec:	f7ff f906 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	2000159c 	.word	0x2000159c
 8002cf8:	40014800 	.word	0x40014800

08002cfc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0c:	d115      	bne.n	8002d3a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_TIM_PWM_MspInit+0x48>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <HAL_TIM_PWM_MspInit+0x48>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_TIM_PWM_MspInit+0x48>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	201c      	movs	r0, #28
 8002d30:	f000 ff28 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d34:	201c      	movs	r0, #28
 8002d36:	f000 ff51 	bl	8003bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800

08002d48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2c      	ldr	r2, [pc, #176]	; (8002e18 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d151      	bne.n	8002e0e <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a23      	ldr	r2, [pc, #140]	; (8002e1c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4811      	ldr	r0, [pc, #68]	; (8002e20 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002dda:	f001 fc4d 	bl	8004678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8002dde:	2320      	movs	r3, #32
 8002de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de6:	2301      	movs	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dee:	2302      	movs	r3, #2
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4619      	mov	r1, r3
 8002df8:	480a      	ldr	r0, [pc, #40]	; (8002e24 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002dfa:	f001 fc3d 	bl	8004678 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2105      	movs	r1, #5
 8002e02:	201d      	movs	r0, #29
 8002e04:	f000 febe 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e08:	201d      	movs	r0, #29
 8002e0a:	f000 fee7 	bl	8003bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	; 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400

08002e28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a3e      	ldr	r2, [pc, #248]	; (8002f30 <HAL_TIM_Base_MspInit+0x108>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d147      	bne.n	8002eca <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_TIM_Base_MspInit+0x10c>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a3c      	ldr	r2, [pc, #240]	; (8002f34 <HAL_TIM_Base_MspInit+0x10c>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <HAL_TIM_Base_MspInit+0x10c>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002e56:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e58:	4a38      	ldr	r2, [pc, #224]	; (8002f3c <HAL_TIM_Base_MspInit+0x114>)
 8002e5a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002e5c:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e62:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e66:	2240      	movs	r2, #64	; 0x40
 8002e68:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6a:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002e70:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e76:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e78:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e7e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e80:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8002e86:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e8c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e94:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e96:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002e9c:	4826      	ldr	r0, [pc, #152]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002e9e:	f000 fedf 	bl	8003c60 <HAL_DMA_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002ea8:	f7ff f828 	bl	8001efc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eb2:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <HAL_TIM_Base_MspInit+0x110>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2105      	movs	r1, #5
 8002ebc:	201e      	movs	r0, #30
 8002ebe:	f000 fe61 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ec2:	201e      	movs	r0, #30
 8002ec4:	f000 fe8a 	bl	8003bdc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002ec8:	e02e      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM5)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_TIM_Base_MspInit+0x118>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d116      	bne.n	8002f02 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_TIM_Base_MspInit+0x10c>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <HAL_TIM_Base_MspInit+0x10c>)
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_TIM_Base_MspInit+0x10c>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2105      	movs	r1, #5
 8002ef4:	2032      	movs	r0, #50	; 0x32
 8002ef6:	f000 fe45 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002efa:	2032      	movs	r0, #50	; 0x32
 8002efc:	f000 fe6e 	bl	8003bdc <HAL_NVIC_EnableIRQ>
}
 8002f00:	e012      	b.n	8002f28 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM11)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_TIM_Base_MspInit+0x11c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d10d      	bne.n	8002f28 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_TIM_Base_MspInit+0x10c>)
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <HAL_TIM_Base_MspInit+0x10c>)
 8002f16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_TIM_Base_MspInit+0x10c>)
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	bf00      	nop
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40023800 	.word	0x40023800
 8002f38:	200015e4 	.word	0x200015e4
 8002f3c:	400260b8 	.word	0x400260b8
 8002f40:	40000c00 	.word	0x40000c00
 8002f44:	40014800 	.word	0x40014800

08002f48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d11e      	bne.n	8002fa8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <HAL_TIM_MspPostInit+0xb0>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a21      	ldr	r2, [pc, #132]	; (8002ff8 <HAL_TIM_MspPostInit+0xb0>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <HAL_TIM_MspPostInit+0xb0>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8002f86:	2302      	movs	r3, #2
 8002f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f92:	2303      	movs	r3, #3
 8002f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f96:	2301      	movs	r3, #1
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4816      	ldr	r0, [pc, #88]	; (8002ffc <HAL_TIM_MspPostInit+0xb4>)
 8002fa2:	f001 fb69 	bl	8004678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002fa6:	e023      	b.n	8002ff0 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a14      	ldr	r2, [pc, #80]	; (8003000 <HAL_TIM_MspPostInit+0xb8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d11e      	bne.n	8002ff0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_TIM_MspPostInit+0xb0>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <HAL_TIM_MspPostInit+0xb0>)
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_TIM_MspPostInit+0xb0>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4806      	ldr	r0, [pc, #24]	; (8003004 <HAL_TIM_MspPostInit+0xbc>)
 8002fec:	f001 fb44 	bl	8004678 <HAL_GPIO_Init>
}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40020000 	.word	0x40020000
 8003000:	40000800 	.word	0x40000800
 8003004:	40020400 	.word	0x40020400

08003008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800300c:	480d      	ldr	r0, [pc, #52]	; (8003044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800300e:	490e      	ldr	r1, [pc, #56]	; (8003048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003010:	4a0e      	ldr	r2, [pc, #56]	; (800304c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003014:	e002      	b.n	800301c <LoopCopyDataInit>

08003016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800301a:	3304      	adds	r3, #4

0800301c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800301c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800301e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003020:	d3f9      	bcc.n	8003016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003022:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003024:	4c0b      	ldr	r4, [pc, #44]	; (8003054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003028:	e001      	b.n	800302e <LoopFillZerobss>

0800302a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800302a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800302c:	3204      	adds	r2, #4

0800302e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800302e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003030:	d3fb      	bcc.n	800302a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003032:	f7ff fcbf 	bl	80029b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003036:	f00e fd0f 	bl	8011a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800303a:	f7fe fe9b 	bl	8001d74 <main>
  bx  lr    
 800303e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003048:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800304c:	08014ba0 	.word	0x08014ba0
  ldr r2, =_sbss
 8003050:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003054:	2001d08c 	.word	0x2001d08c

08003058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003058:	e7fe      	b.n	8003058 <ADC_IRQHandler>

0800305a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	bf00      	nop
 800306c:	f7fe ff46 	bl	8001efc <Error_Handler>
 8003070:	e7fe      	b.n	8003070 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7a1b      	ldrb	r3, [r3, #8]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d904      	bls.n	8003084 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800307a:	b672      	cpsid	i
}
 800307c:	bf00      	nop
 800307e:	f7fe ff3d 	bl	8001efc <Error_Handler>
 8003082:	e7fe      	b.n	8003082 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	7a1b      	ldrb	r3, [r3, #8]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	b2d1      	uxtb	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	7211      	strb	r1, [r2, #8]
 8003090:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003092:	f3ef 8211 	mrs	r2, BASEPRI
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	60fa      	str	r2, [r7, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d104      	bne.n	80030d2 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80030c8:	b672      	cpsid	i
}
 80030ca:	bf00      	nop
 80030cc:	f7fe ff16 	bl	8001efc <Error_Handler>
 80030d0:	e7fe      	b.n	80030d0 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7a1b      	ldrb	r3, [r3, #8]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7a1b      	ldrb	r3, [r3, #8]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d904      	bls.n	80030f0 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80030e6:	b672      	cpsid	i
}
 80030e8:	bf00      	nop
 80030ea:	f7fe ff07 	bl	8001efc <Error_Handler>
 80030ee:	e7fe      	b.n	80030ee <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7a1b      	ldrb	r3, [r3, #8]
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003104:	bf00      	nop
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800311c:	b672      	cpsid	i
}
 800311e:	bf00      	nop
 8003120:	f7fe feec 	bl	8001efc <Error_Handler>
 8003124:	e7fe      	b.n	8003124 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff96 	bl	800305a <stm32_lock_acquire>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003144:	b672      	cpsid	i
}
 8003146:	bf00      	nop
 8003148:	f7fe fed8 	bl	8001efc <Error_Handler>
 800314c:	e7fe      	b.n	800314c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ffb2 	bl	80030ba <stm32_lock_release>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_Init+0x40>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_Init+0x40>)
 800316a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800316e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_Init+0x40>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <HAL_Init+0x40>)
 8003176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800317a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_Init+0x40>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <HAL_Init+0x40>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003188:	2003      	movs	r0, #3
 800318a:	f000 fcdb 	bl	8003b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800318e:	2005      	movs	r0, #5
 8003190:	f7ff fade 	bl	8002750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003194:	f7ff faa0 	bl	80026d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00

080031a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_IncTick+0x20>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_IncTick+0x24>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4413      	add	r3, r2
 80031b4:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <HAL_IncTick+0x24>)
 80031b6:	6013      	str	r3, [r2, #0]
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000094 	.word	0x20000094
 80031c8:	20001650 	.word	0x20001650

080031cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return uwTick;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HAL_GetTick+0x14>)
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20001650 	.word	0x20001650

080031e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7ff ffee 	bl	80031cc <HAL_GetTick>
 80031f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d005      	beq.n	800320a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_Delay+0x44>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800320a:	bf00      	nop
 800320c:	f7ff ffde 	bl	80031cc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	429a      	cmp	r2, r3
 800321a:	d8f7      	bhi.n	800320c <HAL_Delay+0x28>
  {
  }
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000094 	.word	0x20000094

0800322c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e14e      	b.n	80034e0 <HAL_ADC_Init+0x2b4>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a90      	ldr	r2, [pc, #576]	; (8003488 <HAL_ADC_Init+0x25c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_ADC_Init+0x2a>
 800324c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003250:	488e      	ldr	r0, [pc, #568]	; (800348c <HAL_ADC_Init+0x260>)
 8003252:	f7fe fe58 	bl	8001f06 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d013      	beq.n	8003286 <HAL_ADC_Init+0x5a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003266:	d00e      	beq.n	8003286 <HAL_ADC_Init+0x5a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003270:	d009      	beq.n	8003286 <HAL_ADC_Init+0x5a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800327a:	d004      	beq.n	8003286 <HAL_ADC_Init+0x5a>
 800327c:	f240 1143 	movw	r1, #323	; 0x143
 8003280:	4882      	ldr	r0, [pc, #520]	; (800348c <HAL_ADC_Init+0x260>)
 8003282:	f7fe fe40 	bl	8001f06 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d013      	beq.n	80032b6 <HAL_ADC_Init+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003296:	d00e      	beq.n	80032b6 <HAL_ADC_Init+0x8a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032a0:	d009      	beq.n	80032b6 <HAL_ADC_Init+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032aa:	d004      	beq.n	80032b6 <HAL_ADC_Init+0x8a>
 80032ac:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80032b0:	4876      	ldr	r0, [pc, #472]	; (800348c <HAL_ADC_Init+0x260>)
 80032b2:	f7fe fe28 	bl	8001f06 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_ADC_Init+0xa4>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d004      	beq.n	80032d0 <HAL_ADC_Init+0xa4>
 80032c6:	f240 1145 	movw	r1, #325	; 0x145
 80032ca:	4870      	ldr	r0, [pc, #448]	; (800348c <HAL_ADC_Init+0x260>)
 80032cc:	f7fe fe1b 	bl	8001f06 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7e1b      	ldrb	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_ADC_Init+0xbe>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7e1b      	ldrb	r3, [r3, #24]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d004      	beq.n	80032ea <HAL_ADC_Init+0xbe>
 80032e0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80032e4:	4869      	ldr	r0, [pc, #420]	; (800348c <HAL_ADC_Init+0x260>)
 80032e6:	f7fe fe0e 	bl	8001f06 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d054      	beq.n	800339c <HAL_ADC_Init+0x170>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032fa:	d04f      	beq.n	800339c <HAL_ADC_Init+0x170>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003304:	d04a      	beq.n	800339c <HAL_ADC_Init+0x170>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800330e:	d045      	beq.n	800339c <HAL_ADC_Init+0x170>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003318:	d040      	beq.n	800339c <HAL_ADC_Init+0x170>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003322:	d03b      	beq.n	800339c <HAL_ADC_Init+0x170>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800332c:	d036      	beq.n	800339c <HAL_ADC_Init+0x170>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8003336:	d031      	beq.n	800339c <HAL_ADC_Init+0x170>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003340:	d02c      	beq.n	800339c <HAL_ADC_Init+0x170>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800334a:	d027      	beq.n	800339c <HAL_ADC_Init+0x170>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003354:	d022      	beq.n	800339c <HAL_ADC_Init+0x170>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800335e:	d01d      	beq.n	800339c <HAL_ADC_Init+0x170>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003368:	d018      	beq.n	800339c <HAL_ADC_Init+0x170>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8003372:	d013      	beq.n	800339c <HAL_ADC_Init+0x170>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800337c:	d00e      	beq.n	800339c <HAL_ADC_Init+0x170>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003386:	d009      	beq.n	800339c <HAL_ADC_Init+0x170>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	4a40      	ldr	r2, [pc, #256]	; (8003490 <HAL_ADC_Init+0x264>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_ADC_Init+0x170>
 8003392:	f240 1147 	movw	r1, #327	; 0x147
 8003396:	483d      	ldr	r0, [pc, #244]	; (800348c <HAL_ADC_Init+0x260>)
 8003398:	f7fe fdb5 	bl	8001f06 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d009      	beq.n	80033b8 <HAL_ADC_Init+0x18c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ac:	d004      	beq.n	80033b8 <HAL_ADC_Init+0x18c>
 80033ae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80033b2:	4836      	ldr	r0, [pc, #216]	; (800348c <HAL_ADC_Init+0x260>)
 80033b4:	f7fe fda7 	bl	8001f06 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_ADC_Init+0x19c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d904      	bls.n	80033d2 <HAL_ADC_Init+0x1a6>
 80033c8:	f240 1149 	movw	r1, #329	; 0x149
 80033cc:	482f      	ldr	r0, [pc, #188]	; (800348c <HAL_ADC_Init+0x260>)
 80033ce:	f7fe fd9a 	bl	8001f06 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <HAL_ADC_Init+0x1c4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d004      	beq.n	80033f0 <HAL_ADC_Init+0x1c4>
 80033e6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80033ea:	4828      	ldr	r0, [pc, #160]	; (800348c <HAL_ADC_Init+0x260>)
 80033ec:	f7fe fd8b 	bl	8001f06 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d00c      	beq.n	8003412 <HAL_ADC_Init+0x1e6>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_ADC_Init+0x1e6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d004      	beq.n	8003412 <HAL_ADC_Init+0x1e6>
 8003408:	f240 114b 	movw	r1, #331	; 0x14b
 800340c:	481f      	ldr	r0, [pc, #124]	; (800348c <HAL_ADC_Init+0x260>)
 800340e:	f7fe fd7a 	bl	8001f06 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <HAL_ADC_Init+0x204>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d004      	beq.n	8003430 <HAL_ADC_Init+0x204>
 8003426:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800342a:	4818      	ldr	r0, [pc, #96]	; (800348c <HAL_ADC_Init+0x260>)
 800342c:	f7fe fd6b 	bl	8001f06 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	4a16      	ldr	r2, [pc, #88]	; (8003490 <HAL_ADC_Init+0x264>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d017      	beq.n	800346a <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d013      	beq.n	800346a <HAL_ADC_Init+0x23e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800344a:	d00e      	beq.n	800346a <HAL_ADC_Init+0x23e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003454:	d009      	beq.n	800346a <HAL_ADC_Init+0x23e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800345e:	d004      	beq.n	800346a <HAL_ADC_Init+0x23e>
 8003460:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003464:	4809      	ldr	r0, [pc, #36]	; (800348c <HAL_ADC_Init+0x260>)
 8003466:	f7fe fd4e 	bl	8001f06 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d110      	bne.n	8003494 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe f890 	bl	8001598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003486:	e005      	b.n	8003494 <HAL_ADC_Init+0x268>
 8003488:	40012000 	.word	0x40012000
 800348c:	080125b0 	.word	0x080125b0
 8003490:	0f000001 	.word	0x0f000001
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d118      	bne.n	80034d2 <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034a8:	f023 0302 	bic.w	r3, r3, #2
 80034ac:	f043 0202 	orr.w	r2, r3, #2
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f98d 	bl	80037d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f023 0303 	bic.w	r3, r3, #3
 80034c8:	f043 0201 	orr.w	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
 80034d0:	e001      	b.n	80034d6 <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b12      	cmp	r3, #18
 80034fc:	d909      	bls.n	8003512 <HAL_ADC_ConfigChannel+0x2a>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a72      	ldr	r2, [pc, #456]	; (80036cc <HAL_ADC_ConfigChannel+0x1e4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_ADC_ConfigChannel+0x2a>
 8003508:	f240 618b 	movw	r1, #1675	; 0x68b
 800350c:	4870      	ldr	r0, [pc, #448]	; (80036d0 <HAL_ADC_ConfigChannel+0x1e8>)
 800350e:	f7fe fcfa 	bl	8001f06 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_ADC_ConfigChannel+0x3a>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b10      	cmp	r3, #16
 8003520:	d904      	bls.n	800352c <HAL_ADC_ConfigChannel+0x44>
 8003522:	f240 618c 	movw	r1, #1676	; 0x68c
 8003526:	486a      	ldr	r0, [pc, #424]	; (80036d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003528:	f7fe fced 	bl	8001f06 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x8e>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d01c      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x8e>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d018      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x8e>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b03      	cmp	r3, #3
 800354a:	d014      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x8e>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d010      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x8e>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d00c      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x8e>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b06      	cmp	r3, #6
 8003562:	d008      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x8e>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b07      	cmp	r3, #7
 800356a:	d004      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x8e>
 800356c:	f240 618d 	movw	r1, #1677	; 0x68d
 8003570:	4857      	ldr	r0, [pc, #348]	; (80036d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003572:	f7fe fcc8 	bl	8001f06 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x9c>
 8003580:	2302      	movs	r3, #2
 8003582:	e118      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x2ce>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b09      	cmp	r3, #9
 8003592:	d925      	bls.n	80035e0 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68d9      	ldr	r1, [r3, #12]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	3b1e      	subs	r3, #30
 80035aa:	2207      	movs	r2, #7
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43da      	mvns	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	400a      	ands	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68d9      	ldr	r1, [r3, #12]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	4618      	mov	r0, r3
 80035cc:	4603      	mov	r3, r0
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4403      	add	r3, r0
 80035d2:	3b1e      	subs	r3, #30
 80035d4:	409a      	lsls	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	e022      	b.n	8003626 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6919      	ldr	r1, [r3, #16]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	4613      	mov	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4413      	add	r3, r2
 80035f4:	2207      	movs	r2, #7
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43da      	mvns	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	400a      	ands	r2, r1
 8003602:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6919      	ldr	r1, [r3, #16]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	b29b      	uxth	r3, r3
 8003614:	4618      	mov	r0, r3
 8003616:	4603      	mov	r3, r0
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4403      	add	r3, r0
 800361c:	409a      	lsls	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b06      	cmp	r3, #6
 800362c:	d824      	bhi.n	8003678 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	3b05      	subs	r3, #5
 8003640:	221f      	movs	r2, #31
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	400a      	ands	r2, r1
 800364e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	4618      	mov	r0, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	3b05      	subs	r3, #5
 800366a:	fa00 f203 	lsl.w	r2, r0, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	635a      	str	r2, [r3, #52]	; 0x34
 8003676:	e051      	b.n	800371c <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b0c      	cmp	r3, #12
 800367e:	d829      	bhi.n	80036d4 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	3b23      	subs	r3, #35	; 0x23
 8003692:	221f      	movs	r2, #31
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43da      	mvns	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	400a      	ands	r2, r1
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	4618      	mov	r0, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	3b23      	subs	r3, #35	; 0x23
 80036bc:	fa00 f203 	lsl.w	r2, r0, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
 80036c8:	e028      	b.n	800371c <HAL_ADC_ConfigChannel+0x234>
 80036ca:	bf00      	nop
 80036cc:	10000012 	.word	0x10000012
 80036d0:	080125b0 	.word	0x080125b0
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	3b41      	subs	r3, #65	; 0x41
 80036e6:	221f      	movs	r2, #31
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43da      	mvns	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	400a      	ands	r2, r1
 80036f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	4618      	mov	r0, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3b41      	subs	r3, #65	; 0x41
 8003710:	fa00 f203 	lsl.w	r2, r0, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <HAL_ADC_ConfigChannel+0x2d8>)
 800371e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a27      	ldr	r2, [pc, #156]	; (80037c4 <HAL_ADC_ConfigChannel+0x2dc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d10f      	bne.n	800374a <HAL_ADC_ConfigChannel+0x262>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b12      	cmp	r3, #18
 8003730:	d10b      	bne.n	800374a <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <HAL_ADC_ConfigChannel+0x2dc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d12b      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x2c4>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <HAL_ADC_ConfigChannel+0x2e0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <HAL_ADC_ConfigChannel+0x27e>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b11      	cmp	r3, #17
 8003764:	d122      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <HAL_ADC_ConfigChannel+0x2e0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d111      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_ADC_ConfigChannel+0x2e4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a10      	ldr	r2, [pc, #64]	; (80037d0 <HAL_ADC_ConfigChannel+0x2e8>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0c9a      	lsrs	r2, r3, #18
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800379e:	e002      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f9      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40012300 	.word	0x40012300
 80037c4:	40012000 	.word	0x40012000
 80037c8:	10000012 	.word	0x10000012
 80037cc:	2000008c 	.word	0x2000008c
 80037d0:	431bde83 	.word	0x431bde83

080037d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037dc:	4b7f      	ldr	r3, [pc, #508]	; (80039dc <ADC_Init+0x208>)
 80037de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800382c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800384e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6899      	ldr	r1, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	4a5e      	ldr	r2, [pc, #376]	; (80039e0 <ADC_Init+0x20c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800387a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6899      	ldr	r1, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800389c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6899      	ldr	r1, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	e00f      	b.n	80038d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0202 	bic.w	r2, r2, #2
 80038e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6899      	ldr	r1, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7e1b      	ldrb	r3, [r3, #24]
 80038ec:	005a      	lsls	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d028      	beq.n	8003952 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <ADC_Init+0x13c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	2b08      	cmp	r3, #8
 800390e:	d904      	bls.n	800391a <ADC_Init+0x146>
 8003910:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003914:	4833      	ldr	r0, [pc, #204]	; (80039e4 <ADC_Init+0x210>)
 8003916:	f7fe faf6 	bl	8001f06 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003928:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003938:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	3b01      	subs	r3, #1
 8003946:	035a      	lsls	r2, r3, #13
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	e007      	b.n	8003962 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003960:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003970:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	3b01      	subs	r3, #1
 800397e:	051a      	lsls	r2, r3, #20
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003996:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6899      	ldr	r1, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039a4:	025a      	lsls	r2, r3, #9
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6899      	ldr	r1, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	029a      	lsls	r2, r3, #10
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40012300 	.word	0x40012300
 80039e0:	0f000001 	.word	0x0f000001
 80039e4:	080125b0 	.word	0x080125b0

080039e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <__NVIC_SetPriorityGrouping+0x44>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a04:	4013      	ands	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a1a:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <__NVIC_SetPriorityGrouping+0x44>)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	60d3      	str	r3, [r2, #12]
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <__NVIC_GetPriorityGrouping+0x18>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	f003 0307 	and.w	r3, r3, #7
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	db0b      	blt.n	8003a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	4907      	ldr	r1, [pc, #28]	; (8003a84 <__NVIC_EnableIRQ+0x38>)
 8003a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000e100 	.word	0xe000e100

08003a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	6039      	str	r1, [r7, #0]
 8003a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	db0a      	blt.n	8003ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	490c      	ldr	r1, [pc, #48]	; (8003ad4 <__NVIC_SetPriority+0x4c>)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	0112      	lsls	r2, r2, #4
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ab0:	e00a      	b.n	8003ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4908      	ldr	r1, [pc, #32]	; (8003ad8 <__NVIC_SetPriority+0x50>)
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	3b04      	subs	r3, #4
 8003ac0:	0112      	lsls	r2, r2, #4
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	761a      	strb	r2, [r3, #24]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000e100 	.word	0xe000e100
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	; 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f1c3 0307 	rsb	r3, r3, #7
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	bf28      	it	cs
 8003afa:	2304      	movcs	r3, #4
 8003afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3304      	adds	r3, #4
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d902      	bls.n	8003b0c <NVIC_EncodePriority+0x30>
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3b03      	subs	r3, #3
 8003b0a:	e000      	b.n	8003b0e <NVIC_EncodePriority+0x32>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	401a      	ands	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b24:	f04f 31ff 	mov.w	r1, #4294967295
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	43d9      	mvns	r1, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b34:	4313      	orrs	r3, r2
         );
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3724      	adds	r7, #36	; 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b07      	cmp	r3, #7
 8003b50:	d00f      	beq.n	8003b72 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b06      	cmp	r3, #6
 8003b56:	d00c      	beq.n	8003b72 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	d009      	beq.n	8003b72 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d006      	beq.n	8003b72 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d003      	beq.n	8003b72 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b6a:	2190      	movs	r1, #144	; 0x90
 8003b6c:	4804      	ldr	r0, [pc, #16]	; (8003b80 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003b6e:	f7fe f9ca 	bl	8001f06 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff ff38 	bl	80039e8 <__NVIC_SetPriorityGrouping>
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	080125e8 	.word	0x080125e8

08003b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b0f      	cmp	r3, #15
 8003b9a:	d903      	bls.n	8003ba4 <HAL_NVIC_SetPriority+0x20>
 8003b9c:	21a8      	movs	r1, #168	; 0xa8
 8003b9e:	480e      	ldr	r0, [pc, #56]	; (8003bd8 <HAL_NVIC_SetPriority+0x54>)
 8003ba0:	f7fe f9b1 	bl	8001f06 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b0f      	cmp	r3, #15
 8003ba8:	d903      	bls.n	8003bb2 <HAL_NVIC_SetPriority+0x2e>
 8003baa:	21a9      	movs	r1, #169	; 0xa9
 8003bac:	480a      	ldr	r0, [pc, #40]	; (8003bd8 <HAL_NVIC_SetPriority+0x54>)
 8003bae:	f7fe f9aa 	bl	8001f06 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bb2:	f7ff ff3d 	bl	8003a30 <__NVIC_GetPriorityGrouping>
 8003bb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	6978      	ldr	r0, [r7, #20]
 8003bbe:	f7ff ff8d 	bl	8003adc <NVIC_EncodePriority>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ff5c 	bl	8003a88 <__NVIC_SetPriority>
}
 8003bd0:	bf00      	nop
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	080125e8 	.word	0x080125e8

08003bdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da03      	bge.n	8003bf6 <HAL_NVIC_EnableIRQ+0x1a>
 8003bee:	21bc      	movs	r1, #188	; 0xbc
 8003bf0:	4805      	ldr	r0, [pc, #20]	; (8003c08 <HAL_NVIC_EnableIRQ+0x2c>)
 8003bf2:	f7fe f988 	bl	8001f06 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ff26 	bl	8003a4c <__NVIC_EnableIRQ>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	080125e8 	.word	0x080125e8

08003c0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e017      	b.n	8003c4e <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a0d      	ldr	r2, [pc, #52]	; (8003c58 <HAL_CRC_Init+0x4c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <HAL_CRC_Init+0x24>
 8003c28:	2168      	movs	r1, #104	; 0x68
 8003c2a:	480c      	ldr	r0, [pc, #48]	; (8003c5c <HAL_CRC_Init+0x50>)
 8003c2c:	f7fe f96b 	bl	8001f06 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	795b      	ldrb	r3, [r3, #5]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d105      	bne.n	8003c46 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fd fdcb 	bl	80017dc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40023000 	.word	0x40023000
 8003c5c:	08012624 	.word	0x08012624

08003c60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c6c:	f7ff faae 	bl	80031cc <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e203      	b.n	8004084 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a8b      	ldr	r2, [pc, #556]	; (8003eb0 <HAL_DMA_Init+0x250>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d04e      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a8a      	ldr	r2, [pc, #552]	; (8003eb4 <HAL_DMA_Init+0x254>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d049      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a88      	ldr	r2, [pc, #544]	; (8003eb8 <HAL_DMA_Init+0x258>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d044      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a87      	ldr	r2, [pc, #540]	; (8003ebc <HAL_DMA_Init+0x25c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d03f      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a85      	ldr	r2, [pc, #532]	; (8003ec0 <HAL_DMA_Init+0x260>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d03a      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a84      	ldr	r2, [pc, #528]	; (8003ec4 <HAL_DMA_Init+0x264>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d035      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a82      	ldr	r2, [pc, #520]	; (8003ec8 <HAL_DMA_Init+0x268>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d030      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a81      	ldr	r2, [pc, #516]	; (8003ecc <HAL_DMA_Init+0x26c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d02b      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a7f      	ldr	r2, [pc, #508]	; (8003ed0 <HAL_DMA_Init+0x270>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d026      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a7e      	ldr	r2, [pc, #504]	; (8003ed4 <HAL_DMA_Init+0x274>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d021      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a7c      	ldr	r2, [pc, #496]	; (8003ed8 <HAL_DMA_Init+0x278>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01c      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a7b      	ldr	r2, [pc, #492]	; (8003edc <HAL_DMA_Init+0x27c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d017      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a79      	ldr	r2, [pc, #484]	; (8003ee0 <HAL_DMA_Init+0x280>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d012      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a78      	ldr	r2, [pc, #480]	; (8003ee4 <HAL_DMA_Init+0x284>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00d      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a76      	ldr	r2, [pc, #472]	; (8003ee8 <HAL_DMA_Init+0x288>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d008      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a75      	ldr	r2, [pc, #468]	; (8003eec <HAL_DMA_Init+0x28c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <HAL_DMA_Init+0xc4>
 8003d1c:	21b7      	movs	r1, #183	; 0xb7
 8003d1e:	4874      	ldr	r0, [pc, #464]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003d20:	f7fe f8f1 	bl	8001f06 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d026      	beq.n	8003d7a <HAL_DMA_Init+0x11a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d34:	d021      	beq.n	8003d7a <HAL_DMA_Init+0x11a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d3e:	d01c      	beq.n	8003d7a <HAL_DMA_Init+0x11a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003d48:	d017      	beq.n	8003d7a <HAL_DMA_Init+0x11a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d52:	d012      	beq.n	8003d7a <HAL_DMA_Init+0x11a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003d5c:	d00d      	beq.n	8003d7a <HAL_DMA_Init+0x11a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d66:	d008      	beq.n	8003d7a <HAL_DMA_Init+0x11a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003d70:	d003      	beq.n	8003d7a <HAL_DMA_Init+0x11a>
 8003d72:	21b8      	movs	r1, #184	; 0xb8
 8003d74:	485e      	ldr	r0, [pc, #376]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003d76:	f7fe f8c6 	bl	8001f06 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_DMA_Init+0x13a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d007      	beq.n	8003d9a <HAL_DMA_Init+0x13a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b80      	cmp	r3, #128	; 0x80
 8003d90:	d003      	beq.n	8003d9a <HAL_DMA_Init+0x13a>
 8003d92:	21b9      	movs	r1, #185	; 0xb9
 8003d94:	4856      	ldr	r0, [pc, #344]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003d96:	f7fe f8b6 	bl	8001f06 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da2:	d007      	beq.n	8003db4 <HAL_DMA_Init+0x154>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_DMA_Init+0x154>
 8003dac:	21ba      	movs	r1, #186	; 0xba
 8003dae:	4850      	ldr	r0, [pc, #320]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003db0:	f7fe f8a9 	bl	8001f06 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbc:	d007      	beq.n	8003dce <HAL_DMA_Init+0x16e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_DMA_Init+0x16e>
 8003dc6:	21bb      	movs	r1, #187	; 0xbb
 8003dc8:	4849      	ldr	r0, [pc, #292]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003dca:	f7fe f89c 	bl	8001f06 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <HAL_DMA_Init+0x192>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dde:	d008      	beq.n	8003df2 <HAL_DMA_Init+0x192>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de8:	d003      	beq.n	8003df2 <HAL_DMA_Init+0x192>
 8003dea:	21bc      	movs	r1, #188	; 0xbc
 8003dec:	4840      	ldr	r0, [pc, #256]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003dee:	f7fe f88a 	bl	8001f06 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_DMA_Init+0x1b6>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e02:	d008      	beq.n	8003e16 <HAL_DMA_Init+0x1b6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0c:	d003      	beq.n	8003e16 <HAL_DMA_Init+0x1b6>
 8003e0e:	21bd      	movs	r1, #189	; 0xbd
 8003e10:	4837      	ldr	r0, [pc, #220]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003e12:	f7fe f878 	bl	8001f06 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <HAL_DMA_Init+0x1d8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e26:	d007      	beq.n	8003e38 <HAL_DMA_Init+0x1d8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d003      	beq.n	8003e38 <HAL_DMA_Init+0x1d8>
 8003e30:	21be      	movs	r1, #190	; 0xbe
 8003e32:	482f      	ldr	r0, [pc, #188]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003e34:	f7fe f867 	bl	8001f06 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <HAL_DMA_Init+0x206>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e48:	d00d      	beq.n	8003e66 <HAL_DMA_Init+0x206>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e52:	d008      	beq.n	8003e66 <HAL_DMA_Init+0x206>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e5c:	d003      	beq.n	8003e66 <HAL_DMA_Init+0x206>
 8003e5e:	21bf      	movs	r1, #191	; 0xbf
 8003e60:	4823      	ldr	r0, [pc, #140]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003e62:	f7fe f850 	bl	8001f06 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_DMA_Init+0x21e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d003      	beq.n	8003e7e <HAL_DMA_Init+0x21e>
 8003e76:	21c0      	movs	r1, #192	; 0xc0
 8003e78:	481d      	ldr	r0, [pc, #116]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003e7a:	f7fe f844 	bl	8001f06 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d064      	beq.n	8003f50 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d032      	beq.n	8003ef4 <HAL_DMA_Init+0x294>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d02e      	beq.n	8003ef4 <HAL_DMA_Init+0x294>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d02a      	beq.n	8003ef4 <HAL_DMA_Init+0x294>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d026      	beq.n	8003ef4 <HAL_DMA_Init+0x294>
 8003ea6:	21c5      	movs	r1, #197	; 0xc5
 8003ea8:	4811      	ldr	r0, [pc, #68]	; (8003ef0 <HAL_DMA_Init+0x290>)
 8003eaa:	f7fe f82c 	bl	8001f06 <assert_failed>
 8003eae:	e021      	b.n	8003ef4 <HAL_DMA_Init+0x294>
 8003eb0:	40026010 	.word	0x40026010
 8003eb4:	40026028 	.word	0x40026028
 8003eb8:	40026040 	.word	0x40026040
 8003ebc:	40026058 	.word	0x40026058
 8003ec0:	40026070 	.word	0x40026070
 8003ec4:	40026088 	.word	0x40026088
 8003ec8:	400260a0 	.word	0x400260a0
 8003ecc:	400260b8 	.word	0x400260b8
 8003ed0:	40026410 	.word	0x40026410
 8003ed4:	40026428 	.word	0x40026428
 8003ed8:	40026440 	.word	0x40026440
 8003edc:	40026458 	.word	0x40026458
 8003ee0:	40026470 	.word	0x40026470
 8003ee4:	40026488 	.word	0x40026488
 8003ee8:	400264a0 	.word	0x400264a0
 8003eec:	400264b8 	.word	0x400264b8
 8003ef0:	0801265c 	.word	0x0801265c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d012      	beq.n	8003f22 <HAL_DMA_Init+0x2c2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f04:	d00d      	beq.n	8003f22 <HAL_DMA_Init+0x2c2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f0e:	d008      	beq.n	8003f22 <HAL_DMA_Init+0x2c2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f18:	d003      	beq.n	8003f22 <HAL_DMA_Init+0x2c2>
 8003f1a:	21c6      	movs	r1, #198	; 0xc6
 8003f1c:	485b      	ldr	r0, [pc, #364]	; (800408c <HAL_DMA_Init+0x42c>)
 8003f1e:	f7fd fff2 	bl	8001f06 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d012      	beq.n	8003f50 <HAL_DMA_Init+0x2f0>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f32:	d00d      	beq.n	8003f50 <HAL_DMA_Init+0x2f0>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f3c:	d008      	beq.n	8003f50 <HAL_DMA_Init+0x2f0>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f46:	d003      	beq.n	8003f50 <HAL_DMA_Init+0x2f0>
 8003f48:	21c7      	movs	r1, #199	; 0xc7
 8003f4a:	4850      	ldr	r0, [pc, #320]	; (800408c <HAL_DMA_Init+0x42c>)
 8003f4c:	f7fd ffdb 	bl	8001f06 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f70:	e00f      	b.n	8003f92 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f72:	f7ff f92b 	bl	80031cc <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	d908      	bls.n	8003f92 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2203      	movs	r2, #3
 8003f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e078      	b.n	8004084 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e8      	bne.n	8003f72 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <HAL_DMA_Init+0x430>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d107      	bne.n	8003ffc <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0307 	bic.w	r3, r3, #7
 8004012:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b04      	cmp	r3, #4
 8004024:	d117      	bne.n	8004056 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00e      	beq.n	8004056 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 faa1 	bl	8004580 <DMA_CheckFifoParam>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2240      	movs	r2, #64	; 0x40
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004052:	2301      	movs	r3, #1
 8004054:	e016      	b.n	8004084 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fa58 	bl	8004514 <DMA_CalcBaseAndBitshift>
 8004064:	4603      	mov	r3, r0
 8004066:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	223f      	movs	r2, #63	; 0x3f
 800406e:	409a      	lsls	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	0801265c 	.word	0x0801265c
 8004090:	f010803f 	.word	0xf010803f

08004094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_DMA_Start_IT+0x26>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b8:	d304      	bcc.n	80040c4 <HAL_DMA_Start_IT+0x30>
 80040ba:	f240 11cb 	movw	r1, #459	; 0x1cb
 80040be:	4827      	ldr	r0, [pc, #156]	; (800415c <HAL_DMA_Start_IT+0xc8>)
 80040c0:	f7fd ff21 	bl	8001f06 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_DMA_Start_IT+0x3e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e040      	b.n	8004154 <HAL_DMA_Start_IT+0xc0>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d12f      	bne.n	8004146 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2202      	movs	r2, #2
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f9dc 	bl	80044b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	223f      	movs	r2, #63	; 0x3f
 8004106:	409a      	lsls	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0216 	orr.w	r2, r2, #22
 800411a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0208 	orr.w	r2, r2, #8
 8004132:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e005      	b.n	8004152 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800414e:	2302      	movs	r3, #2
 8004150:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004152:	7dfb      	ldrb	r3, [r7, #23]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	0801265c 	.word	0x0801265c

08004160 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d004      	beq.n	800417e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2280      	movs	r2, #128	; 0x80
 8004178:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e00c      	b.n	8004198 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2205      	movs	r2, #5
 8004182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041b0:	4b8e      	ldr	r3, [pc, #568]	; (80043ec <HAL_DMA_IRQHandler+0x248>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a8e      	ldr	r2, [pc, #568]	; (80043f0 <HAL_DMA_IRQHandler+0x24c>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	0a9b      	lsrs	r3, r3, #10
 80041bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	2208      	movs	r2, #8
 80041d0:	409a      	lsls	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01a      	beq.n	8004210 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d013      	beq.n	8004210 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0204 	bic.w	r2, r2, #4
 80041f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	2208      	movs	r2, #8
 80041fe:	409a      	lsls	r2, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	f043 0201 	orr.w	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	2201      	movs	r2, #1
 8004216:	409a      	lsls	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d012      	beq.n	8004246 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004232:	2201      	movs	r2, #1
 8004234:	409a      	lsls	r2, r3
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	f043 0202 	orr.w	r2, r3, #2
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	2204      	movs	r2, #4
 800424c:	409a      	lsls	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d012      	beq.n	800427c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	2204      	movs	r2, #4
 800426a:	409a      	lsls	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f043 0204 	orr.w	r2, r3, #4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	2210      	movs	r2, #16
 8004282:	409a      	lsls	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d043      	beq.n	8004314 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d03c      	beq.n	8004314 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429e:	2210      	movs	r2, #16
 80042a0:	409a      	lsls	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d018      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d108      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d024      	beq.n	8004314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
 80042d2:	e01f      	b.n	8004314 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
 80042e4:	e016      	b.n	8004314 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d107      	bne.n	8004304 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0208 	bic.w	r2, r2, #8
 8004302:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	2220      	movs	r2, #32
 800431a:	409a      	lsls	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 808f 	beq.w	8004444 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8087 	beq.w	8004444 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	2220      	movs	r2, #32
 800433c:	409a      	lsls	r2, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b05      	cmp	r3, #5
 800434c:	d136      	bne.n	80043bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0216 	bic.w	r2, r2, #22
 800435c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800436c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <HAL_DMA_IRQHandler+0x1da>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0208 	bic.w	r2, r2, #8
 800438c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004392:	223f      	movs	r2, #63	; 0x3f
 8004394:	409a      	lsls	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d07e      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	4798      	blx	r3
        }
        return;
 80043ba:	e079      	b.n	80044b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01d      	beq.n	8004406 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10d      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d031      	beq.n	8004444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
 80043e8:	e02c      	b.n	8004444 <HAL_DMA_IRQHandler+0x2a0>
 80043ea:	bf00      	nop
 80043ec:	2000008c 	.word	0x2000008c
 80043f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d023      	beq.n	8004444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
 8004404:	e01e      	b.n	8004444 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10f      	bne.n	8004434 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0210 	bic.w	r2, r2, #16
 8004422:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	2b00      	cmp	r3, #0
 800444a:	d032      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d022      	beq.n	800449e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2205      	movs	r2, #5
 800445c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	3301      	adds	r3, #1
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	d307      	bcc.n	800448c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f2      	bne.n	8004470 <HAL_DMA_IRQHandler+0x2cc>
 800448a:	e000      	b.n	800448e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800448c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
 80044ae:	e000      	b.n	80044b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044b0:	bf00      	nop
    }
  }
}
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d108      	bne.n	80044f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044f6:	e007      	b.n	8004508 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3b10      	subs	r3, #16
 8004524:	4a14      	ldr	r2, [pc, #80]	; (8004578 <DMA_CalcBaseAndBitshift+0x64>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800452e:	4a13      	ldr	r2, [pc, #76]	; (800457c <DMA_CalcBaseAndBitshift+0x68>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d909      	bls.n	8004556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	659a      	str	r2, [r3, #88]	; 0x58
 8004554:	e007      	b.n	8004566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	aaaaaaab 	.word	0xaaaaaaab
 800457c:	08014af4 	.word	0x08014af4

08004580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11f      	bne.n	80045da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d856      	bhi.n	800464e <DMA_CheckFifoParam+0xce>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <DMA_CheckFifoParam+0x28>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045cb 	.word	0x080045cb
 80045b0:	080045b9 	.word	0x080045b9
 80045b4:	0800464f 	.word	0x0800464f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d046      	beq.n	8004652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c8:	e043      	b.n	8004652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045d2:	d140      	bne.n	8004656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d8:	e03d      	b.n	8004656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e2:	d121      	bne.n	8004628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d837      	bhi.n	800465a <DMA_CheckFifoParam+0xda>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <DMA_CheckFifoParam+0x70>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004601 	.word	0x08004601
 80045f4:	08004607 	.word	0x08004607
 80045f8:	08004601 	.word	0x08004601
 80045fc:	08004619 	.word	0x08004619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      break;
 8004604:	e030      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d025      	beq.n	800465e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004616:	e022      	b.n	800465e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004620:	d11f      	bne.n	8004662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004626:	e01c      	b.n	8004662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d903      	bls.n	8004636 <DMA_CheckFifoParam+0xb6>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d003      	beq.n	800463c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004634:	e018      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
      break;
 800463a:	e015      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00e      	beq.n	8004666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      break;
 800464c:	e00b      	b.n	8004666 <DMA_CheckFifoParam+0xe6>
      break;
 800464e:	bf00      	nop
 8004650:	e00a      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004652:	bf00      	nop
 8004654:	e008      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e006      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e004      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;   
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004666:	bf00      	nop
    }
  } 
  
  return status; 
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop

08004678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a33      	ldr	r2, [pc, #204]	; (8004760 <HAL_GPIO_Init+0xe8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d017      	beq.n	80046c6 <HAL_GPIO_Init+0x4e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a32      	ldr	r2, [pc, #200]	; (8004764 <HAL_GPIO_Init+0xec>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_GPIO_Init+0x4e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a31      	ldr	r2, [pc, #196]	; (8004768 <HAL_GPIO_Init+0xf0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00f      	beq.n	80046c6 <HAL_GPIO_Init+0x4e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a30      	ldr	r2, [pc, #192]	; (800476c <HAL_GPIO_Init+0xf4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00b      	beq.n	80046c6 <HAL_GPIO_Init+0x4e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a2f      	ldr	r2, [pc, #188]	; (8004770 <HAL_GPIO_Init+0xf8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d007      	beq.n	80046c6 <HAL_GPIO_Init+0x4e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a2e      	ldr	r2, [pc, #184]	; (8004774 <HAL_GPIO_Init+0xfc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x4e>
 80046be:	21ac      	movs	r1, #172	; 0xac
 80046c0:	482d      	ldr	r0, [pc, #180]	; (8004778 <HAL_GPIO_Init+0x100>)
 80046c2:	f7fd fc20 	bl	8001f06 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_GPIO_Init+0x64>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_GPIO_Init+0x6c>
 80046dc:	21ad      	movs	r1, #173	; 0xad
 80046de:	4826      	ldr	r0, [pc, #152]	; (8004778 <HAL_GPIO_Init+0x100>)
 80046e0:	f7fd fc11 	bl	8001f06 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d035      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d031      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b11      	cmp	r3, #17
 80046fa:	d02d      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d029      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b12      	cmp	r3, #18
 800470a:	d025      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004714:	d020      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800471e:	d01b      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004728:	d016      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004732:	d011      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800473c:	d00c      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004746:	d007      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d003      	beq.n	8004758 <HAL_GPIO_Init+0xe0>
 8004750:	21ae      	movs	r1, #174	; 0xae
 8004752:	4809      	ldr	r0, [pc, #36]	; (8004778 <HAL_GPIO_Init+0x100>)
 8004754:	f7fd fbd7 	bl	8001f06 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004758:	2300      	movs	r3, #0
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	e20c      	b.n	8004b78 <HAL_GPIO_Init+0x500>
 800475e:	bf00      	nop
 8004760:	40020000 	.word	0x40020000
 8004764:	40020400 	.word	0x40020400
 8004768:	40020800 	.word	0x40020800
 800476c:	40020c00 	.word	0x40020c00
 8004770:	40021000 	.word	0x40021000
 8004774:	40021c00 	.word	0x40021c00
 8004778:	08012694 	.word	0x08012694
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800477c:	2201      	movs	r2, #1
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4013      	ands	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	429a      	cmp	r2, r3
 8004796:	f040 81ec 	bne.w	8004b72 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d005      	beq.n	80047b2 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d144      	bne.n	800483c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00f      	beq.n	80047da <HAL_GPIO_Init+0x162>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d00b      	beq.n	80047da <HAL_GPIO_Init+0x162>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d007      	beq.n	80047da <HAL_GPIO_Init+0x162>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_Init+0x162>
 80047d2:	21c0      	movs	r1, #192	; 0xc0
 80047d4:	4884      	ldr	r0, [pc, #528]	; (80049e8 <HAL_GPIO_Init+0x370>)
 80047d6:	f7fd fb96 	bl	8001f06 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	2203      	movs	r2, #3
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4013      	ands	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004810:	2201      	movs	r2, #1
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 0201 	and.w	r2, r3, #1
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	2b03      	cmp	r3, #3
 8004846:	d027      	beq.n	8004898 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_GPIO_Init+0x1f0>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d007      	beq.n	8004868 <HAL_GPIO_Init+0x1f0>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x1f0>
 8004860:	21d1      	movs	r1, #209	; 0xd1
 8004862:	4861      	ldr	r0, [pc, #388]	; (80049e8 <HAL_GPIO_Init+0x370>)
 8004864:	f7fd fb4f 	bl	8001f06 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	2203      	movs	r2, #3
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4013      	ands	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	f040 80a3 	bne.w	80049ec <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d077      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b09      	cmp	r3, #9
 80048b4:	d073      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d06f      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d06b      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d067      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d063      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d05f      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d05b      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d057      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d053      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d04f      	beq.n	800499e <HAL_GPIO_Init+0x326>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b04      	cmp	r3, #4
 8004904:	d04b      	beq.n	800499e <HAL_GPIO_Init+0x326>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b04      	cmp	r3, #4
 800490c:	d047      	beq.n	800499e <HAL_GPIO_Init+0x326>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b04      	cmp	r3, #4
 8004914:	d043      	beq.n	800499e <HAL_GPIO_Init+0x326>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b05      	cmp	r3, #5
 800491c:	d03f      	beq.n	800499e <HAL_GPIO_Init+0x326>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b05      	cmp	r3, #5
 8004924:	d03b      	beq.n	800499e <HAL_GPIO_Init+0x326>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b05      	cmp	r3, #5
 800492c:	d037      	beq.n	800499e <HAL_GPIO_Init+0x326>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b06      	cmp	r3, #6
 8004934:	d033      	beq.n	800499e <HAL_GPIO_Init+0x326>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b06      	cmp	r3, #6
 800493c:	d02f      	beq.n	800499e <HAL_GPIO_Init+0x326>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b05      	cmp	r3, #5
 8004944:	d02b      	beq.n	800499e <HAL_GPIO_Init+0x326>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b06      	cmp	r3, #6
 800494c:	d027      	beq.n	800499e <HAL_GPIO_Init+0x326>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b07      	cmp	r3, #7
 8004954:	d023      	beq.n	800499e <HAL_GPIO_Init+0x326>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b07      	cmp	r3, #7
 800495c:	d01f      	beq.n	800499e <HAL_GPIO_Init+0x326>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b07      	cmp	r3, #7
 8004964:	d01b      	beq.n	800499e <HAL_GPIO_Init+0x326>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b08      	cmp	r3, #8
 800496c:	d017      	beq.n	800499e <HAL_GPIO_Init+0x326>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b0a      	cmp	r3, #10
 8004974:	d013      	beq.n	800499e <HAL_GPIO_Init+0x326>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b09      	cmp	r3, #9
 800497c:	d00f      	beq.n	800499e <HAL_GPIO_Init+0x326>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b09      	cmp	r3, #9
 8004984:	d00b      	beq.n	800499e <HAL_GPIO_Init+0x326>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d007      	beq.n	800499e <HAL_GPIO_Init+0x326>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b0f      	cmp	r3, #15
 8004994:	d003      	beq.n	800499e <HAL_GPIO_Init+0x326>
 8004996:	21de      	movs	r1, #222	; 0xde
 8004998:	4813      	ldr	r0, [pc, #76]	; (80049e8 <HAL_GPIO_Init+0x370>)
 800499a:	f7fd fab4 	bl	8001f06 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	08da      	lsrs	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3208      	adds	r2, #8
 80049a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	220f      	movs	r2, #15
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	08da      	lsrs	r2, r3, #3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3208      	adds	r2, #8
 80049e0:	69b9      	ldr	r1, [r7, #24]
 80049e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80049e6:	e001      	b.n	80049ec <HAL_GPIO_Init+0x374>
 80049e8:	08012694 	.word	0x08012694
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	2203      	movs	r2, #3
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 0203 	and.w	r2, r3, #3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80a2 	beq.w	8004b72 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	4b56      	ldr	r3, [pc, #344]	; (8004b8c <HAL_GPIO_Init+0x514>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	4a55      	ldr	r2, [pc, #340]	; (8004b8c <HAL_GPIO_Init+0x514>)
 8004a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a3e:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_GPIO_Init+0x514>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a4a:	4a51      	ldr	r2, [pc, #324]	; (8004b90 <HAL_GPIO_Init+0x518>)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	089b      	lsrs	r3, r3, #2
 8004a50:	3302      	adds	r3, #2
 8004a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	220f      	movs	r2, #15
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a48      	ldr	r2, [pc, #288]	; (8004b94 <HAL_GPIO_Init+0x51c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d019      	beq.n	8004aaa <HAL_GPIO_Init+0x432>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a47      	ldr	r2, [pc, #284]	; (8004b98 <HAL_GPIO_Init+0x520>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_GPIO_Init+0x42e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a46      	ldr	r2, [pc, #280]	; (8004b9c <HAL_GPIO_Init+0x524>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00d      	beq.n	8004aa2 <HAL_GPIO_Init+0x42a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a45      	ldr	r2, [pc, #276]	; (8004ba0 <HAL_GPIO_Init+0x528>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <HAL_GPIO_Init+0x426>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a44      	ldr	r2, [pc, #272]	; (8004ba4 <HAL_GPIO_Init+0x52c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d101      	bne.n	8004a9a <HAL_GPIO_Init+0x422>
 8004a96:	2304      	movs	r3, #4
 8004a98:	e008      	b.n	8004aac <HAL_GPIO_Init+0x434>
 8004a9a:	2307      	movs	r3, #7
 8004a9c:	e006      	b.n	8004aac <HAL_GPIO_Init+0x434>
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e004      	b.n	8004aac <HAL_GPIO_Init+0x434>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e002      	b.n	8004aac <HAL_GPIO_Init+0x434>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_GPIO_Init+0x434>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	f002 0203 	and.w	r2, r2, #3
 8004ab2:	0092      	lsls	r2, r2, #2
 8004ab4:	4093      	lsls	r3, r2
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004abc:	4934      	ldr	r1, [pc, #208]	; (8004b90 <HAL_GPIO_Init+0x518>)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	089b      	lsrs	r3, r3, #2
 8004ac2:	3302      	adds	r3, #2
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aca:	4b37      	ldr	r3, [pc, #220]	; (8004ba8 <HAL_GPIO_Init+0x530>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aee:	4a2e      	ldr	r2, [pc, #184]	; (8004ba8 <HAL_GPIO_Init+0x530>)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004af4:	4b2c      	ldr	r3, [pc, #176]	; (8004ba8 <HAL_GPIO_Init+0x530>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	43db      	mvns	r3, r3
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4013      	ands	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b18:	4a23      	ldr	r2, [pc, #140]	; (8004ba8 <HAL_GPIO_Init+0x530>)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b1e:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <HAL_GPIO_Init+0x530>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b42:	4a19      	ldr	r2, [pc, #100]	; (8004ba8 <HAL_GPIO_Init+0x530>)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <HAL_GPIO_Init+0x530>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <HAL_GPIO_Init+0x530>)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3301      	adds	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	f67f adfe 	bls.w	800477c <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40013800 	.word	0x40013800
 8004b94:	40020000 	.word	0x40020000
 8004b98:	40020400 	.word	0x40020400
 8004b9c:	40020800 	.word	0x40020800
 8004ba0:	40020c00 	.word	0x40020c00
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	40013c00 	.word	0x40013c00

08004bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004bbc:	887b      	ldrh	r3, [r7, #2]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d004      	beq.n	8004bcc <HAL_GPIO_WritePin+0x20>
 8004bc2:	887b      	ldrh	r3, [r7, #2]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <HAL_GPIO_WritePin+0x2a>
 8004bcc:	f240 119d 	movw	r1, #413	; 0x19d
 8004bd0:	480e      	ldr	r0, [pc, #56]	; (8004c0c <HAL_GPIO_WritePin+0x60>)
 8004bd2:	f7fd f998 	bl	8001f06 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004bd6:	787b      	ldrb	r3, [r7, #1]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <HAL_GPIO_WritePin+0x40>
 8004bdc:	787b      	ldrb	r3, [r7, #1]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d004      	beq.n	8004bec <HAL_GPIO_WritePin+0x40>
 8004be2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004be6:	4809      	ldr	r0, [pc, #36]	; (8004c0c <HAL_GPIO_WritePin+0x60>)
 8004be8:	f7fd f98d 	bl	8001f06 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004bec:	787b      	ldrb	r3, [r7, #1]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bf2:	887a      	ldrh	r2, [r7, #2]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bf8:	e003      	b.n	8004c02 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bfa:	887b      	ldrh	r3, [r7, #2]
 8004bfc:	041a      	lsls	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	619a      	str	r2, [r3, #24]
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	08012694 	.word	0x08012694

08004c10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c1a:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c26:	4a05      	ldr	r2, [pc, #20]	; (8004c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fd fe5e 	bl	80028f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40013c00 	.word	0x40013c00

08004c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e1bd      	b.n	8004fce <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a93      	ldr	r2, [pc, #588]	; (8004ea4 <HAL_I2C_Init+0x264>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_I2C_Init+0x3a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a91      	ldr	r2, [pc, #580]	; (8004ea8 <HAL_I2C_Init+0x268>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_I2C_Init+0x3a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a90      	ldr	r2, [pc, #576]	; (8004eac <HAL_I2C_Init+0x26c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_I2C_Init+0x3a>
 8004c70:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8004c74:	488e      	ldr	r0, [pc, #568]	; (8004eb0 <HAL_I2C_Init+0x270>)
 8004c76:	f7fd f946 	bl	8001f06 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <HAL_I2C_Init+0x4c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4a8b      	ldr	r2, [pc, #556]	; (8004eb4 <HAL_I2C_Init+0x274>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d904      	bls.n	8004c96 <HAL_I2C_Init+0x56>
 8004c8c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004c90:	4887      	ldr	r0, [pc, #540]	; (8004eb0 <HAL_I2C_Init+0x270>)
 8004c92:	f7fd f938 	bl	8001f06 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <HAL_I2C_Init+0x72>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca6:	d004      	beq.n	8004cb2 <HAL_I2C_Init+0x72>
 8004ca8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004cac:	4880      	ldr	r0, [pc, #512]	; (8004eb0 <HAL_I2C_Init+0x270>)
 8004cae:	f7fd f92a 	bl	8001f06 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <HAL_I2C_Init+0x8c>
 8004cc2:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004cc6:	487a      	ldr	r0, [pc, #488]	; (8004eb0 <HAL_I2C_Init+0x270>)
 8004cc8:	f7fd f91d 	bl	8001f06 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cd4:	d009      	beq.n	8004cea <HAL_I2C_Init+0xaa>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cde:	d004      	beq.n	8004cea <HAL_I2C_Init+0xaa>
 8004ce0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004ce4:	4872      	ldr	r0, [pc, #456]	; (8004eb0 <HAL_I2C_Init+0x270>)
 8004ce6:	f7fd f90e 	bl	8001f06 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <HAL_I2C_Init+0xc4>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d004      	beq.n	8004d04 <HAL_I2C_Init+0xc4>
 8004cfa:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004cfe:	486c      	ldr	r0, [pc, #432]	; (8004eb0 <HAL_I2C_Init+0x270>)
 8004d00:	f7fd f901 	bl	8001f06 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d004      	beq.n	8004d1a <HAL_I2C_Init+0xda>
 8004d10:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004d14:	4866      	ldr	r0, [pc, #408]	; (8004eb0 <HAL_I2C_Init+0x270>)
 8004d16:	f7fd f8f6 	bl	8001f06 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_I2C_Init+0xf4>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d004      	beq.n	8004d34 <HAL_I2C_Init+0xf4>
 8004d2a:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004d2e:	4860      	ldr	r0, [pc, #384]	; (8004eb0 <HAL_I2C_Init+0x270>)
 8004d30:	f7fd f8e9 	bl	8001f06 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_I2C_Init+0x10e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	2b80      	cmp	r3, #128	; 0x80
 8004d42:	d004      	beq.n	8004d4e <HAL_I2C_Init+0x10e>
 8004d44:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004d48:	4859      	ldr	r0, [pc, #356]	; (8004eb0 <HAL_I2C_Init+0x270>)
 8004d4a:	f7fd f8dc 	bl	8001f06 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fc ff6c 	bl	8001c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	; 0x24
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004da0:	f002 f92a 	bl	8006ff8 <HAL_RCC_GetPCLK1Freq>
 8004da4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4a43      	ldr	r2, [pc, #268]	; (8004eb8 <HAL_I2C_Init+0x278>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d807      	bhi.n	8004dc0 <HAL_I2C_Init+0x180>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a42      	ldr	r2, [pc, #264]	; (8004ebc <HAL_I2C_Init+0x27c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	bf94      	ite	ls
 8004db8:	2301      	movls	r3, #1
 8004dba:	2300      	movhi	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e006      	b.n	8004dce <HAL_I2C_Init+0x18e>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a3f      	ldr	r2, [pc, #252]	; (8004ec0 <HAL_I2C_Init+0x280>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bf94      	ite	ls
 8004dc8:	2301      	movls	r3, #1
 8004dca:	2300      	movhi	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0fb      	b.n	8004fce <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a3a      	ldr	r2, [pc, #232]	; (8004ec4 <HAL_I2C_Init+0x284>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	0c9b      	lsrs	r3, r3, #18
 8004de0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4a2c      	ldr	r2, [pc, #176]	; (8004eb8 <HAL_I2C_Init+0x278>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d802      	bhi.n	8004e10 <HAL_I2C_Init+0x1d0>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	e009      	b.n	8004e24 <HAL_I2C_Init+0x1e4>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	4a2b      	ldr	r2, [pc, #172]	; (8004ec8 <HAL_I2C_Init+0x288>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	099b      	lsrs	r3, r3, #6
 8004e22:	3301      	adds	r3, #1
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	491e      	ldr	r1, [pc, #120]	; (8004eb8 <HAL_I2C_Init+0x278>)
 8004e40:	428b      	cmp	r3, r1
 8004e42:	d819      	bhi.n	8004e78 <HAL_I2C_Init+0x238>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1e59      	subs	r1, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e52:	1c59      	adds	r1, r3, #1
 8004e54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e58:	400b      	ands	r3, r1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_I2C_Init+0x234>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1e59      	subs	r1, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e72:	e065      	b.n	8004f40 <HAL_I2C_Init+0x300>
 8004e74:	2304      	movs	r3, #4
 8004e76:	e063      	b.n	8004f40 <HAL_I2C_Init+0x300>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d125      	bne.n	8004ecc <HAL_I2C_Init+0x28c>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1e58      	subs	r0, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	440b      	add	r3, r1
 8004e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e92:	3301      	adds	r3, #1
 8004e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e026      	b.n	8004ef2 <HAL_I2C_Init+0x2b2>
 8004ea4:	40005400 	.word	0x40005400
 8004ea8:	40005800 	.word	0x40005800
 8004eac:	40005c00 	.word	0x40005c00
 8004eb0:	080126d0 	.word	0x080126d0
 8004eb4:	00061a80 	.word	0x00061a80
 8004eb8:	000186a0 	.word	0x000186a0
 8004ebc:	001e847f 	.word	0x001e847f
 8004ec0:	003d08ff 	.word	0x003d08ff
 8004ec4:	431bde83 	.word	0x431bde83
 8004ec8:	10624dd3 	.word	0x10624dd3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1e58      	subs	r0, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6859      	ldr	r1, [r3, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	0099      	lsls	r1, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_I2C_Init+0x2ba>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e022      	b.n	8004f40 <HAL_I2C_Init+0x300>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10e      	bne.n	8004f20 <HAL_I2C_Init+0x2e0>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1e58      	subs	r0, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	440b      	add	r3, r1
 8004f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f14:	3301      	adds	r3, #1
 8004f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1e:	e00f      	b.n	8004f40 <HAL_I2C_Init+0x300>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1e58      	subs	r0, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6859      	ldr	r1, [r3, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	0099      	lsls	r1, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f36:	3301      	adds	r3, #1
 8004f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	6809      	ldr	r1, [r1, #0]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6911      	ldr	r1, [r2, #16]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68d2      	ldr	r2, [r2, #12]
 8004f7a:	4311      	orrs	r1, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop

08004fd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fda:	b08f      	sub	sp, #60	; 0x3c
 8004fdc:	af0a      	add	r7, sp, #40	; 0x28
 8004fde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e118      	b.n	800521c <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ff2:	d003      	beq.n	8004ffc <HAL_PCD_Init+0x24>
 8004ff4:	2187      	movs	r1, #135	; 0x87
 8004ff6:	488b      	ldr	r0, [pc, #556]	; (8005224 <HAL_PCD_Init+0x24c>)
 8004ff8:	f7fc ff85 	bl	8001f06 <assert_failed>

  USBx = hpcd->Instance;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f00c fa0e 	bl	8011438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2203      	movs	r2, #3
 8005020:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f005 faa5 	bl	800a58a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	687e      	ldr	r6, [r7, #4]
 8005048:	466d      	mov	r5, sp
 800504a:	f106 0410 	add.w	r4, r6, #16
 800504e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800505a:	e885 0003 	stmia.w	r5, {r0, r1}
 800505e:	1d33      	adds	r3, r6, #4
 8005060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005062:	6838      	ldr	r0, [r7, #0]
 8005064:	f005 f97c 	bl	800a360 <USB_CoreInit>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e0d0      	b.n	800521c <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2100      	movs	r1, #0
 8005080:	4618      	mov	r0, r3
 8005082:	f005 fa93 	bl	800a5ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]
 800508a:	e04a      	b.n	8005122 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800508c:	7bfa      	ldrb	r2, [r7, #15]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	333d      	adds	r3, #61	; 0x3d
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	333c      	adds	r3, #60	; 0x3c
 80050b0:	7bfa      	ldrb	r2, [r7, #15]
 80050b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050b4:	7bfa      	ldrb	r2, [r7, #15]
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	b298      	uxth	r0, r3
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	3344      	adds	r3, #68	; 0x44
 80050c8:	4602      	mov	r2, r0
 80050ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050cc:	7bfa      	ldrb	r2, [r7, #15]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	3340      	adds	r3, #64	; 0x40
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050e0:	7bfa      	ldrb	r2, [r7, #15]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	3348      	adds	r3, #72	; 0x48
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	334c      	adds	r3, #76	; 0x4c
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005108:	7bfa      	ldrb	r2, [r7, #15]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	3354      	adds	r3, #84	; 0x54
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	3301      	adds	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
 8005122:	7bfa      	ldrb	r2, [r7, #15]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	d3af      	bcc.n	800508c <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	e044      	b.n	80051bc <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005132:	7bfa      	ldrb	r2, [r7, #15]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005148:	7bfa      	ldrb	r2, [r7, #15]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800515a:	7bfa      	ldrb	r2, [r7, #15]
 800515c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800515e:	7bfa      	ldrb	r2, [r7, #15]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800518a:	7bfa      	ldrb	r2, [r7, #15]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051a0:	7bfa      	ldrb	r2, [r7, #15]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	3301      	adds	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
 80051bc:	7bfa      	ldrb	r2, [r7, #15]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d3b5      	bcc.n	8005132 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	687e      	ldr	r6, [r7, #4]
 80051ce:	466d      	mov	r5, sp
 80051d0:	f106 0410 	add.w	r4, r6, #16
 80051d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80051e4:	1d33      	adds	r3, r6, #4
 80051e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051e8:	6838      	ldr	r0, [r7, #0]
 80051ea:	f005 fa2b 	bl	800a644 <USB_DevInit>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d005      	beq.n	8005200 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e00d      	b.n	800521c <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f006 fb7a 	bl	800b90e <USB_DevDisconnect>

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005224:	08012708 	.word	0x08012708

08005228 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_PCD_Start+0x1c>
 8005240:	2302      	movs	r3, #2
 8005242:	e020      	b.n	8005286 <HAL_PCD_Start+0x5e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	2b01      	cmp	r3, #1
 8005252:	d109      	bne.n	8005268 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005258:	2b01      	cmp	r3, #1
 800525a:	d005      	beq.n	8005268 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f005 f97b 	bl	800a568 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f006 fb28 	bl	800b8cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800528e:	b590      	push	{r4, r7, lr}
 8005290:	b08d      	sub	sp, #52	; 0x34
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f006 fbe6 	bl	800ba76 <USB_GetMode>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 848a 	bne.w	8005bc6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f006 fb4a 	bl	800b950 <USB_ReadInterrupts>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8480 	beq.w	8005bc4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f006 fb37 	bl	800b950 <USB_ReadInterrupts>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d107      	bne.n	80052fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f002 0202 	and.w	r2, r2, #2
 80052fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f006 fb25 	bl	800b950 <USB_ReadInterrupts>
 8005306:	4603      	mov	r3, r0
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b10      	cmp	r3, #16
 800530e:	d161      	bne.n	80053d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0210 	bic.w	r2, r2, #16
 800531e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	f003 020f 	and.w	r2, r3, #15
 800532c:	4613      	mov	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	4413      	add	r3, r2
 800533c:	3304      	adds	r3, #4
 800533e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	0c5b      	lsrs	r3, r3, #17
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	2b02      	cmp	r3, #2
 800534a:	d124      	bne.n	8005396 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d035      	beq.n	80053c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	091b      	lsrs	r3, r3, #4
 8005360:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005366:	b29b      	uxth	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	6a38      	ldr	r0, [r7, #32]
 800536c:	f006 f95c 	bl	800b628 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800537c:	441a      	add	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	6a1a      	ldr	r2, [r3, #32]
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800538e:	441a      	add	r2, r3
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	621a      	str	r2, [r3, #32]
 8005394:	e016      	b.n	80053c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	0c5b      	lsrs	r3, r3, #17
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d110      	bne.n	80053c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053a8:	2208      	movs	r2, #8
 80053aa:	4619      	mov	r1, r3
 80053ac:	6a38      	ldr	r0, [r7, #32]
 80053ae:	f006 f93b 	bl	800b628 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	6a1a      	ldr	r2, [r3, #32]
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	091b      	lsrs	r3, r3, #4
 80053ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053be:	441a      	add	r2, r3
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0210 	orr.w	r2, r2, #16
 80053d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f006 fab9 	bl	800b950 <USB_ReadInterrupts>
 80053de:	4603      	mov	r3, r0
 80053e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053e8:	f040 80a7 	bne.w	800553a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f006 fabe 	bl	800b976 <USB_ReadDevAllOutEpInterrupt>
 80053fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80053fc:	e099      	b.n	8005532 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 808e 	beq.w	8005526 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f006 fae2 	bl	800b9de <USB_ReadDevOutEPInterrupt>
 800541a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005432:	461a      	mov	r2, r3
 8005434:	2301      	movs	r3, #1
 8005436:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fec2 	bl	80061c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00c      	beq.n	8005464 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	461a      	mov	r2, r3
 8005458:	2308      	movs	r3, #8
 800545a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800545c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 ff98 	bl	8006394 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	461a      	mov	r2, r3
 800547c:	2310      	movs	r3, #16
 800547e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d030      	beq.n	80054ec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b80      	cmp	r3, #128	; 0x80
 8005494:	d109      	bne.n	80054aa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054a8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80054aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ac:	4613      	mov	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	4413      	add	r3, r2
 80054bc:	3304      	adds	r3, #4
 80054be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	78db      	ldrb	r3, [r3, #3]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d108      	bne.n	80054da <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2200      	movs	r2, #0
 80054cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f00c f8ab 	bl	8011630 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	461a      	mov	r2, r3
 80054e8:	2302      	movs	r3, #2
 80054ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d008      	beq.n	8005508 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	461a      	mov	r2, r3
 8005504:	2320      	movs	r3, #32
 8005506:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d009      	beq.n	8005526 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	461a      	mov	r2, r3
 8005520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005524:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	3301      	adds	r3, #1
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	085b      	lsrs	r3, r3, #1
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	2b00      	cmp	r3, #0
 8005536:	f47f af62 	bne.w	80053fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f006 fa06 	bl	800b950 <USB_ReadInterrupts>
 8005544:	4603      	mov	r3, r0
 8005546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800554a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800554e:	f040 80db 	bne.w	8005708 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f006 fa27 	bl	800b9aa <USB_ReadDevAllInEpInterrupt>
 800555c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005562:	e0cd      	b.n	8005700 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80c2 	beq.w	80056f4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	4611      	mov	r1, r2
 800557a:	4618      	mov	r0, r3
 800557c:	f006 fa4d 	bl	800ba1a <USB_ReadDevInEPInterrupt>
 8005580:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d057      	beq.n	800563c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	2201      	movs	r2, #1
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69f9      	ldr	r1, [r7, #28]
 80055a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ac:	4013      	ands	r3, r2
 80055ae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	461a      	mov	r2, r3
 80055be:	2301      	movs	r3, #1
 80055c0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d132      	bne.n	8005630 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ce:	4613      	mov	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	334c      	adds	r3, #76	; 0x4c
 80055da:	6819      	ldr	r1, [r3, #0]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4403      	add	r3, r0
 80055ea:	3348      	adds	r3, #72	; 0x48
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4419      	add	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4403      	add	r3, r0
 80055fe:	334c      	adds	r3, #76	; 0x4c
 8005600:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d113      	bne.n	8005630 <HAL_PCD_IRQHandler+0x3a2>
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	3354      	adds	r3, #84	; 0x54
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d108      	bne.n	8005630 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005628:	461a      	mov	r2, r3
 800562a:	2101      	movs	r1, #1
 800562c:	f006 fa54 	bl	800bad8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	b2db      	uxtb	r3, r3
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f00b ff7f 	bl	801153a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	461a      	mov	r2, r3
 8005654:	2308      	movs	r3, #8
 8005656:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	461a      	mov	r2, r3
 8005670:	2310      	movs	r3, #16
 8005672:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568a:	461a      	mov	r2, r3
 800568c:	2340      	movs	r3, #64	; 0x40
 800568e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d023      	beq.n	80056e2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800569a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800569c:	6a38      	ldr	r0, [r7, #32]
 800569e:	f005 f935 	bl	800a90c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80056a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a4:	4613      	mov	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	3338      	adds	r3, #56	; 0x38
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	3304      	adds	r3, #4
 80056b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	78db      	ldrb	r3, [r3, #3]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d108      	bne.n	80056d0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2200      	movs	r2, #0
 80056c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f00b ffc2 	bl	8011654 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	461a      	mov	r2, r3
 80056de:	2302      	movs	r3, #2
 80056e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80056ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fcdb 	bl	80060aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	3301      	adds	r3, #1
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	085b      	lsrs	r3, r3, #1
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	f47f af2e 	bne.w	8005564 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f006 f91f 	bl	800b950 <USB_ReadInterrupts>
 8005712:	4603      	mov	r3, r0
 8005714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800571c:	d122      	bne.n	8005764 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005738:	2b01      	cmp	r3, #1
 800573a:	d108      	bne.n	800574e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005744:	2100      	movs	r1, #0
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fec2 	bl	80064d0 <HAL_PCDEx_LPM_Callback>
 800574c:	e002      	b.n	8005754 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f00b ff60 	bl	8011614 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f006 f8f1 	bl	800b950 <USB_ReadInterrupts>
 800576e:	4603      	mov	r3, r0
 8005770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005778:	d112      	bne.n	80057a0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d102      	bne.n	8005790 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f00b ff1c 	bl	80115c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800579e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f006 f8d3 	bl	800b950 <USB_ReadInterrupts>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b4:	f040 80b7 	bne.w	8005926 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2110      	movs	r1, #16
 80057d2:	4618      	mov	r0, r3
 80057d4:	f005 f89a 	bl	800a90c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057d8:	2300      	movs	r3, #0
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057dc:	e046      	b.n	800586c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	461a      	mov	r2, r3
 80057ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005810:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	461a      	mov	r2, r3
 8005820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005824:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005836:	0151      	lsls	r1, r2, #5
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	440a      	add	r2, r1
 800583c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005840:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005844:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	440a      	add	r2, r1
 800585c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005860:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005864:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005868:	3301      	adds	r3, #1
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005872:	429a      	cmp	r2, r3
 8005874:	d3b3      	bcc.n	80057de <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005884:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005888:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	2b00      	cmp	r3, #0
 8005890:	d016      	beq.n	80058c0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a2:	f043 030b 	orr.w	r3, r3, #11
 80058a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b8:	f043 030b 	orr.w	r3, r3, #11
 80058bc:	6453      	str	r3, [r2, #68]	; 0x44
 80058be:	e015      	b.n	80058ec <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058d2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80058d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e6:	f043 030b 	orr.w	r3, r3, #11
 80058ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80058fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005910:	461a      	mov	r2, r3
 8005912:	f006 f8e1 	bl	800bad8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695a      	ldr	r2, [r3, #20]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f006 f810 	bl	800b950 <USB_ReadInterrupts>
 8005930:	4603      	mov	r3, r0
 8005932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593a:	d124      	bne.n	8005986 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f006 f8a6 	bl	800ba92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f005 f85b 	bl	800aa06 <USB_GetDevSpeed>
 8005950:	4603      	mov	r3, r0
 8005952:	461a      	mov	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681c      	ldr	r4, [r3, #0]
 800595c:	f001 fb40 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 8005960:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005966:	b2db      	uxtb	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	4620      	mov	r0, r4
 800596c:	f004 fd5a 	bl	800a424 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f00b fe0a 	bl	801158a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695a      	ldr	r2, [r3, #20]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005984:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f005 ffe0 	bl	800b950 <USB_ReadInterrupts>
 8005990:	4603      	mov	r3, r0
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b08      	cmp	r3, #8
 8005998:	d10a      	bne.n	80059b0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f00b fde7 	bl	801156e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695a      	ldr	r2, [r3, #20]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f002 0208 	and.w	r2, r2, #8
 80059ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f005 ffcb 	bl	800b950 <USB_ReadInterrupts>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c0:	2b80      	cmp	r3, #128	; 0x80
 80059c2:	d122      	bne.n	8005a0a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059d0:	2301      	movs	r3, #1
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
 80059d4:	e014      	b.n	8005a00 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059da:	4613      	mov	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d105      	bne.n	80059fa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fb27 	bl	8006048 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	3301      	adds	r3, #1
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d3e5      	bcc.n	80059d6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f005 ff9e 	bl	800b950 <USB_ReadInterrupts>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a1e:	d13b      	bne.n	8005a98 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a20:	2301      	movs	r3, #1
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
 8005a24:	e02b      	b.n	8005a7e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	3340      	adds	r3, #64	; 0x40
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d115      	bne.n	8005a78 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005a4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	da12      	bge.n	8005a78 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	333f      	adds	r3, #63	; 0x3f
 8005a62:	2201      	movs	r2, #1
 8005a64:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fae8 	bl	8006048 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d3ce      	bcc.n	8005a26 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695a      	ldr	r2, [r3, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f005 ff57 	bl	800b950 <USB_ReadInterrupts>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aac:	d155      	bne.n	8005b5a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005aae:	2301      	movs	r3, #1
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab2:	e045      	b.n	8005b40 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d12e      	bne.n	8005b3a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005adc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da2b      	bge.n	8005b3a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005aee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d121      	bne.n	8005b3a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afa:	4613      	mov	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b08:	2201      	movs	r2, #1
 8005b0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b36:	6053      	str	r3, [r2, #4]
            break;
 8005b38:	e007      	b.n	8005b4a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d3b4      	bcc.n	8005ab4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f005 fef6 	bl	800b950 <USB_ReadInterrupts>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6e:	d10a      	bne.n	8005b86 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f00b fd81 	bl	8011678 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f005 fee0 	bl	800b950 <USB_ReadInterrupts>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d115      	bne.n	8005bc6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f00b fd71 	bl	8011694 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6859      	ldr	r1, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	e000      	b.n	8005bc6 <HAL_PCD_IRQHandler+0x938>
      return;
 8005bc4:	bf00      	nop
    }
  }
}
 8005bc6:	3734      	adds	r7, #52	; 0x34
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd90      	pop	{r4, r7, pc}

08005bcc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_PCD_SetAddress+0x1a>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e013      	b.n	8005c0e <HAL_PCD_SetAddress+0x42>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	78fa      	ldrb	r2, [r7, #3]
 8005bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f005 fe3e 	bl	800b880 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	4608      	mov	r0, r1
 8005c20:	4611      	mov	r1, r2
 8005c22:	461a      	mov	r2, r3
 8005c24:	4603      	mov	r3, r0
 8005c26:	70fb      	strb	r3, [r7, #3]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	803b      	strh	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	da0f      	bge.n	8005c5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	f003 020f 	and.w	r2, r3, #15
 8005c42:	4613      	mov	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	3338      	adds	r3, #56	; 0x38
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	4413      	add	r3, r2
 8005c50:	3304      	adds	r3, #4
 8005c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	705a      	strb	r2, [r3, #1]
 8005c5a:	e00f      	b.n	8005c7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	f003 020f 	and.w	r2, r3, #15
 8005c62:	4613      	mov	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4413      	add	r3, r2
 8005c72:	3304      	adds	r3, #4
 8005c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005c88:	883a      	ldrh	r2, [r7, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	78ba      	ldrb	r2, [r7, #2]
 8005c92:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	785b      	ldrb	r3, [r3, #1]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ca6:	78bb      	ldrb	r3, [r7, #2]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d102      	bne.n	8005cb2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_PCD_EP_Open+0xaa>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e00e      	b.n	8005cde <HAL_PCD_EP_Open+0xc8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68f9      	ldr	r1, [r7, #12]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f004 febe 	bl	800aa50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da0f      	bge.n	8005d1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	f003 020f 	and.w	r2, r3, #15
 8005d00:	4613      	mov	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	3338      	adds	r3, #56	; 0x38
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3304      	adds	r3, #4
 8005d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	705a      	strb	r2, [r3, #1]
 8005d18:	e00f      	b.n	8005d3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	f003 020f 	and.w	r2, r3, #15
 8005d20:	4613      	mov	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4413      	add	r3, r2
 8005d30:	3304      	adds	r3, #4
 8005d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_PCD_EP_Close+0x6e>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e00e      	b.n	8005d72 <HAL_PCD_EP_Close+0x8c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68f9      	ldr	r1, [r7, #12]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f004 fefc 	bl	800ab60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b086      	sub	sp, #24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
 8005d86:	460b      	mov	r3, r1
 8005d88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d8a:	7afb      	ldrb	r3, [r7, #11]
 8005d8c:	f003 020f 	and.w	r2, r3, #15
 8005d90:	4613      	mov	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	3304      	adds	r3, #4
 8005da2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2200      	movs	r2, #0
 8005db4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2200      	movs	r2, #0
 8005dba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d102      	bne.n	8005dd6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005dd6:	7afb      	ldrb	r3, [r7, #11]
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	6979      	ldr	r1, [r7, #20]
 8005dee:	f005 f9db 	bl	800b1a8 <USB_EP0StartXfer>
 8005df2:	e008      	b.n	8005e06 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6979      	ldr	r1, [r7, #20]
 8005e02:	f004 ff89 	bl	800ad18 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	f003 020f 	and.w	r2, r3, #15
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005e32:	681b      	ldr	r3, [r3, #0]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	607a      	str	r2, [r7, #4]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	f003 020f 	and.w	r2, r3, #15
 8005e56:	4613      	mov	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	3338      	adds	r3, #56	; 0x38
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	3304      	adds	r3, #4
 8005e66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2200      	movs	r2, #0
 8005e78:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e80:	7afb      	ldrb	r3, [r7, #11]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d102      	bne.n	8005e9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e9a:	7afb      	ldrb	r3, [r7, #11]
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d109      	bne.n	8005eb8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	6979      	ldr	r1, [r7, #20]
 8005eb2:	f005 f979 	bl	800b1a8 <USB_EP0StartXfer>
 8005eb6:	e008      	b.n	8005eca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6979      	ldr	r1, [r7, #20]
 8005ec6:	f004 ff27 	bl	800ad18 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d901      	bls.n	8005ef2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e050      	b.n	8005f94 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	da0f      	bge.n	8005f1a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	f003 020f 	and.w	r2, r3, #15
 8005f00:	4613      	mov	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	3338      	adds	r3, #56	; 0x38
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3304      	adds	r3, #4
 8005f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	705a      	strb	r2, [r3, #1]
 8005f18:	e00d      	b.n	8005f36 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_PCD_EP_SetStall+0x82>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e01e      	b.n	8005f94 <HAL_PCD_EP_SetStall+0xc0>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f005 fbb7 	bl	800b6d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	b2d9      	uxtb	r1, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f84:	461a      	mov	r2, r3
 8005f86:	f005 fda7 	bl	800bad8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	f003 020f 	and.w	r2, r3, #15
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d901      	bls.n	8005fba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e042      	b.n	8006040 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	da0f      	bge.n	8005fe2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	f003 020f 	and.w	r2, r3, #15
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	3338      	adds	r3, #56	; 0x38
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	705a      	strb	r2, [r3, #1]
 8005fe0:	e00f      	b.n	8006002 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	f003 020f 	and.w	r2, r3, #15
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	b2da      	uxtb	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_PCD_EP_ClrStall+0x86>
 800601e:	2302      	movs	r3, #2
 8006020:	e00e      	b.n	8006040 <HAL_PCD_EP_ClrStall+0xa4>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68f9      	ldr	r1, [r7, #12]
 8006030:	4618      	mov	r0, r3
 8006032:	f005 fbbf 	bl	800b7b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006058:	2b00      	cmp	r3, #0
 800605a:	da0c      	bge.n	8006076 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	f003 020f 	and.w	r2, r3, #15
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	3338      	adds	r3, #56	; 0x38
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	4413      	add	r3, r2
 8006070:	3304      	adds	r3, #4
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e00c      	b.n	8006090 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	4613      	mov	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	4413      	add	r3, r2
 800608c:	3304      	adds	r3, #4
 800608e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	4618      	mov	r0, r3
 8006098:	f005 f9de 	bl	800b458 <USB_EPStopXfer>
 800609c:	4603      	mov	r3, r0
 800609e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80060a0:	7afb      	ldrb	r3, [r7, #11]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b08a      	sub	sp, #40	; 0x28
 80060ae:	af02      	add	r7, sp, #8
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	3338      	adds	r3, #56	; 0x38
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	3304      	adds	r3, #4
 80060d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d901      	bls.n	80060e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e06c      	b.n	80061bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d902      	bls.n	80060fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	3303      	adds	r3, #3
 8006102:	089b      	lsrs	r3, r3, #2
 8006104:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006106:	e02b      	b.n	8006160 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	429a      	cmp	r2, r3
 800611c:	d902      	bls.n	8006124 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	3303      	adds	r3, #3
 8006128:	089b      	lsrs	r3, r3, #2
 800612a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6919      	ldr	r1, [r3, #16]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800613c:	b2db      	uxtb	r3, r3
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	4603      	mov	r3, r0
 8006142:	6978      	ldr	r0, [r7, #20]
 8006144:	f005 fa32 	bl	800b5ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	441a      	add	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	441a      	add	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	b29b      	uxth	r3, r3
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	429a      	cmp	r2, r3
 8006174:	d809      	bhi.n	800618a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1a      	ldr	r2, [r3, #32]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800617e:	429a      	cmp	r2, r3
 8006180:	d203      	bcs.n	800618a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1be      	bne.n	8006108 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	429a      	cmp	r2, r3
 8006194:	d811      	bhi.n	80061ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	2201      	movs	r2, #1
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	43db      	mvns	r3, r3
 80061b0:	6939      	ldr	r1, [r7, #16]
 80061b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061b6:	4013      	ands	r3, r2
 80061b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3720      	adds	r7, #32
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	333c      	adds	r3, #60	; 0x3c
 80061dc:	3304      	adds	r3, #4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d17b      	bne.n	80062f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d015      	beq.n	8006230 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4a61      	ldr	r2, [pc, #388]	; (800638c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	f240 80b9 	bls.w	8006380 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 80b3 	beq.w	8006380 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006226:	461a      	mov	r2, r3
 8006228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800622c:	6093      	str	r3, [r2, #8]
 800622e:	e0a7      	b.n	8006380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	461a      	mov	r2, r3
 8006248:	2320      	movs	r3, #32
 800624a:	6093      	str	r3, [r2, #8]
 800624c:	e098      	b.n	8006380 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 8093 	bne.w	8006380 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4a4b      	ldr	r2, [pc, #300]	; (800638c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d90f      	bls.n	8006282 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	461a      	mov	r2, r3
 800627a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627e:	6093      	str	r3, [r2, #8]
 8006280:	e07e      	b.n	8006380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	4413      	add	r3, r2
 8006294:	3304      	adds	r3, #4
 8006296:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	0159      	lsls	r1, r3, #5
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	440b      	add	r3, r1
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ae:	1ad2      	subs	r2, r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d114      	bne.n	80062e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062cc:	461a      	mov	r2, r3
 80062ce:	2101      	movs	r1, #1
 80062d0:	f005 fc02 	bl	800bad8 <USB_EP0_OutStart>
 80062d4:	e006      	b.n	80062e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	441a      	add	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f00b f90a 	bl	8011504 <HAL_PCD_DataOutStageCallback>
 80062f0:	e046      	b.n	8006380 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	4a26      	ldr	r2, [pc, #152]	; (8006390 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d124      	bne.n	8006344 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006310:	461a      	mov	r2, r3
 8006312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006316:	6093      	str	r3, [r2, #8]
 8006318:	e032      	b.n	8006380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006330:	461a      	mov	r2, r3
 8006332:	2320      	movs	r3, #32
 8006334:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f00b f8e1 	bl	8011504 <HAL_PCD_DataOutStageCallback>
 8006342:	e01d      	b.n	8006380 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d114      	bne.n	8006374 <PCD_EP_OutXfrComplete_int+0x1b0>
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	4613      	mov	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d108      	bne.n	8006374 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800636c:	461a      	mov	r2, r3
 800636e:	2100      	movs	r1, #0
 8006370:	f005 fbb2 	bl	800bad8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f00b f8c2 	bl	8011504 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3720      	adds	r7, #32
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	4f54300a 	.word	0x4f54300a
 8006390:	4f54310a 	.word	0x4f54310a

08006394 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	333c      	adds	r3, #60	; 0x3c
 80063ac:	3304      	adds	r3, #4
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a15      	ldr	r2, [pc, #84]	; (800641c <PCD_EP_OutSetupPacket_int+0x88>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d90e      	bls.n	80063e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e0:	461a      	mov	r2, r3
 80063e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f00b f879 	bl	80114e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a0a      	ldr	r2, [pc, #40]	; (800641c <PCD_EP_OutSetupPacket_int+0x88>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d90c      	bls.n	8006410 <PCD_EP_OutSetupPacket_int+0x7c>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d108      	bne.n	8006410 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006408:	461a      	mov	r2, r3
 800640a:	2101      	movs	r1, #1
 800640c:	f005 fb64 	bl	800bad8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	4f54300a 	.word	0x4f54300a

08006420 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
 800642c:	4613      	mov	r3, r2
 800642e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d107      	bne.n	800644e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800643e:	883b      	ldrh	r3, [r7, #0]
 8006440:	0419      	lsls	r1, r3, #16
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	430a      	orrs	r2, r1
 800644a:	629a      	str	r2, [r3, #40]	; 0x28
 800644c:	e028      	b.n	80064a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	0c1b      	lsrs	r3, r3, #16
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	4413      	add	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800645c:	2300      	movs	r3, #0
 800645e:	73fb      	strb	r3, [r7, #15]
 8006460:	e00d      	b.n	800647e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	3340      	adds	r3, #64	; 0x40
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	0c1b      	lsrs	r3, r3, #16
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4413      	add	r3, r2
 8006476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	3301      	adds	r3, #1
 800647c:	73fb      	strb	r3, [r7, #15]
 800647e:	7bfa      	ldrb	r2, [r7, #15]
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	3b01      	subs	r3, #1
 8006484:	429a      	cmp	r2, r3
 8006486:	d3ec      	bcc.n	8006462 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006488:	883b      	ldrh	r3, [r7, #0]
 800648a:	0418      	lsls	r0, r3, #16
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6819      	ldr	r1, [r3, #0]
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	3b01      	subs	r3, #1
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	4302      	orrs	r2, r0
 8006498:	3340      	adds	r3, #64	; 0x40
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	887a      	ldrh	r2, [r7, #2]
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e314      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b0f      	cmp	r3, #15
 8006500:	d903      	bls.n	800650a <HAL_RCC_OscConfig+0x22>
 8006502:	21e6      	movs	r1, #230	; 0xe6
 8006504:	4897      	ldr	r0, [pc, #604]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006506:	f7fb fcfe 	bl	8001f06 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 8088 	beq.w	8006628 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <HAL_RCC_OscConfig+0x54>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006528:	d008      	beq.n	800653c <HAL_RCC_OscConfig+0x54>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006532:	d003      	beq.n	800653c <HAL_RCC_OscConfig+0x54>
 8006534:	21eb      	movs	r1, #235	; 0xeb
 8006536:	488b      	ldr	r0, [pc, #556]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 8006538:	f7fb fce5 	bl	8001f06 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800653c:	4b8a      	ldr	r3, [pc, #552]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 030c 	and.w	r3, r3, #12
 8006544:	2b04      	cmp	r3, #4
 8006546:	d00c      	beq.n	8006562 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006548:	4b87      	ldr	r3, [pc, #540]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006550:	2b08      	cmp	r3, #8
 8006552:	d112      	bne.n	800657a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006554:	4b84      	ldr	r3, [pc, #528]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800655c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006560:	d10b      	bne.n	800657a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006562:	4b81      	ldr	r3, [pc, #516]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d05b      	beq.n	8006626 <HAL_RCC_OscConfig+0x13e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d157      	bne.n	8006626 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e2d4      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006582:	d106      	bne.n	8006592 <HAL_RCC_OscConfig+0xaa>
 8006584:	4b78      	ldr	r3, [pc, #480]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a77      	ldr	r2, [pc, #476]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800658a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e01d      	b.n	80065ce <HAL_RCC_OscConfig+0xe6>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800659a:	d10c      	bne.n	80065b6 <HAL_RCC_OscConfig+0xce>
 800659c:	4b72      	ldr	r3, [pc, #456]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a71      	ldr	r2, [pc, #452]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	4b6f      	ldr	r3, [pc, #444]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a6e      	ldr	r2, [pc, #440]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	e00b      	b.n	80065ce <HAL_RCC_OscConfig+0xe6>
 80065b6:	4b6c      	ldr	r3, [pc, #432]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a6b      	ldr	r2, [pc, #428]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	4b69      	ldr	r3, [pc, #420]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a68      	ldr	r2, [pc, #416]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d013      	beq.n	80065fe <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d6:	f7fc fdf9 	bl	80031cc <HAL_GetTick>
 80065da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065dc:	e008      	b.n	80065f0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065de:	f7fc fdf5 	bl	80031cc <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b64      	cmp	r3, #100	; 0x64
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e299      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065f0:	4b5d      	ldr	r3, [pc, #372]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0f0      	beq.n	80065de <HAL_RCC_OscConfig+0xf6>
 80065fc:	e014      	b.n	8006628 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fe:	f7fc fde5 	bl	80031cc <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006606:	f7fc fde1 	bl	80031cc <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b64      	cmp	r3, #100	; 0x64
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e285      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006618:	4b53      	ldr	r3, [pc, #332]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <HAL_RCC_OscConfig+0x11e>
 8006624:	e000      	b.n	8006628 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006626:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d079      	beq.n	8006728 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_RCC_OscConfig+0x166>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d004      	beq.n	800664e <HAL_RCC_OscConfig+0x166>
 8006644:	f240 111d 	movw	r1, #285	; 0x11d
 8006648:	4846      	ldr	r0, [pc, #280]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800664a:	f7fb fc5c 	bl	8001f06 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b1f      	cmp	r3, #31
 8006654:	d904      	bls.n	8006660 <HAL_RCC_OscConfig+0x178>
 8006656:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800665a:	4842      	ldr	r0, [pc, #264]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800665c:	f7fb fc53 	bl	8001f06 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006660:	4b41      	ldr	r3, [pc, #260]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 030c 	and.w	r3, r3, #12
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800666c:	4b3e      	ldr	r3, [pc, #248]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006674:	2b08      	cmp	r3, #8
 8006676:	d11c      	bne.n	80066b2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006678:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d116      	bne.n	80066b2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006684:	4b38      	ldr	r3, [pc, #224]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_RCC_OscConfig+0x1b4>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d001      	beq.n	800669c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e243      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669c:	4b32      	ldr	r3, [pc, #200]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	492f      	ldr	r1, [pc, #188]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066b0:	e03a      	b.n	8006728 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d020      	beq.n	80066fc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066ba:	4b2c      	ldr	r3, [pc, #176]	; (800676c <HAL_RCC_OscConfig+0x284>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c0:	f7fc fd84 	bl	80031cc <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c8:	f7fc fd80 	bl	80031cc <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e224      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066da:	4b23      	ldr	r3, [pc, #140]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f0      	beq.n	80066c8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e6:	4b20      	ldr	r3, [pc, #128]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	491c      	ldr	r1, [pc, #112]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]
 80066fa:	e015      	b.n	8006728 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <HAL_RCC_OscConfig+0x284>)
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006702:	f7fc fd63 	bl	80031cc <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800670a:	f7fc fd5f 	bl	80031cc <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e203      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f0      	bne.n	800670a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b00      	cmp	r3, #0
 8006732:	d045      	beq.n	80067c0 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d008      	beq.n	800674e <HAL_RCC_OscConfig+0x266>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d004      	beq.n	800674e <HAL_RCC_OscConfig+0x266>
 8006744:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006748:	4806      	ldr	r0, [pc, #24]	; (8006764 <HAL_RCC_OscConfig+0x27c>)
 800674a:	f7fb fbdc 	bl	8001f06 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01e      	beq.n	8006794 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006756:	4b06      	ldr	r3, [pc, #24]	; (8006770 <HAL_RCC_OscConfig+0x288>)
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675c:	f7fc fd36 	bl	80031cc <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006762:	e010      	b.n	8006786 <HAL_RCC_OscConfig+0x29e>
 8006764:	08012740 	.word	0x08012740
 8006768:	40023800 	.word	0x40023800
 800676c:	42470000 	.word	0x42470000
 8006770:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006774:	f7fc fd2a 	bl	80031cc <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e1ce      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006786:	4b5e      	ldr	r3, [pc, #376]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 8006788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0f0      	beq.n	8006774 <HAL_RCC_OscConfig+0x28c>
 8006792:	e015      	b.n	80067c0 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006794:	4b5b      	ldr	r3, [pc, #364]	; (8006904 <HAL_RCC_OscConfig+0x41c>)
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679a:	f7fc fd17 	bl	80031cc <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067a2:	f7fc fd13 	bl	80031cc <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e1b7      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b4:	4b52      	ldr	r3, [pc, #328]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 80067b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f0      	bne.n	80067a2 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80b0 	beq.w	800692e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ce:	2300      	movs	r3, #0
 80067d0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00c      	beq.n	80067f4 <HAL_RCC_OscConfig+0x30c>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d008      	beq.n	80067f4 <HAL_RCC_OscConfig+0x30c>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b05      	cmp	r3, #5
 80067e8:	d004      	beq.n	80067f4 <HAL_RCC_OscConfig+0x30c>
 80067ea:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80067ee:	4846      	ldr	r0, [pc, #280]	; (8006908 <HAL_RCC_OscConfig+0x420>)
 80067f0:	f7fb fb89 	bl	8001f06 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067f4:	4b42      	ldr	r3, [pc, #264]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10f      	bne.n	8006820 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006800:	2300      	movs	r3, #0
 8006802:	60bb      	str	r3, [r7, #8]
 8006804:	4b3e      	ldr	r3, [pc, #248]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	4a3d      	ldr	r2, [pc, #244]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 800680a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800680e:	6413      	str	r3, [r2, #64]	; 0x40
 8006810:	4b3b      	ldr	r3, [pc, #236]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006818:	60bb      	str	r3, [r7, #8]
 800681a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800681c:	2301      	movs	r3, #1
 800681e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006820:	4b3a      	ldr	r3, [pc, #232]	; (800690c <HAL_RCC_OscConfig+0x424>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006828:	2b00      	cmp	r3, #0
 800682a:	d118      	bne.n	800685e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800682c:	4b37      	ldr	r3, [pc, #220]	; (800690c <HAL_RCC_OscConfig+0x424>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a36      	ldr	r2, [pc, #216]	; (800690c <HAL_RCC_OscConfig+0x424>)
 8006832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006838:	f7fc fcc8 	bl	80031cc <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006840:	f7fc fcc4 	bl	80031cc <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e168      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006852:	4b2e      	ldr	r3, [pc, #184]	; (800690c <HAL_RCC_OscConfig+0x424>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0f0      	beq.n	8006840 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d106      	bne.n	8006874 <HAL_RCC_OscConfig+0x38c>
 8006866:	4b26      	ldr	r3, [pc, #152]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	4a25      	ldr	r2, [pc, #148]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	6713      	str	r3, [r2, #112]	; 0x70
 8006872:	e01c      	b.n	80068ae <HAL_RCC_OscConfig+0x3c6>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2b05      	cmp	r3, #5
 800687a:	d10c      	bne.n	8006896 <HAL_RCC_OscConfig+0x3ae>
 800687c:	4b20      	ldr	r3, [pc, #128]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 800687e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006880:	4a1f      	ldr	r2, [pc, #124]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 8006882:	f043 0304 	orr.w	r3, r3, #4
 8006886:	6713      	str	r3, [r2, #112]	; 0x70
 8006888:	4b1d      	ldr	r3, [pc, #116]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688c:	4a1c      	ldr	r2, [pc, #112]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 800688e:	f043 0301 	orr.w	r3, r3, #1
 8006892:	6713      	str	r3, [r2, #112]	; 0x70
 8006894:	e00b      	b.n	80068ae <HAL_RCC_OscConfig+0x3c6>
 8006896:	4b1a      	ldr	r3, [pc, #104]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 8006898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689a:	4a19      	ldr	r2, [pc, #100]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	6713      	str	r3, [r2, #112]	; 0x70
 80068a2:	4b17      	ldr	r3, [pc, #92]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 80068a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a6:	4a16      	ldr	r2, [pc, #88]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 80068a8:	f023 0304 	bic.w	r3, r3, #4
 80068ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d015      	beq.n	80068e2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b6:	f7fc fc89 	bl	80031cc <HAL_GetTick>
 80068ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068bc:	e00a      	b.n	80068d4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068be:	f7fc fc85 	bl	80031cc <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e127      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d4:	4b0a      	ldr	r3, [pc, #40]	; (8006900 <HAL_RCC_OscConfig+0x418>)
 80068d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0ee      	beq.n	80068be <HAL_RCC_OscConfig+0x3d6>
 80068e0:	e01c      	b.n	800691c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068e2:	f7fc fc73 	bl	80031cc <HAL_GetTick>
 80068e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e8:	e012      	b.n	8006910 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ea:	f7fc fc6f 	bl	80031cc <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d909      	bls.n	8006910 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e111      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
 8006900:	40023800 	.word	0x40023800
 8006904:	42470e80 	.word	0x42470e80
 8006908:	08012740 	.word	0x08012740
 800690c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006910:	4b86      	ldr	r3, [pc, #536]	; (8006b2c <HAL_RCC_OscConfig+0x644>)
 8006912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e6      	bne.n	80068ea <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d105      	bne.n	800692e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006922:	4b82      	ldr	r3, [pc, #520]	; (8006b2c <HAL_RCC_OscConfig+0x644>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	4a81      	ldr	r2, [pc, #516]	; (8006b2c <HAL_RCC_OscConfig+0x644>)
 8006928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800692c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00c      	beq.n	8006950 <HAL_RCC_OscConfig+0x468>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d008      	beq.n	8006950 <HAL_RCC_OscConfig+0x468>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d004      	beq.n	8006950 <HAL_RCC_OscConfig+0x468>
 8006946:	f240 11cd 	movw	r1, #461	; 0x1cd
 800694a:	4879      	ldr	r0, [pc, #484]	; (8006b30 <HAL_RCC_OscConfig+0x648>)
 800694c:	f7fb fadb 	bl	8001f06 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 80e4 	beq.w	8006b22 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800695a:	4b74      	ldr	r3, [pc, #464]	; (8006b2c <HAL_RCC_OscConfig+0x644>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 030c 	and.w	r3, r3, #12
 8006962:	2b08      	cmp	r3, #8
 8006964:	f000 80a5 	beq.w	8006ab2 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	2b02      	cmp	r3, #2
 800696e:	f040 8089 	bne.w	8006a84 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d009      	beq.n	800698e <HAL_RCC_OscConfig+0x4a6>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006982:	d004      	beq.n	800698e <HAL_RCC_OscConfig+0x4a6>
 8006984:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8006988:	4869      	ldr	r0, [pc, #420]	; (8006b30 <HAL_RCC_OscConfig+0x648>)
 800698a:	f7fb fabc 	bl	8001f06 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	2b3f      	cmp	r3, #63	; 0x3f
 8006994:	d904      	bls.n	80069a0 <HAL_RCC_OscConfig+0x4b8>
 8006996:	f240 11d7 	movw	r1, #471	; 0x1d7
 800699a:	4865      	ldr	r0, [pc, #404]	; (8006b30 <HAL_RCC_OscConfig+0x648>)
 800699c:	f7fb fab3 	bl	8001f06 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	2b31      	cmp	r3, #49	; 0x31
 80069a6:	d904      	bls.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80069b0:	d904      	bls.n	80069bc <HAL_RCC_OscConfig+0x4d4>
 80069b2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80069b6:	485e      	ldr	r0, [pc, #376]	; (8006b30 <HAL_RCC_OscConfig+0x648>)
 80069b8:	f7fb faa5 	bl	8001f06 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d010      	beq.n	80069e6 <HAL_RCC_OscConfig+0x4fe>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d00c      	beq.n	80069e6 <HAL_RCC_OscConfig+0x4fe>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	2b06      	cmp	r3, #6
 80069d2:	d008      	beq.n	80069e6 <HAL_RCC_OscConfig+0x4fe>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d004      	beq.n	80069e6 <HAL_RCC_OscConfig+0x4fe>
 80069dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80069e0:	4853      	ldr	r0, [pc, #332]	; (8006b30 <HAL_RCC_OscConfig+0x648>)
 80069e2:	f7fb fa90 	bl	8001f06 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d903      	bls.n	80069f6 <HAL_RCC_OscConfig+0x50e>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	2b0f      	cmp	r3, #15
 80069f4:	d904      	bls.n	8006a00 <HAL_RCC_OscConfig+0x518>
 80069f6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80069fa:	484d      	ldr	r0, [pc, #308]	; (8006b30 <HAL_RCC_OscConfig+0x648>)
 80069fc:	f7fb fa83 	bl	8001f06 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a00:	4b4c      	ldr	r3, [pc, #304]	; (8006b34 <HAL_RCC_OscConfig+0x64c>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a06:	f7fc fbe1 	bl	80031cc <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a0e:	f7fc fbdd 	bl	80031cc <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e081      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a20:	4b42      	ldr	r3, [pc, #264]	; (8006b2c <HAL_RCC_OscConfig+0x644>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1f0      	bne.n	8006a0e <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	019b      	lsls	r3, r3, #6
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	085b      	lsrs	r3, r3, #1
 8006a44:	3b01      	subs	r3, #1
 8006a46:	041b      	lsls	r3, r3, #16
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	061b      	lsls	r3, r3, #24
 8006a50:	4936      	ldr	r1, [pc, #216]	; (8006b2c <HAL_RCC_OscConfig+0x644>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a56:	4b37      	ldr	r3, [pc, #220]	; (8006b34 <HAL_RCC_OscConfig+0x64c>)
 8006a58:	2201      	movs	r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5c:	f7fc fbb6 	bl	80031cc <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a64:	f7fc fbb2 	bl	80031cc <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e056      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a76:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <HAL_RCC_OscConfig+0x644>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f0      	beq.n	8006a64 <HAL_RCC_OscConfig+0x57c>
 8006a82:	e04e      	b.n	8006b22 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a84:	4b2b      	ldr	r3, [pc, #172]	; (8006b34 <HAL_RCC_OscConfig+0x64c>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8a:	f7fc fb9f 	bl	80031cc <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a92:	f7fc fb9b 	bl	80031cc <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e03f      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa4:	4b21      	ldr	r3, [pc, #132]	; (8006b2c <HAL_RCC_OscConfig+0x644>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f0      	bne.n	8006a92 <HAL_RCC_OscConfig+0x5aa>
 8006ab0:	e037      	b.n	8006b22 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e032      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006abe:	4b1b      	ldr	r3, [pc, #108]	; (8006b2c <HAL_RCC_OscConfig+0x644>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d028      	beq.n	8006b1e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d121      	bne.n	8006b1e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d11a      	bne.n	8006b1e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006aee:	4013      	ands	r3, r2
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006af4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d111      	bne.n	8006b1e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	3b01      	subs	r3, #1
 8006b08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d107      	bne.n	8006b1e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d001      	beq.n	8006b22 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	08012740 	.word	0x08012740
 8006b34:	42470060 	.word	0x42470060

08006b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e174      	b.n	8006e36 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_RCC_ClockConfig+0x24>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b0f      	cmp	r3, #15
 8006b5a:	d904      	bls.n	8006b66 <HAL_RCC_ClockConfig+0x2e>
 8006b5c:	f240 215a 	movw	r1, #602	; 0x25a
 8006b60:	487b      	ldr	r0, [pc, #492]	; (8006d50 <HAL_RCC_ClockConfig+0x218>)
 8006b62:	f7fb f9d0 	bl	8001f06 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d019      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x68>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d016      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x68>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d013      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x68>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d010      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x68>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d00d      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x68>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b05      	cmp	r3, #5
 8006b88:	d00a      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x68>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b06      	cmp	r3, #6
 8006b8e:	d007      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x68>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b07      	cmp	r3, #7
 8006b94:	d004      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x68>
 8006b96:	f240 215b 	movw	r1, #603	; 0x25b
 8006b9a:	486d      	ldr	r0, [pc, #436]	; (8006d50 <HAL_RCC_ClockConfig+0x218>)
 8006b9c:	f7fb f9b3 	bl	8001f06 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ba0:	4b6c      	ldr	r3, [pc, #432]	; (8006d54 <HAL_RCC_ClockConfig+0x21c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d90c      	bls.n	8006bc8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bae:	4b69      	ldr	r3, [pc, #420]	; (8006d54 <HAL_RCC_ClockConfig+0x21c>)
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb6:	4b67      	ldr	r3, [pc, #412]	; (8006d54 <HAL_RCC_ClockConfig+0x21c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d001      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e136      	b.n	8006e36 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d049      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006be0:	4b5d      	ldr	r3, [pc, #372]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	4a5c      	ldr	r2, [pc, #368]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bf8:	4b57      	ldr	r3, [pc, #348]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	4a56      	ldr	r2, [pc, #344]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006bfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d024      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x11e>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b80      	cmp	r3, #128	; 0x80
 8006c12:	d020      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x11e>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2b90      	cmp	r3, #144	; 0x90
 8006c1a:	d01c      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x11e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2ba0      	cmp	r3, #160	; 0xa0
 8006c22:	d018      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x11e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	2bb0      	cmp	r3, #176	; 0xb0
 8006c2a:	d014      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x11e>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	2bc0      	cmp	r3, #192	; 0xc0
 8006c32:	d010      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x11e>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	2bd0      	cmp	r3, #208	; 0xd0
 8006c3a:	d00c      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x11e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2be0      	cmp	r3, #224	; 0xe0
 8006c42:	d008      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x11e>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2bf0      	cmp	r3, #240	; 0xf0
 8006c4a:	d004      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x11e>
 8006c4c:	f240 217e 	movw	r1, #638	; 0x27e
 8006c50:	483f      	ldr	r0, [pc, #252]	; (8006d50 <HAL_RCC_ClockConfig+0x218>)
 8006c52:	f7fb f958 	bl	8001f06 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c56:	4b40      	ldr	r3, [pc, #256]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	493d      	ldr	r1, [pc, #244]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d059      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d010      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x166>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d00c      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x166>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d008      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x166>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d004      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x166>
 8006c94:	f240 2185 	movw	r1, #645	; 0x285
 8006c98:	482d      	ldr	r0, [pc, #180]	; (8006d50 <HAL_RCC_ClockConfig+0x218>)
 8006c9a:	f7fb f934 	bl	8001f06 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d107      	bne.n	8006cb6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca6:	4b2c      	ldr	r3, [pc, #176]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d119      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e0bf      	b.n	8006e36 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d003      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d107      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cc6:	4b24      	ldr	r3, [pc, #144]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e0af      	b.n	8006e36 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd6:	4b20      	ldr	r3, [pc, #128]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e0a7      	b.n	8006e36 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ce6:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f023 0203 	bic.w	r2, r3, #3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4919      	ldr	r1, [pc, #100]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cf8:	f7fc fa68 	bl	80031cc <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cfe:	e00a      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d00:	f7fc fa64 	bl	80031cc <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e08f      	b.n	8006e36 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <HAL_RCC_ClockConfig+0x220>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 020c 	and.w	r2, r3, #12
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1eb      	bne.n	8006d00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <HAL_RCC_ClockConfig+0x21c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d212      	bcs.n	8006d5c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d36:	4b07      	ldr	r3, [pc, #28]	; (8006d54 <HAL_RCC_ClockConfig+0x21c>)
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCC_ClockConfig+0x21c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d007      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e072      	b.n	8006e36 <HAL_RCC_ClockConfig+0x2fe>
 8006d50:	08012740 	.word	0x08012740
 8006d54:	40023c00 	.word	0x40023c00
 8006d58:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d025      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d018      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x26a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d78:	d013      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x26a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d82:	d00e      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x26a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006d8c:	d009      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x26a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006d96:	d004      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x26a>
 8006d98:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006d9c:	4828      	ldr	r0, [pc, #160]	; (8006e40 <HAL_RCC_ClockConfig+0x308>)
 8006d9e:	f7fb f8b2 	bl	8001f06 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006da2:	4b28      	ldr	r3, [pc, #160]	; (8006e44 <HAL_RCC_ClockConfig+0x30c>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	4925      	ldr	r1, [pc, #148]	; (8006e44 <HAL_RCC_ClockConfig+0x30c>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d026      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d018      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x2c2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd0:	d013      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x2c2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006dda:	d00e      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x2c2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006de4:	d009      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x2c2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006dee:	d004      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x2c2>
 8006df0:	f240 21ca 	movw	r1, #714	; 0x2ca
 8006df4:	4812      	ldr	r0, [pc, #72]	; (8006e40 <HAL_RCC_ClockConfig+0x308>)
 8006df6:	f7fb f886 	bl	8001f06 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <HAL_RCC_ClockConfig+0x30c>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	490e      	ldr	r1, [pc, #56]	; (8006e44 <HAL_RCC_ClockConfig+0x30c>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e0e:	f000 f821 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 8006e12:	4602      	mov	r2, r0
 8006e14:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <HAL_RCC_ClockConfig+0x30c>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	091b      	lsrs	r3, r3, #4
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	490a      	ldr	r1, [pc, #40]	; (8006e48 <HAL_RCC_ClockConfig+0x310>)
 8006e20:	5ccb      	ldrb	r3, [r1, r3]
 8006e22:	fa22 f303 	lsr.w	r3, r2, r3
 8006e26:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <HAL_RCC_ClockConfig+0x314>)
 8006e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <HAL_RCC_ClockConfig+0x318>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fb fc8e 	bl	8002750 <HAL_InitTick>

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	08012740 	.word	0x08012740
 8006e44:	40023800 	.word	0x40023800
 8006e48:	08014adc 	.word	0x08014adc
 8006e4c:	2000008c 	.word	0x2000008c
 8006e50:	20000090 	.word	0x20000090

08006e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e58:	b090      	sub	sp, #64	; 0x40
 8006e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e60:	2300      	movs	r3, #0
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e64:	2300      	movs	r3, #0
 8006e66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e6c:	4b59      	ldr	r3, [pc, #356]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f003 030c 	and.w	r3, r3, #12
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d00d      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0x40>
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	f200 80a1 	bhi.w	8006fc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <HAL_RCC_GetSysClockFreq+0x34>
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d003      	beq.n	8006e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8006e86:	e09b      	b.n	8006fc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e88:	4b53      	ldr	r3, [pc, #332]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e8a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006e8c:	e09b      	b.n	8006fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e8e:	4b53      	ldr	r3, [pc, #332]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8006e90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e92:	e098      	b.n	8006fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e94:	4b4f      	ldr	r3, [pc, #316]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e9e:	4b4d      	ldr	r3, [pc, #308]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d028      	beq.n	8006efc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eaa:	4b4a      	ldr	r3, [pc, #296]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	099b      	lsrs	r3, r3, #6
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	623b      	str	r3, [r7, #32]
 8006eb4:	627a      	str	r2, [r7, #36]	; 0x24
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4b47      	ldr	r3, [pc, #284]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8006ec0:	fb03 f201 	mul.w	r2, r3, r1
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	fb00 f303 	mul.w	r3, r0, r3
 8006eca:	4413      	add	r3, r2
 8006ecc:	4a43      	ldr	r2, [pc, #268]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8006ece:	fba0 1202 	umull	r1, r2, r0, r2
 8006ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ed4:	460a      	mov	r2, r1
 8006ed6:	62ba      	str	r2, [r7, #40]	; 0x28
 8006ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eda:	4413      	add	r3, r2
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	61bb      	str	r3, [r7, #24]
 8006ee4:	61fa      	str	r2, [r7, #28]
 8006ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006eea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006eee:	f7f9 fcd5 	bl	800089c <__aeabi_uldivmod>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006efa:	e053      	b.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006efc:	4b35      	ldr	r3, [pc, #212]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	099b      	lsrs	r3, r3, #6
 8006f02:	2200      	movs	r2, #0
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	617a      	str	r2, [r7, #20]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006f0e:	f04f 0b00 	mov.w	fp, #0
 8006f12:	4652      	mov	r2, sl
 8006f14:	465b      	mov	r3, fp
 8006f16:	f04f 0000 	mov.w	r0, #0
 8006f1a:	f04f 0100 	mov.w	r1, #0
 8006f1e:	0159      	lsls	r1, r3, #5
 8006f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f24:	0150      	lsls	r0, r2, #5
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	ebb2 080a 	subs.w	r8, r2, sl
 8006f2e:	eb63 090b 	sbc.w	r9, r3, fp
 8006f32:	f04f 0200 	mov.w	r2, #0
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006f3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006f42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006f46:	ebb2 0408 	subs.w	r4, r2, r8
 8006f4a:	eb63 0509 	sbc.w	r5, r3, r9
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	00eb      	lsls	r3, r5, #3
 8006f58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f5c:	00e2      	lsls	r2, r4, #3
 8006f5e:	4614      	mov	r4, r2
 8006f60:	461d      	mov	r5, r3
 8006f62:	eb14 030a 	adds.w	r3, r4, sl
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	eb45 030b 	adc.w	r3, r5, fp
 8006f6c:	607b      	str	r3, [r7, #4]
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f04f 0300 	mov.w	r3, #0
 8006f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	028b      	lsls	r3, r1, #10
 8006f7e:	4621      	mov	r1, r4
 8006f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f84:	4621      	mov	r1, r4
 8006f86:	028a      	lsls	r2, r1, #10
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8e:	2200      	movs	r2, #0
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	60fa      	str	r2, [r7, #12]
 8006f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f98:	f7f9 fc80 	bl	800089c <__aeabi_uldivmod>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	0c1b      	lsrs	r3, r3, #16
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	3301      	adds	r3, #1
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fbe:	e002      	b.n	8006fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006fc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3740      	adds	r7, #64	; 0x40
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	00f42400 	.word	0x00f42400
 8006fdc:	017d7840 	.word	0x017d7840

08006fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fe4:	4b03      	ldr	r3, [pc, #12]	; (8006ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	2000008c 	.word	0x2000008c

08006ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ffc:	f7ff fff0 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 8007000:	4602      	mov	r2, r0
 8007002:	4b05      	ldr	r3, [pc, #20]	; (8007018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	0a9b      	lsrs	r3, r3, #10
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	4903      	ldr	r1, [pc, #12]	; (800701c <HAL_RCC_GetPCLK1Freq+0x24>)
 800700e:	5ccb      	ldrb	r3, [r1, r3]
 8007010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007014:	4618      	mov	r0, r3
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40023800 	.word	0x40023800
 800701c:	08014aec 	.word	0x08014aec

08007020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007024:	f7ff ffdc 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 8007028:	4602      	mov	r2, r0
 800702a:	4b05      	ldr	r3, [pc, #20]	; (8007040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	0b5b      	lsrs	r3, r3, #13
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	4903      	ldr	r1, [pc, #12]	; (8007044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007036:	5ccb      	ldrb	r3, [r1, r3]
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800703c:	4618      	mov	r0, r3
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40023800 	.word	0x40023800
 8007044:	08014aec 	.word	0x08014aec

08007048 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	220f      	movs	r2, #15
 8007056:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007058:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <HAL_RCC_GetClockConfig+0x5c>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 0203 	and.w	r2, r3, #3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007064:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007070:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800707c:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <HAL_RCC_GetClockConfig+0x5c>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	08db      	lsrs	r3, r3, #3
 8007082:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <HAL_RCC_GetClockConfig+0x60>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0207 	and.w	r2, r3, #7
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	601a      	str	r2, [r3, #0]
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40023800 	.word	0x40023800
 80070a8:	40023c00 	.word	0x40023c00

080070ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x20>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b0f      	cmp	r3, #15
 80070ca:	d904      	bls.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80070cc:	f640 11d7 	movw	r1, #2519	; 0x9d7
 80070d0:	4834      	ldr	r0, [pc, #208]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80070d2:	f7fa ff18 	bl	8001f06 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d105      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d066      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d903      	bls.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	2b07      	cmp	r3, #7
 80070fc:	d904      	bls.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80070fe:	f640 11de 	movw	r1, #2526	; 0x9de
 8007102:	4828      	ldr	r0, [pc, #160]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007104:	f7fa feff 	bl	8001f06 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b31      	cmp	r3, #49	; 0x31
 800710e:	d904      	bls.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007118:	d904      	bls.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800711a:	f640 11df 	movw	r1, #2527	; 0x9df
 800711e:	4821      	ldr	r0, [pc, #132]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007120:	f7fa fef1 	bl	8001f06 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d903      	bls.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b3f      	cmp	r3, #63	; 0x3f
 8007132:	d904      	bls.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8007134:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8007138:	481a      	ldr	r0, [pc, #104]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800713a:	f7fa fee4 	bl	8001f06 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800713e:	4b1a      	ldr	r3, [pc, #104]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007144:	f7fc f842 	bl	80031cc <HAL_GetTick>
 8007148:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800714a:	e008      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800714c:	f7fc f83e 	bl	80031cc <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e1b3      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800715e:	4b13      	ldr	r3, [pc, #76]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f0      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	019b      	lsls	r3, r3, #6
 8007174:	431a      	orrs	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	071b      	lsls	r3, r3, #28
 800717c:	490b      	ldr	r1, [pc, #44]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007184:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8007186:	2201      	movs	r2, #1
 8007188:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800718a:	f7fc f81f 	bl	80031cc <HAL_GetTick>
 800718e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007190:	e00e      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007192:	f7fc f81b 	bl	80031cc <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d907      	bls.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e190      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071a4:	08012778 	.word	0x08012778
 80071a8:	42470068 	.word	0x42470068
 80071ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071b0:	4b88      	ldr	r3, [pc, #544]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0ea      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 8173 	beq.w	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d2:	f000 80a6 	beq.w	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071de:	f000 80a0 	beq.w	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	4a7c      	ldr	r2, [pc, #496]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	f000 809a 	beq.w	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	4a7a      	ldr	r2, [pc, #488]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	f000 8094 	beq.w	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	4a78      	ldr	r2, [pc, #480]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007200:	4293      	cmp	r3, r2
 8007202:	f000 808e 	beq.w	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	4a76      	ldr	r2, [pc, #472]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800720c:	4293      	cmp	r3, r2
 800720e:	f000 8088 	beq.w	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	4a74      	ldr	r2, [pc, #464]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	f000 8082 	beq.w	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	4a72      	ldr	r2, [pc, #456]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d07c      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	4a70      	ldr	r2, [pc, #448]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d077      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	4a6f      	ldr	r2, [pc, #444]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d072      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	4a6d      	ldr	r2, [pc, #436]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d06d      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	4a6c      	ldr	r2, [pc, #432]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d068      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	4a6a      	ldr	r2, [pc, #424]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d063      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	4a69      	ldr	r2, [pc, #420]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d05e      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	4a67      	ldr	r2, [pc, #412]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d059      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	4a66      	ldr	r2, [pc, #408]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d054      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	4a64      	ldr	r2, [pc, #400]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d04f      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	4a63      	ldr	r2, [pc, #396]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d04a      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	4a61      	ldr	r2, [pc, #388]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d045      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	4a60      	ldr	r2, [pc, #384]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d040      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	4a5e      	ldr	r2, [pc, #376]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d03b      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	4a5d      	ldr	r2, [pc, #372]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d036      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	4a5b      	ldr	r2, [pc, #364]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d031      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	4a5a      	ldr	r2, [pc, #360]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x380>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d02c      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	4a58      	ldr	r2, [pc, #352]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d027      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	4a57      	ldr	r2, [pc, #348]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d022      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	4a55      	ldr	r2, [pc, #340]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d01d      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	4a54      	ldr	r2, [pc, #336]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d018      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	4a52      	ldr	r2, [pc, #328]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	4a51      	ldr	r2, [pc, #324]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00e      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	4a4f      	ldr	r2, [pc, #316]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d009      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	4a4e      	ldr	r2, [pc, #312]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d004      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007318:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 800731c:	484c      	ldr	r0, [pc, #304]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800731e:	f7fa fdf2 	bl	8001f06 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	4b2b      	ldr	r3, [pc, #172]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	4a2a      	ldr	r2, [pc, #168]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800732c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007330:	6413      	str	r3, [r2, #64]	; 0x40
 8007332:	4b28      	ldr	r3, [pc, #160]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800733e:	4b45      	ldr	r3, [pc, #276]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a44      	ldr	r2, [pc, #272]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007348:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800734a:	f7fb ff3f 	bl	80031cc <HAL_GetTick>
 800734e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007350:	e008      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007352:	f7fb ff3b 	bl	80031cc <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e0b0      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007364:	4b3b      	ldr	r3, [pc, #236]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007370:	4b18      	ldr	r3, [pc, #96]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007378:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d073      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	429a      	cmp	r2, r3
 800738c:	d06c      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800738e:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007396:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007398:	4b2f      	ldr	r3, [pc, #188]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800739a:	2201      	movs	r2, #1
 800739c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800739e:	4b2e      	ldr	r3, [pc, #184]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073a4:	4a0b      	ldr	r2, [pc, #44]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073aa:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80073ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d158      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073b6:	f7fb ff09 	bl	80031cc <HAL_GetTick>
 80073ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073bc:	e04e      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073be:	f7fb ff05 	bl	80031cc <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d945      	bls.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e078      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80073d4:	40023800 	.word	0x40023800
 80073d8:	00020300 	.word	0x00020300
 80073dc:	00030300 	.word	0x00030300
 80073e0:	00040300 	.word	0x00040300
 80073e4:	00050300 	.word	0x00050300
 80073e8:	00060300 	.word	0x00060300
 80073ec:	00070300 	.word	0x00070300
 80073f0:	00080300 	.word	0x00080300
 80073f4:	00090300 	.word	0x00090300
 80073f8:	000a0300 	.word	0x000a0300
 80073fc:	000b0300 	.word	0x000b0300
 8007400:	000c0300 	.word	0x000c0300
 8007404:	000d0300 	.word	0x000d0300
 8007408:	000e0300 	.word	0x000e0300
 800740c:	000f0300 	.word	0x000f0300
 8007410:	00100300 	.word	0x00100300
 8007414:	00110300 	.word	0x00110300
 8007418:	00120300 	.word	0x00120300
 800741c:	00130300 	.word	0x00130300
 8007420:	00140300 	.word	0x00140300
 8007424:	00150300 	.word	0x00150300
 8007428:	00160300 	.word	0x00160300
 800742c:	00170300 	.word	0x00170300
 8007430:	00180300 	.word	0x00180300
 8007434:	00190300 	.word	0x00190300
 8007438:	001a0300 	.word	0x001a0300
 800743c:	001b0300 	.word	0x001b0300
 8007440:	001c0300 	.word	0x001c0300
 8007444:	001d0300 	.word	0x001d0300
 8007448:	001e0300 	.word	0x001e0300
 800744c:	001f0300 	.word	0x001f0300
 8007450:	08012778 	.word	0x08012778
 8007454:	40007000 	.word	0x40007000
 8007458:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800745c:	4b1c      	ldr	r3, [pc, #112]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0aa      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007474:	d10d      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007476:	4b16      	ldr	r3, [pc, #88]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748a:	4911      	ldr	r1, [pc, #68]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800748c:	4313      	orrs	r3, r2
 800748e:	608b      	str	r3, [r1, #8]
 8007490:	e005      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007492:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	4a0e      	ldr	r2, [pc, #56]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007498:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800749c:	6093      	str	r3, [r2, #8]
 800749e:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80074a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074aa:	4909      	ldr	r1, [pc, #36]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7d1a      	ldrb	r2, [r3, #20]
 80074c0:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80074c2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	40023800 	.word	0x40023800
 80074d4:	424711e0 	.word	0x424711e0

080074d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e0c4      	b.n	8007678 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a63      	ldr	r2, [pc, #396]	; (8007680 <HAL_RTC_Init+0x1a8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d004      	beq.n	8007502 <HAL_RTC_Init+0x2a>
 80074f8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80074fc:	4861      	ldr	r0, [pc, #388]	; (8007684 <HAL_RTC_Init+0x1ac>)
 80074fe:	f7fa fd02 	bl	8001f06 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2b40      	cmp	r3, #64	; 0x40
 8007508:	d008      	beq.n	800751c <HAL_RTC_Init+0x44>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <HAL_RTC_Init+0x44>
 8007512:	f240 1105 	movw	r1, #261	; 0x105
 8007516:	485b      	ldr	r0, [pc, #364]	; (8007684 <HAL_RTC_Init+0x1ac>)
 8007518:	f7fa fcf5 	bl	8001f06 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b7f      	cmp	r3, #127	; 0x7f
 8007522:	d904      	bls.n	800752e <HAL_RTC_Init+0x56>
 8007524:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007528:	4856      	ldr	r0, [pc, #344]	; (8007684 <HAL_RTC_Init+0x1ac>)
 800752a:	f7fa fcec 	bl	8001f06 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007536:	d304      	bcc.n	8007542 <HAL_RTC_Init+0x6a>
 8007538:	f240 1107 	movw	r1, #263	; 0x107
 800753c:	4851      	ldr	r0, [pc, #324]	; (8007684 <HAL_RTC_Init+0x1ac>)
 800753e:	f7fa fce2 	bl	8001f06 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d013      	beq.n	8007572 <HAL_RTC_Init+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007552:	d00e      	beq.n	8007572 <HAL_RTC_Init+0x9a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800755c:	d009      	beq.n	8007572 <HAL_RTC_Init+0x9a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007566:	d004      	beq.n	8007572 <HAL_RTC_Init+0x9a>
 8007568:	f44f 7184 	mov.w	r1, #264	; 0x108
 800756c:	4845      	ldr	r0, [pc, #276]	; (8007684 <HAL_RTC_Init+0x1ac>)
 800756e:	f7fa fcca 	bl	8001f06 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <HAL_RTC_Init+0xb6>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007582:	d004      	beq.n	800758e <HAL_RTC_Init+0xb6>
 8007584:	f240 1109 	movw	r1, #265	; 0x109
 8007588:	483e      	ldr	r0, [pc, #248]	; (8007684 <HAL_RTC_Init+0x1ac>)
 800758a:	f7fa fcbc 	bl	8001f06 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d009      	beq.n	80075aa <HAL_RTC_Init+0xd2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800759e:	d004      	beq.n	80075aa <HAL_RTC_Init+0xd2>
 80075a0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80075a4:	4837      	ldr	r0, [pc, #220]	; (8007684 <HAL_RTC_Init+0x1ac>)
 80075a6:	f7fa fcae 	bl	8001f06 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	7f5b      	ldrb	r3, [r3, #29]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d105      	bne.n	80075c0 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fa fd08 	bl	8001fd0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	22ca      	movs	r2, #202	; 0xca
 80075cc:	625a      	str	r2, [r3, #36]	; 0x24
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2253      	movs	r2, #83	; 0x53
 80075d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fad2 	bl	8007b80 <RTC_EnterInitMode>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d12c      	bne.n	8007640 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6899      	ldr	r1, [r3, #8]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	68d2      	ldr	r2, [r2, #12]
 8007620:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6919      	ldr	r1, [r3, #16]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	041a      	lsls	r2, r3, #16
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fad9 	bl	8007bee <RTC_ExitInitMode>
 800763c:	4603      	mov	r3, r0
 800763e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d113      	bne.n	800766e <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007654:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699a      	ldr	r2, [r3, #24]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	22ff      	movs	r2, #255	; 0xff
 8007674:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	40002800 	.word	0x40002800
 8007684:	080127b4 	.word	0x080127b4

08007688 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d007      	beq.n	80076ae <HAL_RTC_SetTime+0x26>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d004      	beq.n	80076ae <HAL_RTC_SetTime+0x26>
 80076a4:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 80076a8:	489a      	ldr	r0, [pc, #616]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 80076aa:	f7fa fc2c 	bl	8001f06 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076b6:	d00d      	beq.n	80076d4 <HAL_RTC_SetTime+0x4c>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c0:	d008      	beq.n	80076d4 <HAL_RTC_SetTime+0x4c>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <HAL_RTC_SetTime+0x4c>
 80076ca:	f240 21b5 	movw	r1, #693	; 0x2b5
 80076ce:	4891      	ldr	r0, [pc, #580]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 80076d0:	f7fa fc19 	bl	8001f06 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d009      	beq.n	80076f0 <HAL_RTC_SetTime+0x68>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076e4:	d004      	beq.n	80076f0 <HAL_RTC_SetTime+0x68>
 80076e6:	f240 21b6 	movw	r1, #694	; 0x2b6
 80076ea:	488a      	ldr	r0, [pc, #552]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 80076ec:	f7fa fc0b 	bl	8001f06 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	7f1b      	ldrb	r3, [r3, #28]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_RTC_SetTime+0x74>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e107      	b.n	800790c <HAL_RTC_SetTime+0x284>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2202      	movs	r2, #2
 8007706:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d15c      	bne.n	80077c8 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01a      	beq.n	8007752 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_RTC_SetTime+0xa4>
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b0c      	cmp	r3, #12
 800772a:	d904      	bls.n	8007736 <HAL_RTC_SetTime+0xae>
 800772c:	f240 21c1 	movw	r1, #705	; 0x2c1
 8007730:	4878      	ldr	r0, [pc, #480]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 8007732:	f7fa fbe8 	bl	8001f06 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	78db      	ldrb	r3, [r3, #3]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d015      	beq.n	800776a <HAL_RTC_SetTime+0xe2>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	78db      	ldrb	r3, [r3, #3]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d011      	beq.n	800776a <HAL_RTC_SetTime+0xe2>
 8007746:	f240 21c2 	movw	r1, #706	; 0x2c2
 800774a:	4872      	ldr	r0, [pc, #456]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 800774c:	f7fa fbdb 	bl	8001f06 <assert_failed>
 8007750:	e00b      	b.n	800776a <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2200      	movs	r2, #0
 8007756:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b17      	cmp	r3, #23
 800775e:	d904      	bls.n	800776a <HAL_RTC_SetTime+0xe2>
 8007760:	f240 21c7 	movw	r1, #711	; 0x2c7
 8007764:	486b      	ldr	r0, [pc, #428]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 8007766:	f7fa fbce 	bl	8001f06 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	785b      	ldrb	r3, [r3, #1]
 800776e:	2b3b      	cmp	r3, #59	; 0x3b
 8007770:	d904      	bls.n	800777c <HAL_RTC_SetTime+0xf4>
 8007772:	f240 21c9 	movw	r1, #713	; 0x2c9
 8007776:	4867      	ldr	r0, [pc, #412]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 8007778:	f7fa fbc5 	bl	8001f06 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	789b      	ldrb	r3, [r3, #2]
 8007780:	2b3b      	cmp	r3, #59	; 0x3b
 8007782:	d904      	bls.n	800778e <HAL_RTC_SetTime+0x106>
 8007784:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007788:	4862      	ldr	r0, [pc, #392]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 800778a:	f7fa fbbc 	bl	8001f06 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fa50 	bl	8007c38 <RTC_ByteToBcd2>
 8007798:	4603      	mov	r3, r0
 800779a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	785b      	ldrb	r3, [r3, #1]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 fa49 	bl	8007c38 <RTC_ByteToBcd2>
 80077a6:	4603      	mov	r3, r0
 80077a8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077aa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	789b      	ldrb	r3, [r3, #2]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fa41 	bl	8007c38 <RTC_ByteToBcd2>
 80077b6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077b8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	78db      	ldrb	r3, [r3, #3]
 80077c0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	e062      	b.n	800788e <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d022      	beq.n	800781c <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fa49 	bl	8007c72 <RTC_Bcd2ToByte>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d007      	beq.n	80077f6 <HAL_RTC_SetTime+0x16e>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 fa41 	bl	8007c72 <RTC_Bcd2ToByte>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b0c      	cmp	r3, #12
 80077f4:	d904      	bls.n	8007800 <HAL_RTC_SetTime+0x178>
 80077f6:	f240 21d5 	movw	r1, #725	; 0x2d5
 80077fa:	4846      	ldr	r0, [pc, #280]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 80077fc:	f7fa fb83 	bl	8001f06 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	78db      	ldrb	r3, [r3, #3]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d019      	beq.n	800783c <HAL_RTC_SetTime+0x1b4>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	78db      	ldrb	r3, [r3, #3]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d015      	beq.n	800783c <HAL_RTC_SetTime+0x1b4>
 8007810:	f240 21d6 	movw	r1, #726	; 0x2d6
 8007814:	483f      	ldr	r0, [pc, #252]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 8007816:	f7fa fb76 	bl	8001f06 <assert_failed>
 800781a:	e00f      	b.n	800783c <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2200      	movs	r2, #0
 8007820:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fa23 	bl	8007c72 <RTC_Bcd2ToByte>
 800782c:	4603      	mov	r3, r0
 800782e:	2b17      	cmp	r3, #23
 8007830:	d904      	bls.n	800783c <HAL_RTC_SetTime+0x1b4>
 8007832:	f240 21db 	movw	r1, #731	; 0x2db
 8007836:	4837      	ldr	r0, [pc, #220]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 8007838:	f7fa fb65 	bl	8001f06 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	785b      	ldrb	r3, [r3, #1]
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fa16 	bl	8007c72 <RTC_Bcd2ToByte>
 8007846:	4603      	mov	r3, r0
 8007848:	2b3b      	cmp	r3, #59	; 0x3b
 800784a:	d904      	bls.n	8007856 <HAL_RTC_SetTime+0x1ce>
 800784c:	f240 21dd 	movw	r1, #733	; 0x2dd
 8007850:	4830      	ldr	r0, [pc, #192]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 8007852:	f7fa fb58 	bl	8001f06 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	789b      	ldrb	r3, [r3, #2]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fa09 	bl	8007c72 <RTC_Bcd2ToByte>
 8007860:	4603      	mov	r3, r0
 8007862:	2b3b      	cmp	r3, #59	; 0x3b
 8007864:	d904      	bls.n	8007870 <HAL_RTC_SetTime+0x1e8>
 8007866:	f240 21de 	movw	r1, #734	; 0x2de
 800786a:	482a      	ldr	r0, [pc, #168]	; (8007914 <HAL_RTC_SetTime+0x28c>)
 800786c:	f7fa fb4b 	bl	8001f06 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800787c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007882:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	78db      	ldrb	r3, [r3, #3]
 8007888:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	22ca      	movs	r2, #202	; 0xca
 8007894:	625a      	str	r2, [r3, #36]	; 0x24
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2253      	movs	r2, #83	; 0x53
 800789c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f96e 	bl	8007b80 <RTC_EnterInitMode>
 80078a4:	4603      	mov	r3, r0
 80078a6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80078a8:	7cfb      	ldrb	r3, [r7, #19]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d120      	bne.n	80078f0 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80078b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6899      	ldr	r1, [r3, #8]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	431a      	orrs	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f981 	bl	8007bee <RTC_ExitInitMode>
 80078ec:	4603      	mov	r3, r0
 80078ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80078f0:	7cfb      	ldrb	r3, [r7, #19]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d102      	bne.n	80078fc <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	22ff      	movs	r2, #255	; 0xff
 8007902:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	771a      	strb	r2, [r3, #28]

  return status;
 800790a:	7cfb      	ldrb	r3, [r7, #19]
}
 800790c:	4618      	mov	r0, r3
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	bd90      	pop	{r4, r7, pc}
 8007914:	080127b4 	.word	0x080127b4

08007918 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007918:	b590      	push	{r4, r7, lr}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <HAL_RTC_SetDate+0x26>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d004      	beq.n	800793e <HAL_RTC_SetDate+0x26>
 8007934:	f240 3153 	movw	r1, #851	; 0x353
 8007938:	487c      	ldr	r0, [pc, #496]	; (8007b2c <HAL_RTC_SetDate+0x214>)
 800793a:	f7fa fae4 	bl	8001f06 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	7f1b      	ldrb	r3, [r3, #28]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <HAL_RTC_SetDate+0x32>
 8007946:	2302      	movs	r3, #2
 8007948:	e0ec      	b.n	8007b24 <HAL_RTC_SetDate+0x20c>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2202      	movs	r2, #2
 8007954:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10e      	bne.n	800797a <HAL_RTC_SetDate+0x62>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	785b      	ldrb	r3, [r3, #1]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b00      	cmp	r3, #0
 8007966:	d008      	beq.n	800797a <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	f023 0310 	bic.w	r3, r3, #16
 8007970:	b2db      	uxtb	r3, r3
 8007972:	330a      	adds	r3, #10
 8007974:	b2da      	uxtb	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d01c      	beq.n	80079bc <HAL_RTC_SetDate+0xa4>
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b02      	cmp	r3, #2
 8007988:	d018      	beq.n	80079bc <HAL_RTC_SetDate+0xa4>
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b03      	cmp	r3, #3
 8007990:	d014      	beq.n	80079bc <HAL_RTC_SetDate+0xa4>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b04      	cmp	r3, #4
 8007998:	d010      	beq.n	80079bc <HAL_RTC_SetDate+0xa4>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b05      	cmp	r3, #5
 80079a0:	d00c      	beq.n	80079bc <HAL_RTC_SetDate+0xa4>
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2b06      	cmp	r3, #6
 80079a8:	d008      	beq.n	80079bc <HAL_RTC_SetDate+0xa4>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b07      	cmp	r3, #7
 80079b0:	d004      	beq.n	80079bc <HAL_RTC_SetDate+0xa4>
 80079b2:	f240 315f 	movw	r1, #863	; 0x35f
 80079b6:	485d      	ldr	r0, [pc, #372]	; (8007b2c <HAL_RTC_SetDate+0x214>)
 80079b8:	f7fa faa5 	bl	8001f06 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d13f      	bne.n	8007a42 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	78db      	ldrb	r3, [r3, #3]
 80079c6:	2b63      	cmp	r3, #99	; 0x63
 80079c8:	d904      	bls.n	80079d4 <HAL_RTC_SetDate+0xbc>
 80079ca:	f240 3163 	movw	r1, #867	; 0x363
 80079ce:	4857      	ldr	r0, [pc, #348]	; (8007b2c <HAL_RTC_SetDate+0x214>)
 80079d0:	f7fa fa99 	bl	8001f06 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <HAL_RTC_SetDate+0xcc>
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2b0c      	cmp	r3, #12
 80079e2:	d904      	bls.n	80079ee <HAL_RTC_SetDate+0xd6>
 80079e4:	f44f 7159 	mov.w	r1, #868	; 0x364
 80079e8:	4850      	ldr	r0, [pc, #320]	; (8007b2c <HAL_RTC_SetDate+0x214>)
 80079ea:	f7fa fa8c 	bl	8001f06 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	789b      	ldrb	r3, [r3, #2]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_RTC_SetDate+0xe6>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	789b      	ldrb	r3, [r3, #2]
 80079fa:	2b1f      	cmp	r3, #31
 80079fc:	d904      	bls.n	8007a08 <HAL_RTC_SetDate+0xf0>
 80079fe:	f240 3165 	movw	r1, #869	; 0x365
 8007a02:	484a      	ldr	r0, [pc, #296]	; (8007b2c <HAL_RTC_SetDate+0x214>)
 8007a04:	f7fa fa7f 	bl	8001f06 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	78db      	ldrb	r3, [r3, #3]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f913 	bl	8007c38 <RTC_ByteToBcd2>
 8007a12:	4603      	mov	r3, r0
 8007a14:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	785b      	ldrb	r3, [r3, #1]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 f90c 	bl	8007c38 <RTC_ByteToBcd2>
 8007a20:	4603      	mov	r3, r0
 8007a22:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a24:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	789b      	ldrb	r3, [r3, #2]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f904 	bl	8007c38 <RTC_ByteToBcd2>
 8007a30:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a32:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	e045      	b.n	8007ace <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	78db      	ldrb	r3, [r3, #3]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f913 	bl	8007c72 <RTC_Bcd2ToByte>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b63      	cmp	r3, #99	; 0x63
 8007a50:	d904      	bls.n	8007a5c <HAL_RTC_SetDate+0x144>
 8007a52:	f240 316e 	movw	r1, #878	; 0x36e
 8007a56:	4835      	ldr	r0, [pc, #212]	; (8007b2c <HAL_RTC_SetDate+0x214>)
 8007a58:	f7fa fa55 	bl	8001f06 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 f906 	bl	8007c72 <RTC_Bcd2ToByte>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d007      	beq.n	8007a7c <HAL_RTC_SetDate+0x164>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	785b      	ldrb	r3, [r3, #1]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 f8fe 	bl	8007c72 <RTC_Bcd2ToByte>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b0c      	cmp	r3, #12
 8007a7a:	d904      	bls.n	8007a86 <HAL_RTC_SetDate+0x16e>
 8007a7c:	f240 316f 	movw	r1, #879	; 0x36f
 8007a80:	482a      	ldr	r0, [pc, #168]	; (8007b2c <HAL_RTC_SetDate+0x214>)
 8007a82:	f7fa fa40 	bl	8001f06 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	789b      	ldrb	r3, [r3, #2]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f8f1 	bl	8007c72 <RTC_Bcd2ToByte>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <HAL_RTC_SetDate+0x18e>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	789b      	ldrb	r3, [r3, #2]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 f8e9 	bl	8007c72 <RTC_Bcd2ToByte>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b1f      	cmp	r3, #31
 8007aa4:	d904      	bls.n	8007ab0 <HAL_RTC_SetDate+0x198>
 8007aa6:	f44f 715c 	mov.w	r1, #880	; 0x370
 8007aaa:	4820      	ldr	r0, [pc, #128]	; (8007b2c <HAL_RTC_SetDate+0x214>)
 8007aac:	f7fa fa2b 	bl	8001f06 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	78db      	ldrb	r3, [r3, #3]
 8007ab4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	785b      	ldrb	r3, [r3, #1]
 8007aba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007abc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007ac2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007aca:	4313      	orrs	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	22ca      	movs	r2, #202	; 0xca
 8007ad4:	625a      	str	r2, [r3, #36]	; 0x24
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2253      	movs	r2, #83	; 0x53
 8007adc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f84e 	bl	8007b80 <RTC_EnterInitMode>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007ae8:	7cfb      	ldrb	r3, [r7, #19]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10c      	bne.n	8007b08 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007af8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007afc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 f875 	bl	8007bee <RTC_ExitInitMode>
 8007b04:	4603      	mov	r3, r0
 8007b06:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007b08:	7cfb      	ldrb	r3, [r7, #19]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d102      	bne.n	8007b14 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	22ff      	movs	r2, #255	; 0xff
 8007b1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	771a      	strb	r2, [r3, #28]

  return status;
 8007b22:	7cfb      	ldrb	r3, [r7, #19]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd90      	pop	{r4, r7, pc}
 8007b2c:	080127b4 	.word	0x080127b4

08007b30 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b4a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b4c:	f7fb fb3e 	bl	80031cc <HAL_GetTick>
 8007b50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b52:	e009      	b.n	8007b68 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b54:	f7fb fb3a 	bl	80031cc <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b62:	d901      	bls.n	8007b68 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e007      	b.n	8007b78 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0ee      	beq.n	8007b54 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d122      	bne.n	8007be4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bae:	f7fb fb0d 	bl	80031cc <HAL_GetTick>
 8007bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007bb4:	e00c      	b.n	8007bd0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bb6:	f7fb fb09 	bl	80031cc <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bc4:	d904      	bls.n	8007bd0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2204      	movs	r2, #4
 8007bca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <RTC_EnterInitMode+0x64>
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d1e8      	bne.n	8007bb6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c08:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 0320 	and.w	r3, r3, #32
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff ff89 	bl	8007b30 <HAL_RTC_WaitForSynchro>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d004      	beq.n	8007c2e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2204      	movs	r2, #4
 8007c28:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007c46:	e005      	b.n	8007c54 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	3b0a      	subs	r3, #10
 8007c52:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007c54:	79fb      	ldrb	r3, [r7, #7]
 8007c56:	2b09      	cmp	r3, #9
 8007c58:	d8f6      	bhi.n	8007c48 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	011b      	lsls	r3, r3, #4
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	79fb      	ldrb	r3, [r7, #7]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	b2db      	uxtb	r3, r3
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b085      	sub	sp, #20
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	4603      	mov	r3, r0
 8007c7a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	091b      	lsrs	r3, r3, #4
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	461a      	mov	r2, r3
 8007c88:	0092      	lsls	r2, r2, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	f003 030f 	and.w	r3, r3, #15
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	b2db      	uxtb	r3, r3
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
	...

08007cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e18c      	b.n	8007fd8 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a75      	ldr	r2, [pc, #468]	; (8007e98 <HAL_SPI_Init+0x1ec>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d018      	beq.n	8007cfa <HAL_SPI_Init+0x4e>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a73      	ldr	r2, [pc, #460]	; (8007e9c <HAL_SPI_Init+0x1f0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d013      	beq.n	8007cfa <HAL_SPI_Init+0x4e>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a72      	ldr	r2, [pc, #456]	; (8007ea0 <HAL_SPI_Init+0x1f4>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00e      	beq.n	8007cfa <HAL_SPI_Init+0x4e>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a70      	ldr	r2, [pc, #448]	; (8007ea4 <HAL_SPI_Init+0x1f8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d009      	beq.n	8007cfa <HAL_SPI_Init+0x4e>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a6f      	ldr	r2, [pc, #444]	; (8007ea8 <HAL_SPI_Init+0x1fc>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d004      	beq.n	8007cfa <HAL_SPI_Init+0x4e>
 8007cf0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cf4:	486d      	ldr	r0, [pc, #436]	; (8007eac <HAL_SPI_Init+0x200>)
 8007cf6:	f7fa f906 	bl	8001f06 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d009      	beq.n	8007d16 <HAL_SPI_Init+0x6a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d0a:	d004      	beq.n	8007d16 <HAL_SPI_Init+0x6a>
 8007d0c:	f240 1141 	movw	r1, #321	; 0x141
 8007d10:	4866      	ldr	r0, [pc, #408]	; (8007eac <HAL_SPI_Init+0x200>)
 8007d12:	f7fa f8f8 	bl	8001f06 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00e      	beq.n	8007d3c <HAL_SPI_Init+0x90>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d26:	d009      	beq.n	8007d3c <HAL_SPI_Init+0x90>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d30:	d004      	beq.n	8007d3c <HAL_SPI_Init+0x90>
 8007d32:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007d36:	485d      	ldr	r0, [pc, #372]	; (8007eac <HAL_SPI_Init+0x200>)
 8007d38:	f7fa f8e5 	bl	8001f06 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d44:	d008      	beq.n	8007d58 <HAL_SPI_Init+0xac>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d004      	beq.n	8007d58 <HAL_SPI_Init+0xac>
 8007d4e:	f240 1143 	movw	r1, #323	; 0x143
 8007d52:	4856      	ldr	r0, [pc, #344]	; (8007eac <HAL_SPI_Init+0x200>)
 8007d54:	f7fa f8d7 	bl	8001f06 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d60:	d00d      	beq.n	8007d7e <HAL_SPI_Init+0xd2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d009      	beq.n	8007d7e <HAL_SPI_Init+0xd2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d72:	d004      	beq.n	8007d7e <HAL_SPI_Init+0xd2>
 8007d74:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007d78:	484c      	ldr	r0, [pc, #304]	; (8007eac <HAL_SPI_Init+0x200>)
 8007d7a:	f7fa f8c4 	bl	8001f06 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d020      	beq.n	8007dc8 <HAL_SPI_Init+0x11c>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	2b08      	cmp	r3, #8
 8007d8c:	d01c      	beq.n	8007dc8 <HAL_SPI_Init+0x11c>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	2b10      	cmp	r3, #16
 8007d94:	d018      	beq.n	8007dc8 <HAL_SPI_Init+0x11c>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	2b18      	cmp	r3, #24
 8007d9c:	d014      	beq.n	8007dc8 <HAL_SPI_Init+0x11c>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	2b20      	cmp	r3, #32
 8007da4:	d010      	beq.n	8007dc8 <HAL_SPI_Init+0x11c>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	2b28      	cmp	r3, #40	; 0x28
 8007dac:	d00c      	beq.n	8007dc8 <HAL_SPI_Init+0x11c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	2b30      	cmp	r3, #48	; 0x30
 8007db4:	d008      	beq.n	8007dc8 <HAL_SPI_Init+0x11c>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	2b38      	cmp	r3, #56	; 0x38
 8007dbc:	d004      	beq.n	8007dc8 <HAL_SPI_Init+0x11c>
 8007dbe:	f240 1145 	movw	r1, #325	; 0x145
 8007dc2:	483a      	ldr	r0, [pc, #232]	; (8007eac <HAL_SPI_Init+0x200>)
 8007dc4:	f7fa f89f 	bl	8001f06 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d008      	beq.n	8007de2 <HAL_SPI_Init+0x136>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	2b80      	cmp	r3, #128	; 0x80
 8007dd6:	d004      	beq.n	8007de2 <HAL_SPI_Init+0x136>
 8007dd8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007ddc:	4833      	ldr	r0, [pc, #204]	; (8007eac <HAL_SPI_Init+0x200>)
 8007dde:	f7fa f892 	bl	8001f06 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d008      	beq.n	8007dfc <HAL_SPI_Init+0x150>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	2b10      	cmp	r3, #16
 8007df0:	d004      	beq.n	8007dfc <HAL_SPI_Init+0x150>
 8007df2:	f240 1147 	movw	r1, #327	; 0x147
 8007df6:	482d      	ldr	r0, [pc, #180]	; (8007eac <HAL_SPI_Init+0x200>)
 8007df8:	f7fa f885 	bl	8001f06 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d155      	bne.n	8007eb0 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <HAL_SPI_Init+0x172>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d004      	beq.n	8007e1e <HAL_SPI_Init+0x172>
 8007e14:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007e18:	4824      	ldr	r0, [pc, #144]	; (8007eac <HAL_SPI_Init+0x200>)
 8007e1a:	f7fa f874 	bl	8001f06 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d008      	beq.n	8007e38 <HAL_SPI_Init+0x18c>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d004      	beq.n	8007e38 <HAL_SPI_Init+0x18c>
 8007e2e:	f240 114b 	movw	r1, #331	; 0x14b
 8007e32:	481e      	ldr	r0, [pc, #120]	; (8007eac <HAL_SPI_Init+0x200>)
 8007e34:	f7fa f867 	bl	8001f06 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e40:	d125      	bne.n	8007e8e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d05d      	beq.n	8007f06 <HAL_SPI_Init+0x25a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	d059      	beq.n	8007f06 <HAL_SPI_Init+0x25a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	2b10      	cmp	r3, #16
 8007e58:	d055      	beq.n	8007f06 <HAL_SPI_Init+0x25a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	2b18      	cmp	r3, #24
 8007e60:	d051      	beq.n	8007f06 <HAL_SPI_Init+0x25a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d04d      	beq.n	8007f06 <HAL_SPI_Init+0x25a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	2b28      	cmp	r3, #40	; 0x28
 8007e70:	d049      	beq.n	8007f06 <HAL_SPI_Init+0x25a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	2b30      	cmp	r3, #48	; 0x30
 8007e78:	d045      	beq.n	8007f06 <HAL_SPI_Init+0x25a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	2b38      	cmp	r3, #56	; 0x38
 8007e80:	d041      	beq.n	8007f06 <HAL_SPI_Init+0x25a>
 8007e82:	f240 114f 	movw	r1, #335	; 0x14f
 8007e86:	4809      	ldr	r0, [pc, #36]	; (8007eac <HAL_SPI_Init+0x200>)
 8007e88:	f7fa f83d 	bl	8001f06 <assert_failed>
 8007e8c:	e03b      	b.n	8007f06 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	61da      	str	r2, [r3, #28]
 8007e94:	e037      	b.n	8007f06 <HAL_SPI_Init+0x25a>
 8007e96:	bf00      	nop
 8007e98:	40013000 	.word	0x40013000
 8007e9c:	40003800 	.word	0x40003800
 8007ea0:	40003c00 	.word	0x40003c00
 8007ea4:	40013400 	.word	0x40013400
 8007ea8:	40015000 	.word	0x40015000
 8007eac:	080127ec 	.word	0x080127ec
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d020      	beq.n	8007efa <HAL_SPI_Init+0x24e>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	2b08      	cmp	r3, #8
 8007ebe:	d01c      	beq.n	8007efa <HAL_SPI_Init+0x24e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	2b10      	cmp	r3, #16
 8007ec6:	d018      	beq.n	8007efa <HAL_SPI_Init+0x24e>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	2b18      	cmp	r3, #24
 8007ece:	d014      	beq.n	8007efa <HAL_SPI_Init+0x24e>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d010      	beq.n	8007efa <HAL_SPI_Init+0x24e>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	2b28      	cmp	r3, #40	; 0x28
 8007ede:	d00c      	beq.n	8007efa <HAL_SPI_Init+0x24e>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	2b30      	cmp	r3, #48	; 0x30
 8007ee6:	d008      	beq.n	8007efa <HAL_SPI_Init+0x24e>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	2b38      	cmp	r3, #56	; 0x38
 8007eee:	d004      	beq.n	8007efa <HAL_SPI_Init+0x24e>
 8007ef0:	f240 1159 	movw	r1, #345	; 0x159
 8007ef4:	483a      	ldr	r0, [pc, #232]	; (8007fe0 <HAL_SPI_Init+0x334>)
 8007ef6:	f7fa f806 	bl	8001f06 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7fa f8b7 	bl	8002094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2202      	movs	r2, #2
 8007f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8a:	ea42 0103 	orr.w	r1, r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	0c1b      	lsrs	r3, r3, #16
 8007fa4:	f003 0104 	and.w	r1, r3, #4
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	f003 0210 	and.w	r2, r3, #16
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	69da      	ldr	r2, [r3, #28]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	080127ec 	.word	0x080127ec

08007fe4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d009      	beq.n	8008014 <HAL_SPI_Transmit+0x30>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008008:	d004      	beq.n	8008014 <HAL_SPI_Transmit+0x30>
 800800a:	f44f 7142 	mov.w	r1, #776	; 0x308
 800800e:	4880      	ldr	r0, [pc, #512]	; (8008210 <HAL_SPI_Transmit+0x22c>)
 8008010:	f7f9 ff79 	bl	8001f06 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <HAL_SPI_Transmit+0x3e>
 800801e:	2302      	movs	r3, #2
 8008020:	e128      	b.n	8008274 <HAL_SPI_Transmit+0x290>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800802a:	f7fb f8cf 	bl	80031cc <HAL_GetTick>
 800802e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b01      	cmp	r3, #1
 800803e:	d002      	beq.n	8008046 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8008040:	2302      	movs	r3, #2
 8008042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008044:	e10d      	b.n	8008262 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <HAL_SPI_Transmit+0x6e>
 800804c:	88fb      	ldrh	r3, [r7, #6]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d102      	bne.n	8008058 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008056:	e104      	b.n	8008262 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2203      	movs	r2, #3
 800805c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	88fa      	ldrh	r2, [r7, #6]
 8008070:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	88fa      	ldrh	r2, [r7, #6]
 8008076:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800809e:	d10f      	bne.n	80080c0 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ca:	2b40      	cmp	r3, #64	; 0x40
 80080cc:	d007      	beq.n	80080de <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080e6:	d14b      	bne.n	8008180 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <HAL_SPI_Transmit+0x112>
 80080f0:	8afb      	ldrh	r3, [r7, #22]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d13e      	bne.n	8008174 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fa:	881a      	ldrh	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	1c9a      	adds	r2, r3, #2
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008110:	b29b      	uxth	r3, r3
 8008112:	3b01      	subs	r3, #1
 8008114:	b29a      	uxth	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800811a:	e02b      	b.n	8008174 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b02      	cmp	r3, #2
 8008128:	d112      	bne.n	8008150 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812e:	881a      	ldrh	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813a:	1c9a      	adds	r2, r3, #2
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	86da      	strh	r2, [r3, #54]	; 0x36
 800814e:	e011      	b.n	8008174 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008150:	f7fb f83c 	bl	80031cc <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	429a      	cmp	r2, r3
 800815e:	d803      	bhi.n	8008168 <HAL_SPI_Transmit+0x184>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	d102      	bne.n	800816e <HAL_SPI_Transmit+0x18a>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008172:	e076      	b.n	8008262 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1ce      	bne.n	800811c <HAL_SPI_Transmit+0x138>
 800817e:	e04e      	b.n	800821e <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <HAL_SPI_Transmit+0x1aa>
 8008188:	8afb      	ldrh	r3, [r7, #22]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d142      	bne.n	8008214 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	330c      	adds	r3, #12
 8008198:	7812      	ldrb	r2, [r2, #0]
 800819a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80081b4:	e02e      	b.n	8008214 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d113      	bne.n	80081ec <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	330c      	adds	r3, #12
 80081ce:	7812      	ldrb	r2, [r2, #0]
 80081d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80081ea:	e013      	b.n	8008214 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ec:	f7fa ffee 	bl	80031cc <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d803      	bhi.n	8008204 <HAL_SPI_Transmit+0x220>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008202:	d102      	bne.n	800820a <HAL_SPI_Transmit+0x226>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800820e:	e028      	b.n	8008262 <HAL_SPI_Transmit+0x27e>
 8008210:	080127ec 	.word	0x080127ec
    while (hspi->TxXferCount > 0U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1cb      	bne.n	80081b6 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 f8b2 	bl	800838c <SPI_EndRxTxTransaction>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2220      	movs	r2, #32
 8008232:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800823c:	2300      	movs	r3, #0
 800823e:	613b      	str	r3, [r7, #16]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	77fb      	strb	r3, [r7, #31]
 800825e:	e000      	b.n	8008262 <HAL_SPI_Transmit+0x27e>
  }

error:
 8008260:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008272:	7ffb      	ldrb	r3, [r7, #31]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3720      	adds	r7, #32
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b088      	sub	sp, #32
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	4613      	mov	r3, r2
 800828a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800828c:	f7fa ff9e 	bl	80031cc <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	4413      	add	r3, r2
 800829a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800829c:	f7fa ff96 	bl	80031cc <HAL_GetTick>
 80082a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082a2:	4b39      	ldr	r3, [pc, #228]	; (8008388 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	015b      	lsls	r3, r3, #5
 80082a8:	0d1b      	lsrs	r3, r3, #20
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	fb02 f303 	mul.w	r3, r2, r3
 80082b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082b2:	e054      	b.n	800835e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ba:	d050      	beq.n	800835e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082bc:	f7fa ff86 	bl	80031cc <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	69fa      	ldr	r2, [r7, #28]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d902      	bls.n	80082d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d13d      	bne.n	800834e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082ea:	d111      	bne.n	8008310 <SPI_WaitFlagStateUntilTimeout+0x94>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082f4:	d004      	beq.n	8008300 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082fe:	d107      	bne.n	8008310 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800830e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008318:	d10f      	bne.n	800833a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008338:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e017      	b.n	800837e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	3b01      	subs	r3, #1
 800835c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	4013      	ands	r3, r2
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	429a      	cmp	r2, r3
 800836c:	bf0c      	ite	eq
 800836e:	2301      	moveq	r3, #1
 8008370:	2300      	movne	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	461a      	mov	r2, r3
 8008376:	79fb      	ldrb	r3, [r7, #7]
 8008378:	429a      	cmp	r2, r3
 800837a:	d19b      	bne.n	80082b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3720      	adds	r7, #32
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	2000008c 	.word	0x2000008c

0800838c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af02      	add	r7, sp, #8
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008398:	4b1b      	ldr	r3, [pc, #108]	; (8008408 <SPI_EndRxTxTransaction+0x7c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a1b      	ldr	r2, [pc, #108]	; (800840c <SPI_EndRxTxTransaction+0x80>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	0d5b      	lsrs	r3, r3, #21
 80083a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083a8:	fb02 f303 	mul.w	r3, r2, r3
 80083ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083b6:	d112      	bne.n	80083de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2200      	movs	r2, #0
 80083c0:	2180      	movs	r1, #128	; 0x80
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff ff5a 	bl	800827c <SPI_WaitFlagStateUntilTimeout>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d016      	beq.n	80083fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d2:	f043 0220 	orr.w	r2, r3, #32
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e00f      	b.n	80083fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00a      	beq.n	80083fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f4:	2b80      	cmp	r3, #128	; 0x80
 80083f6:	d0f2      	beq.n	80083de <SPI_EndRxTxTransaction+0x52>
 80083f8:	e000      	b.n	80083fc <SPI_EndRxTxTransaction+0x70>
        break;
 80083fa:	bf00      	nop
  }

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	2000008c 	.word	0x2000008c
 800840c:	165e9f81 	.word	0x165e9f81

08008410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e0a7      	b.n	8008572 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a55      	ldr	r2, [pc, #340]	; (800857c <HAL_TIM_Base_Init+0x16c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d027      	beq.n	800847c <HAL_TIM_Base_Init+0x6c>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008434:	d022      	beq.n	800847c <HAL_TIM_Base_Init+0x6c>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a51      	ldr	r2, [pc, #324]	; (8008580 <HAL_TIM_Base_Init+0x170>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d01d      	beq.n	800847c <HAL_TIM_Base_Init+0x6c>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a4f      	ldr	r2, [pc, #316]	; (8008584 <HAL_TIM_Base_Init+0x174>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d018      	beq.n	800847c <HAL_TIM_Base_Init+0x6c>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a4e      	ldr	r2, [pc, #312]	; (8008588 <HAL_TIM_Base_Init+0x178>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d013      	beq.n	800847c <HAL_TIM_Base_Init+0x6c>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a4c      	ldr	r2, [pc, #304]	; (800858c <HAL_TIM_Base_Init+0x17c>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00e      	beq.n	800847c <HAL_TIM_Base_Init+0x6c>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a4b      	ldr	r2, [pc, #300]	; (8008590 <HAL_TIM_Base_Init+0x180>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d009      	beq.n	800847c <HAL_TIM_Base_Init+0x6c>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a49      	ldr	r2, [pc, #292]	; (8008594 <HAL_TIM_Base_Init+0x184>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_TIM_Base_Init+0x6c>
 8008472:	f240 1113 	movw	r1, #275	; 0x113
 8008476:	4848      	ldr	r0, [pc, #288]	; (8008598 <HAL_TIM_Base_Init+0x188>)
 8008478:	f7f9 fd45 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d014      	beq.n	80084ae <HAL_TIM_Base_Init+0x9e>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2b10      	cmp	r3, #16
 800848a:	d010      	beq.n	80084ae <HAL_TIM_Base_Init+0x9e>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	2b20      	cmp	r3, #32
 8008492:	d00c      	beq.n	80084ae <HAL_TIM_Base_Init+0x9e>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d008      	beq.n	80084ae <HAL_TIM_Base_Init+0x9e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	2b60      	cmp	r3, #96	; 0x60
 80084a2:	d004      	beq.n	80084ae <HAL_TIM_Base_Init+0x9e>
 80084a4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80084a8:	483b      	ldr	r0, [pc, #236]	; (8008598 <HAL_TIM_Base_Init+0x188>)
 80084aa:	f7f9 fd2c 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00e      	beq.n	80084d4 <HAL_TIM_Base_Init+0xc4>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084be:	d009      	beq.n	80084d4 <HAL_TIM_Base_Init+0xc4>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084c8:	d004      	beq.n	80084d4 <HAL_TIM_Base_Init+0xc4>
 80084ca:	f240 1115 	movw	r1, #277	; 0x115
 80084ce:	4832      	ldr	r0, [pc, #200]	; (8008598 <HAL_TIM_Base_Init+0x188>)
 80084d0:	f7f9 fd19 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d008      	beq.n	80084ee <HAL_TIM_Base_Init+0xde>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	2b80      	cmp	r3, #128	; 0x80
 80084e2:	d004      	beq.n	80084ee <HAL_TIM_Base_Init+0xde>
 80084e4:	f44f 718b 	mov.w	r1, #278	; 0x116
 80084e8:	482b      	ldr	r0, [pc, #172]	; (8008598 <HAL_TIM_Base_Init+0x188>)
 80084ea:	f7f9 fd0c 	bl	8001f06 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7fa fc90 	bl	8002e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3304      	adds	r3, #4
 8008518:	4619      	mov	r1, r3
 800851a:	4610      	mov	r0, r2
 800851c:	f001 fab2 	bl	8009a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40010000 	.word	0x40010000
 8008580:	40000400 	.word	0x40000400
 8008584:	40000800 	.word	0x40000800
 8008588:	40000c00 	.word	0x40000c00
 800858c:	40014000 	.word	0x40014000
 8008590:	40014400 	.word	0x40014400
 8008594:	40014800 	.word	0x40014800
 8008598:	08012824 	.word	0x08012824

0800859c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a39      	ldr	r2, [pc, #228]	; (8008690 <HAL_TIM_Base_Start+0xf4>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d027      	beq.n	80085fe <HAL_TIM_Base_Start+0x62>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b6:	d022      	beq.n	80085fe <HAL_TIM_Base_Start+0x62>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a35      	ldr	r2, [pc, #212]	; (8008694 <HAL_TIM_Base_Start+0xf8>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d01d      	beq.n	80085fe <HAL_TIM_Base_Start+0x62>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a34      	ldr	r2, [pc, #208]	; (8008698 <HAL_TIM_Base_Start+0xfc>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d018      	beq.n	80085fe <HAL_TIM_Base_Start+0x62>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a32      	ldr	r2, [pc, #200]	; (800869c <HAL_TIM_Base_Start+0x100>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d013      	beq.n	80085fe <HAL_TIM_Base_Start+0x62>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a31      	ldr	r2, [pc, #196]	; (80086a0 <HAL_TIM_Base_Start+0x104>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d00e      	beq.n	80085fe <HAL_TIM_Base_Start+0x62>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a2f      	ldr	r2, [pc, #188]	; (80086a4 <HAL_TIM_Base_Start+0x108>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d009      	beq.n	80085fe <HAL_TIM_Base_Start+0x62>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a2e      	ldr	r2, [pc, #184]	; (80086a8 <HAL_TIM_Base_Start+0x10c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d004      	beq.n	80085fe <HAL_TIM_Base_Start+0x62>
 80085f4:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80085f8:	482c      	ldr	r0, [pc, #176]	; (80086ac <HAL_TIM_Base_Start+0x110>)
 80085fa:	f7f9 fc84 	bl	8001f06 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b01      	cmp	r3, #1
 8008608:	d001      	beq.n	800860e <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e03c      	b.n	8008688 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2202      	movs	r2, #2
 8008612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a1d      	ldr	r2, [pc, #116]	; (8008690 <HAL_TIM_Base_Start+0xf4>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d018      	beq.n	8008652 <HAL_TIM_Base_Start+0xb6>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008628:	d013      	beq.n	8008652 <HAL_TIM_Base_Start+0xb6>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a19      	ldr	r2, [pc, #100]	; (8008694 <HAL_TIM_Base_Start+0xf8>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00e      	beq.n	8008652 <HAL_TIM_Base_Start+0xb6>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a17      	ldr	r2, [pc, #92]	; (8008698 <HAL_TIM_Base_Start+0xfc>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d009      	beq.n	8008652 <HAL_TIM_Base_Start+0xb6>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a16      	ldr	r2, [pc, #88]	; (800869c <HAL_TIM_Base_Start+0x100>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d004      	beq.n	8008652 <HAL_TIM_Base_Start+0xb6>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a14      	ldr	r2, [pc, #80]	; (80086a0 <HAL_TIM_Base_Start+0x104>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d111      	bne.n	8008676 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b06      	cmp	r3, #6
 8008662:	d010      	beq.n	8008686 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008674:	e007      	b.n	8008686 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f042 0201 	orr.w	r2, r2, #1
 8008684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40010000 	.word	0x40010000
 8008694:	40000400 	.word	0x40000400
 8008698:	40000800 	.word	0x40000800
 800869c:	40000c00 	.word	0x40000c00
 80086a0:	40014000 	.word	0x40014000
 80086a4:	40014400 	.word	0x40014400
 80086a8:	40014800 	.word	0x40014800
 80086ac:	08012824 	.word	0x08012824

080086b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a3d      	ldr	r2, [pc, #244]	; (80087b4 <HAL_TIM_Base_Start_IT+0x104>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d027      	beq.n	8008712 <HAL_TIM_Base_Start_IT+0x62>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ca:	d022      	beq.n	8008712 <HAL_TIM_Base_Start_IT+0x62>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a39      	ldr	r2, [pc, #228]	; (80087b8 <HAL_TIM_Base_Start_IT+0x108>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d01d      	beq.n	8008712 <HAL_TIM_Base_Start_IT+0x62>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a38      	ldr	r2, [pc, #224]	; (80087bc <HAL_TIM_Base_Start_IT+0x10c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d018      	beq.n	8008712 <HAL_TIM_Base_Start_IT+0x62>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a36      	ldr	r2, [pc, #216]	; (80087c0 <HAL_TIM_Base_Start_IT+0x110>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d013      	beq.n	8008712 <HAL_TIM_Base_Start_IT+0x62>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a35      	ldr	r2, [pc, #212]	; (80087c4 <HAL_TIM_Base_Start_IT+0x114>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00e      	beq.n	8008712 <HAL_TIM_Base_Start_IT+0x62>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a33      	ldr	r2, [pc, #204]	; (80087c8 <HAL_TIM_Base_Start_IT+0x118>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d009      	beq.n	8008712 <HAL_TIM_Base_Start_IT+0x62>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a32      	ldr	r2, [pc, #200]	; (80087cc <HAL_TIM_Base_Start_IT+0x11c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d004      	beq.n	8008712 <HAL_TIM_Base_Start_IT+0x62>
 8008708:	f240 11cf 	movw	r1, #463	; 0x1cf
 800870c:	4830      	ldr	r0, [pc, #192]	; (80087d0 <HAL_TIM_Base_Start_IT+0x120>)
 800870e:	f7f9 fbfa 	bl	8001f06 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b01      	cmp	r3, #1
 800871c:	d001      	beq.n	8008722 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e044      	b.n	80087ac <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2202      	movs	r2, #2
 8008726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68da      	ldr	r2, [r3, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f042 0201 	orr.w	r2, r2, #1
 8008738:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a1d      	ldr	r2, [pc, #116]	; (80087b4 <HAL_TIM_Base_Start_IT+0x104>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d018      	beq.n	8008776 <HAL_TIM_Base_Start_IT+0xc6>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874c:	d013      	beq.n	8008776 <HAL_TIM_Base_Start_IT+0xc6>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a19      	ldr	r2, [pc, #100]	; (80087b8 <HAL_TIM_Base_Start_IT+0x108>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d00e      	beq.n	8008776 <HAL_TIM_Base_Start_IT+0xc6>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a17      	ldr	r2, [pc, #92]	; (80087bc <HAL_TIM_Base_Start_IT+0x10c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d009      	beq.n	8008776 <HAL_TIM_Base_Start_IT+0xc6>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a16      	ldr	r2, [pc, #88]	; (80087c0 <HAL_TIM_Base_Start_IT+0x110>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d004      	beq.n	8008776 <HAL_TIM_Base_Start_IT+0xc6>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a14      	ldr	r2, [pc, #80]	; (80087c4 <HAL_TIM_Base_Start_IT+0x114>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d111      	bne.n	800879a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b06      	cmp	r3, #6
 8008786:	d010      	beq.n	80087aa <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008798:	e007      	b.n	80087aa <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 0201 	orr.w	r2, r2, #1
 80087a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	40010000 	.word	0x40010000
 80087b8:	40000400 	.word	0x40000400
 80087bc:	40000800 	.word	0x40000800
 80087c0:	40000c00 	.word	0x40000c00
 80087c4:	40014000 	.word	0x40014000
 80087c8:	40014400 	.word	0x40014400
 80087cc:	40014800 	.word	0x40014800
 80087d0:	08012824 	.word	0x08012824

080087d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e0a7      	b.n	8008936 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a55      	ldr	r2, [pc, #340]	; (8008940 <HAL_TIM_PWM_Init+0x16c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d027      	beq.n	8008840 <HAL_TIM_PWM_Init+0x6c>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f8:	d022      	beq.n	8008840 <HAL_TIM_PWM_Init+0x6c>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a51      	ldr	r2, [pc, #324]	; (8008944 <HAL_TIM_PWM_Init+0x170>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d01d      	beq.n	8008840 <HAL_TIM_PWM_Init+0x6c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a4f      	ldr	r2, [pc, #316]	; (8008948 <HAL_TIM_PWM_Init+0x174>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d018      	beq.n	8008840 <HAL_TIM_PWM_Init+0x6c>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a4e      	ldr	r2, [pc, #312]	; (800894c <HAL_TIM_PWM_Init+0x178>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d013      	beq.n	8008840 <HAL_TIM_PWM_Init+0x6c>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a4c      	ldr	r2, [pc, #304]	; (8008950 <HAL_TIM_PWM_Init+0x17c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00e      	beq.n	8008840 <HAL_TIM_PWM_Init+0x6c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a4b      	ldr	r2, [pc, #300]	; (8008954 <HAL_TIM_PWM_Init+0x180>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d009      	beq.n	8008840 <HAL_TIM_PWM_Init+0x6c>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a49      	ldr	r2, [pc, #292]	; (8008958 <HAL_TIM_PWM_Init+0x184>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d004      	beq.n	8008840 <HAL_TIM_PWM_Init+0x6c>
 8008836:	f240 5129 	movw	r1, #1321	; 0x529
 800883a:	4848      	ldr	r0, [pc, #288]	; (800895c <HAL_TIM_PWM_Init+0x188>)
 800883c:	f7f9 fb63 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d014      	beq.n	8008872 <HAL_TIM_PWM_Init+0x9e>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	2b10      	cmp	r3, #16
 800884e:	d010      	beq.n	8008872 <HAL_TIM_PWM_Init+0x9e>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b20      	cmp	r3, #32
 8008856:	d00c      	beq.n	8008872 <HAL_TIM_PWM_Init+0x9e>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	2b40      	cmp	r3, #64	; 0x40
 800885e:	d008      	beq.n	8008872 <HAL_TIM_PWM_Init+0x9e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2b60      	cmp	r3, #96	; 0x60
 8008866:	d004      	beq.n	8008872 <HAL_TIM_PWM_Init+0x9e>
 8008868:	f240 512a 	movw	r1, #1322	; 0x52a
 800886c:	483b      	ldr	r0, [pc, #236]	; (800895c <HAL_TIM_PWM_Init+0x188>)
 800886e:	f7f9 fb4a 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00e      	beq.n	8008898 <HAL_TIM_PWM_Init+0xc4>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008882:	d009      	beq.n	8008898 <HAL_TIM_PWM_Init+0xc4>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800888c:	d004      	beq.n	8008898 <HAL_TIM_PWM_Init+0xc4>
 800888e:	f240 512b 	movw	r1, #1323	; 0x52b
 8008892:	4832      	ldr	r0, [pc, #200]	; (800895c <HAL_TIM_PWM_Init+0x188>)
 8008894:	f7f9 fb37 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <HAL_TIM_PWM_Init+0xde>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	2b80      	cmp	r3, #128	; 0x80
 80088a6:	d004      	beq.n	80088b2 <HAL_TIM_PWM_Init+0xde>
 80088a8:	f240 512c 	movw	r1, #1324	; 0x52c
 80088ac:	482b      	ldr	r0, [pc, #172]	; (800895c <HAL_TIM_PWM_Init+0x188>)
 80088ae:	f7f9 fb2a 	bl	8001f06 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d106      	bne.n	80088cc <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fa fa18 	bl	8002cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3304      	adds	r3, #4
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f001 f8d0 	bl	8009a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	40010000 	.word	0x40010000
 8008944:	40000400 	.word	0x40000400
 8008948:	40000800 	.word	0x40000800
 800894c:	40000c00 	.word	0x40000c00
 8008950:	40014000 	.word	0x40014000
 8008954:	40014400 	.word	0x40014400
 8008958:	40014800 	.word	0x40014800
 800895c:	08012824 	.word	0x08012824

08008960 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e18a      	b.n	8008c8a <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a78      	ldr	r2, [pc, #480]	; (8008b5c <HAL_TIM_Encoder_Init+0x1fc>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d01d      	beq.n	80089ba <HAL_TIM_Encoder_Init+0x5a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008986:	d018      	beq.n	80089ba <HAL_TIM_Encoder_Init+0x5a>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a74      	ldr	r2, [pc, #464]	; (8008b60 <HAL_TIM_Encoder_Init+0x200>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d013      	beq.n	80089ba <HAL_TIM_Encoder_Init+0x5a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a73      	ldr	r2, [pc, #460]	; (8008b64 <HAL_TIM_Encoder_Init+0x204>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00e      	beq.n	80089ba <HAL_TIM_Encoder_Init+0x5a>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a71      	ldr	r2, [pc, #452]	; (8008b68 <HAL_TIM_Encoder_Init+0x208>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d009      	beq.n	80089ba <HAL_TIM_Encoder_Init+0x5a>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a70      	ldr	r2, [pc, #448]	; (8008b6c <HAL_TIM_Encoder_Init+0x20c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d004      	beq.n	80089ba <HAL_TIM_Encoder_Init+0x5a>
 80089b0:	f640 31d1 	movw	r1, #3025	; 0xbd1
 80089b4:	486e      	ldr	r0, [pc, #440]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 80089b6:	f7f9 faa6 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d014      	beq.n	80089ec <HAL_TIM_Encoder_Init+0x8c>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	2b10      	cmp	r3, #16
 80089c8:	d010      	beq.n	80089ec <HAL_TIM_Encoder_Init+0x8c>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b20      	cmp	r3, #32
 80089d0:	d00c      	beq.n	80089ec <HAL_TIM_Encoder_Init+0x8c>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	2b40      	cmp	r3, #64	; 0x40
 80089d8:	d008      	beq.n	80089ec <HAL_TIM_Encoder_Init+0x8c>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	2b60      	cmp	r3, #96	; 0x60
 80089e0:	d004      	beq.n	80089ec <HAL_TIM_Encoder_Init+0x8c>
 80089e2:	f640 31d2 	movw	r1, #3026	; 0xbd2
 80089e6:	4862      	ldr	r0, [pc, #392]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 80089e8:	f7f9 fa8d 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00e      	beq.n	8008a12 <HAL_TIM_Encoder_Init+0xb2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089fc:	d009      	beq.n	8008a12 <HAL_TIM_Encoder_Init+0xb2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a06:	d004      	beq.n	8008a12 <HAL_TIM_Encoder_Init+0xb2>
 8008a08:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8008a0c:	4858      	ldr	r0, [pc, #352]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008a0e:	f7f9 fa7a 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d008      	beq.n	8008a2c <HAL_TIM_Encoder_Init+0xcc>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	2b80      	cmp	r3, #128	; 0x80
 8008a20:	d004      	beq.n	8008a2c <HAL_TIM_Encoder_Init+0xcc>
 8008a22:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8008a26:	4852      	ldr	r0, [pc, #328]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008a28:	f7f9 fa6d 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d00c      	beq.n	8008a4e <HAL_TIM_Encoder_Init+0xee>
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d008      	beq.n	8008a4e <HAL_TIM_Encoder_Init+0xee>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d004      	beq.n	8008a4e <HAL_TIM_Encoder_Init+0xee>
 8008a44:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8008a48:	4849      	ldr	r0, [pc, #292]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008a4a:	f7f9 fa5c 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d00c      	beq.n	8008a70 <HAL_TIM_Encoder_Init+0x110>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d008      	beq.n	8008a70 <HAL_TIM_Encoder_Init+0x110>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d004      	beq.n	8008a70 <HAL_TIM_Encoder_Init+0x110>
 8008a66:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8008a6a:	4841      	ldr	r0, [pc, #260]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008a6c:	f7f9 fa4b 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d00c      	beq.n	8008a92 <HAL_TIM_Encoder_Init+0x132>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d008      	beq.n	8008a92 <HAL_TIM_Encoder_Init+0x132>
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d004      	beq.n	8008a92 <HAL_TIM_Encoder_Init+0x132>
 8008a88:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8008a8c:	4838      	ldr	r0, [pc, #224]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008a8e:	f7f9 fa3a 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d008      	beq.n	8008aac <HAL_TIM_Encoder_Init+0x14c>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d004      	beq.n	8008aac <HAL_TIM_Encoder_Init+0x14c>
 8008aa2:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8008aa6:	4832      	ldr	r0, [pc, #200]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008aa8:	f7f9 fa2d 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d008      	beq.n	8008ac6 <HAL_TIM_Encoder_Init+0x166>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d004      	beq.n	8008ac6 <HAL_TIM_Encoder_Init+0x166>
 8008abc:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8008ac0:	482b      	ldr	r0, [pc, #172]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008ac2:	f7f9 fa20 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d010      	beq.n	8008af0 <HAL_TIM_Encoder_Init+0x190>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d00c      	beq.n	8008af0 <HAL_TIM_Encoder_Init+0x190>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	2b08      	cmp	r3, #8
 8008adc:	d008      	beq.n	8008af0 <HAL_TIM_Encoder_Init+0x190>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	2b0c      	cmp	r3, #12
 8008ae4:	d004      	beq.n	8008af0 <HAL_TIM_Encoder_Init+0x190>
 8008ae6:	f640 31da 	movw	r1, #3034	; 0xbda
 8008aea:	4821      	ldr	r0, [pc, #132]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008aec:	f7f9 fa0b 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d010      	beq.n	8008b1a <HAL_TIM_Encoder_Init+0x1ba>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	d00c      	beq.n	8008b1a <HAL_TIM_Encoder_Init+0x1ba>
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d008      	beq.n	8008b1a <HAL_TIM_Encoder_Init+0x1ba>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	2b0c      	cmp	r3, #12
 8008b0e:	d004      	beq.n	8008b1a <HAL_TIM_Encoder_Init+0x1ba>
 8008b10:	f640 31db 	movw	r1, #3035	; 0xbdb
 8008b14:	4816      	ldr	r0, [pc, #88]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008b16:	f7f9 f9f6 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	2b0f      	cmp	r3, #15
 8008b20:	d904      	bls.n	8008b2c <HAL_TIM_Encoder_Init+0x1cc>
 8008b22:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8008b26:	4812      	ldr	r0, [pc, #72]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008b28:	f7f9 f9ed 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	2b0f      	cmp	r3, #15
 8008b32:	d904      	bls.n	8008b3e <HAL_TIM_Encoder_Init+0x1de>
 8008b34:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8008b38:	480d      	ldr	r0, [pc, #52]	; (8008b70 <HAL_TIM_Encoder_Init+0x210>)
 8008b3a:	f7f9 f9e4 	bl	8001f06 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d114      	bne.n	8008b74 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7fa f8f8 	bl	8002d48 <HAL_TIM_Encoder_MspInit>
 8008b58:	e00c      	b.n	8008b74 <HAL_TIM_Encoder_Init+0x214>
 8008b5a:	bf00      	nop
 8008b5c:	40010000 	.word	0x40010000
 8008b60:	40000400 	.word	0x40000400
 8008b64:	40000800 	.word	0x40000800
 8008b68:	40000c00 	.word	0x40000c00
 8008b6c:	40014000 	.word	0x40014000
 8008b70:	08012824 	.word	0x08012824
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	6812      	ldr	r2, [r2, #0]
 8008b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b8a:	f023 0307 	bic.w	r3, r3, #7
 8008b8e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f000 ff72 	bl	8009a84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc8:	f023 0303 	bic.w	r3, r3, #3
 8008bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689a      	ldr	r2, [r3, #8]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	021b      	lsls	r3, r3, #8
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008be6:	f023 030c 	bic.w	r3, r3, #12
 8008bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	021b      	lsls	r3, r3, #8
 8008c02:	4313      	orrs	r3, r2
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	011a      	lsls	r2, r3, #4
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	031b      	lsls	r3, r3, #12
 8008c16:	4313      	orrs	r3, r2
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008c24:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008c2c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop

08008c94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ca4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008cac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008cb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008cbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a4d      	ldr	r2, [pc, #308]	; (8008df8 <HAL_TIM_Encoder_Start+0x164>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d01d      	beq.n	8008d04 <HAL_TIM_Encoder_Start+0x70>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd0:	d018      	beq.n	8008d04 <HAL_TIM_Encoder_Start+0x70>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a49      	ldr	r2, [pc, #292]	; (8008dfc <HAL_TIM_Encoder_Start+0x168>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d013      	beq.n	8008d04 <HAL_TIM_Encoder_Start+0x70>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a47      	ldr	r2, [pc, #284]	; (8008e00 <HAL_TIM_Encoder_Start+0x16c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00e      	beq.n	8008d04 <HAL_TIM_Encoder_Start+0x70>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a46      	ldr	r2, [pc, #280]	; (8008e04 <HAL_TIM_Encoder_Start+0x170>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d009      	beq.n	8008d04 <HAL_TIM_Encoder_Start+0x70>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a44      	ldr	r2, [pc, #272]	; (8008e08 <HAL_TIM_Encoder_Start+0x174>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d004      	beq.n	8008d04 <HAL_TIM_Encoder_Start+0x70>
 8008cfa:	f640 418e 	movw	r1, #3214	; 0xc8e
 8008cfe:	4843      	ldr	r0, [pc, #268]	; (8008e0c <HAL_TIM_Encoder_Start+0x178>)
 8008d00:	f7f9 f901 	bl	8001f06 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d110      	bne.n	8008d2c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d102      	bne.n	8008d16 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d10:	7b7b      	ldrb	r3, [r7, #13]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d001      	beq.n	8008d1a <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e069      	b.n	8008dee <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2202      	movs	r2, #2
 8008d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d2a:	e031      	b.n	8008d90 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d110      	bne.n	8008d54 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d102      	bne.n	8008d3e <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d38:	7b3b      	ldrb	r3, [r7, #12]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d001      	beq.n	8008d42 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e055      	b.n	8008dee <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2202      	movs	r2, #2
 8008d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d52:	e01d      	b.n	8008d90 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d108      	bne.n	8008d6c <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d105      	bne.n	8008d6c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d60:	7b7b      	ldrb	r3, [r7, #13]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d102      	bne.n	8008d6c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d66:	7b3b      	ldrb	r3, [r7, #12]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d001      	beq.n	8008d70 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e03e      	b.n	8008dee <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_TIM_Encoder_Start+0x10a>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	d008      	beq.n	8008dae <HAL_TIM_Encoder_Start+0x11a>
 8008d9c:	e00f      	b.n	8008dbe <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2201      	movs	r2, #1
 8008da4:	2100      	movs	r1, #0
 8008da6:	4618      	mov	r0, r3
 8008da8:	f001 f99c 	bl	800a0e4 <TIM_CCxChannelCmd>
      break;
 8008dac:	e016      	b.n	8008ddc <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2201      	movs	r2, #1
 8008db4:	2104      	movs	r1, #4
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 f994 	bl	800a0e4 <TIM_CCxChannelCmd>
      break;
 8008dbc:	e00e      	b.n	8008ddc <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f001 f98c 	bl	800a0e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	2104      	movs	r1, #4
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 f985 	bl	800a0e4 <TIM_CCxChannelCmd>
      break;
 8008dda:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0201 	orr.w	r2, r2, #1
 8008dea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40010000 	.word	0x40010000
 8008dfc:	40000400 	.word	0x40000400
 8008e00:	40000800 	.word	0x40000800
 8008e04:	40000c00 	.word	0x40000c00
 8008e08:	40014000 	.word	0x40014000
 8008e0c:	08012824 	.word	0x08012824

08008e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f003 0302 	and.w	r3, r3, #2
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d122      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f003 0302 	and.w	r3, r3, #2
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d11b      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f06f 0202 	mvn.w	r2, #2
 8008e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fda4 	bl	80099a0 <HAL_TIM_IC_CaptureCallback>
 8008e58:	e005      	b.n	8008e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fd96 	bl	800998c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fda7 	bl	80099b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	d122      	bne.n	8008ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d11b      	bne.n	8008ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f06f 0204 	mvn.w	r2, #4
 8008e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2202      	movs	r2, #2
 8008e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fd7a 	bl	80099a0 <HAL_TIM_IC_CaptureCallback>
 8008eac:	e005      	b.n	8008eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fd6c 	bl	800998c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fd7d 	bl	80099b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	f003 0308 	and.w	r3, r3, #8
 8008eca:	2b08      	cmp	r3, #8
 8008ecc:	d122      	bne.n	8008f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f003 0308 	and.w	r3, r3, #8
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d11b      	bne.n	8008f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f06f 0208 	mvn.w	r2, #8
 8008ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2204      	movs	r2, #4
 8008eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fd50 	bl	80099a0 <HAL_TIM_IC_CaptureCallback>
 8008f00:	e005      	b.n	8008f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fd42 	bl	800998c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fd53 	bl	80099b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f003 0310 	and.w	r3, r3, #16
 8008f1e:	2b10      	cmp	r3, #16
 8008f20:	d122      	bne.n	8008f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f003 0310 	and.w	r3, r3, #16
 8008f2c:	2b10      	cmp	r3, #16
 8008f2e:	d11b      	bne.n	8008f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f06f 0210 	mvn.w	r2, #16
 8008f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2208      	movs	r2, #8
 8008f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fd26 	bl	80099a0 <HAL_TIM_IC_CaptureCallback>
 8008f54:	e005      	b.n	8008f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fd18 	bl	800998c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fd29 	bl	80099b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d10e      	bne.n	8008f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d107      	bne.n	8008f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f06f 0201 	mvn.w	r2, #1
 8008f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7f8 ff94 	bl	8001ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f9e:	2b80      	cmp	r3, #128	; 0x80
 8008fa0:	d10e      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fac:	2b80      	cmp	r3, #128	; 0x80
 8008fae:	d107      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 f9c6 	bl	800a34c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fca:	2b40      	cmp	r3, #64	; 0x40
 8008fcc:	d10e      	bne.n	8008fec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd8:	2b40      	cmp	r3, #64	; 0x40
 8008fda:	d107      	bne.n	8008fec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fcee 	bl	80099c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d10e      	bne.n	8009018 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b20      	cmp	r3, #32
 8009006:	d107      	bne.n	8009018 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f06f 0220 	mvn.w	r2, #32
 8009010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 f990 	bl	800a338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009018:	bf00      	nop
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d010      	beq.n	8009058 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b04      	cmp	r3, #4
 800903a:	d00d      	beq.n	8009058 <HAL_TIM_PWM_ConfigChannel+0x38>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b08      	cmp	r3, #8
 8009040:	d00a      	beq.n	8009058 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b0c      	cmp	r3, #12
 8009046:	d007      	beq.n	8009058 <HAL_TIM_PWM_ConfigChannel+0x38>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b3c      	cmp	r3, #60	; 0x3c
 800904c:	d004      	beq.n	8009058 <HAL_TIM_PWM_ConfigChannel+0x38>
 800904e:	f241 0177 	movw	r1, #4215	; 0x1077
 8009052:	4893      	ldr	r0, [pc, #588]	; (80092a0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009054:	f7f8 ff57 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b60      	cmp	r3, #96	; 0x60
 800905e:	d008      	beq.n	8009072 <HAL_TIM_PWM_ConfigChannel+0x52>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b70      	cmp	r3, #112	; 0x70
 8009066:	d004      	beq.n	8009072 <HAL_TIM_PWM_ConfigChannel+0x52>
 8009068:	f241 0178 	movw	r1, #4216	; 0x1078
 800906c:	488c      	ldr	r0, [pc, #560]	; (80092a0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800906e:	f7f8 ff4a 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d008      	beq.n	800908c <HAL_TIM_PWM_ConfigChannel+0x6c>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	2b02      	cmp	r3, #2
 8009080:	d004      	beq.n	800908c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8009082:	f241 0179 	movw	r1, #4217	; 0x1079
 8009086:	4886      	ldr	r0, [pc, #536]	; (80092a0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009088:	f7f8 ff3d 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d008      	beq.n	80090a6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	2b04      	cmp	r3, #4
 800909a:	d004      	beq.n	80090a6 <HAL_TIM_PWM_ConfigChannel+0x86>
 800909c:	f241 017a 	movw	r1, #4218	; 0x107a
 80090a0:	487f      	ldr	r0, [pc, #508]	; (80092a0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80090a2:	f7f8 ff30 	bl	8001f06 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d101      	bne.n	80090b4 <HAL_TIM_PWM_ConfigChannel+0x94>
 80090b0:	2302      	movs	r3, #2
 80090b2:	e14c      	b.n	800934e <HAL_TIM_PWM_ConfigChannel+0x32e>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b0c      	cmp	r3, #12
 80090c0:	f200 813d 	bhi.w	800933e <HAL_TIM_PWM_ConfigChannel+0x31e>
 80090c4:	a201      	add	r2, pc, #4	; (adr r2, 80090cc <HAL_TIM_PWM_ConfigChannel+0xac>)
 80090c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ca:	bf00      	nop
 80090cc:	08009101 	.word	0x08009101
 80090d0:	0800933f 	.word	0x0800933f
 80090d4:	0800933f 	.word	0x0800933f
 80090d8:	0800933f 	.word	0x0800933f
 80090dc:	0800919b 	.word	0x0800919b
 80090e0:	0800933f 	.word	0x0800933f
 80090e4:	0800933f 	.word	0x0800933f
 80090e8:	0800933f 	.word	0x0800933f
 80090ec:	08009223 	.word	0x08009223
 80090f0:	0800933f 	.word	0x0800933f
 80090f4:	0800933f 	.word	0x0800933f
 80090f8:	0800933f 	.word	0x0800933f
 80090fc:	080092c1 	.word	0x080092c1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a67      	ldr	r2, [pc, #412]	; (80092a4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d027      	beq.n	800915a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009112:	d022      	beq.n	800915a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a63      	ldr	r2, [pc, #396]	; (80092a8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d01d      	beq.n	800915a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a62      	ldr	r2, [pc, #392]	; (80092ac <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d018      	beq.n	800915a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a60      	ldr	r2, [pc, #384]	; (80092b0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d013      	beq.n	800915a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a5f      	ldr	r2, [pc, #380]	; (80092b4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00e      	beq.n	800915a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a5d      	ldr	r2, [pc, #372]	; (80092b8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d009      	beq.n	800915a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a5c      	ldr	r2, [pc, #368]	; (80092bc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d004      	beq.n	800915a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8009150:	f241 0184 	movw	r1, #4228	; 0x1084
 8009154:	4852      	ldr	r0, [pc, #328]	; (80092a0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009156:	f7f8 fed6 	bl	8001f06 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68b9      	ldr	r1, [r7, #8]
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fd0f 	bl	8009b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	699a      	ldr	r2, [r3, #24]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f042 0208 	orr.w	r2, r2, #8
 8009174:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	699a      	ldr	r2, [r3, #24]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0204 	bic.w	r2, r2, #4
 8009184:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6999      	ldr	r1, [r3, #24]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	691a      	ldr	r2, [r3, #16]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	619a      	str	r2, [r3, #24]
      break;
 8009198:	e0d4      	b.n	8009344 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a41      	ldr	r2, [pc, #260]	; (80092a4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d01d      	beq.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ac:	d018      	beq.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a3d      	ldr	r2, [pc, #244]	; (80092a8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d013      	beq.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a3b      	ldr	r2, [pc, #236]	; (80092ac <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d00e      	beq.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a3a      	ldr	r2, [pc, #232]	; (80092b0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d009      	beq.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a38      	ldr	r2, [pc, #224]	; (80092b4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d004      	beq.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80091d6:	f241 0195 	movw	r1, #4245	; 0x1095
 80091da:	4831      	ldr	r0, [pc, #196]	; (80092a0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80091dc:	f7f8 fe93 	bl	8001f06 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68b9      	ldr	r1, [r7, #8]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fd5c 	bl	8009ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	699a      	ldr	r2, [r3, #24]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800920a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6999      	ldr	r1, [r3, #24]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	021a      	lsls	r2, r3, #8
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	619a      	str	r2, [r3, #24]
      break;
 8009220:	e090      	b.n	8009344 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a1f      	ldr	r2, [pc, #124]	; (80092a4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d018      	beq.n	800925e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009234:	d013      	beq.n	800925e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a1b      	ldr	r2, [pc, #108]	; (80092a8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d00e      	beq.n	800925e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a19      	ldr	r2, [pc, #100]	; (80092ac <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d009      	beq.n	800925e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a18      	ldr	r2, [pc, #96]	; (80092b0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d004      	beq.n	800925e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8009254:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8009258:	4811      	ldr	r0, [pc, #68]	; (80092a0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800925a:	f7f8 fe54 	bl	8001f06 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68b9      	ldr	r1, [r7, #8]
 8009264:	4618      	mov	r0, r3
 8009266:	f000 fdb1 	bl	8009dcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69da      	ldr	r2, [r3, #28]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0208 	orr.w	r2, r2, #8
 8009278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69da      	ldr	r2, [r3, #28]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0204 	bic.w	r2, r2, #4
 8009288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	69d9      	ldr	r1, [r3, #28]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	691a      	ldr	r2, [r3, #16]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	430a      	orrs	r2, r1
 800929a:	61da      	str	r2, [r3, #28]
      break;
 800929c:	e052      	b.n	8009344 <HAL_TIM_PWM_ConfigChannel+0x324>
 800929e:	bf00      	nop
 80092a0:	08012824 	.word	0x08012824
 80092a4:	40010000 	.word	0x40010000
 80092a8:	40000400 	.word	0x40000400
 80092ac:	40000800 	.word	0x40000800
 80092b0:	40000c00 	.word	0x40000c00
 80092b4:	40014000 	.word	0x40014000
 80092b8:	40014400 	.word	0x40014400
 80092bc:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a24      	ldr	r2, [pc, #144]	; (8009358 <HAL_TIM_PWM_ConfigChannel+0x338>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d018      	beq.n	80092fc <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d2:	d013      	beq.n	80092fc <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a20      	ldr	r2, [pc, #128]	; (800935c <HAL_TIM_PWM_ConfigChannel+0x33c>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00e      	beq.n	80092fc <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1f      	ldr	r2, [pc, #124]	; (8009360 <HAL_TIM_PWM_ConfigChannel+0x340>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d009      	beq.n	80092fc <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a1d      	ldr	r2, [pc, #116]	; (8009364 <HAL_TIM_PWM_ConfigChannel+0x344>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d004      	beq.n	80092fc <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80092f2:	f241 01b7 	movw	r1, #4279	; 0x10b7
 80092f6:	481c      	ldr	r0, [pc, #112]	; (8009368 <HAL_TIM_PWM_ConfigChannel+0x348>)
 80092f8:	f7f8 fe05 	bl	8001f06 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	4618      	mov	r0, r3
 8009304:	f000 fdf6 	bl	8009ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	69da      	ldr	r2, [r3, #28]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009316:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	69da      	ldr	r2, [r3, #28]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009326:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	69d9      	ldr	r1, [r3, #28]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	021a      	lsls	r2, r3, #8
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	61da      	str	r2, [r3, #28]
      break;
 800933c:	e002      	b.n	8009344 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	75fb      	strb	r3, [r7, #23]
      break;
 8009342:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800934c:	7dfb      	ldrb	r3, [r7, #23]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	40010000 	.word	0x40010000
 800935c:	40000400 	.word	0x40000400
 8009360:	40000800 	.word	0x40000800
 8009364:	40000c00 	.word	0x40000c00
 8009368:	08012824 	.word	0x08012824

0800936c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009380:	2b01      	cmp	r3, #1
 8009382:	d101      	bne.n	8009388 <HAL_TIM_ConfigClockSource+0x1c>
 8009384:	2302      	movs	r3, #2
 8009386:	e2f0      	b.n	800996a <HAL_TIM_ConfigClockSource+0x5fe>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a0:	d029      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x8a>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b70      	cmp	r3, #112	; 0x70
 80093a8:	d025      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x8a>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093b2:	d020      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x8a>
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b40      	cmp	r3, #64	; 0x40
 80093ba:	d01c      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x8a>
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b50      	cmp	r3, #80	; 0x50
 80093c2:	d018      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x8a>
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b60      	cmp	r3, #96	; 0x60
 80093ca:	d014      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x8a>
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d010      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x8a>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b10      	cmp	r3, #16
 80093da:	d00c      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x8a>
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b20      	cmp	r3, #32
 80093e2:	d008      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x8a>
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b30      	cmp	r3, #48	; 0x30
 80093ea:	d004      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x8a>
 80093ec:	f241 41b7 	movw	r1, #5303	; 0x14b7
 80093f0:	487c      	ldr	r0, [pc, #496]	; (80095e4 <HAL_TIM_ConfigClockSource+0x278>)
 80093f2:	f7f8 fd88 	bl	8001f06 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009404:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800940c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800941e:	f000 80f1 	beq.w	8009604 <HAL_TIM_ConfigClockSource+0x298>
 8009422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009426:	f200 8293 	bhi.w	8009950 <HAL_TIM_ConfigClockSource+0x5e4>
 800942a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800942e:	d02d      	beq.n	800948c <HAL_TIM_ConfigClockSource+0x120>
 8009430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009434:	f200 828c 	bhi.w	8009950 <HAL_TIM_ConfigClockSource+0x5e4>
 8009438:	2b70      	cmp	r3, #112	; 0x70
 800943a:	d05d      	beq.n	80094f8 <HAL_TIM_ConfigClockSource+0x18c>
 800943c:	2b70      	cmp	r3, #112	; 0x70
 800943e:	f200 8287 	bhi.w	8009950 <HAL_TIM_ConfigClockSource+0x5e4>
 8009442:	2b60      	cmp	r3, #96	; 0x60
 8009444:	f000 81a0 	beq.w	8009788 <HAL_TIM_ConfigClockSource+0x41c>
 8009448:	2b60      	cmp	r3, #96	; 0x60
 800944a:	f200 8281 	bhi.w	8009950 <HAL_TIM_ConfigClockSource+0x5e4>
 800944e:	2b50      	cmp	r3, #80	; 0x50
 8009450:	f000 8144 	beq.w	80096dc <HAL_TIM_ConfigClockSource+0x370>
 8009454:	2b50      	cmp	r3, #80	; 0x50
 8009456:	f200 827b 	bhi.w	8009950 <HAL_TIM_ConfigClockSource+0x5e4>
 800945a:	2b40      	cmp	r3, #64	; 0x40
 800945c:	f000 81f6 	beq.w	800984c <HAL_TIM_ConfigClockSource+0x4e0>
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	f200 8275 	bhi.w	8009950 <HAL_TIM_ConfigClockSource+0x5e4>
 8009466:	2b30      	cmp	r3, #48	; 0x30
 8009468:	f000 8246 	beq.w	80098f8 <HAL_TIM_ConfigClockSource+0x58c>
 800946c:	2b30      	cmp	r3, #48	; 0x30
 800946e:	f200 826f 	bhi.w	8009950 <HAL_TIM_ConfigClockSource+0x5e4>
 8009472:	2b20      	cmp	r3, #32
 8009474:	f000 8240 	beq.w	80098f8 <HAL_TIM_ConfigClockSource+0x58c>
 8009478:	2b20      	cmp	r3, #32
 800947a:	f200 8269 	bhi.w	8009950 <HAL_TIM_ConfigClockSource+0x5e4>
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 823a 	beq.w	80098f8 <HAL_TIM_ConfigClockSource+0x58c>
 8009484:	2b10      	cmp	r3, #16
 8009486:	f000 8237 	beq.w	80098f8 <HAL_TIM_ConfigClockSource+0x58c>
 800948a:	e261      	b.n	8009950 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a55      	ldr	r2, [pc, #340]	; (80095e8 <HAL_TIM_ConfigClockSource+0x27c>)
 8009492:	4293      	cmp	r3, r2
 8009494:	f000 825f 	beq.w	8009956 <HAL_TIM_ConfigClockSource+0x5ea>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a0:	f000 8259 	beq.w	8009956 <HAL_TIM_ConfigClockSource+0x5ea>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a50      	ldr	r2, [pc, #320]	; (80095ec <HAL_TIM_ConfigClockSource+0x280>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	f000 8253 	beq.w	8009956 <HAL_TIM_ConfigClockSource+0x5ea>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a4e      	ldr	r2, [pc, #312]	; (80095f0 <HAL_TIM_ConfigClockSource+0x284>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	f000 824d 	beq.w	8009956 <HAL_TIM_ConfigClockSource+0x5ea>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a4c      	ldr	r2, [pc, #304]	; (80095f4 <HAL_TIM_ConfigClockSource+0x288>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	f000 8247 	beq.w	8009956 <HAL_TIM_ConfigClockSource+0x5ea>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a4a      	ldr	r2, [pc, #296]	; (80095f8 <HAL_TIM_ConfigClockSource+0x28c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	f000 8241 	beq.w	8009956 <HAL_TIM_ConfigClockSource+0x5ea>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a48      	ldr	r2, [pc, #288]	; (80095fc <HAL_TIM_ConfigClockSource+0x290>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	f000 823b 	beq.w	8009956 <HAL_TIM_ConfigClockSource+0x5ea>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a46      	ldr	r2, [pc, #280]	; (8009600 <HAL_TIM_ConfigClockSource+0x294>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	f000 8235 	beq.w	8009956 <HAL_TIM_ConfigClockSource+0x5ea>
 80094ec:	f241 41c3 	movw	r1, #5315	; 0x14c3
 80094f0:	483c      	ldr	r0, [pc, #240]	; (80095e4 <HAL_TIM_ConfigClockSource+0x278>)
 80094f2:	f7f8 fd08 	bl	8001f06 <assert_failed>
      break;
 80094f6:	e22e      	b.n	8009956 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a3a      	ldr	r2, [pc, #232]	; (80095e8 <HAL_TIM_ConfigClockSource+0x27c>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d01d      	beq.n	800953e <HAL_TIM_ConfigClockSource+0x1d2>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800950a:	d018      	beq.n	800953e <HAL_TIM_ConfigClockSource+0x1d2>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a36      	ldr	r2, [pc, #216]	; (80095ec <HAL_TIM_ConfigClockSource+0x280>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d013      	beq.n	800953e <HAL_TIM_ConfigClockSource+0x1d2>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a35      	ldr	r2, [pc, #212]	; (80095f0 <HAL_TIM_ConfigClockSource+0x284>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d00e      	beq.n	800953e <HAL_TIM_ConfigClockSource+0x1d2>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a33      	ldr	r2, [pc, #204]	; (80095f4 <HAL_TIM_ConfigClockSource+0x288>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d009      	beq.n	800953e <HAL_TIM_ConfigClockSource+0x1d2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a32      	ldr	r2, [pc, #200]	; (80095f8 <HAL_TIM_ConfigClockSource+0x28c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d004      	beq.n	800953e <HAL_TIM_ConfigClockSource+0x1d2>
 8009534:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8009538:	482a      	ldr	r0, [pc, #168]	; (80095e4 <HAL_TIM_ConfigClockSource+0x278>)
 800953a:	f7f8 fce4 	bl	8001f06 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d013      	beq.n	800956e <HAL_TIM_ConfigClockSource+0x202>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800954e:	d00e      	beq.n	800956e <HAL_TIM_ConfigClockSource+0x202>
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009558:	d009      	beq.n	800956e <HAL_TIM_ConfigClockSource+0x202>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009562:	d004      	beq.n	800956e <HAL_TIM_ConfigClockSource+0x202>
 8009564:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8009568:	481e      	ldr	r0, [pc, #120]	; (80095e4 <HAL_TIM_ConfigClockSource+0x278>)
 800956a:	f7f8 fccc 	bl	8001f06 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009576:	d014      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x236>
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d010      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x236>
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00c      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x236>
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d008      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x236>
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	2b0a      	cmp	r3, #10
 8009596:	d004      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x236>
 8009598:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800959c:	4811      	ldr	r0, [pc, #68]	; (80095e4 <HAL_TIM_ConfigClockSource+0x278>)
 800959e:	f7f8 fcb2 	bl	8001f06 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	2b0f      	cmp	r3, #15
 80095a8:	d904      	bls.n	80095b4 <HAL_TIM_ConfigClockSource+0x248>
 80095aa:	f241 41cf 	movw	r1, #5327	; 0x14cf
 80095ae:	480d      	ldr	r0, [pc, #52]	; (80095e4 <HAL_TIM_ConfigClockSource+0x278>)
 80095b0:	f7f8 fca9 	bl	8001f06 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	6899      	ldr	r1, [r3, #8]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f000 fd6e 	bl	800a0a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80095d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	609a      	str	r2, [r3, #8]
      break;
 80095e0:	e1ba      	b.n	8009958 <HAL_TIM_ConfigClockSource+0x5ec>
 80095e2:	bf00      	nop
 80095e4:	08012824 	.word	0x08012824
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40000400 	.word	0x40000400
 80095f0:	40000800 	.word	0x40000800
 80095f4:	40000c00 	.word	0x40000c00
 80095f8:	40014000 	.word	0x40014000
 80095fc:	40014400 	.word	0x40014400
 8009600:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a8a      	ldr	r2, [pc, #552]	; (8009834 <HAL_TIM_ConfigClockSource+0x4c8>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d018      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0x2d4>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009616:	d013      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0x2d4>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a86      	ldr	r2, [pc, #536]	; (8009838 <HAL_TIM_ConfigClockSource+0x4cc>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d00e      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0x2d4>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a85      	ldr	r2, [pc, #532]	; (800983c <HAL_TIM_ConfigClockSource+0x4d0>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d009      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0x2d4>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a83      	ldr	r2, [pc, #524]	; (8009840 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d004      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0x2d4>
 8009636:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800963a:	4882      	ldr	r0, [pc, #520]	; (8009844 <HAL_TIM_ConfigClockSource+0x4d8>)
 800963c:	f7f8 fc63 	bl	8001f06 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d013      	beq.n	8009670 <HAL_TIM_ConfigClockSource+0x304>
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009650:	d00e      	beq.n	8009670 <HAL_TIM_ConfigClockSource+0x304>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800965a:	d009      	beq.n	8009670 <HAL_TIM_ConfigClockSource+0x304>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009664:	d004      	beq.n	8009670 <HAL_TIM_ConfigClockSource+0x304>
 8009666:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800966a:	4876      	ldr	r0, [pc, #472]	; (8009844 <HAL_TIM_ConfigClockSource+0x4d8>)
 800966c:	f7f8 fc4b 	bl	8001f06 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009678:	d014      	beq.n	80096a4 <HAL_TIM_ConfigClockSource+0x338>
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d010      	beq.n	80096a4 <HAL_TIM_ConfigClockSource+0x338>
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00c      	beq.n	80096a4 <HAL_TIM_ConfigClockSource+0x338>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2b02      	cmp	r3, #2
 8009690:	d008      	beq.n	80096a4 <HAL_TIM_ConfigClockSource+0x338>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	2b0a      	cmp	r3, #10
 8009698:	d004      	beq.n	80096a4 <HAL_TIM_ConfigClockSource+0x338>
 800969a:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800969e:	4869      	ldr	r0, [pc, #420]	; (8009844 <HAL_TIM_ConfigClockSource+0x4d8>)
 80096a0:	f7f8 fc31 	bl	8001f06 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	2b0f      	cmp	r3, #15
 80096aa:	d904      	bls.n	80096b6 <HAL_TIM_ConfigClockSource+0x34a>
 80096ac:	f241 41e7 	movw	r1, #5351	; 0x14e7
 80096b0:	4864      	ldr	r0, [pc, #400]	; (8009844 <HAL_TIM_ConfigClockSource+0x4d8>)
 80096b2:	f7f8 fc28 	bl	8001f06 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	6899      	ldr	r1, [r3, #8]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f000 fced 	bl	800a0a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689a      	ldr	r2, [r3, #8]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096d8:	609a      	str	r2, [r3, #8]
      break;
 80096da:	e13d      	b.n	8009958 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a54      	ldr	r2, [pc, #336]	; (8009834 <HAL_TIM_ConfigClockSource+0x4c8>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d01d      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x3b6>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ee:	d018      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x3b6>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a50      	ldr	r2, [pc, #320]	; (8009838 <HAL_TIM_ConfigClockSource+0x4cc>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d013      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x3b6>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a4f      	ldr	r2, [pc, #316]	; (800983c <HAL_TIM_ConfigClockSource+0x4d0>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d00e      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x3b6>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a4d      	ldr	r2, [pc, #308]	; (8009840 <HAL_TIM_ConfigClockSource+0x4d4>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d009      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x3b6>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a4d      	ldr	r2, [pc, #308]	; (8009848 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d004      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x3b6>
 8009718:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800971c:	4849      	ldr	r0, [pc, #292]	; (8009844 <HAL_TIM_ConfigClockSource+0x4d8>)
 800971e:	f7f8 fbf2 	bl	8001f06 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800972a:	d014      	beq.n	8009756 <HAL_TIM_ConfigClockSource+0x3ea>
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d010      	beq.n	8009756 <HAL_TIM_ConfigClockSource+0x3ea>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00c      	beq.n	8009756 <HAL_TIM_ConfigClockSource+0x3ea>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	2b02      	cmp	r3, #2
 8009742:	d008      	beq.n	8009756 <HAL_TIM_ConfigClockSource+0x3ea>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	2b0a      	cmp	r3, #10
 800974a:	d004      	beq.n	8009756 <HAL_TIM_ConfigClockSource+0x3ea>
 800974c:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8009750:	483c      	ldr	r0, [pc, #240]	; (8009844 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009752:	f7f8 fbd8 	bl	8001f06 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	2b0f      	cmp	r3, #15
 800975c:	d904      	bls.n	8009768 <HAL_TIM_ConfigClockSource+0x3fc>
 800975e:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8009762:	4838      	ldr	r0, [pc, #224]	; (8009844 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009764:	f7f8 fbcf 	bl	8001f06 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	6859      	ldr	r1, [r3, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	461a      	mov	r2, r3
 8009776:	f000 fc1b 	bl	8009fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2150      	movs	r1, #80	; 0x50
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fc74 	bl	800a06e <TIM_ITRx_SetConfig>
      break;
 8009786:	e0e7      	b.n	8009958 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a29      	ldr	r2, [pc, #164]	; (8009834 <HAL_TIM_ConfigClockSource+0x4c8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d01d      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x462>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800979a:	d018      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x462>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a25      	ldr	r2, [pc, #148]	; (8009838 <HAL_TIM_ConfigClockSource+0x4cc>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d013      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x462>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a24      	ldr	r2, [pc, #144]	; (800983c <HAL_TIM_ConfigClockSource+0x4d0>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d00e      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x462>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a22      	ldr	r2, [pc, #136]	; (8009840 <HAL_TIM_ConfigClockSource+0x4d4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d009      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x462>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a22      	ldr	r2, [pc, #136]	; (8009848 <HAL_TIM_ConfigClockSource+0x4dc>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d004      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x462>
 80097c4:	f241 5106 	movw	r1, #5382	; 0x1506
 80097c8:	481e      	ldr	r0, [pc, #120]	; (8009844 <HAL_TIM_ConfigClockSource+0x4d8>)
 80097ca:	f7f8 fb9c 	bl	8001f06 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097d6:	d014      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x496>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d010      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x496>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00c      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x496>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d008      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x496>
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	2b0a      	cmp	r3, #10
 80097f6:	d004      	beq.n	8009802 <HAL_TIM_ConfigClockSource+0x496>
 80097f8:	f241 5109 	movw	r1, #5385	; 0x1509
 80097fc:	4811      	ldr	r0, [pc, #68]	; (8009844 <HAL_TIM_ConfigClockSource+0x4d8>)
 80097fe:	f7f8 fb82 	bl	8001f06 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	2b0f      	cmp	r3, #15
 8009808:	d904      	bls.n	8009814 <HAL_TIM_ConfigClockSource+0x4a8>
 800980a:	f241 510a 	movw	r1, #5386	; 0x150a
 800980e:	480d      	ldr	r0, [pc, #52]	; (8009844 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009810:	f7f8 fb79 	bl	8001f06 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6818      	ldr	r0, [r3, #0]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	6859      	ldr	r1, [r3, #4]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	461a      	mov	r2, r3
 8009822:	f000 fbf4 	bl	800a00e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2160      	movs	r1, #96	; 0x60
 800982c:	4618      	mov	r0, r3
 800982e:	f000 fc1e 	bl	800a06e <TIM_ITRx_SetConfig>
      break;
 8009832:	e091      	b.n	8009958 <HAL_TIM_ConfigClockSource+0x5ec>
 8009834:	40010000 	.word	0x40010000
 8009838:	40000400 	.word	0x40000400
 800983c:	40000800 	.word	0x40000800
 8009840:	40000c00 	.word	0x40000c00
 8009844:	08012824 	.word	0x08012824
 8009848:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a48      	ldr	r2, [pc, #288]	; (8009974 <HAL_TIM_ConfigClockSource+0x608>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d01d      	beq.n	8009892 <HAL_TIM_ConfigClockSource+0x526>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800985e:	d018      	beq.n	8009892 <HAL_TIM_ConfigClockSource+0x526>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a44      	ldr	r2, [pc, #272]	; (8009978 <HAL_TIM_ConfigClockSource+0x60c>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d013      	beq.n	8009892 <HAL_TIM_ConfigClockSource+0x526>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a43      	ldr	r2, [pc, #268]	; (800997c <HAL_TIM_ConfigClockSource+0x610>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00e      	beq.n	8009892 <HAL_TIM_ConfigClockSource+0x526>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a41      	ldr	r2, [pc, #260]	; (8009980 <HAL_TIM_ConfigClockSource+0x614>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d009      	beq.n	8009892 <HAL_TIM_ConfigClockSource+0x526>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a40      	ldr	r2, [pc, #256]	; (8009984 <HAL_TIM_ConfigClockSource+0x618>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d004      	beq.n	8009892 <HAL_TIM_ConfigClockSource+0x526>
 8009888:	f241 5116 	movw	r1, #5398	; 0x1516
 800988c:	483e      	ldr	r0, [pc, #248]	; (8009988 <HAL_TIM_ConfigClockSource+0x61c>)
 800988e:	f7f8 fb3a 	bl	8001f06 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800989a:	d014      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x55a>
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d010      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x55a>
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00c      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x55a>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d008      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x55a>
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	2b0a      	cmp	r3, #10
 80098ba:	d004      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0x55a>
 80098bc:	f241 5119 	movw	r1, #5401	; 0x1519
 80098c0:	4831      	ldr	r0, [pc, #196]	; (8009988 <HAL_TIM_ConfigClockSource+0x61c>)
 80098c2:	f7f8 fb20 	bl	8001f06 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	2b0f      	cmp	r3, #15
 80098cc:	d904      	bls.n	80098d8 <HAL_TIM_ConfigClockSource+0x56c>
 80098ce:	f241 511a 	movw	r1, #5402	; 0x151a
 80098d2:	482d      	ldr	r0, [pc, #180]	; (8009988 <HAL_TIM_ConfigClockSource+0x61c>)
 80098d4:	f7f8 fb17 	bl	8001f06 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	6859      	ldr	r1, [r3, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	461a      	mov	r2, r3
 80098e6:	f000 fb63 	bl	8009fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2140      	movs	r1, #64	; 0x40
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fbbc 	bl	800a06e <TIM_ITRx_SetConfig>
      break;
 80098f6:	e02f      	b.n	8009958 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a1d      	ldr	r2, [pc, #116]	; (8009974 <HAL_TIM_ConfigClockSource+0x608>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d01d      	beq.n	800993e <HAL_TIM_ConfigClockSource+0x5d2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800990a:	d018      	beq.n	800993e <HAL_TIM_ConfigClockSource+0x5d2>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a19      	ldr	r2, [pc, #100]	; (8009978 <HAL_TIM_ConfigClockSource+0x60c>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d013      	beq.n	800993e <HAL_TIM_ConfigClockSource+0x5d2>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a18      	ldr	r2, [pc, #96]	; (800997c <HAL_TIM_ConfigClockSource+0x610>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d00e      	beq.n	800993e <HAL_TIM_ConfigClockSource+0x5d2>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a16      	ldr	r2, [pc, #88]	; (8009980 <HAL_TIM_ConfigClockSource+0x614>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d009      	beq.n	800993e <HAL_TIM_ConfigClockSource+0x5d2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a15      	ldr	r2, [pc, #84]	; (8009984 <HAL_TIM_ConfigClockSource+0x618>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d004      	beq.n	800993e <HAL_TIM_ConfigClockSource+0x5d2>
 8009934:	f241 5129 	movw	r1, #5417	; 0x1529
 8009938:	4813      	ldr	r0, [pc, #76]	; (8009988 <HAL_TIM_ConfigClockSource+0x61c>)
 800993a:	f7f8 fae4 	bl	8001f06 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4619      	mov	r1, r3
 8009948:	4610      	mov	r0, r2
 800994a:	f000 fb90 	bl	800a06e <TIM_ITRx_SetConfig>
      break;
 800994e:	e003      	b.n	8009958 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	73fb      	strb	r3, [r7, #15]
      break;
 8009954:	e000      	b.n	8009958 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8009956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009968:	7bfb      	ldrb	r3, [r7, #15]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	40010000 	.word	0x40010000
 8009978:	40000400 	.word	0x40000400
 800997c:	40000800 	.word	0x40000800
 8009980:	40000c00 	.word	0x40000c00
 8009984:	40014000 	.word	0x40014000
 8009988:	08012824 	.word	0x08012824

0800998c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d107      	bne.n	8009a18 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a16:	e02a      	b.n	8009a6e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d107      	bne.n	8009a32 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2202      	movs	r2, #2
 8009a26:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a30:	e01d      	b.n	8009a6e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d107      	bne.n	8009a4c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2204      	movs	r2, #4
 8009a40:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a4a:	e010      	b.n	8009a6e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d107      	bne.n	8009a66 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2208      	movs	r2, #8
 8009a5a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a64:	e003      	b.n	8009a6e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f7ff ffb4 	bl	80099dc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	771a      	strb	r2, [r3, #28]
}
 8009a7a:	bf00      	nop
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
	...

08009a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a34      	ldr	r2, [pc, #208]	; (8009b68 <TIM_Base_SetConfig+0xe4>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d00f      	beq.n	8009abc <TIM_Base_SetConfig+0x38>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aa2:	d00b      	beq.n	8009abc <TIM_Base_SetConfig+0x38>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a31      	ldr	r2, [pc, #196]	; (8009b6c <TIM_Base_SetConfig+0xe8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d007      	beq.n	8009abc <TIM_Base_SetConfig+0x38>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a30      	ldr	r2, [pc, #192]	; (8009b70 <TIM_Base_SetConfig+0xec>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d003      	beq.n	8009abc <TIM_Base_SetConfig+0x38>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a2f      	ldr	r2, [pc, #188]	; (8009b74 <TIM_Base_SetConfig+0xf0>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d108      	bne.n	8009ace <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a25      	ldr	r2, [pc, #148]	; (8009b68 <TIM_Base_SetConfig+0xe4>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d01b      	beq.n	8009b0e <TIM_Base_SetConfig+0x8a>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009adc:	d017      	beq.n	8009b0e <TIM_Base_SetConfig+0x8a>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a22      	ldr	r2, [pc, #136]	; (8009b6c <TIM_Base_SetConfig+0xe8>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d013      	beq.n	8009b0e <TIM_Base_SetConfig+0x8a>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a21      	ldr	r2, [pc, #132]	; (8009b70 <TIM_Base_SetConfig+0xec>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d00f      	beq.n	8009b0e <TIM_Base_SetConfig+0x8a>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a20      	ldr	r2, [pc, #128]	; (8009b74 <TIM_Base_SetConfig+0xf0>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d00b      	beq.n	8009b0e <TIM_Base_SetConfig+0x8a>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a1f      	ldr	r2, [pc, #124]	; (8009b78 <TIM_Base_SetConfig+0xf4>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d007      	beq.n	8009b0e <TIM_Base_SetConfig+0x8a>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a1e      	ldr	r2, [pc, #120]	; (8009b7c <TIM_Base_SetConfig+0xf8>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d003      	beq.n	8009b0e <TIM_Base_SetConfig+0x8a>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a1d      	ldr	r2, [pc, #116]	; (8009b80 <TIM_Base_SetConfig+0xfc>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d108      	bne.n	8009b20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	689a      	ldr	r2, [r3, #8]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a08      	ldr	r2, [pc, #32]	; (8009b68 <TIM_Base_SetConfig+0xe4>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d103      	bne.n	8009b54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	691a      	ldr	r2, [r3, #16]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	615a      	str	r2, [r3, #20]
}
 8009b5a:	bf00      	nop
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	40010000 	.word	0x40010000
 8009b6c:	40000400 	.word	0x40000400
 8009b70:	40000800 	.word	0x40000800
 8009b74:	40000c00 	.word	0x40000c00
 8009b78:	40014000 	.word	0x40014000
 8009b7c:	40014400 	.word	0x40014400
 8009b80:	40014800 	.word	0x40014800

08009b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	f023 0201 	bic.w	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f023 0303 	bic.w	r3, r3, #3
 8009bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f023 0302 	bic.w	r3, r3, #2
 8009bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a30      	ldr	r2, [pc, #192]	; (8009c9c <TIM_OC1_SetConfig+0x118>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d119      	bne.n	8009c14 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d008      	beq.n	8009bfa <TIM_OC1_SetConfig+0x76>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d004      	beq.n	8009bfa <TIM_OC1_SetConfig+0x76>
 8009bf0:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 8009bf4:	482a      	ldr	r0, [pc, #168]	; (8009ca0 <TIM_OC1_SetConfig+0x11c>)
 8009bf6:	f7f8 f986 	bl	8001f06 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f023 0308 	bic.w	r3, r3, #8
 8009c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f023 0304 	bic.w	r3, r3, #4
 8009c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a21      	ldr	r2, [pc, #132]	; (8009c9c <TIM_OC1_SetConfig+0x118>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d12d      	bne.n	8009c78 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c24:	d008      	beq.n	8009c38 <TIM_OC1_SetConfig+0xb4>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d004      	beq.n	8009c38 <TIM_OC1_SetConfig+0xb4>
 8009c2e:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8009c32:	481b      	ldr	r0, [pc, #108]	; (8009ca0 <TIM_OC1_SetConfig+0x11c>)
 8009c34:	f7f8 f967 	bl	8001f06 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c40:	d008      	beq.n	8009c54 <TIM_OC1_SetConfig+0xd0>
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d004      	beq.n	8009c54 <TIM_OC1_SetConfig+0xd0>
 8009c4a:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 8009c4e:	4814      	ldr	r0, [pc, #80]	; (8009ca0 <TIM_OC1_SetConfig+0x11c>)
 8009c50:	f7f8 f959 	bl	8001f06 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	621a      	str	r2, [r3, #32]
}
 8009c92:	bf00      	nop
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	40010000 	.word	0x40010000
 8009ca0:	08012824 	.word	0x08012824

08009ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	f023 0210 	bic.w	r2, r3, #16
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	021b      	lsls	r3, r3, #8
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f023 0320 	bic.w	r3, r3, #32
 8009cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	011b      	lsls	r3, r3, #4
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a31      	ldr	r2, [pc, #196]	; (8009dc4 <TIM_OC2_SetConfig+0x120>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d11a      	bne.n	8009d3a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d008      	beq.n	8009d1e <TIM_OC2_SetConfig+0x7a>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d004      	beq.n	8009d1e <TIM_OC2_SetConfig+0x7a>
 8009d14:	f641 3112 	movw	r1, #6930	; 0x1b12
 8009d18:	482b      	ldr	r0, [pc, #172]	; (8009dc8 <TIM_OC2_SetConfig+0x124>)
 8009d1a:	f7f8 f8f4 	bl	8001f06 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	011b      	lsls	r3, r3, #4
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d38:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a21      	ldr	r2, [pc, #132]	; (8009dc4 <TIM_OC2_SetConfig+0x120>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d12f      	bne.n	8009da2 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d4a:	d008      	beq.n	8009d5e <TIM_OC2_SetConfig+0xba>
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d004      	beq.n	8009d5e <TIM_OC2_SetConfig+0xba>
 8009d54:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8009d58:	481b      	ldr	r0, [pc, #108]	; (8009dc8 <TIM_OC2_SetConfig+0x124>)
 8009d5a:	f7f8 f8d4 	bl	8001f06 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	695b      	ldr	r3, [r3, #20]
 8009d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d66:	d008      	beq.n	8009d7a <TIM_OC2_SetConfig+0xd6>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d004      	beq.n	8009d7a <TIM_OC2_SetConfig+0xd6>
 8009d70:	f641 3121 	movw	r1, #6945	; 0x1b21
 8009d74:	4814      	ldr	r0, [pc, #80]	; (8009dc8 <TIM_OC2_SetConfig+0x124>)
 8009d76:	f7f8 f8c6 	bl	8001f06 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	621a      	str	r2, [r3, #32]
}
 8009dbc:	bf00      	nop
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	40010000 	.word	0x40010000
 8009dc8:	08012824 	.word	0x08012824

08009dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a31      	ldr	r2, [pc, #196]	; (8009eec <TIM_OC3_SetConfig+0x120>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d11a      	bne.n	8009e60 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d008      	beq.n	8009e44 <TIM_OC3_SetConfig+0x78>
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	2b08      	cmp	r3, #8
 8009e38:	d004      	beq.n	8009e44 <TIM_OC3_SetConfig+0x78>
 8009e3a:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8009e3e:	482c      	ldr	r0, [pc, #176]	; (8009ef0 <TIM_OC3_SetConfig+0x124>)
 8009e40:	f7f8 f861 	bl	8001f06 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	021b      	lsls	r3, r3, #8
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a22      	ldr	r2, [pc, #136]	; (8009eec <TIM_OC3_SetConfig+0x120>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d12f      	bne.n	8009ec8 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e70:	d008      	beq.n	8009e84 <TIM_OC3_SetConfig+0xb8>
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d004      	beq.n	8009e84 <TIM_OC3_SetConfig+0xb8>
 8009e7a:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8009e7e:	481c      	ldr	r0, [pc, #112]	; (8009ef0 <TIM_OC3_SetConfig+0x124>)
 8009e80:	f7f8 f841 	bl	8001f06 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e8c:	d008      	beq.n	8009ea0 <TIM_OC3_SetConfig+0xd4>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <TIM_OC3_SetConfig+0xd4>
 8009e96:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8009e9a:	4815      	ldr	r0, [pc, #84]	; (8009ef0 <TIM_OC3_SetConfig+0x124>)
 8009e9c:	f7f8 f833 	bl	8001f06 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	011b      	lsls	r3, r3, #4
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	011b      	lsls	r3, r3, #4
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	621a      	str	r2, [r3, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	3718      	adds	r7, #24
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	40010000 	.word	0x40010000
 8009ef0:	08012824 	.word	0x08012824

08009ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	021b      	lsls	r3, r3, #8
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	031b      	lsls	r3, r3, #12
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a16      	ldr	r2, [pc, #88]	; (8009fa8 <TIM_OC4_SetConfig+0xb4>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d117      	bne.n	8009f84 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f5c:	d008      	beq.n	8009f70 <TIM_OC4_SetConfig+0x7c>
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d004      	beq.n	8009f70 <TIM_OC4_SetConfig+0x7c>
 8009f66:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8009f6a:	4810      	ldr	r0, [pc, #64]	; (8009fac <TIM_OC4_SetConfig+0xb8>)
 8009f6c:	f7f7 ffcb 	bl	8001f06 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	019b      	lsls	r3, r3, #6
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	621a      	str	r2, [r3, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	40010000 	.word	0x40010000
 8009fac:	08012824 	.word	0x08012824

08009fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b087      	sub	sp, #28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	f023 0201 	bic.w	r2, r3, #1
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	011b      	lsls	r3, r3, #4
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f023 030a 	bic.w	r3, r3, #10
 8009fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	621a      	str	r2, [r3, #32]
}
 800a002:	bf00      	nop
 800a004:	371c      	adds	r7, #28
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a00e:	b480      	push	{r7}
 800a010:	b087      	sub	sp, #28
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	f023 0210 	bic.w	r2, r3, #16
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	031b      	lsls	r3, r3, #12
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	4313      	orrs	r3, r2
 800a042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a04a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	4313      	orrs	r3, r2
 800a054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	621a      	str	r2, [r3, #32]
}
 800a062:	bf00      	nop
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a06e:	b480      	push	{r7}
 800a070:	b085      	sub	sp, #20
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	f043 0307 	orr.w	r3, r3, #7
 800a090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	609a      	str	r2, [r3, #8]
}
 800a098:	bf00      	nop
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	021a      	lsls	r2, r3, #8
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	609a      	str	r2, [r3, #8]
}
 800a0d8:	bf00      	nop
 800a0da:	371c      	adds	r7, #28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4a2a      	ldr	r2, [pc, #168]	; (800a19c <TIM_CCxChannelCmd+0xb8>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d020      	beq.n	800a13a <TIM_CCxChannelCmd+0x56>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0fe:	d01c      	beq.n	800a13a <TIM_CCxChannelCmd+0x56>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4a27      	ldr	r2, [pc, #156]	; (800a1a0 <TIM_CCxChannelCmd+0xbc>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d018      	beq.n	800a13a <TIM_CCxChannelCmd+0x56>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4a26      	ldr	r2, [pc, #152]	; (800a1a4 <TIM_CCxChannelCmd+0xc0>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d014      	beq.n	800a13a <TIM_CCxChannelCmd+0x56>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4a25      	ldr	r2, [pc, #148]	; (800a1a8 <TIM_CCxChannelCmd+0xc4>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d010      	beq.n	800a13a <TIM_CCxChannelCmd+0x56>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4a24      	ldr	r2, [pc, #144]	; (800a1ac <TIM_CCxChannelCmd+0xc8>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d00c      	beq.n	800a13a <TIM_CCxChannelCmd+0x56>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4a23      	ldr	r2, [pc, #140]	; (800a1b0 <TIM_CCxChannelCmd+0xcc>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d008      	beq.n	800a13a <TIM_CCxChannelCmd+0x56>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4a22      	ldr	r2, [pc, #136]	; (800a1b4 <TIM_CCxChannelCmd+0xd0>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d004      	beq.n	800a13a <TIM_CCxChannelCmd+0x56>
 800a130:	f641 5194 	movw	r1, #7572	; 0x1d94
 800a134:	4820      	ldr	r0, [pc, #128]	; (800a1b8 <TIM_CCxChannelCmd+0xd4>)
 800a136:	f7f7 fee6 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d010      	beq.n	800a162 <TIM_CCxChannelCmd+0x7e>
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2b04      	cmp	r3, #4
 800a144:	d00d      	beq.n	800a162 <TIM_CCxChannelCmd+0x7e>
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2b08      	cmp	r3, #8
 800a14a:	d00a      	beq.n	800a162 <TIM_CCxChannelCmd+0x7e>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b0c      	cmp	r3, #12
 800a150:	d007      	beq.n	800a162 <TIM_CCxChannelCmd+0x7e>
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b3c      	cmp	r3, #60	; 0x3c
 800a156:	d004      	beq.n	800a162 <TIM_CCxChannelCmd+0x7e>
 800a158:	f641 5195 	movw	r1, #7573	; 0x1d95
 800a15c:	4816      	ldr	r0, [pc, #88]	; (800a1b8 <TIM_CCxChannelCmd+0xd4>)
 800a15e:	f7f7 fed2 	bl	8001f06 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	f003 031f 	and.w	r3, r3, #31
 800a168:	2201      	movs	r2, #1
 800a16a:	fa02 f303 	lsl.w	r3, r2, r3
 800a16e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6a1a      	ldr	r2, [r3, #32]
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	43db      	mvns	r3, r3
 800a178:	401a      	ands	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6a1a      	ldr	r2, [r3, #32]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	f003 031f 	and.w	r3, r3, #31
 800a188:	6879      	ldr	r1, [r7, #4]
 800a18a:	fa01 f303 	lsl.w	r3, r1, r3
 800a18e:	431a      	orrs	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	621a      	str	r2, [r3, #32]
}
 800a194:	bf00      	nop
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	40010000 	.word	0x40010000
 800a1a0:	40000400 	.word	0x40000400
 800a1a4:	40000800 	.word	0x40000800
 800a1a8:	40000c00 	.word	0x40000c00
 800a1ac:	40014000 	.word	0x40014000
 800a1b0:	40014400 	.word	0x40014400
 800a1b4:	40014800 	.word	0x40014800
 800a1b8:	08012824 	.word	0x08012824

0800a1bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a55      	ldr	r2, [pc, #340]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d018      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d8:	d013      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a51      	ldr	r2, [pc, #324]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d00e      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a4f      	ldr	r2, [pc, #316]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d009      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a4e      	ldr	r2, [pc, #312]	; (800a32c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d004      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a1f8:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800a1fc:	484c      	ldr	r0, [pc, #304]	; (800a330 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a1fe:	f7f7 fe82 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d020      	beq.n	800a24c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b10      	cmp	r3, #16
 800a210:	d01c      	beq.n	800a24c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b20      	cmp	r3, #32
 800a218:	d018      	beq.n	800a24c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b30      	cmp	r3, #48	; 0x30
 800a220:	d014      	beq.n	800a24c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b40      	cmp	r3, #64	; 0x40
 800a228:	d010      	beq.n	800a24c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b50      	cmp	r3, #80	; 0x50
 800a230:	d00c      	beq.n	800a24c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b60      	cmp	r3, #96	; 0x60
 800a238:	d008      	beq.n	800a24c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b70      	cmp	r3, #112	; 0x70
 800a240:	d004      	beq.n	800a24c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a242:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a246:	483a      	ldr	r0, [pc, #232]	; (800a330 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a248:	f7f7 fe5d 	bl	8001f06 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	2b80      	cmp	r3, #128	; 0x80
 800a252:	d008      	beq.n	800a266 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d004      	beq.n	800a266 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a25c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800a260:	4833      	ldr	r0, [pc, #204]	; (800a330 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a262:	f7f7 fe50 	bl	8001f06 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d101      	bne.n	800a274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a270:	2302      	movs	r3, #2
 800a272:	e050      	b.n	800a316 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a29a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a1b      	ldr	r2, [pc, #108]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d018      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c0:	d013      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a17      	ldr	r2, [pc, #92]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d00e      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a15      	ldr	r2, [pc, #84]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d009      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a14      	ldr	r2, [pc, #80]	; (800a32c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d004      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a13      	ldr	r2, [pc, #76]	; (800a334 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d10c      	bne.n	800a304 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	40010000 	.word	0x40010000
 800a324:	40000400 	.word	0x40000400
 800a328:	40000800 	.word	0x40000800
 800a32c:	40000c00 	.word	0x40000c00
 800a330:	0801285c 	.word	0x0801285c
 800a334:	40014000 	.word	0x40014000

0800a338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a360:	b084      	sub	sp, #16
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	f107 001c 	add.w	r0, r7, #28
 800a36e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	2b01      	cmp	r3, #1
 800a376:	d122      	bne.n	800a3be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a38c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d105      	bne.n	800a3b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f001 fbee 	bl	800bb94 <USB_CoreReset>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]
 800a3bc:	e01a      	b.n	800a3f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f001 fbe2 	bl	800bb94 <USB_CoreReset>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	639a      	str	r2, [r3, #56]	; 0x38
 800a3e6:	e005      	b.n	800a3f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d10b      	bne.n	800a412 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f043 0206 	orr.w	r2, r3, #6
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	f043 0220 	orr.w	r2, r3, #32
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a412:	7bfb      	ldrb	r3, [r7, #15]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a41e:	b004      	add	sp, #16
 800a420:	4770      	bx	lr
	...

0800a424 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	4613      	mov	r3, r2
 800a430:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a432:	79fb      	ldrb	r3, [r7, #7]
 800a434:	2b02      	cmp	r3, #2
 800a436:	d165      	bne.n	800a504 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	4a41      	ldr	r2, [pc, #260]	; (800a540 <USB_SetTurnaroundTime+0x11c>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d906      	bls.n	800a44e <USB_SetTurnaroundTime+0x2a>
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4a40      	ldr	r2, [pc, #256]	; (800a544 <USB_SetTurnaroundTime+0x120>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d202      	bcs.n	800a44e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a448:	230f      	movs	r3, #15
 800a44a:	617b      	str	r3, [r7, #20]
 800a44c:	e062      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	4a3c      	ldr	r2, [pc, #240]	; (800a544 <USB_SetTurnaroundTime+0x120>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d306      	bcc.n	800a464 <USB_SetTurnaroundTime+0x40>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	4a3b      	ldr	r2, [pc, #236]	; (800a548 <USB_SetTurnaroundTime+0x124>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d202      	bcs.n	800a464 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a45e:	230e      	movs	r3, #14
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	e057      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	4a38      	ldr	r2, [pc, #224]	; (800a548 <USB_SetTurnaroundTime+0x124>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d306      	bcc.n	800a47a <USB_SetTurnaroundTime+0x56>
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	4a37      	ldr	r2, [pc, #220]	; (800a54c <USB_SetTurnaroundTime+0x128>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d202      	bcs.n	800a47a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a474:	230d      	movs	r3, #13
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	e04c      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	4a33      	ldr	r2, [pc, #204]	; (800a54c <USB_SetTurnaroundTime+0x128>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d306      	bcc.n	800a490 <USB_SetTurnaroundTime+0x6c>
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	4a32      	ldr	r2, [pc, #200]	; (800a550 <USB_SetTurnaroundTime+0x12c>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d802      	bhi.n	800a490 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a48a:	230c      	movs	r3, #12
 800a48c:	617b      	str	r3, [r7, #20]
 800a48e:	e041      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	4a2f      	ldr	r2, [pc, #188]	; (800a550 <USB_SetTurnaroundTime+0x12c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d906      	bls.n	800a4a6 <USB_SetTurnaroundTime+0x82>
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	4a2e      	ldr	r2, [pc, #184]	; (800a554 <USB_SetTurnaroundTime+0x130>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d802      	bhi.n	800a4a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a4a0:	230b      	movs	r3, #11
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	e036      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	4a2a      	ldr	r2, [pc, #168]	; (800a554 <USB_SetTurnaroundTime+0x130>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d906      	bls.n	800a4bc <USB_SetTurnaroundTime+0x98>
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	4a29      	ldr	r2, [pc, #164]	; (800a558 <USB_SetTurnaroundTime+0x134>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d802      	bhi.n	800a4bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a4b6:	230a      	movs	r3, #10
 800a4b8:	617b      	str	r3, [r7, #20]
 800a4ba:	e02b      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	4a26      	ldr	r2, [pc, #152]	; (800a558 <USB_SetTurnaroundTime+0x134>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d906      	bls.n	800a4d2 <USB_SetTurnaroundTime+0xae>
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4a25      	ldr	r2, [pc, #148]	; (800a55c <USB_SetTurnaroundTime+0x138>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d202      	bcs.n	800a4d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a4cc:	2309      	movs	r3, #9
 800a4ce:	617b      	str	r3, [r7, #20]
 800a4d0:	e020      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	4a21      	ldr	r2, [pc, #132]	; (800a55c <USB_SetTurnaroundTime+0x138>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d306      	bcc.n	800a4e8 <USB_SetTurnaroundTime+0xc4>
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	4a20      	ldr	r2, [pc, #128]	; (800a560 <USB_SetTurnaroundTime+0x13c>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d802      	bhi.n	800a4e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a4e2:	2308      	movs	r3, #8
 800a4e4:	617b      	str	r3, [r7, #20]
 800a4e6:	e015      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	4a1d      	ldr	r2, [pc, #116]	; (800a560 <USB_SetTurnaroundTime+0x13c>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d906      	bls.n	800a4fe <USB_SetTurnaroundTime+0xda>
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	4a1c      	ldr	r2, [pc, #112]	; (800a564 <USB_SetTurnaroundTime+0x140>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d202      	bcs.n	800a4fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a4f8:	2307      	movs	r3, #7
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e00a      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a4fe:	2306      	movs	r3, #6
 800a500:	617b      	str	r3, [r7, #20]
 800a502:	e007      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a504:	79fb      	ldrb	r3, [r7, #7]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d102      	bne.n	800a510 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a50a:	2309      	movs	r3, #9
 800a50c:	617b      	str	r3, [r7, #20]
 800a50e:	e001      	b.n	800a514 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a510:	2309      	movs	r3, #9
 800a512:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	68da      	ldr	r2, [r3, #12]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	029b      	lsls	r3, r3, #10
 800a528:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a52c:	431a      	orrs	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	371c      	adds	r7, #28
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	00d8acbf 	.word	0x00d8acbf
 800a544:	00e4e1c0 	.word	0x00e4e1c0
 800a548:	00f42400 	.word	0x00f42400
 800a54c:	01067380 	.word	0x01067380
 800a550:	011a499f 	.word	0x011a499f
 800a554:	01312cff 	.word	0x01312cff
 800a558:	014ca43f 	.word	0x014ca43f
 800a55c:	016e3600 	.word	0x016e3600
 800a560:	01a6ab1f 	.word	0x01a6ab1f
 800a564:	01e84800 	.word	0x01e84800

0800a568 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	f043 0201 	orr.w	r2, r3, #1
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	370c      	adds	r7, #12
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f023 0201 	bic.w	r2, r3, #1
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d115      	bne.n	800a5fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5da:	2001      	movs	r0, #1
 800a5dc:	f7f8 fe02 	bl	80031e4 <HAL_Delay>
      ms++;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f001 fa45 	bl	800ba76 <USB_GetMode>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d01e      	beq.n	800a630 <USB_SetCurrentMode+0x84>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2b31      	cmp	r3, #49	; 0x31
 800a5f6:	d9f0      	bls.n	800a5da <USB_SetCurrentMode+0x2e>
 800a5f8:	e01a      	b.n	800a630 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d115      	bne.n	800a62c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a60c:	2001      	movs	r0, #1
 800a60e:	f7f8 fde9 	bl	80031e4 <HAL_Delay>
      ms++;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3301      	adds	r3, #1
 800a616:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 fa2c 	bl	800ba76 <USB_GetMode>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <USB_SetCurrentMode+0x84>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2b31      	cmp	r3, #49	; 0x31
 800a628:	d9f0      	bls.n	800a60c <USB_SetCurrentMode+0x60>
 800a62a:	e001      	b.n	800a630 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e005      	b.n	800a63c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b32      	cmp	r3, #50	; 0x32
 800a634:	d101      	bne.n	800a63a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e000      	b.n	800a63c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a644:	b084      	sub	sp, #16
 800a646:	b580      	push	{r7, lr}
 800a648:	b086      	sub	sp, #24
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a65e:	2300      	movs	r3, #0
 800a660:	613b      	str	r3, [r7, #16]
 800a662:	e009      	b.n	800a678 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	3340      	adds	r3, #64	; 0x40
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	2200      	movs	r2, #0
 800a670:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	3301      	adds	r3, #1
 800a676:	613b      	str	r3, [r7, #16]
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	2b0e      	cmp	r3, #14
 800a67c:	d9f2      	bls.n	800a664 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a680:	2b00      	cmp	r3, #0
 800a682:	d11c      	bne.n	800a6be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a692:	f043 0302 	orr.w	r3, r3, #2
 800a696:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	639a      	str	r2, [r3, #56]	; 0x38
 800a6bc:	e00b      	b.n	800a6d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6dc:	461a      	mov	r2, r3
 800a6de:	2300      	movs	r3, #0
 800a6e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	680b      	ldr	r3, [r1, #0]
 800a6f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d10c      	bne.n	800a716 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d104      	bne.n	800a70c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a702:	2100      	movs	r1, #0
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f965 	bl	800a9d4 <USB_SetDevSpeed>
 800a70a:	e008      	b.n	800a71e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a70c:	2101      	movs	r1, #1
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f960 	bl	800a9d4 <USB_SetDevSpeed>
 800a714:	e003      	b.n	800a71e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a716:	2103      	movs	r1, #3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f95b 	bl	800a9d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a71e:	2110      	movs	r1, #16
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f8f3 	bl	800a90c <USB_FlushTxFifo>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f91f 	bl	800a974 <USB_FlushRxFifo>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d001      	beq.n	800a740 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a746:	461a      	mov	r2, r3
 800a748:	2300      	movs	r3, #0
 800a74a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a752:	461a      	mov	r2, r3
 800a754:	2300      	movs	r3, #0
 800a756:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a75e:	461a      	mov	r2, r3
 800a760:	2300      	movs	r3, #0
 800a762:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a764:	2300      	movs	r3, #0
 800a766:	613b      	str	r3, [r7, #16]
 800a768:	e043      	b.n	800a7f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4413      	add	r3, r2
 800a772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a77c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a780:	d118      	bne.n	800a7b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10a      	bne.n	800a79e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	015a      	lsls	r2, r3, #5
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4413      	add	r3, r2
 800a790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a794:	461a      	mov	r2, r3
 800a796:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	e013      	b.n	800a7c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	e008      	b.n	800a7c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	015a      	lsls	r2, r3, #5
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	015a      	lsls	r2, r3, #5
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	015a      	lsls	r2, r3, #5
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4413      	add	r3, r2
 800a7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	613b      	str	r3, [r7, #16]
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d3b7      	bcc.n	800a76a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	613b      	str	r3, [r7, #16]
 800a7fe:	e043      	b.n	800a888 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a816:	d118      	bne.n	800a84a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10a      	bne.n	800a834 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	015a      	lsls	r2, r3, #5
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	4413      	add	r3, r2
 800a826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82a:	461a      	mov	r2, r3
 800a82c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a830:	6013      	str	r3, [r2, #0]
 800a832:	e013      	b.n	800a85c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	015a      	lsls	r2, r3, #5
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	4413      	add	r3, r2
 800a83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a840:	461a      	mov	r2, r3
 800a842:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	e008      	b.n	800a85c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	015a      	lsls	r2, r3, #5
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	4413      	add	r3, r2
 800a852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a856:	461a      	mov	r2, r3
 800a858:	2300      	movs	r3, #0
 800a85a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4413      	add	r3, r2
 800a864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a868:	461a      	mov	r2, r3
 800a86a:	2300      	movs	r3, #0
 800a86c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	015a      	lsls	r2, r3, #5
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	4413      	add	r3, r2
 800a876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a87a:	461a      	mov	r2, r3
 800a87c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a880:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	3301      	adds	r3, #1
 800a886:	613b      	str	r3, [r7, #16]
 800a888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d3b7      	bcc.n	800a800 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a89e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a8b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d105      	bne.n	800a8c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	f043 0210 	orr.w	r2, r3, #16
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	699a      	ldr	r2, [r3, #24]
 800a8c8:	4b0f      	ldr	r3, [pc, #60]	; (800a908 <USB_DevInit+0x2c4>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d005      	beq.n	800a8e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	f043 0208 	orr.w	r2, r3, #8
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d107      	bne.n	800a8f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8f0:	f043 0304 	orr.w	r3, r3, #4
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3718      	adds	r7, #24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a904:	b004      	add	sp, #16
 800a906:	4770      	bx	lr
 800a908:	803c3800 	.word	0x803c3800

0800a90c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a916:	2300      	movs	r3, #0
 800a918:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3301      	adds	r3, #1
 800a91e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4a13      	ldr	r2, [pc, #76]	; (800a970 <USB_FlushTxFifo+0x64>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d901      	bls.n	800a92c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e01b      	b.n	800a964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	2b00      	cmp	r3, #0
 800a932:	daf2      	bge.n	800a91a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	019b      	lsls	r3, r3, #6
 800a93c:	f043 0220 	orr.w	r2, r3, #32
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3301      	adds	r3, #1
 800a948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4a08      	ldr	r2, [pc, #32]	; (800a970 <USB_FlushTxFifo+0x64>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d901      	bls.n	800a956 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e006      	b.n	800a964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b20      	cmp	r3, #32
 800a960:	d0f0      	beq.n	800a944 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	00030d40 	.word	0x00030d40

0800a974 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a97c:	2300      	movs	r3, #0
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3301      	adds	r3, #1
 800a984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4a11      	ldr	r2, [pc, #68]	; (800a9d0 <USB_FlushRxFifo+0x5c>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d901      	bls.n	800a992 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e018      	b.n	800a9c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	2b00      	cmp	r3, #0
 800a998:	daf2      	bge.n	800a980 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2210      	movs	r2, #16
 800a9a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4a08      	ldr	r2, [pc, #32]	; (800a9d0 <USB_FlushRxFifo+0x5c>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d901      	bls.n	800a9b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e006      	b.n	800a9c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f003 0310 	and.w	r3, r3, #16
 800a9be:	2b10      	cmp	r3, #16
 800a9c0:	d0f0      	beq.n	800a9a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	00030d40 	.word	0x00030d40

0800a9d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	68f9      	ldr	r1, [r7, #12]
 800a9f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b087      	sub	sp, #28
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	f003 0306 	and.w	r3, r3, #6
 800aa1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d102      	bne.n	800aa2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800aa26:	2300      	movs	r3, #0
 800aa28:	75fb      	strb	r3, [r7, #23]
 800aa2a:	e00a      	b.n	800aa42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d002      	beq.n	800aa38 <USB_GetDevSpeed+0x32>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2b06      	cmp	r3, #6
 800aa36:	d102      	bne.n	800aa3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aa38:	2302      	movs	r3, #2
 800aa3a:	75fb      	strb	r3, [r7, #23]
 800aa3c:	e001      	b.n	800aa42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800aa3e:	230f      	movs	r3, #15
 800aa40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	371c      	adds	r7, #28
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	785b      	ldrb	r3, [r3, #1]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d13a      	bne.n	800aae2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa72:	69da      	ldr	r2, [r3, #28]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	f003 030f 	and.w	r3, r3, #15
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	68f9      	ldr	r1, [r7, #12]
 800aa86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d155      	bne.n	800ab50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	791b      	ldrb	r3, [r3, #4]
 800aabe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aac0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	059b      	lsls	r3, r3, #22
 800aac6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aac8:	4313      	orrs	r3, r2
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	0151      	lsls	r1, r2, #5
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	440a      	add	r2, r1
 800aad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aade:	6013      	str	r3, [r2, #0]
 800aae0:	e036      	b.n	800ab50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae8:	69da      	ldr	r2, [r3, #28]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	f003 030f 	and.w	r3, r3, #15
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	fa01 f303 	lsl.w	r3, r1, r3
 800aaf8:	041b      	lsls	r3, r3, #16
 800aafa:	68f9      	ldr	r1, [r7, #12]
 800aafc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab00:	4313      	orrs	r3, r2
 800ab02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	015a      	lsls	r2, r3, #5
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d11a      	bne.n	800ab50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	791b      	ldrb	r3, [r3, #4]
 800ab34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ab36:	430b      	orrs	r3, r1
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	0151      	lsls	r1, r2, #5
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	440a      	add	r2, r1
 800ab42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
	...

0800ab60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	785b      	ldrb	r3, [r3, #1]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d161      	bne.n	800ac40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab92:	d11f      	bne.n	800abd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	015a      	lsls	r2, r3, #5
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	0151      	lsls	r1, r2, #5
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	440a      	add	r2, r1
 800abaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abb2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	0151      	lsls	r1, r2, #5
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	440a      	add	r2, r1
 800abca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	f003 030f 	and.w	r3, r3, #15
 800abe4:	2101      	movs	r1, #1
 800abe6:	fa01 f303 	lsl.w	r3, r1, r3
 800abea:	b29b      	uxth	r3, r3
 800abec:	43db      	mvns	r3, r3
 800abee:	68f9      	ldr	r1, [r7, #12]
 800abf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abf4:	4013      	ands	r3, r2
 800abf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfe:	69da      	ldr	r2, [r3, #28]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	f003 030f 	and.w	r3, r3, #15
 800ac08:	2101      	movs	r1, #1
 800ac0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	43db      	mvns	r3, r3
 800ac12:	68f9      	ldr	r1, [r7, #12]
 800ac14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac18:	4013      	ands	r3, r2
 800ac1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	0159      	lsls	r1, r3, #5
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	440b      	add	r3, r1
 800ac32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac36:	4619      	mov	r1, r3
 800ac38:	4b35      	ldr	r3, [pc, #212]	; (800ad10 <USB_DeactivateEndpoint+0x1b0>)
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	600b      	str	r3, [r1, #0]
 800ac3e:	e060      	b.n	800ad02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac56:	d11f      	bne.n	800ac98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	0151      	lsls	r1, r2, #5
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	440a      	add	r2, r1
 800ac6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	015a      	lsls	r2, r3, #5
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	0151      	lsls	r1, r2, #5
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	440a      	add	r2, r1
 800ac8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 030f 	and.w	r3, r3, #15
 800aca8:	2101      	movs	r1, #1
 800acaa:	fa01 f303 	lsl.w	r3, r1, r3
 800acae:	041b      	lsls	r3, r3, #16
 800acb0:	43db      	mvns	r3, r3
 800acb2:	68f9      	ldr	r1, [r7, #12]
 800acb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acb8:	4013      	ands	r3, r2
 800acba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc2:	69da      	ldr	r2, [r3, #28]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	f003 030f 	and.w	r3, r3, #15
 800accc:	2101      	movs	r1, #1
 800acce:	fa01 f303 	lsl.w	r3, r1, r3
 800acd2:	041b      	lsls	r3, r3, #16
 800acd4:	43db      	mvns	r3, r3
 800acd6:	68f9      	ldr	r1, [r7, #12]
 800acd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acdc:	4013      	ands	r3, r2
 800acde:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	015a      	lsls	r2, r3, #5
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	0159      	lsls	r1, r3, #5
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	440b      	add	r3, r1
 800acf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfa:	4619      	mov	r1, r3
 800acfc:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <USB_DeactivateEndpoint+0x1b4>)
 800acfe:	4013      	ands	r3, r2
 800ad00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	ec337800 	.word	0xec337800
 800ad14:	eff37800 	.word	0xeff37800

0800ad18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08a      	sub	sp, #40	; 0x28
 800ad1c:	af02      	add	r7, sp, #8
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	4613      	mov	r3, r2
 800ad24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	785b      	ldrb	r3, [r3, #1]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	f040 815c 	bne.w	800aff2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d132      	bne.n	800ada8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	69ba      	ldr	r2, [r7, #24]
 800ad52:	0151      	lsls	r1, r2, #5
 800ad54:	69fa      	ldr	r2, [r7, #28]
 800ad56:	440a      	add	r2, r1
 800ad58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	015a      	lsls	r2, r3, #5
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	0151      	lsls	r1, r2, #5
 800ad78:	69fa      	ldr	r2, [r7, #28]
 800ad7a:	440a      	add	r2, r1
 800ad7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	015a      	lsls	r2, r3, #5
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	69ba      	ldr	r2, [r7, #24]
 800ad96:	0151      	lsls	r1, r2, #5
 800ad98:	69fa      	ldr	r2, [r7, #28]
 800ad9a:	440a      	add	r2, r1
 800ad9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ada0:	0cdb      	lsrs	r3, r3, #19
 800ada2:	04db      	lsls	r3, r3, #19
 800ada4:	6113      	str	r3, [r2, #16]
 800ada6:	e074      	b.n	800ae92 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	69ba      	ldr	r2, [r7, #24]
 800adb8:	0151      	lsls	r1, r2, #5
 800adba:	69fa      	ldr	r2, [r7, #28]
 800adbc:	440a      	add	r2, r1
 800adbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adc2:	0cdb      	lsrs	r3, r3, #19
 800adc4:	04db      	lsls	r3, r3, #19
 800adc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	69ba      	ldr	r2, [r7, #24]
 800add8:	0151      	lsls	r1, r2, #5
 800adda:	69fa      	ldr	r2, [r7, #28]
 800addc:	440a      	add	r2, r1
 800adde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ade6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800adea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	6999      	ldr	r1, [r3, #24]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	440b      	add	r3, r1
 800ae04:	1e59      	subs	r1, r3, #1
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae0e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ae10:	4b9d      	ldr	r3, [pc, #628]	; (800b088 <USB_EPStartXfer+0x370>)
 800ae12:	400b      	ands	r3, r1
 800ae14:	69b9      	ldr	r1, [r7, #24]
 800ae16:	0148      	lsls	r0, r1, #5
 800ae18:	69f9      	ldr	r1, [r7, #28]
 800ae1a:	4401      	add	r1, r0
 800ae1c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae20:	4313      	orrs	r3, r2
 800ae22:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	015a      	lsls	r2, r3, #5
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae30:	691a      	ldr	r2, [r3, #16]
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae3a:	69b9      	ldr	r1, [r7, #24]
 800ae3c:	0148      	lsls	r0, r1, #5
 800ae3e:	69f9      	ldr	r1, [r7, #28]
 800ae40:	4401      	add	r1, r0
 800ae42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae46:	4313      	orrs	r3, r2
 800ae48:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	791b      	ldrb	r3, [r3, #4]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d11f      	bne.n	800ae92 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	015a      	lsls	r2, r3, #5
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	4413      	add	r3, r2
 800ae5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	69ba      	ldr	r2, [r7, #24]
 800ae62:	0151      	lsls	r1, r2, #5
 800ae64:	69fa      	ldr	r2, [r7, #28]
 800ae66:	440a      	add	r2, r1
 800ae68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae6c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ae70:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	015a      	lsls	r2, r3, #5
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	4413      	add	r3, r2
 800ae7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	69ba      	ldr	r2, [r7, #24]
 800ae82:	0151      	lsls	r1, r2, #5
 800ae84:	69fa      	ldr	r2, [r7, #28]
 800ae86:	440a      	add	r2, r1
 800ae88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae90:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ae92:	79fb      	ldrb	r3, [r7, #7]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d14b      	bne.n	800af30 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d009      	beq.n	800aeb4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeac:	461a      	mov	r2, r3
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	791b      	ldrb	r3, [r3, #4]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d128      	bne.n	800af0e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d110      	bne.n	800aeee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	0151      	lsls	r1, r2, #5
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	440a      	add	r2, r1
 800aee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aee6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	e00f      	b.n	800af0e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	015a      	lsls	r2, r3, #5
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	4413      	add	r3, r2
 800aef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	69ba      	ldr	r2, [r7, #24]
 800aefe:	0151      	lsls	r1, r2, #5
 800af00:	69fa      	ldr	r2, [r7, #28]
 800af02:	440a      	add	r2, r1
 800af04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	015a      	lsls	r2, r3, #5
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	4413      	add	r3, r2
 800af16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	69ba      	ldr	r2, [r7, #24]
 800af1e:	0151      	lsls	r1, r2, #5
 800af20:	69fa      	ldr	r2, [r7, #28]
 800af22:	440a      	add	r2, r1
 800af24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	e133      	b.n	800b198 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	69ba      	ldr	r2, [r7, #24]
 800af40:	0151      	lsls	r1, r2, #5
 800af42:	69fa      	ldr	r2, [r7, #28]
 800af44:	440a      	add	r2, r1
 800af46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	791b      	ldrb	r3, [r3, #4]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d015      	beq.n	800af84 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 811b 	beq.w	800b198 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	f003 030f 	and.w	r3, r3, #15
 800af72:	2101      	movs	r1, #1
 800af74:	fa01 f303 	lsl.w	r3, r1, r3
 800af78:	69f9      	ldr	r1, [r7, #28]
 800af7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af7e:	4313      	orrs	r3, r2
 800af80:	634b      	str	r3, [r1, #52]	; 0x34
 800af82:	e109      	b.n	800b198 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af90:	2b00      	cmp	r3, #0
 800af92:	d110      	bne.n	800afb6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	69ba      	ldr	r2, [r7, #24]
 800afa4:	0151      	lsls	r1, r2, #5
 800afa6:	69fa      	ldr	r2, [r7, #28]
 800afa8:	440a      	add	r2, r1
 800afaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800afb2:	6013      	str	r3, [r2, #0]
 800afb4:	e00f      	b.n	800afd6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	015a      	lsls	r2, r3, #5
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	4413      	add	r3, r2
 800afbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	0151      	lsls	r1, r2, #5
 800afc8:	69fa      	ldr	r2, [r7, #28]
 800afca:	440a      	add	r2, r1
 800afcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afd4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	6919      	ldr	r1, [r3, #16]
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	781a      	ldrb	r2, [r3, #0]
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	b298      	uxth	r0, r3
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	4603      	mov	r3, r0
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f000 fade 	bl	800b5ac <USB_WritePacket>
 800aff0:	e0d2      	b.n	800b198 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	015a      	lsls	r2, r3, #5
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	4413      	add	r3, r2
 800affa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	69ba      	ldr	r2, [r7, #24]
 800b002:	0151      	lsls	r1, r2, #5
 800b004:	69fa      	ldr	r2, [r7, #28]
 800b006:	440a      	add	r2, r1
 800b008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b00c:	0cdb      	lsrs	r3, r3, #19
 800b00e:	04db      	lsls	r3, r3, #19
 800b010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	69ba      	ldr	r2, [r7, #24]
 800b022:	0151      	lsls	r1, r2, #5
 800b024:	69fa      	ldr	r2, [r7, #28]
 800b026:	440a      	add	r2, r1
 800b028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b02c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b034:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d126      	bne.n	800b08c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	4413      	add	r3, r2
 800b046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04a:	691a      	ldr	r2, [r3, #16]
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b054:	69b9      	ldr	r1, [r7, #24]
 800b056:	0148      	lsls	r0, r1, #5
 800b058:	69f9      	ldr	r1, [r7, #28]
 800b05a:	4401      	add	r1, r0
 800b05c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b060:	4313      	orrs	r3, r2
 800b062:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	0151      	lsls	r1, r2, #5
 800b076:	69fa      	ldr	r2, [r7, #28]
 800b078:	440a      	add	r2, r1
 800b07a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b07e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b082:	6113      	str	r3, [r2, #16]
 800b084:	e03a      	b.n	800b0fc <USB_EPStartXfer+0x3e4>
 800b086:	bf00      	nop
 800b088:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	699a      	ldr	r2, [r3, #24]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	4413      	add	r3, r2
 800b096:	1e5a      	subs	r2, r3, #1
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	8afa      	ldrh	r2, [r7, #22]
 800b0a8:	fb03 f202 	mul.w	r2, r3, r2
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	015a      	lsls	r2, r3, #5
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0bc:	691a      	ldr	r2, [r3, #16]
 800b0be:	8afb      	ldrh	r3, [r7, #22]
 800b0c0:	04d9      	lsls	r1, r3, #19
 800b0c2:	4b38      	ldr	r3, [pc, #224]	; (800b1a4 <USB_EPStartXfer+0x48c>)
 800b0c4:	400b      	ands	r3, r1
 800b0c6:	69b9      	ldr	r1, [r7, #24]
 800b0c8:	0148      	lsls	r0, r1, #5
 800b0ca:	69f9      	ldr	r1, [r7, #28]
 800b0cc:	4401      	add	r1, r0
 800b0ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e2:	691a      	ldr	r2, [r3, #16]
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	69db      	ldr	r3, [r3, #28]
 800b0e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0ec:	69b9      	ldr	r1, [r7, #24]
 800b0ee:	0148      	lsls	r0, r1, #5
 800b0f0:	69f9      	ldr	r1, [r7, #28]
 800b0f2:	4401      	add	r1, r0
 800b0f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b0fc:	79fb      	ldrb	r3, [r7, #7]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d10d      	bne.n	800b11e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d009      	beq.n	800b11e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	6919      	ldr	r1, [r3, #16]
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	015a      	lsls	r2, r3, #5
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	4413      	add	r3, r2
 800b116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b11a:	460a      	mov	r2, r1
 800b11c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	791b      	ldrb	r3, [r3, #4]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d128      	bne.n	800b178 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b132:	2b00      	cmp	r3, #0
 800b134:	d110      	bne.n	800b158 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	015a      	lsls	r2, r3, #5
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	4413      	add	r3, r2
 800b13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	69ba      	ldr	r2, [r7, #24]
 800b146:	0151      	lsls	r1, r2, #5
 800b148:	69fa      	ldr	r2, [r7, #28]
 800b14a:	440a      	add	r2, r1
 800b14c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b150:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	e00f      	b.n	800b178 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	0151      	lsls	r1, r2, #5
 800b16a:	69fa      	ldr	r2, [r7, #28]
 800b16c:	440a      	add	r2, r1
 800b16e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b176:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	015a      	lsls	r2, r3, #5
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	4413      	add	r3, r2
 800b180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	0151      	lsls	r1, r2, #5
 800b18a:	69fa      	ldr	r2, [r7, #28]
 800b18c:	440a      	add	r2, r1
 800b18e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b192:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b196:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3720      	adds	r7, #32
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	1ff80000 	.word	0x1ff80000

0800b1a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	785b      	ldrb	r3, [r3, #1]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	f040 80ce 	bne.w	800b366 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d132      	bne.n	800b238 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	015a      	lsls	r2, r3, #5
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	4413      	add	r3, r2
 800b1da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	0151      	lsls	r1, r2, #5
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	440a      	add	r2, r1
 800b1e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	015a      	lsls	r2, r3, #5
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	693a      	ldr	r2, [r7, #16]
 800b206:	0151      	lsls	r1, r2, #5
 800b208:	697a      	ldr	r2, [r7, #20]
 800b20a:	440a      	add	r2, r1
 800b20c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	015a      	lsls	r2, r3, #5
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	4413      	add	r3, r2
 800b21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	0151      	lsls	r1, r2, #5
 800b228:	697a      	ldr	r2, [r7, #20]
 800b22a:	440a      	add	r2, r1
 800b22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b230:	0cdb      	lsrs	r3, r3, #19
 800b232:	04db      	lsls	r3, r3, #19
 800b234:	6113      	str	r3, [r2, #16]
 800b236:	e04e      	b.n	800b2d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	0151      	lsls	r1, r2, #5
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	440a      	add	r2, r1
 800b24e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b252:	0cdb      	lsrs	r3, r3, #19
 800b254:	04db      	lsls	r3, r3, #19
 800b256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	0151      	lsls	r1, r2, #5
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	440a      	add	r2, r1
 800b26e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b272:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b276:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b27a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	699a      	ldr	r2, [r3, #24]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	429a      	cmp	r2, r3
 800b286:	d903      	bls.n	800b290 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	015a      	lsls	r2, r3, #5
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	4413      	add	r3, r2
 800b298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	0151      	lsls	r1, r2, #5
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	440a      	add	r2, r1
 800b2a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2bc:	691a      	ldr	r2, [r3, #16]
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2c6:	6939      	ldr	r1, [r7, #16]
 800b2c8:	0148      	lsls	r0, r1, #5
 800b2ca:	6979      	ldr	r1, [r7, #20]
 800b2cc:	4401      	add	r1, r0
 800b2ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b2d6:	79fb      	ldrb	r3, [r7, #7]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d11e      	bne.n	800b31a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d009      	beq.n	800b2f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	015a      	lsls	r2, r3, #5
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	015a      	lsls	r2, r3, #5
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	4413      	add	r3, r2
 800b300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	0151      	lsls	r1, r2, #5
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	440a      	add	r2, r1
 800b30e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b312:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	e097      	b.n	800b44a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	015a      	lsls	r2, r3, #5
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	4413      	add	r3, r2
 800b322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	0151      	lsls	r1, r2, #5
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	440a      	add	r2, r1
 800b330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b338:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f000 8083 	beq.w	800b44a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b34a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	f003 030f 	and.w	r3, r3, #15
 800b354:	2101      	movs	r1, #1
 800b356:	fa01 f303 	lsl.w	r3, r1, r3
 800b35a:	6979      	ldr	r1, [r7, #20]
 800b35c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b360:	4313      	orrs	r3, r2
 800b362:	634b      	str	r3, [r1, #52]	; 0x34
 800b364:	e071      	b.n	800b44a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	0151      	lsls	r1, r2, #5
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	440a      	add	r2, r1
 800b37c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b380:	0cdb      	lsrs	r3, r3, #19
 800b382:	04db      	lsls	r3, r3, #19
 800b384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	015a      	lsls	r2, r3, #5
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	4413      	add	r3, r2
 800b38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	0151      	lsls	r1, r2, #5
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	440a      	add	r2, r1
 800b39c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	68da      	ldr	r2, [r3, #12]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	68da      	ldr	r2, [r3, #12]
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	0151      	lsls	r1, r2, #5
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	440a      	add	r2, r1
 800b3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	015a      	lsls	r2, r3, #5
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ee:	691a      	ldr	r2, [r3, #16]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3f8:	6939      	ldr	r1, [r7, #16]
 800b3fa:	0148      	lsls	r0, r1, #5
 800b3fc:	6979      	ldr	r1, [r7, #20]
 800b3fe:	4401      	add	r1, r0
 800b400:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b404:	4313      	orrs	r3, r2
 800b406:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d10d      	bne.n	800b42a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d009      	beq.n	800b42a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	6919      	ldr	r1, [r3, #16]
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	015a      	lsls	r2, r3, #5
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	4413      	add	r3, r2
 800b422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b426:	460a      	mov	r2, r1
 800b428:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	0151      	lsls	r1, r2, #5
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	440a      	add	r2, r1
 800b440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b444:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b448:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	371c      	adds	r7, #28
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	785b      	ldrb	r3, [r3, #1]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d14a      	bne.n	800b50c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	015a      	lsls	r2, r3, #5
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	4413      	add	r3, r2
 800b480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b48a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b48e:	f040 8086 	bne.w	800b59e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	015a      	lsls	r2, r3, #5
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	4413      	add	r3, r2
 800b49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	7812      	ldrb	r2, [r2, #0]
 800b4a6:	0151      	lsls	r1, r2, #5
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	440a      	add	r2, r1
 800b4ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	7812      	ldrb	r2, [r2, #0]
 800b4ca:	0151      	lsls	r1, r2, #5
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	440a      	add	r2, r1
 800b4d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d902      	bls.n	800b4f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	75fb      	strb	r3, [r7, #23]
          break;
 800b4ee:	e056      	b.n	800b59e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	015a      	lsls	r2, r3, #5
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b508:	d0e7      	beq.n	800b4da <USB_EPStopXfer+0x82>
 800b50a:	e048      	b.n	800b59e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	4413      	add	r3, r2
 800b516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b524:	d13b      	bne.n	800b59e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	7812      	ldrb	r2, [r2, #0]
 800b53a:	0151      	lsls	r1, r2, #5
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	440a      	add	r2, r1
 800b540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b544:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b548:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	015a      	lsls	r2, r3, #5
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	4413      	add	r3, r2
 800b554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	7812      	ldrb	r2, [r2, #0]
 800b55e:	0151      	lsls	r1, r2, #5
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	440a      	add	r2, r1
 800b564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b568:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b56c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	3301      	adds	r3, #1
 800b572:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f242 7210 	movw	r2, #10000	; 0x2710
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d902      	bls.n	800b584 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	75fb      	strb	r3, [r7, #23]
          break;
 800b582:	e00c      	b.n	800b59e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	015a      	lsls	r2, r3, #5
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	4413      	add	r3, r2
 800b58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b59c:	d0e7      	beq.n	800b56e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	371c      	adds	r7, #28
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b089      	sub	sp, #36	; 0x24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	71fb      	strb	r3, [r7, #7]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b5ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d123      	bne.n	800b61a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b5d2:	88bb      	ldrh	r3, [r7, #4]
 800b5d4:	3303      	adds	r3, #3
 800b5d6:	089b      	lsrs	r3, r3, #2
 800b5d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b5da:	2300      	movs	r3, #0
 800b5dc:	61bb      	str	r3, [r7, #24]
 800b5de:	e018      	b.n	800b612 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b5e0:	79fb      	ldrb	r3, [r7, #7]
 800b5e2:	031a      	lsls	r2, r3, #12
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	3301      	adds	r3, #1
 800b604:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	3301      	adds	r3, #1
 800b60a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	3301      	adds	r3, #1
 800b610:	61bb      	str	r3, [r7, #24]
 800b612:	69ba      	ldr	r2, [r7, #24]
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	429a      	cmp	r2, r3
 800b618:	d3e2      	bcc.n	800b5e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3724      	adds	r7, #36	; 0x24
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b628:	b480      	push	{r7}
 800b62a:	b08b      	sub	sp, #44	; 0x2c
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	4613      	mov	r3, r2
 800b634:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b63e:	88fb      	ldrh	r3, [r7, #6]
 800b640:	089b      	lsrs	r3, r3, #2
 800b642:	b29b      	uxth	r3, r3
 800b644:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b646:	88fb      	ldrh	r3, [r7, #6]
 800b648:	f003 0303 	and.w	r3, r3, #3
 800b64c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b64e:	2300      	movs	r3, #0
 800b650:	623b      	str	r3, [r7, #32]
 800b652:	e014      	b.n	800b67e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	3301      	adds	r3, #1
 800b664:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	3301      	adds	r3, #1
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	3301      	adds	r3, #1
 800b670:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	3301      	adds	r3, #1
 800b676:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	3301      	adds	r3, #1
 800b67c:	623b      	str	r3, [r7, #32]
 800b67e:	6a3a      	ldr	r2, [r7, #32]
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	429a      	cmp	r2, r3
 800b684:	d3e6      	bcc.n	800b654 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b686:	8bfb      	ldrh	r3, [r7, #30]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d01e      	beq.n	800b6ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b696:	461a      	mov	r2, r3
 800b698:	f107 0310 	add.w	r3, r7, #16
 800b69c:	6812      	ldr	r2, [r2, #0]
 800b69e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	701a      	strb	r2, [r3, #0]
      i++;
 800b6b2:	6a3b      	ldr	r3, [r7, #32]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	623b      	str	r3, [r7, #32]
      pDest++;
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b6be:	8bfb      	ldrh	r3, [r7, #30]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b6c4:	8bfb      	ldrh	r3, [r7, #30]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1ea      	bne.n	800b6a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	372c      	adds	r7, #44	; 0x2c
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	785b      	ldrb	r3, [r3, #1]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d12c      	bne.n	800b74e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	015a      	lsls	r2, r3, #5
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	db12      	blt.n	800b72c <USB_EPSetStall+0x54>
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00f      	beq.n	800b72c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	0151      	lsls	r1, r2, #5
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	440a      	add	r2, r1
 800b722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b726:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b72a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4413      	add	r3, r2
 800b734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	0151      	lsls	r1, r2, #5
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	440a      	add	r2, r1
 800b742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	e02b      	b.n	800b7a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	4413      	add	r3, r2
 800b756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	db12      	blt.n	800b786 <USB_EPSetStall+0xae>
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00f      	beq.n	800b786 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	015a      	lsls	r2, r3, #5
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	4413      	add	r3, r2
 800b76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	0151      	lsls	r1, r2, #5
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	440a      	add	r2, r1
 800b77c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b780:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b784:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	015a      	lsls	r2, r3, #5
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	0151      	lsls	r1, r2, #5
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	440a      	add	r2, r1
 800b79c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	785b      	ldrb	r3, [r3, #1]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d128      	bne.n	800b822 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	015a      	lsls	r2, r3, #5
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	0151      	lsls	r1, r2, #5
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	440a      	add	r2, r1
 800b7e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	791b      	ldrb	r3, [r3, #4]
 800b7f4:	2b03      	cmp	r3, #3
 800b7f6:	d003      	beq.n	800b800 <USB_EPClearStall+0x4c>
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	791b      	ldrb	r3, [r3, #4]
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d138      	bne.n	800b872 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	4413      	add	r3, r2
 800b808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	0151      	lsls	r1, r2, #5
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	440a      	add	r2, r1
 800b816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b81a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b81e:	6013      	str	r3, [r2, #0]
 800b820:	e027      	b.n	800b872 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	015a      	lsls	r2, r3, #5
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	4413      	add	r3, r2
 800b82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	0151      	lsls	r1, r2, #5
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	440a      	add	r2, r1
 800b838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b83c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b840:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	791b      	ldrb	r3, [r3, #4]
 800b846:	2b03      	cmp	r3, #3
 800b848:	d003      	beq.n	800b852 <USB_EPClearStall+0x9e>
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	791b      	ldrb	r3, [r3, #4]
 800b84e:	2b02      	cmp	r3, #2
 800b850:	d10f      	bne.n	800b872 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	015a      	lsls	r2, r3, #5
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	4413      	add	r3, r2
 800b85a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	0151      	lsls	r1, r2, #5
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	440a      	add	r2, r1
 800b868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b86c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b870:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b89e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b8a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	78fb      	ldrb	r3, [r7, #3]
 800b8ae:	011b      	lsls	r3, r3, #4
 800b8b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b8b4:	68f9      	ldr	r1, [r7, #12]
 800b8b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8e6:	f023 0303 	bic.w	r3, r3, #3
 800b8ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8fa:	f023 0302 	bic.w	r3, r3, #2
 800b8fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b90e:	b480      	push	{r7}
 800b910:	b085      	sub	sp, #20
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b928:	f023 0303 	bic.w	r3, r3, #3
 800b92c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b93c:	f043 0302 	orr.w	r3, r3, #2
 800b940:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	4013      	ands	r3, r2
 800b966:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b968:	68fb      	ldr	r3, [r7, #12]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b976:	b480      	push	{r7}
 800b978:	b085      	sub	sp, #20
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b992:	69db      	ldr	r3, [r3, #28]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	4013      	ands	r3, r2
 800b998:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	0c1b      	lsrs	r3, r3, #16
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	b085      	sub	sp, #20
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9c6:	69db      	ldr	r3, [r3, #28]
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	b29b      	uxth	r3, r3
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b085      	sub	sp, #20
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b9ee:	78fb      	ldrb	r3, [r7, #3]
 800b9f0:	015a      	lsls	r2, r3, #5
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba04:	695b      	ldr	r3, [r3, #20]
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	4013      	ands	r3, r2
 800ba0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3714      	adds	r7, #20
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b087      	sub	sp, #28
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	460b      	mov	r3, r1
 800ba24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ba3e:	78fb      	ldrb	r3, [r7, #3]
 800ba40:	f003 030f 	and.w	r3, r3, #15
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	fa22 f303 	lsr.w	r3, r2, r3
 800ba4a:	01db      	lsls	r3, r3, #7
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	015a      	lsls	r2, r3, #5
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	4013      	ands	r3, r2
 800ba66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba68:	68bb      	ldr	r3, [r7, #8]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	371c      	adds	r7, #28
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b083      	sub	sp, #12
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	f003 0301 	and.w	r3, r3, #1
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b085      	sub	sp, #20
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bab0:	f023 0307 	bic.w	r3, r3, #7
 800bab4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bac8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bad8:	b480      	push	{r7}
 800bada:	b087      	sub	sp, #28
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	460b      	mov	r3, r1
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	333c      	adds	r3, #60	; 0x3c
 800baee:	3304      	adds	r3, #4
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	4a26      	ldr	r2, [pc, #152]	; (800bb90 <USB_EP0_OutStart+0xb8>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d90a      	bls.n	800bb12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb0c:	d101      	bne.n	800bb12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	e037      	b.n	800bb82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb18:	461a      	mov	r2, r3
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb40:	f043 0318 	orr.w	r3, r3, #24
 800bb44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb54:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bb58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bb5a:	7afb      	ldrb	r3, [r7, #11]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d10f      	bne.n	800bb80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb66:	461a      	mov	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	697a      	ldr	r2, [r7, #20]
 800bb76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb7a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bb7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	371c      	adds	r7, #28
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	4f54300a 	.word	0x4f54300a

0800bb94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	3301      	adds	r3, #1
 800bba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4a13      	ldr	r2, [pc, #76]	; (800bbf8 <USB_CoreReset+0x64>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d901      	bls.n	800bbb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e01b      	b.n	800bbea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	daf2      	bge.n	800bba0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	f043 0201 	orr.w	r2, r3, #1
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4a09      	ldr	r2, [pc, #36]	; (800bbf8 <USB_CoreReset+0x64>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d901      	bls.n	800bbdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e006      	b.n	800bbea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d0f0      	beq.n	800bbca <USB_CoreReset+0x36>

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	00030d40 	.word	0x00030d40

0800bbfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	460b      	mov	r3, r1
 800bc06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc0c:	f005 feda 	bl	80119c4 <USBD_static_malloc>
 800bc10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d109      	bne.n	800bc2c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	32b0      	adds	r2, #176	; 0xb0
 800bc22:	2100      	movs	r1, #0
 800bc24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bc28:	2302      	movs	r3, #2
 800bc2a:	e0d4      	b.n	800bdd6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bc2c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bc30:	2100      	movs	r1, #0
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f005 ff52 	bl	8011adc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	32b0      	adds	r2, #176	; 0xb0
 800bc42:	68f9      	ldr	r1, [r7, #12]
 800bc44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	32b0      	adds	r2, #176	; 0xb0
 800bc52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	7c1b      	ldrb	r3, [r3, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d138      	bne.n	800bcd6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc64:	4b5e      	ldr	r3, [pc, #376]	; (800bde0 <USBD_CDC_Init+0x1e4>)
 800bc66:	7819      	ldrb	r1, [r3, #0]
 800bc68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f005 fd85 	bl	801177e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc74:	4b5a      	ldr	r3, [pc, #360]	; (800bde0 <USBD_CDC_Init+0x1e4>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	f003 020f 	and.w	r2, r3, #15
 800bc7c:	6879      	ldr	r1, [r7, #4]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4413      	add	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	440b      	add	r3, r1
 800bc88:	3324      	adds	r3, #36	; 0x24
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc8e:	4b55      	ldr	r3, [pc, #340]	; (800bde4 <USBD_CDC_Init+0x1e8>)
 800bc90:	7819      	ldrb	r1, [r3, #0]
 800bc92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc96:	2202      	movs	r2, #2
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f005 fd70 	bl	801177e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc9e:	4b51      	ldr	r3, [pc, #324]	; (800bde4 <USBD_CDC_Init+0x1e8>)
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	f003 020f 	and.w	r2, r3, #15
 800bca6:	6879      	ldr	r1, [r7, #4]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	4413      	add	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	440b      	add	r3, r1
 800bcb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bcba:	4b4b      	ldr	r3, [pc, #300]	; (800bde8 <USBD_CDC_Init+0x1ec>)
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	f003 020f 	and.w	r2, r3, #15
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	440b      	add	r3, r1
 800bcce:	3326      	adds	r3, #38	; 0x26
 800bcd0:	2210      	movs	r2, #16
 800bcd2:	801a      	strh	r2, [r3, #0]
 800bcd4:	e035      	b.n	800bd42 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bcd6:	4b42      	ldr	r3, [pc, #264]	; (800bde0 <USBD_CDC_Init+0x1e4>)
 800bcd8:	7819      	ldrb	r1, [r3, #0]
 800bcda:	2340      	movs	r3, #64	; 0x40
 800bcdc:	2202      	movs	r2, #2
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f005 fd4d 	bl	801177e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bce4:	4b3e      	ldr	r3, [pc, #248]	; (800bde0 <USBD_CDC_Init+0x1e4>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	f003 020f 	and.w	r2, r3, #15
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	4413      	add	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	440b      	add	r3, r1
 800bcf8:	3324      	adds	r3, #36	; 0x24
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bcfe:	4b39      	ldr	r3, [pc, #228]	; (800bde4 <USBD_CDC_Init+0x1e8>)
 800bd00:	7819      	ldrb	r1, [r3, #0]
 800bd02:	2340      	movs	r3, #64	; 0x40
 800bd04:	2202      	movs	r2, #2
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f005 fd39 	bl	801177e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd0c:	4b35      	ldr	r3, [pc, #212]	; (800bde4 <USBD_CDC_Init+0x1e8>)
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	f003 020f 	and.w	r2, r3, #15
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	4613      	mov	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	440b      	add	r3, r1
 800bd20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd24:	2201      	movs	r2, #1
 800bd26:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bd28:	4b2f      	ldr	r3, [pc, #188]	; (800bde8 <USBD_CDC_Init+0x1ec>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	f003 020f 	and.w	r2, r3, #15
 800bd30:	6879      	ldr	r1, [r7, #4]
 800bd32:	4613      	mov	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	440b      	add	r3, r1
 800bd3c:	3326      	adds	r3, #38	; 0x26
 800bd3e:	2210      	movs	r2, #16
 800bd40:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bd42:	4b29      	ldr	r3, [pc, #164]	; (800bde8 <USBD_CDC_Init+0x1ec>)
 800bd44:	7819      	ldrb	r1, [r3, #0]
 800bd46:	2308      	movs	r3, #8
 800bd48:	2203      	movs	r2, #3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f005 fd17 	bl	801177e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bd50:	4b25      	ldr	r3, [pc, #148]	; (800bde8 <USBD_CDC_Init+0x1ec>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	f003 020f 	and.w	r2, r3, #15
 800bd58:	6879      	ldr	r1, [r7, #4]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	440b      	add	r3, r1
 800bd64:	3324      	adds	r3, #36	; 0x24
 800bd66:	2201      	movs	r2, #1
 800bd68:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	33b0      	adds	r3, #176	; 0xb0
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4413      	add	r3, r2
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d101      	bne.n	800bda4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bda0:	2302      	movs	r3, #2
 800bda2:	e018      	b.n	800bdd6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	7c1b      	ldrb	r3, [r3, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10a      	bne.n	800bdc2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bdac:	4b0d      	ldr	r3, [pc, #52]	; (800bde4 <USBD_CDC_Init+0x1e8>)
 800bdae:	7819      	ldrb	r1, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bdb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f005 fdce 	bl	801195c <USBD_LL_PrepareReceive>
 800bdc0:	e008      	b.n	800bdd4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bdc2:	4b08      	ldr	r3, [pc, #32]	; (800bde4 <USBD_CDC_Init+0x1e8>)
 800bdc4:	7819      	ldrb	r1, [r3, #0]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bdcc:	2340      	movs	r3, #64	; 0x40
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f005 fdc4 	bl	801195c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	2000011f 	.word	0x2000011f
 800bde4:	20000120 	.word	0x20000120
 800bde8:	20000121 	.word	0x20000121

0800bdec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bdf8:	4b3a      	ldr	r3, [pc, #232]	; (800bee4 <USBD_CDC_DeInit+0xf8>)
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f005 fce3 	bl	80117ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800be04:	4b37      	ldr	r3, [pc, #220]	; (800bee4 <USBD_CDC_DeInit+0xf8>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	f003 020f 	and.w	r2, r3, #15
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	4613      	mov	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	440b      	add	r3, r1
 800be18:	3324      	adds	r3, #36	; 0x24
 800be1a:	2200      	movs	r2, #0
 800be1c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800be1e:	4b32      	ldr	r3, [pc, #200]	; (800bee8 <USBD_CDC_DeInit+0xfc>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f005 fcd0 	bl	80117ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800be2a:	4b2f      	ldr	r3, [pc, #188]	; (800bee8 <USBD_CDC_DeInit+0xfc>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f003 020f 	and.w	r2, r3, #15
 800be32:	6879      	ldr	r1, [r7, #4]
 800be34:	4613      	mov	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4413      	add	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	440b      	add	r3, r1
 800be3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be42:	2200      	movs	r2, #0
 800be44:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800be46:	4b29      	ldr	r3, [pc, #164]	; (800beec <USBD_CDC_DeInit+0x100>)
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f005 fcbc 	bl	80117ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800be52:	4b26      	ldr	r3, [pc, #152]	; (800beec <USBD_CDC_DeInit+0x100>)
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	f003 020f 	and.w	r2, r3, #15
 800be5a:	6879      	ldr	r1, [r7, #4]
 800be5c:	4613      	mov	r3, r2
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4413      	add	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	440b      	add	r3, r1
 800be66:	3324      	adds	r3, #36	; 0x24
 800be68:	2200      	movs	r2, #0
 800be6a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800be6c:	4b1f      	ldr	r3, [pc, #124]	; (800beec <USBD_CDC_DeInit+0x100>)
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	f003 020f 	and.w	r2, r3, #15
 800be74:	6879      	ldr	r1, [r7, #4]
 800be76:	4613      	mov	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	4413      	add	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	440b      	add	r3, r1
 800be80:	3326      	adds	r3, #38	; 0x26
 800be82:	2200      	movs	r2, #0
 800be84:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	32b0      	adds	r2, #176	; 0xb0
 800be90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01f      	beq.n	800bed8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	33b0      	adds	r3, #176	; 0xb0
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	32b0      	adds	r2, #176	; 0xb0
 800beb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beba:	4618      	mov	r0, r3
 800bebc:	f005 fd90 	bl	80119e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	32b0      	adds	r2, #176	; 0xb0
 800beca:	2100      	movs	r1, #0
 800becc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	2000011f 	.word	0x2000011f
 800bee8:	20000120 	.word	0x20000120
 800beec:	20000121 	.word	0x20000121

0800bef0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	32b0      	adds	r2, #176	; 0xb0
 800bf04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf08:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bf1c:	2303      	movs	r3, #3
 800bf1e:	e0bf      	b.n	800c0a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d050      	beq.n	800bfce <USBD_CDC_Setup+0xde>
 800bf2c:	2b20      	cmp	r3, #32
 800bf2e:	f040 80af 	bne.w	800c090 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	88db      	ldrh	r3, [r3, #6]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d03a      	beq.n	800bfb0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	b25b      	sxtb	r3, r3
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	da1b      	bge.n	800bf7c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	33b0      	adds	r3, #176	; 0xb0
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bf5a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	88d2      	ldrh	r2, [r2, #6]
 800bf60:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	88db      	ldrh	r3, [r3, #6]
 800bf66:	2b07      	cmp	r3, #7
 800bf68:	bf28      	it	cs
 800bf6a:	2307      	movcs	r3, #7
 800bf6c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	89fa      	ldrh	r2, [r7, #14]
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f001 fd89 	bl	800da8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bf7a:	e090      	b.n	800c09e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	785a      	ldrb	r2, [r3, #1]
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	88db      	ldrh	r3, [r3, #6]
 800bf8a:	2b3f      	cmp	r3, #63	; 0x3f
 800bf8c:	d803      	bhi.n	800bf96 <USBD_CDC_Setup+0xa6>
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	88db      	ldrh	r3, [r3, #6]
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	e000      	b.n	800bf98 <USBD_CDC_Setup+0xa8>
 800bf96:	2240      	movs	r2, #64	; 0x40
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bf9e:	6939      	ldr	r1, [r7, #16]
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 fd9b 	bl	800dae4 <USBD_CtlPrepareRx>
      break;
 800bfae:	e076      	b.n	800c09e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	33b0      	adds	r3, #176	; 0xb0
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	7850      	ldrb	r0, [r2, #1]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	4798      	blx	r3
      break;
 800bfcc:	e067      	b.n	800c09e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	785b      	ldrb	r3, [r3, #1]
 800bfd2:	2b0b      	cmp	r3, #11
 800bfd4:	d851      	bhi.n	800c07a <USBD_CDC_Setup+0x18a>
 800bfd6:	a201      	add	r2, pc, #4	; (adr r2, 800bfdc <USBD_CDC_Setup+0xec>)
 800bfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfdc:	0800c00d 	.word	0x0800c00d
 800bfe0:	0800c089 	.word	0x0800c089
 800bfe4:	0800c07b 	.word	0x0800c07b
 800bfe8:	0800c07b 	.word	0x0800c07b
 800bfec:	0800c07b 	.word	0x0800c07b
 800bff0:	0800c07b 	.word	0x0800c07b
 800bff4:	0800c07b 	.word	0x0800c07b
 800bff8:	0800c07b 	.word	0x0800c07b
 800bffc:	0800c07b 	.word	0x0800c07b
 800c000:	0800c07b 	.word	0x0800c07b
 800c004:	0800c037 	.word	0x0800c037
 800c008:	0800c061 	.word	0x0800c061
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c012:	b2db      	uxtb	r3, r3
 800c014:	2b03      	cmp	r3, #3
 800c016:	d107      	bne.n	800c028 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c018:	f107 030a 	add.w	r3, r7, #10
 800c01c:	2202      	movs	r2, #2
 800c01e:	4619      	mov	r1, r3
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f001 fd33 	bl	800da8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c026:	e032      	b.n	800c08e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c028:	6839      	ldr	r1, [r7, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f001 fcbd 	bl	800d9aa <USBD_CtlError>
            ret = USBD_FAIL;
 800c030:	2303      	movs	r3, #3
 800c032:	75fb      	strb	r3, [r7, #23]
          break;
 800c034:	e02b      	b.n	800c08e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d107      	bne.n	800c052 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c042:	f107 030d 	add.w	r3, r7, #13
 800c046:	2201      	movs	r2, #1
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f001 fd1e 	bl	800da8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c050:	e01d      	b.n	800c08e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f001 fca8 	bl	800d9aa <USBD_CtlError>
            ret = USBD_FAIL;
 800c05a:	2303      	movs	r3, #3
 800c05c:	75fb      	strb	r3, [r7, #23]
          break;
 800c05e:	e016      	b.n	800c08e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d00f      	beq.n	800c08c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f001 fc9b 	bl	800d9aa <USBD_CtlError>
            ret = USBD_FAIL;
 800c074:	2303      	movs	r3, #3
 800c076:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c078:	e008      	b.n	800c08c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f001 fc94 	bl	800d9aa <USBD_CtlError>
          ret = USBD_FAIL;
 800c082:	2303      	movs	r3, #3
 800c084:	75fb      	strb	r3, [r7, #23]
          break;
 800c086:	e002      	b.n	800c08e <USBD_CDC_Setup+0x19e>
          break;
 800c088:	bf00      	nop
 800c08a:	e008      	b.n	800c09e <USBD_CDC_Setup+0x1ae>
          break;
 800c08c:	bf00      	nop
      }
      break;
 800c08e:	e006      	b.n	800c09e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f001 fc89 	bl	800d9aa <USBD_CtlError>
      ret = USBD_FAIL;
 800c098:	2303      	movs	r3, #3
 800c09a:	75fb      	strb	r3, [r7, #23]
      break;
 800c09c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c09e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3718      	adds	r7, #24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	32b0      	adds	r2, #176	; 0xb0
 800c0c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	e065      	b.n	800c19e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	32b0      	adds	r2, #176	; 0xb0
 800c0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c0e2:	78fb      	ldrb	r3, [r7, #3]
 800c0e4:	f003 020f 	and.w	r2, r3, #15
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3318      	adds	r3, #24
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d02f      	beq.n	800c15c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c0fc:	78fb      	ldrb	r3, [r7, #3]
 800c0fe:	f003 020f 	and.w	r2, r3, #15
 800c102:	6879      	ldr	r1, [r7, #4]
 800c104:	4613      	mov	r3, r2
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	4413      	add	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	440b      	add	r3, r1
 800c10e:	3318      	adds	r3, #24
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	78fb      	ldrb	r3, [r7, #3]
 800c114:	f003 010f 	and.w	r1, r3, #15
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	460b      	mov	r3, r1
 800c11c:	00db      	lsls	r3, r3, #3
 800c11e:	440b      	add	r3, r1
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4403      	add	r3, r0
 800c124:	3348      	adds	r3, #72	; 0x48
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	fbb2 f1f3 	udiv	r1, r2, r3
 800c12c:	fb01 f303 	mul.w	r3, r1, r3
 800c130:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c132:	2b00      	cmp	r3, #0
 800c134:	d112      	bne.n	800c15c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c136:	78fb      	ldrb	r3, [r7, #3]
 800c138:	f003 020f 	and.w	r2, r3, #15
 800c13c:	6879      	ldr	r1, [r7, #4]
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	440b      	add	r3, r1
 800c148:	3318      	adds	r3, #24
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c14e:	78f9      	ldrb	r1, [r7, #3]
 800c150:	2300      	movs	r3, #0
 800c152:	2200      	movs	r2, #0
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f005 fbe0 	bl	801191a <USBD_LL_Transmit>
 800c15a:	e01f      	b.n	800c19c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	2200      	movs	r2, #0
 800c160:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	33b0      	adds	r3, #176	; 0xb0
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d010      	beq.n	800c19c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	33b0      	adds	r3, #176	; 0xb0
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	691b      	ldr	r3, [r3, #16]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c198:	78fa      	ldrb	r2, [r7, #3]
 800c19a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b084      	sub	sp, #16
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	32b0      	adds	r2, #176	; 0xb0
 800c1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	32b0      	adds	r2, #176	; 0xb0
 800c1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e01a      	b.n	800c20e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c1d8:	78fb      	ldrb	r3, [r7, #3]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f005 fbde 	bl	801199e <USBD_LL_GetRxDataSize>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	33b0      	adds	r3, #176	; 0xb0
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c208:	4611      	mov	r1, r2
 800c20a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b084      	sub	sp, #16
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	32b0      	adds	r2, #176	; 0xb0
 800c228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	e025      	b.n	800c284 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	33b0      	adds	r3, #176	; 0xb0
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d01a      	beq.n	800c282 <USBD_CDC_EP0_RxReady+0x6c>
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c252:	2bff      	cmp	r3, #255	; 0xff
 800c254:	d015      	beq.n	800c282 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	33b0      	adds	r3, #176	; 0xb0
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4413      	add	r3, r2
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c26e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c276:	b292      	uxth	r2, r2
 800c278:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	22ff      	movs	r2, #255	; 0xff
 800c27e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c294:	2182      	movs	r1, #130	; 0x82
 800c296:	4818      	ldr	r0, [pc, #96]	; (800c2f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c298:	f000 fd4f 	bl	800cd3a <USBD_GetEpDesc>
 800c29c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c29e:	2101      	movs	r1, #1
 800c2a0:	4815      	ldr	r0, [pc, #84]	; (800c2f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2a2:	f000 fd4a 	bl	800cd3a <USBD_GetEpDesc>
 800c2a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2a8:	2181      	movs	r1, #129	; 0x81
 800c2aa:	4813      	ldr	r0, [pc, #76]	; (800c2f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2ac:	f000 fd45 	bl	800cd3a <USBD_GetEpDesc>
 800c2b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	2210      	movs	r2, #16
 800c2bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d006      	beq.n	800c2d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2cc:	711a      	strb	r2, [r3, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d006      	beq.n	800c2e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2e0:	711a      	strb	r2, [r3, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2243      	movs	r2, #67	; 0x43
 800c2ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c2ec:	4b02      	ldr	r3, [pc, #8]	; (800c2f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	200000dc 	.word	0x200000dc

0800c2fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c304:	2182      	movs	r1, #130	; 0x82
 800c306:	4818      	ldr	r0, [pc, #96]	; (800c368 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c308:	f000 fd17 	bl	800cd3a <USBD_GetEpDesc>
 800c30c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c30e:	2101      	movs	r1, #1
 800c310:	4815      	ldr	r0, [pc, #84]	; (800c368 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c312:	f000 fd12 	bl	800cd3a <USBD_GetEpDesc>
 800c316:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c318:	2181      	movs	r1, #129	; 0x81
 800c31a:	4813      	ldr	r0, [pc, #76]	; (800c368 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c31c:	f000 fd0d 	bl	800cd3a <USBD_GetEpDesc>
 800c320:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d002      	beq.n	800c32e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	2210      	movs	r2, #16
 800c32c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d006      	beq.n	800c342 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	2200      	movs	r2, #0
 800c338:	711a      	strb	r2, [r3, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f042 0202 	orr.w	r2, r2, #2
 800c340:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d006      	beq.n	800c356 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	711a      	strb	r2, [r3, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	f042 0202 	orr.w	r2, r2, #2
 800c354:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2243      	movs	r2, #67	; 0x43
 800c35a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c35c:	4b02      	ldr	r3, [pc, #8]	; (800c368 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	200000dc 	.word	0x200000dc

0800c36c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c374:	2182      	movs	r1, #130	; 0x82
 800c376:	4818      	ldr	r0, [pc, #96]	; (800c3d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c378:	f000 fcdf 	bl	800cd3a <USBD_GetEpDesc>
 800c37c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c37e:	2101      	movs	r1, #1
 800c380:	4815      	ldr	r0, [pc, #84]	; (800c3d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c382:	f000 fcda 	bl	800cd3a <USBD_GetEpDesc>
 800c386:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c388:	2181      	movs	r1, #129	; 0x81
 800c38a:	4813      	ldr	r0, [pc, #76]	; (800c3d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c38c:	f000 fcd5 	bl	800cd3a <USBD_GetEpDesc>
 800c390:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2210      	movs	r2, #16
 800c39c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d006      	beq.n	800c3b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3ac:	711a      	strb	r2, [r3, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d006      	beq.n	800c3c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3c0:	711a      	strb	r2, [r3, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2243      	movs	r2, #67	; 0x43
 800c3ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c3cc:	4b02      	ldr	r3, [pc, #8]	; (800c3d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3718      	adds	r7, #24
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	200000dc 	.word	0x200000dc

0800c3dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	220a      	movs	r2, #10
 800c3e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c3ea:	4b03      	ldr	r3, [pc, #12]	; (800c3f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr
 800c3f8:	20000098 	.word	0x20000098

0800c3fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e009      	b.n	800c424 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	33b0      	adds	r3, #176	; 0xb0
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	32b0      	adds	r2, #176	; 0xb0
 800c446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d101      	bne.n	800c456 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c452:	2303      	movs	r3, #3
 800c454:	e008      	b.n	800c468 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	371c      	adds	r7, #28
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	32b0      	adds	r2, #176	; 0xb0
 800c488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c48c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d101      	bne.n	800c498 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c494:	2303      	movs	r3, #3
 800c496:	e004      	b.n	800c4a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
	...

0800c4b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	32b0      	adds	r2, #176	; 0xb0
 800c4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	32b0      	adds	r2, #176	; 0xb0
 800c4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d101      	bne.n	800c4e2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	e025      	b.n	800c52e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d11f      	bne.n	800c52c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c4f4:	4b10      	ldr	r3, [pc, #64]	; (800c538 <USBD_CDC_TransmitPacket+0x88>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	f003 020f 	and.w	r2, r3, #15
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	4613      	mov	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4413      	add	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4403      	add	r3, r0
 800c50e:	3318      	adds	r3, #24
 800c510:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c512:	4b09      	ldr	r3, [pc, #36]	; (800c538 <USBD_CDC_TransmitPacket+0x88>)
 800c514:	7819      	ldrb	r1, [r3, #0]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f005 f9f9 	bl	801191a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	2000011f 	.word	0x2000011f

0800c53c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	32b0      	adds	r2, #176	; 0xb0
 800c54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c552:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	32b0      	adds	r2, #176	; 0xb0
 800c55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d101      	bne.n	800c56a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c566:	2303      	movs	r3, #3
 800c568:	e018      	b.n	800c59c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7c1b      	ldrb	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10a      	bne.n	800c588 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c572:	4b0c      	ldr	r3, [pc, #48]	; (800c5a4 <USBD_CDC_ReceivePacket+0x68>)
 800c574:	7819      	ldrb	r1, [r3, #0]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c57c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f005 f9eb 	bl	801195c <USBD_LL_PrepareReceive>
 800c586:	e008      	b.n	800c59a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c588:	4b06      	ldr	r3, [pc, #24]	; (800c5a4 <USBD_CDC_ReceivePacket+0x68>)
 800c58a:	7819      	ldrb	r1, [r3, #0]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c592:	2340      	movs	r3, #64	; 0x40
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f005 f9e1 	bl	801195c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	20000120 	.word	0x20000120

0800c5a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d101      	bne.n	800c5c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e01f      	b.n	800c600 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d003      	beq.n	800c5e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	79fa      	ldrb	r2, [r7, #7]
 800c5f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f005 f85b 	bl	80116b0 <USBD_LL_Init>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3718      	adds	r7, #24
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c612:	2300      	movs	r3, #0
 800c614:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c61c:	2303      	movs	r3, #3
 800c61e:	e025      	b.n	800c66c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	32ae      	adds	r2, #174	; 0xae
 800c632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00f      	beq.n	800c65c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	32ae      	adds	r2, #174	; 0xae
 800c646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	f107 020e 	add.w	r2, r7, #14
 800c650:	4610      	mov	r0, r2
 800c652:	4798      	blx	r3
 800c654:	4602      	mov	r2, r0
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3710      	adds	r7, #16
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f005 f863 	bl	8011748 <USBD_LL_Start>
 800c682:	4603      	mov	r3, r0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c694:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c696:	4618      	mov	r0, r3
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr

0800c6a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b084      	sub	sp, #16
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d009      	beq.n	800c6d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	78fa      	ldrb	r2, [r7, #3]
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	4798      	blx	r3
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	78fa      	ldrb	r2, [r7, #3]
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	4798      	blx	r3
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d001      	beq.n	800c704 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c700:	2303      	movs	r3, #3
 800c702:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c704:	7bfb      	ldrb	r3, [r7, #15]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b084      	sub	sp, #16
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c71e:	6839      	ldr	r1, [r7, #0]
 800c720:	4618      	mov	r0, r3
 800c722:	f001 f908 	bl	800d936 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c734:	461a      	mov	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c742:	f003 031f 	and.w	r3, r3, #31
 800c746:	2b02      	cmp	r3, #2
 800c748:	d01a      	beq.n	800c780 <USBD_LL_SetupStage+0x72>
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d822      	bhi.n	800c794 <USBD_LL_SetupStage+0x86>
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d002      	beq.n	800c758 <USBD_LL_SetupStage+0x4a>
 800c752:	2b01      	cmp	r3, #1
 800c754:	d00a      	beq.n	800c76c <USBD_LL_SetupStage+0x5e>
 800c756:	e01d      	b.n	800c794 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c75e:	4619      	mov	r1, r3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 fb5f 	bl	800ce24 <USBD_StdDevReq>
 800c766:	4603      	mov	r3, r0
 800c768:	73fb      	strb	r3, [r7, #15]
      break;
 800c76a:	e020      	b.n	800c7ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c772:	4619      	mov	r1, r3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 fbc7 	bl	800cf08 <USBD_StdItfReq>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]
      break;
 800c77e:	e016      	b.n	800c7ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c786:	4619      	mov	r1, r3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fc29 	bl	800cfe0 <USBD_StdEPReq>
 800c78e:	4603      	mov	r3, r0
 800c790:	73fb      	strb	r3, [r7, #15]
      break;
 800c792:	e00c      	b.n	800c7ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c79a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f005 f830 	bl	8011808 <USBD_LL_StallEP>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ac:	bf00      	nop
  }

  return ret;
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	607a      	str	r2, [r7, #4]
 800c7c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c7ca:	7afb      	ldrb	r3, [r7, #11]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d16e      	bne.n	800c8ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c7d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	f040 8098 	bne.w	800c914 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	689a      	ldr	r2, [r3, #8]
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d913      	bls.n	800c818 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	689a      	ldr	r2, [r3, #8]
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	1ad2      	subs	r2, r2, r3
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	68da      	ldr	r2, [r3, #12]
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	4293      	cmp	r3, r2
 800c808:	bf28      	it	cs
 800c80a:	4613      	movcs	r3, r2
 800c80c:	461a      	mov	r2, r3
 800c80e:	6879      	ldr	r1, [r7, #4]
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	f001 f984 	bl	800db1e <USBD_CtlContinueRx>
 800c816:	e07d      	b.n	800c914 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c81e:	f003 031f 	and.w	r3, r3, #31
 800c822:	2b02      	cmp	r3, #2
 800c824:	d014      	beq.n	800c850 <USBD_LL_DataOutStage+0x98>
 800c826:	2b02      	cmp	r3, #2
 800c828:	d81d      	bhi.n	800c866 <USBD_LL_DataOutStage+0xae>
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d002      	beq.n	800c834 <USBD_LL_DataOutStage+0x7c>
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d003      	beq.n	800c83a <USBD_LL_DataOutStage+0x82>
 800c832:	e018      	b.n	800c866 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c834:	2300      	movs	r3, #0
 800c836:	75bb      	strb	r3, [r7, #22]
            break;
 800c838:	e018      	b.n	800c86c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c840:	b2db      	uxtb	r3, r3
 800c842:	4619      	mov	r1, r3
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f000 fa5e 	bl	800cd06 <USBD_CoreFindIF>
 800c84a:	4603      	mov	r3, r0
 800c84c:	75bb      	strb	r3, [r7, #22]
            break;
 800c84e:	e00d      	b.n	800c86c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c856:	b2db      	uxtb	r3, r3
 800c858:	4619      	mov	r1, r3
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f000 fa60 	bl	800cd20 <USBD_CoreFindEP>
 800c860:	4603      	mov	r3, r0
 800c862:	75bb      	strb	r3, [r7, #22]
            break;
 800c864:	e002      	b.n	800c86c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c866:	2300      	movs	r3, #0
 800c868:	75bb      	strb	r3, [r7, #22]
            break;
 800c86a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c86c:	7dbb      	ldrb	r3, [r7, #22]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d119      	bne.n	800c8a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b03      	cmp	r3, #3
 800c87c:	d113      	bne.n	800c8a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c87e:	7dba      	ldrb	r2, [r7, #22]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	32ae      	adds	r2, #174	; 0xae
 800c884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00b      	beq.n	800c8a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c88e:	7dba      	ldrb	r2, [r7, #22]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c896:	7dba      	ldrb	r2, [r7, #22]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	32ae      	adds	r2, #174	; 0xae
 800c89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f001 f94a 	bl	800db40 <USBD_CtlSendStatus>
 800c8ac:	e032      	b.n	800c914 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c8ae:	7afb      	ldrb	r3, [r7, #11]
 800c8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f000 fa31 	bl	800cd20 <USBD_CoreFindEP>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8c2:	7dbb      	ldrb	r3, [r7, #22]
 800c8c4:	2bff      	cmp	r3, #255	; 0xff
 800c8c6:	d025      	beq.n	800c914 <USBD_LL_DataOutStage+0x15c>
 800c8c8:	7dbb      	ldrb	r3, [r7, #22]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d122      	bne.n	800c914 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d117      	bne.n	800c90a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c8da:	7dba      	ldrb	r2, [r7, #22]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	32ae      	adds	r2, #174	; 0xae
 800c8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00f      	beq.n	800c90a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c8ea:	7dba      	ldrb	r2, [r7, #22]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c8f2:	7dba      	ldrb	r2, [r7, #22]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	32ae      	adds	r2, #174	; 0xae
 800c8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	7afa      	ldrb	r2, [r7, #11]
 800c900:	4611      	mov	r1, r2
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	4798      	blx	r3
 800c906:	4603      	mov	r3, r0
 800c908:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c90a:	7dfb      	ldrb	r3, [r7, #23]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	e000      	b.n	800c916 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b086      	sub	sp, #24
 800c922:	af00      	add	r7, sp, #0
 800c924:	60f8      	str	r0, [r7, #12]
 800c926:	460b      	mov	r3, r1
 800c928:	607a      	str	r2, [r7, #4]
 800c92a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c92c:	7afb      	ldrb	r3, [r7, #11]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d16f      	bne.n	800ca12 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	3314      	adds	r3, #20
 800c936:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d15a      	bne.n	800c9f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	689a      	ldr	r2, [r3, #8]
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d914      	bls.n	800c978 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	689a      	ldr	r2, [r3, #8]
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	1ad2      	subs	r2, r2, r3
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	461a      	mov	r2, r3
 800c962:	6879      	ldr	r1, [r7, #4]
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f001 f8ac 	bl	800dac2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c96a:	2300      	movs	r3, #0
 800c96c:	2200      	movs	r2, #0
 800c96e:	2100      	movs	r1, #0
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f004 fff3 	bl	801195c <USBD_LL_PrepareReceive>
 800c976:	e03f      	b.n	800c9f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	68da      	ldr	r2, [r3, #12]
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	429a      	cmp	r2, r3
 800c982:	d11c      	bne.n	800c9be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	685a      	ldr	r2, [r3, #4]
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d316      	bcc.n	800c9be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d20f      	bcs.n	800c9be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c99e:	2200      	movs	r2, #0
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f001 f88d 	bl	800dac2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f004 ffd0 	bl	801195c <USBD_LL_PrepareReceive>
 800c9bc:	e01c      	b.n	800c9f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	2b03      	cmp	r3, #3
 800c9c8:	d10f      	bne.n	800c9ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d009      	beq.n	800c9ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ea:	2180      	movs	r1, #128	; 0x80
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f004 ff0b 	bl	8011808 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f001 f8b7 	bl	800db66 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d03a      	beq.n	800ca78 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f7ff fe42 	bl	800c68c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ca10:	e032      	b.n	800ca78 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ca12:	7afb      	ldrb	r3, [r7, #11]
 800ca14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f000 f97f 	bl	800cd20 <USBD_CoreFindEP>
 800ca22:	4603      	mov	r3, r0
 800ca24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca26:	7dfb      	ldrb	r3, [r7, #23]
 800ca28:	2bff      	cmp	r3, #255	; 0xff
 800ca2a:	d025      	beq.n	800ca78 <USBD_LL_DataInStage+0x15a>
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d122      	bne.n	800ca78 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d11c      	bne.n	800ca78 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ca3e:	7dfa      	ldrb	r2, [r7, #23]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	32ae      	adds	r2, #174	; 0xae
 800ca44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d014      	beq.n	800ca78 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ca4e:	7dfa      	ldrb	r2, [r7, #23]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ca56:	7dfa      	ldrb	r2, [r7, #23]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	32ae      	adds	r2, #174	; 0xae
 800ca5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	7afa      	ldrb	r2, [r7, #11]
 800ca64:	4611      	mov	r1, r2
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	4798      	blx	r3
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ca6e:	7dbb      	ldrb	r3, [r7, #22]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ca74:	7dbb      	ldrb	r3, [r7, #22]
 800ca76:	e000      	b.n	800ca7a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b084      	sub	sp, #16
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d014      	beq.n	800cae8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00e      	beq.n	800cae8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	6852      	ldr	r2, [r2, #4]
 800cad6:	b2d2      	uxtb	r2, r2
 800cad8:	4611      	mov	r1, r2
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	4798      	blx	r3
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d001      	beq.n	800cae8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cae4:	2303      	movs	r3, #3
 800cae6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cae8:	2340      	movs	r3, #64	; 0x40
 800caea:	2200      	movs	r2, #0
 800caec:	2100      	movs	r1, #0
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f004 fe45 	bl	801177e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2201      	movs	r2, #1
 800caf8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2240      	movs	r2, #64	; 0x40
 800cb00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb04:	2340      	movs	r3, #64	; 0x40
 800cb06:	2200      	movs	r2, #0
 800cb08:	2180      	movs	r1, #128	; 0x80
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f004 fe37 	bl	801177e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2240      	movs	r2, #64	; 0x40
 800cb1a:	621a      	str	r2, [r3, #32]

  return ret;
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}

0800cb26 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cb26:	b480      	push	{r7}
 800cb28:	b083      	sub	sp, #12
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
 800cb2e:	460b      	mov	r3, r1
 800cb30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	78fa      	ldrb	r2, [r7, #3]
 800cb36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	370c      	adds	r7, #12
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr

0800cb46 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cb46:	b480      	push	{r7}
 800cb48:	b083      	sub	sp, #12
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2204      	movs	r2, #4
 800cb60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cb72:	b480      	push	{r7}
 800cb74:	b083      	sub	sp, #12
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	2b04      	cmp	r3, #4
 800cb84:	d106      	bne.n	800cb94 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	370c      	adds	r7, #12
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr

0800cba2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d110      	bne.n	800cbd8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00b      	beq.n	800cbd8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbc6:	69db      	ldr	r3, [r3, #28]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d005      	beq.n	800cbd8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbd2:	69db      	ldr	r3, [r3, #28]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
 800cbea:	460b      	mov	r3, r1
 800cbec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	32ae      	adds	r2, #174	; 0xae
 800cbf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d101      	bne.n	800cc04 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc00:	2303      	movs	r3, #3
 800cc02:	e01c      	b.n	800cc3e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	2b03      	cmp	r3, #3
 800cc0e:	d115      	bne.n	800cc3c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	32ae      	adds	r2, #174	; 0xae
 800cc1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00b      	beq.n	800cc3c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	32ae      	adds	r2, #174	; 0xae
 800cc2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	78fa      	ldrb	r2, [r7, #3]
 800cc36:	4611      	mov	r1, r2
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b082      	sub	sp, #8
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	460b      	mov	r3, r1
 800cc50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	32ae      	adds	r2, #174	; 0xae
 800cc5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d101      	bne.n	800cc68 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc64:	2303      	movs	r3, #3
 800cc66:	e01c      	b.n	800cca2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	2b03      	cmp	r3, #3
 800cc72:	d115      	bne.n	800cca0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	32ae      	adds	r2, #174	; 0xae
 800cc7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00b      	beq.n	800cca0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	32ae      	adds	r2, #174	; 0xae
 800cc92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc98:	78fa      	ldrb	r2, [r7, #3]
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b083      	sub	sp, #12
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ccb2:	2300      	movs	r3, #0
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00e      	beq.n	800ccfc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	6852      	ldr	r2, [r2, #4]
 800ccea:	b2d2      	uxtb	r2, r2
 800ccec:	4611      	mov	r1, r2
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	4798      	blx	r3
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd06:	b480      	push	{r7}
 800cd08:	b083      	sub	sp, #12
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd12:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd2c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	370c      	adds	r7, #12
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b086      	sub	sp, #24
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	460b      	mov	r3, r1
 800cd44:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	885b      	ldrh	r3, [r3, #2]
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d920      	bls.n	800cda4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cd6a:	e013      	b.n	800cd94 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cd6c:	f107 030a 	add.w	r3, r7, #10
 800cd70:	4619      	mov	r1, r3
 800cd72:	6978      	ldr	r0, [r7, #20]
 800cd74:	f000 f81b 	bl	800cdae <USBD_GetNextDesc>
 800cd78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	785b      	ldrb	r3, [r3, #1]
 800cd7e:	2b05      	cmp	r3, #5
 800cd80:	d108      	bne.n	800cd94 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	789b      	ldrb	r3, [r3, #2]
 800cd8a:	78fa      	ldrb	r2, [r7, #3]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d008      	beq.n	800cda2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cd90:	2300      	movs	r3, #0
 800cd92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	885b      	ldrh	r3, [r3, #2]
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	897b      	ldrh	r3, [r7, #10]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d8e5      	bhi.n	800cd6c <USBD_GetEpDesc+0x32>
 800cda0:	e000      	b.n	800cda4 <USBD_GetEpDesc+0x6a>
          break;
 800cda2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cda4:	693b      	ldr	r3, [r7, #16]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b085      	sub	sp, #20
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	881a      	ldrh	r2, [r3, #0]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	4413      	add	r3, r2
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cdda:	68fb      	ldr	r3, [r7, #12]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b087      	sub	sp, #28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ce06:	8a3b      	ldrh	r3, [r7, #16]
 800ce08:	021b      	lsls	r3, r3, #8
 800ce0a:	b21a      	sxth	r2, r3
 800ce0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	b21b      	sxth	r3, r3
 800ce14:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ce16:	89fb      	ldrh	r3, [r7, #14]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	371c      	adds	r7, #28
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce3a:	2b40      	cmp	r3, #64	; 0x40
 800ce3c:	d005      	beq.n	800ce4a <USBD_StdDevReq+0x26>
 800ce3e:	2b40      	cmp	r3, #64	; 0x40
 800ce40:	d857      	bhi.n	800cef2 <USBD_StdDevReq+0xce>
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00f      	beq.n	800ce66 <USBD_StdDevReq+0x42>
 800ce46:	2b20      	cmp	r3, #32
 800ce48:	d153      	bne.n	800cef2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	32ae      	adds	r2, #174	; 0xae
 800ce54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	6839      	ldr	r1, [r7, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	4798      	blx	r3
 800ce60:	4603      	mov	r3, r0
 800ce62:	73fb      	strb	r3, [r7, #15]
      break;
 800ce64:	e04a      	b.n	800cefc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	785b      	ldrb	r3, [r3, #1]
 800ce6a:	2b09      	cmp	r3, #9
 800ce6c:	d83b      	bhi.n	800cee6 <USBD_StdDevReq+0xc2>
 800ce6e:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <USBD_StdDevReq+0x50>)
 800ce70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce74:	0800cec9 	.word	0x0800cec9
 800ce78:	0800cedd 	.word	0x0800cedd
 800ce7c:	0800cee7 	.word	0x0800cee7
 800ce80:	0800ced3 	.word	0x0800ced3
 800ce84:	0800cee7 	.word	0x0800cee7
 800ce88:	0800cea7 	.word	0x0800cea7
 800ce8c:	0800ce9d 	.word	0x0800ce9d
 800ce90:	0800cee7 	.word	0x0800cee7
 800ce94:	0800cebf 	.word	0x0800cebf
 800ce98:	0800ceb1 	.word	0x0800ceb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fa3c 	bl	800d31c <USBD_GetDescriptor>
          break;
 800cea4:	e024      	b.n	800cef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cea6:	6839      	ldr	r1, [r7, #0]
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 fba1 	bl	800d5f0 <USBD_SetAddress>
          break;
 800ceae:	e01f      	b.n	800cef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fbe0 	bl	800d678 <USBD_SetConfig>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	73fb      	strb	r3, [r7, #15]
          break;
 800cebc:	e018      	b.n	800cef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cebe:	6839      	ldr	r1, [r7, #0]
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 fc83 	bl	800d7cc <USBD_GetConfig>
          break;
 800cec6:	e013      	b.n	800cef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 fcb4 	bl	800d838 <USBD_GetStatus>
          break;
 800ced0:	e00e      	b.n	800cef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ced2:	6839      	ldr	r1, [r7, #0]
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fce3 	bl	800d8a0 <USBD_SetFeature>
          break;
 800ceda:	e009      	b.n	800cef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fd07 	bl	800d8f2 <USBD_ClrFeature>
          break;
 800cee4:	e004      	b.n	800cef0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cee6:	6839      	ldr	r1, [r7, #0]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 fd5e 	bl	800d9aa <USBD_CtlError>
          break;
 800ceee:	bf00      	nop
      }
      break;
 800cef0:	e004      	b.n	800cefc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cef2:	6839      	ldr	r1, [r7, #0]
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 fd58 	bl	800d9aa <USBD_CtlError>
      break;
 800cefa:	bf00      	nop
  }

  return ret;
 800cefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop

0800cf08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf12:	2300      	movs	r3, #0
 800cf14:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf1e:	2b40      	cmp	r3, #64	; 0x40
 800cf20:	d005      	beq.n	800cf2e <USBD_StdItfReq+0x26>
 800cf22:	2b40      	cmp	r3, #64	; 0x40
 800cf24:	d852      	bhi.n	800cfcc <USBD_StdItfReq+0xc4>
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <USBD_StdItfReq+0x26>
 800cf2a:	2b20      	cmp	r3, #32
 800cf2c:	d14e      	bne.n	800cfcc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	3b01      	subs	r3, #1
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d840      	bhi.n	800cfbe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	889b      	ldrh	r3, [r3, #4]
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d836      	bhi.n	800cfb4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	889b      	ldrh	r3, [r3, #4]
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7ff fed9 	bl	800cd06 <USBD_CoreFindIF>
 800cf54:	4603      	mov	r3, r0
 800cf56:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf58:	7bbb      	ldrb	r3, [r7, #14]
 800cf5a:	2bff      	cmp	r3, #255	; 0xff
 800cf5c:	d01d      	beq.n	800cf9a <USBD_StdItfReq+0x92>
 800cf5e:	7bbb      	ldrb	r3, [r7, #14]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d11a      	bne.n	800cf9a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cf64:	7bba      	ldrb	r2, [r7, #14]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	32ae      	adds	r2, #174	; 0xae
 800cf6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00f      	beq.n	800cf94 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cf74:	7bba      	ldrb	r2, [r7, #14]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cf7c:	7bba      	ldrb	r2, [r7, #14]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	32ae      	adds	r2, #174	; 0xae
 800cf82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	4798      	blx	r3
 800cf8e:	4603      	mov	r3, r0
 800cf90:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cf92:	e004      	b.n	800cf9e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cf94:	2303      	movs	r3, #3
 800cf96:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cf98:	e001      	b.n	800cf9e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	88db      	ldrh	r3, [r3, #6]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d110      	bne.n	800cfc8 <USBD_StdItfReq+0xc0>
 800cfa6:	7bfb      	ldrb	r3, [r7, #15]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10d      	bne.n	800cfc8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 fdc7 	bl	800db40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cfb2:	e009      	b.n	800cfc8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cfb4:	6839      	ldr	r1, [r7, #0]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fcf7 	bl	800d9aa <USBD_CtlError>
          break;
 800cfbc:	e004      	b.n	800cfc8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 fcf2 	bl	800d9aa <USBD_CtlError>
          break;
 800cfc6:	e000      	b.n	800cfca <USBD_StdItfReq+0xc2>
          break;
 800cfc8:	bf00      	nop
      }
      break;
 800cfca:	e004      	b.n	800cfd6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fceb 	bl	800d9aa <USBD_CtlError>
      break;
 800cfd4:	bf00      	nop
  }

  return ret;
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3710      	adds	r7, #16
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	889b      	ldrh	r3, [r3, #4]
 800cff2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cffc:	2b40      	cmp	r3, #64	; 0x40
 800cffe:	d007      	beq.n	800d010 <USBD_StdEPReq+0x30>
 800d000:	2b40      	cmp	r3, #64	; 0x40
 800d002:	f200 817f 	bhi.w	800d304 <USBD_StdEPReq+0x324>
 800d006:	2b00      	cmp	r3, #0
 800d008:	d02a      	beq.n	800d060 <USBD_StdEPReq+0x80>
 800d00a:	2b20      	cmp	r3, #32
 800d00c:	f040 817a 	bne.w	800d304 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d010:	7bbb      	ldrb	r3, [r7, #14]
 800d012:	4619      	mov	r1, r3
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7ff fe83 	bl	800cd20 <USBD_CoreFindEP>
 800d01a:	4603      	mov	r3, r0
 800d01c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d01e:	7b7b      	ldrb	r3, [r7, #13]
 800d020:	2bff      	cmp	r3, #255	; 0xff
 800d022:	f000 8174 	beq.w	800d30e <USBD_StdEPReq+0x32e>
 800d026:	7b7b      	ldrb	r3, [r7, #13]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f040 8170 	bne.w	800d30e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d02e:	7b7a      	ldrb	r2, [r7, #13]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d036:	7b7a      	ldrb	r2, [r7, #13]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	32ae      	adds	r2, #174	; 0xae
 800d03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 8163 	beq.w	800d30e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d048:	7b7a      	ldrb	r2, [r7, #13]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	32ae      	adds	r2, #174	; 0xae
 800d04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	4798      	blx	r3
 800d05a:	4603      	mov	r3, r0
 800d05c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d05e:	e156      	b.n	800d30e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	785b      	ldrb	r3, [r3, #1]
 800d064:	2b03      	cmp	r3, #3
 800d066:	d008      	beq.n	800d07a <USBD_StdEPReq+0x9a>
 800d068:	2b03      	cmp	r3, #3
 800d06a:	f300 8145 	bgt.w	800d2f8 <USBD_StdEPReq+0x318>
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f000 809b 	beq.w	800d1aa <USBD_StdEPReq+0x1ca>
 800d074:	2b01      	cmp	r3, #1
 800d076:	d03c      	beq.n	800d0f2 <USBD_StdEPReq+0x112>
 800d078:	e13e      	b.n	800d2f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d080:	b2db      	uxtb	r3, r3
 800d082:	2b02      	cmp	r3, #2
 800d084:	d002      	beq.n	800d08c <USBD_StdEPReq+0xac>
 800d086:	2b03      	cmp	r3, #3
 800d088:	d016      	beq.n	800d0b8 <USBD_StdEPReq+0xd8>
 800d08a:	e02c      	b.n	800d0e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d08c:	7bbb      	ldrb	r3, [r7, #14]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00d      	beq.n	800d0ae <USBD_StdEPReq+0xce>
 800d092:	7bbb      	ldrb	r3, [r7, #14]
 800d094:	2b80      	cmp	r3, #128	; 0x80
 800d096:	d00a      	beq.n	800d0ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d098:	7bbb      	ldrb	r3, [r7, #14]
 800d09a:	4619      	mov	r1, r3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f004 fbb3 	bl	8011808 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0a2:	2180      	movs	r1, #128	; 0x80
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f004 fbaf 	bl	8011808 <USBD_LL_StallEP>
 800d0aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d0ac:	e020      	b.n	800d0f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d0ae:	6839      	ldr	r1, [r7, #0]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fc7a 	bl	800d9aa <USBD_CtlError>
              break;
 800d0b6:	e01b      	b.n	800d0f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	885b      	ldrh	r3, [r3, #2]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10e      	bne.n	800d0de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d0c0:	7bbb      	ldrb	r3, [r7, #14]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00b      	beq.n	800d0de <USBD_StdEPReq+0xfe>
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
 800d0c8:	2b80      	cmp	r3, #128	; 0x80
 800d0ca:	d008      	beq.n	800d0de <USBD_StdEPReq+0xfe>
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	88db      	ldrh	r3, [r3, #6]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d104      	bne.n	800d0de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d0d4:	7bbb      	ldrb	r3, [r7, #14]
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f004 fb95 	bl	8011808 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 fd2e 	bl	800db40 <USBD_CtlSendStatus>

              break;
 800d0e4:	e004      	b.n	800d0f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d0e6:	6839      	ldr	r1, [r7, #0]
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fc5e 	bl	800d9aa <USBD_CtlError>
              break;
 800d0ee:	bf00      	nop
          }
          break;
 800d0f0:	e107      	b.n	800d302 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d002      	beq.n	800d104 <USBD_StdEPReq+0x124>
 800d0fe:	2b03      	cmp	r3, #3
 800d100:	d016      	beq.n	800d130 <USBD_StdEPReq+0x150>
 800d102:	e04b      	b.n	800d19c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d104:	7bbb      	ldrb	r3, [r7, #14]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00d      	beq.n	800d126 <USBD_StdEPReq+0x146>
 800d10a:	7bbb      	ldrb	r3, [r7, #14]
 800d10c:	2b80      	cmp	r3, #128	; 0x80
 800d10e:	d00a      	beq.n	800d126 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d110:	7bbb      	ldrb	r3, [r7, #14]
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f004 fb77 	bl	8011808 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d11a:	2180      	movs	r1, #128	; 0x80
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f004 fb73 	bl	8011808 <USBD_LL_StallEP>
 800d122:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d124:	e040      	b.n	800d1a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d126:	6839      	ldr	r1, [r7, #0]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 fc3e 	bl	800d9aa <USBD_CtlError>
              break;
 800d12e:	e03b      	b.n	800d1a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	885b      	ldrh	r3, [r3, #2]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d136      	bne.n	800d1a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d138:	7bbb      	ldrb	r3, [r7, #14]
 800d13a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d004      	beq.n	800d14c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d142:	7bbb      	ldrb	r3, [r7, #14]
 800d144:	4619      	mov	r1, r3
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f004 fb7d 	bl	8011846 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 fcf7 	bl	800db40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d152:	7bbb      	ldrb	r3, [r7, #14]
 800d154:	4619      	mov	r1, r3
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff fde2 	bl	800cd20 <USBD_CoreFindEP>
 800d15c:	4603      	mov	r3, r0
 800d15e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d160:	7b7b      	ldrb	r3, [r7, #13]
 800d162:	2bff      	cmp	r3, #255	; 0xff
 800d164:	d01f      	beq.n	800d1a6 <USBD_StdEPReq+0x1c6>
 800d166:	7b7b      	ldrb	r3, [r7, #13]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d11c      	bne.n	800d1a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d16c:	7b7a      	ldrb	r2, [r7, #13]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d174:	7b7a      	ldrb	r2, [r7, #13]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	32ae      	adds	r2, #174	; 0xae
 800d17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d010      	beq.n	800d1a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d184:	7b7a      	ldrb	r2, [r7, #13]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	32ae      	adds	r2, #174	; 0xae
 800d18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	6839      	ldr	r1, [r7, #0]
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	4798      	blx	r3
 800d196:	4603      	mov	r3, r0
 800d198:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d19a:	e004      	b.n	800d1a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d19c:	6839      	ldr	r1, [r7, #0]
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 fc03 	bl	800d9aa <USBD_CtlError>
              break;
 800d1a4:	e000      	b.n	800d1a8 <USBD_StdEPReq+0x1c8>
              break;
 800d1a6:	bf00      	nop
          }
          break;
 800d1a8:	e0ab      	b.n	800d302 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	d002      	beq.n	800d1bc <USBD_StdEPReq+0x1dc>
 800d1b6:	2b03      	cmp	r3, #3
 800d1b8:	d032      	beq.n	800d220 <USBD_StdEPReq+0x240>
 800d1ba:	e097      	b.n	800d2ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1bc:	7bbb      	ldrb	r3, [r7, #14]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d007      	beq.n	800d1d2 <USBD_StdEPReq+0x1f2>
 800d1c2:	7bbb      	ldrb	r3, [r7, #14]
 800d1c4:	2b80      	cmp	r3, #128	; 0x80
 800d1c6:	d004      	beq.n	800d1d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d1c8:	6839      	ldr	r1, [r7, #0]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 fbed 	bl	800d9aa <USBD_CtlError>
                break;
 800d1d0:	e091      	b.n	800d2f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	da0b      	bge.n	800d1f2 <USBD_StdEPReq+0x212>
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
 800d1dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	4413      	add	r3, r2
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	3310      	adds	r3, #16
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	e00b      	b.n	800d20a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d1f2:	7bbb      	ldrb	r3, [r7, #14]
 800d1f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	4413      	add	r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	4413      	add	r3, r2
 800d208:	3304      	adds	r3, #4
 800d20a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	2200      	movs	r2, #0
 800d210:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	2202      	movs	r2, #2
 800d216:	4619      	mov	r1, r3
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fc37 	bl	800da8c <USBD_CtlSendData>
              break;
 800d21e:	e06a      	b.n	800d2f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d224:	2b00      	cmp	r3, #0
 800d226:	da11      	bge.n	800d24c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d228:	7bbb      	ldrb	r3, [r7, #14]
 800d22a:	f003 020f 	and.w	r2, r3, #15
 800d22e:	6879      	ldr	r1, [r7, #4]
 800d230:	4613      	mov	r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	4413      	add	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	440b      	add	r3, r1
 800d23a:	3324      	adds	r3, #36	; 0x24
 800d23c:	881b      	ldrh	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d117      	bne.n	800d272 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fbb0 	bl	800d9aa <USBD_CtlError>
                  break;
 800d24a:	e054      	b.n	800d2f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d24c:	7bbb      	ldrb	r3, [r7, #14]
 800d24e:	f003 020f 	and.w	r2, r3, #15
 800d252:	6879      	ldr	r1, [r7, #4]
 800d254:	4613      	mov	r3, r2
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	4413      	add	r3, r2
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	440b      	add	r3, r1
 800d25e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d262:	881b      	ldrh	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d104      	bne.n	800d272 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d268:	6839      	ldr	r1, [r7, #0]
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fb9d 	bl	800d9aa <USBD_CtlError>
                  break;
 800d270:	e041      	b.n	800d2f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d272:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d276:	2b00      	cmp	r3, #0
 800d278:	da0b      	bge.n	800d292 <USBD_StdEPReq+0x2b2>
 800d27a:	7bbb      	ldrb	r3, [r7, #14]
 800d27c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d280:	4613      	mov	r3, r2
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	4413      	add	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	3310      	adds	r3, #16
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	4413      	add	r3, r2
 800d28e:	3304      	adds	r3, #4
 800d290:	e00b      	b.n	800d2aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d292:	7bbb      	ldrb	r3, [r7, #14]
 800d294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d298:	4613      	mov	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	3304      	adds	r3, #4
 800d2aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d2ac:	7bbb      	ldrb	r3, [r7, #14]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d002      	beq.n	800d2b8 <USBD_StdEPReq+0x2d8>
 800d2b2:	7bbb      	ldrb	r3, [r7, #14]
 800d2b4:	2b80      	cmp	r3, #128	; 0x80
 800d2b6:	d103      	bne.n	800d2c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
 800d2be:	e00e      	b.n	800d2de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d2c0:	7bbb      	ldrb	r3, [r7, #14]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f004 fadd 	bl	8011884 <USBD_LL_IsStallEP>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d003      	beq.n	800d2d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	601a      	str	r2, [r3, #0]
 800d2d6:	e002      	b.n	800d2de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 fbd1 	bl	800da8c <USBD_CtlSendData>
              break;
 800d2ea:	e004      	b.n	800d2f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d2ec:	6839      	ldr	r1, [r7, #0]
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fb5b 	bl	800d9aa <USBD_CtlError>
              break;
 800d2f4:	bf00      	nop
          }
          break;
 800d2f6:	e004      	b.n	800d302 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d2f8:	6839      	ldr	r1, [r7, #0]
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 fb55 	bl	800d9aa <USBD_CtlError>
          break;
 800d300:	bf00      	nop
      }
      break;
 800d302:	e005      	b.n	800d310 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d304:	6839      	ldr	r1, [r7, #0]
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 fb4f 	bl	800d9aa <USBD_CtlError>
      break;
 800d30c:	e000      	b.n	800d310 <USBD_StdEPReq+0x330>
      break;
 800d30e:	bf00      	nop
  }

  return ret;
 800d310:	7bfb      	ldrb	r3, [r7, #15]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
	...

0800d31c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d326:	2300      	movs	r3, #0
 800d328:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d32e:	2300      	movs	r3, #0
 800d330:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	885b      	ldrh	r3, [r3, #2]
 800d336:	0a1b      	lsrs	r3, r3, #8
 800d338:	b29b      	uxth	r3, r3
 800d33a:	3b01      	subs	r3, #1
 800d33c:	2b06      	cmp	r3, #6
 800d33e:	f200 8128 	bhi.w	800d592 <USBD_GetDescriptor+0x276>
 800d342:	a201      	add	r2, pc, #4	; (adr r2, 800d348 <USBD_GetDescriptor+0x2c>)
 800d344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d348:	0800d365 	.word	0x0800d365
 800d34c:	0800d37d 	.word	0x0800d37d
 800d350:	0800d3bd 	.word	0x0800d3bd
 800d354:	0800d593 	.word	0x0800d593
 800d358:	0800d593 	.word	0x0800d593
 800d35c:	0800d533 	.word	0x0800d533
 800d360:	0800d55f 	.word	0x0800d55f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	7c12      	ldrb	r2, [r2, #16]
 800d370:	f107 0108 	add.w	r1, r7, #8
 800d374:	4610      	mov	r0, r2
 800d376:	4798      	blx	r3
 800d378:	60f8      	str	r0, [r7, #12]
      break;
 800d37a:	e112      	b.n	800d5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	7c1b      	ldrb	r3, [r3, #16]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10d      	bne.n	800d3a0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d38c:	f107 0208 	add.w	r2, r7, #8
 800d390:	4610      	mov	r0, r2
 800d392:	4798      	blx	r3
 800d394:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	3301      	adds	r3, #1
 800d39a:	2202      	movs	r2, #2
 800d39c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d39e:	e100      	b.n	800d5a2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a8:	f107 0208 	add.w	r2, r7, #8
 800d3ac:	4610      	mov	r0, r2
 800d3ae:	4798      	blx	r3
 800d3b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	701a      	strb	r2, [r3, #0]
      break;
 800d3ba:	e0f2      	b.n	800d5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	885b      	ldrh	r3, [r3, #2]
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	2b05      	cmp	r3, #5
 800d3c4:	f200 80ac 	bhi.w	800d520 <USBD_GetDescriptor+0x204>
 800d3c8:	a201      	add	r2, pc, #4	; (adr r2, 800d3d0 <USBD_GetDescriptor+0xb4>)
 800d3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ce:	bf00      	nop
 800d3d0:	0800d3e9 	.word	0x0800d3e9
 800d3d4:	0800d41d 	.word	0x0800d41d
 800d3d8:	0800d451 	.word	0x0800d451
 800d3dc:	0800d485 	.word	0x0800d485
 800d3e0:	0800d4b9 	.word	0x0800d4b9
 800d3e4:	0800d4ed 	.word	0x0800d4ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00b      	beq.n	800d40c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	7c12      	ldrb	r2, [r2, #16]
 800d400:	f107 0108 	add.w	r1, r7, #8
 800d404:	4610      	mov	r0, r2
 800d406:	4798      	blx	r3
 800d408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d40a:	e091      	b.n	800d530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 facb 	bl	800d9aa <USBD_CtlError>
            err++;
 800d414:	7afb      	ldrb	r3, [r7, #11]
 800d416:	3301      	adds	r3, #1
 800d418:	72fb      	strb	r3, [r7, #11]
          break;
 800d41a:	e089      	b.n	800d530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d00b      	beq.n	800d440 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	7c12      	ldrb	r2, [r2, #16]
 800d434:	f107 0108 	add.w	r1, r7, #8
 800d438:	4610      	mov	r0, r2
 800d43a:	4798      	blx	r3
 800d43c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d43e:	e077      	b.n	800d530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d440:	6839      	ldr	r1, [r7, #0]
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 fab1 	bl	800d9aa <USBD_CtlError>
            err++;
 800d448:	7afb      	ldrb	r3, [r7, #11]
 800d44a:	3301      	adds	r3, #1
 800d44c:	72fb      	strb	r3, [r7, #11]
          break;
 800d44e:	e06f      	b.n	800d530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00b      	beq.n	800d474 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	7c12      	ldrb	r2, [r2, #16]
 800d468:	f107 0108 	add.w	r1, r7, #8
 800d46c:	4610      	mov	r0, r2
 800d46e:	4798      	blx	r3
 800d470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d472:	e05d      	b.n	800d530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d474:	6839      	ldr	r1, [r7, #0]
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fa97 	bl	800d9aa <USBD_CtlError>
            err++;
 800d47c:	7afb      	ldrb	r3, [r7, #11]
 800d47e:	3301      	adds	r3, #1
 800d480:	72fb      	strb	r3, [r7, #11]
          break;
 800d482:	e055      	b.n	800d530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00b      	beq.n	800d4a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d496:	691b      	ldr	r3, [r3, #16]
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	7c12      	ldrb	r2, [r2, #16]
 800d49c:	f107 0108 	add.w	r1, r7, #8
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	4798      	blx	r3
 800d4a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4a6:	e043      	b.n	800d530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4a8:	6839      	ldr	r1, [r7, #0]
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 fa7d 	bl	800d9aa <USBD_CtlError>
            err++;
 800d4b0:	7afb      	ldrb	r3, [r7, #11]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d4b6:	e03b      	b.n	800d530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00b      	beq.n	800d4dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4ca:	695b      	ldr	r3, [r3, #20]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	7c12      	ldrb	r2, [r2, #16]
 800d4d0:	f107 0108 	add.w	r1, r7, #8
 800d4d4:	4610      	mov	r0, r2
 800d4d6:	4798      	blx	r3
 800d4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4da:	e029      	b.n	800d530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fa63 	bl	800d9aa <USBD_CtlError>
            err++;
 800d4e4:	7afb      	ldrb	r3, [r7, #11]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4ea:	e021      	b.n	800d530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4f2:	699b      	ldr	r3, [r3, #24]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00b      	beq.n	800d510 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4fe:	699b      	ldr	r3, [r3, #24]
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	7c12      	ldrb	r2, [r2, #16]
 800d504:	f107 0108 	add.w	r1, r7, #8
 800d508:	4610      	mov	r0, r2
 800d50a:	4798      	blx	r3
 800d50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d50e:	e00f      	b.n	800d530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d510:	6839      	ldr	r1, [r7, #0]
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 fa49 	bl	800d9aa <USBD_CtlError>
            err++;
 800d518:	7afb      	ldrb	r3, [r7, #11]
 800d51a:	3301      	adds	r3, #1
 800d51c:	72fb      	strb	r3, [r7, #11]
          break;
 800d51e:	e007      	b.n	800d530 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fa41 	bl	800d9aa <USBD_CtlError>
          err++;
 800d528:	7afb      	ldrb	r3, [r7, #11]
 800d52a:	3301      	adds	r3, #1
 800d52c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d52e:	bf00      	nop
      }
      break;
 800d530:	e037      	b.n	800d5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	7c1b      	ldrb	r3, [r3, #16]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d109      	bne.n	800d54e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d542:	f107 0208 	add.w	r2, r7, #8
 800d546:	4610      	mov	r0, r2
 800d548:	4798      	blx	r3
 800d54a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d54c:	e029      	b.n	800d5a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d54e:	6839      	ldr	r1, [r7, #0]
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 fa2a 	bl	800d9aa <USBD_CtlError>
        err++;
 800d556:	7afb      	ldrb	r3, [r7, #11]
 800d558:	3301      	adds	r3, #1
 800d55a:	72fb      	strb	r3, [r7, #11]
      break;
 800d55c:	e021      	b.n	800d5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	7c1b      	ldrb	r3, [r3, #16]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d10d      	bne.n	800d582 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d56e:	f107 0208 	add.w	r2, r7, #8
 800d572:	4610      	mov	r0, r2
 800d574:	4798      	blx	r3
 800d576:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	3301      	adds	r3, #1
 800d57c:	2207      	movs	r2, #7
 800d57e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d580:	e00f      	b.n	800d5a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 fa10 	bl	800d9aa <USBD_CtlError>
        err++;
 800d58a:	7afb      	ldrb	r3, [r7, #11]
 800d58c:	3301      	adds	r3, #1
 800d58e:	72fb      	strb	r3, [r7, #11]
      break;
 800d590:	e007      	b.n	800d5a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d592:	6839      	ldr	r1, [r7, #0]
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 fa08 	bl	800d9aa <USBD_CtlError>
      err++;
 800d59a:	7afb      	ldrb	r3, [r7, #11]
 800d59c:	3301      	adds	r3, #1
 800d59e:	72fb      	strb	r3, [r7, #11]
      break;
 800d5a0:	bf00      	nop
  }

  if (err != 0U)
 800d5a2:	7afb      	ldrb	r3, [r7, #11]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d11e      	bne.n	800d5e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	88db      	ldrh	r3, [r3, #6]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d016      	beq.n	800d5de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d5b0:	893b      	ldrh	r3, [r7, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00e      	beq.n	800d5d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	88da      	ldrh	r2, [r3, #6]
 800d5ba:	893b      	ldrh	r3, [r7, #8]
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	bf28      	it	cs
 800d5c0:	4613      	movcs	r3, r2
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d5c6:	893b      	ldrh	r3, [r7, #8]
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	68f9      	ldr	r1, [r7, #12]
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 fa5d 	bl	800da8c <USBD_CtlSendData>
 800d5d2:	e009      	b.n	800d5e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f9e7 	bl	800d9aa <USBD_CtlError>
 800d5dc:	e004      	b.n	800d5e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 faae 	bl	800db40 <USBD_CtlSendStatus>
 800d5e4:	e000      	b.n	800d5e8 <USBD_GetDescriptor+0x2cc>
    return;
 800d5e6:	bf00      	nop
  }
}
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop

0800d5f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	889b      	ldrh	r3, [r3, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d131      	bne.n	800d666 <USBD_SetAddress+0x76>
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	88db      	ldrh	r3, [r3, #6]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d12d      	bne.n	800d666 <USBD_SetAddress+0x76>
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	885b      	ldrh	r3, [r3, #2]
 800d60e:	2b7f      	cmp	r3, #127	; 0x7f
 800d610:	d829      	bhi.n	800d666 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	885b      	ldrh	r3, [r3, #2]
 800d616:	b2db      	uxtb	r3, r3
 800d618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d61c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d624:	b2db      	uxtb	r3, r3
 800d626:	2b03      	cmp	r3, #3
 800d628:	d104      	bne.n	800d634 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d62a:	6839      	ldr	r1, [r7, #0]
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f000 f9bc 	bl	800d9aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d632:	e01d      	b.n	800d670 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7bfa      	ldrb	r2, [r7, #15]
 800d638:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f004 f94b 	bl	80118dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fa7a 	bl	800db40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d64c:	7bfb      	ldrb	r3, [r7, #15]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d004      	beq.n	800d65c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2202      	movs	r2, #2
 800d656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d65a:	e009      	b.n	800d670 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d664:	e004      	b.n	800d670 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d666:	6839      	ldr	r1, [r7, #0]
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 f99e 	bl	800d9aa <USBD_CtlError>
  }
}
 800d66e:	bf00      	nop
 800d670:	bf00      	nop
 800d672:	3710      	adds	r7, #16
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d682:	2300      	movs	r3, #0
 800d684:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	885b      	ldrh	r3, [r3, #2]
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	4b4e      	ldr	r3, [pc, #312]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d68e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d690:	4b4d      	ldr	r3, [pc, #308]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d905      	bls.n	800d6a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 f985 	bl	800d9aa <USBD_CtlError>
    return USBD_FAIL;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	e08c      	b.n	800d7be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d002      	beq.n	800d6b6 <USBD_SetConfig+0x3e>
 800d6b0:	2b03      	cmp	r3, #3
 800d6b2:	d029      	beq.n	800d708 <USBD_SetConfig+0x90>
 800d6b4:	e075      	b.n	800d7a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d6b6:	4b44      	ldr	r3, [pc, #272]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d020      	beq.n	800d700 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d6be:	4b42      	ldr	r3, [pc, #264]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d6c8:	4b3f      	ldr	r3, [pc, #252]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7fe ffe7 	bl	800c6a2 <USBD_SetClassConfig>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d6d8:	7bfb      	ldrb	r3, [r7, #15]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d008      	beq.n	800d6f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 f962 	bl	800d9aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2202      	movs	r2, #2
 800d6ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d6ee:	e065      	b.n	800d7bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 fa25 	bl	800db40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2203      	movs	r2, #3
 800d6fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d6fe:	e05d      	b.n	800d7bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 fa1d 	bl	800db40 <USBD_CtlSendStatus>
      break;
 800d706:	e059      	b.n	800d7bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d708:	4b2f      	ldr	r3, [pc, #188]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d112      	bne.n	800d736 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2202      	movs	r2, #2
 800d714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d718:	4b2b      	ldr	r3, [pc, #172]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	461a      	mov	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d722:	4b29      	ldr	r3, [pc, #164]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	4619      	mov	r1, r3
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f7fe ffd6 	bl	800c6da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fa06 	bl	800db40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d734:	e042      	b.n	800d7bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d736:	4b24      	ldr	r3, [pc, #144]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	461a      	mov	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	429a      	cmp	r2, r3
 800d742:	d02a      	beq.n	800d79a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	4619      	mov	r1, r3
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f7fe ffc4 	bl	800c6da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d752:	4b1d      	ldr	r3, [pc, #116]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d75c:	4b1a      	ldr	r3, [pc, #104]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	4619      	mov	r1, r3
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7fe ff9d 	bl	800c6a2 <USBD_SetClassConfig>
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00f      	beq.n	800d792 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d772:	6839      	ldr	r1, [r7, #0]
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 f918 	bl	800d9aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	4619      	mov	r1, r3
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7fe ffa9 	bl	800c6da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2202      	movs	r2, #2
 800d78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d790:	e014      	b.n	800d7bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f9d4 	bl	800db40 <USBD_CtlSendStatus>
      break;
 800d798:	e010      	b.n	800d7bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 f9d0 	bl	800db40 <USBD_CtlSendStatus>
      break;
 800d7a0:	e00c      	b.n	800d7bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d7a2:	6839      	ldr	r1, [r7, #0]
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 f900 	bl	800d9aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d7aa:	4b07      	ldr	r3, [pc, #28]	; (800d7c8 <USBD_SetConfig+0x150>)
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7fe ff92 	bl	800c6da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d7b6:	2303      	movs	r3, #3
 800d7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ba:	bf00      	nop
  }

  return ret;
 800d7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	20001654 	.word	0x20001654

0800d7cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	88db      	ldrh	r3, [r3, #6]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d004      	beq.n	800d7e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 f8e2 	bl	800d9aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d7e6:	e023      	b.n	800d830 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	dc02      	bgt.n	800d7fa <USBD_GetConfig+0x2e>
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	dc03      	bgt.n	800d800 <USBD_GetConfig+0x34>
 800d7f8:	e015      	b.n	800d826 <USBD_GetConfig+0x5a>
 800d7fa:	2b03      	cmp	r3, #3
 800d7fc:	d00b      	beq.n	800d816 <USBD_GetConfig+0x4a>
 800d7fe:	e012      	b.n	800d826 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	3308      	adds	r3, #8
 800d80a:	2201      	movs	r2, #1
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f93c 	bl	800da8c <USBD_CtlSendData>
        break;
 800d814:	e00c      	b.n	800d830 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	3304      	adds	r3, #4
 800d81a:	2201      	movs	r2, #1
 800d81c:	4619      	mov	r1, r3
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f934 	bl	800da8c <USBD_CtlSendData>
        break;
 800d824:	e004      	b.n	800d830 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d826:	6839      	ldr	r1, [r7, #0]
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f8be 	bl	800d9aa <USBD_CtlError>
        break;
 800d82e:	bf00      	nop
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	3b01      	subs	r3, #1
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d81e      	bhi.n	800d88e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	88db      	ldrh	r3, [r3, #6]
 800d854:	2b02      	cmp	r3, #2
 800d856:	d004      	beq.n	800d862 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d858:	6839      	ldr	r1, [r7, #0]
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f8a5 	bl	800d9aa <USBD_CtlError>
        break;
 800d860:	e01a      	b.n	800d898 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2201      	movs	r2, #1
 800d866:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d005      	beq.n	800d87e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	f043 0202 	orr.w	r2, r3, #2
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	330c      	adds	r3, #12
 800d882:	2202      	movs	r2, #2
 800d884:	4619      	mov	r1, r3
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f900 	bl	800da8c <USBD_CtlSendData>
      break;
 800d88c:	e004      	b.n	800d898 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f88a 	bl	800d9aa <USBD_CtlError>
      break;
 800d896:	bf00      	nop
  }
}
 800d898:	bf00      	nop
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	885b      	ldrh	r3, [r3, #2]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d107      	bne.n	800d8c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f940 	bl	800db40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d8c0:	e013      	b.n	800d8ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	885b      	ldrh	r3, [r3, #2]
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d10b      	bne.n	800d8e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	889b      	ldrh	r3, [r3, #4]
 800d8ce:	0a1b      	lsrs	r3, r3, #8
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	b2da      	uxtb	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 f930 	bl	800db40 <USBD_CtlSendStatus>
}
 800d8e0:	e003      	b.n	800d8ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d8e2:	6839      	ldr	r1, [r7, #0]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f860 	bl	800d9aa <USBD_CtlError>
}
 800d8ea:	bf00      	nop
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b082      	sub	sp, #8
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d902:	b2db      	uxtb	r3, r3
 800d904:	3b01      	subs	r3, #1
 800d906:	2b02      	cmp	r3, #2
 800d908:	d80b      	bhi.n	800d922 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	885b      	ldrh	r3, [r3, #2]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d10c      	bne.n	800d92c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 f910 	bl	800db40 <USBD_CtlSendStatus>
      }
      break;
 800d920:	e004      	b.n	800d92c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d922:	6839      	ldr	r1, [r7, #0]
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 f840 	bl	800d9aa <USBD_CtlError>
      break;
 800d92a:	e000      	b.n	800d92e <USBD_ClrFeature+0x3c>
      break;
 800d92c:	bf00      	nop
  }
}
 800d92e:	bf00      	nop
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b084      	sub	sp, #16
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	781a      	ldrb	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	3301      	adds	r3, #1
 800d950:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	781a      	ldrb	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	3301      	adds	r3, #1
 800d95e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f7ff fa41 	bl	800cde8 <SWAPBYTE>
 800d966:	4603      	mov	r3, r0
 800d968:	461a      	mov	r2, r3
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	3301      	adds	r3, #1
 800d972:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3301      	adds	r3, #1
 800d978:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f7ff fa34 	bl	800cde8 <SWAPBYTE>
 800d980:	4603      	mov	r3, r0
 800d982:	461a      	mov	r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	3301      	adds	r3, #1
 800d98c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	3301      	adds	r3, #1
 800d992:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	f7ff fa27 	bl	800cde8 <SWAPBYTE>
 800d99a:	4603      	mov	r3, r0
 800d99c:	461a      	mov	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	80da      	strh	r2, [r3, #6]
}
 800d9a2:	bf00      	nop
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b082      	sub	sp, #8
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
 800d9b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9b4:	2180      	movs	r1, #128	; 0x80
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f003 ff26 	bl	8011808 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d9bc:	2100      	movs	r1, #0
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f003 ff22 	bl	8011808 <USBD_LL_StallEP>
}
 800d9c4:	bf00      	nop
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b086      	sub	sp, #24
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d036      	beq.n	800da50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d9e6:	6938      	ldr	r0, [r7, #16]
 800d9e8:	f000 f836 	bl	800da58 <USBD_GetLen>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	005b      	lsls	r3, r3, #1
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d9fa:	7dfb      	ldrb	r3, [r7, #23]
 800d9fc:	68ba      	ldr	r2, [r7, #8]
 800d9fe:	4413      	add	r3, r2
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	7812      	ldrb	r2, [r2, #0]
 800da04:	701a      	strb	r2, [r3, #0]
  idx++;
 800da06:	7dfb      	ldrb	r3, [r7, #23]
 800da08:	3301      	adds	r3, #1
 800da0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800da0c:	7dfb      	ldrb	r3, [r7, #23]
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	4413      	add	r3, r2
 800da12:	2203      	movs	r2, #3
 800da14:	701a      	strb	r2, [r3, #0]
  idx++;
 800da16:	7dfb      	ldrb	r3, [r7, #23]
 800da18:	3301      	adds	r3, #1
 800da1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800da1c:	e013      	b.n	800da46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800da1e:	7dfb      	ldrb	r3, [r7, #23]
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	4413      	add	r3, r2
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	7812      	ldrb	r2, [r2, #0]
 800da28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	3301      	adds	r3, #1
 800da2e:	613b      	str	r3, [r7, #16]
    idx++;
 800da30:	7dfb      	ldrb	r3, [r7, #23]
 800da32:	3301      	adds	r3, #1
 800da34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800da36:	7dfb      	ldrb	r3, [r7, #23]
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	4413      	add	r3, r2
 800da3c:	2200      	movs	r2, #0
 800da3e:	701a      	strb	r2, [r3, #0]
    idx++;
 800da40:	7dfb      	ldrb	r3, [r7, #23]
 800da42:	3301      	adds	r3, #1
 800da44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1e7      	bne.n	800da1e <USBD_GetString+0x52>
 800da4e:	e000      	b.n	800da52 <USBD_GetString+0x86>
    return;
 800da50:	bf00      	nop
  }
}
 800da52:	3718      	adds	r7, #24
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da58:	b480      	push	{r7}
 800da5a:	b085      	sub	sp, #20
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800da60:	2300      	movs	r3, #0
 800da62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800da68:	e005      	b.n	800da76 <USBD_GetLen+0x1e>
  {
    len++;
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
 800da6c:	3301      	adds	r3, #1
 800da6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	3301      	adds	r3, #1
 800da74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1f5      	bne.n	800da6a <USBD_GetLen+0x12>
  }

  return len;
 800da7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3714      	adds	r7, #20
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2202      	movs	r2, #2
 800da9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	68ba      	ldr	r2, [r7, #8]
 800dab0:	2100      	movs	r1, #0
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f003 ff31 	bl	801191a <USBD_LL_Transmit>

  return USBD_OK;
 800dab8:	2300      	movs	r3, #0
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	60b9      	str	r1, [r7, #8]
 800dacc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	2100      	movs	r1, #0
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f003 ff20 	bl	801191a <USBD_LL_Transmit>

  return USBD_OK;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3710      	adds	r7, #16
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2203      	movs	r2, #3
 800daf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	2100      	movs	r1, #0
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f003 ff24 	bl	801195c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db14:	2300      	movs	r3, #0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b084      	sub	sp, #16
 800db22:	af00      	add	r7, sp, #0
 800db24:	60f8      	str	r0, [r7, #12]
 800db26:	60b9      	str	r1, [r7, #8]
 800db28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	2100      	movs	r1, #0
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f003 ff13 	bl	801195c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2204      	movs	r2, #4
 800db4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800db50:	2300      	movs	r3, #0
 800db52:	2200      	movs	r2, #0
 800db54:	2100      	movs	r1, #0
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f003 fedf 	bl	801191a <USBD_LL_Transmit>

  return USBD_OK;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3708      	adds	r7, #8
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b082      	sub	sp, #8
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2205      	movs	r2, #5
 800db72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db76:	2300      	movs	r3, #0
 800db78:	2200      	movs	r2, #0
 800db7a:	2100      	movs	r1, #0
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f003 feed 	bl	801195c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db82:	2300      	movs	r3, #0
}
 800db84:	4618      	mov	r0, r3
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <__NVIC_SetPriority>:
{
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	4603      	mov	r3, r0
 800db94:	6039      	str	r1, [r7, #0]
 800db96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	db0a      	blt.n	800dbb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	490c      	ldr	r1, [pc, #48]	; (800dbd8 <__NVIC_SetPriority+0x4c>)
 800dba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbaa:	0112      	lsls	r2, r2, #4
 800dbac:	b2d2      	uxtb	r2, r2
 800dbae:	440b      	add	r3, r1
 800dbb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dbb4:	e00a      	b.n	800dbcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	4908      	ldr	r1, [pc, #32]	; (800dbdc <__NVIC_SetPriority+0x50>)
 800dbbc:	79fb      	ldrb	r3, [r7, #7]
 800dbbe:	f003 030f 	and.w	r3, r3, #15
 800dbc2:	3b04      	subs	r3, #4
 800dbc4:	0112      	lsls	r2, r2, #4
 800dbc6:	b2d2      	uxtb	r2, r2
 800dbc8:	440b      	add	r3, r1
 800dbca:	761a      	strb	r2, [r3, #24]
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr
 800dbd8:	e000e100 	.word	0xe000e100
 800dbdc:	e000ed00 	.word	0xe000ed00

0800dbe0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dbe4:	4b05      	ldr	r3, [pc, #20]	; (800dbfc <SysTick_Handler+0x1c>)
 800dbe6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dbe8:	f002 f900 	bl	800fdec <xTaskGetSchedulerState>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d001      	beq.n	800dbf6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dbf2:	f002 ffa1 	bl	8010b38 <xPortSysTickHandler>
  }
}
 800dbf6:	bf00      	nop
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	e000e010 	.word	0xe000e010

0800dc00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dc00:	b580      	push	{r7, lr}
 800dc02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dc04:	2100      	movs	r1, #0
 800dc06:	f06f 0004 	mvn.w	r0, #4
 800dc0a:	f7ff ffbf 	bl	800db8c <__NVIC_SetPriority>
#endif
}
 800dc0e:	bf00      	nop
 800dc10:	bd80      	pop	{r7, pc}
	...

0800dc14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc1a:	f3ef 8305 	mrs	r3, IPSR
 800dc1e:	603b      	str	r3, [r7, #0]
  return(result);
 800dc20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d003      	beq.n	800dc2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dc26:	f06f 0305 	mvn.w	r3, #5
 800dc2a:	607b      	str	r3, [r7, #4]
 800dc2c:	e00c      	b.n	800dc48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dc2e:	4b0a      	ldr	r3, [pc, #40]	; (800dc58 <osKernelInitialize+0x44>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d105      	bne.n	800dc42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc36:	4b08      	ldr	r3, [pc, #32]	; (800dc58 <osKernelInitialize+0x44>)
 800dc38:	2201      	movs	r2, #1
 800dc3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	607b      	str	r3, [r7, #4]
 800dc40:	e002      	b.n	800dc48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dc42:	f04f 33ff 	mov.w	r3, #4294967295
 800dc46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc48:	687b      	ldr	r3, [r7, #4]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	20001658 	.word	0x20001658

0800dc5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc62:	f3ef 8305 	mrs	r3, IPSR
 800dc66:	603b      	str	r3, [r7, #0]
  return(result);
 800dc68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d003      	beq.n	800dc76 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dc6e:	f06f 0305 	mvn.w	r3, #5
 800dc72:	607b      	str	r3, [r7, #4]
 800dc74:	e010      	b.n	800dc98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc76:	4b0b      	ldr	r3, [pc, #44]	; (800dca4 <osKernelStart+0x48>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d109      	bne.n	800dc92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc7e:	f7ff ffbf 	bl	800dc00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc82:	4b08      	ldr	r3, [pc, #32]	; (800dca4 <osKernelStart+0x48>)
 800dc84:	2202      	movs	r2, #2
 800dc86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc88:	f001 fad0 	bl	800f22c <vTaskStartScheduler>
      stat = osOK;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	607b      	str	r3, [r7, #4]
 800dc90:	e002      	b.n	800dc98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dc92:	f04f 33ff 	mov.w	r3, #4294967295
 800dc96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc98:	687b      	ldr	r3, [r7, #4]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3708      	adds	r7, #8
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	20001658 	.word	0x20001658

0800dca8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b08e      	sub	sp, #56	; 0x38
 800dcac:	af04      	add	r7, sp, #16
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcb8:	f3ef 8305 	mrs	r3, IPSR
 800dcbc:	617b      	str	r3, [r7, #20]
  return(result);
 800dcbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d17e      	bne.n	800ddc2 <osThreadNew+0x11a>
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d07b      	beq.n	800ddc2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dcca:	2380      	movs	r3, #128	; 0x80
 800dccc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dcce:	2318      	movs	r3, #24
 800dcd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dcd6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d045      	beq.n	800dd6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d002      	beq.n	800dcf0 <osThreadNew+0x48>
        name = attr->name;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	699b      	ldr	r3, [r3, #24]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	699b      	ldr	r3, [r3, #24]
 800dcfc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d008      	beq.n	800dd16 <osThreadNew+0x6e>
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	2b38      	cmp	r3, #56	; 0x38
 800dd08:	d805      	bhi.n	800dd16 <osThreadNew+0x6e>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <osThreadNew+0x72>
        return (NULL);
 800dd16:	2300      	movs	r3, #0
 800dd18:	e054      	b.n	800ddc4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d003      	beq.n	800dd2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	089b      	lsrs	r3, r3, #2
 800dd28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00e      	beq.n	800dd50 <osThreadNew+0xa8>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	2bbf      	cmp	r3, #191	; 0xbf
 800dd38:	d90a      	bls.n	800dd50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d006      	beq.n	800dd50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	695b      	ldr	r3, [r3, #20]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d002      	beq.n	800dd50 <osThreadNew+0xa8>
        mem = 1;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	61bb      	str	r3, [r7, #24]
 800dd4e:	e010      	b.n	800dd72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10c      	bne.n	800dd72 <osThreadNew+0xca>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d108      	bne.n	800dd72 <osThreadNew+0xca>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d104      	bne.n	800dd72 <osThreadNew+0xca>
          mem = 0;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	61bb      	str	r3, [r7, #24]
 800dd6c:	e001      	b.n	800dd72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d110      	bne.n	800dd9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd80:	9202      	str	r2, [sp, #8]
 800dd82:	9301      	str	r3, [sp, #4]
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	6a3a      	ldr	r2, [r7, #32]
 800dd8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd8e:	68f8      	ldr	r0, [r7, #12]
 800dd90:	f000 fff6 	bl	800ed80 <xTaskCreateStatic>
 800dd94:	4603      	mov	r3, r0
 800dd96:	613b      	str	r3, [r7, #16]
 800dd98:	e013      	b.n	800ddc2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d110      	bne.n	800ddc2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	f107 0310 	add.w	r3, r7, #16
 800dda8:	9301      	str	r3, [sp, #4]
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f001 f841 	bl	800ee3a <xTaskCreate>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d001      	beq.n	800ddc2 <osThreadNew+0x11a>
            hTask = NULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ddc2:	693b      	ldr	r3, [r7, #16]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3728      	adds	r7, #40	; 0x28
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddd4:	f3ef 8305 	mrs	r3, IPSR
 800ddd8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddda:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d003      	beq.n	800dde8 <osDelay+0x1c>
    stat = osErrorISR;
 800dde0:	f06f 0305 	mvn.w	r3, #5
 800dde4:	60fb      	str	r3, [r7, #12]
 800dde6:	e007      	b.n	800ddf8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dde8:	2300      	movs	r3, #0
 800ddea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d002      	beq.n	800ddf8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f001 f980 	bl	800f0f8 <vTaskDelay>
    }
  }

  return (stat);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800de02:	b580      	push	{r7, lr}
 800de04:	b08a      	sub	sp, #40	; 0x28
 800de06:	af02      	add	r7, sp, #8
 800de08:	60f8      	str	r0, [r7, #12]
 800de0a:	60b9      	str	r1, [r7, #8]
 800de0c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800de0e:	2300      	movs	r3, #0
 800de10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de12:	f3ef 8305 	mrs	r3, IPSR
 800de16:	613b      	str	r3, [r7, #16]
  return(result);
 800de18:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d15f      	bne.n	800dede <osMessageQueueNew+0xdc>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d05c      	beq.n	800dede <osMessageQueueNew+0xdc>
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d059      	beq.n	800dede <osMessageQueueNew+0xdc>
    mem = -1;
 800de2a:	f04f 33ff 	mov.w	r3, #4294967295
 800de2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d029      	beq.n	800de8a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d012      	beq.n	800de64 <osMessageQueueNew+0x62>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	2b4f      	cmp	r3, #79	; 0x4f
 800de44:	d90e      	bls.n	800de64 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d00a      	beq.n	800de64 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	695a      	ldr	r2, [r3, #20]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	68b9      	ldr	r1, [r7, #8]
 800de56:	fb01 f303 	mul.w	r3, r1, r3
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d302      	bcc.n	800de64 <osMessageQueueNew+0x62>
        mem = 1;
 800de5e:	2301      	movs	r3, #1
 800de60:	61bb      	str	r3, [r7, #24]
 800de62:	e014      	b.n	800de8e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d110      	bne.n	800de8e <osMessageQueueNew+0x8c>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10c      	bne.n	800de8e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d108      	bne.n	800de8e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	695b      	ldr	r3, [r3, #20]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d104      	bne.n	800de8e <osMessageQueueNew+0x8c>
          mem = 0;
 800de84:	2300      	movs	r3, #0
 800de86:	61bb      	str	r3, [r7, #24]
 800de88:	e001      	b.n	800de8e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800de8a:	2300      	movs	r3, #0
 800de8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	2b01      	cmp	r3, #1
 800de92:	d10b      	bne.n	800deac <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	691a      	ldr	r2, [r3, #16]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	2100      	movs	r1, #0
 800de9e:	9100      	str	r1, [sp, #0]
 800dea0:	68b9      	ldr	r1, [r7, #8]
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f000 fa2e 	bl	800e304 <xQueueGenericCreateStatic>
 800dea8:	61f8      	str	r0, [r7, #28]
 800deaa:	e008      	b.n	800debe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d105      	bne.n	800debe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800deb2:	2200      	movs	r2, #0
 800deb4:	68b9      	ldr	r1, [r7, #8]
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f000 fa9c 	bl	800e3f4 <xQueueGenericCreate>
 800debc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00c      	beq.n	800dede <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d003      	beq.n	800ded2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	617b      	str	r3, [r7, #20]
 800ded0:	e001      	b.n	800ded6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ded6:	6979      	ldr	r1, [r7, #20]
 800ded8:	69f8      	ldr	r0, [r7, #28]
 800deda:	f000 fef3 	bl	800ecc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dede:	69fb      	ldr	r3, [r7, #28]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3720      	adds	r7, #32
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	603b      	str	r3, [r7, #0]
 800def4:	4613      	mov	r3, r2
 800def6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800defc:	2300      	movs	r3, #0
 800defe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df00:	f3ef 8305 	mrs	r3, IPSR
 800df04:	617b      	str	r3, [r7, #20]
  return(result);
 800df06:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d028      	beq.n	800df5e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d005      	beq.n	800df1e <osMessageQueuePut+0x36>
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d002      	beq.n	800df1e <osMessageQueuePut+0x36>
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d003      	beq.n	800df26 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800df1e:	f06f 0303 	mvn.w	r3, #3
 800df22:	61fb      	str	r3, [r7, #28]
 800df24:	e038      	b.n	800df98 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800df26:	2300      	movs	r3, #0
 800df28:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800df2a:	f107 0210 	add.w	r2, r7, #16
 800df2e:	2300      	movs	r3, #0
 800df30:	68b9      	ldr	r1, [r7, #8]
 800df32:	69b8      	ldr	r0, [r7, #24]
 800df34:	f000 fbba 	bl	800e6ac <xQueueGenericSendFromISR>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d003      	beq.n	800df46 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800df3e:	f06f 0302 	mvn.w	r3, #2
 800df42:	61fb      	str	r3, [r7, #28]
 800df44:	e028      	b.n	800df98 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d025      	beq.n	800df98 <osMessageQueuePut+0xb0>
 800df4c:	4b15      	ldr	r3, [pc, #84]	; (800dfa4 <osMessageQueuePut+0xbc>)
 800df4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	e01c      	b.n	800df98 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <osMessageQueuePut+0x82>
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d103      	bne.n	800df72 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800df6a:	f06f 0303 	mvn.w	r3, #3
 800df6e:	61fb      	str	r3, [r7, #28]
 800df70:	e012      	b.n	800df98 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800df72:	2300      	movs	r3, #0
 800df74:	683a      	ldr	r2, [r7, #0]
 800df76:	68b9      	ldr	r1, [r7, #8]
 800df78:	69b8      	ldr	r0, [r7, #24]
 800df7a:	f000 fa99 	bl	800e4b0 <xQueueGenericSend>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b01      	cmp	r3, #1
 800df82:	d009      	beq.n	800df98 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d003      	beq.n	800df92 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800df8a:	f06f 0301 	mvn.w	r3, #1
 800df8e:	61fb      	str	r3, [r7, #28]
 800df90:	e002      	b.n	800df98 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800df92:	f06f 0302 	mvn.w	r3, #2
 800df96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800df98:	69fb      	ldr	r3, [r7, #28]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3720      	adds	r7, #32
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	e000ed04 	.word	0xe000ed04

0800dfa8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b088      	sub	sp, #32
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
 800dfb4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfbe:	f3ef 8305 	mrs	r3, IPSR
 800dfc2:	617b      	str	r3, [r7, #20]
  return(result);
 800dfc4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d028      	beq.n	800e01c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d005      	beq.n	800dfdc <osMessageQueueGet+0x34>
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d002      	beq.n	800dfdc <osMessageQueueGet+0x34>
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d003      	beq.n	800dfe4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dfdc:	f06f 0303 	mvn.w	r3, #3
 800dfe0:	61fb      	str	r3, [r7, #28]
 800dfe2:	e037      	b.n	800e054 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dfe8:	f107 0310 	add.w	r3, r7, #16
 800dfec:	461a      	mov	r2, r3
 800dfee:	68b9      	ldr	r1, [r7, #8]
 800dff0:	69b8      	ldr	r0, [r7, #24]
 800dff2:	f000 fcd7 	bl	800e9a4 <xQueueReceiveFromISR>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d003      	beq.n	800e004 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dffc:	f06f 0302 	mvn.w	r3, #2
 800e000:	61fb      	str	r3, [r7, #28]
 800e002:	e027      	b.n	800e054 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d024      	beq.n	800e054 <osMessageQueueGet+0xac>
 800e00a:	4b15      	ldr	r3, [pc, #84]	; (800e060 <osMessageQueueGet+0xb8>)
 800e00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e010:	601a      	str	r2, [r3, #0]
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	e01b      	b.n	800e054 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d002      	beq.n	800e028 <osMessageQueueGet+0x80>
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d103      	bne.n	800e030 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e028:	f06f 0303 	mvn.w	r3, #3
 800e02c:	61fb      	str	r3, [r7, #28]
 800e02e:	e011      	b.n	800e054 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	68b9      	ldr	r1, [r7, #8]
 800e034:	69b8      	ldr	r0, [r7, #24]
 800e036:	f000 fbd5 	bl	800e7e4 <xQueueReceive>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d009      	beq.n	800e054 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d003      	beq.n	800e04e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e046:	f06f 0301 	mvn.w	r3, #1
 800e04a:	61fb      	str	r3, [r7, #28]
 800e04c:	e002      	b.n	800e054 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e04e:	f06f 0302 	mvn.w	r3, #2
 800e052:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e054:	69fb      	ldr	r3, [r7, #28]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3720      	adds	r7, #32
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	e000ed04 	.word	0xe000ed04

0800e064 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	4a07      	ldr	r2, [pc, #28]	; (800e090 <vApplicationGetIdleTaskMemory+0x2c>)
 800e074:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	4a06      	ldr	r2, [pc, #24]	; (800e094 <vApplicationGetIdleTaskMemory+0x30>)
 800e07a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2280      	movs	r2, #128	; 0x80
 800e080:	601a      	str	r2, [r3, #0]
}
 800e082:	bf00      	nop
 800e084:	3714      	adds	r7, #20
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	2000165c 	.word	0x2000165c
 800e094:	2000171c 	.word	0x2000171c

0800e098 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	4a07      	ldr	r2, [pc, #28]	; (800e0c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800e0a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	4a06      	ldr	r2, [pc, #24]	; (800e0c8 <vApplicationGetTimerTaskMemory+0x30>)
 800e0ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e0b6:	601a      	str	r2, [r3, #0]
}
 800e0b8:	bf00      	nop
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	2000191c 	.word	0x2000191c
 800e0c8:	200019dc 	.word	0x200019dc

0800e0cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f103 0208 	add.w	r2, r3, #8
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f103 0208 	add.w	r2, r3, #8
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f103 0208 	add.w	r2, r3, #8
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e11a:	bf00      	nop
 800e11c:	370c      	adds	r7, #12
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr

0800e126 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e126:	b480      	push	{r7}
 800e128:	b085      	sub	sp, #20
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
 800e12e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	689a      	ldr	r2, [r3, #8]
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	683a      	ldr	r2, [r7, #0]
 800e150:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	1c5a      	adds	r2, r3, #1
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	601a      	str	r2, [r3, #0]
}
 800e162:	bf00      	nop
 800e164:	3714      	adds	r7, #20
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr

0800e16e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e16e:	b480      	push	{r7}
 800e170:	b085      	sub	sp, #20
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e184:	d103      	bne.n	800e18e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	691b      	ldr	r3, [r3, #16]
 800e18a:	60fb      	str	r3, [r7, #12]
 800e18c:	e00c      	b.n	800e1a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	3308      	adds	r3, #8
 800e192:	60fb      	str	r3, [r7, #12]
 800e194:	e002      	b.n	800e19c <vListInsert+0x2e>
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	60fb      	str	r3, [r7, #12]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	68ba      	ldr	r2, [r7, #8]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d2f6      	bcs.n	800e196 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	683a      	ldr	r2, [r7, #0]
 800e1b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	683a      	ldr	r2, [r7, #0]
 800e1c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	1c5a      	adds	r2, r3, #1
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	601a      	str	r2, [r3, #0]
}
 800e1d4:	bf00      	nop
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	691b      	ldr	r3, [r3, #16]
 800e1ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	6892      	ldr	r2, [r2, #8]
 800e1f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	6852      	ldr	r2, [r2, #4]
 800e200:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d103      	bne.n	800e214 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	1e5a      	subs	r2, r3, #1
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d10a      	bne.n	800e25e <xQueueGenericReset+0x2a>
	__asm volatile
 800e248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24c:	f383 8811 	msr	BASEPRI, r3
 800e250:	f3bf 8f6f 	isb	sy
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	60bb      	str	r3, [r7, #8]
}
 800e25a:	bf00      	nop
 800e25c:	e7fe      	b.n	800e25c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e25e:	f002 fbd9 	bl	8010a14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e26a:	68f9      	ldr	r1, [r7, #12]
 800e26c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e26e:	fb01 f303 	mul.w	r3, r1, r3
 800e272:	441a      	add	r2, r3
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2200      	movs	r2, #0
 800e27c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e28e:	3b01      	subs	r3, #1
 800e290:	68f9      	ldr	r1, [r7, #12]
 800e292:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e294:	fb01 f303 	mul.w	r3, r1, r3
 800e298:	441a      	add	r2, r3
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	22ff      	movs	r2, #255	; 0xff
 800e2a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	22ff      	movs	r2, #255	; 0xff
 800e2aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d114      	bne.n	800e2de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d01a      	beq.n	800e2f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	3310      	adds	r3, #16
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f001 fafb 	bl	800f8bc <xTaskRemoveFromEventList>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d012      	beq.n	800e2f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e2cc:	4b0c      	ldr	r3, [pc, #48]	; (800e300 <xQueueGenericReset+0xcc>)
 800e2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	f3bf 8f6f 	isb	sy
 800e2dc:	e009      	b.n	800e2f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	3310      	adds	r3, #16
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7ff fef2 	bl	800e0cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	3324      	adds	r3, #36	; 0x24
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7ff feed 	bl	800e0cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e2f2:	f002 fbbf 	bl	8010a74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e2f6:	2301      	movs	r3, #1
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3710      	adds	r7, #16
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	e000ed04 	.word	0xe000ed04

0800e304 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e304:	b580      	push	{r7, lr}
 800e306:	b08e      	sub	sp, #56	; 0x38
 800e308:	af02      	add	r7, sp, #8
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	607a      	str	r2, [r7, #4]
 800e310:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10a      	bne.n	800e32e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31c:	f383 8811 	msr	BASEPRI, r3
 800e320:	f3bf 8f6f 	isb	sy
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e32a:	bf00      	nop
 800e32c:	e7fe      	b.n	800e32c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d10a      	bne.n	800e34a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e338:	f383 8811 	msr	BASEPRI, r3
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e346:	bf00      	nop
 800e348:	e7fe      	b.n	800e348 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <xQueueGenericCreateStatic+0x52>
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <xQueueGenericCreateStatic+0x56>
 800e356:	2301      	movs	r3, #1
 800e358:	e000      	b.n	800e35c <xQueueGenericCreateStatic+0x58>
 800e35a:	2300      	movs	r3, #0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d10a      	bne.n	800e376 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	623b      	str	r3, [r7, #32]
}
 800e372:	bf00      	nop
 800e374:	e7fe      	b.n	800e374 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d102      	bne.n	800e382 <xQueueGenericCreateStatic+0x7e>
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d101      	bne.n	800e386 <xQueueGenericCreateStatic+0x82>
 800e382:	2301      	movs	r3, #1
 800e384:	e000      	b.n	800e388 <xQueueGenericCreateStatic+0x84>
 800e386:	2300      	movs	r3, #0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	61fb      	str	r3, [r7, #28]
}
 800e39e:	bf00      	nop
 800e3a0:	e7fe      	b.n	800e3a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e3a2:	2350      	movs	r3, #80	; 0x50
 800e3a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	2b50      	cmp	r3, #80	; 0x50
 800e3aa:	d00a      	beq.n	800e3c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b0:	f383 8811 	msr	BASEPRI, r3
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	61bb      	str	r3, [r7, #24]
}
 800e3be:	bf00      	nop
 800e3c0:	e7fe      	b.n	800e3c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e3c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00d      	beq.n	800e3ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	68b9      	ldr	r1, [r7, #8]
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f000 f83f 	bl	800e468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3730      	adds	r7, #48	; 0x30
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b08a      	sub	sp, #40	; 0x28
 800e3f8:	af02      	add	r7, sp, #8
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	4613      	mov	r3, r2
 800e400:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10a      	bne.n	800e41e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40c:	f383 8811 	msr	BASEPRI, r3
 800e410:	f3bf 8f6f 	isb	sy
 800e414:	f3bf 8f4f 	dsb	sy
 800e418:	613b      	str	r3, [r7, #16]
}
 800e41a:	bf00      	nop
 800e41c:	e7fe      	b.n	800e41c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	fb02 f303 	mul.w	r3, r2, r3
 800e426:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	3350      	adds	r3, #80	; 0x50
 800e42c:	4618      	mov	r0, r3
 800e42e:	f002 fc13 	bl	8010c58 <pvPortMalloc>
 800e432:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d011      	beq.n	800e45e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	3350      	adds	r3, #80	; 0x50
 800e442:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	2200      	movs	r2, #0
 800e448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e44c:	79fa      	ldrb	r2, [r7, #7]
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	4613      	mov	r3, r2
 800e454:	697a      	ldr	r2, [r7, #20]
 800e456:	68b9      	ldr	r1, [r7, #8]
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f000 f805 	bl	800e468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e45e:	69bb      	ldr	r3, [r7, #24]
	}
 800e460:	4618      	mov	r0, r3
 800e462:	3720      	adds	r7, #32
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	607a      	str	r2, [r7, #4]
 800e474:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d103      	bne.n	800e484 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	69ba      	ldr	r2, [r7, #24]
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	e002      	b.n	800e48a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e496:	2101      	movs	r1, #1
 800e498:	69b8      	ldr	r0, [r7, #24]
 800e49a:	f7ff fecb 	bl	800e234 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	78fa      	ldrb	r2, [r7, #3]
 800e4a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e4a6:	bf00      	nop
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
	...

0800e4b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b08e      	sub	sp, #56	; 0x38
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d10a      	bne.n	800e4e2 <xQueueGenericSend+0x32>
	__asm volatile
 800e4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d0:	f383 8811 	msr	BASEPRI, r3
 800e4d4:	f3bf 8f6f 	isb	sy
 800e4d8:	f3bf 8f4f 	dsb	sy
 800e4dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e4de:	bf00      	nop
 800e4e0:	e7fe      	b.n	800e4e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d103      	bne.n	800e4f0 <xQueueGenericSend+0x40>
 800e4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d101      	bne.n	800e4f4 <xQueueGenericSend+0x44>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e000      	b.n	800e4f6 <xQueueGenericSend+0x46>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10a      	bne.n	800e510 <xQueueGenericSend+0x60>
	__asm volatile
 800e4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fe:	f383 8811 	msr	BASEPRI, r3
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e50c:	bf00      	nop
 800e50e:	e7fe      	b.n	800e50e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	2b02      	cmp	r3, #2
 800e514:	d103      	bne.n	800e51e <xQueueGenericSend+0x6e>
 800e516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d101      	bne.n	800e522 <xQueueGenericSend+0x72>
 800e51e:	2301      	movs	r3, #1
 800e520:	e000      	b.n	800e524 <xQueueGenericSend+0x74>
 800e522:	2300      	movs	r3, #0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10a      	bne.n	800e53e <xQueueGenericSend+0x8e>
	__asm volatile
 800e528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52c:	f383 8811 	msr	BASEPRI, r3
 800e530:	f3bf 8f6f 	isb	sy
 800e534:	f3bf 8f4f 	dsb	sy
 800e538:	623b      	str	r3, [r7, #32]
}
 800e53a:	bf00      	nop
 800e53c:	e7fe      	b.n	800e53c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e53e:	f001 fc55 	bl	800fdec <xTaskGetSchedulerState>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d102      	bne.n	800e54e <xQueueGenericSend+0x9e>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d101      	bne.n	800e552 <xQueueGenericSend+0xa2>
 800e54e:	2301      	movs	r3, #1
 800e550:	e000      	b.n	800e554 <xQueueGenericSend+0xa4>
 800e552:	2300      	movs	r3, #0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d10a      	bne.n	800e56e <xQueueGenericSend+0xbe>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55c:	f383 8811 	msr	BASEPRI, r3
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	f3bf 8f4f 	dsb	sy
 800e568:	61fb      	str	r3, [r7, #28]
}
 800e56a:	bf00      	nop
 800e56c:	e7fe      	b.n	800e56c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e56e:	f002 fa51 	bl	8010a14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d302      	bcc.n	800e584 <xQueueGenericSend+0xd4>
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	2b02      	cmp	r3, #2
 800e582:	d129      	bne.n	800e5d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	68b9      	ldr	r1, [r7, #8]
 800e588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e58a:	f000 fa8b 	bl	800eaa4 <prvCopyDataToQueue>
 800e58e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e594:	2b00      	cmp	r3, #0
 800e596:	d010      	beq.n	800e5ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59a:	3324      	adds	r3, #36	; 0x24
 800e59c:	4618      	mov	r0, r3
 800e59e:	f001 f98d 	bl	800f8bc <xTaskRemoveFromEventList>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d013      	beq.n	800e5d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e5a8:	4b3f      	ldr	r3, [pc, #252]	; (800e6a8 <xQueueGenericSend+0x1f8>)
 800e5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ae:	601a      	str	r2, [r3, #0]
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	f3bf 8f6f 	isb	sy
 800e5b8:	e00a      	b.n	800e5d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d007      	beq.n	800e5d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e5c0:	4b39      	ldr	r3, [pc, #228]	; (800e6a8 <xQueueGenericSend+0x1f8>)
 800e5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e5d0:	f002 fa50 	bl	8010a74 <vPortExitCritical>
				return pdPASS;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e063      	b.n	800e6a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d103      	bne.n	800e5e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e5de:	f002 fa49 	bl	8010a74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	e05c      	b.n	800e6a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d106      	bne.n	800e5fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e5ec:	f107 0314 	add.w	r3, r7, #20
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f001 f9c7 	bl	800f984 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5fa:	f002 fa3b 	bl	8010a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5fe:	f000 fe87 	bl	800f310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e602:	f002 fa07 	bl	8010a14 <vPortEnterCritical>
 800e606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e60c:	b25b      	sxtb	r3, r3
 800e60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e612:	d103      	bne.n	800e61c <xQueueGenericSend+0x16c>
 800e614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e616:	2200      	movs	r2, #0
 800e618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e622:	b25b      	sxtb	r3, r3
 800e624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e628:	d103      	bne.n	800e632 <xQueueGenericSend+0x182>
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	2200      	movs	r2, #0
 800e62e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e632:	f002 fa1f 	bl	8010a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e636:	1d3a      	adds	r2, r7, #4
 800e638:	f107 0314 	add.w	r3, r7, #20
 800e63c:	4611      	mov	r1, r2
 800e63e:	4618      	mov	r0, r3
 800e640:	f001 f9b6 	bl	800f9b0 <xTaskCheckForTimeOut>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d124      	bne.n	800e694 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e64a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e64c:	f000 fb22 	bl	800ec94 <prvIsQueueFull>
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d018      	beq.n	800e688 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e658:	3310      	adds	r3, #16
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	4611      	mov	r1, r2
 800e65e:	4618      	mov	r0, r3
 800e660:	f001 f8dc 	bl	800f81c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e666:	f000 faad 	bl	800ebc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e66a:	f000 fe5f 	bl	800f32c <xTaskResumeAll>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	f47f af7c 	bne.w	800e56e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e676:	4b0c      	ldr	r3, [pc, #48]	; (800e6a8 <xQueueGenericSend+0x1f8>)
 800e678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e67c:	601a      	str	r2, [r3, #0]
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	f3bf 8f6f 	isb	sy
 800e686:	e772      	b.n	800e56e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e68a:	f000 fa9b 	bl	800ebc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e68e:	f000 fe4d 	bl	800f32c <xTaskResumeAll>
 800e692:	e76c      	b.n	800e56e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e696:	f000 fa95 	bl	800ebc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e69a:	f000 fe47 	bl	800f32c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e69e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3738      	adds	r7, #56	; 0x38
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	e000ed04 	.word	0xe000ed04

0800e6ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b090      	sub	sp, #64	; 0x40
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	607a      	str	r2, [r7, #4]
 800e6b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d10a      	bne.n	800e6da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c8:	f383 8811 	msr	BASEPRI, r3
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e6d6:	bf00      	nop
 800e6d8:	e7fe      	b.n	800e6d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d103      	bne.n	800e6e8 <xQueueGenericSendFromISR+0x3c>
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d101      	bne.n	800e6ec <xQueueGenericSendFromISR+0x40>
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e000      	b.n	800e6ee <xQueueGenericSendFromISR+0x42>
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d10a      	bne.n	800e708 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f6:	f383 8811 	msr	BASEPRI, r3
 800e6fa:	f3bf 8f6f 	isb	sy
 800e6fe:	f3bf 8f4f 	dsb	sy
 800e702:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e704:	bf00      	nop
 800e706:	e7fe      	b.n	800e706 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d103      	bne.n	800e716 <xQueueGenericSendFromISR+0x6a>
 800e70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e712:	2b01      	cmp	r3, #1
 800e714:	d101      	bne.n	800e71a <xQueueGenericSendFromISR+0x6e>
 800e716:	2301      	movs	r3, #1
 800e718:	e000      	b.n	800e71c <xQueueGenericSendFromISR+0x70>
 800e71a:	2300      	movs	r3, #0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10a      	bne.n	800e736 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	623b      	str	r3, [r7, #32]
}
 800e732:	bf00      	nop
 800e734:	e7fe      	b.n	800e734 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e736:	f002 fa4f 	bl	8010bd8 <vPortValidateInterruptPriority>
	__asm volatile
 800e73a:	f3ef 8211 	mrs	r2, BASEPRI
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	61fa      	str	r2, [r7, #28]
 800e750:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e752:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e754:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e75e:	429a      	cmp	r2, r3
 800e760:	d302      	bcc.n	800e768 <xQueueGenericSendFromISR+0xbc>
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	2b02      	cmp	r3, #2
 800e766:	d12f      	bne.n	800e7c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e776:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e778:	683a      	ldr	r2, [r7, #0]
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e77e:	f000 f991 	bl	800eaa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e782:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e78a:	d112      	bne.n	800e7b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e790:	2b00      	cmp	r3, #0
 800e792:	d016      	beq.n	800e7c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e796:	3324      	adds	r3, #36	; 0x24
 800e798:	4618      	mov	r0, r3
 800e79a:	f001 f88f 	bl	800f8bc <xTaskRemoveFromEventList>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00e      	beq.n	800e7c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00b      	beq.n	800e7c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	601a      	str	r2, [r3, #0]
 800e7b0:	e007      	b.n	800e7c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e7b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	b25a      	sxtb	r2, r3
 800e7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e7c6:	e001      	b.n	800e7cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ce:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	f383 8811 	msr	BASEPRI, r3
}
 800e7d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3740      	adds	r7, #64	; 0x40
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
	...

0800e7e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b08c      	sub	sp, #48	; 0x30
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10a      	bne.n	800e814 <xQueueReceive+0x30>
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	623b      	str	r3, [r7, #32]
}
 800e810:	bf00      	nop
 800e812:	e7fe      	b.n	800e812 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d103      	bne.n	800e822 <xQueueReceive+0x3e>
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d101      	bne.n	800e826 <xQueueReceive+0x42>
 800e822:	2301      	movs	r3, #1
 800e824:	e000      	b.n	800e828 <xQueueReceive+0x44>
 800e826:	2300      	movs	r3, #0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d10a      	bne.n	800e842 <xQueueReceive+0x5e>
	__asm volatile
 800e82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	61fb      	str	r3, [r7, #28]
}
 800e83e:	bf00      	nop
 800e840:	e7fe      	b.n	800e840 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e842:	f001 fad3 	bl	800fdec <xTaskGetSchedulerState>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d102      	bne.n	800e852 <xQueueReceive+0x6e>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d101      	bne.n	800e856 <xQueueReceive+0x72>
 800e852:	2301      	movs	r3, #1
 800e854:	e000      	b.n	800e858 <xQueueReceive+0x74>
 800e856:	2300      	movs	r3, #0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d10a      	bne.n	800e872 <xQueueReceive+0x8e>
	__asm volatile
 800e85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e860:	f383 8811 	msr	BASEPRI, r3
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	f3bf 8f4f 	dsb	sy
 800e86c:	61bb      	str	r3, [r7, #24]
}
 800e86e:	bf00      	nop
 800e870:	e7fe      	b.n	800e870 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e872:	f002 f8cf 	bl	8010a14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d01f      	beq.n	800e8c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e882:	68b9      	ldr	r1, [r7, #8]
 800e884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e886:	f000 f977 	bl	800eb78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	1e5a      	subs	r2, r3, #1
 800e88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e890:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00f      	beq.n	800e8ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89c:	3310      	adds	r3, #16
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f001 f80c 	bl	800f8bc <xTaskRemoveFromEventList>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d007      	beq.n	800e8ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e8aa:	4b3d      	ldr	r3, [pc, #244]	; (800e9a0 <xQueueReceive+0x1bc>)
 800e8ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8b0:	601a      	str	r2, [r3, #0]
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e8ba:	f002 f8db 	bl	8010a74 <vPortExitCritical>
				return pdPASS;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e069      	b.n	800e996 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d103      	bne.n	800e8d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8c8:	f002 f8d4 	bl	8010a74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	e062      	b.n	800e996 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d106      	bne.n	800e8e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8d6:	f107 0310 	add.w	r3, r7, #16
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f001 f852 	bl	800f984 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e8e4:	f002 f8c6 	bl	8010a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e8e8:	f000 fd12 	bl	800f310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8ec:	f002 f892 	bl	8010a14 <vPortEnterCritical>
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8f6:	b25b      	sxtb	r3, r3
 800e8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8fc:	d103      	bne.n	800e906 <xQueueReceive+0x122>
 800e8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e900:	2200      	movs	r2, #0
 800e902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e90c:	b25b      	sxtb	r3, r3
 800e90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e912:	d103      	bne.n	800e91c <xQueueReceive+0x138>
 800e914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e916:	2200      	movs	r2, #0
 800e918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e91c:	f002 f8aa 	bl	8010a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e920:	1d3a      	adds	r2, r7, #4
 800e922:	f107 0310 	add.w	r3, r7, #16
 800e926:	4611      	mov	r1, r2
 800e928:	4618      	mov	r0, r3
 800e92a:	f001 f841 	bl	800f9b0 <xTaskCheckForTimeOut>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d123      	bne.n	800e97c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e936:	f000 f997 	bl	800ec68 <prvIsQueueEmpty>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d017      	beq.n	800e970 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e942:	3324      	adds	r3, #36	; 0x24
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	4611      	mov	r1, r2
 800e948:	4618      	mov	r0, r3
 800e94a:	f000 ff67 	bl	800f81c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e94e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e950:	f000 f938 	bl	800ebc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e954:	f000 fcea 	bl	800f32c <xTaskResumeAll>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d189      	bne.n	800e872 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e95e:	4b10      	ldr	r3, [pc, #64]	; (800e9a0 <xQueueReceive+0x1bc>)
 800e960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e964:	601a      	str	r2, [r3, #0]
 800e966:	f3bf 8f4f 	dsb	sy
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	e780      	b.n	800e872 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e972:	f000 f927 	bl	800ebc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e976:	f000 fcd9 	bl	800f32c <xTaskResumeAll>
 800e97a:	e77a      	b.n	800e872 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e97c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e97e:	f000 f921 	bl	800ebc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e982:	f000 fcd3 	bl	800f32c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e988:	f000 f96e 	bl	800ec68 <prvIsQueueEmpty>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f43f af6f 	beq.w	800e872 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e994:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e996:	4618      	mov	r0, r3
 800e998:	3730      	adds	r7, #48	; 0x30
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	e000ed04 	.word	0xe000ed04

0800e9a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08e      	sub	sp, #56	; 0x38
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d10a      	bne.n	800e9d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9be:	f383 8811 	msr	BASEPRI, r3
 800e9c2:	f3bf 8f6f 	isb	sy
 800e9c6:	f3bf 8f4f 	dsb	sy
 800e9ca:	623b      	str	r3, [r7, #32]
}
 800e9cc:	bf00      	nop
 800e9ce:	e7fe      	b.n	800e9ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d103      	bne.n	800e9de <xQueueReceiveFromISR+0x3a>
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d101      	bne.n	800e9e2 <xQueueReceiveFromISR+0x3e>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	e000      	b.n	800e9e4 <xQueueReceiveFromISR+0x40>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d10a      	bne.n	800e9fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ec:	f383 8811 	msr	BASEPRI, r3
 800e9f0:	f3bf 8f6f 	isb	sy
 800e9f4:	f3bf 8f4f 	dsb	sy
 800e9f8:	61fb      	str	r3, [r7, #28]
}
 800e9fa:	bf00      	nop
 800e9fc:	e7fe      	b.n	800e9fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e9fe:	f002 f8eb 	bl	8010bd8 <vPortValidateInterruptPriority>
	__asm volatile
 800ea02:	f3ef 8211 	mrs	r2, BASEPRI
 800ea06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	61ba      	str	r2, [r7, #24]
 800ea18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ea1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d02f      	beq.n	800ea8a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ea2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea34:	68b9      	ldr	r1, [r7, #8]
 800ea36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea38:	f000 f89e 	bl	800eb78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ea3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3e:	1e5a      	subs	r2, r3, #1
 800ea40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ea44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea4c:	d112      	bne.n	800ea74 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	691b      	ldr	r3, [r3, #16]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d016      	beq.n	800ea84 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea58:	3310      	adds	r3, #16
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f000 ff2e 	bl	800f8bc <xTaskRemoveFromEventList>
 800ea60:	4603      	mov	r3, r0
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00e      	beq.n	800ea84 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00b      	beq.n	800ea84 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	601a      	str	r2, [r3, #0]
 800ea72:	e007      	b.n	800ea84 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ea74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea78:	3301      	adds	r3, #1
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	b25a      	sxtb	r2, r3
 800ea7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ea84:	2301      	movs	r3, #1
 800ea86:	637b      	str	r3, [r7, #52]	; 0x34
 800ea88:	e001      	b.n	800ea8e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ea8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea90:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	f383 8811 	msr	BASEPRI, r3
}
 800ea98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3738      	adds	r7, #56	; 0x38
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eab0:	2300      	movs	r3, #0
 800eab2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d10d      	bne.n	800eade <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d14d      	bne.n	800eb66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	689b      	ldr	r3, [r3, #8]
 800eace:	4618      	mov	r0, r3
 800ead0:	f001 f9aa 	bl	800fe28 <xTaskPriorityDisinherit>
 800ead4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2200      	movs	r2, #0
 800eada:	609a      	str	r2, [r3, #8]
 800eadc:	e043      	b.n	800eb66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d119      	bne.n	800eb18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6858      	ldr	r0, [r3, #4]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaec:	461a      	mov	r2, r3
 800eaee:	68b9      	ldr	r1, [r7, #8]
 800eaf0:	f002 ffe6 	bl	8011ac0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	685a      	ldr	r2, [r3, #4]
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafc:	441a      	add	r2, r3
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	685a      	ldr	r2, [r3, #4]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d32b      	bcc.n	800eb66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	605a      	str	r2, [r3, #4]
 800eb16:	e026      	b.n	800eb66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	68d8      	ldr	r0, [r3, #12]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb20:	461a      	mov	r2, r3
 800eb22:	68b9      	ldr	r1, [r7, #8]
 800eb24:	f002 ffcc 	bl	8011ac0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	68da      	ldr	r2, [r3, #12]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb30:	425b      	negs	r3, r3
 800eb32:	441a      	add	r2, r3
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	68da      	ldr	r2, [r3, #12]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d207      	bcs.n	800eb54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	689a      	ldr	r2, [r3, #8]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb4c:	425b      	negs	r3, r3
 800eb4e:	441a      	add	r2, r3
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b02      	cmp	r3, #2
 800eb58:	d105      	bne.n	800eb66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d002      	beq.n	800eb66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	3b01      	subs	r3, #1
 800eb64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	1c5a      	adds	r2, r3, #1
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eb6e:	697b      	ldr	r3, [r7, #20]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3718      	adds	r7, #24
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d018      	beq.n	800ebbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	68da      	ldr	r2, [r3, #12]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb92:	441a      	add	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	68da      	ldr	r2, [r3, #12]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d303      	bcc.n	800ebac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	68d9      	ldr	r1, [r3, #12]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	6838      	ldr	r0, [r7, #0]
 800ebb8:	f002 ff82 	bl	8011ac0 <memcpy>
	}
}
 800ebbc:	bf00      	nop
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ebcc:	f001 ff22 	bl	8010a14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebd8:	e011      	b.n	800ebfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d012      	beq.n	800ec08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	3324      	adds	r3, #36	; 0x24
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 fe68 	bl	800f8bc <xTaskRemoveFromEventList>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ebf2:	f000 ff3f 	bl	800fa74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ebf6:	7bfb      	ldrb	r3, [r7, #15]
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	dce9      	bgt.n	800ebda <prvUnlockQueue+0x16>
 800ec06:	e000      	b.n	800ec0a <prvUnlockQueue+0x46>
					break;
 800ec08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	22ff      	movs	r2, #255	; 0xff
 800ec0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ec12:	f001 ff2f 	bl	8010a74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ec16:	f001 fefd 	bl	8010a14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec22:	e011      	b.n	800ec48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	691b      	ldr	r3, [r3, #16]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d012      	beq.n	800ec52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	3310      	adds	r3, #16
 800ec30:	4618      	mov	r0, r3
 800ec32:	f000 fe43 	bl	800f8bc <xTaskRemoveFromEventList>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d001      	beq.n	800ec40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ec3c:	f000 ff1a 	bl	800fa74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ec40:	7bbb      	ldrb	r3, [r7, #14]
 800ec42:	3b01      	subs	r3, #1
 800ec44:	b2db      	uxtb	r3, r3
 800ec46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dce9      	bgt.n	800ec24 <prvUnlockQueue+0x60>
 800ec50:	e000      	b.n	800ec54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ec52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	22ff      	movs	r2, #255	; 0xff
 800ec58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ec5c:	f001 ff0a 	bl	8010a74 <vPortExitCritical>
}
 800ec60:	bf00      	nop
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec70:	f001 fed0 	bl	8010a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d102      	bne.n	800ec82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	60fb      	str	r3, [r7, #12]
 800ec80:	e001      	b.n	800ec86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ec82:	2300      	movs	r3, #0
 800ec84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec86:	f001 fef5 	bl	8010a74 <vPortExitCritical>

	return xReturn;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec9c:	f001 feba 	bl	8010a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d102      	bne.n	800ecb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ecac:	2301      	movs	r3, #1
 800ecae:	60fb      	str	r3, [r7, #12]
 800ecb0:	e001      	b.n	800ecb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ecb6:	f001 fedd 	bl	8010a74 <vPortExitCritical>

	return xReturn;
 800ecba:	68fb      	ldr	r3, [r7, #12]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecce:	2300      	movs	r3, #0
 800ecd0:	60fb      	str	r3, [r7, #12]
 800ecd2:	e014      	b.n	800ecfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ecd4:	4a0f      	ldr	r2, [pc, #60]	; (800ed14 <vQueueAddToRegistry+0x50>)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10b      	bne.n	800ecf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ece0:	490c      	ldr	r1, [pc, #48]	; (800ed14 <vQueueAddToRegistry+0x50>)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	683a      	ldr	r2, [r7, #0]
 800ece6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ecea:	4a0a      	ldr	r2, [pc, #40]	; (800ed14 <vQueueAddToRegistry+0x50>)
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	00db      	lsls	r3, r3, #3
 800ecf0:	4413      	add	r3, r2
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ecf6:	e006      	b.n	800ed06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	60fb      	str	r3, [r7, #12]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2b07      	cmp	r3, #7
 800ed02:	d9e7      	bls.n	800ecd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed04:	bf00      	nop
 800ed06:	bf00      	nop
 800ed08:	3714      	adds	r7, #20
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	20001ddc 	.word	0x20001ddc

0800ed18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b086      	sub	sp, #24
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ed28:	f001 fe74 	bl	8010a14 <vPortEnterCritical>
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed32:	b25b      	sxtb	r3, r3
 800ed34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed38:	d103      	bne.n	800ed42 <vQueueWaitForMessageRestricted+0x2a>
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed48:	b25b      	sxtb	r3, r3
 800ed4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4e:	d103      	bne.n	800ed58 <vQueueWaitForMessageRestricted+0x40>
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed58:	f001 fe8c 	bl	8010a74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d106      	bne.n	800ed72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	3324      	adds	r3, #36	; 0x24
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	68b9      	ldr	r1, [r7, #8]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f000 fd79 	bl	800f864 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ed72:	6978      	ldr	r0, [r7, #20]
 800ed74:	f7ff ff26 	bl	800ebc4 <prvUnlockQueue>
	}
 800ed78:	bf00      	nop
 800ed7a:	3718      	adds	r7, #24
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b08e      	sub	sp, #56	; 0x38
 800ed84:	af04      	add	r7, sp, #16
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
 800ed8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ed8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d10a      	bne.n	800edaa <xTaskCreateStatic+0x2a>
	__asm volatile
 800ed94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed98:	f383 8811 	msr	BASEPRI, r3
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	623b      	str	r3, [r7, #32]
}
 800eda6:	bf00      	nop
 800eda8:	e7fe      	b.n	800eda8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800edaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edac:	2b00      	cmp	r3, #0
 800edae:	d10a      	bne.n	800edc6 <xTaskCreateStatic+0x46>
	__asm volatile
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	f383 8811 	msr	BASEPRI, r3
 800edb8:	f3bf 8f6f 	isb	sy
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	61fb      	str	r3, [r7, #28]
}
 800edc2:	bf00      	nop
 800edc4:	e7fe      	b.n	800edc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800edc6:	23c0      	movs	r3, #192	; 0xc0
 800edc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	2bc0      	cmp	r3, #192	; 0xc0
 800edce:	d00a      	beq.n	800ede6 <xTaskCreateStatic+0x66>
	__asm volatile
 800edd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	61bb      	str	r3, [r7, #24]
}
 800ede2:	bf00      	nop
 800ede4:	e7fe      	b.n	800ede4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ede6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ede8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edea:	2b00      	cmp	r3, #0
 800edec:	d01e      	beq.n	800ee2c <xTaskCreateStatic+0xac>
 800edee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d01b      	beq.n	800ee2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800edf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800edf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edfc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800edfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee00:	2202      	movs	r2, #2
 800ee02:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ee06:	2300      	movs	r3, #0
 800ee08:	9303      	str	r3, [sp, #12]
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0c:	9302      	str	r3, [sp, #8]
 800ee0e:	f107 0314 	add.w	r3, r7, #20
 800ee12:	9301      	str	r3, [sp, #4]
 800ee14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee16:	9300      	str	r3, [sp, #0]
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	68b9      	ldr	r1, [r7, #8]
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f000 f850 	bl	800eec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee26:	f000 f8f7 	bl	800f018 <prvAddNewTaskToReadyList>
 800ee2a:	e001      	b.n	800ee30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ee30:	697b      	ldr	r3, [r7, #20]
	}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3728      	adds	r7, #40	; 0x28
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b08c      	sub	sp, #48	; 0x30
 800ee3e:	af04      	add	r7, sp, #16
 800ee40:	60f8      	str	r0, [r7, #12]
 800ee42:	60b9      	str	r1, [r7, #8]
 800ee44:	603b      	str	r3, [r7, #0]
 800ee46:	4613      	mov	r3, r2
 800ee48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ee4a:	88fb      	ldrh	r3, [r7, #6]
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f001 ff02 	bl	8010c58 <pvPortMalloc>
 800ee54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00e      	beq.n	800ee7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ee5c:	20c0      	movs	r0, #192	; 0xc0
 800ee5e:	f001 fefb 	bl	8010c58 <pvPortMalloc>
 800ee62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d003      	beq.n	800ee72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ee6a:	69fb      	ldr	r3, [r7, #28]
 800ee6c:	697a      	ldr	r2, [r7, #20]
 800ee6e:	631a      	str	r2, [r3, #48]	; 0x30
 800ee70:	e005      	b.n	800ee7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ee72:	6978      	ldr	r0, [r7, #20]
 800ee74:	f001 ffbc 	bl	8010df0 <vPortFree>
 800ee78:	e001      	b.n	800ee7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d017      	beq.n	800eeb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ee8c:	88fa      	ldrh	r2, [r7, #6]
 800ee8e:	2300      	movs	r3, #0
 800ee90:	9303      	str	r3, [sp, #12]
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	9302      	str	r3, [sp, #8]
 800ee96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee98:	9301      	str	r3, [sp, #4]
 800ee9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f000 f80e 	bl	800eec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eea8:	69f8      	ldr	r0, [r7, #28]
 800eeaa:	f000 f8b5 	bl	800f018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	61bb      	str	r3, [r7, #24]
 800eeb2:	e002      	b.n	800eeba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eeb4:	f04f 33ff 	mov.w	r3, #4294967295
 800eeb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eeba:	69bb      	ldr	r3, [r7, #24]
	}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3720      	adds	r7, #32
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b088      	sub	sp, #32
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
 800eed0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	461a      	mov	r2, r3
 800eedc:	21a5      	movs	r1, #165	; 0xa5
 800eede:	f002 fdfd 	bl	8011adc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eeec:	3b01      	subs	r3, #1
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	4413      	add	r3, r2
 800eef2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eef4:	69bb      	ldr	r3, [r7, #24]
 800eef6:	f023 0307 	bic.w	r3, r3, #7
 800eefa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	f003 0307 	and.w	r3, r3, #7
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d00a      	beq.n	800ef1c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ef06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	617b      	str	r3, [r7, #20]
}
 800ef18:	bf00      	nop
 800ef1a:	e7fe      	b.n	800ef1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d01f      	beq.n	800ef62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef22:	2300      	movs	r3, #0
 800ef24:	61fb      	str	r3, [r7, #28]
 800ef26:	e012      	b.n	800ef4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	7819      	ldrb	r1, [r3, #0]
 800ef30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	4413      	add	r3, r2
 800ef36:	3334      	adds	r3, #52	; 0x34
 800ef38:	460a      	mov	r2, r1
 800ef3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ef3c:	68ba      	ldr	r2, [r7, #8]
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	4413      	add	r3, r2
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d006      	beq.n	800ef56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	61fb      	str	r3, [r7, #28]
 800ef4e:	69fb      	ldr	r3, [r7, #28]
 800ef50:	2b0f      	cmp	r3, #15
 800ef52:	d9e9      	bls.n	800ef28 <prvInitialiseNewTask+0x64>
 800ef54:	e000      	b.n	800ef58 <prvInitialiseNewTask+0x94>
			{
				break;
 800ef56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ef58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef60:	e003      	b.n	800ef6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	2200      	movs	r2, #0
 800ef66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6c:	2b37      	cmp	r3, #55	; 0x37
 800ef6e:	d901      	bls.n	800ef74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ef70:	2337      	movs	r3, #55	; 0x37
 800ef72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ef74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ef7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ef80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef82:	2200      	movs	r2, #0
 800ef84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef88:	3304      	adds	r3, #4
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7ff f8be 	bl	800e10c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef92:	3318      	adds	r3, #24
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7ff f8b9 	bl	800e10c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ef9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800efa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800efb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb2:	2200      	movs	r2, #0
 800efb4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800efb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb8:	2200      	movs	r2, #0
 800efba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800efbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc0:	2200      	movs	r2, #0
 800efc2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800efc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc8:	3358      	adds	r3, #88	; 0x58
 800efca:	2260      	movs	r2, #96	; 0x60
 800efcc:	2100      	movs	r1, #0
 800efce:	4618      	mov	r0, r3
 800efd0:	f002 fd84 	bl	8011adc <memset>
 800efd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd6:	4a0d      	ldr	r2, [pc, #52]	; (800f00c <prvInitialiseNewTask+0x148>)
 800efd8:	65da      	str	r2, [r3, #92]	; 0x5c
 800efda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efdc:	4a0c      	ldr	r2, [pc, #48]	; (800f010 <prvInitialiseNewTask+0x14c>)
 800efde:	661a      	str	r2, [r3, #96]	; 0x60
 800efe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe2:	4a0c      	ldr	r2, [pc, #48]	; (800f014 <prvInitialiseNewTask+0x150>)
 800efe4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800efe6:	683a      	ldr	r2, [r7, #0]
 800efe8:	68f9      	ldr	r1, [r7, #12]
 800efea:	69b8      	ldr	r0, [r7, #24]
 800efec:	f001 fbe8 	bl	80107c0 <pxPortInitialiseStack>
 800eff0:	4602      	mov	r2, r0
 800eff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d002      	beq.n	800f002 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800effc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f002:	bf00      	nop
 800f004:	3720      	adds	r7, #32
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	08014b1c 	.word	0x08014b1c
 800f010:	08014b3c 	.word	0x08014b3c
 800f014:	08014afc 	.word	0x08014afc

0800f018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f020:	f001 fcf8 	bl	8010a14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f024:	4b2d      	ldr	r3, [pc, #180]	; (800f0dc <prvAddNewTaskToReadyList+0xc4>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	3301      	adds	r3, #1
 800f02a:	4a2c      	ldr	r2, [pc, #176]	; (800f0dc <prvAddNewTaskToReadyList+0xc4>)
 800f02c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f02e:	4b2c      	ldr	r3, [pc, #176]	; (800f0e0 <prvAddNewTaskToReadyList+0xc8>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d109      	bne.n	800f04a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f036:	4a2a      	ldr	r2, [pc, #168]	; (800f0e0 <prvAddNewTaskToReadyList+0xc8>)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f03c:	4b27      	ldr	r3, [pc, #156]	; (800f0dc <prvAddNewTaskToReadyList+0xc4>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d110      	bne.n	800f066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f044:	f000 fd3c 	bl	800fac0 <prvInitialiseTaskLists>
 800f048:	e00d      	b.n	800f066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f04a:	4b26      	ldr	r3, [pc, #152]	; (800f0e4 <prvAddNewTaskToReadyList+0xcc>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d109      	bne.n	800f066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f052:	4b23      	ldr	r3, [pc, #140]	; (800f0e0 <prvAddNewTaskToReadyList+0xc8>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d802      	bhi.n	800f066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f060:	4a1f      	ldr	r2, [pc, #124]	; (800f0e0 <prvAddNewTaskToReadyList+0xc8>)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f066:	4b20      	ldr	r3, [pc, #128]	; (800f0e8 <prvAddNewTaskToReadyList+0xd0>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	3301      	adds	r3, #1
 800f06c:	4a1e      	ldr	r2, [pc, #120]	; (800f0e8 <prvAddNewTaskToReadyList+0xd0>)
 800f06e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f070:	4b1d      	ldr	r3, [pc, #116]	; (800f0e8 <prvAddNewTaskToReadyList+0xd0>)
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f07c:	4b1b      	ldr	r3, [pc, #108]	; (800f0ec <prvAddNewTaskToReadyList+0xd4>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	429a      	cmp	r2, r3
 800f082:	d903      	bls.n	800f08c <prvAddNewTaskToReadyList+0x74>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f088:	4a18      	ldr	r2, [pc, #96]	; (800f0ec <prvAddNewTaskToReadyList+0xd4>)
 800f08a:	6013      	str	r3, [r2, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f090:	4613      	mov	r3, r2
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	4413      	add	r3, r2
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4a15      	ldr	r2, [pc, #84]	; (800f0f0 <prvAddNewTaskToReadyList+0xd8>)
 800f09a:	441a      	add	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	3304      	adds	r3, #4
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	4610      	mov	r0, r2
 800f0a4:	f7ff f83f 	bl	800e126 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f0a8:	f001 fce4 	bl	8010a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f0ac:	4b0d      	ldr	r3, [pc, #52]	; (800f0e4 <prvAddNewTaskToReadyList+0xcc>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d00e      	beq.n	800f0d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f0b4:	4b0a      	ldr	r3, [pc, #40]	; (800f0e0 <prvAddNewTaskToReadyList+0xc8>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d207      	bcs.n	800f0d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f0c2:	4b0c      	ldr	r3, [pc, #48]	; (800f0f4 <prvAddNewTaskToReadyList+0xdc>)
 800f0c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0c8:	601a      	str	r2, [r3, #0]
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f0d2:	bf00      	nop
 800f0d4:	3708      	adds	r7, #8
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	200022f0 	.word	0x200022f0
 800f0e0:	20001e1c 	.word	0x20001e1c
 800f0e4:	200022fc 	.word	0x200022fc
 800f0e8:	2000230c 	.word	0x2000230c
 800f0ec:	200022f8 	.word	0x200022f8
 800f0f0:	20001e20 	.word	0x20001e20
 800f0f4:	e000ed04 	.word	0xe000ed04

0800f0f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f100:	2300      	movs	r3, #0
 800f102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d017      	beq.n	800f13a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f10a:	4b13      	ldr	r3, [pc, #76]	; (800f158 <vTaskDelay+0x60>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00a      	beq.n	800f128 <vTaskDelay+0x30>
	__asm volatile
 800f112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f116:	f383 8811 	msr	BASEPRI, r3
 800f11a:	f3bf 8f6f 	isb	sy
 800f11e:	f3bf 8f4f 	dsb	sy
 800f122:	60bb      	str	r3, [r7, #8]
}
 800f124:	bf00      	nop
 800f126:	e7fe      	b.n	800f126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f128:	f000 f8f2 	bl	800f310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f12c:	2100      	movs	r1, #0
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 ffa4 	bl	801007c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f134:	f000 f8fa 	bl	800f32c <xTaskResumeAll>
 800f138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d107      	bne.n	800f150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f140:	4b06      	ldr	r3, [pc, #24]	; (800f15c <vTaskDelay+0x64>)
 800f142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f146:	601a      	str	r2, [r3, #0]
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f150:	bf00      	nop
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}
 800f158:	20002318 	.word	0x20002318
 800f15c:	e000ed04 	.word	0xe000ed04

0800f160 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800f160:	b580      	push	{r7, lr}
 800f162:	b088      	sub	sp, #32
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800f16c:	69bb      	ldr	r3, [r7, #24]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d10a      	bne.n	800f188 <eTaskGetState+0x28>
	__asm volatile
 800f172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f176:	f383 8811 	msr	BASEPRI, r3
 800f17a:	f3bf 8f6f 	isb	sy
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	60bb      	str	r3, [r7, #8]
}
 800f184:	bf00      	nop
 800f186:	e7fe      	b.n	800f186 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800f188:	4b23      	ldr	r3, [pc, #140]	; (800f218 <eTaskGetState+0xb8>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	69ba      	ldr	r2, [r7, #24]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d102      	bne.n	800f198 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800f192:	2300      	movs	r3, #0
 800f194:	77fb      	strb	r3, [r7, #31]
 800f196:	e03a      	b.n	800f20e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800f198:	f001 fc3c 	bl	8010a14 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800f19c:	69bb      	ldr	r3, [r7, #24]
 800f19e:	695b      	ldr	r3, [r3, #20]
 800f1a0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800f1a2:	4b1e      	ldr	r3, [pc, #120]	; (800f21c <eTaskGetState+0xbc>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800f1a8:	4b1d      	ldr	r3, [pc, #116]	; (800f220 <eTaskGetState+0xc0>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800f1ae:	f001 fc61 	bl	8010a74 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800f1b2:	697a      	ldr	r2, [r7, #20]
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d003      	beq.n	800f1c2 <eTaskGetState+0x62>
 800f1ba:	697a      	ldr	r2, [r7, #20]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d102      	bne.n	800f1c8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800f1c2:	2302      	movs	r3, #2
 800f1c4:	77fb      	strb	r3, [r7, #31]
 800f1c6:	e022      	b.n	800f20e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	4a16      	ldr	r2, [pc, #88]	; (800f224 <eTaskGetState+0xc4>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d112      	bne.n	800f1f6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10b      	bne.n	800f1f0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f1d8:	69bb      	ldr	r3, [r7, #24]
 800f1da:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d102      	bne.n	800f1ea <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800f1e4:	2302      	movs	r3, #2
 800f1e6:	77fb      	strb	r3, [r7, #31]
 800f1e8:	e011      	b.n	800f20e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800f1ea:	2303      	movs	r3, #3
 800f1ec:	77fb      	strb	r3, [r7, #31]
 800f1ee:	e00e      	b.n	800f20e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	77fb      	strb	r3, [r7, #31]
 800f1f4:	e00b      	b.n	800f20e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	4a0b      	ldr	r2, [pc, #44]	; (800f228 <eTaskGetState+0xc8>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d002      	beq.n	800f204 <eTaskGetState+0xa4>
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d102      	bne.n	800f20a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800f204:	2304      	movs	r3, #4
 800f206:	77fb      	strb	r3, [r7, #31]
 800f208:	e001      	b.n	800f20e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800f20a:	2301      	movs	r3, #1
 800f20c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800f20e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f210:	4618      	mov	r0, r3
 800f212:	3720      	adds	r7, #32
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	20001e1c 	.word	0x20001e1c
 800f21c:	200022a8 	.word	0x200022a8
 800f220:	200022ac 	.word	0x200022ac
 800f224:	200022dc 	.word	0x200022dc
 800f228:	200022c4 	.word	0x200022c4

0800f22c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b08a      	sub	sp, #40	; 0x28
 800f230:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f232:	2300      	movs	r3, #0
 800f234:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f236:	2300      	movs	r3, #0
 800f238:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f23a:	463a      	mov	r2, r7
 800f23c:	1d39      	adds	r1, r7, #4
 800f23e:	f107 0308 	add.w	r3, r7, #8
 800f242:	4618      	mov	r0, r3
 800f244:	f7fe ff0e 	bl	800e064 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f248:	6839      	ldr	r1, [r7, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	68ba      	ldr	r2, [r7, #8]
 800f24e:	9202      	str	r2, [sp, #8]
 800f250:	9301      	str	r3, [sp, #4]
 800f252:	2300      	movs	r3, #0
 800f254:	9300      	str	r3, [sp, #0]
 800f256:	2300      	movs	r3, #0
 800f258:	460a      	mov	r2, r1
 800f25a:	4925      	ldr	r1, [pc, #148]	; (800f2f0 <vTaskStartScheduler+0xc4>)
 800f25c:	4825      	ldr	r0, [pc, #148]	; (800f2f4 <vTaskStartScheduler+0xc8>)
 800f25e:	f7ff fd8f 	bl	800ed80 <xTaskCreateStatic>
 800f262:	4603      	mov	r3, r0
 800f264:	4a24      	ldr	r2, [pc, #144]	; (800f2f8 <vTaskStartScheduler+0xcc>)
 800f266:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f268:	4b23      	ldr	r3, [pc, #140]	; (800f2f8 <vTaskStartScheduler+0xcc>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d002      	beq.n	800f276 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f270:	2301      	movs	r3, #1
 800f272:	617b      	str	r3, [r7, #20]
 800f274:	e001      	b.n	800f27a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f276:	2300      	movs	r3, #0
 800f278:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d102      	bne.n	800f286 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f280:	f000 ff50 	bl	8010124 <xTimerCreateTimerTask>
 800f284:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d11d      	bne.n	800f2c8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f290:	f383 8811 	msr	BASEPRI, r3
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	613b      	str	r3, [r7, #16]
}
 800f29e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f2a0:	4b16      	ldr	r3, [pc, #88]	; (800f2fc <vTaskStartScheduler+0xd0>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	3358      	adds	r3, #88	; 0x58
 800f2a6:	4a16      	ldr	r2, [pc, #88]	; (800f300 <vTaskStartScheduler+0xd4>)
 800f2a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f2aa:	4b16      	ldr	r3, [pc, #88]	; (800f304 <vTaskStartScheduler+0xd8>)
 800f2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f2b2:	4b15      	ldr	r3, [pc, #84]	; (800f308 <vTaskStartScheduler+0xdc>)
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f2b8:	4b14      	ldr	r3, [pc, #80]	; (800f30c <vTaskStartScheduler+0xe0>)
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f2be:	f7f2 facf 	bl	8001860 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f2c2:	f001 fb05 	bl	80108d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f2c6:	e00e      	b.n	800f2e6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ce:	d10a      	bne.n	800f2e6 <vTaskStartScheduler+0xba>
	__asm volatile
 800f2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	60fb      	str	r3, [r7, #12]
}
 800f2e2:	bf00      	nop
 800f2e4:	e7fe      	b.n	800f2e4 <vTaskStartScheduler+0xb8>
}
 800f2e6:	bf00      	nop
 800f2e8:	3718      	adds	r7, #24
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	08012898 	.word	0x08012898
 800f2f4:	0800fa8d 	.word	0x0800fa8d
 800f2f8:	20002314 	.word	0x20002314
 800f2fc:	20001e1c 	.word	0x20001e1c
 800f300:	2000018c 	.word	0x2000018c
 800f304:	20002310 	.word	0x20002310
 800f308:	200022fc 	.word	0x200022fc
 800f30c:	200022f4 	.word	0x200022f4

0800f310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f310:	b480      	push	{r7}
 800f312:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f314:	4b04      	ldr	r3, [pc, #16]	; (800f328 <vTaskSuspendAll+0x18>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	3301      	adds	r3, #1
 800f31a:	4a03      	ldr	r2, [pc, #12]	; (800f328 <vTaskSuspendAll+0x18>)
 800f31c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f31e:	bf00      	nop
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	20002318 	.word	0x20002318

0800f32c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f332:	2300      	movs	r3, #0
 800f334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f336:	2300      	movs	r3, #0
 800f338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f33a:	4b42      	ldr	r3, [pc, #264]	; (800f444 <xTaskResumeAll+0x118>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d10a      	bne.n	800f358 <xTaskResumeAll+0x2c>
	__asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f346:	f383 8811 	msr	BASEPRI, r3
 800f34a:	f3bf 8f6f 	isb	sy
 800f34e:	f3bf 8f4f 	dsb	sy
 800f352:	603b      	str	r3, [r7, #0]
}
 800f354:	bf00      	nop
 800f356:	e7fe      	b.n	800f356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f358:	f001 fb5c 	bl	8010a14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f35c:	4b39      	ldr	r3, [pc, #228]	; (800f444 <xTaskResumeAll+0x118>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	3b01      	subs	r3, #1
 800f362:	4a38      	ldr	r2, [pc, #224]	; (800f444 <xTaskResumeAll+0x118>)
 800f364:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f366:	4b37      	ldr	r3, [pc, #220]	; (800f444 <xTaskResumeAll+0x118>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d162      	bne.n	800f434 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f36e:	4b36      	ldr	r3, [pc, #216]	; (800f448 <xTaskResumeAll+0x11c>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d05e      	beq.n	800f434 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f376:	e02f      	b.n	800f3d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f378:	4b34      	ldr	r3, [pc, #208]	; (800f44c <xTaskResumeAll+0x120>)
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	3318      	adds	r3, #24
 800f384:	4618      	mov	r0, r3
 800f386:	f7fe ff2b 	bl	800e1e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	3304      	adds	r3, #4
 800f38e:	4618      	mov	r0, r3
 800f390:	f7fe ff26 	bl	800e1e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f398:	4b2d      	ldr	r3, [pc, #180]	; (800f450 <xTaskResumeAll+0x124>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d903      	bls.n	800f3a8 <xTaskResumeAll+0x7c>
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3a4:	4a2a      	ldr	r2, [pc, #168]	; (800f450 <xTaskResumeAll+0x124>)
 800f3a6:	6013      	str	r3, [r2, #0]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	4413      	add	r3, r2
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	4a27      	ldr	r2, [pc, #156]	; (800f454 <xTaskResumeAll+0x128>)
 800f3b6:	441a      	add	r2, r3
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	3304      	adds	r3, #4
 800f3bc:	4619      	mov	r1, r3
 800f3be:	4610      	mov	r0, r2
 800f3c0:	f7fe feb1 	bl	800e126 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3c8:	4b23      	ldr	r3, [pc, #140]	; (800f458 <xTaskResumeAll+0x12c>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d302      	bcc.n	800f3d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f3d2:	4b22      	ldr	r3, [pc, #136]	; (800f45c <xTaskResumeAll+0x130>)
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f3d8:	4b1c      	ldr	r3, [pc, #112]	; (800f44c <xTaskResumeAll+0x120>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d1cb      	bne.n	800f378 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d001      	beq.n	800f3ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f3e6:	f000 fce1 	bl	800fdac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f3ea:	4b1d      	ldr	r3, [pc, #116]	; (800f460 <xTaskResumeAll+0x134>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d010      	beq.n	800f418 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f3f6:	f000 f8d7 	bl	800f5a8 <xTaskIncrementTick>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d002      	beq.n	800f406 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f400:	4b16      	ldr	r3, [pc, #88]	; (800f45c <xTaskResumeAll+0x130>)
 800f402:	2201      	movs	r2, #1
 800f404:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	3b01      	subs	r3, #1
 800f40a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1f1      	bne.n	800f3f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f412:	4b13      	ldr	r3, [pc, #76]	; (800f460 <xTaskResumeAll+0x134>)
 800f414:	2200      	movs	r2, #0
 800f416:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f418:	4b10      	ldr	r3, [pc, #64]	; (800f45c <xTaskResumeAll+0x130>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d009      	beq.n	800f434 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f420:	2301      	movs	r3, #1
 800f422:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f424:	4b0f      	ldr	r3, [pc, #60]	; (800f464 <xTaskResumeAll+0x138>)
 800f426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f42a:	601a      	str	r2, [r3, #0]
 800f42c:	f3bf 8f4f 	dsb	sy
 800f430:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f434:	f001 fb1e 	bl	8010a74 <vPortExitCritical>

	return xAlreadyYielded;
 800f438:	68bb      	ldr	r3, [r7, #8]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	20002318 	.word	0x20002318
 800f448:	200022f0 	.word	0x200022f0
 800f44c:	200022b0 	.word	0x200022b0
 800f450:	200022f8 	.word	0x200022f8
 800f454:	20001e20 	.word	0x20001e20
 800f458:	20001e1c 	.word	0x20001e1c
 800f45c:	20002304 	.word	0x20002304
 800f460:	20002300 	.word	0x20002300
 800f464:	e000ed04 	.word	0xe000ed04

0800f468 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f46e:	4b05      	ldr	r3, [pc, #20]	; (800f484 <xTaskGetTickCount+0x1c>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f474:	687b      	ldr	r3, [r7, #4]
}
 800f476:	4618      	mov	r0, r3
 800f478:	370c      	adds	r7, #12
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	200022f4 	.word	0x200022f4

0800f488 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b086      	sub	sp, #24
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f494:	2300      	movs	r3, #0
 800f496:	617b      	str	r3, [r7, #20]
 800f498:	2338      	movs	r3, #56	; 0x38
 800f49a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800f49c:	f7ff ff38 	bl	800f310 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f4a0:	4b3b      	ldr	r3, [pc, #236]	; (800f590 <uxTaskGetSystemState+0x108>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	68ba      	ldr	r2, [r7, #8]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d36a      	bcc.n	800f580 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	3b01      	subs	r3, #1
 800f4ae:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f4b0:	697a      	ldr	r2, [r7, #20]
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	00db      	lsls	r3, r3, #3
 800f4b6:	4413      	add	r3, r2
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	1898      	adds	r0, r3, r2
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	4413      	add	r3, r2
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	4a32      	ldr	r2, [pc, #200]	; (800f594 <uxTaskGetSystemState+0x10c>)
 800f4cc:	4413      	add	r3, r2
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	f000 fbc9 	bl	800fc68 <prvListTasksWithinSingleList>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	4413      	add	r3, r2
 800f4dc:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1e2      	bne.n	800f4aa <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f4e4:	697a      	ldr	r2, [r7, #20]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	00db      	lsls	r3, r3, #3
 800f4ea:	4413      	add	r3, r2
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	4a28      	ldr	r2, [pc, #160]	; (800f598 <uxTaskGetSystemState+0x110>)
 800f4f6:	6811      	ldr	r1, [r2, #0]
 800f4f8:	2202      	movs	r2, #2
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f000 fbb4 	bl	800fc68 <prvListTasksWithinSingleList>
 800f500:	4602      	mov	r2, r0
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	4413      	add	r3, r2
 800f506:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f508:	697a      	ldr	r2, [r7, #20]
 800f50a:	4613      	mov	r3, r2
 800f50c:	00db      	lsls	r3, r3, #3
 800f50e:	4413      	add	r3, r2
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	461a      	mov	r2, r3
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	4413      	add	r3, r2
 800f518:	4a20      	ldr	r2, [pc, #128]	; (800f59c <uxTaskGetSystemState+0x114>)
 800f51a:	6811      	ldr	r1, [r2, #0]
 800f51c:	2202      	movs	r2, #2
 800f51e:	4618      	mov	r0, r3
 800f520:	f000 fba2 	bl	800fc68 <prvListTasksWithinSingleList>
 800f524:	4602      	mov	r2, r0
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	4413      	add	r3, r2
 800f52a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f52c:	697a      	ldr	r2, [r7, #20]
 800f52e:	4613      	mov	r3, r2
 800f530:	00db      	lsls	r3, r3, #3
 800f532:	4413      	add	r3, r2
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	461a      	mov	r2, r3
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	4413      	add	r3, r2
 800f53c:	2204      	movs	r2, #4
 800f53e:	4918      	ldr	r1, [pc, #96]	; (800f5a0 <uxTaskGetSystemState+0x118>)
 800f540:	4618      	mov	r0, r3
 800f542:	f000 fb91 	bl	800fc68 <prvListTasksWithinSingleList>
 800f546:	4602      	mov	r2, r0
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	4413      	add	r3, r2
 800f54c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f54e:	697a      	ldr	r2, [r7, #20]
 800f550:	4613      	mov	r3, r2
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	4413      	add	r3, r2
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	461a      	mov	r2, r3
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	4413      	add	r3, r2
 800f55e:	2203      	movs	r2, #3
 800f560:	4910      	ldr	r1, [pc, #64]	; (800f5a4 <uxTaskGetSystemState+0x11c>)
 800f562:	4618      	mov	r0, r3
 800f564:	f000 fb80 	bl	800fc68 <prvListTasksWithinSingleList>
 800f568:	4602      	mov	r2, r0
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	4413      	add	r3, r2
 800f56e:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d004      	beq.n	800f580 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f576:	f7f2 f97b 	bl	8001870 <getRunTimeCounterValue>
 800f57a:	4602      	mov	r2, r0
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800f580:	f7ff fed4 	bl	800f32c <xTaskResumeAll>

		return uxTask;
 800f584:	697b      	ldr	r3, [r7, #20]
	}
 800f586:	4618      	mov	r0, r3
 800f588:	3718      	adds	r7, #24
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	200022f0 	.word	0x200022f0
 800f594:	20001e20 	.word	0x20001e20
 800f598:	200022a8 	.word	0x200022a8
 800f59c:	200022ac 	.word	0x200022ac
 800f5a0:	200022c4 	.word	0x200022c4
 800f5a4:	200022dc 	.word	0x200022dc

0800f5a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b086      	sub	sp, #24
 800f5ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5b2:	4b4f      	ldr	r3, [pc, #316]	; (800f6f0 <xTaskIncrementTick+0x148>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	f040 808f 	bne.w	800f6da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f5bc:	4b4d      	ldr	r3, [pc, #308]	; (800f6f4 <xTaskIncrementTick+0x14c>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f5c4:	4a4b      	ldr	r2, [pc, #300]	; (800f6f4 <xTaskIncrementTick+0x14c>)
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d120      	bne.n	800f612 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f5d0:	4b49      	ldr	r3, [pc, #292]	; (800f6f8 <xTaskIncrementTick+0x150>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d00a      	beq.n	800f5f0 <xTaskIncrementTick+0x48>
	__asm volatile
 800f5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5de:	f383 8811 	msr	BASEPRI, r3
 800f5e2:	f3bf 8f6f 	isb	sy
 800f5e6:	f3bf 8f4f 	dsb	sy
 800f5ea:	603b      	str	r3, [r7, #0]
}
 800f5ec:	bf00      	nop
 800f5ee:	e7fe      	b.n	800f5ee <xTaskIncrementTick+0x46>
 800f5f0:	4b41      	ldr	r3, [pc, #260]	; (800f6f8 <xTaskIncrementTick+0x150>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	60fb      	str	r3, [r7, #12]
 800f5f6:	4b41      	ldr	r3, [pc, #260]	; (800f6fc <xTaskIncrementTick+0x154>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4a3f      	ldr	r2, [pc, #252]	; (800f6f8 <xTaskIncrementTick+0x150>)
 800f5fc:	6013      	str	r3, [r2, #0]
 800f5fe:	4a3f      	ldr	r2, [pc, #252]	; (800f6fc <xTaskIncrementTick+0x154>)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6013      	str	r3, [r2, #0]
 800f604:	4b3e      	ldr	r3, [pc, #248]	; (800f700 <xTaskIncrementTick+0x158>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	3301      	adds	r3, #1
 800f60a:	4a3d      	ldr	r2, [pc, #244]	; (800f700 <xTaskIncrementTick+0x158>)
 800f60c:	6013      	str	r3, [r2, #0]
 800f60e:	f000 fbcd 	bl	800fdac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f612:	4b3c      	ldr	r3, [pc, #240]	; (800f704 <xTaskIncrementTick+0x15c>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	693a      	ldr	r2, [r7, #16]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d349      	bcc.n	800f6b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f61c:	4b36      	ldr	r3, [pc, #216]	; (800f6f8 <xTaskIncrementTick+0x150>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d104      	bne.n	800f630 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f626:	4b37      	ldr	r3, [pc, #220]	; (800f704 <xTaskIncrementTick+0x15c>)
 800f628:	f04f 32ff 	mov.w	r2, #4294967295
 800f62c:	601a      	str	r2, [r3, #0]
					break;
 800f62e:	e03f      	b.n	800f6b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f630:	4b31      	ldr	r3, [pc, #196]	; (800f6f8 <xTaskIncrementTick+0x150>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f640:	693a      	ldr	r2, [r7, #16]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	429a      	cmp	r2, r3
 800f646:	d203      	bcs.n	800f650 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f648:	4a2e      	ldr	r2, [pc, #184]	; (800f704 <xTaskIncrementTick+0x15c>)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f64e:	e02f      	b.n	800f6b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	3304      	adds	r3, #4
 800f654:	4618      	mov	r0, r3
 800f656:	f7fe fdc3 	bl	800e1e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d004      	beq.n	800f66c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	3318      	adds	r3, #24
 800f666:	4618      	mov	r0, r3
 800f668:	f7fe fdba 	bl	800e1e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f670:	4b25      	ldr	r3, [pc, #148]	; (800f708 <xTaskIncrementTick+0x160>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	429a      	cmp	r2, r3
 800f676:	d903      	bls.n	800f680 <xTaskIncrementTick+0xd8>
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f67c:	4a22      	ldr	r2, [pc, #136]	; (800f708 <xTaskIncrementTick+0x160>)
 800f67e:	6013      	str	r3, [r2, #0]
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f684:	4613      	mov	r3, r2
 800f686:	009b      	lsls	r3, r3, #2
 800f688:	4413      	add	r3, r2
 800f68a:	009b      	lsls	r3, r3, #2
 800f68c:	4a1f      	ldr	r2, [pc, #124]	; (800f70c <xTaskIncrementTick+0x164>)
 800f68e:	441a      	add	r2, r3
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	3304      	adds	r3, #4
 800f694:	4619      	mov	r1, r3
 800f696:	4610      	mov	r0, r2
 800f698:	f7fe fd45 	bl	800e126 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6a0:	4b1b      	ldr	r3, [pc, #108]	; (800f710 <xTaskIncrementTick+0x168>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d3b8      	bcc.n	800f61c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6ae:	e7b5      	b.n	800f61c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f6b0:	4b17      	ldr	r3, [pc, #92]	; (800f710 <xTaskIncrementTick+0x168>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6b6:	4915      	ldr	r1, [pc, #84]	; (800f70c <xTaskIncrementTick+0x164>)
 800f6b8:	4613      	mov	r3, r2
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	4413      	add	r3, r2
 800f6be:	009b      	lsls	r3, r3, #2
 800f6c0:	440b      	add	r3, r1
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d901      	bls.n	800f6cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f6cc:	4b11      	ldr	r3, [pc, #68]	; (800f714 <xTaskIncrementTick+0x16c>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d007      	beq.n	800f6e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	617b      	str	r3, [r7, #20]
 800f6d8:	e004      	b.n	800f6e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f6da:	4b0f      	ldr	r3, [pc, #60]	; (800f718 <xTaskIncrementTick+0x170>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	3301      	adds	r3, #1
 800f6e0:	4a0d      	ldr	r2, [pc, #52]	; (800f718 <xTaskIncrementTick+0x170>)
 800f6e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f6e4:	697b      	ldr	r3, [r7, #20]
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3718      	adds	r7, #24
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	20002318 	.word	0x20002318
 800f6f4:	200022f4 	.word	0x200022f4
 800f6f8:	200022a8 	.word	0x200022a8
 800f6fc:	200022ac 	.word	0x200022ac
 800f700:	20002308 	.word	0x20002308
 800f704:	20002310 	.word	0x20002310
 800f708:	200022f8 	.word	0x200022f8
 800f70c:	20001e20 	.word	0x20001e20
 800f710:	20001e1c 	.word	0x20001e1c
 800f714:	20002304 	.word	0x20002304
 800f718:	20002300 	.word	0x20002300

0800f71c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f722:	4b36      	ldr	r3, [pc, #216]	; (800f7fc <vTaskSwitchContext+0xe0>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d003      	beq.n	800f732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f72a:	4b35      	ldr	r3, [pc, #212]	; (800f800 <vTaskSwitchContext+0xe4>)
 800f72c:	2201      	movs	r2, #1
 800f72e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f730:	e05f      	b.n	800f7f2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800f732:	4b33      	ldr	r3, [pc, #204]	; (800f800 <vTaskSwitchContext+0xe4>)
 800f734:	2200      	movs	r2, #0
 800f736:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f738:	f7f2 f89a 	bl	8001870 <getRunTimeCounterValue>
 800f73c:	4603      	mov	r3, r0
 800f73e:	4a31      	ldr	r2, [pc, #196]	; (800f804 <vTaskSwitchContext+0xe8>)
 800f740:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f742:	4b30      	ldr	r3, [pc, #192]	; (800f804 <vTaskSwitchContext+0xe8>)
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	4b30      	ldr	r3, [pc, #192]	; (800f808 <vTaskSwitchContext+0xec>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d909      	bls.n	800f762 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f74e:	4b2f      	ldr	r3, [pc, #188]	; (800f80c <vTaskSwitchContext+0xf0>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f754:	4a2b      	ldr	r2, [pc, #172]	; (800f804 <vTaskSwitchContext+0xe8>)
 800f756:	6810      	ldr	r0, [r2, #0]
 800f758:	4a2b      	ldr	r2, [pc, #172]	; (800f808 <vTaskSwitchContext+0xec>)
 800f75a:	6812      	ldr	r2, [r2, #0]
 800f75c:	1a82      	subs	r2, r0, r2
 800f75e:	440a      	add	r2, r1
 800f760:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f762:	4b28      	ldr	r3, [pc, #160]	; (800f804 <vTaskSwitchContext+0xe8>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	4a28      	ldr	r2, [pc, #160]	; (800f808 <vTaskSwitchContext+0xec>)
 800f768:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f76a:	4b29      	ldr	r3, [pc, #164]	; (800f810 <vTaskSwitchContext+0xf4>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	60fb      	str	r3, [r7, #12]
 800f770:	e010      	b.n	800f794 <vTaskSwitchContext+0x78>
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d10a      	bne.n	800f78e <vTaskSwitchContext+0x72>
	__asm volatile
 800f778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77c:	f383 8811 	msr	BASEPRI, r3
 800f780:	f3bf 8f6f 	isb	sy
 800f784:	f3bf 8f4f 	dsb	sy
 800f788:	607b      	str	r3, [r7, #4]
}
 800f78a:	bf00      	nop
 800f78c:	e7fe      	b.n	800f78c <vTaskSwitchContext+0x70>
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	3b01      	subs	r3, #1
 800f792:	60fb      	str	r3, [r7, #12]
 800f794:	491f      	ldr	r1, [pc, #124]	; (800f814 <vTaskSwitchContext+0xf8>)
 800f796:	68fa      	ldr	r2, [r7, #12]
 800f798:	4613      	mov	r3, r2
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	440b      	add	r3, r1
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d0e4      	beq.n	800f772 <vTaskSwitchContext+0x56>
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	009b      	lsls	r3, r3, #2
 800f7ae:	4413      	add	r3, r2
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	4a18      	ldr	r2, [pc, #96]	; (800f814 <vTaskSwitchContext+0xf8>)
 800f7b4:	4413      	add	r3, r2
 800f7b6:	60bb      	str	r3, [r7, #8]
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	685a      	ldr	r2, [r3, #4]
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	605a      	str	r2, [r3, #4]
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	685a      	ldr	r2, [r3, #4]
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	3308      	adds	r3, #8
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d104      	bne.n	800f7d8 <vTaskSwitchContext+0xbc>
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	685a      	ldr	r2, [r3, #4]
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	605a      	str	r2, [r3, #4]
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	68db      	ldr	r3, [r3, #12]
 800f7de:	4a0b      	ldr	r2, [pc, #44]	; (800f80c <vTaskSwitchContext+0xf0>)
 800f7e0:	6013      	str	r3, [r2, #0]
 800f7e2:	4a0b      	ldr	r2, [pc, #44]	; (800f810 <vTaskSwitchContext+0xf4>)
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f7e8:	4b08      	ldr	r3, [pc, #32]	; (800f80c <vTaskSwitchContext+0xf0>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	3358      	adds	r3, #88	; 0x58
 800f7ee:	4a0a      	ldr	r2, [pc, #40]	; (800f818 <vTaskSwitchContext+0xfc>)
 800f7f0:	6013      	str	r3, [r2, #0]
}
 800f7f2:	bf00      	nop
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	20002318 	.word	0x20002318
 800f800:	20002304 	.word	0x20002304
 800f804:	20002320 	.word	0x20002320
 800f808:	2000231c 	.word	0x2000231c
 800f80c:	20001e1c 	.word	0x20001e1c
 800f810:	200022f8 	.word	0x200022f8
 800f814:	20001e20 	.word	0x20001e20
 800f818:	2000018c 	.word	0x2000018c

0800f81c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10a      	bne.n	800f842 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	60fb      	str	r3, [r7, #12]
}
 800f83e:	bf00      	nop
 800f840:	e7fe      	b.n	800f840 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f842:	4b07      	ldr	r3, [pc, #28]	; (800f860 <vTaskPlaceOnEventList+0x44>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	3318      	adds	r3, #24
 800f848:	4619      	mov	r1, r3
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7fe fc8f 	bl	800e16e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f850:	2101      	movs	r1, #1
 800f852:	6838      	ldr	r0, [r7, #0]
 800f854:	f000 fc12 	bl	801007c <prvAddCurrentTaskToDelayedList>
}
 800f858:	bf00      	nop
 800f85a:	3710      	adds	r7, #16
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	20001e1c 	.word	0x20001e1c

0800f864 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f864:	b580      	push	{r7, lr}
 800f866:	b086      	sub	sp, #24
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d10a      	bne.n	800f88c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f87a:	f383 8811 	msr	BASEPRI, r3
 800f87e:	f3bf 8f6f 	isb	sy
 800f882:	f3bf 8f4f 	dsb	sy
 800f886:	617b      	str	r3, [r7, #20]
}
 800f888:	bf00      	nop
 800f88a:	e7fe      	b.n	800f88a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f88c:	4b0a      	ldr	r3, [pc, #40]	; (800f8b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	3318      	adds	r3, #24
 800f892:	4619      	mov	r1, r3
 800f894:	68f8      	ldr	r0, [r7, #12]
 800f896:	f7fe fc46 	bl	800e126 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f8a6:	6879      	ldr	r1, [r7, #4]
 800f8a8:	68b8      	ldr	r0, [r7, #8]
 800f8aa:	f000 fbe7 	bl	801007c <prvAddCurrentTaskToDelayedList>
	}
 800f8ae:	bf00      	nop
 800f8b0:	3718      	adds	r7, #24
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	20001e1c 	.word	0x20001e1c

0800f8bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b086      	sub	sp, #24
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d10a      	bne.n	800f8e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d6:	f383 8811 	msr	BASEPRI, r3
 800f8da:	f3bf 8f6f 	isb	sy
 800f8de:	f3bf 8f4f 	dsb	sy
 800f8e2:	60fb      	str	r3, [r7, #12]
}
 800f8e4:	bf00      	nop
 800f8e6:	e7fe      	b.n	800f8e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	3318      	adds	r3, #24
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fe fc77 	bl	800e1e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8f2:	4b1e      	ldr	r3, [pc, #120]	; (800f96c <xTaskRemoveFromEventList+0xb0>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d11d      	bne.n	800f936 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	3304      	adds	r3, #4
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7fe fc6e 	bl	800e1e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f908:	4b19      	ldr	r3, [pc, #100]	; (800f970 <xTaskRemoveFromEventList+0xb4>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d903      	bls.n	800f918 <xTaskRemoveFromEventList+0x5c>
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f914:	4a16      	ldr	r2, [pc, #88]	; (800f970 <xTaskRemoveFromEventList+0xb4>)
 800f916:	6013      	str	r3, [r2, #0]
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f91c:	4613      	mov	r3, r2
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	4413      	add	r3, r2
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	4a13      	ldr	r2, [pc, #76]	; (800f974 <xTaskRemoveFromEventList+0xb8>)
 800f926:	441a      	add	r2, r3
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	3304      	adds	r3, #4
 800f92c:	4619      	mov	r1, r3
 800f92e:	4610      	mov	r0, r2
 800f930:	f7fe fbf9 	bl	800e126 <vListInsertEnd>
 800f934:	e005      	b.n	800f942 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	3318      	adds	r3, #24
 800f93a:	4619      	mov	r1, r3
 800f93c:	480e      	ldr	r0, [pc, #56]	; (800f978 <xTaskRemoveFromEventList+0xbc>)
 800f93e:	f7fe fbf2 	bl	800e126 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f946:	4b0d      	ldr	r3, [pc, #52]	; (800f97c <xTaskRemoveFromEventList+0xc0>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d905      	bls.n	800f95c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f950:	2301      	movs	r3, #1
 800f952:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f954:	4b0a      	ldr	r3, [pc, #40]	; (800f980 <xTaskRemoveFromEventList+0xc4>)
 800f956:	2201      	movs	r2, #1
 800f958:	601a      	str	r2, [r3, #0]
 800f95a:	e001      	b.n	800f960 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f95c:	2300      	movs	r3, #0
 800f95e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f960:	697b      	ldr	r3, [r7, #20]
}
 800f962:	4618      	mov	r0, r3
 800f964:	3718      	adds	r7, #24
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	20002318 	.word	0x20002318
 800f970:	200022f8 	.word	0x200022f8
 800f974:	20001e20 	.word	0x20001e20
 800f978:	200022b0 	.word	0x200022b0
 800f97c:	20001e1c 	.word	0x20001e1c
 800f980:	20002304 	.word	0x20002304

0800f984 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f98c:	4b06      	ldr	r3, [pc, #24]	; (800f9a8 <vTaskInternalSetTimeOutState+0x24>)
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f994:	4b05      	ldr	r3, [pc, #20]	; (800f9ac <vTaskInternalSetTimeOutState+0x28>)
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	605a      	str	r2, [r3, #4]
}
 800f99c:	bf00      	nop
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr
 800f9a8:	20002308 	.word	0x20002308
 800f9ac:	200022f4 	.word	0x200022f4

0800f9b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b088      	sub	sp, #32
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d10a      	bne.n	800f9d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c4:	f383 8811 	msr	BASEPRI, r3
 800f9c8:	f3bf 8f6f 	isb	sy
 800f9cc:	f3bf 8f4f 	dsb	sy
 800f9d0:	613b      	str	r3, [r7, #16]
}
 800f9d2:	bf00      	nop
 800f9d4:	e7fe      	b.n	800f9d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d10a      	bne.n	800f9f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e0:	f383 8811 	msr	BASEPRI, r3
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	f3bf 8f4f 	dsb	sy
 800f9ec:	60fb      	str	r3, [r7, #12]
}
 800f9ee:	bf00      	nop
 800f9f0:	e7fe      	b.n	800f9f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f9f2:	f001 f80f 	bl	8010a14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f9f6:	4b1d      	ldr	r3, [pc, #116]	; (800fa6c <xTaskCheckForTimeOut+0xbc>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	69ba      	ldr	r2, [r7, #24]
 800fa02:	1ad3      	subs	r3, r2, r3
 800fa04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa0e:	d102      	bne.n	800fa16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fa10:	2300      	movs	r3, #0
 800fa12:	61fb      	str	r3, [r7, #28]
 800fa14:	e023      	b.n	800fa5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	4b15      	ldr	r3, [pc, #84]	; (800fa70 <xTaskCheckForTimeOut+0xc0>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d007      	beq.n	800fa32 <xTaskCheckForTimeOut+0x82>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	69ba      	ldr	r2, [r7, #24]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d302      	bcc.n	800fa32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	61fb      	str	r3, [r7, #28]
 800fa30:	e015      	b.n	800fa5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	697a      	ldr	r2, [r7, #20]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d20b      	bcs.n	800fa54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	1ad2      	subs	r2, r2, r3
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7ff ff9b 	bl	800f984 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	61fb      	str	r3, [r7, #28]
 800fa52:	e004      	b.n	800fa5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	2200      	movs	r2, #0
 800fa58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa5e:	f001 f809 	bl	8010a74 <vPortExitCritical>

	return xReturn;
 800fa62:	69fb      	ldr	r3, [r7, #28]
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3720      	adds	r7, #32
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	200022f4 	.word	0x200022f4
 800fa70:	20002308 	.word	0x20002308

0800fa74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa74:	b480      	push	{r7}
 800fa76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa78:	4b03      	ldr	r3, [pc, #12]	; (800fa88 <vTaskMissedYield+0x14>)
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	601a      	str	r2, [r3, #0]
}
 800fa7e:	bf00      	nop
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr
 800fa88:	20002304 	.word	0x20002304

0800fa8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b082      	sub	sp, #8
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fa94:	f000 f854 	bl	800fb40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa98:	4b07      	ldr	r3, [pc, #28]	; (800fab8 <prvIdleTask+0x2c>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d907      	bls.n	800fab0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800faa0:	4b06      	ldr	r3, [pc, #24]	; (800fabc <prvIdleTask+0x30>)
 800faa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faa6:	601a      	str	r2, [r3, #0]
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fab0:	f7f1 feea 	bl	8001888 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fab4:	e7ee      	b.n	800fa94 <prvIdleTask+0x8>
 800fab6:	bf00      	nop
 800fab8:	20001e20 	.word	0x20001e20
 800fabc:	e000ed04 	.word	0xe000ed04

0800fac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fac6:	2300      	movs	r3, #0
 800fac8:	607b      	str	r3, [r7, #4]
 800faca:	e00c      	b.n	800fae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	4613      	mov	r3, r2
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	4413      	add	r3, r2
 800fad4:	009b      	lsls	r3, r3, #2
 800fad6:	4a12      	ldr	r2, [pc, #72]	; (800fb20 <prvInitialiseTaskLists+0x60>)
 800fad8:	4413      	add	r3, r2
 800fada:	4618      	mov	r0, r3
 800fadc:	f7fe faf6 	bl	800e0cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	3301      	adds	r3, #1
 800fae4:	607b      	str	r3, [r7, #4]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2b37      	cmp	r3, #55	; 0x37
 800faea:	d9ef      	bls.n	800facc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800faec:	480d      	ldr	r0, [pc, #52]	; (800fb24 <prvInitialiseTaskLists+0x64>)
 800faee:	f7fe faed 	bl	800e0cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800faf2:	480d      	ldr	r0, [pc, #52]	; (800fb28 <prvInitialiseTaskLists+0x68>)
 800faf4:	f7fe faea 	bl	800e0cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800faf8:	480c      	ldr	r0, [pc, #48]	; (800fb2c <prvInitialiseTaskLists+0x6c>)
 800fafa:	f7fe fae7 	bl	800e0cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fafe:	480c      	ldr	r0, [pc, #48]	; (800fb30 <prvInitialiseTaskLists+0x70>)
 800fb00:	f7fe fae4 	bl	800e0cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fb04:	480b      	ldr	r0, [pc, #44]	; (800fb34 <prvInitialiseTaskLists+0x74>)
 800fb06:	f7fe fae1 	bl	800e0cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb0a:	4b0b      	ldr	r3, [pc, #44]	; (800fb38 <prvInitialiseTaskLists+0x78>)
 800fb0c:	4a05      	ldr	r2, [pc, #20]	; (800fb24 <prvInitialiseTaskLists+0x64>)
 800fb0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb10:	4b0a      	ldr	r3, [pc, #40]	; (800fb3c <prvInitialiseTaskLists+0x7c>)
 800fb12:	4a05      	ldr	r2, [pc, #20]	; (800fb28 <prvInitialiseTaskLists+0x68>)
 800fb14:	601a      	str	r2, [r3, #0]
}
 800fb16:	bf00      	nop
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	20001e20 	.word	0x20001e20
 800fb24:	20002280 	.word	0x20002280
 800fb28:	20002294 	.word	0x20002294
 800fb2c:	200022b0 	.word	0x200022b0
 800fb30:	200022c4 	.word	0x200022c4
 800fb34:	200022dc 	.word	0x200022dc
 800fb38:	200022a8 	.word	0x200022a8
 800fb3c:	200022ac 	.word	0x200022ac

0800fb40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb46:	e019      	b.n	800fb7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb48:	f000 ff64 	bl	8010a14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb4c:	4b10      	ldr	r3, [pc, #64]	; (800fb90 <prvCheckTasksWaitingTermination+0x50>)
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	3304      	adds	r3, #4
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fe fb41 	bl	800e1e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb5e:	4b0d      	ldr	r3, [pc, #52]	; (800fb94 <prvCheckTasksWaitingTermination+0x54>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3b01      	subs	r3, #1
 800fb64:	4a0b      	ldr	r2, [pc, #44]	; (800fb94 <prvCheckTasksWaitingTermination+0x54>)
 800fb66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb68:	4b0b      	ldr	r3, [pc, #44]	; (800fb98 <prvCheckTasksWaitingTermination+0x58>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	4a0a      	ldr	r2, [pc, #40]	; (800fb98 <prvCheckTasksWaitingTermination+0x58>)
 800fb70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb72:	f000 ff7f 	bl	8010a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 f8e4 	bl	800fd44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb7c:	4b06      	ldr	r3, [pc, #24]	; (800fb98 <prvCheckTasksWaitingTermination+0x58>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d1e1      	bne.n	800fb48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb84:	bf00      	nop
 800fb86:	bf00      	nop
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	200022c4 	.word	0x200022c4
 800fb94:	200022f0 	.word	0x200022f0
 800fb98:	200022d8 	.word	0x200022d8

0800fb9c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b086      	sub	sp, #24
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	607a      	str	r2, [r7, #4]
 800fba8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d102      	bne.n	800fbb6 <vTaskGetInfo+0x1a>
 800fbb0:	4b2c      	ldr	r3, [pc, #176]	; (800fc64 <vTaskGetInfo+0xc8>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	e000      	b.n	800fbb8 <vTaskGetInfo+0x1c>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	697a      	ldr	r2, [r7, #20]
 800fbbe:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800fbf2:	78fb      	ldrb	r3, [r7, #3]
 800fbf4:	2b05      	cmp	r3, #5
 800fbf6:	d01a      	beq.n	800fc2e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800fbf8:	4b1a      	ldr	r3, [pc, #104]	; (800fc64 <vTaskGetInfo+0xc8>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	697a      	ldr	r2, [r7, #20]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d103      	bne.n	800fc0a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	2200      	movs	r2, #0
 800fc06:	731a      	strb	r2, [r3, #12]
 800fc08:	e018      	b.n	800fc3c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	78fa      	ldrb	r2, [r7, #3]
 800fc0e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800fc10:	78fb      	ldrb	r3, [r7, #3]
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	d112      	bne.n	800fc3c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800fc16:	f7ff fb7b 	bl	800f310 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d002      	beq.n	800fc28 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	2202      	movs	r2, #2
 800fc26:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800fc28:	f7ff fb80 	bl	800f32c <xTaskResumeAll>
 800fc2c:	e006      	b.n	800fc3c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800fc2e:	6978      	ldr	r0, [r7, #20]
 800fc30:	f7ff fa96 	bl	800f160 <eTaskGetState>
 800fc34:	4603      	mov	r3, r0
 800fc36:	461a      	mov	r2, r3
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d009      	beq.n	800fc56 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc46:	4618      	mov	r0, r3
 800fc48:	f000 f860 	bl	800fd0c <prvTaskCheckFreeStackSpace>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	461a      	mov	r2, r3
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800fc54:	e002      	b.n	800fc5c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	841a      	strh	r2, [r3, #32]
	}
 800fc5c:	bf00      	nop
 800fc5e:	3718      	adds	r7, #24
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	20001e1c 	.word	0x20001e1c

0800fc68 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b08a      	sub	sp, #40	; 0x28
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	4613      	mov	r3, r2
 800fc74:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800fc76:	2300      	movs	r3, #0
 800fc78:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d03f      	beq.n	800fd02 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	623b      	str	r3, [r7, #32]
 800fc86:	6a3b      	ldr	r3, [r7, #32]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	685a      	ldr	r2, [r3, #4]
 800fc8c:	6a3b      	ldr	r3, [r7, #32]
 800fc8e:	605a      	str	r2, [r3, #4]
 800fc90:	6a3b      	ldr	r3, [r7, #32]
 800fc92:	685a      	ldr	r2, [r3, #4]
 800fc94:	6a3b      	ldr	r3, [r7, #32]
 800fc96:	3308      	adds	r3, #8
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d104      	bne.n	800fca6 <prvListTasksWithinSingleList+0x3e>
 800fc9c:	6a3b      	ldr	r3, [r7, #32]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	685a      	ldr	r2, [r3, #4]
 800fca2:	6a3b      	ldr	r3, [r7, #32]
 800fca4:	605a      	str	r2, [r3, #4]
 800fca6:	6a3b      	ldr	r3, [r7, #32]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	61bb      	str	r3, [r7, #24]
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	685a      	ldr	r2, [r3, #4]
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	605a      	str	r2, [r3, #4]
 800fcbc:	69bb      	ldr	r3, [r7, #24]
 800fcbe:	685a      	ldr	r2, [r3, #4]
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	3308      	adds	r3, #8
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d104      	bne.n	800fcd2 <prvListTasksWithinSingleList+0x6a>
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	685a      	ldr	r2, [r3, #4]
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	605a      	str	r2, [r3, #4]
 800fcd2:	69bb      	ldr	r3, [r7, #24]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800fcda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcdc:	4613      	mov	r3, r2
 800fcde:	00db      	lsls	r3, r3, #3
 800fce0:	4413      	add	r3, r2
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	461a      	mov	r2, r3
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	1899      	adds	r1, r3, r2
 800fcea:	79fb      	ldrb	r3, [r7, #7]
 800fcec:	2201      	movs	r2, #1
 800fcee:	6978      	ldr	r0, [r7, #20]
 800fcf0:	f7ff ff54 	bl	800fb9c <vTaskGetInfo>
				uxTask++;
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800fcfa:	697a      	ldr	r2, [r7, #20]
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d1d5      	bne.n	800fcae <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800fd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3728      	adds	r7, #40	; 0x28
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b085      	sub	sp, #20
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800fd14:	2300      	movs	r3, #0
 800fd16:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fd18:	e005      	b.n	800fd26 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	3301      	adds	r3, #1
 800fd24:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	2ba5      	cmp	r3, #165	; 0xa5
 800fd2c:	d0f5      	beq.n	800fd1a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	089b      	lsrs	r3, r3, #2
 800fd32:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	b29b      	uxth	r3, r3
	}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3714      	adds	r7, #20
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	3358      	adds	r3, #88	; 0x58
 800fd50:	4618      	mov	r0, r3
 800fd52:	f001 ffb9 	bl	8011cc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d108      	bne.n	800fd72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd64:	4618      	mov	r0, r3
 800fd66:	f001 f843 	bl	8010df0 <vPortFree>
				vPortFree( pxTCB );
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f001 f840 	bl	8010df0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fd70:	e018      	b.n	800fda4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d103      	bne.n	800fd84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f001 f837 	bl	8010df0 <vPortFree>
	}
 800fd82:	e00f      	b.n	800fda4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d00a      	beq.n	800fda4 <prvDeleteTCB+0x60>
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	60fb      	str	r3, [r7, #12]
}
 800fda0:	bf00      	nop
 800fda2:	e7fe      	b.n	800fda2 <prvDeleteTCB+0x5e>
	}
 800fda4:	bf00      	nop
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdb2:	4b0c      	ldr	r3, [pc, #48]	; (800fde4 <prvResetNextTaskUnblockTime+0x38>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d104      	bne.n	800fdc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fdbc:	4b0a      	ldr	r3, [pc, #40]	; (800fde8 <prvResetNextTaskUnblockTime+0x3c>)
 800fdbe:	f04f 32ff 	mov.w	r2, #4294967295
 800fdc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fdc4:	e008      	b.n	800fdd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdc6:	4b07      	ldr	r3, [pc, #28]	; (800fde4 <prvResetNextTaskUnblockTime+0x38>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	4a04      	ldr	r2, [pc, #16]	; (800fde8 <prvResetNextTaskUnblockTime+0x3c>)
 800fdd6:	6013      	str	r3, [r2, #0]
}
 800fdd8:	bf00      	nop
 800fdda:	370c      	adds	r7, #12
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr
 800fde4:	200022a8 	.word	0x200022a8
 800fde8:	20002310 	.word	0x20002310

0800fdec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fdf2:	4b0b      	ldr	r3, [pc, #44]	; (800fe20 <xTaskGetSchedulerState+0x34>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d102      	bne.n	800fe00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	607b      	str	r3, [r7, #4]
 800fdfe:	e008      	b.n	800fe12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe00:	4b08      	ldr	r3, [pc, #32]	; (800fe24 <xTaskGetSchedulerState+0x38>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d102      	bne.n	800fe0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe08:	2302      	movs	r3, #2
 800fe0a:	607b      	str	r3, [r7, #4]
 800fe0c:	e001      	b.n	800fe12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe12:	687b      	ldr	r3, [r7, #4]
	}
 800fe14:	4618      	mov	r0, r3
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr
 800fe20:	200022fc 	.word	0x200022fc
 800fe24:	20002318 	.word	0x20002318

0800fe28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b086      	sub	sp, #24
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fe34:	2300      	movs	r3, #0
 800fe36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d056      	beq.n	800feec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fe3e:	4b2e      	ldr	r3, [pc, #184]	; (800fef8 <xTaskPriorityDisinherit+0xd0>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	693a      	ldr	r2, [r7, #16]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d00a      	beq.n	800fe5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fe48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4c:	f383 8811 	msr	BASEPRI, r3
 800fe50:	f3bf 8f6f 	isb	sy
 800fe54:	f3bf 8f4f 	dsb	sy
 800fe58:	60fb      	str	r3, [r7, #12]
}
 800fe5a:	bf00      	nop
 800fe5c:	e7fe      	b.n	800fe5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d10a      	bne.n	800fe7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fe66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe6a:	f383 8811 	msr	BASEPRI, r3
 800fe6e:	f3bf 8f6f 	isb	sy
 800fe72:	f3bf 8f4f 	dsb	sy
 800fe76:	60bb      	str	r3, [r7, #8]
}
 800fe78:	bf00      	nop
 800fe7a:	e7fe      	b.n	800fe7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe80:	1e5a      	subs	r2, r3, #1
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d02c      	beq.n	800feec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d128      	bne.n	800feec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	3304      	adds	r3, #4
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fe f99e 	bl	800e1e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800febc:	4b0f      	ldr	r3, [pc, #60]	; (800fefc <xTaskPriorityDisinherit+0xd4>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d903      	bls.n	800fecc <xTaskPriorityDisinherit+0xa4>
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec8:	4a0c      	ldr	r2, [pc, #48]	; (800fefc <xTaskPriorityDisinherit+0xd4>)
 800feca:	6013      	str	r3, [r2, #0]
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed0:	4613      	mov	r3, r2
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	4413      	add	r3, r2
 800fed6:	009b      	lsls	r3, r3, #2
 800fed8:	4a09      	ldr	r2, [pc, #36]	; (800ff00 <xTaskPriorityDisinherit+0xd8>)
 800feda:	441a      	add	r2, r3
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	3304      	adds	r3, #4
 800fee0:	4619      	mov	r1, r3
 800fee2:	4610      	mov	r0, r2
 800fee4:	f7fe f91f 	bl	800e126 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fee8:	2301      	movs	r3, #1
 800feea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800feec:	697b      	ldr	r3, [r7, #20]
	}
 800feee:	4618      	mov	r0, r3
 800fef0:	3718      	adds	r7, #24
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	20001e1c 	.word	0x20001e1c
 800fefc:	200022f8 	.word	0x200022f8
 800ff00:	20001e20 	.word	0x20001e20

0800ff04 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ff0e:	6839      	ldr	r1, [r7, #0]
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f001 ff65 	bl	8011de0 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7f0 f962 	bl	80001e0 <strlen>
 800ff1c:	60f8      	str	r0, [r7, #12]
 800ff1e:	e007      	b.n	800ff30 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	4413      	add	r3, r2
 800ff26:	2220      	movs	r2, #32
 800ff28:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	60fb      	str	r3, [r7, #12]
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b0e      	cmp	r3, #14
 800ff34:	d9f4      	bls.n	800ff20 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	4413      	add	r3, r2
	}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
	...

0800ff50 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ff50:	b590      	push	{r4, r7, lr}
 800ff52:	b089      	sub	sp, #36	; 0x24
 800ff54:	af02      	add	r7, sp, #8
 800ff56:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ff5e:	4b45      	ldr	r3, [pc, #276]	; (8010074 <vTaskList+0x124>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800ff64:	4b43      	ldr	r3, [pc, #268]	; (8010074 <vTaskList+0x124>)
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	4613      	mov	r3, r2
 800ff6a:	00db      	lsls	r3, r3, #3
 800ff6c:	4413      	add	r3, r2
 800ff6e:	009b      	lsls	r3, r3, #2
 800ff70:	4618      	mov	r0, r3
 800ff72:	f000 fe71 	bl	8010c58 <pvPortMalloc>
 800ff76:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d076      	beq.n	801006c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ff7e:	2200      	movs	r2, #0
 800ff80:	68f9      	ldr	r1, [r7, #12]
 800ff82:	68b8      	ldr	r0, [r7, #8]
 800ff84:	f7ff fa80 	bl	800f488 <uxTaskGetSystemState>
 800ff88:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	617b      	str	r3, [r7, #20]
 800ff8e:	e066      	b.n	801005e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff90:	697a      	ldr	r2, [r7, #20]
 800ff92:	4613      	mov	r3, r2
 800ff94:	00db      	lsls	r3, r3, #3
 800ff96:	4413      	add	r3, r2
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	4413      	add	r3, r2
 800ffa0:	7b1b      	ldrb	r3, [r3, #12]
 800ffa2:	2b04      	cmp	r3, #4
 800ffa4:	d81b      	bhi.n	800ffde <vTaskList+0x8e>
 800ffa6:	a201      	add	r2, pc, #4	; (adr r2, 800ffac <vTaskList+0x5c>)
 800ffa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffac:	0800ffc1 	.word	0x0800ffc1
 800ffb0:	0800ffc7 	.word	0x0800ffc7
 800ffb4:	0800ffcd 	.word	0x0800ffcd
 800ffb8:	0800ffd3 	.word	0x0800ffd3
 800ffbc:	0800ffd9 	.word	0x0800ffd9
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800ffc0:	2358      	movs	r3, #88	; 0x58
 800ffc2:	74fb      	strb	r3, [r7, #19]
										break;
 800ffc4:	e00e      	b.n	800ffe4 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800ffc6:	2352      	movs	r3, #82	; 0x52
 800ffc8:	74fb      	strb	r3, [r7, #19]
										break;
 800ffca:	e00b      	b.n	800ffe4 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ffcc:	2342      	movs	r3, #66	; 0x42
 800ffce:	74fb      	strb	r3, [r7, #19]
										break;
 800ffd0:	e008      	b.n	800ffe4 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ffd2:	2353      	movs	r3, #83	; 0x53
 800ffd4:	74fb      	strb	r3, [r7, #19]
										break;
 800ffd6:	e005      	b.n	800ffe4 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ffd8:	2344      	movs	r3, #68	; 0x44
 800ffda:	74fb      	strb	r3, [r7, #19]
										break;
 800ffdc:	e002      	b.n	800ffe4 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	74fb      	strb	r3, [r7, #19]
										break;
 800ffe2:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ffe4:	697a      	ldr	r2, [r7, #20]
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	00db      	lsls	r3, r3, #3
 800ffea:	4413      	add	r3, r2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	461a      	mov	r2, r3
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	4413      	add	r3, r2
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	4619      	mov	r1, r3
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f7ff ff83 	bl	800ff04 <prvWriteNameToBuffer>
 800fffe:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8010000:	7cf9      	ldrb	r1, [r7, #19]
 8010002:	697a      	ldr	r2, [r7, #20]
 8010004:	4613      	mov	r3, r2
 8010006:	00db      	lsls	r3, r3, #3
 8010008:	4413      	add	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	461a      	mov	r2, r3
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	4413      	add	r3, r2
 8010012:	6918      	ldr	r0, [r3, #16]
 8010014:	697a      	ldr	r2, [r7, #20]
 8010016:	4613      	mov	r3, r2
 8010018:	00db      	lsls	r3, r3, #3
 801001a:	4413      	add	r3, r2
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	461a      	mov	r2, r3
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	4413      	add	r3, r2
 8010024:	8c1b      	ldrh	r3, [r3, #32]
 8010026:	461c      	mov	r4, r3
 8010028:	697a      	ldr	r2, [r7, #20]
 801002a:	4613      	mov	r3, r2
 801002c:	00db      	lsls	r3, r3, #3
 801002e:	4413      	add	r3, r2
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	461a      	mov	r2, r3
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	4413      	add	r3, r2
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	9301      	str	r3, [sp, #4]
 801003c:	9400      	str	r4, [sp, #0]
 801003e:	4603      	mov	r3, r0
 8010040:	460a      	mov	r2, r1
 8010042:	490d      	ldr	r1, [pc, #52]	; (8010078 <vTaskList+0x128>)
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f001 feab 	bl	8011da0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f7f0 f8c8 	bl	80001e0 <strlen>
 8010050:	4602      	mov	r2, r0
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4413      	add	r3, r2
 8010056:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	3301      	adds	r3, #1
 801005c:	617b      	str	r3, [r7, #20]
 801005e:	697a      	ldr	r2, [r7, #20]
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	429a      	cmp	r2, r3
 8010064:	d394      	bcc.n	800ff90 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8010066:	68b8      	ldr	r0, [r7, #8]
 8010068:	f000 fec2 	bl	8010df0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801006c:	bf00      	nop
 801006e:	371c      	adds	r7, #28
 8010070:	46bd      	mov	sp, r7
 8010072:	bd90      	pop	{r4, r7, pc}
 8010074:	200022f0 	.word	0x200022f0
 8010078:	080128a0 	.word	0x080128a0

0801007c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b084      	sub	sp, #16
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010086:	4b21      	ldr	r3, [pc, #132]	; (801010c <prvAddCurrentTaskToDelayedList+0x90>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801008c:	4b20      	ldr	r3, [pc, #128]	; (8010110 <prvAddCurrentTaskToDelayedList+0x94>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	3304      	adds	r3, #4
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe f8a4 	bl	800e1e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801009e:	d10a      	bne.n	80100b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d007      	beq.n	80100b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100a6:	4b1a      	ldr	r3, [pc, #104]	; (8010110 <prvAddCurrentTaskToDelayedList+0x94>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3304      	adds	r3, #4
 80100ac:	4619      	mov	r1, r3
 80100ae:	4819      	ldr	r0, [pc, #100]	; (8010114 <prvAddCurrentTaskToDelayedList+0x98>)
 80100b0:	f7fe f839 	bl	800e126 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80100b4:	e026      	b.n	8010104 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80100b6:	68fa      	ldr	r2, [r7, #12]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	4413      	add	r3, r2
 80100bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80100be:	4b14      	ldr	r3, [pc, #80]	; (8010110 <prvAddCurrentTaskToDelayedList+0x94>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d209      	bcs.n	80100e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100ce:	4b12      	ldr	r3, [pc, #72]	; (8010118 <prvAddCurrentTaskToDelayedList+0x9c>)
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	4b0f      	ldr	r3, [pc, #60]	; (8010110 <prvAddCurrentTaskToDelayedList+0x94>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	3304      	adds	r3, #4
 80100d8:	4619      	mov	r1, r3
 80100da:	4610      	mov	r0, r2
 80100dc:	f7fe f847 	bl	800e16e <vListInsert>
}
 80100e0:	e010      	b.n	8010104 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100e2:	4b0e      	ldr	r3, [pc, #56]	; (801011c <prvAddCurrentTaskToDelayedList+0xa0>)
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	4b0a      	ldr	r3, [pc, #40]	; (8010110 <prvAddCurrentTaskToDelayedList+0x94>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	3304      	adds	r3, #4
 80100ec:	4619      	mov	r1, r3
 80100ee:	4610      	mov	r0, r2
 80100f0:	f7fe f83d 	bl	800e16e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80100f4:	4b0a      	ldr	r3, [pc, #40]	; (8010120 <prvAddCurrentTaskToDelayedList+0xa4>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d202      	bcs.n	8010104 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80100fe:	4a08      	ldr	r2, [pc, #32]	; (8010120 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	6013      	str	r3, [r2, #0]
}
 8010104:	bf00      	nop
 8010106:	3710      	adds	r7, #16
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}
 801010c:	200022f4 	.word	0x200022f4
 8010110:	20001e1c 	.word	0x20001e1c
 8010114:	200022dc 	.word	0x200022dc
 8010118:	200022ac 	.word	0x200022ac
 801011c:	200022a8 	.word	0x200022a8
 8010120:	20002310 	.word	0x20002310

08010124 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08a      	sub	sp, #40	; 0x28
 8010128:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801012a:	2300      	movs	r3, #0
 801012c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801012e:	f000 fb07 	bl	8010740 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010132:	4b1c      	ldr	r3, [pc, #112]	; (80101a4 <xTimerCreateTimerTask+0x80>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d021      	beq.n	801017e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801013a:	2300      	movs	r3, #0
 801013c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801013e:	2300      	movs	r3, #0
 8010140:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010142:	1d3a      	adds	r2, r7, #4
 8010144:	f107 0108 	add.w	r1, r7, #8
 8010148:	f107 030c 	add.w	r3, r7, #12
 801014c:	4618      	mov	r0, r3
 801014e:	f7fd ffa3 	bl	800e098 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010152:	6879      	ldr	r1, [r7, #4]
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	68fa      	ldr	r2, [r7, #12]
 8010158:	9202      	str	r2, [sp, #8]
 801015a:	9301      	str	r3, [sp, #4]
 801015c:	2302      	movs	r3, #2
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	2300      	movs	r3, #0
 8010162:	460a      	mov	r2, r1
 8010164:	4910      	ldr	r1, [pc, #64]	; (80101a8 <xTimerCreateTimerTask+0x84>)
 8010166:	4811      	ldr	r0, [pc, #68]	; (80101ac <xTimerCreateTimerTask+0x88>)
 8010168:	f7fe fe0a 	bl	800ed80 <xTaskCreateStatic>
 801016c:	4603      	mov	r3, r0
 801016e:	4a10      	ldr	r2, [pc, #64]	; (80101b0 <xTimerCreateTimerTask+0x8c>)
 8010170:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010172:	4b0f      	ldr	r3, [pc, #60]	; (80101b0 <xTimerCreateTimerTask+0x8c>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d001      	beq.n	801017e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801017a:	2301      	movs	r3, #1
 801017c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d10a      	bne.n	801019a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010188:	f383 8811 	msr	BASEPRI, r3
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	f3bf 8f4f 	dsb	sy
 8010194:	613b      	str	r3, [r7, #16]
}
 8010196:	bf00      	nop
 8010198:	e7fe      	b.n	8010198 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801019a:	697b      	ldr	r3, [r7, #20]
}
 801019c:	4618      	mov	r0, r3
 801019e:	3718      	adds	r7, #24
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	20002354 	.word	0x20002354
 80101a8:	080128c8 	.word	0x080128c8
 80101ac:	080102e9 	.word	0x080102e9
 80101b0:	20002358 	.word	0x20002358

080101b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b08a      	sub	sp, #40	; 0x28
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	607a      	str	r2, [r7, #4]
 80101c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80101c2:	2300      	movs	r3, #0
 80101c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d10a      	bne.n	80101e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80101cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d0:	f383 8811 	msr	BASEPRI, r3
 80101d4:	f3bf 8f6f 	isb	sy
 80101d8:	f3bf 8f4f 	dsb	sy
 80101dc:	623b      	str	r3, [r7, #32]
}
 80101de:	bf00      	nop
 80101e0:	e7fe      	b.n	80101e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80101e2:	4b1a      	ldr	r3, [pc, #104]	; (801024c <xTimerGenericCommand+0x98>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d02a      	beq.n	8010240 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	2b05      	cmp	r3, #5
 80101fa:	dc18      	bgt.n	801022e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80101fc:	f7ff fdf6 	bl	800fdec <xTaskGetSchedulerState>
 8010200:	4603      	mov	r3, r0
 8010202:	2b02      	cmp	r3, #2
 8010204:	d109      	bne.n	801021a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010206:	4b11      	ldr	r3, [pc, #68]	; (801024c <xTimerGenericCommand+0x98>)
 8010208:	6818      	ldr	r0, [r3, #0]
 801020a:	f107 0110 	add.w	r1, r7, #16
 801020e:	2300      	movs	r3, #0
 8010210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010212:	f7fe f94d 	bl	800e4b0 <xQueueGenericSend>
 8010216:	6278      	str	r0, [r7, #36]	; 0x24
 8010218:	e012      	b.n	8010240 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801021a:	4b0c      	ldr	r3, [pc, #48]	; (801024c <xTimerGenericCommand+0x98>)
 801021c:	6818      	ldr	r0, [r3, #0]
 801021e:	f107 0110 	add.w	r1, r7, #16
 8010222:	2300      	movs	r3, #0
 8010224:	2200      	movs	r2, #0
 8010226:	f7fe f943 	bl	800e4b0 <xQueueGenericSend>
 801022a:	6278      	str	r0, [r7, #36]	; 0x24
 801022c:	e008      	b.n	8010240 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801022e:	4b07      	ldr	r3, [pc, #28]	; (801024c <xTimerGenericCommand+0x98>)
 8010230:	6818      	ldr	r0, [r3, #0]
 8010232:	f107 0110 	add.w	r1, r7, #16
 8010236:	2300      	movs	r3, #0
 8010238:	683a      	ldr	r2, [r7, #0]
 801023a:	f7fe fa37 	bl	800e6ac <xQueueGenericSendFromISR>
 801023e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010242:	4618      	mov	r0, r3
 8010244:	3728      	adds	r7, #40	; 0x28
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	20002354 	.word	0x20002354

08010250 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b088      	sub	sp, #32
 8010254:	af02      	add	r7, sp, #8
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801025a:	4b22      	ldr	r3, [pc, #136]	; (80102e4 <prvProcessExpiredTimer+0x94>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	3304      	adds	r3, #4
 8010268:	4618      	mov	r0, r3
 801026a:	f7fd ffb9 	bl	800e1e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010274:	f003 0304 	and.w	r3, r3, #4
 8010278:	2b00      	cmp	r3, #0
 801027a:	d022      	beq.n	80102c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	699a      	ldr	r2, [r3, #24]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	18d1      	adds	r1, r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	683a      	ldr	r2, [r7, #0]
 8010288:	6978      	ldr	r0, [r7, #20]
 801028a:	f000 f8d1 	bl	8010430 <prvInsertTimerInActiveList>
 801028e:	4603      	mov	r3, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	d01f      	beq.n	80102d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010294:	2300      	movs	r3, #0
 8010296:	9300      	str	r3, [sp, #0]
 8010298:	2300      	movs	r3, #0
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	2100      	movs	r1, #0
 801029e:	6978      	ldr	r0, [r7, #20]
 80102a0:	f7ff ff88 	bl	80101b4 <xTimerGenericCommand>
 80102a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d113      	bne.n	80102d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80102ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b0:	f383 8811 	msr	BASEPRI, r3
 80102b4:	f3bf 8f6f 	isb	sy
 80102b8:	f3bf 8f4f 	dsb	sy
 80102bc:	60fb      	str	r3, [r7, #12]
}
 80102be:	bf00      	nop
 80102c0:	e7fe      	b.n	80102c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102c8:	f023 0301 	bic.w	r3, r3, #1
 80102cc:	b2da      	uxtb	r2, r3
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	6a1b      	ldr	r3, [r3, #32]
 80102d8:	6978      	ldr	r0, [r7, #20]
 80102da:	4798      	blx	r3
}
 80102dc:	bf00      	nop
 80102de:	3718      	adds	r7, #24
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	2000234c 	.word	0x2000234c

080102e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b084      	sub	sp, #16
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80102f0:	f107 0308 	add.w	r3, r7, #8
 80102f4:	4618      	mov	r0, r3
 80102f6:	f000 f857 	bl	80103a8 <prvGetNextExpireTime>
 80102fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	4619      	mov	r1, r3
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f000 f803 	bl	801030c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010306:	f000 f8d5 	bl	80104b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801030a:	e7f1      	b.n	80102f0 <prvTimerTask+0x8>

0801030c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010316:	f7fe fffb 	bl	800f310 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801031a:	f107 0308 	add.w	r3, r7, #8
 801031e:	4618      	mov	r0, r3
 8010320:	f000 f866 	bl	80103f0 <prvSampleTimeNow>
 8010324:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d130      	bne.n	801038e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d10a      	bne.n	8010348 <prvProcessTimerOrBlockTask+0x3c>
 8010332:	687a      	ldr	r2, [r7, #4]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	429a      	cmp	r2, r3
 8010338:	d806      	bhi.n	8010348 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801033a:	f7fe fff7 	bl	800f32c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801033e:	68f9      	ldr	r1, [r7, #12]
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f7ff ff85 	bl	8010250 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010346:	e024      	b.n	8010392 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d008      	beq.n	8010360 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801034e:	4b13      	ldr	r3, [pc, #76]	; (801039c <prvProcessTimerOrBlockTask+0x90>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d101      	bne.n	801035c <prvProcessTimerOrBlockTask+0x50>
 8010358:	2301      	movs	r3, #1
 801035a:	e000      	b.n	801035e <prvProcessTimerOrBlockTask+0x52>
 801035c:	2300      	movs	r3, #0
 801035e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010360:	4b0f      	ldr	r3, [pc, #60]	; (80103a0 <prvProcessTimerOrBlockTask+0x94>)
 8010362:	6818      	ldr	r0, [r3, #0]
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	1ad3      	subs	r3, r2, r3
 801036a:	683a      	ldr	r2, [r7, #0]
 801036c:	4619      	mov	r1, r3
 801036e:	f7fe fcd3 	bl	800ed18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010372:	f7fe ffdb 	bl	800f32c <xTaskResumeAll>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d10a      	bne.n	8010392 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801037c:	4b09      	ldr	r3, [pc, #36]	; (80103a4 <prvProcessTimerOrBlockTask+0x98>)
 801037e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	f3bf 8f6f 	isb	sy
}
 801038c:	e001      	b.n	8010392 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801038e:	f7fe ffcd 	bl	800f32c <xTaskResumeAll>
}
 8010392:	bf00      	nop
 8010394:	3710      	adds	r7, #16
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	20002350 	.word	0x20002350
 80103a0:	20002354 	.word	0x20002354
 80103a4:	e000ed04 	.word	0xe000ed04

080103a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80103a8:	b480      	push	{r7}
 80103aa:	b085      	sub	sp, #20
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80103b0:	4b0e      	ldr	r3, [pc, #56]	; (80103ec <prvGetNextExpireTime+0x44>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d101      	bne.n	80103be <prvGetNextExpireTime+0x16>
 80103ba:	2201      	movs	r2, #1
 80103bc:	e000      	b.n	80103c0 <prvGetNextExpireTime+0x18>
 80103be:	2200      	movs	r2, #0
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d105      	bne.n	80103d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103cc:	4b07      	ldr	r3, [pc, #28]	; (80103ec <prvGetNextExpireTime+0x44>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	68db      	ldr	r3, [r3, #12]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	60fb      	str	r3, [r7, #12]
 80103d6:	e001      	b.n	80103dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80103d8:	2300      	movs	r3, #0
 80103da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80103dc:	68fb      	ldr	r3, [r7, #12]
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3714      	adds	r7, #20
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	2000234c 	.word	0x2000234c

080103f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80103f8:	f7ff f836 	bl	800f468 <xTaskGetTickCount>
 80103fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80103fe:	4b0b      	ldr	r3, [pc, #44]	; (801042c <prvSampleTimeNow+0x3c>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	68fa      	ldr	r2, [r7, #12]
 8010404:	429a      	cmp	r2, r3
 8010406:	d205      	bcs.n	8010414 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010408:	f000 f936 	bl	8010678 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	601a      	str	r2, [r3, #0]
 8010412:	e002      	b.n	801041a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801041a:	4a04      	ldr	r2, [pc, #16]	; (801042c <prvSampleTimeNow+0x3c>)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010420:	68fb      	ldr	r3, [r7, #12]
}
 8010422:	4618      	mov	r0, r3
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	2000235c 	.word	0x2000235c

08010430 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b086      	sub	sp, #24
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	607a      	str	r2, [r7, #4]
 801043c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801043e:	2300      	movs	r3, #0
 8010440:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	68ba      	ldr	r2, [r7, #8]
 8010446:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801044e:	68ba      	ldr	r2, [r7, #8]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	429a      	cmp	r2, r3
 8010454:	d812      	bhi.n	801047c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	1ad2      	subs	r2, r2, r3
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	699b      	ldr	r3, [r3, #24]
 8010460:	429a      	cmp	r2, r3
 8010462:	d302      	bcc.n	801046a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010464:	2301      	movs	r3, #1
 8010466:	617b      	str	r3, [r7, #20]
 8010468:	e01b      	b.n	80104a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801046a:	4b10      	ldr	r3, [pc, #64]	; (80104ac <prvInsertTimerInActiveList+0x7c>)
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	3304      	adds	r3, #4
 8010472:	4619      	mov	r1, r3
 8010474:	4610      	mov	r0, r2
 8010476:	f7fd fe7a 	bl	800e16e <vListInsert>
 801047a:	e012      	b.n	80104a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801047c:	687a      	ldr	r2, [r7, #4]
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	429a      	cmp	r2, r3
 8010482:	d206      	bcs.n	8010492 <prvInsertTimerInActiveList+0x62>
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	429a      	cmp	r2, r3
 801048a:	d302      	bcc.n	8010492 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801048c:	2301      	movs	r3, #1
 801048e:	617b      	str	r3, [r7, #20]
 8010490:	e007      	b.n	80104a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010492:	4b07      	ldr	r3, [pc, #28]	; (80104b0 <prvInsertTimerInActiveList+0x80>)
 8010494:	681a      	ldr	r2, [r3, #0]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	3304      	adds	r3, #4
 801049a:	4619      	mov	r1, r3
 801049c:	4610      	mov	r0, r2
 801049e:	f7fd fe66 	bl	800e16e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80104a2:	697b      	ldr	r3, [r7, #20]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3718      	adds	r7, #24
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	20002350 	.word	0x20002350
 80104b0:	2000234c 	.word	0x2000234c

080104b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b08e      	sub	sp, #56	; 0x38
 80104b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80104ba:	e0ca      	b.n	8010652 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	da18      	bge.n	80104f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80104c2:	1d3b      	adds	r3, r7, #4
 80104c4:	3304      	adds	r3, #4
 80104c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80104c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d10a      	bne.n	80104e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	61fb      	str	r3, [r7, #28]
}
 80104e0:	bf00      	nop
 80104e2:	e7fe      	b.n	80104e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80104e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104ea:	6850      	ldr	r0, [r2, #4]
 80104ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104ee:	6892      	ldr	r2, [r2, #8]
 80104f0:	4611      	mov	r1, r2
 80104f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f2c0 80aa 	blt.w	8010650 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010502:	695b      	ldr	r3, [r3, #20]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d004      	beq.n	8010512 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050a:	3304      	adds	r3, #4
 801050c:	4618      	mov	r0, r3
 801050e:	f7fd fe67 	bl	800e1e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010512:	463b      	mov	r3, r7
 8010514:	4618      	mov	r0, r3
 8010516:	f7ff ff6b 	bl	80103f0 <prvSampleTimeNow>
 801051a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b09      	cmp	r3, #9
 8010520:	f200 8097 	bhi.w	8010652 <prvProcessReceivedCommands+0x19e>
 8010524:	a201      	add	r2, pc, #4	; (adr r2, 801052c <prvProcessReceivedCommands+0x78>)
 8010526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801052a:	bf00      	nop
 801052c:	08010555 	.word	0x08010555
 8010530:	08010555 	.word	0x08010555
 8010534:	08010555 	.word	0x08010555
 8010538:	080105c9 	.word	0x080105c9
 801053c:	080105dd 	.word	0x080105dd
 8010540:	08010627 	.word	0x08010627
 8010544:	08010555 	.word	0x08010555
 8010548:	08010555 	.word	0x08010555
 801054c:	080105c9 	.word	0x080105c9
 8010550:	080105dd 	.word	0x080105dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801055a:	f043 0301 	orr.w	r3, r3, #1
 801055e:	b2da      	uxtb	r2, r3
 8010560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010566:	68ba      	ldr	r2, [r7, #8]
 8010568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056a:	699b      	ldr	r3, [r3, #24]
 801056c:	18d1      	adds	r1, r2, r3
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010574:	f7ff ff5c 	bl	8010430 <prvInsertTimerInActiveList>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	d069      	beq.n	8010652 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801057e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010580:	6a1b      	ldr	r3, [r3, #32]
 8010582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010584:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801058c:	f003 0304 	and.w	r3, r3, #4
 8010590:	2b00      	cmp	r3, #0
 8010592:	d05e      	beq.n	8010652 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010598:	699b      	ldr	r3, [r3, #24]
 801059a:	441a      	add	r2, r3
 801059c:	2300      	movs	r3, #0
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	2300      	movs	r3, #0
 80105a2:	2100      	movs	r1, #0
 80105a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105a6:	f7ff fe05 	bl	80101b4 <xTimerGenericCommand>
 80105aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80105ac:	6a3b      	ldr	r3, [r7, #32]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d14f      	bne.n	8010652 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80105b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b6:	f383 8811 	msr	BASEPRI, r3
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	61bb      	str	r3, [r7, #24]
}
 80105c4:	bf00      	nop
 80105c6:	e7fe      	b.n	80105c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105ce:	f023 0301 	bic.w	r3, r3, #1
 80105d2:	b2da      	uxtb	r2, r3
 80105d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80105da:	e03a      	b.n	8010652 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105e2:	f043 0301 	orr.w	r3, r3, #1
 80105e6:	b2da      	uxtb	r2, r3
 80105e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80105ee:	68ba      	ldr	r2, [r7, #8]
 80105f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80105f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f6:	699b      	ldr	r3, [r3, #24]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10a      	bne.n	8010612 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80105fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010600:	f383 8811 	msr	BASEPRI, r3
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	617b      	str	r3, [r7, #20]
}
 801060e:	bf00      	nop
 8010610:	e7fe      	b.n	8010610 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010614:	699a      	ldr	r2, [r3, #24]
 8010616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010618:	18d1      	adds	r1, r2, r3
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801061e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010620:	f7ff ff06 	bl	8010430 <prvInsertTimerInActiveList>
					break;
 8010624:	e015      	b.n	8010652 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801062c:	f003 0302 	and.w	r3, r3, #2
 8010630:	2b00      	cmp	r3, #0
 8010632:	d103      	bne.n	801063c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010636:	f000 fbdb 	bl	8010df0 <vPortFree>
 801063a:	e00a      	b.n	8010652 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010642:	f023 0301 	bic.w	r3, r3, #1
 8010646:	b2da      	uxtb	r2, r3
 8010648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801064e:	e000      	b.n	8010652 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010650:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010652:	4b08      	ldr	r3, [pc, #32]	; (8010674 <prvProcessReceivedCommands+0x1c0>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	1d39      	adds	r1, r7, #4
 8010658:	2200      	movs	r2, #0
 801065a:	4618      	mov	r0, r3
 801065c:	f7fe f8c2 	bl	800e7e4 <xQueueReceive>
 8010660:	4603      	mov	r3, r0
 8010662:	2b00      	cmp	r3, #0
 8010664:	f47f af2a 	bne.w	80104bc <prvProcessReceivedCommands+0x8>
	}
}
 8010668:	bf00      	nop
 801066a:	bf00      	nop
 801066c:	3730      	adds	r7, #48	; 0x30
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	20002354 	.word	0x20002354

08010678 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b088      	sub	sp, #32
 801067c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801067e:	e048      	b.n	8010712 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010680:	4b2d      	ldr	r3, [pc, #180]	; (8010738 <prvSwitchTimerLists+0xc0>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801068a:	4b2b      	ldr	r3, [pc, #172]	; (8010738 <prvSwitchTimerLists+0xc0>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	68db      	ldr	r3, [r3, #12]
 8010692:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	3304      	adds	r3, #4
 8010698:	4618      	mov	r0, r3
 801069a:	f7fd fda1 	bl	800e1e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6a1b      	ldr	r3, [r3, #32]
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106ac:	f003 0304 	and.w	r3, r3, #4
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d02e      	beq.n	8010712 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	699b      	ldr	r3, [r3, #24]
 80106b8:	693a      	ldr	r2, [r7, #16]
 80106ba:	4413      	add	r3, r2
 80106bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80106be:	68ba      	ldr	r2, [r7, #8]
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d90e      	bls.n	80106e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	68fa      	ldr	r2, [r7, #12]
 80106d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80106d2:	4b19      	ldr	r3, [pc, #100]	; (8010738 <prvSwitchTimerLists+0xc0>)
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	3304      	adds	r3, #4
 80106da:	4619      	mov	r1, r3
 80106dc:	4610      	mov	r0, r2
 80106de:	f7fd fd46 	bl	800e16e <vListInsert>
 80106e2:	e016      	b.n	8010712 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80106e4:	2300      	movs	r3, #0
 80106e6:	9300      	str	r3, [sp, #0]
 80106e8:	2300      	movs	r3, #0
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	2100      	movs	r1, #0
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f7ff fd60 	bl	80101b4 <xTimerGenericCommand>
 80106f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d10a      	bne.n	8010712 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80106fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010700:	f383 8811 	msr	BASEPRI, r3
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	f3bf 8f4f 	dsb	sy
 801070c:	603b      	str	r3, [r7, #0]
}
 801070e:	bf00      	nop
 8010710:	e7fe      	b.n	8010710 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010712:	4b09      	ldr	r3, [pc, #36]	; (8010738 <prvSwitchTimerLists+0xc0>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1b1      	bne.n	8010680 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801071c:	4b06      	ldr	r3, [pc, #24]	; (8010738 <prvSwitchTimerLists+0xc0>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010722:	4b06      	ldr	r3, [pc, #24]	; (801073c <prvSwitchTimerLists+0xc4>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4a04      	ldr	r2, [pc, #16]	; (8010738 <prvSwitchTimerLists+0xc0>)
 8010728:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801072a:	4a04      	ldr	r2, [pc, #16]	; (801073c <prvSwitchTimerLists+0xc4>)
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	6013      	str	r3, [r2, #0]
}
 8010730:	bf00      	nop
 8010732:	3718      	adds	r7, #24
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	2000234c 	.word	0x2000234c
 801073c:	20002350 	.word	0x20002350

08010740 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010746:	f000 f965 	bl	8010a14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801074a:	4b15      	ldr	r3, [pc, #84]	; (80107a0 <prvCheckForValidListAndQueue+0x60>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d120      	bne.n	8010794 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010752:	4814      	ldr	r0, [pc, #80]	; (80107a4 <prvCheckForValidListAndQueue+0x64>)
 8010754:	f7fd fcba 	bl	800e0cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010758:	4813      	ldr	r0, [pc, #76]	; (80107a8 <prvCheckForValidListAndQueue+0x68>)
 801075a:	f7fd fcb7 	bl	800e0cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801075e:	4b13      	ldr	r3, [pc, #76]	; (80107ac <prvCheckForValidListAndQueue+0x6c>)
 8010760:	4a10      	ldr	r2, [pc, #64]	; (80107a4 <prvCheckForValidListAndQueue+0x64>)
 8010762:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010764:	4b12      	ldr	r3, [pc, #72]	; (80107b0 <prvCheckForValidListAndQueue+0x70>)
 8010766:	4a10      	ldr	r2, [pc, #64]	; (80107a8 <prvCheckForValidListAndQueue+0x68>)
 8010768:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801076a:	2300      	movs	r3, #0
 801076c:	9300      	str	r3, [sp, #0]
 801076e:	4b11      	ldr	r3, [pc, #68]	; (80107b4 <prvCheckForValidListAndQueue+0x74>)
 8010770:	4a11      	ldr	r2, [pc, #68]	; (80107b8 <prvCheckForValidListAndQueue+0x78>)
 8010772:	2110      	movs	r1, #16
 8010774:	200a      	movs	r0, #10
 8010776:	f7fd fdc5 	bl	800e304 <xQueueGenericCreateStatic>
 801077a:	4603      	mov	r3, r0
 801077c:	4a08      	ldr	r2, [pc, #32]	; (80107a0 <prvCheckForValidListAndQueue+0x60>)
 801077e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010780:	4b07      	ldr	r3, [pc, #28]	; (80107a0 <prvCheckForValidListAndQueue+0x60>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d005      	beq.n	8010794 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010788:	4b05      	ldr	r3, [pc, #20]	; (80107a0 <prvCheckForValidListAndQueue+0x60>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	490b      	ldr	r1, [pc, #44]	; (80107bc <prvCheckForValidListAndQueue+0x7c>)
 801078e:	4618      	mov	r0, r3
 8010790:	f7fe fa98 	bl	800ecc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010794:	f000 f96e 	bl	8010a74 <vPortExitCritical>
}
 8010798:	bf00      	nop
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	20002354 	.word	0x20002354
 80107a4:	20002324 	.word	0x20002324
 80107a8:	20002338 	.word	0x20002338
 80107ac:	2000234c 	.word	0x2000234c
 80107b0:	20002350 	.word	0x20002350
 80107b4:	20002400 	.word	0x20002400
 80107b8:	20002360 	.word	0x20002360
 80107bc:	080128d0 	.word	0x080128d0

080107c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80107c0:	b480      	push	{r7}
 80107c2:	b085      	sub	sp, #20
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	3b04      	subs	r3, #4
 80107d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80107d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	3b04      	subs	r3, #4
 80107de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	f023 0201 	bic.w	r2, r3, #1
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	3b04      	subs	r3, #4
 80107ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80107f0:	4a0c      	ldr	r2, [pc, #48]	; (8010824 <pxPortInitialiseStack+0x64>)
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	3b14      	subs	r3, #20
 80107fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80107fc:	687a      	ldr	r2, [r7, #4]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	3b04      	subs	r3, #4
 8010806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f06f 0202 	mvn.w	r2, #2
 801080e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	3b20      	subs	r3, #32
 8010814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010816:	68fb      	ldr	r3, [r7, #12]
}
 8010818:	4618      	mov	r0, r3
 801081a:	3714      	adds	r7, #20
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr
 8010824:	08010829 	.word	0x08010829

08010828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010832:	4b12      	ldr	r3, [pc, #72]	; (801087c <prvTaskExitError+0x54>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801083a:	d00a      	beq.n	8010852 <prvTaskExitError+0x2a>
	__asm volatile
 801083c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010840:	f383 8811 	msr	BASEPRI, r3
 8010844:	f3bf 8f6f 	isb	sy
 8010848:	f3bf 8f4f 	dsb	sy
 801084c:	60fb      	str	r3, [r7, #12]
}
 801084e:	bf00      	nop
 8010850:	e7fe      	b.n	8010850 <prvTaskExitError+0x28>
	__asm volatile
 8010852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010856:	f383 8811 	msr	BASEPRI, r3
 801085a:	f3bf 8f6f 	isb	sy
 801085e:	f3bf 8f4f 	dsb	sy
 8010862:	60bb      	str	r3, [r7, #8]
}
 8010864:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010866:	bf00      	nop
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d0fc      	beq.n	8010868 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801086e:	bf00      	nop
 8010870:	bf00      	nop
 8010872:	3714      	adds	r7, #20
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	20000124 	.word	0x20000124

08010880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010880:	4b07      	ldr	r3, [pc, #28]	; (80108a0 <pxCurrentTCBConst2>)
 8010882:	6819      	ldr	r1, [r3, #0]
 8010884:	6808      	ldr	r0, [r1, #0]
 8010886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088a:	f380 8809 	msr	PSP, r0
 801088e:	f3bf 8f6f 	isb	sy
 8010892:	f04f 0000 	mov.w	r0, #0
 8010896:	f380 8811 	msr	BASEPRI, r0
 801089a:	4770      	bx	lr
 801089c:	f3af 8000 	nop.w

080108a0 <pxCurrentTCBConst2>:
 80108a0:	20001e1c 	.word	0x20001e1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80108a4:	bf00      	nop
 80108a6:	bf00      	nop

080108a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80108a8:	4808      	ldr	r0, [pc, #32]	; (80108cc <prvPortStartFirstTask+0x24>)
 80108aa:	6800      	ldr	r0, [r0, #0]
 80108ac:	6800      	ldr	r0, [r0, #0]
 80108ae:	f380 8808 	msr	MSP, r0
 80108b2:	f04f 0000 	mov.w	r0, #0
 80108b6:	f380 8814 	msr	CONTROL, r0
 80108ba:	b662      	cpsie	i
 80108bc:	b661      	cpsie	f
 80108be:	f3bf 8f4f 	dsb	sy
 80108c2:	f3bf 8f6f 	isb	sy
 80108c6:	df00      	svc	0
 80108c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80108ca:	bf00      	nop
 80108cc:	e000ed08 	.word	0xe000ed08

080108d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b086      	sub	sp, #24
 80108d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80108d6:	4b46      	ldr	r3, [pc, #280]	; (80109f0 <xPortStartScheduler+0x120>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4a46      	ldr	r2, [pc, #280]	; (80109f4 <xPortStartScheduler+0x124>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d10a      	bne.n	80108f6 <xPortStartScheduler+0x26>
	__asm volatile
 80108e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	613b      	str	r3, [r7, #16]
}
 80108f2:	bf00      	nop
 80108f4:	e7fe      	b.n	80108f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80108f6:	4b3e      	ldr	r3, [pc, #248]	; (80109f0 <xPortStartScheduler+0x120>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4a3f      	ldr	r2, [pc, #252]	; (80109f8 <xPortStartScheduler+0x128>)
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d10a      	bne.n	8010916 <xPortStartScheduler+0x46>
	__asm volatile
 8010900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010904:	f383 8811 	msr	BASEPRI, r3
 8010908:	f3bf 8f6f 	isb	sy
 801090c:	f3bf 8f4f 	dsb	sy
 8010910:	60fb      	str	r3, [r7, #12]
}
 8010912:	bf00      	nop
 8010914:	e7fe      	b.n	8010914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010916:	4b39      	ldr	r3, [pc, #228]	; (80109fc <xPortStartScheduler+0x12c>)
 8010918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	b2db      	uxtb	r3, r3
 8010920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	22ff      	movs	r2, #255	; 0xff
 8010926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	b2db      	uxtb	r3, r3
 801092e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010930:	78fb      	ldrb	r3, [r7, #3]
 8010932:	b2db      	uxtb	r3, r3
 8010934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010938:	b2da      	uxtb	r2, r3
 801093a:	4b31      	ldr	r3, [pc, #196]	; (8010a00 <xPortStartScheduler+0x130>)
 801093c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801093e:	4b31      	ldr	r3, [pc, #196]	; (8010a04 <xPortStartScheduler+0x134>)
 8010940:	2207      	movs	r2, #7
 8010942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010944:	e009      	b.n	801095a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010946:	4b2f      	ldr	r3, [pc, #188]	; (8010a04 <xPortStartScheduler+0x134>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	3b01      	subs	r3, #1
 801094c:	4a2d      	ldr	r2, [pc, #180]	; (8010a04 <xPortStartScheduler+0x134>)
 801094e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010950:	78fb      	ldrb	r3, [r7, #3]
 8010952:	b2db      	uxtb	r3, r3
 8010954:	005b      	lsls	r3, r3, #1
 8010956:	b2db      	uxtb	r3, r3
 8010958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801095a:	78fb      	ldrb	r3, [r7, #3]
 801095c:	b2db      	uxtb	r3, r3
 801095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010962:	2b80      	cmp	r3, #128	; 0x80
 8010964:	d0ef      	beq.n	8010946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010966:	4b27      	ldr	r3, [pc, #156]	; (8010a04 <xPortStartScheduler+0x134>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	f1c3 0307 	rsb	r3, r3, #7
 801096e:	2b04      	cmp	r3, #4
 8010970:	d00a      	beq.n	8010988 <xPortStartScheduler+0xb8>
	__asm volatile
 8010972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010976:	f383 8811 	msr	BASEPRI, r3
 801097a:	f3bf 8f6f 	isb	sy
 801097e:	f3bf 8f4f 	dsb	sy
 8010982:	60bb      	str	r3, [r7, #8]
}
 8010984:	bf00      	nop
 8010986:	e7fe      	b.n	8010986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010988:	4b1e      	ldr	r3, [pc, #120]	; (8010a04 <xPortStartScheduler+0x134>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	021b      	lsls	r3, r3, #8
 801098e:	4a1d      	ldr	r2, [pc, #116]	; (8010a04 <xPortStartScheduler+0x134>)
 8010990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010992:	4b1c      	ldr	r3, [pc, #112]	; (8010a04 <xPortStartScheduler+0x134>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801099a:	4a1a      	ldr	r2, [pc, #104]	; (8010a04 <xPortStartScheduler+0x134>)
 801099c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	b2da      	uxtb	r2, r3
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80109a6:	4b18      	ldr	r3, [pc, #96]	; (8010a08 <xPortStartScheduler+0x138>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	4a17      	ldr	r2, [pc, #92]	; (8010a08 <xPortStartScheduler+0x138>)
 80109ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80109b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80109b2:	4b15      	ldr	r3, [pc, #84]	; (8010a08 <xPortStartScheduler+0x138>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	4a14      	ldr	r2, [pc, #80]	; (8010a08 <xPortStartScheduler+0x138>)
 80109b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80109bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80109be:	f000 f8dd 	bl	8010b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80109c2:	4b12      	ldr	r3, [pc, #72]	; (8010a0c <xPortStartScheduler+0x13c>)
 80109c4:	2200      	movs	r2, #0
 80109c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80109c8:	f000 f8fc 	bl	8010bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80109cc:	4b10      	ldr	r3, [pc, #64]	; (8010a10 <xPortStartScheduler+0x140>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a0f      	ldr	r2, [pc, #60]	; (8010a10 <xPortStartScheduler+0x140>)
 80109d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80109d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80109d8:	f7ff ff66 	bl	80108a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80109dc:	f7fe fe9e 	bl	800f71c <vTaskSwitchContext>
	prvTaskExitError();
 80109e0:	f7ff ff22 	bl	8010828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3718      	adds	r7, #24
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	e000ed00 	.word	0xe000ed00
 80109f4:	410fc271 	.word	0x410fc271
 80109f8:	410fc270 	.word	0x410fc270
 80109fc:	e000e400 	.word	0xe000e400
 8010a00:	20002450 	.word	0x20002450
 8010a04:	20002454 	.word	0x20002454
 8010a08:	e000ed20 	.word	0xe000ed20
 8010a0c:	20000124 	.word	0x20000124
 8010a10:	e000ef34 	.word	0xe000ef34

08010a14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
	__asm volatile
 8010a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1e:	f383 8811 	msr	BASEPRI, r3
 8010a22:	f3bf 8f6f 	isb	sy
 8010a26:	f3bf 8f4f 	dsb	sy
 8010a2a:	607b      	str	r3, [r7, #4]
}
 8010a2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010a2e:	4b0f      	ldr	r3, [pc, #60]	; (8010a6c <vPortEnterCritical+0x58>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	3301      	adds	r3, #1
 8010a34:	4a0d      	ldr	r2, [pc, #52]	; (8010a6c <vPortEnterCritical+0x58>)
 8010a36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010a38:	4b0c      	ldr	r3, [pc, #48]	; (8010a6c <vPortEnterCritical+0x58>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2b01      	cmp	r3, #1
 8010a3e:	d10f      	bne.n	8010a60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010a40:	4b0b      	ldr	r3, [pc, #44]	; (8010a70 <vPortEnterCritical+0x5c>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d00a      	beq.n	8010a60 <vPortEnterCritical+0x4c>
	__asm volatile
 8010a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a4e:	f383 8811 	msr	BASEPRI, r3
 8010a52:	f3bf 8f6f 	isb	sy
 8010a56:	f3bf 8f4f 	dsb	sy
 8010a5a:	603b      	str	r3, [r7, #0]
}
 8010a5c:	bf00      	nop
 8010a5e:	e7fe      	b.n	8010a5e <vPortEnterCritical+0x4a>
	}
}
 8010a60:	bf00      	nop
 8010a62:	370c      	adds	r7, #12
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr
 8010a6c:	20000124 	.word	0x20000124
 8010a70:	e000ed04 	.word	0xe000ed04

08010a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010a74:	b480      	push	{r7}
 8010a76:	b083      	sub	sp, #12
 8010a78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010a7a:	4b12      	ldr	r3, [pc, #72]	; (8010ac4 <vPortExitCritical+0x50>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d10a      	bne.n	8010a98 <vPortExitCritical+0x24>
	__asm volatile
 8010a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a86:	f383 8811 	msr	BASEPRI, r3
 8010a8a:	f3bf 8f6f 	isb	sy
 8010a8e:	f3bf 8f4f 	dsb	sy
 8010a92:	607b      	str	r3, [r7, #4]
}
 8010a94:	bf00      	nop
 8010a96:	e7fe      	b.n	8010a96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010a98:	4b0a      	ldr	r3, [pc, #40]	; (8010ac4 <vPortExitCritical+0x50>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	4a09      	ldr	r2, [pc, #36]	; (8010ac4 <vPortExitCritical+0x50>)
 8010aa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010aa2:	4b08      	ldr	r3, [pc, #32]	; (8010ac4 <vPortExitCritical+0x50>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d105      	bne.n	8010ab6 <vPortExitCritical+0x42>
 8010aaa:	2300      	movs	r3, #0
 8010aac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	f383 8811 	msr	BASEPRI, r3
}
 8010ab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010ab6:	bf00      	nop
 8010ab8:	370c      	adds	r7, #12
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	20000124 	.word	0x20000124
	...

08010ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010ad0:	f3ef 8009 	mrs	r0, PSP
 8010ad4:	f3bf 8f6f 	isb	sy
 8010ad8:	4b15      	ldr	r3, [pc, #84]	; (8010b30 <pxCurrentTCBConst>)
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	f01e 0f10 	tst.w	lr, #16
 8010ae0:	bf08      	it	eq
 8010ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aea:	6010      	str	r0, [r2, #0]
 8010aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010af4:	f380 8811 	msr	BASEPRI, r0
 8010af8:	f3bf 8f4f 	dsb	sy
 8010afc:	f3bf 8f6f 	isb	sy
 8010b00:	f7fe fe0c 	bl	800f71c <vTaskSwitchContext>
 8010b04:	f04f 0000 	mov.w	r0, #0
 8010b08:	f380 8811 	msr	BASEPRI, r0
 8010b0c:	bc09      	pop	{r0, r3}
 8010b0e:	6819      	ldr	r1, [r3, #0]
 8010b10:	6808      	ldr	r0, [r1, #0]
 8010b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b16:	f01e 0f10 	tst.w	lr, #16
 8010b1a:	bf08      	it	eq
 8010b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010b20:	f380 8809 	msr	PSP, r0
 8010b24:	f3bf 8f6f 	isb	sy
 8010b28:	4770      	bx	lr
 8010b2a:	bf00      	nop
 8010b2c:	f3af 8000 	nop.w

08010b30 <pxCurrentTCBConst>:
 8010b30:	20001e1c 	.word	0x20001e1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010b34:	bf00      	nop
 8010b36:	bf00      	nop

08010b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8010b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b42:	f383 8811 	msr	BASEPRI, r3
 8010b46:	f3bf 8f6f 	isb	sy
 8010b4a:	f3bf 8f4f 	dsb	sy
 8010b4e:	607b      	str	r3, [r7, #4]
}
 8010b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010b52:	f7fe fd29 	bl	800f5a8 <xTaskIncrementTick>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d003      	beq.n	8010b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010b5c:	4b06      	ldr	r3, [pc, #24]	; (8010b78 <xPortSysTickHandler+0x40>)
 8010b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b62:	601a      	str	r2, [r3, #0]
 8010b64:	2300      	movs	r3, #0
 8010b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	f383 8811 	msr	BASEPRI, r3
}
 8010b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010b70:	bf00      	nop
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	e000ed04 	.word	0xe000ed04

08010b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010b80:	4b0b      	ldr	r3, [pc, #44]	; (8010bb0 <vPortSetupTimerInterrupt+0x34>)
 8010b82:	2200      	movs	r2, #0
 8010b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010b86:	4b0b      	ldr	r3, [pc, #44]	; (8010bb4 <vPortSetupTimerInterrupt+0x38>)
 8010b88:	2200      	movs	r2, #0
 8010b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010b8c:	4b0a      	ldr	r3, [pc, #40]	; (8010bb8 <vPortSetupTimerInterrupt+0x3c>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a0a      	ldr	r2, [pc, #40]	; (8010bbc <vPortSetupTimerInterrupt+0x40>)
 8010b92:	fba2 2303 	umull	r2, r3, r2, r3
 8010b96:	099b      	lsrs	r3, r3, #6
 8010b98:	4a09      	ldr	r2, [pc, #36]	; (8010bc0 <vPortSetupTimerInterrupt+0x44>)
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010b9e:	4b04      	ldr	r3, [pc, #16]	; (8010bb0 <vPortSetupTimerInterrupt+0x34>)
 8010ba0:	2207      	movs	r2, #7
 8010ba2:	601a      	str	r2, [r3, #0]
}
 8010ba4:	bf00      	nop
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr
 8010bae:	bf00      	nop
 8010bb0:	e000e010 	.word	0xe000e010
 8010bb4:	e000e018 	.word	0xe000e018
 8010bb8:	2000008c 	.word	0x2000008c
 8010bbc:	10624dd3 	.word	0x10624dd3
 8010bc0:	e000e014 	.word	0xe000e014

08010bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010bd4 <vPortEnableVFP+0x10>
 8010bc8:	6801      	ldr	r1, [r0, #0]
 8010bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010bce:	6001      	str	r1, [r0, #0]
 8010bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010bd2:	bf00      	nop
 8010bd4:	e000ed88 	.word	0xe000ed88

08010bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010bd8:	b480      	push	{r7}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010bde:	f3ef 8305 	mrs	r3, IPSR
 8010be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2b0f      	cmp	r3, #15
 8010be8:	d914      	bls.n	8010c14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010bea:	4a17      	ldr	r2, [pc, #92]	; (8010c48 <vPortValidateInterruptPriority+0x70>)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	4413      	add	r3, r2
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010bf4:	4b15      	ldr	r3, [pc, #84]	; (8010c4c <vPortValidateInterruptPriority+0x74>)
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	7afa      	ldrb	r2, [r7, #11]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d20a      	bcs.n	8010c14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c02:	f383 8811 	msr	BASEPRI, r3
 8010c06:	f3bf 8f6f 	isb	sy
 8010c0a:	f3bf 8f4f 	dsb	sy
 8010c0e:	607b      	str	r3, [r7, #4]
}
 8010c10:	bf00      	nop
 8010c12:	e7fe      	b.n	8010c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010c14:	4b0e      	ldr	r3, [pc, #56]	; (8010c50 <vPortValidateInterruptPriority+0x78>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010c1c:	4b0d      	ldr	r3, [pc, #52]	; (8010c54 <vPortValidateInterruptPriority+0x7c>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d90a      	bls.n	8010c3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c28:	f383 8811 	msr	BASEPRI, r3
 8010c2c:	f3bf 8f6f 	isb	sy
 8010c30:	f3bf 8f4f 	dsb	sy
 8010c34:	603b      	str	r3, [r7, #0]
}
 8010c36:	bf00      	nop
 8010c38:	e7fe      	b.n	8010c38 <vPortValidateInterruptPriority+0x60>
	}
 8010c3a:	bf00      	nop
 8010c3c:	3714      	adds	r7, #20
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c44:	4770      	bx	lr
 8010c46:	bf00      	nop
 8010c48:	e000e3f0 	.word	0xe000e3f0
 8010c4c:	20002450 	.word	0x20002450
 8010c50:	e000ed0c 	.word	0xe000ed0c
 8010c54:	20002454 	.word	0x20002454

08010c58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b08a      	sub	sp, #40	; 0x28
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010c60:	2300      	movs	r3, #0
 8010c62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010c64:	f7fe fb54 	bl	800f310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010c68:	4b5b      	ldr	r3, [pc, #364]	; (8010dd8 <pvPortMalloc+0x180>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d101      	bne.n	8010c74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010c70:	f000 f920 	bl	8010eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010c74:	4b59      	ldr	r3, [pc, #356]	; (8010ddc <pvPortMalloc+0x184>)
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	4013      	ands	r3, r2
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	f040 8093 	bne.w	8010da8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d01d      	beq.n	8010cc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010c88:	2208      	movs	r2, #8
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f003 0307 	and.w	r3, r3, #7
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d014      	beq.n	8010cc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f023 0307 	bic.w	r3, r3, #7
 8010ca0:	3308      	adds	r3, #8
 8010ca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f003 0307 	and.w	r3, r3, #7
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00a      	beq.n	8010cc4 <pvPortMalloc+0x6c>
	__asm volatile
 8010cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	617b      	str	r3, [r7, #20]
}
 8010cc0:	bf00      	nop
 8010cc2:	e7fe      	b.n	8010cc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d06e      	beq.n	8010da8 <pvPortMalloc+0x150>
 8010cca:	4b45      	ldr	r3, [pc, #276]	; (8010de0 <pvPortMalloc+0x188>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d869      	bhi.n	8010da8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010cd4:	4b43      	ldr	r3, [pc, #268]	; (8010de4 <pvPortMalloc+0x18c>)
 8010cd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010cd8:	4b42      	ldr	r3, [pc, #264]	; (8010de4 <pvPortMalloc+0x18c>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010cde:	e004      	b.n	8010cea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d903      	bls.n	8010cfc <pvPortMalloc+0xa4>
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d1f1      	bne.n	8010ce0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010cfc:	4b36      	ldr	r3, [pc, #216]	; (8010dd8 <pvPortMalloc+0x180>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d050      	beq.n	8010da8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2208      	movs	r2, #8
 8010d0c:	4413      	add	r3, r2
 8010d0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1a:	685a      	ldr	r2, [r3, #4]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	1ad2      	subs	r2, r2, r3
 8010d20:	2308      	movs	r3, #8
 8010d22:	005b      	lsls	r3, r3, #1
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d91f      	bls.n	8010d68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	4413      	add	r3, r2
 8010d2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d30:	69bb      	ldr	r3, [r7, #24]
 8010d32:	f003 0307 	and.w	r3, r3, #7
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00a      	beq.n	8010d50 <pvPortMalloc+0xf8>
	__asm volatile
 8010d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d3e:	f383 8811 	msr	BASEPRI, r3
 8010d42:	f3bf 8f6f 	isb	sy
 8010d46:	f3bf 8f4f 	dsb	sy
 8010d4a:	613b      	str	r3, [r7, #16]
}
 8010d4c:	bf00      	nop
 8010d4e:	e7fe      	b.n	8010d4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	685a      	ldr	r2, [r3, #4]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	1ad2      	subs	r2, r2, r3
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5e:	687a      	ldr	r2, [r7, #4]
 8010d60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010d62:	69b8      	ldr	r0, [r7, #24]
 8010d64:	f000 f908 	bl	8010f78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010d68:	4b1d      	ldr	r3, [pc, #116]	; (8010de0 <pvPortMalloc+0x188>)
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	1ad3      	subs	r3, r2, r3
 8010d72:	4a1b      	ldr	r2, [pc, #108]	; (8010de0 <pvPortMalloc+0x188>)
 8010d74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010d76:	4b1a      	ldr	r3, [pc, #104]	; (8010de0 <pvPortMalloc+0x188>)
 8010d78:	681a      	ldr	r2, [r3, #0]
 8010d7a:	4b1b      	ldr	r3, [pc, #108]	; (8010de8 <pvPortMalloc+0x190>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d203      	bcs.n	8010d8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010d82:	4b17      	ldr	r3, [pc, #92]	; (8010de0 <pvPortMalloc+0x188>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4a18      	ldr	r2, [pc, #96]	; (8010de8 <pvPortMalloc+0x190>)
 8010d88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	685a      	ldr	r2, [r3, #4]
 8010d8e:	4b13      	ldr	r3, [pc, #76]	; (8010ddc <pvPortMalloc+0x184>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	431a      	orrs	r2, r3
 8010d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010d9e:	4b13      	ldr	r3, [pc, #76]	; (8010dec <pvPortMalloc+0x194>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	3301      	adds	r3, #1
 8010da4:	4a11      	ldr	r2, [pc, #68]	; (8010dec <pvPortMalloc+0x194>)
 8010da6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010da8:	f7fe fac0 	bl	800f32c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	f003 0307 	and.w	r3, r3, #7
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d00a      	beq.n	8010dcc <pvPortMalloc+0x174>
	__asm volatile
 8010db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dba:	f383 8811 	msr	BASEPRI, r3
 8010dbe:	f3bf 8f6f 	isb	sy
 8010dc2:	f3bf 8f4f 	dsb	sy
 8010dc6:	60fb      	str	r3, [r7, #12]
}
 8010dc8:	bf00      	nop
 8010dca:	e7fe      	b.n	8010dca <pvPortMalloc+0x172>
	return pvReturn;
 8010dcc:	69fb      	ldr	r3, [r7, #28]
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3728      	adds	r7, #40	; 0x28
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}
 8010dd6:	bf00      	nop
 8010dd8:	2001b460 	.word	0x2001b460
 8010ddc:	2001b474 	.word	0x2001b474
 8010de0:	2001b464 	.word	0x2001b464
 8010de4:	2001b458 	.word	0x2001b458
 8010de8:	2001b468 	.word	0x2001b468
 8010dec:	2001b46c 	.word	0x2001b46c

08010df0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b086      	sub	sp, #24
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d04d      	beq.n	8010e9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010e02:	2308      	movs	r3, #8
 8010e04:	425b      	negs	r3, r3
 8010e06:	697a      	ldr	r2, [r7, #20]
 8010e08:	4413      	add	r3, r2
 8010e0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	685a      	ldr	r2, [r3, #4]
 8010e14:	4b24      	ldr	r3, [pc, #144]	; (8010ea8 <vPortFree+0xb8>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	4013      	ands	r3, r2
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d10a      	bne.n	8010e34 <vPortFree+0x44>
	__asm volatile
 8010e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e22:	f383 8811 	msr	BASEPRI, r3
 8010e26:	f3bf 8f6f 	isb	sy
 8010e2a:	f3bf 8f4f 	dsb	sy
 8010e2e:	60fb      	str	r3, [r7, #12]
}
 8010e30:	bf00      	nop
 8010e32:	e7fe      	b.n	8010e32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00a      	beq.n	8010e52 <vPortFree+0x62>
	__asm volatile
 8010e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e40:	f383 8811 	msr	BASEPRI, r3
 8010e44:	f3bf 8f6f 	isb	sy
 8010e48:	f3bf 8f4f 	dsb	sy
 8010e4c:	60bb      	str	r3, [r7, #8]
}
 8010e4e:	bf00      	nop
 8010e50:	e7fe      	b.n	8010e50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	685a      	ldr	r2, [r3, #4]
 8010e56:	4b14      	ldr	r3, [pc, #80]	; (8010ea8 <vPortFree+0xb8>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d01e      	beq.n	8010e9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d11a      	bne.n	8010e9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	685a      	ldr	r2, [r3, #4]
 8010e6c:	4b0e      	ldr	r3, [pc, #56]	; (8010ea8 <vPortFree+0xb8>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	43db      	mvns	r3, r3
 8010e72:	401a      	ands	r2, r3
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010e78:	f7fe fa4a 	bl	800f310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	685a      	ldr	r2, [r3, #4]
 8010e80:	4b0a      	ldr	r3, [pc, #40]	; (8010eac <vPortFree+0xbc>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4413      	add	r3, r2
 8010e86:	4a09      	ldr	r2, [pc, #36]	; (8010eac <vPortFree+0xbc>)
 8010e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010e8a:	6938      	ldr	r0, [r7, #16]
 8010e8c:	f000 f874 	bl	8010f78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010e90:	4b07      	ldr	r3, [pc, #28]	; (8010eb0 <vPortFree+0xc0>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	3301      	adds	r3, #1
 8010e96:	4a06      	ldr	r2, [pc, #24]	; (8010eb0 <vPortFree+0xc0>)
 8010e98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010e9a:	f7fe fa47 	bl	800f32c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010e9e:	bf00      	nop
 8010ea0:	3718      	adds	r7, #24
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	2001b474 	.word	0x2001b474
 8010eac:	2001b464 	.word	0x2001b464
 8010eb0:	2001b470 	.word	0x2001b470

08010eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010eba:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8010ebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010ec0:	4b27      	ldr	r3, [pc, #156]	; (8010f60 <prvHeapInit+0xac>)
 8010ec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f003 0307 	and.w	r3, r3, #7
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d00c      	beq.n	8010ee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	3307      	adds	r3, #7
 8010ed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f023 0307 	bic.w	r3, r3, #7
 8010eda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010edc:	68ba      	ldr	r2, [r7, #8]
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	4a1f      	ldr	r2, [pc, #124]	; (8010f60 <prvHeapInit+0xac>)
 8010ee4:	4413      	add	r3, r2
 8010ee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010eec:	4a1d      	ldr	r2, [pc, #116]	; (8010f64 <prvHeapInit+0xb0>)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010ef2:	4b1c      	ldr	r3, [pc, #112]	; (8010f64 <prvHeapInit+0xb0>)
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	68ba      	ldr	r2, [r7, #8]
 8010efc:	4413      	add	r3, r2
 8010efe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010f00:	2208      	movs	r2, #8
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	1a9b      	subs	r3, r3, r2
 8010f06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	f023 0307 	bic.w	r3, r3, #7
 8010f0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	4a15      	ldr	r2, [pc, #84]	; (8010f68 <prvHeapInit+0xb4>)
 8010f14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010f16:	4b14      	ldr	r3, [pc, #80]	; (8010f68 <prvHeapInit+0xb4>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010f1e:	4b12      	ldr	r3, [pc, #72]	; (8010f68 <prvHeapInit+0xb4>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	2200      	movs	r2, #0
 8010f24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	68fa      	ldr	r2, [r7, #12]
 8010f2e:	1ad2      	subs	r2, r2, r3
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010f34:	4b0c      	ldr	r3, [pc, #48]	; (8010f68 <prvHeapInit+0xb4>)
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	4a0a      	ldr	r2, [pc, #40]	; (8010f6c <prvHeapInit+0xb8>)
 8010f42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	4a09      	ldr	r2, [pc, #36]	; (8010f70 <prvHeapInit+0xbc>)
 8010f4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010f4c:	4b09      	ldr	r3, [pc, #36]	; (8010f74 <prvHeapInit+0xc0>)
 8010f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010f52:	601a      	str	r2, [r3, #0]
}
 8010f54:	bf00      	nop
 8010f56:	3714      	adds	r7, #20
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr
 8010f60:	20002458 	.word	0x20002458
 8010f64:	2001b458 	.word	0x2001b458
 8010f68:	2001b460 	.word	0x2001b460
 8010f6c:	2001b468 	.word	0x2001b468
 8010f70:	2001b464 	.word	0x2001b464
 8010f74:	2001b474 	.word	0x2001b474

08010f78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b085      	sub	sp, #20
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010f80:	4b28      	ldr	r3, [pc, #160]	; (8011024 <prvInsertBlockIntoFreeList+0xac>)
 8010f82:	60fb      	str	r3, [r7, #12]
 8010f84:	e002      	b.n	8010f8c <prvInsertBlockIntoFreeList+0x14>
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	60fb      	str	r3, [r7, #12]
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	687a      	ldr	r2, [r7, #4]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d8f7      	bhi.n	8010f86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	68ba      	ldr	r2, [r7, #8]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d108      	bne.n	8010fba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	685a      	ldr	r2, [r3, #4]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	441a      	add	r2, r3
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	68ba      	ldr	r2, [r7, #8]
 8010fc4:	441a      	add	r2, r3
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d118      	bne.n	8011000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	4b15      	ldr	r3, [pc, #84]	; (8011028 <prvInsertBlockIntoFreeList+0xb0>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d00d      	beq.n	8010ff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	685a      	ldr	r2, [r3, #4]
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	441a      	add	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	681a      	ldr	r2, [r3, #0]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	601a      	str	r2, [r3, #0]
 8010ff4:	e008      	b.n	8011008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010ff6:	4b0c      	ldr	r3, [pc, #48]	; (8011028 <prvInsertBlockIntoFreeList+0xb0>)
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	601a      	str	r2, [r3, #0]
 8010ffe:	e003      	b.n	8011008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011008:	68fa      	ldr	r2, [r7, #12]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	429a      	cmp	r2, r3
 801100e:	d002      	beq.n	8011016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011016:	bf00      	nop
 8011018:	3714      	adds	r7, #20
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop
 8011024:	2001b458 	.word	0x2001b458
 8011028:	2001b460 	.word	0x2001b460

0801102c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011030:	2200      	movs	r2, #0
 8011032:	4912      	ldr	r1, [pc, #72]	; (801107c <MX_USB_DEVICE_Init+0x50>)
 8011034:	4812      	ldr	r0, [pc, #72]	; (8011080 <MX_USB_DEVICE_Init+0x54>)
 8011036:	f7fb fab7 	bl	800c5a8 <USBD_Init>
 801103a:	4603      	mov	r3, r0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d001      	beq.n	8011044 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011040:	f7f0 ff5c 	bl	8001efc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011044:	490f      	ldr	r1, [pc, #60]	; (8011084 <MX_USB_DEVICE_Init+0x58>)
 8011046:	480e      	ldr	r0, [pc, #56]	; (8011080 <MX_USB_DEVICE_Init+0x54>)
 8011048:	f7fb fade 	bl	800c608 <USBD_RegisterClass>
 801104c:	4603      	mov	r3, r0
 801104e:	2b00      	cmp	r3, #0
 8011050:	d001      	beq.n	8011056 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011052:	f7f0 ff53 	bl	8001efc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011056:	490c      	ldr	r1, [pc, #48]	; (8011088 <MX_USB_DEVICE_Init+0x5c>)
 8011058:	4809      	ldr	r0, [pc, #36]	; (8011080 <MX_USB_DEVICE_Init+0x54>)
 801105a:	f7fb f9cf 	bl	800c3fc <USBD_CDC_RegisterInterface>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d001      	beq.n	8011068 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011064:	f7f0 ff4a 	bl	8001efc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011068:	4805      	ldr	r0, [pc, #20]	; (8011080 <MX_USB_DEVICE_Init+0x54>)
 801106a:	f7fb fb03 	bl	800c674 <USBD_Start>
 801106e:	4603      	mov	r3, r0
 8011070:	2b00      	cmp	r3, #0
 8011072:	d001      	beq.n	8011078 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011074:	f7f0 ff42 	bl	8001efc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011078:	bf00      	nop
 801107a:	bd80      	pop	{r7, pc}
 801107c:	2000013c 	.word	0x2000013c
 8011080:	2001b478 	.word	0x2001b478
 8011084:	200000a4 	.word	0x200000a4
 8011088:	20000128 	.word	0x20000128

0801108c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011090:	2200      	movs	r2, #0
 8011092:	4905      	ldr	r1, [pc, #20]	; (80110a8 <CDC_Init_FS+0x1c>)
 8011094:	4805      	ldr	r0, [pc, #20]	; (80110ac <CDC_Init_FS+0x20>)
 8011096:	f7fb f9cb 	bl	800c430 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801109a:	4905      	ldr	r1, [pc, #20]	; (80110b0 <CDC_Init_FS+0x24>)
 801109c:	4803      	ldr	r0, [pc, #12]	; (80110ac <CDC_Init_FS+0x20>)
 801109e:	f7fb f9e9 	bl	800c474 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80110a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	2001bf54 	.word	0x2001bf54
 80110ac:	2001b478 	.word	0x2001b478
 80110b0:	2001b754 	.word	0x2001b754

080110b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80110b4:	b480      	push	{r7}
 80110b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80110b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	46bd      	mov	sp, r7
 80110be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c2:	4770      	bx	lr

080110c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	4603      	mov	r3, r0
 80110cc:	6039      	str	r1, [r7, #0]
 80110ce:	71fb      	strb	r3, [r7, #7]
 80110d0:	4613      	mov	r3, r2
 80110d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80110d4:	79fb      	ldrb	r3, [r7, #7]
 80110d6:	2b23      	cmp	r3, #35	; 0x23
 80110d8:	d84a      	bhi.n	8011170 <CDC_Control_FS+0xac>
 80110da:	a201      	add	r2, pc, #4	; (adr r2, 80110e0 <CDC_Control_FS+0x1c>)
 80110dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110e0:	08011171 	.word	0x08011171
 80110e4:	08011171 	.word	0x08011171
 80110e8:	08011171 	.word	0x08011171
 80110ec:	08011171 	.word	0x08011171
 80110f0:	08011171 	.word	0x08011171
 80110f4:	08011171 	.word	0x08011171
 80110f8:	08011171 	.word	0x08011171
 80110fc:	08011171 	.word	0x08011171
 8011100:	08011171 	.word	0x08011171
 8011104:	08011171 	.word	0x08011171
 8011108:	08011171 	.word	0x08011171
 801110c:	08011171 	.word	0x08011171
 8011110:	08011171 	.word	0x08011171
 8011114:	08011171 	.word	0x08011171
 8011118:	08011171 	.word	0x08011171
 801111c:	08011171 	.word	0x08011171
 8011120:	08011171 	.word	0x08011171
 8011124:	08011171 	.word	0x08011171
 8011128:	08011171 	.word	0x08011171
 801112c:	08011171 	.word	0x08011171
 8011130:	08011171 	.word	0x08011171
 8011134:	08011171 	.word	0x08011171
 8011138:	08011171 	.word	0x08011171
 801113c:	08011171 	.word	0x08011171
 8011140:	08011171 	.word	0x08011171
 8011144:	08011171 	.word	0x08011171
 8011148:	08011171 	.word	0x08011171
 801114c:	08011171 	.word	0x08011171
 8011150:	08011171 	.word	0x08011171
 8011154:	08011171 	.word	0x08011171
 8011158:	08011171 	.word	0x08011171
 801115c:	08011171 	.word	0x08011171
 8011160:	08011171 	.word	0x08011171
 8011164:	08011171 	.word	0x08011171
 8011168:	08011171 	.word	0x08011171
 801116c:	08011171 	.word	0x08011171
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011170:	bf00      	nop
  }

  return (USBD_OK);
 8011172:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011174:	4618      	mov	r0, r3
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801118a:	6879      	ldr	r1, [r7, #4]
 801118c:	4805      	ldr	r0, [pc, #20]	; (80111a4 <CDC_Receive_FS+0x24>)
 801118e:	f7fb f971 	bl	800c474 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011192:	4804      	ldr	r0, [pc, #16]	; (80111a4 <CDC_Receive_FS+0x24>)
 8011194:	f7fb f9d2 	bl	800c53c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011198:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801119a:	4618      	mov	r0, r3
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	2001b478 	.word	0x2001b478

080111a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	460b      	mov	r3, r1
 80111b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80111b4:	2300      	movs	r3, #0
 80111b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80111b8:	4b0d      	ldr	r3, [pc, #52]	; (80111f0 <CDC_Transmit_FS+0x48>)
 80111ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d001      	beq.n	80111ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80111ca:	2301      	movs	r3, #1
 80111cc:	e00b      	b.n	80111e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80111ce:	887b      	ldrh	r3, [r7, #2]
 80111d0:	461a      	mov	r2, r3
 80111d2:	6879      	ldr	r1, [r7, #4]
 80111d4:	4806      	ldr	r0, [pc, #24]	; (80111f0 <CDC_Transmit_FS+0x48>)
 80111d6:	f7fb f92b 	bl	800c430 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80111da:	4805      	ldr	r0, [pc, #20]	; (80111f0 <CDC_Transmit_FS+0x48>)
 80111dc:	f7fb f968 	bl	800c4b0 <USBD_CDC_TransmitPacket>
 80111e0:	4603      	mov	r3, r0
 80111e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80111e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3710      	adds	r7, #16
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	2001b478 	.word	0x2001b478

080111f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b087      	sub	sp, #28
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	4613      	mov	r3, r2
 8011200:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011202:	2300      	movs	r3, #0
 8011204:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801120a:	4618      	mov	r0, r3
 801120c:	371c      	adds	r7, #28
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr
	...

08011218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	4603      	mov	r3, r0
 8011220:	6039      	str	r1, [r7, #0]
 8011222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	2212      	movs	r2, #18
 8011228:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801122a:	4b03      	ldr	r3, [pc, #12]	; (8011238 <USBD_FS_DeviceDescriptor+0x20>)
}
 801122c:	4618      	mov	r0, r3
 801122e:	370c      	adds	r7, #12
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr
 8011238:	20000158 	.word	0x20000158

0801123c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801123c:	b480      	push	{r7}
 801123e:	b083      	sub	sp, #12
 8011240:	af00      	add	r7, sp, #0
 8011242:	4603      	mov	r3, r0
 8011244:	6039      	str	r1, [r7, #0]
 8011246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2204      	movs	r2, #4
 801124c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801124e:	4b03      	ldr	r3, [pc, #12]	; (801125c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011250:	4618      	mov	r0, r3
 8011252:	370c      	adds	r7, #12
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr
 801125c:	2000016c 	.word	0x2000016c

08011260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
 8011266:	4603      	mov	r3, r0
 8011268:	6039      	str	r1, [r7, #0]
 801126a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801126c:	79fb      	ldrb	r3, [r7, #7]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d105      	bne.n	801127e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011272:	683a      	ldr	r2, [r7, #0]
 8011274:	4907      	ldr	r1, [pc, #28]	; (8011294 <USBD_FS_ProductStrDescriptor+0x34>)
 8011276:	4808      	ldr	r0, [pc, #32]	; (8011298 <USBD_FS_ProductStrDescriptor+0x38>)
 8011278:	f7fc fba8 	bl	800d9cc <USBD_GetString>
 801127c:	e004      	b.n	8011288 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801127e:	683a      	ldr	r2, [r7, #0]
 8011280:	4904      	ldr	r1, [pc, #16]	; (8011294 <USBD_FS_ProductStrDescriptor+0x34>)
 8011282:	4805      	ldr	r0, [pc, #20]	; (8011298 <USBD_FS_ProductStrDescriptor+0x38>)
 8011284:	f7fc fba2 	bl	800d9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8011288:	4b02      	ldr	r3, [pc, #8]	; (8011294 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801128a:	4618      	mov	r0, r3
 801128c:	3708      	adds	r7, #8
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	2001c754 	.word	0x2001c754
 8011298:	080128d8 	.word	0x080128d8

0801129c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	4603      	mov	r3, r0
 80112a4:	6039      	str	r1, [r7, #0]
 80112a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80112a8:	683a      	ldr	r2, [r7, #0]
 80112aa:	4904      	ldr	r1, [pc, #16]	; (80112bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80112ac:	4804      	ldr	r0, [pc, #16]	; (80112c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80112ae:	f7fc fb8d 	bl	800d9cc <USBD_GetString>
  return USBD_StrDesc;
 80112b2:	4b02      	ldr	r3, [pc, #8]	; (80112bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	2001c754 	.word	0x2001c754
 80112c0:	080128f0 	.word	0x080128f0

080112c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	4603      	mov	r3, r0
 80112cc:	6039      	str	r1, [r7, #0]
 80112ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	221a      	movs	r2, #26
 80112d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80112d6:	f000 f843 	bl	8011360 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80112da:	4b02      	ldr	r3, [pc, #8]	; (80112e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	20000170 	.word	0x20000170

080112e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	4603      	mov	r3, r0
 80112f0:	6039      	str	r1, [r7, #0]
 80112f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80112f4:	79fb      	ldrb	r3, [r7, #7]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d105      	bne.n	8011306 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80112fa:	683a      	ldr	r2, [r7, #0]
 80112fc:	4907      	ldr	r1, [pc, #28]	; (801131c <USBD_FS_ConfigStrDescriptor+0x34>)
 80112fe:	4808      	ldr	r0, [pc, #32]	; (8011320 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011300:	f7fc fb64 	bl	800d9cc <USBD_GetString>
 8011304:	e004      	b.n	8011310 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011306:	683a      	ldr	r2, [r7, #0]
 8011308:	4904      	ldr	r1, [pc, #16]	; (801131c <USBD_FS_ConfigStrDescriptor+0x34>)
 801130a:	4805      	ldr	r0, [pc, #20]	; (8011320 <USBD_FS_ConfigStrDescriptor+0x38>)
 801130c:	f7fc fb5e 	bl	800d9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8011310:	4b02      	ldr	r3, [pc, #8]	; (801131c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011312:	4618      	mov	r0, r3
 8011314:	3708      	adds	r7, #8
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	2001c754 	.word	0x2001c754
 8011320:	08012904 	.word	0x08012904

08011324 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b082      	sub	sp, #8
 8011328:	af00      	add	r7, sp, #0
 801132a:	4603      	mov	r3, r0
 801132c:	6039      	str	r1, [r7, #0]
 801132e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011330:	79fb      	ldrb	r3, [r7, #7]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d105      	bne.n	8011342 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011336:	683a      	ldr	r2, [r7, #0]
 8011338:	4907      	ldr	r1, [pc, #28]	; (8011358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801133a:	4808      	ldr	r0, [pc, #32]	; (801135c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801133c:	f7fc fb46 	bl	800d9cc <USBD_GetString>
 8011340:	e004      	b.n	801134c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011342:	683a      	ldr	r2, [r7, #0]
 8011344:	4904      	ldr	r1, [pc, #16]	; (8011358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011346:	4805      	ldr	r0, [pc, #20]	; (801135c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011348:	f7fc fb40 	bl	800d9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 801134c:	4b02      	ldr	r3, [pc, #8]	; (8011358 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801134e:	4618      	mov	r0, r3
 8011350:	3708      	adds	r7, #8
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
 8011356:	bf00      	nop
 8011358:	2001c754 	.word	0x2001c754
 801135c:	08012910 	.word	0x08012910

08011360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011366:	4b0f      	ldr	r3, [pc, #60]	; (80113a4 <Get_SerialNum+0x44>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801136c:	4b0e      	ldr	r3, [pc, #56]	; (80113a8 <Get_SerialNum+0x48>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011372:	4b0e      	ldr	r3, [pc, #56]	; (80113ac <Get_SerialNum+0x4c>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011378:	68fa      	ldr	r2, [r7, #12]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4413      	add	r3, r2
 801137e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d009      	beq.n	801139a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011386:	2208      	movs	r2, #8
 8011388:	4909      	ldr	r1, [pc, #36]	; (80113b0 <Get_SerialNum+0x50>)
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f000 f814 	bl	80113b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011390:	2204      	movs	r2, #4
 8011392:	4908      	ldr	r1, [pc, #32]	; (80113b4 <Get_SerialNum+0x54>)
 8011394:	68b8      	ldr	r0, [r7, #8]
 8011396:	f000 f80f 	bl	80113b8 <IntToUnicode>
  }
}
 801139a:	bf00      	nop
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	1fff7a10 	.word	0x1fff7a10
 80113a8:	1fff7a14 	.word	0x1fff7a14
 80113ac:	1fff7a18 	.word	0x1fff7a18
 80113b0:	20000172 	.word	0x20000172
 80113b4:	20000182 	.word	0x20000182

080113b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b087      	sub	sp, #28
 80113bc:	af00      	add	r7, sp, #0
 80113be:	60f8      	str	r0, [r7, #12]
 80113c0:	60b9      	str	r1, [r7, #8]
 80113c2:	4613      	mov	r3, r2
 80113c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80113ca:	2300      	movs	r3, #0
 80113cc:	75fb      	strb	r3, [r7, #23]
 80113ce:	e027      	b.n	8011420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	0f1b      	lsrs	r3, r3, #28
 80113d4:	2b09      	cmp	r3, #9
 80113d6:	d80b      	bhi.n	80113f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	0f1b      	lsrs	r3, r3, #28
 80113dc:	b2da      	uxtb	r2, r3
 80113de:	7dfb      	ldrb	r3, [r7, #23]
 80113e0:	005b      	lsls	r3, r3, #1
 80113e2:	4619      	mov	r1, r3
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	440b      	add	r3, r1
 80113e8:	3230      	adds	r2, #48	; 0x30
 80113ea:	b2d2      	uxtb	r2, r2
 80113ec:	701a      	strb	r2, [r3, #0]
 80113ee:	e00a      	b.n	8011406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	0f1b      	lsrs	r3, r3, #28
 80113f4:	b2da      	uxtb	r2, r3
 80113f6:	7dfb      	ldrb	r3, [r7, #23]
 80113f8:	005b      	lsls	r3, r3, #1
 80113fa:	4619      	mov	r1, r3
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	440b      	add	r3, r1
 8011400:	3237      	adds	r2, #55	; 0x37
 8011402:	b2d2      	uxtb	r2, r2
 8011404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	011b      	lsls	r3, r3, #4
 801140a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801140c:	7dfb      	ldrb	r3, [r7, #23]
 801140e:	005b      	lsls	r3, r3, #1
 8011410:	3301      	adds	r3, #1
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	4413      	add	r3, r2
 8011416:	2200      	movs	r2, #0
 8011418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801141a:	7dfb      	ldrb	r3, [r7, #23]
 801141c:	3301      	adds	r3, #1
 801141e:	75fb      	strb	r3, [r7, #23]
 8011420:	7dfa      	ldrb	r2, [r7, #23]
 8011422:	79fb      	ldrb	r3, [r7, #7]
 8011424:	429a      	cmp	r2, r3
 8011426:	d3d3      	bcc.n	80113d0 <IntToUnicode+0x18>
  }
}
 8011428:	bf00      	nop
 801142a:	bf00      	nop
 801142c:	371c      	adds	r7, #28
 801142e:	46bd      	mov	sp, r7
 8011430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011434:	4770      	bx	lr
	...

08011438 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b08a      	sub	sp, #40	; 0x28
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011440:	f107 0314 	add.w	r3, r7, #20
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]
 8011448:	605a      	str	r2, [r3, #4]
 801144a:	609a      	str	r2, [r3, #8]
 801144c:	60da      	str	r2, [r3, #12]
 801144e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011458:	d13a      	bne.n	80114d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801145a:	2300      	movs	r3, #0
 801145c:	613b      	str	r3, [r7, #16]
 801145e:	4b1e      	ldr	r3, [pc, #120]	; (80114d8 <HAL_PCD_MspInit+0xa0>)
 8011460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011462:	4a1d      	ldr	r2, [pc, #116]	; (80114d8 <HAL_PCD_MspInit+0xa0>)
 8011464:	f043 0301 	orr.w	r3, r3, #1
 8011468:	6313      	str	r3, [r2, #48]	; 0x30
 801146a:	4b1b      	ldr	r3, [pc, #108]	; (80114d8 <HAL_PCD_MspInit+0xa0>)
 801146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801146e:	f003 0301 	and.w	r3, r3, #1
 8011472:	613b      	str	r3, [r7, #16]
 8011474:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011476:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801147c:	2302      	movs	r3, #2
 801147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011480:	2300      	movs	r3, #0
 8011482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011484:	2303      	movs	r3, #3
 8011486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011488:	230a      	movs	r3, #10
 801148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801148c:	f107 0314 	add.w	r3, r7, #20
 8011490:	4619      	mov	r1, r3
 8011492:	4812      	ldr	r0, [pc, #72]	; (80114dc <HAL_PCD_MspInit+0xa4>)
 8011494:	f7f3 f8f0 	bl	8004678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011498:	4b0f      	ldr	r3, [pc, #60]	; (80114d8 <HAL_PCD_MspInit+0xa0>)
 801149a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801149c:	4a0e      	ldr	r2, [pc, #56]	; (80114d8 <HAL_PCD_MspInit+0xa0>)
 801149e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114a2:	6353      	str	r3, [r2, #52]	; 0x34
 80114a4:	2300      	movs	r3, #0
 80114a6:	60fb      	str	r3, [r7, #12]
 80114a8:	4b0b      	ldr	r3, [pc, #44]	; (80114d8 <HAL_PCD_MspInit+0xa0>)
 80114aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114ac:	4a0a      	ldr	r2, [pc, #40]	; (80114d8 <HAL_PCD_MspInit+0xa0>)
 80114ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80114b2:	6453      	str	r3, [r2, #68]	; 0x44
 80114b4:	4b08      	ldr	r3, [pc, #32]	; (80114d8 <HAL_PCD_MspInit+0xa0>)
 80114b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80114bc:	60fb      	str	r3, [r7, #12]
 80114be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80114c0:	2200      	movs	r2, #0
 80114c2:	2105      	movs	r1, #5
 80114c4:	2043      	movs	r0, #67	; 0x43
 80114c6:	f7f2 fb5d 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80114ca:	2043      	movs	r0, #67	; 0x43
 80114cc:	f7f2 fb86 	bl	8003bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80114d0:	bf00      	nop
 80114d2:	3728      	adds	r7, #40	; 0x28
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	40023800 	.word	0x40023800
 80114dc:	40020000 	.word	0x40020000

080114e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80114f4:	4619      	mov	r1, r3
 80114f6:	4610      	mov	r0, r2
 80114f8:	f7fb f909 	bl	800c70e <USBD_LL_SetupStage>
}
 80114fc:	bf00      	nop
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	460b      	mov	r3, r1
 801150e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011516:	78fa      	ldrb	r2, [r7, #3]
 8011518:	6879      	ldr	r1, [r7, #4]
 801151a:	4613      	mov	r3, r2
 801151c:	00db      	lsls	r3, r3, #3
 801151e:	4413      	add	r3, r2
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	440b      	add	r3, r1
 8011524:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	78fb      	ldrb	r3, [r7, #3]
 801152c:	4619      	mov	r1, r3
 801152e:	f7fb f943 	bl	800c7b8 <USBD_LL_DataOutStage>
}
 8011532:	bf00      	nop
 8011534:	3708      	adds	r7, #8
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}

0801153a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801153a:	b580      	push	{r7, lr}
 801153c:	b082      	sub	sp, #8
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
 8011542:	460b      	mov	r3, r1
 8011544:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801154c:	78fa      	ldrb	r2, [r7, #3]
 801154e:	6879      	ldr	r1, [r7, #4]
 8011550:	4613      	mov	r3, r2
 8011552:	00db      	lsls	r3, r3, #3
 8011554:	4413      	add	r3, r2
 8011556:	009b      	lsls	r3, r3, #2
 8011558:	440b      	add	r3, r1
 801155a:	334c      	adds	r3, #76	; 0x4c
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	78fb      	ldrb	r3, [r7, #3]
 8011560:	4619      	mov	r1, r3
 8011562:	f7fb f9dc 	bl	800c91e <USBD_LL_DataInStage>
}
 8011566:	bf00      	nop
 8011568:	3708      	adds	r7, #8
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801156e:	b580      	push	{r7, lr}
 8011570:	b082      	sub	sp, #8
 8011572:	af00      	add	r7, sp, #0
 8011574:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801157c:	4618      	mov	r0, r3
 801157e:	f7fb fb10 	bl	800cba2 <USBD_LL_SOF>
}
 8011582:	bf00      	nop
 8011584:	3708      	adds	r7, #8
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}

0801158a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b084      	sub	sp, #16
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011592:	2301      	movs	r3, #1
 8011594:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	68db      	ldr	r3, [r3, #12]
 801159a:	2b02      	cmp	r3, #2
 801159c:	d001      	beq.n	80115a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801159e:	f7f0 fcad 	bl	8001efc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80115a8:	7bfa      	ldrb	r2, [r7, #15]
 80115aa:	4611      	mov	r1, r2
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7fb faba 	bl	800cb26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7fb fa62 	bl	800ca82 <USBD_LL_Reset>
}
 80115be:	bf00      	nop
 80115c0:	3710      	adds	r7, #16
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
	...

080115c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fb fab5 	bl	800cb46 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	6812      	ldr	r2, [r2, #0]
 80115ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80115ee:	f043 0301 	orr.w	r3, r3, #1
 80115f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6a1b      	ldr	r3, [r3, #32]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d005      	beq.n	8011608 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80115fc:	4b04      	ldr	r3, [pc, #16]	; (8011610 <HAL_PCD_SuspendCallback+0x48>)
 80115fe:	691b      	ldr	r3, [r3, #16]
 8011600:	4a03      	ldr	r2, [pc, #12]	; (8011610 <HAL_PCD_SuspendCallback+0x48>)
 8011602:	f043 0306 	orr.w	r3, r3, #6
 8011606:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011608:	bf00      	nop
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	e000ed00 	.word	0xe000ed00

08011614 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b082      	sub	sp, #8
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011622:	4618      	mov	r0, r3
 8011624:	f7fb faa5 	bl	800cb72 <USBD_LL_Resume>
}
 8011628:	bf00      	nop
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	460b      	mov	r3, r1
 801163a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011642:	78fa      	ldrb	r2, [r7, #3]
 8011644:	4611      	mov	r1, r2
 8011646:	4618      	mov	r0, r3
 8011648:	f7fb fafd 	bl	800cc46 <USBD_LL_IsoOUTIncomplete>
}
 801164c:	bf00      	nop
 801164e:	3708      	adds	r7, #8
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	460b      	mov	r3, r1
 801165e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011666:	78fa      	ldrb	r2, [r7, #3]
 8011668:	4611      	mov	r1, r2
 801166a:	4618      	mov	r0, r3
 801166c:	f7fb fab9 	bl	800cbe2 <USBD_LL_IsoINIncomplete>
}
 8011670:	bf00      	nop
 8011672:	3708      	adds	r7, #8
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011686:	4618      	mov	r0, r3
 8011688:	f7fb fb0f 	bl	800ccaa <USBD_LL_DevConnected>
}
 801168c:	bf00      	nop
 801168e:	3708      	adds	r7, #8
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7fb fb0c 	bl	800ccc0 <USBD_LL_DevDisconnected>
}
 80116a8:	bf00      	nop
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b082      	sub	sp, #8
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d13c      	bne.n	801173a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80116c0:	4a20      	ldr	r2, [pc, #128]	; (8011744 <USBD_LL_Init+0x94>)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	4a1e      	ldr	r2, [pc, #120]	; (8011744 <USBD_LL_Init+0x94>)
 80116cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80116d0:	4b1c      	ldr	r3, [pc, #112]	; (8011744 <USBD_LL_Init+0x94>)
 80116d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80116d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80116d8:	4b1a      	ldr	r3, [pc, #104]	; (8011744 <USBD_LL_Init+0x94>)
 80116da:	2204      	movs	r2, #4
 80116dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80116de:	4b19      	ldr	r3, [pc, #100]	; (8011744 <USBD_LL_Init+0x94>)
 80116e0:	2202      	movs	r2, #2
 80116e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80116e4:	4b17      	ldr	r3, [pc, #92]	; (8011744 <USBD_LL_Init+0x94>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80116ea:	4b16      	ldr	r3, [pc, #88]	; (8011744 <USBD_LL_Init+0x94>)
 80116ec:	2202      	movs	r2, #2
 80116ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80116f0:	4b14      	ldr	r3, [pc, #80]	; (8011744 <USBD_LL_Init+0x94>)
 80116f2:	2200      	movs	r2, #0
 80116f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80116f6:	4b13      	ldr	r3, [pc, #76]	; (8011744 <USBD_LL_Init+0x94>)
 80116f8:	2200      	movs	r2, #0
 80116fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80116fc:	4b11      	ldr	r3, [pc, #68]	; (8011744 <USBD_LL_Init+0x94>)
 80116fe:	2200      	movs	r2, #0
 8011700:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011702:	4b10      	ldr	r3, [pc, #64]	; (8011744 <USBD_LL_Init+0x94>)
 8011704:	2200      	movs	r2, #0
 8011706:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011708:	4b0e      	ldr	r3, [pc, #56]	; (8011744 <USBD_LL_Init+0x94>)
 801170a:	2200      	movs	r2, #0
 801170c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801170e:	480d      	ldr	r0, [pc, #52]	; (8011744 <USBD_LL_Init+0x94>)
 8011710:	f7f3 fc62 	bl	8004fd8 <HAL_PCD_Init>
 8011714:	4603      	mov	r3, r0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d001      	beq.n	801171e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801171a:	f7f0 fbef 	bl	8001efc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801171e:	2180      	movs	r1, #128	; 0x80
 8011720:	4808      	ldr	r0, [pc, #32]	; (8011744 <USBD_LL_Init+0x94>)
 8011722:	f7f4 fec4 	bl	80064ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011726:	2240      	movs	r2, #64	; 0x40
 8011728:	2100      	movs	r1, #0
 801172a:	4806      	ldr	r0, [pc, #24]	; (8011744 <USBD_LL_Init+0x94>)
 801172c:	f7f4 fe78 	bl	8006420 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011730:	2280      	movs	r2, #128	; 0x80
 8011732:	2101      	movs	r1, #1
 8011734:	4803      	ldr	r0, [pc, #12]	; (8011744 <USBD_LL_Init+0x94>)
 8011736:	f7f4 fe73 	bl	8006420 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801173a:	2300      	movs	r3, #0
}
 801173c:	4618      	mov	r0, r3
 801173e:	3708      	adds	r7, #8
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	2001c954 	.word	0x2001c954

08011748 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011750:	2300      	movs	r3, #0
 8011752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011754:	2300      	movs	r3, #0
 8011756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801175e:	4618      	mov	r0, r3
 8011760:	f7f3 fd62 	bl	8005228 <HAL_PCD_Start>
 8011764:	4603      	mov	r3, r0
 8011766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011768:	7bfb      	ldrb	r3, [r7, #15]
 801176a:	4618      	mov	r0, r3
 801176c:	f000 f942 	bl	80119f4 <USBD_Get_USB_Status>
 8011770:	4603      	mov	r3, r0
 8011772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011774:	7bbb      	ldrb	r3, [r7, #14]
}
 8011776:	4618      	mov	r0, r3
 8011778:	3710      	adds	r7, #16
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b084      	sub	sp, #16
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
 8011786:	4608      	mov	r0, r1
 8011788:	4611      	mov	r1, r2
 801178a:	461a      	mov	r2, r3
 801178c:	4603      	mov	r3, r0
 801178e:	70fb      	strb	r3, [r7, #3]
 8011790:	460b      	mov	r3, r1
 8011792:	70bb      	strb	r3, [r7, #2]
 8011794:	4613      	mov	r3, r2
 8011796:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011798:	2300      	movs	r3, #0
 801179a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801179c:	2300      	movs	r3, #0
 801179e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80117a6:	78bb      	ldrb	r3, [r7, #2]
 80117a8:	883a      	ldrh	r2, [r7, #0]
 80117aa:	78f9      	ldrb	r1, [r7, #3]
 80117ac:	f7f4 fa33 	bl	8005c16 <HAL_PCD_EP_Open>
 80117b0:	4603      	mov	r3, r0
 80117b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117b4:	7bfb      	ldrb	r3, [r7, #15]
 80117b6:	4618      	mov	r0, r3
 80117b8:	f000 f91c 	bl	80119f4 <USBD_Get_USB_Status>
 80117bc:	4603      	mov	r3, r0
 80117be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3710      	adds	r7, #16
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}

080117ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117ca:	b580      	push	{r7, lr}
 80117cc:	b084      	sub	sp, #16
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6078      	str	r0, [r7, #4]
 80117d2:	460b      	mov	r3, r1
 80117d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117d6:	2300      	movs	r3, #0
 80117d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117da:	2300      	movs	r3, #0
 80117dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80117e4:	78fa      	ldrb	r2, [r7, #3]
 80117e6:	4611      	mov	r1, r2
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7f4 fa7c 	bl	8005ce6 <HAL_PCD_EP_Close>
 80117ee:	4603      	mov	r3, r0
 80117f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117f2:	7bfb      	ldrb	r3, [r7, #15]
 80117f4:	4618      	mov	r0, r3
 80117f6:	f000 f8fd 	bl	80119f4 <USBD_Get_USB_Status>
 80117fa:	4603      	mov	r3, r0
 80117fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8011800:	4618      	mov	r0, r3
 8011802:	3710      	adds	r7, #16
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}

08011808 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b084      	sub	sp, #16
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	460b      	mov	r3, r1
 8011812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011814:	2300      	movs	r3, #0
 8011816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011818:	2300      	movs	r3, #0
 801181a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011822:	78fa      	ldrb	r2, [r7, #3]
 8011824:	4611      	mov	r1, r2
 8011826:	4618      	mov	r0, r3
 8011828:	f7f4 fb54 	bl	8005ed4 <HAL_PCD_EP_SetStall>
 801182c:	4603      	mov	r3, r0
 801182e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011830:	7bfb      	ldrb	r3, [r7, #15]
 8011832:	4618      	mov	r0, r3
 8011834:	f000 f8de 	bl	80119f4 <USBD_Get_USB_Status>
 8011838:	4603      	mov	r3, r0
 801183a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801183c:	7bbb      	ldrb	r3, [r7, #14]
}
 801183e:	4618      	mov	r0, r3
 8011840:	3710      	adds	r7, #16
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}

08011846 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011846:	b580      	push	{r7, lr}
 8011848:	b084      	sub	sp, #16
 801184a:	af00      	add	r7, sp, #0
 801184c:	6078      	str	r0, [r7, #4]
 801184e:	460b      	mov	r3, r1
 8011850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011852:	2300      	movs	r3, #0
 8011854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011856:	2300      	movs	r3, #0
 8011858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011860:	78fa      	ldrb	r2, [r7, #3]
 8011862:	4611      	mov	r1, r2
 8011864:	4618      	mov	r0, r3
 8011866:	f7f4 fb99 	bl	8005f9c <HAL_PCD_EP_ClrStall>
 801186a:	4603      	mov	r3, r0
 801186c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801186e:	7bfb      	ldrb	r3, [r7, #15]
 8011870:	4618      	mov	r0, r3
 8011872:	f000 f8bf 	bl	80119f4 <USBD_Get_USB_Status>
 8011876:	4603      	mov	r3, r0
 8011878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801187a:	7bbb      	ldrb	r3, [r7, #14]
}
 801187c:	4618      	mov	r0, r3
 801187e:	3710      	adds	r7, #16
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}

08011884 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011884:	b480      	push	{r7}
 8011886:	b085      	sub	sp, #20
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	460b      	mov	r3, r1
 801188e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011896:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801189c:	2b00      	cmp	r3, #0
 801189e:	da0b      	bge.n	80118b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80118a0:	78fb      	ldrb	r3, [r7, #3]
 80118a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80118a6:	68f9      	ldr	r1, [r7, #12]
 80118a8:	4613      	mov	r3, r2
 80118aa:	00db      	lsls	r3, r3, #3
 80118ac:	4413      	add	r3, r2
 80118ae:	009b      	lsls	r3, r3, #2
 80118b0:	440b      	add	r3, r1
 80118b2:	333e      	adds	r3, #62	; 0x3e
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	e00b      	b.n	80118d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80118b8:	78fb      	ldrb	r3, [r7, #3]
 80118ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80118be:	68f9      	ldr	r1, [r7, #12]
 80118c0:	4613      	mov	r3, r2
 80118c2:	00db      	lsls	r3, r3, #3
 80118c4:	4413      	add	r3, r2
 80118c6:	009b      	lsls	r3, r3, #2
 80118c8:	440b      	add	r3, r1
 80118ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80118ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3714      	adds	r7, #20
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr

080118dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b084      	sub	sp, #16
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	460b      	mov	r3, r1
 80118e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118e8:	2300      	movs	r3, #0
 80118ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118ec:	2300      	movs	r3, #0
 80118ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80118f6:	78fa      	ldrb	r2, [r7, #3]
 80118f8:	4611      	mov	r1, r2
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7f4 f966 	bl	8005bcc <HAL_PCD_SetAddress>
 8011900:	4603      	mov	r3, r0
 8011902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011904:	7bfb      	ldrb	r3, [r7, #15]
 8011906:	4618      	mov	r0, r3
 8011908:	f000 f874 	bl	80119f4 <USBD_Get_USB_Status>
 801190c:	4603      	mov	r3, r0
 801190e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011910:	7bbb      	ldrb	r3, [r7, #14]
}
 8011912:	4618      	mov	r0, r3
 8011914:	3710      	adds	r7, #16
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}

0801191a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801191a:	b580      	push	{r7, lr}
 801191c:	b086      	sub	sp, #24
 801191e:	af00      	add	r7, sp, #0
 8011920:	60f8      	str	r0, [r7, #12]
 8011922:	607a      	str	r2, [r7, #4]
 8011924:	603b      	str	r3, [r7, #0]
 8011926:	460b      	mov	r3, r1
 8011928:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801192a:	2300      	movs	r3, #0
 801192c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801192e:	2300      	movs	r3, #0
 8011930:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011938:	7af9      	ldrb	r1, [r7, #11]
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	f7f4 fa7f 	bl	8005e40 <HAL_PCD_EP_Transmit>
 8011942:	4603      	mov	r3, r0
 8011944:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011946:	7dfb      	ldrb	r3, [r7, #23]
 8011948:	4618      	mov	r0, r3
 801194a:	f000 f853 	bl	80119f4 <USBD_Get_USB_Status>
 801194e:	4603      	mov	r3, r0
 8011950:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011952:	7dbb      	ldrb	r3, [r7, #22]
}
 8011954:	4618      	mov	r0, r3
 8011956:	3718      	adds	r7, #24
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b086      	sub	sp, #24
 8011960:	af00      	add	r7, sp, #0
 8011962:	60f8      	str	r0, [r7, #12]
 8011964:	607a      	str	r2, [r7, #4]
 8011966:	603b      	str	r3, [r7, #0]
 8011968:	460b      	mov	r3, r1
 801196a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801196c:	2300      	movs	r3, #0
 801196e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011970:	2300      	movs	r3, #0
 8011972:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801197a:	7af9      	ldrb	r1, [r7, #11]
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	f7f4 f9fb 	bl	8005d7a <HAL_PCD_EP_Receive>
 8011984:	4603      	mov	r3, r0
 8011986:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011988:	7dfb      	ldrb	r3, [r7, #23]
 801198a:	4618      	mov	r0, r3
 801198c:	f000 f832 	bl	80119f4 <USBD_Get_USB_Status>
 8011990:	4603      	mov	r3, r0
 8011992:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011994:	7dbb      	ldrb	r3, [r7, #22]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3718      	adds	r7, #24
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b082      	sub	sp, #8
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
 80119a6:	460b      	mov	r3, r1
 80119a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80119b0:	78fa      	ldrb	r2, [r7, #3]
 80119b2:	4611      	mov	r1, r2
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7f4 fa2b 	bl	8005e10 <HAL_PCD_EP_GetRxCount>
 80119ba:	4603      	mov	r3, r0
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3708      	adds	r7, #8
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80119cc:	4b03      	ldr	r3, [pc, #12]	; (80119dc <USBD_static_malloc+0x18>)
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	370c      	adds	r7, #12
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr
 80119da:	bf00      	nop
 80119dc:	2001ce60 	.word	0x2001ce60

080119e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]

}
 80119e8:	bf00      	nop
 80119ea:	370c      	adds	r7, #12
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr

080119f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b085      	sub	sp, #20
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	4603      	mov	r3, r0
 80119fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119fe:	2300      	movs	r3, #0
 8011a00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011a02:	79fb      	ldrb	r3, [r7, #7]
 8011a04:	2b03      	cmp	r3, #3
 8011a06:	d817      	bhi.n	8011a38 <USBD_Get_USB_Status+0x44>
 8011a08:	a201      	add	r2, pc, #4	; (adr r2, 8011a10 <USBD_Get_USB_Status+0x1c>)
 8011a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a0e:	bf00      	nop
 8011a10:	08011a21 	.word	0x08011a21
 8011a14:	08011a27 	.word	0x08011a27
 8011a18:	08011a2d 	.word	0x08011a2d
 8011a1c:	08011a33 	.word	0x08011a33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011a20:	2300      	movs	r3, #0
 8011a22:	73fb      	strb	r3, [r7, #15]
    break;
 8011a24:	e00b      	b.n	8011a3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011a26:	2303      	movs	r3, #3
 8011a28:	73fb      	strb	r3, [r7, #15]
    break;
 8011a2a:	e008      	b.n	8011a3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8011a30:	e005      	b.n	8011a3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011a32:	2303      	movs	r3, #3
 8011a34:	73fb      	strb	r3, [r7, #15]
    break;
 8011a36:	e002      	b.n	8011a3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011a38:	2303      	movs	r3, #3
 8011a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a3c:	bf00      	nop
  }
  return usb_status;
 8011a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3714      	adds	r7, #20
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <__errno>:
 8011a4c:	4b01      	ldr	r3, [pc, #4]	; (8011a54 <__errno+0x8>)
 8011a4e:	6818      	ldr	r0, [r3, #0]
 8011a50:	4770      	bx	lr
 8011a52:	bf00      	nop
 8011a54:	2000018c 	.word	0x2000018c

08011a58 <__libc_init_array>:
 8011a58:	b570      	push	{r4, r5, r6, lr}
 8011a5a:	4d0d      	ldr	r5, [pc, #52]	; (8011a90 <__libc_init_array+0x38>)
 8011a5c:	4c0d      	ldr	r4, [pc, #52]	; (8011a94 <__libc_init_array+0x3c>)
 8011a5e:	1b64      	subs	r4, r4, r5
 8011a60:	10a4      	asrs	r4, r4, #2
 8011a62:	2600      	movs	r6, #0
 8011a64:	42a6      	cmp	r6, r4
 8011a66:	d109      	bne.n	8011a7c <__libc_init_array+0x24>
 8011a68:	4d0b      	ldr	r5, [pc, #44]	; (8011a98 <__libc_init_array+0x40>)
 8011a6a:	4c0c      	ldr	r4, [pc, #48]	; (8011a9c <__libc_init_array+0x44>)
 8011a6c:	f000 fd0e 	bl	801248c <_init>
 8011a70:	1b64      	subs	r4, r4, r5
 8011a72:	10a4      	asrs	r4, r4, #2
 8011a74:	2600      	movs	r6, #0
 8011a76:	42a6      	cmp	r6, r4
 8011a78:	d105      	bne.n	8011a86 <__libc_init_array+0x2e>
 8011a7a:	bd70      	pop	{r4, r5, r6, pc}
 8011a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a80:	4798      	blx	r3
 8011a82:	3601      	adds	r6, #1
 8011a84:	e7ee      	b.n	8011a64 <__libc_init_array+0xc>
 8011a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a8a:	4798      	blx	r3
 8011a8c:	3601      	adds	r6, #1
 8011a8e:	e7f2      	b.n	8011a76 <__libc_init_array+0x1e>
 8011a90:	08014b98 	.word	0x08014b98
 8011a94:	08014b98 	.word	0x08014b98
 8011a98:	08014b98 	.word	0x08014b98
 8011a9c:	08014b9c 	.word	0x08014b9c

08011aa0 <malloc>:
 8011aa0:	4b02      	ldr	r3, [pc, #8]	; (8011aac <malloc+0xc>)
 8011aa2:	4601      	mov	r1, r0
 8011aa4:	6818      	ldr	r0, [r3, #0]
 8011aa6:	f000 b88d 	b.w	8011bc4 <_malloc_r>
 8011aaa:	bf00      	nop
 8011aac:	2000018c 	.word	0x2000018c

08011ab0 <free>:
 8011ab0:	4b02      	ldr	r3, [pc, #8]	; (8011abc <free+0xc>)
 8011ab2:	4601      	mov	r1, r0
 8011ab4:	6818      	ldr	r0, [r3, #0]
 8011ab6:	f000 b819 	b.w	8011aec <_free_r>
 8011aba:	bf00      	nop
 8011abc:	2000018c 	.word	0x2000018c

08011ac0 <memcpy>:
 8011ac0:	440a      	add	r2, r1
 8011ac2:	4291      	cmp	r1, r2
 8011ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ac8:	d100      	bne.n	8011acc <memcpy+0xc>
 8011aca:	4770      	bx	lr
 8011acc:	b510      	push	{r4, lr}
 8011ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ad6:	4291      	cmp	r1, r2
 8011ad8:	d1f9      	bne.n	8011ace <memcpy+0xe>
 8011ada:	bd10      	pop	{r4, pc}

08011adc <memset>:
 8011adc:	4402      	add	r2, r0
 8011ade:	4603      	mov	r3, r0
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d100      	bne.n	8011ae6 <memset+0xa>
 8011ae4:	4770      	bx	lr
 8011ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8011aea:	e7f9      	b.n	8011ae0 <memset+0x4>

08011aec <_free_r>:
 8011aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011aee:	2900      	cmp	r1, #0
 8011af0:	d044      	beq.n	8011b7c <_free_r+0x90>
 8011af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011af6:	9001      	str	r0, [sp, #4]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	f1a1 0404 	sub.w	r4, r1, #4
 8011afe:	bfb8      	it	lt
 8011b00:	18e4      	addlt	r4, r4, r3
 8011b02:	f000 f975 	bl	8011df0 <__malloc_lock>
 8011b06:	4a1e      	ldr	r2, [pc, #120]	; (8011b80 <_free_r+0x94>)
 8011b08:	9801      	ldr	r0, [sp, #4]
 8011b0a:	6813      	ldr	r3, [r2, #0]
 8011b0c:	b933      	cbnz	r3, 8011b1c <_free_r+0x30>
 8011b0e:	6063      	str	r3, [r4, #4]
 8011b10:	6014      	str	r4, [r2, #0]
 8011b12:	b003      	add	sp, #12
 8011b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b18:	f000 b970 	b.w	8011dfc <__malloc_unlock>
 8011b1c:	42a3      	cmp	r3, r4
 8011b1e:	d908      	bls.n	8011b32 <_free_r+0x46>
 8011b20:	6825      	ldr	r5, [r4, #0]
 8011b22:	1961      	adds	r1, r4, r5
 8011b24:	428b      	cmp	r3, r1
 8011b26:	bf01      	itttt	eq
 8011b28:	6819      	ldreq	r1, [r3, #0]
 8011b2a:	685b      	ldreq	r3, [r3, #4]
 8011b2c:	1949      	addeq	r1, r1, r5
 8011b2e:	6021      	streq	r1, [r4, #0]
 8011b30:	e7ed      	b.n	8011b0e <_free_r+0x22>
 8011b32:	461a      	mov	r2, r3
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	b10b      	cbz	r3, 8011b3c <_free_r+0x50>
 8011b38:	42a3      	cmp	r3, r4
 8011b3a:	d9fa      	bls.n	8011b32 <_free_r+0x46>
 8011b3c:	6811      	ldr	r1, [r2, #0]
 8011b3e:	1855      	adds	r5, r2, r1
 8011b40:	42a5      	cmp	r5, r4
 8011b42:	d10b      	bne.n	8011b5c <_free_r+0x70>
 8011b44:	6824      	ldr	r4, [r4, #0]
 8011b46:	4421      	add	r1, r4
 8011b48:	1854      	adds	r4, r2, r1
 8011b4a:	42a3      	cmp	r3, r4
 8011b4c:	6011      	str	r1, [r2, #0]
 8011b4e:	d1e0      	bne.n	8011b12 <_free_r+0x26>
 8011b50:	681c      	ldr	r4, [r3, #0]
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	6053      	str	r3, [r2, #4]
 8011b56:	4421      	add	r1, r4
 8011b58:	6011      	str	r1, [r2, #0]
 8011b5a:	e7da      	b.n	8011b12 <_free_r+0x26>
 8011b5c:	d902      	bls.n	8011b64 <_free_r+0x78>
 8011b5e:	230c      	movs	r3, #12
 8011b60:	6003      	str	r3, [r0, #0]
 8011b62:	e7d6      	b.n	8011b12 <_free_r+0x26>
 8011b64:	6825      	ldr	r5, [r4, #0]
 8011b66:	1961      	adds	r1, r4, r5
 8011b68:	428b      	cmp	r3, r1
 8011b6a:	bf04      	itt	eq
 8011b6c:	6819      	ldreq	r1, [r3, #0]
 8011b6e:	685b      	ldreq	r3, [r3, #4]
 8011b70:	6063      	str	r3, [r4, #4]
 8011b72:	bf04      	itt	eq
 8011b74:	1949      	addeq	r1, r1, r5
 8011b76:	6021      	streq	r1, [r4, #0]
 8011b78:	6054      	str	r4, [r2, #4]
 8011b7a:	e7ca      	b.n	8011b12 <_free_r+0x26>
 8011b7c:	b003      	add	sp, #12
 8011b7e:	bd30      	pop	{r4, r5, pc}
 8011b80:	2001d080 	.word	0x2001d080

08011b84 <sbrk_aligned>:
 8011b84:	b570      	push	{r4, r5, r6, lr}
 8011b86:	4e0e      	ldr	r6, [pc, #56]	; (8011bc0 <sbrk_aligned+0x3c>)
 8011b88:	460c      	mov	r4, r1
 8011b8a:	6831      	ldr	r1, [r6, #0]
 8011b8c:	4605      	mov	r5, r0
 8011b8e:	b911      	cbnz	r1, 8011b96 <sbrk_aligned+0x12>
 8011b90:	f000 f8f6 	bl	8011d80 <_sbrk_r>
 8011b94:	6030      	str	r0, [r6, #0]
 8011b96:	4621      	mov	r1, r4
 8011b98:	4628      	mov	r0, r5
 8011b9a:	f000 f8f1 	bl	8011d80 <_sbrk_r>
 8011b9e:	1c43      	adds	r3, r0, #1
 8011ba0:	d00a      	beq.n	8011bb8 <sbrk_aligned+0x34>
 8011ba2:	1cc4      	adds	r4, r0, #3
 8011ba4:	f024 0403 	bic.w	r4, r4, #3
 8011ba8:	42a0      	cmp	r0, r4
 8011baa:	d007      	beq.n	8011bbc <sbrk_aligned+0x38>
 8011bac:	1a21      	subs	r1, r4, r0
 8011bae:	4628      	mov	r0, r5
 8011bb0:	f000 f8e6 	bl	8011d80 <_sbrk_r>
 8011bb4:	3001      	adds	r0, #1
 8011bb6:	d101      	bne.n	8011bbc <sbrk_aligned+0x38>
 8011bb8:	f04f 34ff 	mov.w	r4, #4294967295
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	bd70      	pop	{r4, r5, r6, pc}
 8011bc0:	2001d084 	.word	0x2001d084

08011bc4 <_malloc_r>:
 8011bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc8:	1ccd      	adds	r5, r1, #3
 8011bca:	f025 0503 	bic.w	r5, r5, #3
 8011bce:	3508      	adds	r5, #8
 8011bd0:	2d0c      	cmp	r5, #12
 8011bd2:	bf38      	it	cc
 8011bd4:	250c      	movcc	r5, #12
 8011bd6:	2d00      	cmp	r5, #0
 8011bd8:	4607      	mov	r7, r0
 8011bda:	db01      	blt.n	8011be0 <_malloc_r+0x1c>
 8011bdc:	42a9      	cmp	r1, r5
 8011bde:	d905      	bls.n	8011bec <_malloc_r+0x28>
 8011be0:	230c      	movs	r3, #12
 8011be2:	603b      	str	r3, [r7, #0]
 8011be4:	2600      	movs	r6, #0
 8011be6:	4630      	mov	r0, r6
 8011be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bec:	4e2e      	ldr	r6, [pc, #184]	; (8011ca8 <_malloc_r+0xe4>)
 8011bee:	f000 f8ff 	bl	8011df0 <__malloc_lock>
 8011bf2:	6833      	ldr	r3, [r6, #0]
 8011bf4:	461c      	mov	r4, r3
 8011bf6:	bb34      	cbnz	r4, 8011c46 <_malloc_r+0x82>
 8011bf8:	4629      	mov	r1, r5
 8011bfa:	4638      	mov	r0, r7
 8011bfc:	f7ff ffc2 	bl	8011b84 <sbrk_aligned>
 8011c00:	1c43      	adds	r3, r0, #1
 8011c02:	4604      	mov	r4, r0
 8011c04:	d14d      	bne.n	8011ca2 <_malloc_r+0xde>
 8011c06:	6834      	ldr	r4, [r6, #0]
 8011c08:	4626      	mov	r6, r4
 8011c0a:	2e00      	cmp	r6, #0
 8011c0c:	d140      	bne.n	8011c90 <_malloc_r+0xcc>
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	4631      	mov	r1, r6
 8011c12:	4638      	mov	r0, r7
 8011c14:	eb04 0803 	add.w	r8, r4, r3
 8011c18:	f000 f8b2 	bl	8011d80 <_sbrk_r>
 8011c1c:	4580      	cmp	r8, r0
 8011c1e:	d13a      	bne.n	8011c96 <_malloc_r+0xd2>
 8011c20:	6821      	ldr	r1, [r4, #0]
 8011c22:	3503      	adds	r5, #3
 8011c24:	1a6d      	subs	r5, r5, r1
 8011c26:	f025 0503 	bic.w	r5, r5, #3
 8011c2a:	3508      	adds	r5, #8
 8011c2c:	2d0c      	cmp	r5, #12
 8011c2e:	bf38      	it	cc
 8011c30:	250c      	movcc	r5, #12
 8011c32:	4629      	mov	r1, r5
 8011c34:	4638      	mov	r0, r7
 8011c36:	f7ff ffa5 	bl	8011b84 <sbrk_aligned>
 8011c3a:	3001      	adds	r0, #1
 8011c3c:	d02b      	beq.n	8011c96 <_malloc_r+0xd2>
 8011c3e:	6823      	ldr	r3, [r4, #0]
 8011c40:	442b      	add	r3, r5
 8011c42:	6023      	str	r3, [r4, #0]
 8011c44:	e00e      	b.n	8011c64 <_malloc_r+0xa0>
 8011c46:	6822      	ldr	r2, [r4, #0]
 8011c48:	1b52      	subs	r2, r2, r5
 8011c4a:	d41e      	bmi.n	8011c8a <_malloc_r+0xc6>
 8011c4c:	2a0b      	cmp	r2, #11
 8011c4e:	d916      	bls.n	8011c7e <_malloc_r+0xba>
 8011c50:	1961      	adds	r1, r4, r5
 8011c52:	42a3      	cmp	r3, r4
 8011c54:	6025      	str	r5, [r4, #0]
 8011c56:	bf18      	it	ne
 8011c58:	6059      	strne	r1, [r3, #4]
 8011c5a:	6863      	ldr	r3, [r4, #4]
 8011c5c:	bf08      	it	eq
 8011c5e:	6031      	streq	r1, [r6, #0]
 8011c60:	5162      	str	r2, [r4, r5]
 8011c62:	604b      	str	r3, [r1, #4]
 8011c64:	4638      	mov	r0, r7
 8011c66:	f104 060b 	add.w	r6, r4, #11
 8011c6a:	f000 f8c7 	bl	8011dfc <__malloc_unlock>
 8011c6e:	f026 0607 	bic.w	r6, r6, #7
 8011c72:	1d23      	adds	r3, r4, #4
 8011c74:	1af2      	subs	r2, r6, r3
 8011c76:	d0b6      	beq.n	8011be6 <_malloc_r+0x22>
 8011c78:	1b9b      	subs	r3, r3, r6
 8011c7a:	50a3      	str	r3, [r4, r2]
 8011c7c:	e7b3      	b.n	8011be6 <_malloc_r+0x22>
 8011c7e:	6862      	ldr	r2, [r4, #4]
 8011c80:	42a3      	cmp	r3, r4
 8011c82:	bf0c      	ite	eq
 8011c84:	6032      	streq	r2, [r6, #0]
 8011c86:	605a      	strne	r2, [r3, #4]
 8011c88:	e7ec      	b.n	8011c64 <_malloc_r+0xa0>
 8011c8a:	4623      	mov	r3, r4
 8011c8c:	6864      	ldr	r4, [r4, #4]
 8011c8e:	e7b2      	b.n	8011bf6 <_malloc_r+0x32>
 8011c90:	4634      	mov	r4, r6
 8011c92:	6876      	ldr	r6, [r6, #4]
 8011c94:	e7b9      	b.n	8011c0a <_malloc_r+0x46>
 8011c96:	230c      	movs	r3, #12
 8011c98:	603b      	str	r3, [r7, #0]
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	f000 f8ae 	bl	8011dfc <__malloc_unlock>
 8011ca0:	e7a1      	b.n	8011be6 <_malloc_r+0x22>
 8011ca2:	6025      	str	r5, [r4, #0]
 8011ca4:	e7de      	b.n	8011c64 <_malloc_r+0xa0>
 8011ca6:	bf00      	nop
 8011ca8:	2001d080 	.word	0x2001d080

08011cac <cleanup_glue>:
 8011cac:	b538      	push	{r3, r4, r5, lr}
 8011cae:	460c      	mov	r4, r1
 8011cb0:	6809      	ldr	r1, [r1, #0]
 8011cb2:	4605      	mov	r5, r0
 8011cb4:	b109      	cbz	r1, 8011cba <cleanup_glue+0xe>
 8011cb6:	f7ff fff9 	bl	8011cac <cleanup_glue>
 8011cba:	4621      	mov	r1, r4
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cc2:	f7ff bf13 	b.w	8011aec <_free_r>
	...

08011cc8 <_reclaim_reent>:
 8011cc8:	4b2c      	ldr	r3, [pc, #176]	; (8011d7c <_reclaim_reent+0xb4>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	4283      	cmp	r3, r0
 8011cce:	b570      	push	{r4, r5, r6, lr}
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	d051      	beq.n	8011d78 <_reclaim_reent+0xb0>
 8011cd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011cd6:	b143      	cbz	r3, 8011cea <_reclaim_reent+0x22>
 8011cd8:	68db      	ldr	r3, [r3, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d14a      	bne.n	8011d74 <_reclaim_reent+0xac>
 8011cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ce0:	6819      	ldr	r1, [r3, #0]
 8011ce2:	b111      	cbz	r1, 8011cea <_reclaim_reent+0x22>
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	f7ff ff01 	bl	8011aec <_free_r>
 8011cea:	6961      	ldr	r1, [r4, #20]
 8011cec:	b111      	cbz	r1, 8011cf4 <_reclaim_reent+0x2c>
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f7ff fefc 	bl	8011aec <_free_r>
 8011cf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011cf6:	b111      	cbz	r1, 8011cfe <_reclaim_reent+0x36>
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	f7ff fef7 	bl	8011aec <_free_r>
 8011cfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011d00:	b111      	cbz	r1, 8011d08 <_reclaim_reent+0x40>
 8011d02:	4620      	mov	r0, r4
 8011d04:	f7ff fef2 	bl	8011aec <_free_r>
 8011d08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011d0a:	b111      	cbz	r1, 8011d12 <_reclaim_reent+0x4a>
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	f7ff feed 	bl	8011aec <_free_r>
 8011d12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011d14:	b111      	cbz	r1, 8011d1c <_reclaim_reent+0x54>
 8011d16:	4620      	mov	r0, r4
 8011d18:	f7ff fee8 	bl	8011aec <_free_r>
 8011d1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011d1e:	b111      	cbz	r1, 8011d26 <_reclaim_reent+0x5e>
 8011d20:	4620      	mov	r0, r4
 8011d22:	f7ff fee3 	bl	8011aec <_free_r>
 8011d26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011d28:	b111      	cbz	r1, 8011d30 <_reclaim_reent+0x68>
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	f7ff fede 	bl	8011aec <_free_r>
 8011d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d32:	b111      	cbz	r1, 8011d3a <_reclaim_reent+0x72>
 8011d34:	4620      	mov	r0, r4
 8011d36:	f7ff fed9 	bl	8011aec <_free_r>
 8011d3a:	69a3      	ldr	r3, [r4, #24]
 8011d3c:	b1e3      	cbz	r3, 8011d78 <_reclaim_reent+0xb0>
 8011d3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011d40:	4620      	mov	r0, r4
 8011d42:	4798      	blx	r3
 8011d44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011d46:	b1b9      	cbz	r1, 8011d78 <_reclaim_reent+0xb0>
 8011d48:	4620      	mov	r0, r4
 8011d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d4e:	f7ff bfad 	b.w	8011cac <cleanup_glue>
 8011d52:	5949      	ldr	r1, [r1, r5]
 8011d54:	b941      	cbnz	r1, 8011d68 <_reclaim_reent+0xa0>
 8011d56:	3504      	adds	r5, #4
 8011d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d5a:	2d80      	cmp	r5, #128	; 0x80
 8011d5c:	68d9      	ldr	r1, [r3, #12]
 8011d5e:	d1f8      	bne.n	8011d52 <_reclaim_reent+0x8a>
 8011d60:	4620      	mov	r0, r4
 8011d62:	f7ff fec3 	bl	8011aec <_free_r>
 8011d66:	e7ba      	b.n	8011cde <_reclaim_reent+0x16>
 8011d68:	680e      	ldr	r6, [r1, #0]
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f7ff febe 	bl	8011aec <_free_r>
 8011d70:	4631      	mov	r1, r6
 8011d72:	e7ef      	b.n	8011d54 <_reclaim_reent+0x8c>
 8011d74:	2500      	movs	r5, #0
 8011d76:	e7ef      	b.n	8011d58 <_reclaim_reent+0x90>
 8011d78:	bd70      	pop	{r4, r5, r6, pc}
 8011d7a:	bf00      	nop
 8011d7c:	2000018c 	.word	0x2000018c

08011d80 <_sbrk_r>:
 8011d80:	b538      	push	{r3, r4, r5, lr}
 8011d82:	4d06      	ldr	r5, [pc, #24]	; (8011d9c <_sbrk_r+0x1c>)
 8011d84:	2300      	movs	r3, #0
 8011d86:	4604      	mov	r4, r0
 8011d88:	4608      	mov	r0, r1
 8011d8a:	602b      	str	r3, [r5, #0]
 8011d8c:	f7f0 fddc 	bl	8002948 <_sbrk>
 8011d90:	1c43      	adds	r3, r0, #1
 8011d92:	d102      	bne.n	8011d9a <_sbrk_r+0x1a>
 8011d94:	682b      	ldr	r3, [r5, #0]
 8011d96:	b103      	cbz	r3, 8011d9a <_sbrk_r+0x1a>
 8011d98:	6023      	str	r3, [r4, #0]
 8011d9a:	bd38      	pop	{r3, r4, r5, pc}
 8011d9c:	2001d088 	.word	0x2001d088

08011da0 <siprintf>:
 8011da0:	b40e      	push	{r1, r2, r3}
 8011da2:	b500      	push	{lr}
 8011da4:	b09c      	sub	sp, #112	; 0x70
 8011da6:	ab1d      	add	r3, sp, #116	; 0x74
 8011da8:	9002      	str	r0, [sp, #8]
 8011daa:	9006      	str	r0, [sp, #24]
 8011dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011db0:	4809      	ldr	r0, [pc, #36]	; (8011dd8 <siprintf+0x38>)
 8011db2:	9107      	str	r1, [sp, #28]
 8011db4:	9104      	str	r1, [sp, #16]
 8011db6:	4909      	ldr	r1, [pc, #36]	; (8011ddc <siprintf+0x3c>)
 8011db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dbc:	9105      	str	r1, [sp, #20]
 8011dbe:	6800      	ldr	r0, [r0, #0]
 8011dc0:	9301      	str	r3, [sp, #4]
 8011dc2:	a902      	add	r1, sp, #8
 8011dc4:	f000 f87c 	bl	8011ec0 <_svfiprintf_r>
 8011dc8:	9b02      	ldr	r3, [sp, #8]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	701a      	strb	r2, [r3, #0]
 8011dce:	b01c      	add	sp, #112	; 0x70
 8011dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dd4:	b003      	add	sp, #12
 8011dd6:	4770      	bx	lr
 8011dd8:	2000018c 	.word	0x2000018c
 8011ddc:	ffff0208 	.word	0xffff0208

08011de0 <strcpy>:
 8011de0:	4603      	mov	r3, r0
 8011de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011de6:	f803 2b01 	strb.w	r2, [r3], #1
 8011dea:	2a00      	cmp	r2, #0
 8011dec:	d1f9      	bne.n	8011de2 <strcpy+0x2>
 8011dee:	4770      	bx	lr

08011df0 <__malloc_lock>:
 8011df0:	4801      	ldr	r0, [pc, #4]	; (8011df8 <__malloc_lock+0x8>)
 8011df2:	f7f1 b98c 	b.w	800310e <__retarget_lock_acquire_recursive>
 8011df6:	bf00      	nop
 8011df8:	20001644 	.word	0x20001644

08011dfc <__malloc_unlock>:
 8011dfc:	4801      	ldr	r0, [pc, #4]	; (8011e04 <__malloc_unlock+0x8>)
 8011dfe:	f7f1 b99a 	b.w	8003136 <__retarget_lock_release_recursive>
 8011e02:	bf00      	nop
 8011e04:	20001644 	.word	0x20001644

08011e08 <__ssputs_r>:
 8011e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e0c:	688e      	ldr	r6, [r1, #8]
 8011e0e:	429e      	cmp	r6, r3
 8011e10:	4682      	mov	sl, r0
 8011e12:	460c      	mov	r4, r1
 8011e14:	4690      	mov	r8, r2
 8011e16:	461f      	mov	r7, r3
 8011e18:	d838      	bhi.n	8011e8c <__ssputs_r+0x84>
 8011e1a:	898a      	ldrh	r2, [r1, #12]
 8011e1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e20:	d032      	beq.n	8011e88 <__ssputs_r+0x80>
 8011e22:	6825      	ldr	r5, [r4, #0]
 8011e24:	6909      	ldr	r1, [r1, #16]
 8011e26:	eba5 0901 	sub.w	r9, r5, r1
 8011e2a:	6965      	ldr	r5, [r4, #20]
 8011e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e34:	3301      	adds	r3, #1
 8011e36:	444b      	add	r3, r9
 8011e38:	106d      	asrs	r5, r5, #1
 8011e3a:	429d      	cmp	r5, r3
 8011e3c:	bf38      	it	cc
 8011e3e:	461d      	movcc	r5, r3
 8011e40:	0553      	lsls	r3, r2, #21
 8011e42:	d531      	bpl.n	8011ea8 <__ssputs_r+0xa0>
 8011e44:	4629      	mov	r1, r5
 8011e46:	f7ff febd 	bl	8011bc4 <_malloc_r>
 8011e4a:	4606      	mov	r6, r0
 8011e4c:	b950      	cbnz	r0, 8011e64 <__ssputs_r+0x5c>
 8011e4e:	230c      	movs	r3, #12
 8011e50:	f8ca 3000 	str.w	r3, [sl]
 8011e54:	89a3      	ldrh	r3, [r4, #12]
 8011e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e5a:	81a3      	strh	r3, [r4, #12]
 8011e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e64:	6921      	ldr	r1, [r4, #16]
 8011e66:	464a      	mov	r2, r9
 8011e68:	f7ff fe2a 	bl	8011ac0 <memcpy>
 8011e6c:	89a3      	ldrh	r3, [r4, #12]
 8011e6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e76:	81a3      	strh	r3, [r4, #12]
 8011e78:	6126      	str	r6, [r4, #16]
 8011e7a:	6165      	str	r5, [r4, #20]
 8011e7c:	444e      	add	r6, r9
 8011e7e:	eba5 0509 	sub.w	r5, r5, r9
 8011e82:	6026      	str	r6, [r4, #0]
 8011e84:	60a5      	str	r5, [r4, #8]
 8011e86:	463e      	mov	r6, r7
 8011e88:	42be      	cmp	r6, r7
 8011e8a:	d900      	bls.n	8011e8e <__ssputs_r+0x86>
 8011e8c:	463e      	mov	r6, r7
 8011e8e:	6820      	ldr	r0, [r4, #0]
 8011e90:	4632      	mov	r2, r6
 8011e92:	4641      	mov	r1, r8
 8011e94:	f000 faa8 	bl	80123e8 <memmove>
 8011e98:	68a3      	ldr	r3, [r4, #8]
 8011e9a:	1b9b      	subs	r3, r3, r6
 8011e9c:	60a3      	str	r3, [r4, #8]
 8011e9e:	6823      	ldr	r3, [r4, #0]
 8011ea0:	4433      	add	r3, r6
 8011ea2:	6023      	str	r3, [r4, #0]
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	e7db      	b.n	8011e60 <__ssputs_r+0x58>
 8011ea8:	462a      	mov	r2, r5
 8011eaa:	f000 fab7 	bl	801241c <_realloc_r>
 8011eae:	4606      	mov	r6, r0
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d1e1      	bne.n	8011e78 <__ssputs_r+0x70>
 8011eb4:	6921      	ldr	r1, [r4, #16]
 8011eb6:	4650      	mov	r0, sl
 8011eb8:	f7ff fe18 	bl	8011aec <_free_r>
 8011ebc:	e7c7      	b.n	8011e4e <__ssputs_r+0x46>
	...

08011ec0 <_svfiprintf_r>:
 8011ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec4:	4698      	mov	r8, r3
 8011ec6:	898b      	ldrh	r3, [r1, #12]
 8011ec8:	061b      	lsls	r3, r3, #24
 8011eca:	b09d      	sub	sp, #116	; 0x74
 8011ecc:	4607      	mov	r7, r0
 8011ece:	460d      	mov	r5, r1
 8011ed0:	4614      	mov	r4, r2
 8011ed2:	d50e      	bpl.n	8011ef2 <_svfiprintf_r+0x32>
 8011ed4:	690b      	ldr	r3, [r1, #16]
 8011ed6:	b963      	cbnz	r3, 8011ef2 <_svfiprintf_r+0x32>
 8011ed8:	2140      	movs	r1, #64	; 0x40
 8011eda:	f7ff fe73 	bl	8011bc4 <_malloc_r>
 8011ede:	6028      	str	r0, [r5, #0]
 8011ee0:	6128      	str	r0, [r5, #16]
 8011ee2:	b920      	cbnz	r0, 8011eee <_svfiprintf_r+0x2e>
 8011ee4:	230c      	movs	r3, #12
 8011ee6:	603b      	str	r3, [r7, #0]
 8011ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8011eec:	e0d1      	b.n	8012092 <_svfiprintf_r+0x1d2>
 8011eee:	2340      	movs	r3, #64	; 0x40
 8011ef0:	616b      	str	r3, [r5, #20]
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ef6:	2320      	movs	r3, #32
 8011ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f00:	2330      	movs	r3, #48	; 0x30
 8011f02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80120ac <_svfiprintf_r+0x1ec>
 8011f06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f0a:	f04f 0901 	mov.w	r9, #1
 8011f0e:	4623      	mov	r3, r4
 8011f10:	469a      	mov	sl, r3
 8011f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f16:	b10a      	cbz	r2, 8011f1c <_svfiprintf_r+0x5c>
 8011f18:	2a25      	cmp	r2, #37	; 0x25
 8011f1a:	d1f9      	bne.n	8011f10 <_svfiprintf_r+0x50>
 8011f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8011f20:	d00b      	beq.n	8011f3a <_svfiprintf_r+0x7a>
 8011f22:	465b      	mov	r3, fp
 8011f24:	4622      	mov	r2, r4
 8011f26:	4629      	mov	r1, r5
 8011f28:	4638      	mov	r0, r7
 8011f2a:	f7ff ff6d 	bl	8011e08 <__ssputs_r>
 8011f2e:	3001      	adds	r0, #1
 8011f30:	f000 80aa 	beq.w	8012088 <_svfiprintf_r+0x1c8>
 8011f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f36:	445a      	add	r2, fp
 8011f38:	9209      	str	r2, [sp, #36]	; 0x24
 8011f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	f000 80a2 	beq.w	8012088 <_svfiprintf_r+0x1c8>
 8011f44:	2300      	movs	r3, #0
 8011f46:	f04f 32ff 	mov.w	r2, #4294967295
 8011f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f4e:	f10a 0a01 	add.w	sl, sl, #1
 8011f52:	9304      	str	r3, [sp, #16]
 8011f54:	9307      	str	r3, [sp, #28]
 8011f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8011f5c:	4654      	mov	r4, sl
 8011f5e:	2205      	movs	r2, #5
 8011f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f64:	4851      	ldr	r0, [pc, #324]	; (80120ac <_svfiprintf_r+0x1ec>)
 8011f66:	f7ee f943 	bl	80001f0 <memchr>
 8011f6a:	9a04      	ldr	r2, [sp, #16]
 8011f6c:	b9d8      	cbnz	r0, 8011fa6 <_svfiprintf_r+0xe6>
 8011f6e:	06d0      	lsls	r0, r2, #27
 8011f70:	bf44      	itt	mi
 8011f72:	2320      	movmi	r3, #32
 8011f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f78:	0711      	lsls	r1, r2, #28
 8011f7a:	bf44      	itt	mi
 8011f7c:	232b      	movmi	r3, #43	; 0x2b
 8011f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f82:	f89a 3000 	ldrb.w	r3, [sl]
 8011f86:	2b2a      	cmp	r3, #42	; 0x2a
 8011f88:	d015      	beq.n	8011fb6 <_svfiprintf_r+0xf6>
 8011f8a:	9a07      	ldr	r2, [sp, #28]
 8011f8c:	4654      	mov	r4, sl
 8011f8e:	2000      	movs	r0, #0
 8011f90:	f04f 0c0a 	mov.w	ip, #10
 8011f94:	4621      	mov	r1, r4
 8011f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f9a:	3b30      	subs	r3, #48	; 0x30
 8011f9c:	2b09      	cmp	r3, #9
 8011f9e:	d94e      	bls.n	801203e <_svfiprintf_r+0x17e>
 8011fa0:	b1b0      	cbz	r0, 8011fd0 <_svfiprintf_r+0x110>
 8011fa2:	9207      	str	r2, [sp, #28]
 8011fa4:	e014      	b.n	8011fd0 <_svfiprintf_r+0x110>
 8011fa6:	eba0 0308 	sub.w	r3, r0, r8
 8011faa:	fa09 f303 	lsl.w	r3, r9, r3
 8011fae:	4313      	orrs	r3, r2
 8011fb0:	9304      	str	r3, [sp, #16]
 8011fb2:	46a2      	mov	sl, r4
 8011fb4:	e7d2      	b.n	8011f5c <_svfiprintf_r+0x9c>
 8011fb6:	9b03      	ldr	r3, [sp, #12]
 8011fb8:	1d19      	adds	r1, r3, #4
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	9103      	str	r1, [sp, #12]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	bfbb      	ittet	lt
 8011fc2:	425b      	neglt	r3, r3
 8011fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8011fc8:	9307      	strge	r3, [sp, #28]
 8011fca:	9307      	strlt	r3, [sp, #28]
 8011fcc:	bfb8      	it	lt
 8011fce:	9204      	strlt	r2, [sp, #16]
 8011fd0:	7823      	ldrb	r3, [r4, #0]
 8011fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8011fd4:	d10c      	bne.n	8011ff0 <_svfiprintf_r+0x130>
 8011fd6:	7863      	ldrb	r3, [r4, #1]
 8011fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8011fda:	d135      	bne.n	8012048 <_svfiprintf_r+0x188>
 8011fdc:	9b03      	ldr	r3, [sp, #12]
 8011fde:	1d1a      	adds	r2, r3, #4
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	9203      	str	r2, [sp, #12]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	bfb8      	it	lt
 8011fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fec:	3402      	adds	r4, #2
 8011fee:	9305      	str	r3, [sp, #20]
 8011ff0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80120bc <_svfiprintf_r+0x1fc>
 8011ff4:	7821      	ldrb	r1, [r4, #0]
 8011ff6:	2203      	movs	r2, #3
 8011ff8:	4650      	mov	r0, sl
 8011ffa:	f7ee f8f9 	bl	80001f0 <memchr>
 8011ffe:	b140      	cbz	r0, 8012012 <_svfiprintf_r+0x152>
 8012000:	2340      	movs	r3, #64	; 0x40
 8012002:	eba0 000a 	sub.w	r0, r0, sl
 8012006:	fa03 f000 	lsl.w	r0, r3, r0
 801200a:	9b04      	ldr	r3, [sp, #16]
 801200c:	4303      	orrs	r3, r0
 801200e:	3401      	adds	r4, #1
 8012010:	9304      	str	r3, [sp, #16]
 8012012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012016:	4826      	ldr	r0, [pc, #152]	; (80120b0 <_svfiprintf_r+0x1f0>)
 8012018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801201c:	2206      	movs	r2, #6
 801201e:	f7ee f8e7 	bl	80001f0 <memchr>
 8012022:	2800      	cmp	r0, #0
 8012024:	d038      	beq.n	8012098 <_svfiprintf_r+0x1d8>
 8012026:	4b23      	ldr	r3, [pc, #140]	; (80120b4 <_svfiprintf_r+0x1f4>)
 8012028:	bb1b      	cbnz	r3, 8012072 <_svfiprintf_r+0x1b2>
 801202a:	9b03      	ldr	r3, [sp, #12]
 801202c:	3307      	adds	r3, #7
 801202e:	f023 0307 	bic.w	r3, r3, #7
 8012032:	3308      	adds	r3, #8
 8012034:	9303      	str	r3, [sp, #12]
 8012036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012038:	4433      	add	r3, r6
 801203a:	9309      	str	r3, [sp, #36]	; 0x24
 801203c:	e767      	b.n	8011f0e <_svfiprintf_r+0x4e>
 801203e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012042:	460c      	mov	r4, r1
 8012044:	2001      	movs	r0, #1
 8012046:	e7a5      	b.n	8011f94 <_svfiprintf_r+0xd4>
 8012048:	2300      	movs	r3, #0
 801204a:	3401      	adds	r4, #1
 801204c:	9305      	str	r3, [sp, #20]
 801204e:	4619      	mov	r1, r3
 8012050:	f04f 0c0a 	mov.w	ip, #10
 8012054:	4620      	mov	r0, r4
 8012056:	f810 2b01 	ldrb.w	r2, [r0], #1
 801205a:	3a30      	subs	r2, #48	; 0x30
 801205c:	2a09      	cmp	r2, #9
 801205e:	d903      	bls.n	8012068 <_svfiprintf_r+0x1a8>
 8012060:	2b00      	cmp	r3, #0
 8012062:	d0c5      	beq.n	8011ff0 <_svfiprintf_r+0x130>
 8012064:	9105      	str	r1, [sp, #20]
 8012066:	e7c3      	b.n	8011ff0 <_svfiprintf_r+0x130>
 8012068:	fb0c 2101 	mla	r1, ip, r1, r2
 801206c:	4604      	mov	r4, r0
 801206e:	2301      	movs	r3, #1
 8012070:	e7f0      	b.n	8012054 <_svfiprintf_r+0x194>
 8012072:	ab03      	add	r3, sp, #12
 8012074:	9300      	str	r3, [sp, #0]
 8012076:	462a      	mov	r2, r5
 8012078:	4b0f      	ldr	r3, [pc, #60]	; (80120b8 <_svfiprintf_r+0x1f8>)
 801207a:	a904      	add	r1, sp, #16
 801207c:	4638      	mov	r0, r7
 801207e:	f3af 8000 	nop.w
 8012082:	1c42      	adds	r2, r0, #1
 8012084:	4606      	mov	r6, r0
 8012086:	d1d6      	bne.n	8012036 <_svfiprintf_r+0x176>
 8012088:	89ab      	ldrh	r3, [r5, #12]
 801208a:	065b      	lsls	r3, r3, #25
 801208c:	f53f af2c 	bmi.w	8011ee8 <_svfiprintf_r+0x28>
 8012090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012092:	b01d      	add	sp, #116	; 0x74
 8012094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012098:	ab03      	add	r3, sp, #12
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	462a      	mov	r2, r5
 801209e:	4b06      	ldr	r3, [pc, #24]	; (80120b8 <_svfiprintf_r+0x1f8>)
 80120a0:	a904      	add	r1, sp, #16
 80120a2:	4638      	mov	r0, r7
 80120a4:	f000 f87a 	bl	801219c <_printf_i>
 80120a8:	e7eb      	b.n	8012082 <_svfiprintf_r+0x1c2>
 80120aa:	bf00      	nop
 80120ac:	08014b5c 	.word	0x08014b5c
 80120b0:	08014b66 	.word	0x08014b66
 80120b4:	00000000 	.word	0x00000000
 80120b8:	08011e09 	.word	0x08011e09
 80120bc:	08014b62 	.word	0x08014b62

080120c0 <_printf_common>:
 80120c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120c4:	4616      	mov	r6, r2
 80120c6:	4699      	mov	r9, r3
 80120c8:	688a      	ldr	r2, [r1, #8]
 80120ca:	690b      	ldr	r3, [r1, #16]
 80120cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120d0:	4293      	cmp	r3, r2
 80120d2:	bfb8      	it	lt
 80120d4:	4613      	movlt	r3, r2
 80120d6:	6033      	str	r3, [r6, #0]
 80120d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80120dc:	4607      	mov	r7, r0
 80120de:	460c      	mov	r4, r1
 80120e0:	b10a      	cbz	r2, 80120e6 <_printf_common+0x26>
 80120e2:	3301      	adds	r3, #1
 80120e4:	6033      	str	r3, [r6, #0]
 80120e6:	6823      	ldr	r3, [r4, #0]
 80120e8:	0699      	lsls	r1, r3, #26
 80120ea:	bf42      	ittt	mi
 80120ec:	6833      	ldrmi	r3, [r6, #0]
 80120ee:	3302      	addmi	r3, #2
 80120f0:	6033      	strmi	r3, [r6, #0]
 80120f2:	6825      	ldr	r5, [r4, #0]
 80120f4:	f015 0506 	ands.w	r5, r5, #6
 80120f8:	d106      	bne.n	8012108 <_printf_common+0x48>
 80120fa:	f104 0a19 	add.w	sl, r4, #25
 80120fe:	68e3      	ldr	r3, [r4, #12]
 8012100:	6832      	ldr	r2, [r6, #0]
 8012102:	1a9b      	subs	r3, r3, r2
 8012104:	42ab      	cmp	r3, r5
 8012106:	dc26      	bgt.n	8012156 <_printf_common+0x96>
 8012108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801210c:	1e13      	subs	r3, r2, #0
 801210e:	6822      	ldr	r2, [r4, #0]
 8012110:	bf18      	it	ne
 8012112:	2301      	movne	r3, #1
 8012114:	0692      	lsls	r2, r2, #26
 8012116:	d42b      	bmi.n	8012170 <_printf_common+0xb0>
 8012118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801211c:	4649      	mov	r1, r9
 801211e:	4638      	mov	r0, r7
 8012120:	47c0      	blx	r8
 8012122:	3001      	adds	r0, #1
 8012124:	d01e      	beq.n	8012164 <_printf_common+0xa4>
 8012126:	6823      	ldr	r3, [r4, #0]
 8012128:	68e5      	ldr	r5, [r4, #12]
 801212a:	6832      	ldr	r2, [r6, #0]
 801212c:	f003 0306 	and.w	r3, r3, #6
 8012130:	2b04      	cmp	r3, #4
 8012132:	bf08      	it	eq
 8012134:	1aad      	subeq	r5, r5, r2
 8012136:	68a3      	ldr	r3, [r4, #8]
 8012138:	6922      	ldr	r2, [r4, #16]
 801213a:	bf0c      	ite	eq
 801213c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012140:	2500      	movne	r5, #0
 8012142:	4293      	cmp	r3, r2
 8012144:	bfc4      	itt	gt
 8012146:	1a9b      	subgt	r3, r3, r2
 8012148:	18ed      	addgt	r5, r5, r3
 801214a:	2600      	movs	r6, #0
 801214c:	341a      	adds	r4, #26
 801214e:	42b5      	cmp	r5, r6
 8012150:	d11a      	bne.n	8012188 <_printf_common+0xc8>
 8012152:	2000      	movs	r0, #0
 8012154:	e008      	b.n	8012168 <_printf_common+0xa8>
 8012156:	2301      	movs	r3, #1
 8012158:	4652      	mov	r2, sl
 801215a:	4649      	mov	r1, r9
 801215c:	4638      	mov	r0, r7
 801215e:	47c0      	blx	r8
 8012160:	3001      	adds	r0, #1
 8012162:	d103      	bne.n	801216c <_printf_common+0xac>
 8012164:	f04f 30ff 	mov.w	r0, #4294967295
 8012168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801216c:	3501      	adds	r5, #1
 801216e:	e7c6      	b.n	80120fe <_printf_common+0x3e>
 8012170:	18e1      	adds	r1, r4, r3
 8012172:	1c5a      	adds	r2, r3, #1
 8012174:	2030      	movs	r0, #48	; 0x30
 8012176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801217a:	4422      	add	r2, r4
 801217c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012184:	3302      	adds	r3, #2
 8012186:	e7c7      	b.n	8012118 <_printf_common+0x58>
 8012188:	2301      	movs	r3, #1
 801218a:	4622      	mov	r2, r4
 801218c:	4649      	mov	r1, r9
 801218e:	4638      	mov	r0, r7
 8012190:	47c0      	blx	r8
 8012192:	3001      	adds	r0, #1
 8012194:	d0e6      	beq.n	8012164 <_printf_common+0xa4>
 8012196:	3601      	adds	r6, #1
 8012198:	e7d9      	b.n	801214e <_printf_common+0x8e>
	...

0801219c <_printf_i>:
 801219c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80121a0:	7e0f      	ldrb	r7, [r1, #24]
 80121a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80121a4:	2f78      	cmp	r7, #120	; 0x78
 80121a6:	4691      	mov	r9, r2
 80121a8:	4680      	mov	r8, r0
 80121aa:	460c      	mov	r4, r1
 80121ac:	469a      	mov	sl, r3
 80121ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80121b2:	d807      	bhi.n	80121c4 <_printf_i+0x28>
 80121b4:	2f62      	cmp	r7, #98	; 0x62
 80121b6:	d80a      	bhi.n	80121ce <_printf_i+0x32>
 80121b8:	2f00      	cmp	r7, #0
 80121ba:	f000 80d8 	beq.w	801236e <_printf_i+0x1d2>
 80121be:	2f58      	cmp	r7, #88	; 0x58
 80121c0:	f000 80a3 	beq.w	801230a <_printf_i+0x16e>
 80121c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80121cc:	e03a      	b.n	8012244 <_printf_i+0xa8>
 80121ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80121d2:	2b15      	cmp	r3, #21
 80121d4:	d8f6      	bhi.n	80121c4 <_printf_i+0x28>
 80121d6:	a101      	add	r1, pc, #4	; (adr r1, 80121dc <_printf_i+0x40>)
 80121d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121dc:	08012235 	.word	0x08012235
 80121e0:	08012249 	.word	0x08012249
 80121e4:	080121c5 	.word	0x080121c5
 80121e8:	080121c5 	.word	0x080121c5
 80121ec:	080121c5 	.word	0x080121c5
 80121f0:	080121c5 	.word	0x080121c5
 80121f4:	08012249 	.word	0x08012249
 80121f8:	080121c5 	.word	0x080121c5
 80121fc:	080121c5 	.word	0x080121c5
 8012200:	080121c5 	.word	0x080121c5
 8012204:	080121c5 	.word	0x080121c5
 8012208:	08012355 	.word	0x08012355
 801220c:	08012279 	.word	0x08012279
 8012210:	08012337 	.word	0x08012337
 8012214:	080121c5 	.word	0x080121c5
 8012218:	080121c5 	.word	0x080121c5
 801221c:	08012377 	.word	0x08012377
 8012220:	080121c5 	.word	0x080121c5
 8012224:	08012279 	.word	0x08012279
 8012228:	080121c5 	.word	0x080121c5
 801222c:	080121c5 	.word	0x080121c5
 8012230:	0801233f 	.word	0x0801233f
 8012234:	682b      	ldr	r3, [r5, #0]
 8012236:	1d1a      	adds	r2, r3, #4
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	602a      	str	r2, [r5, #0]
 801223c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012244:	2301      	movs	r3, #1
 8012246:	e0a3      	b.n	8012390 <_printf_i+0x1f4>
 8012248:	6820      	ldr	r0, [r4, #0]
 801224a:	6829      	ldr	r1, [r5, #0]
 801224c:	0606      	lsls	r6, r0, #24
 801224e:	f101 0304 	add.w	r3, r1, #4
 8012252:	d50a      	bpl.n	801226a <_printf_i+0xce>
 8012254:	680e      	ldr	r6, [r1, #0]
 8012256:	602b      	str	r3, [r5, #0]
 8012258:	2e00      	cmp	r6, #0
 801225a:	da03      	bge.n	8012264 <_printf_i+0xc8>
 801225c:	232d      	movs	r3, #45	; 0x2d
 801225e:	4276      	negs	r6, r6
 8012260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012264:	485e      	ldr	r0, [pc, #376]	; (80123e0 <_printf_i+0x244>)
 8012266:	230a      	movs	r3, #10
 8012268:	e019      	b.n	801229e <_printf_i+0x102>
 801226a:	680e      	ldr	r6, [r1, #0]
 801226c:	602b      	str	r3, [r5, #0]
 801226e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012272:	bf18      	it	ne
 8012274:	b236      	sxthne	r6, r6
 8012276:	e7ef      	b.n	8012258 <_printf_i+0xbc>
 8012278:	682b      	ldr	r3, [r5, #0]
 801227a:	6820      	ldr	r0, [r4, #0]
 801227c:	1d19      	adds	r1, r3, #4
 801227e:	6029      	str	r1, [r5, #0]
 8012280:	0601      	lsls	r1, r0, #24
 8012282:	d501      	bpl.n	8012288 <_printf_i+0xec>
 8012284:	681e      	ldr	r6, [r3, #0]
 8012286:	e002      	b.n	801228e <_printf_i+0xf2>
 8012288:	0646      	lsls	r6, r0, #25
 801228a:	d5fb      	bpl.n	8012284 <_printf_i+0xe8>
 801228c:	881e      	ldrh	r6, [r3, #0]
 801228e:	4854      	ldr	r0, [pc, #336]	; (80123e0 <_printf_i+0x244>)
 8012290:	2f6f      	cmp	r7, #111	; 0x6f
 8012292:	bf0c      	ite	eq
 8012294:	2308      	moveq	r3, #8
 8012296:	230a      	movne	r3, #10
 8012298:	2100      	movs	r1, #0
 801229a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801229e:	6865      	ldr	r5, [r4, #4]
 80122a0:	60a5      	str	r5, [r4, #8]
 80122a2:	2d00      	cmp	r5, #0
 80122a4:	bfa2      	ittt	ge
 80122a6:	6821      	ldrge	r1, [r4, #0]
 80122a8:	f021 0104 	bicge.w	r1, r1, #4
 80122ac:	6021      	strge	r1, [r4, #0]
 80122ae:	b90e      	cbnz	r6, 80122b4 <_printf_i+0x118>
 80122b0:	2d00      	cmp	r5, #0
 80122b2:	d04d      	beq.n	8012350 <_printf_i+0x1b4>
 80122b4:	4615      	mov	r5, r2
 80122b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80122ba:	fb03 6711 	mls	r7, r3, r1, r6
 80122be:	5dc7      	ldrb	r7, [r0, r7]
 80122c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80122c4:	4637      	mov	r7, r6
 80122c6:	42bb      	cmp	r3, r7
 80122c8:	460e      	mov	r6, r1
 80122ca:	d9f4      	bls.n	80122b6 <_printf_i+0x11a>
 80122cc:	2b08      	cmp	r3, #8
 80122ce:	d10b      	bne.n	80122e8 <_printf_i+0x14c>
 80122d0:	6823      	ldr	r3, [r4, #0]
 80122d2:	07de      	lsls	r6, r3, #31
 80122d4:	d508      	bpl.n	80122e8 <_printf_i+0x14c>
 80122d6:	6923      	ldr	r3, [r4, #16]
 80122d8:	6861      	ldr	r1, [r4, #4]
 80122da:	4299      	cmp	r1, r3
 80122dc:	bfde      	ittt	le
 80122de:	2330      	movle	r3, #48	; 0x30
 80122e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80122e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80122e8:	1b52      	subs	r2, r2, r5
 80122ea:	6122      	str	r2, [r4, #16]
 80122ec:	f8cd a000 	str.w	sl, [sp]
 80122f0:	464b      	mov	r3, r9
 80122f2:	aa03      	add	r2, sp, #12
 80122f4:	4621      	mov	r1, r4
 80122f6:	4640      	mov	r0, r8
 80122f8:	f7ff fee2 	bl	80120c0 <_printf_common>
 80122fc:	3001      	adds	r0, #1
 80122fe:	d14c      	bne.n	801239a <_printf_i+0x1fe>
 8012300:	f04f 30ff 	mov.w	r0, #4294967295
 8012304:	b004      	add	sp, #16
 8012306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801230a:	4835      	ldr	r0, [pc, #212]	; (80123e0 <_printf_i+0x244>)
 801230c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012310:	6829      	ldr	r1, [r5, #0]
 8012312:	6823      	ldr	r3, [r4, #0]
 8012314:	f851 6b04 	ldr.w	r6, [r1], #4
 8012318:	6029      	str	r1, [r5, #0]
 801231a:	061d      	lsls	r5, r3, #24
 801231c:	d514      	bpl.n	8012348 <_printf_i+0x1ac>
 801231e:	07df      	lsls	r7, r3, #31
 8012320:	bf44      	itt	mi
 8012322:	f043 0320 	orrmi.w	r3, r3, #32
 8012326:	6023      	strmi	r3, [r4, #0]
 8012328:	b91e      	cbnz	r6, 8012332 <_printf_i+0x196>
 801232a:	6823      	ldr	r3, [r4, #0]
 801232c:	f023 0320 	bic.w	r3, r3, #32
 8012330:	6023      	str	r3, [r4, #0]
 8012332:	2310      	movs	r3, #16
 8012334:	e7b0      	b.n	8012298 <_printf_i+0xfc>
 8012336:	6823      	ldr	r3, [r4, #0]
 8012338:	f043 0320 	orr.w	r3, r3, #32
 801233c:	6023      	str	r3, [r4, #0]
 801233e:	2378      	movs	r3, #120	; 0x78
 8012340:	4828      	ldr	r0, [pc, #160]	; (80123e4 <_printf_i+0x248>)
 8012342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012346:	e7e3      	b.n	8012310 <_printf_i+0x174>
 8012348:	0659      	lsls	r1, r3, #25
 801234a:	bf48      	it	mi
 801234c:	b2b6      	uxthmi	r6, r6
 801234e:	e7e6      	b.n	801231e <_printf_i+0x182>
 8012350:	4615      	mov	r5, r2
 8012352:	e7bb      	b.n	80122cc <_printf_i+0x130>
 8012354:	682b      	ldr	r3, [r5, #0]
 8012356:	6826      	ldr	r6, [r4, #0]
 8012358:	6961      	ldr	r1, [r4, #20]
 801235a:	1d18      	adds	r0, r3, #4
 801235c:	6028      	str	r0, [r5, #0]
 801235e:	0635      	lsls	r5, r6, #24
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	d501      	bpl.n	8012368 <_printf_i+0x1cc>
 8012364:	6019      	str	r1, [r3, #0]
 8012366:	e002      	b.n	801236e <_printf_i+0x1d2>
 8012368:	0670      	lsls	r0, r6, #25
 801236a:	d5fb      	bpl.n	8012364 <_printf_i+0x1c8>
 801236c:	8019      	strh	r1, [r3, #0]
 801236e:	2300      	movs	r3, #0
 8012370:	6123      	str	r3, [r4, #16]
 8012372:	4615      	mov	r5, r2
 8012374:	e7ba      	b.n	80122ec <_printf_i+0x150>
 8012376:	682b      	ldr	r3, [r5, #0]
 8012378:	1d1a      	adds	r2, r3, #4
 801237a:	602a      	str	r2, [r5, #0]
 801237c:	681d      	ldr	r5, [r3, #0]
 801237e:	6862      	ldr	r2, [r4, #4]
 8012380:	2100      	movs	r1, #0
 8012382:	4628      	mov	r0, r5
 8012384:	f7ed ff34 	bl	80001f0 <memchr>
 8012388:	b108      	cbz	r0, 801238e <_printf_i+0x1f2>
 801238a:	1b40      	subs	r0, r0, r5
 801238c:	6060      	str	r0, [r4, #4]
 801238e:	6863      	ldr	r3, [r4, #4]
 8012390:	6123      	str	r3, [r4, #16]
 8012392:	2300      	movs	r3, #0
 8012394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012398:	e7a8      	b.n	80122ec <_printf_i+0x150>
 801239a:	6923      	ldr	r3, [r4, #16]
 801239c:	462a      	mov	r2, r5
 801239e:	4649      	mov	r1, r9
 80123a0:	4640      	mov	r0, r8
 80123a2:	47d0      	blx	sl
 80123a4:	3001      	adds	r0, #1
 80123a6:	d0ab      	beq.n	8012300 <_printf_i+0x164>
 80123a8:	6823      	ldr	r3, [r4, #0]
 80123aa:	079b      	lsls	r3, r3, #30
 80123ac:	d413      	bmi.n	80123d6 <_printf_i+0x23a>
 80123ae:	68e0      	ldr	r0, [r4, #12]
 80123b0:	9b03      	ldr	r3, [sp, #12]
 80123b2:	4298      	cmp	r0, r3
 80123b4:	bfb8      	it	lt
 80123b6:	4618      	movlt	r0, r3
 80123b8:	e7a4      	b.n	8012304 <_printf_i+0x168>
 80123ba:	2301      	movs	r3, #1
 80123bc:	4632      	mov	r2, r6
 80123be:	4649      	mov	r1, r9
 80123c0:	4640      	mov	r0, r8
 80123c2:	47d0      	blx	sl
 80123c4:	3001      	adds	r0, #1
 80123c6:	d09b      	beq.n	8012300 <_printf_i+0x164>
 80123c8:	3501      	adds	r5, #1
 80123ca:	68e3      	ldr	r3, [r4, #12]
 80123cc:	9903      	ldr	r1, [sp, #12]
 80123ce:	1a5b      	subs	r3, r3, r1
 80123d0:	42ab      	cmp	r3, r5
 80123d2:	dcf2      	bgt.n	80123ba <_printf_i+0x21e>
 80123d4:	e7eb      	b.n	80123ae <_printf_i+0x212>
 80123d6:	2500      	movs	r5, #0
 80123d8:	f104 0619 	add.w	r6, r4, #25
 80123dc:	e7f5      	b.n	80123ca <_printf_i+0x22e>
 80123de:	bf00      	nop
 80123e0:	08014b6d 	.word	0x08014b6d
 80123e4:	08014b7e 	.word	0x08014b7e

080123e8 <memmove>:
 80123e8:	4288      	cmp	r0, r1
 80123ea:	b510      	push	{r4, lr}
 80123ec:	eb01 0402 	add.w	r4, r1, r2
 80123f0:	d902      	bls.n	80123f8 <memmove+0x10>
 80123f2:	4284      	cmp	r4, r0
 80123f4:	4623      	mov	r3, r4
 80123f6:	d807      	bhi.n	8012408 <memmove+0x20>
 80123f8:	1e43      	subs	r3, r0, #1
 80123fa:	42a1      	cmp	r1, r4
 80123fc:	d008      	beq.n	8012410 <memmove+0x28>
 80123fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012406:	e7f8      	b.n	80123fa <memmove+0x12>
 8012408:	4402      	add	r2, r0
 801240a:	4601      	mov	r1, r0
 801240c:	428a      	cmp	r2, r1
 801240e:	d100      	bne.n	8012412 <memmove+0x2a>
 8012410:	bd10      	pop	{r4, pc}
 8012412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801241a:	e7f7      	b.n	801240c <memmove+0x24>

0801241c <_realloc_r>:
 801241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012420:	4680      	mov	r8, r0
 8012422:	4614      	mov	r4, r2
 8012424:	460e      	mov	r6, r1
 8012426:	b921      	cbnz	r1, 8012432 <_realloc_r+0x16>
 8012428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801242c:	4611      	mov	r1, r2
 801242e:	f7ff bbc9 	b.w	8011bc4 <_malloc_r>
 8012432:	b92a      	cbnz	r2, 8012440 <_realloc_r+0x24>
 8012434:	f7ff fb5a 	bl	8011aec <_free_r>
 8012438:	4625      	mov	r5, r4
 801243a:	4628      	mov	r0, r5
 801243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012440:	f000 f81b 	bl	801247a <_malloc_usable_size_r>
 8012444:	4284      	cmp	r4, r0
 8012446:	4607      	mov	r7, r0
 8012448:	d802      	bhi.n	8012450 <_realloc_r+0x34>
 801244a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801244e:	d812      	bhi.n	8012476 <_realloc_r+0x5a>
 8012450:	4621      	mov	r1, r4
 8012452:	4640      	mov	r0, r8
 8012454:	f7ff fbb6 	bl	8011bc4 <_malloc_r>
 8012458:	4605      	mov	r5, r0
 801245a:	2800      	cmp	r0, #0
 801245c:	d0ed      	beq.n	801243a <_realloc_r+0x1e>
 801245e:	42bc      	cmp	r4, r7
 8012460:	4622      	mov	r2, r4
 8012462:	4631      	mov	r1, r6
 8012464:	bf28      	it	cs
 8012466:	463a      	movcs	r2, r7
 8012468:	f7ff fb2a 	bl	8011ac0 <memcpy>
 801246c:	4631      	mov	r1, r6
 801246e:	4640      	mov	r0, r8
 8012470:	f7ff fb3c 	bl	8011aec <_free_r>
 8012474:	e7e1      	b.n	801243a <_realloc_r+0x1e>
 8012476:	4635      	mov	r5, r6
 8012478:	e7df      	b.n	801243a <_realloc_r+0x1e>

0801247a <_malloc_usable_size_r>:
 801247a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801247e:	1f18      	subs	r0, r3, #4
 8012480:	2b00      	cmp	r3, #0
 8012482:	bfbc      	itt	lt
 8012484:	580b      	ldrlt	r3, [r1, r0]
 8012486:	18c0      	addlt	r0, r0, r3
 8012488:	4770      	bx	lr
	...

0801248c <_init>:
 801248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801248e:	bf00      	nop
 8012490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012492:	bc08      	pop	{r3}
 8012494:	469e      	mov	lr, r3
 8012496:	4770      	bx	lr

08012498 <_fini>:
 8012498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801249a:	bf00      	nop
 801249c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801249e:	bc08      	pop	{r3}
 80124a0:	469e      	mov	lr, r3
 80124a2:	4770      	bx	lr

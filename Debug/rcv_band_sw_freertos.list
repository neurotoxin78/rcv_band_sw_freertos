
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a88  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1ec  0800a1ec  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1ec  0800a1ec  0001a1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1f4  0800a1f4  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1f4  0800a1f4  0001a1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1f8  0800a1f8  0001a1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800a1fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c10  200000dc  0800a2d8  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cec  0800a2d8  00024cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f119  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004873  00000000  00000000  0003f225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  00043a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  00045490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc38  00000000  00000000  00046c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f9e7  00000000  00000000  000628a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1826  00000000  00000000  0008228f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123ab5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ea0  00000000  00000000  00123b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000dc 	.word	0x200000dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800774c 	.word	0x0800774c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e0 	.word	0x200000e0
 80001dc:	0800774c 	.word	0x0800774c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <displayBand>:
// Calculate the last element position (index) of the array band
const int lastBand = (sizeof band / sizeof(Band)) - 1; // For this case will be 26.
int currentBand = 0;                          // First band. For this case, AM is the current band.

void displayBand(int band_index)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af04      	add	r7, sp, #16
 80004ea:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 80004ec:	2304      	movs	r3, #4
 80004ee:	3301      	adds	r3, #1
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d05e      	beq.n	80005b4 <displayBand+0xd0>
    {
        ST7735_FillRectangleFast(0,0,160,38,ST7735_COLOR565(10, 10, 10));
 80004f6:	f640 0341 	movw	r3, #2113	; 0x841
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2326      	movs	r3, #38	; 0x26
 80004fe:	22a0      	movs	r2, #160	; 0xa0
 8000500:	2100      	movs	r1, #0
 8000502:	2000      	movs	r0, #0
 8000504:	f000 fe9a 	bl	800123c <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,38,160,2,ST7735_COLOR565(50, 50, 50));
 8000508:	f243 1386 	movw	r3, #12678	; 0x3186
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2302      	movs	r3, #2
 8000510:	22a0      	movs	r2, #160	; 0xa0
 8000512:	2126      	movs	r1, #38	; 0x26
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fe91 	bl	800123c <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 1, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(10, 10, 10));
 800051a:	4a28      	ldr	r2, [pc, #160]	; (80005bc <displayBand+0xd8>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	011b      	lsls	r3, r3, #4
 8000520:	4413      	add	r3, r2
 8000522:	6819      	ldr	r1, [r3, #0]
 8000524:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <displayBand+0xdc>)
 8000526:	f640 0241 	movw	r2, #2113	; 0x841
 800052a:	9202      	str	r2, [sp, #8]
 800052c:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8000530:	9201      	str	r2, [sp, #4]
 8000532:	685a      	ldr	r2, [r3, #4]
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	460a      	mov	r2, r1
 800053a:	2101      	movs	r1, #1
 800053c:	2001      	movs	r0, #1
 800053e:	f000 fdc0 	bl	80010c2 <ST7735_WriteString>
        ST7735_WriteString(5, 26, "BAND", Font_7x10, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(10, 10, 10));
 8000542:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <displayBand+0xe0>)
 8000544:	f640 0241 	movw	r2, #2113	; 0x841
 8000548:	9202      	str	r2, [sp, #8]
 800054a:	f64f 5280 	movw	r2, #64896	; 0xfd80
 800054e:	9201      	str	r2, [sp, #4]
 8000550:	685a      	ldr	r2, [r3, #4]
 8000552:	9200      	str	r2, [sp, #0]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <displayBand+0xe4>)
 8000558:	211a      	movs	r1, #26
 800055a:	2005      	movs	r0, #5
 800055c:	f000 fdb1 	bl	80010c2 <ST7735_WriteString>
        ST7735_WriteString(75, 1, band[band_index].minFreq, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8000560:	4a16      	ldr	r2, [pc, #88]	; (80005bc <displayBand+0xd8>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	011b      	lsls	r3, r3, #4
 8000566:	4413      	add	r3, r2
 8000568:	3304      	adds	r3, #4
 800056a:	6819      	ldr	r1, [r3, #0]
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <displayBand+0xe8>)
 800056e:	f640 0241 	movw	r2, #2113	; 0x841
 8000572:	9202      	str	r2, [sp, #8]
 8000574:	f244 52df 	movw	r2, #17887	; 0x45df
 8000578:	9201      	str	r2, [sp, #4]
 800057a:	685a      	ldr	r2, [r3, #4]
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	460a      	mov	r2, r1
 8000582:	2101      	movs	r1, #1
 8000584:	204b      	movs	r0, #75	; 0x4b
 8000586:	f000 fd9c 	bl	80010c2 <ST7735_WriteString>
        ST7735_WriteString(75, 19, band[band_index].maxFreq, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <displayBand+0xd8>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	4413      	add	r3, r2
 8000592:	3308      	adds	r3, #8
 8000594:	6819      	ldr	r1, [r3, #0]
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <displayBand+0xe8>)
 8000598:	f640 0241 	movw	r2, #2113	; 0x841
 800059c:	9202      	str	r2, [sp, #8]
 800059e:	f244 52df 	movw	r2, #17887	; 0x45df
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	460a      	mov	r2, r1
 80005ac:	2113      	movs	r1, #19
 80005ae:	204b      	movs	r0, #75	; 0x4b
 80005b0:	f000 fd87 	bl	80010c2 <ST7735_WriteString>
    }

}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000060 	.word	0x20000060
 80005c4:	20000050 	.word	0x20000050
 80005c8:	080077d4 	.word	0x080077d4
 80005cc:	20000058 	.word	0x20000058

080005d0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_CRC_Init+0x20>)
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <MX_CRC_Init+0x24>)
 80005d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_CRC_Init+0x20>)
 80005dc:	f001 fb18 	bl	8001c10 <HAL_CRC_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005e6:	f000 faeb 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000f8 	.word	0x200000f8
 80005f4:	40023000 	.word	0x40023000

080005f8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <HAL_CRC_MspInit+0x3c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d10d      	bne.n	8000626 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_CRC_MspInit+0x40>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a09      	ldr	r2, [pc, #36]	; (8000638 <HAL_CRC_MspInit+0x40>)
 8000614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <HAL_CRC_MspInit+0x40>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40023000 	.word	0x40023000
 8000638:	40023800 	.word	0x40023800

0800063c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &EncoderQueue_attributes);
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <MX_FREERTOS_Init+0x58>)
 8000642:	2102      	movs	r1, #2
 8000644:	2010      	movs	r0, #16
 8000646:	f004 f858 	bl	80046fa <osMessageQueueNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_FREERTOS_Init+0x5c>)
 800064e:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ButtonQueue_attributes);
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_FREERTOS_Init+0x60>)
 8000652:	2102      	movs	r1, #2
 8000654:	2010      	movs	r0, #16
 8000656:	f004 f850 	bl	80046fa <osMessageQueueNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <MX_FREERTOS_Init+0x64>)
 800065e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000660:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <MX_FREERTOS_Init+0x68>)
 8000662:	2100      	movs	r1, #0
 8000664:	4810      	ldr	r0, [pc, #64]	; (80006a8 <MX_FREERTOS_Init+0x6c>)
 8000666:	f003 ff9b 	bl	80045a0 <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MX_FREERTOS_Init+0x70>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000670:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <MX_FREERTOS_Init+0x74>)
 8000672:	2100      	movs	r1, #0
 8000674:	480f      	ldr	r0, [pc, #60]	; (80006b4 <MX_FREERTOS_Init+0x78>)
 8000676:	f003 ff93 	bl	80045a0 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <MX_FREERTOS_Init+0x7c>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000680:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <MX_FREERTOS_Init+0x80>)
 8000682:	2100      	movs	r1, #0
 8000684:	480e      	ldr	r0, [pc, #56]	; (80006c0 <MX_FREERTOS_Init+0x84>)
 8000686:	f003 ff8b 	bl	80045a0 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <MX_FREERTOS_Init+0x88>)
 800068e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	0800a0cc 	.word	0x0800a0cc
 8000698:	2000010c 	.word	0x2000010c
 800069c:	0800a0e4 	.word	0x0800a0e4
 80006a0:	20000110 	.word	0x20000110
 80006a4:	0800a060 	.word	0x0800a060
 80006a8:	080006c9 	.word	0x080006c9
 80006ac:	20000100 	.word	0x20000100
 80006b0:	0800a084 	.word	0x0800a084
 80006b4:	080006d9 	.word	0x080006d9
 80006b8:	20000104 	.word	0x20000104
 80006bc:	0800a0a8 	.word	0x0800a0a8
 80006c0:	08000789 	.word	0x08000789
 80006c4:	20000108 	.word	0x20000108

080006c8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80006d0:	2064      	movs	r0, #100	; 0x64
 80006d2:	f003 fff7 	bl	80046c4 <osDelay>
 80006d6:	e7fb      	b.n	80006d0 <StartDefaultTask+0x8>

080006d8 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	int32_t counter = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
	int16_t button = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	817b      	strh	r3, [r7, #10]
	int32_t last_counter = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
	int16_t max_index = 5;
 80006ec:	2305      	movs	r3, #5
 80006ee:	827b      	strh	r3, [r7, #18]
	ST7735_FillScreenFast(ST7735_BLACK);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fe38 	bl	8001366 <ST7735_FillScreenFast>
	displayBand(last_counter);
 80006f6:	6978      	ldr	r0, [r7, #20]
 80006f8:	f7ff fef4 	bl	80004e4 <displayBand>
	for (;;) {
		//Encoder Rotate
		osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <StartDisplayTask+0xa8>)
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	f107 010c 	add.w	r1, r7, #12
 8000704:	2300      	movs	r3, #0
 8000706:	2200      	movs	r2, #0
 8000708:	f004 f8ca 	bl	80048a0 <osMessageQueueGet>
		if(counter == 2) {
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d113      	bne.n	800073a <StartDisplayTask+0x62>
			if(last_counter != max_index -1)
 8000712:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000716:	3b01      	subs	r3, #1
 8000718:	697a      	ldr	r2, [r7, #20]
 800071a:	429a      	cmp	r2, r3
 800071c:	d005      	beq.n	800072a <StartDisplayTask+0x52>
			{
				last_counter += 1;
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	3301      	adds	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
				counter = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e003      	b.n	8000732 <StartDisplayTask+0x5a>
			} else
			{
				last_counter = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
				counter = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
			}
			displayBand(last_counter);
 8000732:	6978      	ldr	r0, [r7, #20]
 8000734:	f7ff fed6 	bl	80004e4 <displayBand>
 8000738:	e014      	b.n	8000764 <StartDisplayTask+0x8c>
		}else if (counter == 1){
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d111      	bne.n	8000764 <StartDisplayTask+0x8c>
			if(last_counter != 0)
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d005      	beq.n	8000752 <StartDisplayTask+0x7a>
			{
				last_counter -= 1;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3b01      	subs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
				counter = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e005      	b.n	800075e <StartDisplayTask+0x86>
			} else
			{
				last_counter = max_index -1;
 8000752:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000756:	3b01      	subs	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
				counter = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
			}
			displayBand(last_counter);
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f7ff fec0 	bl	80004e4 <displayBand>
		{

		}

		//Button click
		osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <StartDisplayTask+0xac>)
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	f107 010a 	add.w	r1, r7, #10
 800076c:	2300      	movs	r3, #0
 800076e:	2200      	movs	r2, #0
 8000770:	f004 f896 	bl	80048a0 <osMessageQueueGet>
		if (button)
		{

		}
		osDelay(1000);
 8000774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000778:	f003 ffa4 	bl	80046c4 <osDelay>
		osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 800077c:	e7be      	b.n	80006fc <StartDisplayTask+0x24>
 800077e:	bf00      	nop
 8000780:	2000010c 	.word	0x2000010c
 8000784:	20000110 	.word	0x20000110

08000788 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	76fb      	strb	r3, [r7, #27]
	uint8_t buttonSend = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <StartEncoderTask+0xac>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a6:	617b      	str	r3, [r7, #20]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	0fda      	lsrs	r2, r3, #31
 80007b0:	4413      	add	r3, r2
 80007b2:	105b      	asrs	r3, r3, #1
 80007b4:	425b      	negs	r3, r3
 80007b6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80007ba:	337f      	adds	r3, #127	; 0x7f
 80007bc:	617b      	str	r3, [r7, #20]
		if (currCounter != prevCounter) {
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d01e      	beq.n	8000804 <StartEncoderTask+0x7c>
			if (currCounter > prevCounter) {
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	dd0a      	ble.n	80007e4 <StartEncoderTask+0x5c>
				counter = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <StartEncoderTask+0xb0>)
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	f107 0110 	add.w	r1, r7, #16
 80007da:	2300      	movs	r3, #0
 80007dc:	2200      	movs	r2, #0
 80007de:	f003 ffff 	bl	80047e0 <osMessageQueuePut>
 80007e2:	e00d      	b.n	8000800 <StartEncoderTask+0x78>
			} else if (currCounter < prevCounter){
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	da09      	bge.n	8000800 <StartEncoderTask+0x78>
				counter = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <StartEncoderTask+0xb0>)
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	f107 0110 	add.w	r1, r7, #16
 80007f8:	2300      	movs	r3, #0
 80007fa:	2200      	movs	r2, #0
 80007fc:	f003 fff0 	bl	80047e0 <osMessageQueuePut>
			}
			else
			{

			}
			prevCounter = currCounter;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if(buttonPressed[buttonNumber]) {
 8000804:	7efb      	ldrb	r3, [r7, #27]
 8000806:	4a0d      	ldr	r2, [pc, #52]	; (800083c <StartEncoderTask+0xb4>)
 8000808:	5cd3      	ldrb	r3, [r2, r3]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00b      	beq.n	8000828 <StartEncoderTask+0xa0>
			buttonPressed[buttonNumber] = 0;
 8000810:	7efb      	ldrb	r3, [r7, #27]
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <StartEncoderTask+0xb4>)
 8000814:	2100      	movs	r1, #0
 8000816:	54d1      	strb	r1, [r2, r3]
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <StartEncoderTask+0xb8>)
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	f107 010f 	add.w	r1, r7, #15
 8000820:	2300      	movs	r3, #0
 8000822:	2200      	movs	r2, #0
 8000824:	f003 ffdc 	bl	80047e0 <osMessageQueuePut>
		}
		osDelay(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f003 ff4a 	bl	80046c4 <osDelay>
	for (;;) {
 8000830:	e7b6      	b.n	80007a0 <StartEncoderTask+0x18>
 8000832:	bf00      	nop
 8000834:	20000280 	.word	0x20000280
 8000838:	2000010c 	.word	0x2000010c
 800083c:	20000228 	.word	0x20000228
 8000840:	20000110 	.word	0x20000110

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b31      	ldr	r3, [pc, #196]	; (8000924 <MX_GPIO_Init+0xe0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a30      	ldr	r2, [pc, #192]	; (8000924 <MX_GPIO_Init+0xe0>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <MX_GPIO_Init+0xe0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_GPIO_Init+0xe0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a29      	ldr	r2, [pc, #164]	; (8000924 <MX_GPIO_Init+0xe0>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <MX_GPIO_Init+0xe0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_GPIO_Init+0xe0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a22      	ldr	r2, [pc, #136]	; (8000924 <MX_GPIO_Init+0xe0>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_GPIO_Init+0xe0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_GPIO_Init+0xe0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <MX_GPIO_Init+0xe0>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_GPIO_Init+0xe0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	211c      	movs	r1, #28
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <MX_GPIO_Init+0xe4>)
 80008d0:	f001 fb3e 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80008d4:	2301      	movs	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008de:	2302      	movs	r3, #2
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	480f      	ldr	r0, [pc, #60]	; (8000928 <MX_GPIO_Init+0xe4>)
 80008ea:	f001 f9ad 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 80008ee:	231c      	movs	r3, #28
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <MX_GPIO_Init+0xe4>)
 8000906:	f001 f99f 	bl	8001c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	2006      	movs	r0, #6
 8000910:	f001 f954 	bl	8001bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000914:	2006      	movs	r0, #6
 8000916:	f001 f96d 	bl	8001bf4 <HAL_NVIC_EnableIRQ>

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_I2C1_Init+0x50>)
 8000932:	4a13      	ldr	r2, [pc, #76]	; (8000980 <MX_I2C1_Init+0x54>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_I2C1_Init+0x50>)
 8000938:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_I2C1_Init+0x58>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_I2C1_Init+0x50>)
 800094a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800094e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_I2C1_Init+0x50>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_I2C1_Init+0x50>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_I2C1_Init+0x50>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_I2C1_Init+0x50>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_I2C1_Init+0x50>)
 800096a:	f001 fb23 	bl	8001fb4 <HAL_I2C_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000974:	f000 f924 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000114 	.word	0x20000114
 8000980:	40005400 	.word	0x40005400
 8000984:	000186a0 	.word	0x000186a0

08000988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_I2C_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12b      	bne.n	8000a02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009c6:	23c0      	movs	r3, #192	; 0xc0
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ca:	2312      	movs	r3, #18
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d6:	2304      	movs	r3, #4
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <HAL_I2C_MspInit+0x8c>)
 80009e2:	f001 f931 	bl	8001c48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_I2C_MspInit+0x88>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400

08000a18 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000a1e:	f000 fabf 	bl	8000fa0 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 fc8e 	bl	8001344 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <Display_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	9202      	str	r2, [sp, #8]
 8000a2e:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8000a32:	9201      	str	r2, [sp, #4]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	9200      	str	r2, [sp, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <Display_Init+0x5c>)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 fb3f 	bl	80010c2 <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <Display_Init+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	9202      	str	r2, [sp, #8]
 8000a4a:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8000a4e:	9201      	str	r2, [sp, #4]
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	9200      	str	r2, [sp, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <Display_Init+0x64>)
 8000a58:	2119      	movs	r1, #25
 8000a5a:	2022      	movs	r0, #34	; 0x22
 8000a5c:	f000 fb31 	bl	80010c2 <ST7735_WriteString>
    HAL_Delay(2000);
 8000a60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a64:	f000 ffce 	bl	8001a04 <HAL_Delay>
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000060 	.word	0x20000060
 8000a74:	0800781c 	.word	0x0800781c
 8000a78:	20000058 	.word	0x20000058
 8000a7c:	08007828 	.word	0x08007828

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a84:	f000 ff7c 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a88:	f000 f81e 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f7ff feda 	bl	8000844 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a90:	f7ff ff4c 	bl	800092c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a94:	f000 f920 	bl	8000cd8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000a98:	f000 fe26 	bl	80016e8 <MX_TIM3_Init>
  MX_CRC_Init();
 8000a9c:	f7ff fd98 	bl	80005d0 <MX_CRC_Init>
  MX_TIM2_Init();
 8000aa0:	f000 fdca 	bl	8001638 <MX_TIM2_Init>
  MX_RTC_Init();
 8000aa4:	f000 f892 	bl	8000bcc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000aa8:	213c      	movs	r1, #60	; 0x3c
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <main+0x44>)
 8000aac:	f002 ffb5 	bl	8003a1a <HAL_TIM_Encoder_Start>
  Display_Init();
 8000ab0:	f7ff ffb2 	bl	8000a18 <Display_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ab4:	f003 fd2a 	bl	800450c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ab8:	f7ff fdc0 	bl	800063c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000abc:	f003 fd4a 	bl	8004554 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <main+0x40>
 8000ac2:	bf00      	nop
 8000ac4:	20000280 	.word	0x20000280

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	; 0x50
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	2230      	movs	r2, #48	; 0x30
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f006 fcca 	bl	8007470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <SystemClock_Config+0xcc>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000b24:	2305      	movs	r3, #5
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b3c:	2319      	movs	r3, #25
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000b40:	2390      	movs	r3, #144	; 0x90
 8000b42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fb73 	bl	800223c <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b5c:	f000 f830 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2302      	movs	r3, #2
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fdd5 	bl	800272c <HAL_RCC_ClockConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b88:	f000 f81a 	bl	8000bc0 <Error_Handler>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3750      	adds	r7, #80	; 0x50
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000

08000b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bae:	f000 ff09 	bl	80019c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40010000 	.word	0x40010000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <MX_RTC_Init+0xac>)
 8000be6:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <MX_RTC_Init+0xb0>)
 8000be8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_RTC_Init+0xac>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_RTC_Init+0xac>)
 8000bf2:	227f      	movs	r2, #127	; 0x7f
 8000bf4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_RTC_Init+0xac>)
 8000bf8:	22ff      	movs	r2, #255	; 0xff
 8000bfa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_RTC_Init+0xac>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_RTC_Init+0xac>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_RTC_Init+0xac>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c0e:	481a      	ldr	r0, [pc, #104]	; (8000c78 <MX_RTC_Init+0xac>)
 8000c10:	f002 f88e 	bl	8002d30 <HAL_RTC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f7ff ffd1 	bl	8000bc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	4619      	mov	r1, r3
 8000c38:	480f      	ldr	r0, [pc, #60]	; (8000c78 <MX_RTC_Init+0xac>)
 8000c3a:	f002 f8ef 	bl	8002e1c <HAL_RTC_SetTime>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f7ff ffbc 	bl	8000bc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000c48:	2305      	movs	r3, #5
 8000c4a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8000c50:	2307      	movs	r3, #7
 8000c52:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000c54:	2316      	movs	r3, #22
 8000c56:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_RTC_Init+0xac>)
 8000c60:	f002 f976 	bl	8002f50 <HAL_RTC_SetDate>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000c6a:	f7ff ffa9 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000168 	.word	0x20000168
 8000c7c:	40002800 	.word	0x40002800

08000c80 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <HAL_RTC_MspInit+0x50>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d111      	bne.n	8000cc8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 ff4c 	bl	8002b50 <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000cbe:	f7ff ff7f 	bl	8000bc0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_RTC_MspInit+0x54>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40002800 	.word	0x40002800
 8000cd4:	42470e3c 	.word	0x42470e3c

08000cd8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <MX_SPI1_Init+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000ce4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000d24:	220a      	movs	r2, #10
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_SPI1_Init+0x64>)
 8000d2a:	f002 fa36 	bl	800319a <HAL_SPI_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d34:	f7ff ff44 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000188 	.word	0x20000188
 8000d40:	40013000 	.word	0x40013000

08000d44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_SPI_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12b      	bne.n	8000dbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d9e:	23a0      	movs	r3, #160	; 0xa0
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dae:	2305      	movs	r3, #5
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_SPI_MspInit+0x8c>)
 8000dba:	f000 ff45 	bl	8001c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40013000 	.word	0x40013000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2110      	movs	r1, #16
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <ST7735_Select+0x14>)
 8000dde:	f001 f8b7 	bl	8001f50 <HAL_GPIO_WritePin>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40020000 	.word	0x40020000

08000dec <ST7735_Unselect>:

void ST7735_Unselect() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <ST7735_Unselect+0x14>)
 8000df6:	f001 f8ab 	bl	8001f50 <HAL_GPIO_WritePin>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40020000 	.word	0x40020000

08000e04 <ST7735_Reset>:

static void ST7735_Reset() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <ST7735_Reset+0x24>)
 8000e0e:	f001 f89f 	bl	8001f50 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000e12:	2005      	movs	r0, #5
 8000e14:	f000 fdf6 	bl	8001a04 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <ST7735_Reset+0x24>)
 8000e1e:	f001 f897 	bl	8001f50 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40020000 	.word	0x40020000

08000e2c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <ST7735_WriteCommand+0x2c>)
 8000e3c:	f001 f888 	bl	8001f50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000e40:	1df9      	adds	r1, r7, #7
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	2201      	movs	r2, #1
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <ST7735_WriteCommand+0x30>)
 8000e4a:	f002 fa2f 	bl	80032ac <HAL_SPI_Transmit>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	20000188 	.word	0x20000188

08000e60 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4807      	ldr	r0, [pc, #28]	; (8000e8c <ST7735_WriteData+0x2c>)
 8000e70:	f001 f86e 	bl	8001f50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <ST7735_WriteData+0x30>)
 8000e80:	f002 fa14 	bl	80032ac <HAL_SPI_Transmit>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	20000188 	.word	0x20000188

08000e94 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000ea6:	e034      	b.n	8000f12 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000eb2:	7afb      	ldrb	r3, [r7, #11]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ffb9 	bl	8000e2c <ST7735_WriteCommand>

        numArgs = *addr++;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000ec4:	7abb      	ldrb	r3, [r7, #10]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ecc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000ece:	7abb      	ldrb	r3, [r7, #10]
 8000ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ed4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000ed6:	7abb      	ldrb	r3, [r7, #10]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d008      	beq.n	8000eee <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000edc:	7abb      	ldrb	r3, [r7, #10]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ffbd 	bl	8000e60 <ST7735_WriteData>
            addr += numArgs;
 8000ee6:	7abb      	ldrb	r3, [r7, #10]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000eee:	89bb      	ldrh	r3, [r7, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00e      	beq.n	8000f12 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000efe:	89bb      	ldrh	r3, [r7, #12]
 8000f00:	2bff      	cmp	r3, #255	; 0xff
 8000f02:	d102      	bne.n	8000f0a <ST7735_ExecuteCommandList+0x76>
 8000f04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f08:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000f0a:	89bb      	ldrh	r3, [r7, #12]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fd79 	bl	8001a04 <HAL_Delay>
    while(numCommands--) {
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	73fa      	strb	r2, [r7, #15]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1c5      	bne.n	8000ea8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000f26:	b590      	push	{r4, r7, lr}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4604      	mov	r4, r0
 8000f2e:	4608      	mov	r0, r1
 8000f30:	4611      	mov	r1, r2
 8000f32:	461a      	mov	r2, r3
 8000f34:	4623      	mov	r3, r4
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71bb      	strb	r3, [r7, #6]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	717b      	strb	r3, [r7, #5]
 8000f40:	4613      	mov	r3, r2
 8000f42:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000f44:	202a      	movs	r0, #42	; 0x2a
 8000f46:	f7ff ff71 	bl	8000e2c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	733b      	strb	r3, [r7, #12]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	737b      	strb	r3, [r7, #13]
 8000f56:	2300      	movs	r3, #0
 8000f58:	73bb      	strb	r3, [r7, #14]
 8000f5a:	797b      	ldrb	r3, [r7, #5]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	2104      	movs	r1, #4
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff79 	bl	8000e60 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000f6e:	202b      	movs	r0, #43	; 0x2b
 8000f70:	f7ff ff5c 	bl	8000e2c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	331a      	adds	r3, #26
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000f7c:	793b      	ldrb	r3, [r7, #4]
 8000f7e:	331a      	adds	r3, #26
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff68 	bl	8000e60 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000f90:	202c      	movs	r0, #44	; 0x2c
 8000f92:	f7ff ff4b 	bl	8000e2c <ST7735_WriteCommand>
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd90      	pop	{r4, r7, pc}
	...

08000fa0 <ST7735_Init>:

void ST7735_Init() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000fa4:	f7ff ff16 	bl	8000dd4 <ST7735_Select>
    ST7735_Reset();
 8000fa8:	f7ff ff2c 	bl	8000e04 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <ST7735_Init+0x28>)
 8000fae:	f7ff ff71 	bl	8000e94 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <ST7735_Init+0x2c>)
 8000fb4:	f7ff ff6e 	bl	8000e94 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <ST7735_Init+0x30>)
 8000fba:	f7ff ff6b 	bl	8000e94 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000fbe:	f7ff ff15 	bl	8000dec <ST7735_Unselect>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	0800a0fc 	.word	0x0800a0fc
 8000fcc:	0800a138 	.word	0x0800a138
 8000fd0:	0800a148 	.word	0x0800a148

08000fd4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b089      	sub	sp, #36	; 0x24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	80bb      	strh	r3, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	b2d9      	uxtb	r1, r3
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3b01      	subs	r3, #1
 8001000:	b2dc      	uxtb	r4, r3
 8001002:	88bb      	ldrh	r3, [r7, #4]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800100a:	4413      	add	r3, r2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	3b01      	subs	r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4622      	mov	r2, r4
 8001014:	f7ff ff87 	bl	8000f26 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	e043      	b.n	80010a6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800101e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	3b20      	subs	r3, #32
 8001024:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4619      	mov	r1, r3
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	440b      	add	r3, r1
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	e029      	b.n	8001094 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00e      	beq.n	800106e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001050:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	b29b      	uxth	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	743b      	strb	r3, [r7, #16]
 800105a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800105c:	b2db      	uxtb	r3, r3
 800105e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2102      	movs	r1, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fefa 	bl	8000e60 <ST7735_WriteData>
 800106c:	e00f      	b.n	800108e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800106e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	733b      	strb	r3, [r7, #12]
 800107a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800107e:	b2db      	uxtb	r3, r3
 8001080:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2102      	movs	r1, #2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fee9 	bl	8000e60 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	3301      	adds	r3, #1
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001098:	461a      	mov	r2, r3
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4293      	cmp	r3, r2
 800109e:	d3cf      	bcc.n	8001040 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	3301      	adds	r3, #1
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010aa:	461a      	mov	r2, r3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d3b5      	bcc.n	800101e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3724      	adds	r7, #36	; 0x24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010be:	b002      	add	sp, #8
 80010c0:	4770      	bx	lr

080010c2 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010c2:	b082      	sub	sp, #8
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	603a      	str	r2, [r7, #0]
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80010d6:	f7ff fe7d 	bl	8000dd4 <ST7735_Select>

    while(*str) {
 80010da:	e02d      	b.n	8001138 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	7d3a      	ldrb	r2, [r7, #20]
 80010e0:	4413      	add	r3, r2
 80010e2:	2b9f      	cmp	r3, #159	; 0x9f
 80010e4:	dd13      	ble.n	800110e <ST7735_WriteString+0x4c>
            x = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80010ea:	7d7b      	ldrb	r3, [r7, #21]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	88bb      	ldrh	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	7d7a      	ldrb	r2, [r7, #21]
 80010f8:	4413      	add	r3, r2
 80010fa:	2b4f      	cmp	r3, #79	; 0x4f
 80010fc:	dc21      	bgt.n	8001142 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b20      	cmp	r3, #32
 8001104:	d103      	bne.n	800110e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	603b      	str	r3, [r7, #0]
                continue;
 800110c:	e014      	b.n	8001138 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	88b9      	ldrh	r1, [r7, #4]
 8001114:	88f8      	ldrh	r0, [r7, #6]
 8001116:	8c3b      	ldrh	r3, [r7, #32]
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	8bbb      	ldrh	r3, [r7, #28]
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f7ff ff56 	bl	8000fd4 <ST7735_WriteChar>
        x += font.width;
 8001128:	7d3b      	ldrb	r3, [r7, #20]
 800112a:	b29a      	uxth	r2, r3
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	4413      	add	r3, r2
 8001130:	80fb      	strh	r3, [r7, #6]
        str++;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1cd      	bne.n	80010dc <ST7735_WriteString+0x1a>
 8001140:	e000      	b.n	8001144 <ST7735_WriteString+0x82>
                break;
 8001142:	bf00      	nop
    }

    ST7735_Unselect();
 8001144:	f7ff fe52 	bl	8000dec <ST7735_Unselect>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001152:	b002      	add	sp, #8
 8001154:	4770      	bx	lr
	...

08001158 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	4604      	mov	r4, r0
 8001160:	4608      	mov	r0, r1
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	4623      	mov	r3, r4
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4603      	mov	r3, r0
 800116c:	80bb      	strh	r3, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	807b      	strh	r3, [r7, #2]
 8001172:	4613      	mov	r3, r2
 8001174:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	2b9f      	cmp	r3, #159	; 0x9f
 800117a:	d857      	bhi.n	800122c <ST7735_FillRectangle+0xd4>
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2b4f      	cmp	r3, #79	; 0x4f
 8001180:	d854      	bhi.n	800122c <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001182:	88fa      	ldrh	r2, [r7, #6]
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	4413      	add	r3, r2
 8001188:	2ba0      	cmp	r3, #160	; 0xa0
 800118a:	dd03      	ble.n	8001194 <ST7735_FillRectangle+0x3c>
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001192:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001194:	88ba      	ldrh	r2, [r7, #4]
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	4413      	add	r3, r2
 800119a:	2b50      	cmp	r3, #80	; 0x50
 800119c:	dd03      	ble.n	80011a6 <ST7735_FillRectangle+0x4e>
 800119e:	88bb      	ldrh	r3, [r7, #4]
 80011a0:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80011a4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80011a6:	f7ff fe15 	bl	8000dd4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	b2d8      	uxtb	r0, r3
 80011ae:	88bb      	ldrh	r3, [r7, #4]
 80011b0:	b2d9      	uxtb	r1, r3
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	3b01      	subs	r3, #1
 80011c0:	b2dc      	uxtb	r4, r3
 80011c2:	88bb      	ldrh	r3, [r7, #4]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	883b      	ldrh	r3, [r7, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	3b01      	subs	r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4622      	mov	r2, r4
 80011d4:	f7ff fea7 	bl	8000f26 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80011d8:	8c3b      	ldrh	r3, [r7, #32]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	733b      	strb	r3, [r7, #12]
 80011e2:	8c3b      	ldrh	r3, [r7, #32]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2104      	movs	r1, #4
 80011ec:	4811      	ldr	r0, [pc, #68]	; (8001234 <ST7735_FillRectangle+0xdc>)
 80011ee:	f000 feaf 	bl	8001f50 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80011f2:	883b      	ldrh	r3, [r7, #0]
 80011f4:	80bb      	strh	r3, [r7, #4]
 80011f6:	e013      	b.n	8001220 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	80fb      	strh	r3, [r7, #6]
 80011fc:	e00a      	b.n	8001214 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80011fe:	f107 010c 	add.w	r1, r7, #12
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	2202      	movs	r2, #2
 8001208:	480b      	ldr	r0, [pc, #44]	; (8001238 <ST7735_FillRectangle+0xe0>)
 800120a:	f002 f84f 	bl	80032ac <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	3b01      	subs	r3, #1
 8001212:	80fb      	strh	r3, [r7, #6]
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f1      	bne.n	80011fe <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	3b01      	subs	r3, #1
 800121e:	80bb      	strh	r3, [r7, #4]
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1e8      	bne.n	80011f8 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001226:	f7ff fde1 	bl	8000dec <ST7735_Unselect>
 800122a:	e000      	b.n	800122e <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800122c:	bf00      	nop
}
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bd90      	pop	{r4, r7, pc}
 8001234:	40020000 	.word	0x40020000
 8001238:	20000188 	.word	0x20000188

0800123c <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	80fb      	strh	r3, [r7, #6]
 800124e:	4603      	mov	r3, r0
 8001250:	80bb      	strh	r3, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	807b      	strh	r3, [r7, #2]
 8001256:	4613      	mov	r3, r2
 8001258:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	2b9f      	cmp	r3, #159	; 0x9f
 800125e:	d869      	bhi.n	8001334 <ST7735_FillRectangleFast+0xf8>
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	2b4f      	cmp	r3, #79	; 0x4f
 8001264:	d866      	bhi.n	8001334 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001266:	88fa      	ldrh	r2, [r7, #6]
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	4413      	add	r3, r2
 800126c:	2ba0      	cmp	r3, #160	; 0xa0
 800126e:	dd03      	ble.n	8001278 <ST7735_FillRectangleFast+0x3c>
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001276:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001278:	88ba      	ldrh	r2, [r7, #4]
 800127a:	883b      	ldrh	r3, [r7, #0]
 800127c:	4413      	add	r3, r2
 800127e:	2b50      	cmp	r3, #80	; 0x50
 8001280:	dd03      	ble.n	800128a <ST7735_FillRectangleFast+0x4e>
 8001282:	88bb      	ldrh	r3, [r7, #4]
 8001284:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001288:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800128a:	f7ff fda3 	bl	8000dd4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	b2d8      	uxtb	r0, r3
 8001292:	88bb      	ldrh	r3, [r7, #4]
 8001294:	b2d9      	uxtb	r1, r3
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4413      	add	r3, r2
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b2dc      	uxtb	r4, r3
 80012a6:	88bb      	ldrh	r3, [r7, #4]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	883b      	ldrh	r3, [r7, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4622      	mov	r2, r4
 80012b8:	f7ff fe35 	bl	8000f26 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80012bc:	8c3b      	ldrh	r3, [r7, #32]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	723b      	strb	r3, [r7, #8]
 80012c6:	8c3b      	ldrh	r3, [r7, #32]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4618      	mov	r0, r3
 80012d2:	f006 f8af 	bl	8007434 <malloc>
 80012d6:	4603      	mov	r3, r0
 80012d8:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80012da:	2300      	movs	r3, #0
 80012dc:	80fb      	strh	r3, [r7, #6]
 80012de:	e008      	b.n	80012f2 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	893a      	ldrh	r2, [r7, #8]
 80012ea:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	3301      	adds	r3, #1
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	88fa      	ldrh	r2, [r7, #6]
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d3f2      	bcc.n	80012e0 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2104      	movs	r1, #4
 80012fe:	480f      	ldr	r0, [pc, #60]	; (800133c <ST7735_FillRectangleFast+0x100>)
 8001300:	f000 fe26 	bl	8001f50 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001304:	883b      	ldrh	r3, [r7, #0]
 8001306:	80bb      	strh	r3, [r7, #4]
 8001308:	e00b      	b.n	8001322 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b29a      	uxth	r2, r3
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	68f9      	ldr	r1, [r7, #12]
 8001316:	480a      	ldr	r0, [pc, #40]	; (8001340 <ST7735_FillRectangleFast+0x104>)
 8001318:	f001 ffc8 	bl	80032ac <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	80bb      	strh	r3, [r7, #4]
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f0      	bne.n	800130a <ST7735_FillRectangleFast+0xce>

    free(line);
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f006 f88b 	bl	8007444 <free>
    ST7735_Unselect();
 800132e:	f7ff fd5d 	bl	8000dec <ST7735_Unselect>
 8001332:	e000      	b.n	8001336 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001334:	bf00      	nop
}
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	40020000 	.word	0x40020000
 8001340:	20000188 	.word	0x20000188

08001344 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af02      	add	r7, sp, #8
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2350      	movs	r3, #80	; 0x50
 8001354:	22a0      	movs	r2, #160	; 0xa0
 8001356:	2100      	movs	r1, #0
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fefd 	bl	8001158 <ST7735_FillRectangle>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af02      	add	r7, sp, #8
 800136c:	4603      	mov	r3, r0
 800136e:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2350      	movs	r3, #80	; 0x50
 8001376:	22a0      	movs	r2, #160	; 0xa0
 8001378:	2100      	movs	r1, #0
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ff5e 	bl	800123c <ST7735_FillRectangleFast>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_MspInit+0x74>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_MspInit+0x74>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_MspInit+0x74>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_MspInit+0x74>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <HAL_MspInit+0x74>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_MspInit+0x74>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	210f      	movs	r1, #15
 80013ca:	f06f 0001 	mvn.w	r0, #1
 80013ce:	f000 fbf5 	bl	8001bbc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2105      	movs	r1, #5
 80013d6:	2005      	movs	r0, #5
 80013d8:	f000 fbf0 	bl	8001bbc <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013dc:	2005      	movs	r0, #5
 80013de:	f000 fc09 	bl	8001bf4 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	2005      	movs	r0, #5
 80013e8:	f000 fbe8 	bl	8001bbc <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013ec:	2005      	movs	r0, #5
 80013ee:	f000 fc01 	bl	8001bf4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	2019      	movs	r0, #25
 8001416:	f000 fbd1 	bl	8001bbc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800141a:	2019      	movs	r0, #25
 800141c:	f000 fbea 	bl	8001bf4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_InitTick+0xa0>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_InitTick+0xa0>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6453      	str	r3, [r2, #68]	; 0x44
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_InitTick+0xa0>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800143c:	f107 0210 	add.w	r2, r7, #16
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fb50 	bl	8002aec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800144c:	f001 fb3a 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8001450:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_InitTick+0xa4>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0c9b      	lsrs	r3, r3, #18
 800145c:	3b01      	subs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_InitTick+0xa8>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_InitTick+0xac>)
 8001464:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_InitTick+0xa8>)
 8001468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800146c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_InitTick+0xa8>)
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_InitTick+0xa8>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_InitTick+0xa8>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <HAL_InitTick+0xa8>)
 8001482:	f002 f919 	bl	80036b8 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d104      	bne.n	8001496 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <HAL_InitTick+0xa8>)
 800148e:	f002 f96d 	bl	800376c <HAL_TIM_Base_Start_IT>
 8001492:	4603      	mov	r3, r0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3730      	adds	r7, #48	; 0x30
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	431bde83 	.word	0x431bde83
 80014a8:	200001e0 	.word	0x200001e0
 80014ac:	40010000 	.word	0x40010000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 fd48 	bl	8001f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014fe:	f002 fb1a 	bl	8003b36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200001e0 	.word	0x200001e0

0800150c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <TIM2_IRQHandler+0x10>)
 8001512:	f002 fb10 	bl	8003b36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000238 	.word	0x20000238

08001520 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <TIM3_IRQHandler+0x28>)
 8001526:	f002 fb06 	bl	8003b36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <TIM3_IRQHandler+0x2c>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <TIM3_IRQHandler+0x2c>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <TIM3_IRQHandler+0x2c>)
 800153c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001540:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000280 	.word	0x20000280
 800154c:	40000400 	.word	0x40000400

08001550 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 800155a:	23ff      	movs	r3, #255	; 0xff
 800155c:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 8001568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db11      	blt.n	8001594 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8001570:	f000 fa3c 	bl	80019ec <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b63      	cmp	r3, #99	; 0x63
 8001580:	d90a      	bls.n	8001598 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 8001582:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8001588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x54>)
 800158e:	2101      	movs	r1, #1
 8001590:	54d1      	strb	r1, [r2, r3]
 8001592:	e002      	b.n	800159a <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 8001594:	bf00      	nop
 8001596:	e000      	b.n	800159a <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 8001598:	bf00      	nop
}
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000230 	.word	0x20000230
 80015a4:	20000228 	.word	0x20000228

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f005 ff00 	bl	80073dc <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20020000 	.word	0x20020000
 8001608:	00000400 	.word	0x00000400
 800160c:	20000234 	.word	0x20000234
 8001610:	20004cf0 	.word	0x20004cf0

08001614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	f107 0320 	add.w	r3, r7, #32
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <MX_TIM2_Init+0xac>)
 800165c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001660:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <MX_TIM2_Init+0xac>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <MX_TIM2_Init+0xac>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <MX_TIM2_Init+0xac>)
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <MX_TIM2_Init+0xac>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_TIM2_Init+0xac>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001682:	4818      	ldr	r0, [pc, #96]	; (80016e4 <MX_TIM2_Init+0xac>)
 8001684:	f002 f8d4 	bl	8003830 <HAL_TIM_PWM_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800168e:	f7ff fa97 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	4619      	mov	r1, r3
 80016a0:	4810      	ldr	r0, [pc, #64]	; (80016e4 <MX_TIM2_Init+0xac>)
 80016a2:	f002 fe6d 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80016ac:	f7ff fa88 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b0:	2360      	movs	r3, #96	; 0x60
 80016b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2204      	movs	r2, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4807      	ldr	r0, [pc, #28]	; (80016e4 <MX_TIM2_Init+0xac>)
 80016c8:	f002 fb3e 	bl	8003d48 <HAL_TIM_PWM_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016d2:	f7ff fa75 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <MX_TIM2_Init+0xac>)
 80016d8:	f000 f8f0 	bl	80018bc <HAL_TIM_MspPostInit>

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000238 	.word	0x20000238

080016e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f005 feba 	bl	8007470 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001706:	4a21      	ldr	r2, [pc, #132]	; (800178c <MX_TIM3_Init+0xa4>)
 8001708:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_TIM3_Init+0xa0>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800172a:	2301      	movs	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 800173a:	2306      	movs	r3, #6
 800173c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001742:	2301      	movs	r3, #1
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 800174a:	2306      	movs	r3, #6
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001756:	f002 f8ba 	bl	80038ce <HAL_TIM_Encoder_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001760:	f7ff fa2e 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001772:	f002 fe05 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800177c:	f7ff fa20 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000280 	.word	0x20000280
 800178c:	40000400 	.word	0x40000400

08001790 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a0:	d115      	bne.n	80017ce <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_TIM_PWM_MspInit+0x48>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_TIM_PWM_MspInit+0x48>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_TIM_PWM_MspInit+0x48>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2105      	movs	r1, #5
 80017c2:	201c      	movs	r0, #28
 80017c4:	f000 f9fa 	bl	8001bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017c8:	201c      	movs	r0, #28
 80017ca:	f000 fa13 	bl	8001bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <HAL_TIM_Encoder_MspInit+0xd0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d151      	bne.n	80018a2 <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a2a      	ldr	r2, [pc, #168]	; (80018b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a23      	ldr	r2, [pc, #140]	; (80018b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001852:	2340      	movs	r3, #64	; 0x40
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185a:	2301      	movs	r3, #1
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001862:	2302      	movs	r3, #2
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4811      	ldr	r0, [pc, #68]	; (80018b4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800186e:	f000 f9eb 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001872:	2320      	movs	r3, #32
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187a:	2301      	movs	r3, #1
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001882:	2302      	movs	r3, #2
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	480a      	ldr	r0, [pc, #40]	; (80018b8 <HAL_TIM_Encoder_MspInit+0xdc>)
 800188e:	f000 f9db 	bl	8001c48 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2105      	movs	r1, #5
 8001896:	201d      	movs	r0, #29
 8001898:	f000 f990 	bl	8001bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800189c:	201d      	movs	r0, #29
 800189e:	f000 f9a9 	bl	8001bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	; 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40000400 	.word	0x40000400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020400 	.word	0x40020400

080018bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018dc:	d11d      	bne.n	800191a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_TIM_MspPostInit+0x68>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <HAL_TIM_MspPostInit+0x68>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_TIM_MspPostInit+0x68>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 80018fa:	2302      	movs	r3, #2
 80018fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800190a:	2301      	movs	r3, #1
 800190c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	4619      	mov	r1, r3
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <HAL_TIM_MspPostInit+0x6c>)
 8001916:	f000 f997 	bl	8001c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40020000 	.word	0x40020000

0800192c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800192c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001964 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001932:	490e      	ldr	r1, [pc, #56]	; (800196c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800193c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001948:	4c0b      	ldr	r4, [pc, #44]	; (8001978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001956:	f7ff fe5d 	bl	8001614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195a:	f005 fd45 	bl	80073e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195e:	f7ff f88f 	bl	8000a80 <main>
  bx  lr    
 8001962:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001970:	0800a1fc 	.word	0x0800a1fc
  ldr r2, =_sbss
 8001974:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001978:	20004cec 	.word	0x20004cec

0800197c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_Init+0x40>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_Init+0x40>)
 8001996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_Init+0x40>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f8fc 	bl	8001ba6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	200f      	movs	r0, #15
 80019b0:	f7ff fd26 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff fce8 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000070 	.word	0x20000070
 80019e8:	200002c8 	.word	0x200002c8

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200002c8 	.word	0x200002c8

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000070 	.word	0x20000070

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff4c 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bce:	f7ff ff61 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001bd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	6978      	ldr	r0, [r7, #20]
 8001bda:	f7ff ffb1 	bl	8001b40 <NVIC_EncodePriority>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff80 	bl	8001aec <__NVIC_SetPriority>
}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff54 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	795b      	ldrb	r3, [r3, #5]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d105      	bne.n	8001c38 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fce0 	bl	80005f8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e159      	b.n	8001f18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f040 8148 	bne.w	8001f12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d005      	beq.n	8001c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d130      	bne.n	8001cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 0201 	and.w	r2, r3, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d017      	beq.n	8001d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d123      	bne.n	8001d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3208      	adds	r2, #8
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0203 	and.w	r2, r3, #3
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a2 	beq.w	8001f12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a56      	ldr	r2, [pc, #344]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b54      	ldr	r3, [pc, #336]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dea:	4a52      	ldr	r2, [pc, #328]	; (8001f34 <HAL_GPIO_Init+0x2ec>)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a49      	ldr	r2, [pc, #292]	; (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d019      	beq.n	8001e4a <HAL_GPIO_Init+0x202>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a48      	ldr	r2, [pc, #288]	; (8001f3c <HAL_GPIO_Init+0x2f4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x1fe>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a47      	ldr	r2, [pc, #284]	; (8001f40 <HAL_GPIO_Init+0x2f8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a46      	ldr	r2, [pc, #280]	; (8001f44 <HAL_GPIO_Init+0x2fc>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_Init+0x1f6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a45      	ldr	r2, [pc, #276]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_Init+0x1f2>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5c:	4935      	ldr	r1, [pc, #212]	; (8001f34 <HAL_GPIO_Init+0x2ec>)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6a:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e8e:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e94:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb8:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee2:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_GPIO_Init+0x304>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	f67f aea2 	bls.w	8001c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40013800 	.word	0x40013800
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40020c00 	.word	0x40020c00
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40013c00 	.word	0x40013c00

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fad4 	bl	8001550 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40013c00 	.word	0x40013c00

08001fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e12b      	b.n	800221e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fcd4 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2224      	movs	r2, #36	; 0x24
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002018:	f000 fd40 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 800201c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4a81      	ldr	r2, [pc, #516]	; (8002228 <HAL_I2C_Init+0x274>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d807      	bhi.n	8002038 <HAL_I2C_Init+0x84>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a80      	ldr	r2, [pc, #512]	; (800222c <HAL_I2C_Init+0x278>)
 800202c:	4293      	cmp	r3, r2
 800202e:	bf94      	ite	ls
 8002030:	2301      	movls	r3, #1
 8002032:	2300      	movhi	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	e006      	b.n	8002046 <HAL_I2C_Init+0x92>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4a7d      	ldr	r2, [pc, #500]	; (8002230 <HAL_I2C_Init+0x27c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	bf94      	ite	ls
 8002040:	2301      	movls	r3, #1
 8002042:	2300      	movhi	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0e7      	b.n	800221e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4a78      	ldr	r2, [pc, #480]	; (8002234 <HAL_I2C_Init+0x280>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0c9b      	lsrs	r3, r3, #18
 8002058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a6a      	ldr	r2, [pc, #424]	; (8002228 <HAL_I2C_Init+0x274>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d802      	bhi.n	8002088 <HAL_I2C_Init+0xd4>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	3301      	adds	r3, #1
 8002086:	e009      	b.n	800209c <HAL_I2C_Init+0xe8>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	4a69      	ldr	r2, [pc, #420]	; (8002238 <HAL_I2C_Init+0x284>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	3301      	adds	r3, #1
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	495c      	ldr	r1, [pc, #368]	; (8002228 <HAL_I2C_Init+0x274>)
 80020b8:	428b      	cmp	r3, r1
 80020ba:	d819      	bhi.n	80020f0 <HAL_I2C_Init+0x13c>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e59      	subs	r1, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ca:	1c59      	adds	r1, r3, #1
 80020cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020d0:	400b      	ands	r3, r1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_I2C_Init+0x138>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1e59      	subs	r1, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ea:	e051      	b.n	8002190 <HAL_I2C_Init+0x1dc>
 80020ec:	2304      	movs	r3, #4
 80020ee:	e04f      	b.n	8002190 <HAL_I2C_Init+0x1dc>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d111      	bne.n	800211c <HAL_I2C_Init+0x168>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e58      	subs	r0, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	e012      	b.n	8002142 <HAL_I2C_Init+0x18e>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e58      	subs	r0, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	0099      	lsls	r1, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_I2C_Init+0x196>
 8002146:	2301      	movs	r3, #1
 8002148:	e022      	b.n	8002190 <HAL_I2C_Init+0x1dc>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10e      	bne.n	8002170 <HAL_I2C_Init+0x1bc>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1e58      	subs	r0, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6859      	ldr	r1, [r3, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	440b      	add	r3, r1
 8002160:	fbb0 f3f3 	udiv	r3, r0, r3
 8002164:	3301      	adds	r3, #1
 8002166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216e:	e00f      	b.n	8002190 <HAL_I2C_Init+0x1dc>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e58      	subs	r0, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	0099      	lsls	r1, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	fbb0 f3f3 	udiv	r3, r0, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	6809      	ldr	r1, [r1, #0]
 8002194:	4313      	orrs	r3, r2
 8002196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6911      	ldr	r1, [r2, #16]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68d2      	ldr	r2, [r2, #12]
 80021ca:	4311      	orrs	r1, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	430b      	orrs	r3, r1
 80021d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	000186a0 	.word	0x000186a0
 800222c:	001e847f 	.word	0x001e847f
 8002230:	003d08ff 	.word	0x003d08ff
 8002234:	431bde83 	.word	0x431bde83
 8002238:	10624dd3 	.word	0x10624dd3

0800223c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e267      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d075      	beq.n	8002346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800225a:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_RCC_OscConfig+0x240>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b04      	cmp	r3, #4
 8002264:	d00c      	beq.n	8002280 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002266:	4b85      	ldr	r3, [pc, #532]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800226e:	2b08      	cmp	r3, #8
 8002270:	d112      	bne.n	8002298 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002272:	4b82      	ldr	r3, [pc, #520]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227e:	d10b      	bne.n	8002298 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	4b7e      	ldr	r3, [pc, #504]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d05b      	beq.n	8002344 <HAL_RCC_OscConfig+0x108>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d157      	bne.n	8002344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e242      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a0:	d106      	bne.n	80022b0 <HAL_RCC_OscConfig+0x74>
 80022a2:	4b76      	ldr	r3, [pc, #472]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a75      	ldr	r2, [pc, #468]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e01d      	b.n	80022ec <HAL_RCC_OscConfig+0xb0>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x98>
 80022ba:	4b70      	ldr	r3, [pc, #448]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6f      	ldr	r2, [pc, #444]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80022c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b6d      	ldr	r3, [pc, #436]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a6c      	ldr	r2, [pc, #432]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0xb0>
 80022d4:	4b69      	ldr	r3, [pc, #420]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a68      	ldr	r2, [pc, #416]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80022da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b66      	ldr	r3, [pc, #408]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a65      	ldr	r2, [pc, #404]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80022e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fb7a 	bl	80019ec <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff fb76 	bl	80019ec <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e207      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b5b      	ldr	r3, [pc, #364]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0xc0>
 800231a:	e014      	b.n	8002346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7ff fb66 	bl	80019ec <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002324:	f7ff fb62 	bl	80019ec <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1f3      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	4b51      	ldr	r3, [pc, #324]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0xe8>
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d063      	beq.n	800241a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002352:	4b4a      	ldr	r3, [pc, #296]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235e:	4b47      	ldr	r3, [pc, #284]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002366:	2b08      	cmp	r3, #8
 8002368:	d11c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800236a:	4b44      	ldr	r3, [pc, #272]	; (800247c <HAL_RCC_OscConfig+0x240>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d116      	bne.n	80023a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_RCC_OscConfig+0x152>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e1c7      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4937      	ldr	r1, [pc, #220]	; (800247c <HAL_RCC_OscConfig+0x240>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	e03a      	b.n	800241a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ac:	4b34      	ldr	r3, [pc, #208]	; (8002480 <HAL_RCC_OscConfig+0x244>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7ff fb1b 	bl	80019ec <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ba:	f7ff fb17 	bl	80019ec <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1a8      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4925      	ldr	r1, [pc, #148]	; (800247c <HAL_RCC_OscConfig+0x240>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]
 80023ec:	e015      	b.n	800241a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_OscConfig+0x244>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fafa 	bl	80019ec <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fc:	f7ff faf6 	bl	80019ec <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e187      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d036      	beq.n	8002494 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_RCC_OscConfig+0x248>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7ff fada 	bl	80019ec <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243c:	f7ff fad6 	bl	80019ec <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e167      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_OscConfig+0x240>)
 8002450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x200>
 800245a:	e01b      	b.n	8002494 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_OscConfig+0x248>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7ff fac3 	bl	80019ec <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	e00e      	b.n	8002488 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800246a:	f7ff fabf 	bl	80019ec <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d907      	bls.n	8002488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e150      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
 800247c:	40023800 	.word	0x40023800
 8002480:	42470000 	.word	0x42470000
 8002484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	4b88      	ldr	r3, [pc, #544]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 800248a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ea      	bne.n	800246a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8097 	beq.w	80025d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b81      	ldr	r3, [pc, #516]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b7d      	ldr	r3, [pc, #500]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a7c      	ldr	r2, [pc, #496]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b7a      	ldr	r3, [pc, #488]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b77      	ldr	r3, [pc, #476]	; (80026b0 <HAL_RCC_OscConfig+0x474>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d118      	bne.n	8002510 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024de:	4b74      	ldr	r3, [pc, #464]	; (80026b0 <HAL_RCC_OscConfig+0x474>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a73      	ldr	r2, [pc, #460]	; (80026b0 <HAL_RCC_OscConfig+0x474>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7ff fa7f 	bl	80019ec <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f2:	f7ff fa7b 	bl	80019ec <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e10c      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCC_OscConfig+0x474>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x2ea>
 8002518:	4b64      	ldr	r3, [pc, #400]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a63      	ldr	r2, [pc, #396]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
 8002524:	e01c      	b.n	8002560 <HAL_RCC_OscConfig+0x324>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b05      	cmp	r3, #5
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x30c>
 800252e:	4b5f      	ldr	r3, [pc, #380]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a5e      	ldr	r2, [pc, #376]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	4b5c      	ldr	r3, [pc, #368]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a5b      	ldr	r2, [pc, #364]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0x324>
 8002548:	4b58      	ldr	r3, [pc, #352]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	4a57      	ldr	r2, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	6713      	str	r3, [r2, #112]	; 0x70
 8002554:	4b55      	ldr	r3, [pc, #340]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a54      	ldr	r2, [pc, #336]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d015      	beq.n	8002594 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7ff fa40 	bl	80019ec <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256e:	e00a      	b.n	8002586 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7ff fa3c 	bl	80019ec <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e0cb      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002586:	4b49      	ldr	r3, [pc, #292]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0ee      	beq.n	8002570 <HAL_RCC_OscConfig+0x334>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002594:	f7ff fa2a 	bl	80019ec <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7ff fa26 	bl	80019ec <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0b5      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b2:	4b3e      	ldr	r3, [pc, #248]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1ee      	bne.n	800259c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	4a38      	ldr	r2, [pc, #224]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 80025ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80a1 	beq.w	800271c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025da:	4b34      	ldr	r3, [pc, #208]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d05c      	beq.n	80026a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d141      	bne.n	8002672 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_RCC_OscConfig+0x478>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7ff f9fa 	bl	80019ec <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fc:	f7ff f9f6 	bl	80019ec <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e087      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	019b      	lsls	r3, r3, #6
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	085b      	lsrs	r3, r3, #1
 8002632:	3b01      	subs	r3, #1
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	491b      	ldr	r1, [pc, #108]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x478>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7ff f9cf 	bl	80019ec <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002652:	f7ff f9cb 	bl	80019ec <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e05c      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x416>
 8002670:	e054      	b.n	800271c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_RCC_OscConfig+0x478>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff f9b8 	bl	80019ec <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7ff f9b4 	bl	80019ec <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e045      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_OscConfig+0x470>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x444>
 800269e:	e03d      	b.n	800271c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e038      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40007000 	.word	0x40007000
 80026b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_RCC_OscConfig+0x4ec>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d028      	beq.n	8002718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d121      	bne.n	8002718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d11a      	bne.n	8002718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d111      	bne.n	8002718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	3b01      	subs	r3, #1
 8002702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d107      	bne.n	8002718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800

0800272c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0cc      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b68      	ldr	r3, [pc, #416]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d90c      	bls.n	8002768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b65      	ldr	r3, [pc, #404]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0b8      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800278a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002798:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	494d      	ldr	r1, [pc, #308]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d044      	beq.n	800284c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d119      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e07f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e067      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4934      	ldr	r1, [pc, #208]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281c:	f7ff f8e6 	bl	80019ec <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7ff f8e2 	bl	80019ec <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e04f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d20c      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e032      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4916      	ldr	r1, [pc, #88]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	490e      	ldr	r1, [pc, #56]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028b2:	f000 f821 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 80028b6:	4602      	mov	r2, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	490a      	ldr	r1, [pc, #40]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	5ccb      	ldrb	r3, [r1, r3]
 80028c6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fd94 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023c00 	.word	0x40023c00
 80028e8:	40023800 	.word	0x40023800
 80028ec:	0800a174 	.word	0x0800a174
 80028f0:	20000068 	.word	0x20000068
 80028f4:	2000006c 	.word	0x2000006c

080028f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028fc:	b090      	sub	sp, #64	; 0x40
 80028fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
 8002904:	2300      	movs	r3, #0
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002908:	2300      	movs	r3, #0
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002910:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b08      	cmp	r3, #8
 800291a:	d00d      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x40>
 800291c:	2b08      	cmp	r3, #8
 800291e:	f200 80a1 	bhi.w	8002a64 <HAL_RCC_GetSysClockFreq+0x16c>
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x34>
 8002926:	2b04      	cmp	r3, #4
 8002928:	d003      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x3a>
 800292a:	e09b      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x184>)
 800292e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002930:	e09b      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002932:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002936:	e098      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002938:	4b4f      	ldr	r3, [pc, #316]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002942:	4b4d      	ldr	r3, [pc, #308]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d028      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294e:	4b4a      	ldr	r3, [pc, #296]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	099b      	lsrs	r3, r3, #6
 8002954:	2200      	movs	r2, #0
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	627a      	str	r2, [r7, #36]	; 0x24
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002960:	2100      	movs	r1, #0
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002964:	fb03 f201 	mul.w	r2, r3, r1
 8002968:	2300      	movs	r3, #0
 800296a:	fb00 f303 	mul.w	r3, r0, r3
 800296e:	4413      	add	r3, r2
 8002970:	4a43      	ldr	r2, [pc, #268]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002972:	fba0 1202 	umull	r1, r2, r0, r2
 8002976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002978:	460a      	mov	r2, r1
 800297a:	62ba      	str	r2, [r7, #40]	; 0x28
 800297c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800297e:	4413      	add	r3, r2
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002984:	2200      	movs	r2, #0
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	61fa      	str	r2, [r7, #28]
 800298a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800298e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002992:	f7fd fc25 	bl	80001e0 <__aeabi_uldivmod>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4613      	mov	r3, r2
 800299c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299e:	e053      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a0:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	2200      	movs	r2, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	617a      	str	r2, [r7, #20]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029b2:	f04f 0b00 	mov.w	fp, #0
 80029b6:	4652      	mov	r2, sl
 80029b8:	465b      	mov	r3, fp
 80029ba:	f04f 0000 	mov.w	r0, #0
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	0159      	lsls	r1, r3, #5
 80029c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c8:	0150      	lsls	r0, r2, #5
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	ebb2 080a 	subs.w	r8, r2, sl
 80029d2:	eb63 090b 	sbc.w	r9, r3, fp
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029ea:	ebb2 0408 	subs.w	r4, r2, r8
 80029ee:	eb63 0509 	sbc.w	r5, r3, r9
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	00eb      	lsls	r3, r5, #3
 80029fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a00:	00e2      	lsls	r2, r4, #3
 8002a02:	4614      	mov	r4, r2
 8002a04:	461d      	mov	r5, r3
 8002a06:	eb14 030a 	adds.w	r3, r4, sl
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	eb45 030b 	adc.w	r3, r5, fp
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1e:	4629      	mov	r1, r5
 8002a20:	028b      	lsls	r3, r1, #10
 8002a22:	4621      	mov	r1, r4
 8002a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a28:	4621      	mov	r1, r4
 8002a2a:	028a      	lsls	r2, r1, #10
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a32:	2200      	movs	r2, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	60fa      	str	r2, [r7, #12]
 8002a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a3c:	f7fd fbd0 	bl	80001e0 <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4613      	mov	r3, r2
 8002a46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3740      	adds	r7, #64	; 0x40
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	017d7840 	.word	0x017d7840

08002a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000068 	.word	0x20000068

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a9b      	lsrs	r3, r3, #10
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	0800a184 	.word	0x0800a184

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ac8:	f7ff ffdc 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0b5b      	lsrs	r3, r3, #13
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	0800a184 	.word	0x0800a184

08002aec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	220f      	movs	r2, #15
 8002afa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	08db      	lsrs	r3, r3, #3
 8002b26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_RCC_GetClockConfig+0x60>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0207 	and.w	r2, r3, #7
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40023c00 	.word	0x40023c00

08002b50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d038      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b7e:	f7fe ff35 	bl	80019ec <HAL_GetTick>
 8002b82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b86:	f7fe ff31 	bl	80019ec <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0bd      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	019b      	lsls	r3, r3, #6
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	071b      	lsls	r3, r3, #28
 8002bb6:	495a      	ldr	r1, [pc, #360]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bbe:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bc4:	f7fe ff12 	bl	80019ec <HAL_GetTick>
 8002bc8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bcc:	f7fe ff0e 	bl	80019ec <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e09a      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bde:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8083 	beq.w	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	4b48      	ldr	r3, [pc, #288]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	4a47      	ldr	r2, [pc, #284]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	; 0x40
 8002c08:	4b45      	ldr	r3, [pc, #276]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c14:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a42      	ldr	r2, [pc, #264]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c20:	f7fe fee4 	bl	80019ec <HAL_GetTick>
 8002c24:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c28:	f7fe fee0 	bl	80019ec <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e06c      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c3a:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d02f      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d028      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c64:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c6e:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c74:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c7a:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d114      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe feae 	bl	80019ec <HAL_GetTick>
 8002c90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe feaa 	bl	80019ec <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e034      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ee      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002cc4:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd8:	4911      	ldr	r1, [pc, #68]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
 8002cde:	e005      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cea:	6093      	str	r3, [r2, #8]
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	4909      	ldr	r1, [pc, #36]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7d1a      	ldrb	r2, [r3, #20]
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002d10:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	42470068 	.word	0x42470068
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42470e40 	.word	0x42470e40
 8002d2c:	424711e0 	.word	0x424711e0

08002d30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e066      	b.n	8002e14 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7f5b      	ldrb	r3, [r3, #29]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d105      	bne.n	8002d5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fd ff92 	bl	8000c80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	22ca      	movs	r2, #202	; 0xca
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2253      	movs	r2, #83	; 0x53
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f998 	bl	80030a8 <RTC_EnterInitMode>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d12c      	bne.n	8002ddc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d94:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6899      	ldr	r1, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	68d2      	ldr	r2, [r2, #12]
 8002dbc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6919      	ldr	r1, [r3, #16]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f99f 	bl	8003116 <RTC_ExitInitMode>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d113      	bne.n	8002e0a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	22ff      	movs	r2, #255	; 0xff
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	7f1b      	ldrb	r3, [r3, #28]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_RTC_SetTime+0x1c>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e087      	b.n	8002f48 <HAL_RTC_SetTime+0x12c>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2202      	movs	r2, #2
 8002e42:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d126      	bne.n	8002e98 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f97c 	bl	8003160 <RTC_ByteToBcd2>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f975 	bl	8003160 <RTC_ByteToBcd2>
 8002e76:	4603      	mov	r3, r0
 8002e78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e7a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	789b      	ldrb	r3, [r3, #2]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f96d 	bl	8003160 <RTC_ByteToBcd2>
 8002e86:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	78db      	ldrb	r3, [r3, #3]
 8002e90:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e018      	b.n	8002eca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	785b      	ldrb	r3, [r3, #1]
 8002eb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002eb8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ebe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	78db      	ldrb	r3, [r3, #3]
 8002ec4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	22ca      	movs	r2, #202	; 0xca
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2253      	movs	r2, #83	; 0x53
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f8e4 	bl	80030a8 <RTC_EnterInitMode>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d120      	bne.n	8002f2c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ef4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ef8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f08:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f8f7 	bl	8003116 <RTC_ExitInitMode>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	22ff      	movs	r2, #255	; 0xff
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	771a      	strb	r2, [r3, #28]

  return status;
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}

08002f50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	7f1b      	ldrb	r3, [r3, #28]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_RTC_SetDate+0x1c>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e071      	b.n	8003050 <HAL_RTC_SetDate+0x100>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2202      	movs	r2, #2
 8002f76:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10e      	bne.n	8002f9c <HAL_RTC_SetDate+0x4c>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	785b      	ldrb	r3, [r3, #1]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	f023 0310 	bic.w	r3, r3, #16
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	330a      	adds	r3, #10
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d11c      	bne.n	8002fdc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	78db      	ldrb	r3, [r3, #3]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f8da 	bl	8003160 <RTC_ByteToBcd2>
 8002fac:	4603      	mov	r3, r0
 8002fae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	785b      	ldrb	r3, [r3, #1]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f8d3 	bl	8003160 <RTC_ByteToBcd2>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fbe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	789b      	ldrb	r3, [r3, #2]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f8cb 	bl	8003160 <RTC_ByteToBcd2>
 8002fca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fcc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e00e      	b.n	8002ffa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	78db      	ldrb	r3, [r3, #3]
 8002fe0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fe8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002fee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	22ca      	movs	r2, #202	; 0xca
 8003000:	625a      	str	r2, [r3, #36]	; 0x24
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2253      	movs	r2, #83	; 0x53
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f84c 	bl	80030a8 <RTC_EnterInitMode>
 8003010:	4603      	mov	r3, r0
 8003012:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003024:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003028:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f873 	bl	8003116 <RTC_ExitInitMode>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	22ff      	movs	r2, #255	; 0xff
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	771a      	strb	r2, [r3, #28]

  return status;
 800304e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003050:	4618      	mov	r0, r3
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}

08003058 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003072:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003074:	f7fe fcba 	bl	80019ec <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800307a:	e009      	b.n	8003090 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800307c:	f7fe fcb6 	bl	80019ec <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800308a:	d901      	bls.n	8003090 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e007      	b.n	80030a0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0ee      	beq.n	800307c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d122      	bne.n	800310c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030d6:	f7fe fc89 	bl	80019ec <HAL_GetTick>
 80030da:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80030dc:	e00c      	b.n	80030f8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030de:	f7fe fc85 	bl	80019ec <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ec:	d904      	bls.n	80030f8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2204      	movs	r2, #4
 80030f2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <RTC_EnterInitMode+0x64>
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d1e8      	bne.n	80030de <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003130:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff89 	bl	8003058 <HAL_RTC_WaitForSynchro>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2204      	movs	r2, #4
 8003150:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800316e:	e005      	b.n	800317c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	3301      	adds	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	3b0a      	subs	r3, #10
 800317a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	2b09      	cmp	r3, #9
 8003180:	d8f6      	bhi.n	8003170 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	b2da      	uxtb	r2, r3
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	4313      	orrs	r3, r2
 800318c:	b2db      	uxtb	r3, r3
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e07b      	b.n	80032a4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d108      	bne.n	80031c6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031bc:	d009      	beq.n	80031d2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	61da      	str	r2, [r3, #28]
 80031c4:	e005      	b.n	80031d2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fd fda9 	bl	8000d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003208:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	ea42 0103 	orr.w	r1, r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	f003 0104 	and.w	r1, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f003 0210 	and.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003292:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_SPI_Transmit+0x22>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e126      	b.n	800351c <HAL_SPI_Transmit+0x270>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032d6:	f7fe fb89 	bl	80019ec <HAL_GetTick>
 80032da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d002      	beq.n	80032f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
 80032ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032f0:	e10b      	b.n	800350a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_SPI_Transmit+0x52>
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003302:	e102      	b.n	800350a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2203      	movs	r2, #3
 8003308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	88fa      	ldrh	r2, [r7, #6]
 800331c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	88fa      	ldrh	r2, [r7, #6]
 8003322:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334a:	d10f      	bne.n	800336c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d007      	beq.n	800338a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003388:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003392:	d14b      	bne.n	800342c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_SPI_Transmit+0xf6>
 800339c:	8afb      	ldrh	r3, [r7, #22]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d13e      	bne.n	8003420 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	881a      	ldrh	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	1c9a      	adds	r2, r3, #2
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033c6:	e02b      	b.n	8003420 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d112      	bne.n	80033fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	881a      	ldrh	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	1c9a      	adds	r2, r3, #2
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80033fa:	e011      	b.n	8003420 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033fc:	f7fe faf6 	bl	80019ec <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d803      	bhi.n	8003414 <HAL_SPI_Transmit+0x168>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d102      	bne.n	800341a <HAL_SPI_Transmit+0x16e>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800341e:	e074      	b.n	800350a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ce      	bne.n	80033c8 <HAL_SPI_Transmit+0x11c>
 800342a:	e04c      	b.n	80034c6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_SPI_Transmit+0x18e>
 8003434:	8afb      	ldrh	r3, [r7, #22]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d140      	bne.n	80034bc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003460:	e02c      	b.n	80034bc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b02      	cmp	r3, #2
 800346e:	d113      	bne.n	8003498 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	7812      	ldrb	r2, [r2, #0]
 800347c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	86da      	strh	r2, [r3, #54]	; 0x36
 8003496:	e011      	b.n	80034bc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003498:	f7fe faa8 	bl	80019ec <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d803      	bhi.n	80034b0 <HAL_SPI_Transmit+0x204>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d102      	bne.n	80034b6 <HAL_SPI_Transmit+0x20a>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034ba:	e026      	b.n	800350a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1cd      	bne.n	8003462 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f8b2 	bl	8003634 <SPI_EndRxTxTransaction>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e000      	b.n	800350a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003508:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800351a:	7ffb      	ldrb	r3, [r7, #31]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003534:	f7fe fa5a 	bl	80019ec <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	4413      	add	r3, r2
 8003542:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003544:	f7fe fa52 	bl	80019ec <HAL_GetTick>
 8003548:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	015b      	lsls	r3, r3, #5
 8003550:	0d1b      	lsrs	r3, r3, #20
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800355a:	e054      	b.n	8003606 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d050      	beq.n	8003606 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003564:	f7fe fa42 	bl	80019ec <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	429a      	cmp	r2, r3
 8003572:	d902      	bls.n	800357a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d13d      	bne.n	80035f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003592:	d111      	bne.n	80035b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359c:	d004      	beq.n	80035a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d107      	bne.n	80035b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c0:	d10f      	bne.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e017      	b.n	8003626 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3b01      	subs	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	bf0c      	ite	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	2300      	movne	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	429a      	cmp	r2, r3
 8003622:	d19b      	bne.n	800355c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000068 	.word	0x20000068

08003634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <SPI_EndRxTxTransaction+0x7c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <SPI_EndRxTxTransaction+0x80>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	0d5b      	lsrs	r3, r3, #21
 800364c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800365e:	d112      	bne.n	8003686 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff ff5a 	bl	8003524 <SPI_WaitFlagStateUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d016      	beq.n	80036a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e00f      	b.n	80036a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	3b01      	subs	r3, #1
 8003690:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d0f2      	beq.n	8003686 <SPI_EndRxTxTransaction+0x52>
 80036a0:	e000      	b.n	80036a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80036a2:	bf00      	nop
  }

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000068 	.word	0x20000068
 80036b4:	165e9f81 	.word	0x165e9f81

080036b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e041      	b.n	800374e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f839 	bl	8003756 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 fc10 	bl	8003f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d001      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e044      	b.n	800380e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1e      	ldr	r2, [pc, #120]	; (800381c <HAL_TIM_Base_Start_IT+0xb0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d018      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x6c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ae:	d013      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x6c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <HAL_TIM_Base_Start_IT+0xb4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00e      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x6c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a19      	ldr	r2, [pc, #100]	; (8003824 <HAL_TIM_Base_Start_IT+0xb8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d009      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x6c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a17      	ldr	r2, [pc, #92]	; (8003828 <HAL_TIM_Base_Start_IT+0xbc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x6c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a16      	ldr	r2, [pc, #88]	; (800382c <HAL_TIM_Base_Start_IT+0xc0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d111      	bne.n	80037fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d010      	beq.n	800380c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fa:	e007      	b.n	800380c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40010000 	.word	0x40010000
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40014000 	.word	0x40014000

08003830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e041      	b.n	80038c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd ff9a 	bl	8001790 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f000 fb54 	bl	8003f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e097      	b.n	8003a12 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd ff70 	bl	80017dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003912:	f023 0307 	bic.w	r3, r3, #7
 8003916:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f000 fafa 	bl	8003f1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	f023 0303 	bic.w	r3, r3, #3
 8003954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	4313      	orrs	r3, r2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800396e:	f023 030c 	bic.w	r3, r3, #12
 8003972:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800397a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	4313      	orrs	r3, r2
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	011a      	lsls	r2, r3, #4
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	031b      	lsls	r3, r3, #12
 800399e:	4313      	orrs	r3, r2
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80039ac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80039b4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	4313      	orrs	r3, r2
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a2a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a32:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a3a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a42:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d110      	bne.n	8003a6c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d102      	bne.n	8003a56 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a50:	7b7b      	ldrb	r3, [r7, #13]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e069      	b.n	8003b2e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6a:	e031      	b.n	8003ad0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d110      	bne.n	8003a94 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a72:	7bbb      	ldrb	r3, [r7, #14]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d102      	bne.n	8003a7e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a78:	7b3b      	ldrb	r3, [r7, #12]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d001      	beq.n	8003a82 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e055      	b.n	8003b2e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a92:	e01d      	b.n	8003ad0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d108      	bne.n	8003aac <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a9a:	7bbb      	ldrb	r3, [r7, #14]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aa0:	7b7b      	ldrb	r3, [r7, #13]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003aa6:	7b3b      	ldrb	r3, [r7, #12]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d001      	beq.n	8003ab0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e03e      	b.n	8003b2e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_Encoder_Start+0xc4>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d008      	beq.n	8003aee <HAL_TIM_Encoder_Start+0xd4>
 8003adc:	e00f      	b.n	8003afe <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fc24 	bl	8004334 <TIM_CCxChannelCmd>
      break;
 8003aec:	e016      	b.n	8003b1c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2201      	movs	r2, #1
 8003af4:	2104      	movs	r1, #4
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fc1c 	bl	8004334 <TIM_CCxChannelCmd>
      break;
 8003afc:	e00e      	b.n	8003b1c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2201      	movs	r2, #1
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fc14 	bl	8004334 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2201      	movs	r2, #1
 8003b12:	2104      	movs	r1, #4
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fc0d 	bl	8004334 <TIM_CCxChannelCmd>
      break;
 8003b1a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d122      	bne.n	8003b92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d11b      	bne.n	8003b92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0202 	mvn.w	r2, #2
 8003b62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f9b1 	bl	8003ee0 <HAL_TIM_IC_CaptureCallback>
 8003b7e:	e005      	b.n	8003b8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f9a3 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f9b4 	bl	8003ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d122      	bne.n	8003be6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d11b      	bne.n	8003be6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f06f 0204 	mvn.w	r2, #4
 8003bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f987 	bl	8003ee0 <HAL_TIM_IC_CaptureCallback>
 8003bd2:	e005      	b.n	8003be0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f979 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f98a 	bl	8003ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d122      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d11b      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f06f 0208 	mvn.w	r2, #8
 8003c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2204      	movs	r2, #4
 8003c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f95d 	bl	8003ee0 <HAL_TIM_IC_CaptureCallback>
 8003c26:	e005      	b.n	8003c34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f94f 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f960 	bl	8003ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d122      	bne.n	8003c8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d11b      	bne.n	8003c8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f06f 0210 	mvn.w	r2, #16
 8003c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2208      	movs	r2, #8
 8003c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f933 	bl	8003ee0 <HAL_TIM_IC_CaptureCallback>
 8003c7a:	e005      	b.n	8003c88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f925 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f936 	bl	8003ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10e      	bne.n	8003cba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d107      	bne.n	8003cba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f06f 0201 	mvn.w	r2, #1
 8003cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7fc ff71 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	2b80      	cmp	r3, #128	; 0x80
 8003cc6:	d10e      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b80      	cmp	r3, #128	; 0x80
 8003cd4:	d107      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fbc5 	bl	8004470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d10e      	bne.n	8003d12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d107      	bne.n	8003d12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f8fb 	bl	8003f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d10e      	bne.n	8003d3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d107      	bne.n	8003d3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f06f 0220 	mvn.w	r2, #32
 8003d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fb8f 	bl	800445c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0ae      	b.n	8003ec4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	f200 809f 	bhi.w	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d76:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003db1 	.word	0x08003db1
 8003d80:	08003eb5 	.word	0x08003eb5
 8003d84:	08003eb5 	.word	0x08003eb5
 8003d88:	08003eb5 	.word	0x08003eb5
 8003d8c:	08003df1 	.word	0x08003df1
 8003d90:	08003eb5 	.word	0x08003eb5
 8003d94:	08003eb5 	.word	0x08003eb5
 8003d98:	08003eb5 	.word	0x08003eb5
 8003d9c:	08003e33 	.word	0x08003e33
 8003da0:	08003eb5 	.word	0x08003eb5
 8003da4:	08003eb5 	.word	0x08003eb5
 8003da8:	08003eb5 	.word	0x08003eb5
 8003dac:	08003e73 	.word	0x08003e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f930 	bl	800401c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0208 	orr.w	r2, r2, #8
 8003dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0204 	bic.w	r2, r2, #4
 8003dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6999      	ldr	r1, [r3, #24]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	619a      	str	r2, [r3, #24]
      break;
 8003dee:	e064      	b.n	8003eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f976 	bl	80040e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6999      	ldr	r1, [r3, #24]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	021a      	lsls	r2, r3, #8
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	619a      	str	r2, [r3, #24]
      break;
 8003e30:	e043      	b.n	8003eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f9c1 	bl	80041c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0208 	orr.w	r2, r2, #8
 8003e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0204 	bic.w	r2, r2, #4
 8003e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69d9      	ldr	r1, [r3, #28]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	61da      	str	r2, [r3, #28]
      break;
 8003e70:	e023      	b.n	8003eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fa0b 	bl	8004294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69d9      	ldr	r1, [r3, #28]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	021a      	lsls	r2, r3, #8
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	61da      	str	r2, [r3, #28]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a34      	ldr	r2, [pc, #208]	; (8004000 <TIM_Base_SetConfig+0xe4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00f      	beq.n	8003f54 <TIM_Base_SetConfig+0x38>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d00b      	beq.n	8003f54 <TIM_Base_SetConfig+0x38>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a31      	ldr	r2, [pc, #196]	; (8004004 <TIM_Base_SetConfig+0xe8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d007      	beq.n	8003f54 <TIM_Base_SetConfig+0x38>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a30      	ldr	r2, [pc, #192]	; (8004008 <TIM_Base_SetConfig+0xec>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_Base_SetConfig+0x38>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a2f      	ldr	r2, [pc, #188]	; (800400c <TIM_Base_SetConfig+0xf0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d108      	bne.n	8003f66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a25      	ldr	r2, [pc, #148]	; (8004000 <TIM_Base_SetConfig+0xe4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01b      	beq.n	8003fa6 <TIM_Base_SetConfig+0x8a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f74:	d017      	beq.n	8003fa6 <TIM_Base_SetConfig+0x8a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a22      	ldr	r2, [pc, #136]	; (8004004 <TIM_Base_SetConfig+0xe8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <TIM_Base_SetConfig+0x8a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a21      	ldr	r2, [pc, #132]	; (8004008 <TIM_Base_SetConfig+0xec>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00f      	beq.n	8003fa6 <TIM_Base_SetConfig+0x8a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a20      	ldr	r2, [pc, #128]	; (800400c <TIM_Base_SetConfig+0xf0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00b      	beq.n	8003fa6 <TIM_Base_SetConfig+0x8a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1f      	ldr	r2, [pc, #124]	; (8004010 <TIM_Base_SetConfig+0xf4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d007      	beq.n	8003fa6 <TIM_Base_SetConfig+0x8a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <TIM_Base_SetConfig+0xf8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_Base_SetConfig+0x8a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <TIM_Base_SetConfig+0xfc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d108      	bne.n	8003fb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a08      	ldr	r2, [pc, #32]	; (8004000 <TIM_Base_SetConfig+0xe4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d103      	bne.n	8003fec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	615a      	str	r2, [r3, #20]
}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40010000 	.word	0x40010000
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800
 800400c:	40000c00 	.word	0x40000c00
 8004010:	40014000 	.word	0x40014000
 8004014:	40014400 	.word	0x40014400
 8004018:	40014800 	.word	0x40014800

0800401c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0201 	bic.w	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 0302 	bic.w	r3, r3, #2
 8004064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <TIM_OC1_SetConfig+0xc8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d10c      	bne.n	8004092 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f023 0308 	bic.w	r3, r3, #8
 800407e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f023 0304 	bic.w	r3, r3, #4
 8004090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <TIM_OC1_SetConfig+0xc8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d111      	bne.n	80040be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40010000 	.word	0x40010000

080040e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0210 	bic.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0320 	bic.w	r3, r3, #32
 8004132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <TIM_OC2_SetConfig+0xd4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10d      	bne.n	8004164 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a15      	ldr	r2, [pc, #84]	; (80041bc <TIM_OC2_SetConfig+0xd4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d113      	bne.n	8004194 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800417a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000

080041c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <TIM_OC3_SetConfig+0xd0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d10d      	bne.n	800423a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a14      	ldr	r2, [pc, #80]	; (8004290 <TIM_OC3_SetConfig+0xd0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d113      	bne.n	800426a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	621a      	str	r2, [r3, #32]
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40010000 	.word	0x40010000

08004294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	031b      	lsls	r3, r3, #12
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <TIM_OC4_SetConfig+0x9c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d109      	bne.n	8004308 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	019b      	lsls	r3, r3, #6
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000

08004334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2201      	movs	r2, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	43db      	mvns	r3, r3
 8004356:	401a      	ands	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	fa01 f303 	lsl.w	r3, r1, r3
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004394:	2302      	movs	r3, #2
 8004396:	e050      	b.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d013      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a16      	ldr	r2, [pc, #88]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a13      	ldr	r2, [pc, #76]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10c      	bne.n	8004428 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4313      	orrs	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40014000 	.word	0x40014000

0800445c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <__NVIC_SetPriority>:
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	6039      	str	r1, [r7, #0]
 800448e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	2b00      	cmp	r3, #0
 8004496:	db0a      	blt.n	80044ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	490c      	ldr	r1, [pc, #48]	; (80044d0 <__NVIC_SetPriority+0x4c>)
 800449e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a2:	0112      	lsls	r2, r2, #4
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	440b      	add	r3, r1
 80044a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80044ac:	e00a      	b.n	80044c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4908      	ldr	r1, [pc, #32]	; (80044d4 <__NVIC_SetPriority+0x50>)
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	3b04      	subs	r3, #4
 80044bc:	0112      	lsls	r2, r2, #4
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	440b      	add	r3, r1
 80044c2:	761a      	strb	r2, [r3, #24]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000e100 	.word	0xe000e100
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <SysTick_Handler+0x1c>)
 80044de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80044e0:	f001 ff12 	bl	8006308 <xTaskGetSchedulerState>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80044ea:	f002 fcfd 	bl	8006ee8 <xPortSysTickHandler>
  }
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	e000e010 	.word	0xe000e010

080044f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80044fc:	2100      	movs	r1, #0
 80044fe:	f06f 0004 	mvn.w	r0, #4
 8004502:	f7ff ffbf 	bl	8004484 <__NVIC_SetPriority>
#endif
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004512:	f3ef 8305 	mrs	r3, IPSR
 8004516:	603b      	str	r3, [r7, #0]
  return(result);
 8004518:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800451e:	f06f 0305 	mvn.w	r3, #5
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	e00c      	b.n	8004540 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <osKernelInitialize+0x44>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <osKernelInitialize+0x44>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004534:	2300      	movs	r3, #0
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	e002      	b.n	8004540 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295
 800453e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004540:	687b      	ldr	r3, [r7, #4]
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	200002cc 	.word	0x200002cc

08004554 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800455a:	f3ef 8305 	mrs	r3, IPSR
 800455e:	603b      	str	r3, [r7, #0]
  return(result);
 8004560:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004566:	f06f 0305 	mvn.w	r3, #5
 800456a:	607b      	str	r3, [r7, #4]
 800456c:	e010      	b.n	8004590 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <osKernelStart+0x48>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d109      	bne.n	800458a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004576:	f7ff ffbf 	bl	80044f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800457a:	4b08      	ldr	r3, [pc, #32]	; (800459c <osKernelStart+0x48>)
 800457c:	2202      	movs	r2, #2
 800457e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004580:	f001 fa66 	bl	8005a50 <vTaskStartScheduler>
      stat = osOK;
 8004584:	2300      	movs	r3, #0
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	e002      	b.n	8004590 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004590:	687b      	ldr	r3, [r7, #4]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200002cc 	.word	0x200002cc

080045a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08e      	sub	sp, #56	; 0x38
 80045a4:	af04      	add	r7, sp, #16
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045b0:	f3ef 8305 	mrs	r3, IPSR
 80045b4:	617b      	str	r3, [r7, #20]
  return(result);
 80045b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d17e      	bne.n	80046ba <osThreadNew+0x11a>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d07b      	beq.n	80046ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80045c6:	2318      	movs	r3, #24
 80045c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d045      	beq.n	8004666 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <osThreadNew+0x48>
        name = attr->name;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <osThreadNew+0x6e>
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b38      	cmp	r3, #56	; 0x38
 8004600:	d805      	bhi.n	800460e <osThreadNew+0x6e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <osThreadNew+0x72>
        return (NULL);
 800460e:	2300      	movs	r3, #0
 8004610:	e054      	b.n	80046bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00e      	beq.n	8004648 <osThreadNew+0xa8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2bbb      	cmp	r3, #187	; 0xbb
 8004630:	d90a      	bls.n	8004648 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004636:	2b00      	cmp	r3, #0
 8004638:	d006      	beq.n	8004648 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <osThreadNew+0xa8>
        mem = 1;
 8004642:	2301      	movs	r3, #1
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	e010      	b.n	800466a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10c      	bne.n	800466a <osThreadNew+0xca>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d108      	bne.n	800466a <osThreadNew+0xca>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <osThreadNew+0xca>
          mem = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e001      	b.n	800466a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d110      	bne.n	8004692 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004678:	9202      	str	r2, [sp, #8]
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fff6 	bl	8005678 <xTaskCreateStatic>
 800468c:	4603      	mov	r3, r0
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	e013      	b.n	80046ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d110      	bne.n	80046ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	b29a      	uxth	r2, r3
 800469c:	f107 0310 	add.w	r3, r7, #16
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f001 f841 	bl	8005732 <xTaskCreate>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d001      	beq.n	80046ba <osThreadNew+0x11a>
            hTask = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046ba:	693b      	ldr	r3, [r7, #16]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3728      	adds	r7, #40	; 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046cc:	f3ef 8305 	mrs	r3, IPSR
 80046d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80046d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <osDelay+0x1c>
    stat = osErrorISR;
 80046d8:	f06f 0305 	mvn.w	r3, #5
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e007      	b.n	80046f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f001 f97c 	bl	80059e8 <vTaskDelay>
    }
  }

  return (stat);
 80046f0:	68fb      	ldr	r3, [r7, #12]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b08a      	sub	sp, #40	; 0x28
 80046fe:	af02      	add	r7, sp, #8
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800470a:	f3ef 8305 	mrs	r3, IPSR
 800470e:	613b      	str	r3, [r7, #16]
  return(result);
 8004710:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004712:	2b00      	cmp	r3, #0
 8004714:	d15f      	bne.n	80047d6 <osMessageQueueNew+0xdc>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d05c      	beq.n	80047d6 <osMessageQueueNew+0xdc>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d059      	beq.n	80047d6 <osMessageQueueNew+0xdc>
    mem = -1;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d029      	beq.n	8004782 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d012      	beq.n	800475c <osMessageQueueNew+0x62>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b4f      	cmp	r3, #79	; 0x4f
 800473c:	d90e      	bls.n	800475c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <osMessageQueueNew+0x62>
        mem = 1;
 8004756:	2301      	movs	r3, #1
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	e014      	b.n	8004786 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d110      	bne.n	8004786 <osMessageQueueNew+0x8c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10c      	bne.n	8004786 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004770:	2b00      	cmp	r3, #0
 8004772:	d108      	bne.n	8004786 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <osMessageQueueNew+0x8c>
          mem = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	e001      	b.n	8004786 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10b      	bne.n	80047a4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2100      	movs	r1, #0
 8004796:	9100      	str	r1, [sp, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fa2e 	bl	8004bfc <xQueueGenericCreateStatic>
 80047a0:	61f8      	str	r0, [r7, #28]
 80047a2:	e008      	b.n	80047b6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d105      	bne.n	80047b6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80047aa:	2200      	movs	r2, #0
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa9c 	bl	8004cec <xQueueGenericCreate>
 80047b4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00c      	beq.n	80047d6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <osMessageQueueNew+0xd0>
        name = attr->name;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e001      	b.n	80047ce <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80047ce:	6979      	ldr	r1, [r7, #20]
 80047d0:	69f8      	ldr	r0, [r7, #28]
 80047d2:	f000 fef3 	bl	80055bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80047d6:	69fb      	ldr	r3, [r7, #28]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3720      	adds	r7, #32
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f8:	f3ef 8305 	mrs	r3, IPSR
 80047fc:	617b      	str	r3, [r7, #20]
  return(result);
 80047fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004800:	2b00      	cmp	r3, #0
 8004802:	d028      	beq.n	8004856 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <osMessageQueuePut+0x36>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <osMessageQueuePut+0x36>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004816:	f06f 0303 	mvn.w	r3, #3
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e038      	b.n	8004890 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004822:	f107 0210 	add.w	r2, r7, #16
 8004826:	2300      	movs	r3, #0
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	69b8      	ldr	r0, [r7, #24]
 800482c:	f000 fbba 	bl	8004fa4 <xQueueGenericSendFromISR>
 8004830:	4603      	mov	r3, r0
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004836:	f06f 0302 	mvn.w	r3, #2
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	e028      	b.n	8004890 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d025      	beq.n	8004890 <osMessageQueuePut+0xb0>
 8004844:	4b15      	ldr	r3, [pc, #84]	; (800489c <osMessageQueuePut+0xbc>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	e01c      	b.n	8004890 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <osMessageQueuePut+0x82>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004862:	f06f 0303 	mvn.w	r3, #3
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	e012      	b.n	8004890 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800486a:	2300      	movs	r3, #0
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	69b8      	ldr	r0, [r7, #24]
 8004872:	f000 fa99 	bl	8004da8 <xQueueGenericSend>
 8004876:	4603      	mov	r3, r0
 8004878:	2b01      	cmp	r3, #1
 800487a:	d009      	beq.n	8004890 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004882:	f06f 0301 	mvn.w	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e002      	b.n	8004890 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800488a:	f06f 0302 	mvn.w	r3, #2
 800488e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004890:	69fb      	ldr	r3, [r7, #28]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048b6:	f3ef 8305 	mrs	r3, IPSR
 80048ba:	617b      	str	r3, [r7, #20]
  return(result);
 80048bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d028      	beq.n	8004914 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <osMessageQueueGet+0x34>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <osMessageQueueGet+0x34>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80048d4:	f06f 0303 	mvn.w	r3, #3
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e037      	b.n	800494c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80048e0:	f107 0310 	add.w	r3, r7, #16
 80048e4:	461a      	mov	r2, r3
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	69b8      	ldr	r0, [r7, #24]
 80048ea:	f000 fcd7 	bl	800529c <xQueueReceiveFromISR>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d003      	beq.n	80048fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80048f4:	f06f 0302 	mvn.w	r3, #2
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	e027      	b.n	800494c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d024      	beq.n	800494c <osMessageQueueGet+0xac>
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <osMessageQueueGet+0xb8>)
 8004904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	e01b      	b.n	800494c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <osMessageQueueGet+0x80>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d103      	bne.n	8004928 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004920:	f06f 0303 	mvn.w	r3, #3
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	e011      	b.n	800494c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	69b8      	ldr	r0, [r7, #24]
 800492e:	f000 fbd5 	bl	80050dc <xQueueReceive>
 8004932:	4603      	mov	r3, r0
 8004934:	2b01      	cmp	r3, #1
 8004936:	d009      	beq.n	800494c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800493e:	f06f 0301 	mvn.w	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e002      	b.n	800494c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004946:	f06f 0302 	mvn.w	r3, #2
 800494a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800494c:	69fb      	ldr	r3, [r7, #28]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <vApplicationGetIdleTaskMemory+0x2c>)
 800496c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4a06      	ldr	r2, [pc, #24]	; (800498c <vApplicationGetIdleTaskMemory+0x30>)
 8004972:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2280      	movs	r2, #128	; 0x80
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	200002d0 	.word	0x200002d0
 800498c:	2000038c 	.word	0x2000038c

08004990 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a07      	ldr	r2, [pc, #28]	; (80049bc <vApplicationGetTimerTaskMemory+0x2c>)
 80049a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4a06      	ldr	r2, [pc, #24]	; (80049c0 <vApplicationGetTimerTaskMemory+0x30>)
 80049a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ae:	601a      	str	r2, [r3, #0]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	2000058c 	.word	0x2000058c
 80049c0:	20000648 	.word	0x20000648

080049c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f103 0208 	add.w	r2, r3, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f04f 32ff 	mov.w	r2, #4294967295
 80049dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f103 0208 	add.w	r2, r3, #8
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f103 0208 	add.w	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a66:	b480      	push	{r7}
 8004a68:	b085      	sub	sp, #20
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7c:	d103      	bne.n	8004a86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e00c      	b.n	8004aa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e002      	b.n	8004a94 <vListInsert+0x2e>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d2f6      	bcs.n	8004a8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6892      	ldr	r2, [r2, #8]
 8004aee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6852      	ldr	r2, [r2, #4]
 8004af8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d103      	bne.n	8004b0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	1e5a      	subs	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b56:	f002 f935 	bl	8006dc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b66:	fb01 f303 	mul.w	r3, r1, r3
 8004b6a:	441a      	add	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	3b01      	subs	r3, #1
 8004b88:	68f9      	ldr	r1, [r7, #12]
 8004b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	441a      	add	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	22ff      	movs	r2, #255	; 0xff
 8004b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01a      	beq.n	8004bea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3310      	adds	r3, #16
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 f9e3 	bl	8005f84 <xTaskRemoveFromEventList>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d012      	beq.n	8004bea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <xQueueGenericReset+0xcc>)
 8004bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	e009      	b.n	8004bea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3310      	adds	r3, #16
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fef2 	bl	80049c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3324      	adds	r3, #36	; 0x24
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff feed 	bl	80049c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bea:	f002 f91b 	bl	8006e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bee:	2301      	movs	r3, #1
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08e      	sub	sp, #56	; 0x38
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <xQueueGenericCreateStatic+0x52>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <xQueueGenericCreateStatic+0x56>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <xQueueGenericCreateStatic+0x58>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	623b      	str	r3, [r7, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <xQueueGenericCreateStatic+0x7e>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <xQueueGenericCreateStatic+0x82>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <xQueueGenericCreateStatic+0x84>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	61fb      	str	r3, [r7, #28]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c9a:	2350      	movs	r3, #80	; 0x50
 8004c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b50      	cmp	r3, #80	; 0x50
 8004ca2:	d00a      	beq.n	8004cba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	61bb      	str	r3, [r7, #24]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00d      	beq.n	8004ce2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f83f 	bl	8004d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3730      	adds	r7, #48	; 0x30
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	613b      	str	r3, [r7, #16]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	3350      	adds	r3, #80	; 0x50
 8004d24:	4618      	mov	r0, r3
 8004d26:	f002 f96f 	bl	8007008 <pvPortMalloc>
 8004d2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d011      	beq.n	8004d56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	3350      	adds	r3, #80	; 0x50
 8004d3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d44:	79fa      	ldrb	r2, [r7, #7]
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f805 	bl	8004d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d56:	69bb      	ldr	r3, [r7, #24]
	}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e002      	b.n	8004d82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d8e:	2101      	movs	r1, #1
 8004d90:	69b8      	ldr	r0, [r7, #24]
 8004d92:	f7ff fecb 	bl	8004b2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08e      	sub	sp, #56	; 0x38
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xQueueGenericSend+0x32>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <xQueueGenericSend+0x40>
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <xQueueGenericSend+0x44>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <xQueueGenericSend+0x46>
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <xQueueGenericSend+0x60>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d103      	bne.n	8004e16 <xQueueGenericSend+0x6e>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <xQueueGenericSend+0x72>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <xQueueGenericSend+0x74>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <xQueueGenericSend+0x8e>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	623b      	str	r3, [r7, #32]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e36:	f001 fa67 	bl	8006308 <xTaskGetSchedulerState>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <xQueueGenericSend+0x9e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <xQueueGenericSend+0xa2>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <xQueueGenericSend+0xa4>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <xQueueGenericSend+0xbe>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	61fb      	str	r3, [r7, #28]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e66:	f001 ffad 	bl	8006dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <xQueueGenericSend+0xd4>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d129      	bne.n	8004ed0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e82:	f000 fa8b 	bl	800539c <prvCopyDataToQueue>
 8004e86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d010      	beq.n	8004eb2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 f875 	bl	8005f84 <xTaskRemoveFromEventList>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ea0:	4b3f      	ldr	r3, [pc, #252]	; (8004fa0 <xQueueGenericSend+0x1f8>)
 8004ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	e00a      	b.n	8004ec8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004eb8:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <xQueueGenericSend+0x1f8>)
 8004eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ec8:	f001 ffac 	bl	8006e24 <vPortExitCritical>
				return pdPASS;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e063      	b.n	8004f98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d103      	bne.n	8004ede <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ed6:	f001 ffa5 	bl	8006e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e05c      	b.n	8004f98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 f8af 	bl	800604c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ef2:	f001 ff97 	bl	8006e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ef6:	f000 fe1b 	bl	8005b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004efa:	f001 ff63 	bl	8006dc4 <vPortEnterCritical>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d103      	bne.n	8004f14 <xQueueGenericSend+0x16c>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f1a:	b25b      	sxtb	r3, r3
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d103      	bne.n	8004f2a <xQueueGenericSend+0x182>
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f2a:	f001 ff7b 	bl	8006e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f2e:	1d3a      	adds	r2, r7, #4
 8004f30:	f107 0314 	add.w	r3, r7, #20
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 f89e 	bl	8006078 <xTaskCheckForTimeOut>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d124      	bne.n	8004f8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f44:	f000 fb22 	bl	800558c <prvIsQueueFull>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d018      	beq.n	8004f80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	3310      	adds	r3, #16
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 ffc4 	bl	8005ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f5e:	f000 faad 	bl	80054bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f62:	f000 fdf3 	bl	8005b4c <xTaskResumeAll>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f af7c 	bne.w	8004e66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <xQueueGenericSend+0x1f8>)
 8004f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	e772      	b.n	8004e66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f82:	f000 fa9b 	bl	80054bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f86:	f000 fde1 	bl	8005b4c <xTaskResumeAll>
 8004f8a:	e76c      	b.n	8004e66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f8e:	f000 fa95 	bl	80054bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f92:	f000 fddb 	bl	8005b4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3738      	adds	r7, #56	; 0x38
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b090      	sub	sp, #64	; 0x40
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d103      	bne.n	8004fe0 <xQueueGenericSendFromISR+0x3c>
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <xQueueGenericSendFromISR+0x40>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <xQueueGenericSendFromISR+0x42>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d103      	bne.n	800500e <xQueueGenericSendFromISR+0x6a>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <xQueueGenericSendFromISR+0x6e>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <xQueueGenericSendFromISR+0x70>
 8005012:	2300      	movs	r3, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	623b      	str	r3, [r7, #32]
}
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800502e:	f001 ffab 	bl	8006f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005032:	f3ef 8211 	mrs	r2, BASEPRI
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	61fa      	str	r2, [r7, #28]
 8005048:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800504a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <xQueueGenericSendFromISR+0xbc>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d12f      	bne.n	80050c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005076:	f000 f991 	bl	800539c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800507a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d112      	bne.n	80050aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d016      	beq.n	80050ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	3324      	adds	r3, #36	; 0x24
 8005090:	4618      	mov	r0, r3
 8005092:	f000 ff77 	bl	8005f84 <xTaskRemoveFromEventList>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00e      	beq.n	80050ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e007      	b.n	80050ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050ae:	3301      	adds	r3, #1
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	b25a      	sxtb	r2, r3
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050ba:	2301      	movs	r3, #1
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80050be:	e001      	b.n	80050c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3740      	adds	r7, #64	; 0x40
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	; 0x30
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <xQueueReceive+0x30>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	623b      	str	r3, [r7, #32]
}
 8005108:	bf00      	nop
 800510a:	e7fe      	b.n	800510a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <xQueueReceive+0x3e>
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <xQueueReceive+0x42>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <xQueueReceive+0x44>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <xQueueReceive+0x5e>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	61fb      	str	r3, [r7, #28]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800513a:	f001 f8e5 	bl	8006308 <xTaskGetSchedulerState>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <xQueueReceive+0x6e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <xQueueReceive+0x72>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <xQueueReceive+0x74>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xQueueReceive+0x8e>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	61bb      	str	r3, [r7, #24]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800516a:	f001 fe2b 	bl	8006dc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01f      	beq.n	80051ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517e:	f000 f977 	bl	8005470 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	1e5a      	subs	r2, r3, #1
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00f      	beq.n	80051b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	3310      	adds	r3, #16
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fef4 	bl	8005f84 <xTaskRemoveFromEventList>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051a2:	4b3d      	ldr	r3, [pc, #244]	; (8005298 <xQueueReceive+0x1bc>)
 80051a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051b2:	f001 fe37 	bl	8006e24 <vPortExitCritical>
				return pdPASS;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e069      	b.n	800528e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d103      	bne.n	80051c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051c0:	f001 fe30 	bl	8006e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e062      	b.n	800528e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051ce:	f107 0310 	add.w	r3, r7, #16
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 ff3a 	bl	800604c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051d8:	2301      	movs	r3, #1
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051dc:	f001 fe22 	bl	8006e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051e0:	f000 fca6 	bl	8005b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051e4:	f001 fdee 	bl	8006dc4 <vPortEnterCritical>
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ee:	b25b      	sxtb	r3, r3
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f4:	d103      	bne.n	80051fe <xQueueReceive+0x122>
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005204:	b25b      	sxtb	r3, r3
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520a:	d103      	bne.n	8005214 <xQueueReceive+0x138>
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005214:	f001 fe06 	bl	8006e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005218:	1d3a      	adds	r2, r7, #4
 800521a:	f107 0310 	add.w	r3, r7, #16
 800521e:	4611      	mov	r1, r2
 8005220:	4618      	mov	r0, r3
 8005222:	f000 ff29 	bl	8006078 <xTaskCheckForTimeOut>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d123      	bne.n	8005274 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800522c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800522e:	f000 f997 	bl	8005560 <prvIsQueueEmpty>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d017      	beq.n	8005268 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	3324      	adds	r3, #36	; 0x24
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fe4f 	bl	8005ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005248:	f000 f938 	bl	80054bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800524c:	f000 fc7e 	bl	8005b4c <xTaskResumeAll>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d189      	bne.n	800516a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <xQueueReceive+0x1bc>)
 8005258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	e780      	b.n	800516a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526a:	f000 f927 	bl	80054bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800526e:	f000 fc6d 	bl	8005b4c <xTaskResumeAll>
 8005272:	e77a      	b.n	800516a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005276:	f000 f921 	bl	80054bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800527a:	f000 fc67 	bl	8005b4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800527e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005280:	f000 f96e 	bl	8005560 <prvIsQueueEmpty>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	f43f af6f 	beq.w	800516a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800528c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800528e:	4618      	mov	r0, r3
 8005290:	3730      	adds	r7, #48	; 0x30
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	; 0x38
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	623b      	str	r3, [r7, #32]
}
 80052c4:	bf00      	nop
 80052c6:	e7fe      	b.n	80052c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <xQueueReceiveFromISR+0x3a>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <xQueueReceiveFromISR+0x3e>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <xQueueReceiveFromISR+0x40>
 80052da:	2300      	movs	r3, #0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	61fb      	str	r3, [r7, #28]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052f6:	f001 fe47 	bl	8006f88 <vPortValidateInterruptPriority>
	__asm volatile
 80052fa:	f3ef 8211 	mrs	r2, BASEPRI
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	61ba      	str	r2, [r7, #24]
 8005310:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005312:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d02f      	beq.n	8005382 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005330:	f000 f89e 	bl	8005470 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800533c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d112      	bne.n	800536c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	3310      	adds	r3, #16
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fe16 	bl	8005f84 <xTaskRemoveFromEventList>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e007      	b.n	800537c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800536c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005370:	3301      	adds	r3, #1
 8005372:	b2db      	uxtb	r3, r3
 8005374:	b25a      	sxtb	r2, r3
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800537c:	2301      	movs	r3, #1
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
 8005380:	e001      	b.n	8005386 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005382:	2300      	movs	r3, #0
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	613b      	str	r3, [r7, #16]
	__asm volatile
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f383 8811 	msr	BASEPRI, r3
}
 8005390:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005394:	4618      	mov	r0, r3
 8005396:	3738      	adds	r7, #56	; 0x38
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d14d      	bne.n	800545e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 ffbc 	bl	8006344 <xTaskPriorityDisinherit>
 80053cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	e043      	b.n	800545e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d119      	bne.n	8005410 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6858      	ldr	r0, [r3, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	461a      	mov	r2, r3
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	f002 f834 	bl	8007454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	d32b      	bcc.n	800545e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	e026      	b.n	800545e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68d8      	ldr	r0, [r3, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	461a      	mov	r2, r3
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	f002 f81a 	bl	8007454 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	425b      	negs	r3, r3
 800542a:	441a      	add	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d207      	bcs.n	800544c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	425b      	negs	r3, r3
 8005446:	441a      	add	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d105      	bne.n	800545e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	3b01      	subs	r3, #1
 800545c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005466:	697b      	ldr	r3, [r7, #20]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d018      	beq.n	80054b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	441a      	add	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	d303      	bcc.n	80054a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68d9      	ldr	r1, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	461a      	mov	r2, r3
 80054ae:	6838      	ldr	r0, [r7, #0]
 80054b0:	f001 ffd0 	bl	8007454 <memcpy>
	}
}
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054c4:	f001 fc7e 	bl	8006dc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d0:	e011      	b.n	80054f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d012      	beq.n	8005500 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fd50 	bl	8005f84 <xTaskRemoveFromEventList>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054ea:	f000 fe27 	bl	800613c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	dce9      	bgt.n	80054d2 <prvUnlockQueue+0x16>
 80054fe:	e000      	b.n	8005502 <prvUnlockQueue+0x46>
					break;
 8005500:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800550a:	f001 fc8b 	bl	8006e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800550e:	f001 fc59 	bl	8006dc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005518:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800551a:	e011      	b.n	8005540 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d012      	beq.n	800554a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3310      	adds	r3, #16
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fd2b 	bl	8005f84 <xTaskRemoveFromEventList>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005534:	f000 fe02 	bl	800613c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005538:	7bbb      	ldrb	r3, [r7, #14]
 800553a:	3b01      	subs	r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005544:	2b00      	cmp	r3, #0
 8005546:	dce9      	bgt.n	800551c <prvUnlockQueue+0x60>
 8005548:	e000      	b.n	800554c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800554a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	22ff      	movs	r2, #255	; 0xff
 8005550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005554:	f001 fc66 	bl	8006e24 <vPortExitCritical>
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005568:	f001 fc2c 	bl	8006dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005574:	2301      	movs	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e001      	b.n	800557e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800557e:	f001 fc51 	bl	8006e24 <vPortExitCritical>

	return xReturn;
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005594:	f001 fc16 	bl	8006dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d102      	bne.n	80055aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e001      	b.n	80055ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ae:	f001 fc39 	bl	8006e24 <vPortExitCritical>

	return xReturn;
 80055b2:	68fb      	ldr	r3, [r7, #12]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e014      	b.n	80055f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055cc:	4a0f      	ldr	r2, [pc, #60]	; (800560c <vQueueAddToRegistry+0x50>)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055d8:	490c      	ldr	r1, [pc, #48]	; (800560c <vQueueAddToRegistry+0x50>)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <vQueueAddToRegistry+0x50>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055ee:	e006      	b.n	80055fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	d9e7      	bls.n	80055cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20000a48 	.word	0x20000a48

08005610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005620:	f001 fbd0 	bl	8006dc4 <vPortEnterCritical>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800562a:	b25b      	sxtb	r3, r3
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d103      	bne.n	800563a <vQueueWaitForMessageRestricted+0x2a>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005640:	b25b      	sxtb	r3, r3
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d103      	bne.n	8005650 <vQueueWaitForMessageRestricted+0x40>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005650:	f001 fbe8 	bl	8006e24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	3324      	adds	r3, #36	; 0x24
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fc61 	bl	8005f2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800566a:	6978      	ldr	r0, [r7, #20]
 800566c:	f7ff ff26 	bl	80054bc <prvUnlockQueue>
	}
 8005670:	bf00      	nop
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08e      	sub	sp, #56	; 0x38
 800567c:	af04      	add	r7, sp, #16
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	623b      	str	r3, [r7, #32]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xTaskCreateStatic+0x46>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61fb      	str	r3, [r7, #28]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056be:	23bc      	movs	r3, #188	; 0xbc
 80056c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2bbc      	cmp	r3, #188	; 0xbc
 80056c6:	d00a      	beq.n	80056de <xTaskCreateStatic+0x66>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	61bb      	str	r3, [r7, #24]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01e      	beq.n	8005724 <xTaskCreateStatic+0xac>
 80056e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056fe:	2300      	movs	r3, #0
 8005700:	9303      	str	r3, [sp, #12]
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	9302      	str	r3, [sp, #8]
 8005706:	f107 0314 	add.w	r3, r7, #20
 800570a:	9301      	str	r3, [sp, #4]
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f850 	bl	80057bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800571c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800571e:	f000 f8f3 	bl	8005908 <prvAddNewTaskToReadyList>
 8005722:	e001      	b.n	8005728 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005728:	697b      	ldr	r3, [r7, #20]
	}
 800572a:	4618      	mov	r0, r3
 800572c:	3728      	adds	r7, #40	; 0x28
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005732:	b580      	push	{r7, lr}
 8005734:	b08c      	sub	sp, #48	; 0x30
 8005736:	af04      	add	r7, sp, #16
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fc5e 	bl	8007008 <pvPortMalloc>
 800574c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00e      	beq.n	8005772 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005754:	20bc      	movs	r0, #188	; 0xbc
 8005756:	f001 fc57 	bl	8007008 <pvPortMalloc>
 800575a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
 8005768:	e005      	b.n	8005776 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	f001 fd18 	bl	80071a0 <vPortFree>
 8005770:	e001      	b.n	8005776 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d017      	beq.n	80057ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	2300      	movs	r3, #0
 8005788:	9303      	str	r3, [sp, #12]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	9302      	str	r3, [sp, #8]
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f80e 	bl	80057bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057a0:	69f8      	ldr	r0, [r7, #28]
 80057a2:	f000 f8b1 	bl	8005908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057a6:	2301      	movs	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	e002      	b.n	80057b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057ac:	f04f 33ff 	mov.w	r3, #4294967295
 80057b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057b2:	69bb      	ldr	r3, [r7, #24]
	}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	461a      	mov	r2, r3
 80057d4:	21a5      	movs	r1, #165	; 0xa5
 80057d6:	f001 fe4b 	bl	8007470 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057e4:	3b01      	subs	r3, #1
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f023 0307 	bic.w	r3, r3, #7
 80057f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01f      	beq.n	800585a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	e012      	b.n	8005846 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	7819      	ldrb	r1, [r3, #0]
 8005828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	3334      	adds	r3, #52	; 0x34
 8005830:	460a      	mov	r2, r1
 8005832:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d006      	beq.n	800584e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	2b0f      	cmp	r3, #15
 800584a:	d9e9      	bls.n	8005820 <prvInitialiseNewTask+0x64>
 800584c:	e000      	b.n	8005850 <prvInitialiseNewTask+0x94>
			{
				break;
 800584e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005858:	e003      	b.n	8005862 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	2b37      	cmp	r3, #55	; 0x37
 8005866:	d901      	bls.n	800586c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005868:	2337      	movs	r3, #55	; 0x37
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005870:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005876:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	2200      	movs	r2, #0
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff f8be 	bl	8004a04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	3318      	adds	r3, #24
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff f8b9 	bl	8004a04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005896:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	3354      	adds	r3, #84	; 0x54
 80058bc:	2260      	movs	r2, #96	; 0x60
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 fdd5 	bl	8007470 <memset>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <prvInitialiseNewTask+0x140>)
 80058ca:	659a      	str	r2, [r3, #88]	; 0x58
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <prvInitialiseNewTask+0x144>)
 80058d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	4a0b      	ldr	r2, [pc, #44]	; (8005904 <prvInitialiseNewTask+0x148>)
 80058d6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	69b8      	ldr	r0, [r7, #24]
 80058de:	f001 f941 	bl	8006b64 <pxPortInitialiseStack>
 80058e2:	4602      	mov	r2, r0
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058f4:	bf00      	nop
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	0800a1ac 	.word	0x0800a1ac
 8005900:	0800a1cc 	.word	0x0800a1cc
 8005904:	0800a18c 	.word	0x0800a18c

08005908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005910:	f001 fa58 	bl	8006dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005914:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	4a2c      	ldr	r2, [pc, #176]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 800591c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800591e:	4b2c      	ldr	r3, [pc, #176]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005926:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d110      	bne.n	8005956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005934:	f000 fc26 	bl	8006184 <prvInitialiseTaskLists>
 8005938:	e00d      	b.n	8005956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <prvAddNewTaskToReadyList+0xcc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005942:	4b23      	ldr	r3, [pc, #140]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	429a      	cmp	r2, r3
 800594e:	d802      	bhi.n	8005956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005950:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005956:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	4a1e      	ldr	r2, [pc, #120]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 800595e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005960:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <prvAddNewTaskToReadyList+0xd4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d903      	bls.n	800597c <prvAddNewTaskToReadyList+0x74>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a18      	ldr	r2, [pc, #96]	; (80059dc <prvAddNewTaskToReadyList+0xd4>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <prvAddNewTaskToReadyList+0xd8>)
 800598a:	441a      	add	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f7ff f843 	bl	8004a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005998:	f001 fa44 	bl	8006e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <prvAddNewTaskToReadyList+0xcc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d207      	bcs.n	80059c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <prvAddNewTaskToReadyList+0xdc>)
 80059b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000f5c 	.word	0x20000f5c
 80059d0:	20000a88 	.word	0x20000a88
 80059d4:	20000f68 	.word	0x20000f68
 80059d8:	20000f78 	.word	0x20000f78
 80059dc:	20000f64 	.word	0x20000f64
 80059e0:	20000a8c 	.word	0x20000a8c
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059fa:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <vTaskDelay+0x60>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <vTaskDelay+0x30>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60bb      	str	r3, [r7, #8]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a18:	f000 f88a 	bl	8005b30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fcfe 	bl	8006420 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a24:	f000 f892 	bl	8005b4c <xTaskResumeAll>
 8005a28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <vTaskDelay+0x64>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000f84 	.word	0x20000f84
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a5e:	463a      	mov	r2, r7
 8005a60:	1d39      	adds	r1, r7, #4
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe ff78 	bl	800495c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	9202      	str	r2, [sp, #8]
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	2300      	movs	r3, #0
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	460a      	mov	r2, r1
 8005a7e:	4924      	ldr	r1, [pc, #144]	; (8005b10 <vTaskStartScheduler+0xc0>)
 8005a80:	4824      	ldr	r0, [pc, #144]	; (8005b14 <vTaskStartScheduler+0xc4>)
 8005a82:	f7ff fdf9 	bl	8005678 <xTaskCreateStatic>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4a23      	ldr	r2, [pc, #140]	; (8005b18 <vTaskStartScheduler+0xc8>)
 8005a8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a8c:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <vTaskStartScheduler+0xc8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e001      	b.n	8005a9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d102      	bne.n	8005aaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005aa4:	f000 fd10 	bl	80064c8 <xTimerCreateTimerTask>
 8005aa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d11b      	bne.n	8005ae8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	613b      	str	r3, [r7, #16]
}
 8005ac2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <vTaskStartScheduler+0xcc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3354      	adds	r3, #84	; 0x54
 8005aca:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <vTaskStartScheduler+0xd0>)
 8005acc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <vTaskStartScheduler+0xd4>)
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <vTaskStartScheduler+0xd8>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <vTaskStartScheduler+0xdc>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ae2:	f001 f8cd 	bl	8006c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ae6:	e00e      	b.n	8005b06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d10a      	bne.n	8005b06 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <vTaskStartScheduler+0xb4>
}
 8005b06:	bf00      	nop
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	08007834 	.word	0x08007834
 8005b14:	08006155 	.word	0x08006155
 8005b18:	20000f80 	.word	0x20000f80
 8005b1c:	20000a88 	.word	0x20000a88
 8005b20:	20000078 	.word	0x20000078
 8005b24:	20000f7c 	.word	0x20000f7c
 8005b28:	20000f68 	.word	0x20000f68
 8005b2c:	20000f60 	.word	0x20000f60

08005b30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <vTaskSuspendAll+0x18>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <vTaskSuspendAll+0x18>)
 8005b3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b3e:	bf00      	nop
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20000f84 	.word	0x20000f84

08005b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b5a:	4b42      	ldr	r3, [pc, #264]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	603b      	str	r3, [r7, #0]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b78:	f001 f924 	bl	8006dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b7c:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b86:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d162      	bne.n	8005c54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b8e:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <xTaskResumeAll+0x11c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d05e      	beq.n	8005c54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b96:	e02f      	b.n	8005bf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b98:	4b34      	ldr	r3, [pc, #208]	; (8005c6c <xTaskResumeAll+0x120>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3318      	adds	r3, #24
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe ff97 	bl	8004ad8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe ff92 	bl	8004ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	4b2d      	ldr	r3, [pc, #180]	; (8005c70 <xTaskResumeAll+0x124>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d903      	bls.n	8005bc8 <xTaskResumeAll+0x7c>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <xTaskResumeAll+0x124>)
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <xTaskResumeAll+0x128>)
 8005bd6:	441a      	add	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7fe ff1d 	bl	8004a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <xTaskResumeAll+0x12c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bf2:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <xTaskResumeAll+0x130>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <xTaskResumeAll+0x120>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1cb      	bne.n	8005b98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c06:	f000 fb5f 	bl	80062c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <xTaskResumeAll+0x134>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d010      	beq.n	8005c38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c16:	f000 f847 	bl	8005ca8 <xTaskIncrementTick>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <xTaskResumeAll+0x130>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f1      	bne.n	8005c16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c32:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <xTaskResumeAll+0x134>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <xTaskResumeAll+0x130>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <xTaskResumeAll+0x138>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c54:	f001 f8e6 	bl	8006e24 <vPortExitCritical>

	return xAlreadyYielded;
 8005c58:	68bb      	ldr	r3, [r7, #8]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000f84 	.word	0x20000f84
 8005c68:	20000f5c 	.word	0x20000f5c
 8005c6c:	20000f1c 	.word	0x20000f1c
 8005c70:	20000f64 	.word	0x20000f64
 8005c74:	20000a8c 	.word	0x20000a8c
 8005c78:	20000a88 	.word	0x20000a88
 8005c7c:	20000f70 	.word	0x20000f70
 8005c80:	20000f6c 	.word	0x20000f6c
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <xTaskGetTickCount+0x1c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c94:	687b      	ldr	r3, [r7, #4]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000f60 	.word	0x20000f60

08005ca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb2:	4b4f      	ldr	r3, [pc, #316]	; (8005df0 <xTaskIncrementTick+0x148>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f040 808f 	bne.w	8005dda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cbc:	4b4d      	ldr	r3, [pc, #308]	; (8005df4 <xTaskIncrementTick+0x14c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cc4:	4a4b      	ldr	r2, [pc, #300]	; (8005df4 <xTaskIncrementTick+0x14c>)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d120      	bne.n	8005d12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cd0:	4b49      	ldr	r3, [pc, #292]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	603b      	str	r3, [r7, #0]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <xTaskIncrementTick+0x46>
 8005cf0:	4b41      	ldr	r3, [pc, #260]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	4b41      	ldr	r3, [pc, #260]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a3f      	ldr	r2, [pc, #252]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4a3f      	ldr	r2, [pc, #252]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <xTaskIncrementTick+0x158>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	4a3d      	ldr	r2, [pc, #244]	; (8005e00 <xTaskIncrementTick+0x158>)
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	f000 fadb 	bl	80062c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d12:	4b3c      	ldr	r3, [pc, #240]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d349      	bcc.n	8005db0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d1c:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d26:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d28:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2c:	601a      	str	r2, [r3, #0]
					break;
 8005d2e:	e03f      	b.n	8005db0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d30:	4b31      	ldr	r3, [pc, #196]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d203      	bcs.n	8005d50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d48:	4a2e      	ldr	r2, [pc, #184]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d4e:	e02f      	b.n	8005db0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe febf 	bl	8004ad8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d004      	beq.n	8005d6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	3318      	adds	r3, #24
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe feb6 	bl	8004ad8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <xTaskIncrementTick+0x160>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d903      	bls.n	8005d80 <xTaskIncrementTick+0xd8>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	4a22      	ldr	r2, [pc, #136]	; (8005e08 <xTaskIncrementTick+0x160>)
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <xTaskIncrementTick+0x164>)
 8005d8e:	441a      	add	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7fe fe41 	bl	8004a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <xTaskIncrementTick+0x168>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3b8      	bcc.n	8005d1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dae:	e7b5      	b.n	8005d1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005db0:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <xTaskIncrementTick+0x168>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	4915      	ldr	r1, [pc, #84]	; (8005e0c <xTaskIncrementTick+0x164>)
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d901      	bls.n	8005dcc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005dcc:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <xTaskIncrementTick+0x16c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	e004      	b.n	8005de4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <xTaskIncrementTick+0x170>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3301      	adds	r3, #1
 8005de0:	4a0d      	ldr	r2, [pc, #52]	; (8005e18 <xTaskIncrementTick+0x170>)
 8005de2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005de4:	697b      	ldr	r3, [r7, #20]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000f84 	.word	0x20000f84
 8005df4:	20000f60 	.word	0x20000f60
 8005df8:	20000f14 	.word	0x20000f14
 8005dfc:	20000f18 	.word	0x20000f18
 8005e00:	20000f74 	.word	0x20000f74
 8005e04:	20000f7c 	.word	0x20000f7c
 8005e08:	20000f64 	.word	0x20000f64
 8005e0c:	20000a8c 	.word	0x20000a8c
 8005e10:	20000a88 	.word	0x20000a88
 8005e14:	20000f70 	.word	0x20000f70
 8005e18:	20000f6c 	.word	0x20000f6c

08005e1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e22:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <vTaskSwitchContext+0xb0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e2a:	4b29      	ldr	r3, [pc, #164]	; (8005ed0 <vTaskSwitchContext+0xb4>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e30:	e046      	b.n	8005ec0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005e32:	4b27      	ldr	r3, [pc, #156]	; (8005ed0 <vTaskSwitchContext+0xb4>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e38:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <vTaskSwitchContext+0xb8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e010      	b.n	8005e62 <vTaskSwitchContext+0x46>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <vTaskSwitchContext+0x40>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	607b      	str	r3, [r7, #4]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <vTaskSwitchContext+0x3e>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	491d      	ldr	r1, [pc, #116]	; (8005ed8 <vTaskSwitchContext+0xbc>)
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0e4      	beq.n	8005e40 <vTaskSwitchContext+0x24>
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <vTaskSwitchContext+0xbc>)
 8005e82:	4413      	add	r3, r2
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	3308      	adds	r3, #8
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d104      	bne.n	8005ea6 <vTaskSwitchContext+0x8a>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	4a0b      	ldr	r2, [pc, #44]	; (8005edc <vTaskSwitchContext+0xc0>)
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4a08      	ldr	r2, [pc, #32]	; (8005ed4 <vTaskSwitchContext+0xb8>)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eb6:	4b09      	ldr	r3, [pc, #36]	; (8005edc <vTaskSwitchContext+0xc0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3354      	adds	r3, #84	; 0x54
 8005ebc:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <vTaskSwitchContext+0xc4>)
 8005ebe:	6013      	str	r3, [r2, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	20000f84 	.word	0x20000f84
 8005ed0:	20000f70 	.word	0x20000f70
 8005ed4:	20000f64 	.word	0x20000f64
 8005ed8:	20000a8c 	.word	0x20000a8c
 8005edc:	20000a88 	.word	0x20000a88
 8005ee0:	20000078 	.word	0x20000078

08005ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	60fb      	str	r3, [r7, #12]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f0a:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <vTaskPlaceOnEventList+0x44>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3318      	adds	r3, #24
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fe fda7 	bl	8004a66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f18:	2101      	movs	r1, #1
 8005f1a:	6838      	ldr	r0, [r7, #0]
 8005f1c:	f000 fa80 	bl	8006420 <prvAddCurrentTaskToDelayedList>
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000a88 	.word	0x20000a88

08005f2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	617b      	str	r3, [r7, #20]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3318      	adds	r3, #24
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7fe fd5e 	bl	8004a1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f68:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	68b8      	ldr	r0, [r7, #8]
 8005f72:	f000 fa55 	bl	8006420 <prvAddCurrentTaskToDelayedList>
	}
 8005f76:	bf00      	nop
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000a88 	.word	0x20000a88

08005f84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	60fb      	str	r3, [r7, #12]
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	3318      	adds	r3, #24
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fe fd8f 	bl	8004ad8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fba:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <xTaskRemoveFromEventList+0xb0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d11d      	bne.n	8005ffe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fe fd86 	bl	8004ad8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	4b19      	ldr	r3, [pc, #100]	; (8006038 <xTaskRemoveFromEventList+0xb4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d903      	bls.n	8005fe0 <xTaskRemoveFromEventList+0x5c>
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	4a16      	ldr	r2, [pc, #88]	; (8006038 <xTaskRemoveFromEventList+0xb4>)
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4a13      	ldr	r2, [pc, #76]	; (800603c <xTaskRemoveFromEventList+0xb8>)
 8005fee:	441a      	add	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f7fe fd11 	bl	8004a1e <vListInsertEnd>
 8005ffc:	e005      	b.n	800600a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3318      	adds	r3, #24
 8006002:	4619      	mov	r1, r3
 8006004:	480e      	ldr	r0, [pc, #56]	; (8006040 <xTaskRemoveFromEventList+0xbc>)
 8006006:	f7fe fd0a 	bl	8004a1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <xTaskRemoveFromEventList+0xc0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	429a      	cmp	r2, r3
 8006016:	d905      	bls.n	8006024 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800601c:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <xTaskRemoveFromEventList+0xc4>)
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e001      	b.n	8006028 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006028:	697b      	ldr	r3, [r7, #20]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000f84 	.word	0x20000f84
 8006038:	20000f64 	.word	0x20000f64
 800603c:	20000a8c 	.word	0x20000a8c
 8006040:	20000f1c 	.word	0x20000f1c
 8006044:	20000a88 	.word	0x20000a88
 8006048:	20000f70 	.word	0x20000f70

0800604c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006054:	4b06      	ldr	r3, [pc, #24]	; (8006070 <vTaskInternalSetTimeOutState+0x24>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <vTaskInternalSetTimeOutState+0x28>)
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	605a      	str	r2, [r3, #4]
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	20000f74 	.word	0x20000f74
 8006074:	20000f60 	.word	0x20000f60

08006078 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	613b      	str	r3, [r7, #16]
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	60fb      	str	r3, [r7, #12]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060ba:	f000 fe83 	bl	8006dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060be:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <xTaskCheckForTimeOut+0xbc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d102      	bne.n	80060de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060d8:	2300      	movs	r3, #0
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	e023      	b.n	8006126 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b15      	ldr	r3, [pc, #84]	; (8006138 <xTaskCheckForTimeOut+0xc0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d007      	beq.n	80060fa <xTaskCheckForTimeOut+0x82>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d302      	bcc.n	80060fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e015      	b.n	8006126 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	429a      	cmp	r2, r3
 8006102:	d20b      	bcs.n	800611c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	1ad2      	subs	r2, r2, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff ff9b 	bl	800604c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	e004      	b.n	8006126 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006122:	2301      	movs	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006126:	f000 fe7d 	bl	8006e24 <vPortExitCritical>

	return xReturn;
 800612a:	69fb      	ldr	r3, [r7, #28]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000f60 	.word	0x20000f60
 8006138:	20000f74 	.word	0x20000f74

0800613c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006140:	4b03      	ldr	r3, [pc, #12]	; (8006150 <vTaskMissedYield+0x14>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]
}
 8006146:	bf00      	nop
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	20000f70 	.word	0x20000f70

08006154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800615c:	f000 f852 	bl	8006204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <prvIdleTask+0x28>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d9f9      	bls.n	800615c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006168:	4b05      	ldr	r3, [pc, #20]	; (8006180 <prvIdleTask+0x2c>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006178:	e7f0      	b.n	800615c <prvIdleTask+0x8>
 800617a:	bf00      	nop
 800617c:	20000a8c 	.word	0x20000a8c
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800618a:	2300      	movs	r3, #0
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	e00c      	b.n	80061aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4a12      	ldr	r2, [pc, #72]	; (80061e4 <prvInitialiseTaskLists+0x60>)
 800619c:	4413      	add	r3, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fc10 	bl	80049c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3301      	adds	r3, #1
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b37      	cmp	r3, #55	; 0x37
 80061ae:	d9ef      	bls.n	8006190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061b0:	480d      	ldr	r0, [pc, #52]	; (80061e8 <prvInitialiseTaskLists+0x64>)
 80061b2:	f7fe fc07 	bl	80049c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061b6:	480d      	ldr	r0, [pc, #52]	; (80061ec <prvInitialiseTaskLists+0x68>)
 80061b8:	f7fe fc04 	bl	80049c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061bc:	480c      	ldr	r0, [pc, #48]	; (80061f0 <prvInitialiseTaskLists+0x6c>)
 80061be:	f7fe fc01 	bl	80049c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061c2:	480c      	ldr	r0, [pc, #48]	; (80061f4 <prvInitialiseTaskLists+0x70>)
 80061c4:	f7fe fbfe 	bl	80049c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061c8:	480b      	ldr	r0, [pc, #44]	; (80061f8 <prvInitialiseTaskLists+0x74>)
 80061ca:	f7fe fbfb 	bl	80049c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ce:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <prvInitialiseTaskLists+0x78>)
 80061d0:	4a05      	ldr	r2, [pc, #20]	; (80061e8 <prvInitialiseTaskLists+0x64>)
 80061d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <prvInitialiseTaskLists+0x7c>)
 80061d6:	4a05      	ldr	r2, [pc, #20]	; (80061ec <prvInitialiseTaskLists+0x68>)
 80061d8:	601a      	str	r2, [r3, #0]
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000a8c 	.word	0x20000a8c
 80061e8:	20000eec 	.word	0x20000eec
 80061ec:	20000f00 	.word	0x20000f00
 80061f0:	20000f1c 	.word	0x20000f1c
 80061f4:	20000f30 	.word	0x20000f30
 80061f8:	20000f48 	.word	0x20000f48
 80061fc:	20000f14 	.word	0x20000f14
 8006200:	20000f18 	.word	0x20000f18

08006204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800620a:	e019      	b.n	8006240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800620c:	f000 fdda 	bl	8006dc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006210:	4b10      	ldr	r3, [pc, #64]	; (8006254 <prvCheckTasksWaitingTermination+0x50>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe fc5b 	bl	8004ad8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006222:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <prvCheckTasksWaitingTermination+0x54>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3b01      	subs	r3, #1
 8006228:	4a0b      	ldr	r2, [pc, #44]	; (8006258 <prvCheckTasksWaitingTermination+0x54>)
 800622a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <prvCheckTasksWaitingTermination+0x58>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3b01      	subs	r3, #1
 8006232:	4a0a      	ldr	r2, [pc, #40]	; (800625c <prvCheckTasksWaitingTermination+0x58>)
 8006234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006236:	f000 fdf5 	bl	8006e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f810 	bl	8006260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <prvCheckTasksWaitingTermination+0x58>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e1      	bne.n	800620c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000f30 	.word	0x20000f30
 8006258:	20000f5c 	.word	0x20000f5c
 800625c:	20000f44 	.word	0x20000f44

08006260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3354      	adds	r3, #84	; 0x54
 800626c:	4618      	mov	r0, r3
 800626e:	f001 f9f5 	bl	800765c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006278:	2b00      	cmp	r3, #0
 800627a:	d108      	bne.n	800628e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	4618      	mov	r0, r3
 8006282:	f000 ff8d 	bl	80071a0 <vPortFree>
				vPortFree( pxTCB );
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 ff8a 	bl	80071a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800628c:	e018      	b.n	80062c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006294:	2b01      	cmp	r3, #1
 8006296:	d103      	bne.n	80062a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 ff81 	bl	80071a0 <vPortFree>
	}
 800629e:	e00f      	b.n	80062c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d00a      	beq.n	80062c0 <prvDeleteTCB+0x60>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	60fb      	str	r3, [r7, #12]
}
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <prvDeleteTCB+0x5e>
	}
 80062c0:	bf00      	nop
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <prvResetNextTaskUnblockTime+0x38>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <prvResetNextTaskUnblockTime+0x3c>)
 80062da:	f04f 32ff 	mov.w	r2, #4294967295
 80062de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062e0:	e008      	b.n	80062f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e2:	4b07      	ldr	r3, [pc, #28]	; (8006300 <prvResetNextTaskUnblockTime+0x38>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	4a04      	ldr	r2, [pc, #16]	; (8006304 <prvResetNextTaskUnblockTime+0x3c>)
 80062f2:	6013      	str	r3, [r2, #0]
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	20000f14 	.word	0x20000f14
 8006304:	20000f7c 	.word	0x20000f7c

08006308 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800630e:	4b0b      	ldr	r3, [pc, #44]	; (800633c <xTaskGetSchedulerState+0x34>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006316:	2301      	movs	r3, #1
 8006318:	607b      	str	r3, [r7, #4]
 800631a:	e008      	b.n	800632e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800631c:	4b08      	ldr	r3, [pc, #32]	; (8006340 <xTaskGetSchedulerState+0x38>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d102      	bne.n	800632a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006324:	2302      	movs	r3, #2
 8006326:	607b      	str	r3, [r7, #4]
 8006328:	e001      	b.n	800632e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800632a:	2300      	movs	r3, #0
 800632c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800632e:	687b      	ldr	r3, [r7, #4]
	}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20000f68 	.word	0x20000f68
 8006340:	20000f84 	.word	0x20000f84

08006344 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d056      	beq.n	8006408 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800635a:	4b2e      	ldr	r3, [pc, #184]	; (8006414 <xTaskPriorityDisinherit+0xd0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	429a      	cmp	r2, r3
 8006362:	d00a      	beq.n	800637a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	60fb      	str	r3, [r7, #12]
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	60bb      	str	r3, [r7, #8]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639c:	1e5a      	subs	r2, r3, #1
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d02c      	beq.n	8006408 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d128      	bne.n	8006408 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3304      	adds	r3, #4
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fe fb8c 	bl	8004ad8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <xTaskPriorityDisinherit+0xd4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d903      	bls.n	80063e8 <xTaskPriorityDisinherit+0xa4>
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4a0c      	ldr	r2, [pc, #48]	; (8006418 <xTaskPriorityDisinherit+0xd4>)
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4a09      	ldr	r2, [pc, #36]	; (800641c <xTaskPriorityDisinherit+0xd8>)
 80063f6:	441a      	add	r2, r3
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f7fe fb0d 	bl	8004a1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006404:	2301      	movs	r3, #1
 8006406:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006408:	697b      	ldr	r3, [r7, #20]
	}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000a88 	.word	0x20000a88
 8006418:	20000f64 	.word	0x20000f64
 800641c:	20000a8c 	.word	0x20000a8c

08006420 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800642a:	4b21      	ldr	r3, [pc, #132]	; (80064b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006430:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3304      	adds	r3, #4
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fb4e 	bl	8004ad8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d10a      	bne.n	800645a <prvAddCurrentTaskToDelayedList+0x3a>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800644a:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3304      	adds	r3, #4
 8006450:	4619      	mov	r1, r3
 8006452:	4819      	ldr	r0, [pc, #100]	; (80064b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006454:	f7fe fae3 	bl	8004a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006458:	e026      	b.n	80064a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4413      	add	r3, r2
 8006460:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006462:	4b14      	ldr	r3, [pc, #80]	; (80064b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	429a      	cmp	r2, r3
 8006470:	d209      	bcs.n	8006486 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3304      	adds	r3, #4
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f7fe faf1 	bl	8004a66 <vListInsert>
}
 8006484:	e010      	b.n	80064a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006486:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f7fe fae7 	bl	8004a66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d202      	bcs.n	80064a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064a2:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	6013      	str	r3, [r2, #0]
}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000f60 	.word	0x20000f60
 80064b4:	20000a88 	.word	0x20000a88
 80064b8:	20000f48 	.word	0x20000f48
 80064bc:	20000f18 	.word	0x20000f18
 80064c0:	20000f14 	.word	0x20000f14
 80064c4:	20000f7c 	.word	0x20000f7c

080064c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064d2:	f000 fb07 	bl	8006ae4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064d6:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <xTimerCreateTimerTask+0x80>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d021      	beq.n	8006522 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064e6:	1d3a      	adds	r2, r7, #4
 80064e8:	f107 0108 	add.w	r1, r7, #8
 80064ec:	f107 030c 	add.w	r3, r7, #12
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe fa4d 	bl	8004990 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	9202      	str	r2, [sp, #8]
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	2302      	movs	r3, #2
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	460a      	mov	r2, r1
 8006508:	4910      	ldr	r1, [pc, #64]	; (800654c <xTimerCreateTimerTask+0x84>)
 800650a:	4811      	ldr	r0, [pc, #68]	; (8006550 <xTimerCreateTimerTask+0x88>)
 800650c:	f7ff f8b4 	bl	8005678 <xTaskCreateStatic>
 8006510:	4603      	mov	r3, r0
 8006512:	4a10      	ldr	r2, [pc, #64]	; (8006554 <xTimerCreateTimerTask+0x8c>)
 8006514:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006516:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <xTimerCreateTimerTask+0x8c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800651e:	2301      	movs	r3, #1
 8006520:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	613b      	str	r3, [r7, #16]
}
 800653a:	bf00      	nop
 800653c:	e7fe      	b.n	800653c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800653e:	697b      	ldr	r3, [r7, #20]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000fb8 	.word	0x20000fb8
 800654c:	0800783c 	.word	0x0800783c
 8006550:	0800668d 	.word	0x0800668d
 8006554:	20000fbc 	.word	0x20000fbc

08006558 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	623b      	str	r3, [r7, #32]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006586:	4b1a      	ldr	r3, [pc, #104]	; (80065f0 <xTimerGenericCommand+0x98>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d02a      	beq.n	80065e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b05      	cmp	r3, #5
 800659e:	dc18      	bgt.n	80065d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065a0:	f7ff feb2 	bl	8006308 <xTaskGetSchedulerState>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d109      	bne.n	80065be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065aa:	4b11      	ldr	r3, [pc, #68]	; (80065f0 <xTimerGenericCommand+0x98>)
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	f107 0110 	add.w	r1, r7, #16
 80065b2:	2300      	movs	r3, #0
 80065b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b6:	f7fe fbf7 	bl	8004da8 <xQueueGenericSend>
 80065ba:	6278      	str	r0, [r7, #36]	; 0x24
 80065bc:	e012      	b.n	80065e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065be:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <xTimerGenericCommand+0x98>)
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	f107 0110 	add.w	r1, r7, #16
 80065c6:	2300      	movs	r3, #0
 80065c8:	2200      	movs	r2, #0
 80065ca:	f7fe fbed 	bl	8004da8 <xQueueGenericSend>
 80065ce:	6278      	str	r0, [r7, #36]	; 0x24
 80065d0:	e008      	b.n	80065e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80065d2:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <xTimerGenericCommand+0x98>)
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	f107 0110 	add.w	r1, r7, #16
 80065da:	2300      	movs	r3, #0
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	f7fe fce1 	bl	8004fa4 <xQueueGenericSendFromISR>
 80065e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3728      	adds	r7, #40	; 0x28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000fb8 	.word	0x20000fb8

080065f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fe:	4b22      	ldr	r3, [pc, #136]	; (8006688 <prvProcessExpiredTimer+0x94>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	3304      	adds	r3, #4
 800660c:	4618      	mov	r0, r3
 800660e:	f7fe fa63 	bl	8004ad8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d022      	beq.n	8006666 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	699a      	ldr	r2, [r3, #24]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	18d1      	adds	r1, r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	6978      	ldr	r0, [r7, #20]
 800662e:	f000 f8d1 	bl	80067d4 <prvInsertTimerInActiveList>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01f      	beq.n	8006678 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006638:	2300      	movs	r3, #0
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	2300      	movs	r3, #0
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	2100      	movs	r1, #0
 8006642:	6978      	ldr	r0, [r7, #20]
 8006644:	f7ff ff88 	bl	8006558 <xTimerGenericCommand>
 8006648:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d113      	bne.n	8006678 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	60fb      	str	r3, [r7, #12]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	b2da      	uxtb	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	6978      	ldr	r0, [r7, #20]
 800667e:	4798      	blx	r3
}
 8006680:	bf00      	nop
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000fb0 	.word	0x20000fb0

0800668c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006694:	f107 0308 	add.w	r3, r7, #8
 8006698:	4618      	mov	r0, r3
 800669a:	f000 f857 	bl	800674c <prvGetNextExpireTime>
 800669e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4619      	mov	r1, r3
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f803 	bl	80066b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066aa:	f000 f8d5 	bl	8006858 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066ae:	e7f1      	b.n	8006694 <prvTimerTask+0x8>

080066b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066ba:	f7ff fa39 	bl	8005b30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066be:	f107 0308 	add.w	r3, r7, #8
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f866 	bl	8006794 <prvSampleTimeNow>
 80066c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d130      	bne.n	8006732 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <prvProcessTimerOrBlockTask+0x3c>
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d806      	bhi.n	80066ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066de:	f7ff fa35 	bl	8005b4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066e2:	68f9      	ldr	r1, [r7, #12]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff ff85 	bl	80065f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066ea:	e024      	b.n	8006736 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d008      	beq.n	8006704 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066f2:	4b13      	ldr	r3, [pc, #76]	; (8006740 <prvProcessTimerOrBlockTask+0x90>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <prvProcessTimerOrBlockTask+0x50>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <prvProcessTimerOrBlockTask+0x52>
 8006700:	2300      	movs	r3, #0
 8006702:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006704:	4b0f      	ldr	r3, [pc, #60]	; (8006744 <prvProcessTimerOrBlockTask+0x94>)
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	4619      	mov	r1, r3
 8006712:	f7fe ff7d 	bl	8005610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006716:	f7ff fa19 	bl	8005b4c <xTaskResumeAll>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006720:	4b09      	ldr	r3, [pc, #36]	; (8006748 <prvProcessTimerOrBlockTask+0x98>)
 8006722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	f3bf 8f6f 	isb	sy
}
 8006730:	e001      	b.n	8006736 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006732:	f7ff fa0b 	bl	8005b4c <xTaskResumeAll>
}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000fb4 	.word	0x20000fb4
 8006744:	20000fb8 	.word	0x20000fb8
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006754:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <prvGetNextExpireTime+0x44>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <prvGetNextExpireTime+0x16>
 800675e:	2201      	movs	r2, #1
 8006760:	e000      	b.n	8006764 <prvGetNextExpireTime+0x18>
 8006762:	2200      	movs	r2, #0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d105      	bne.n	800677c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <prvGetNextExpireTime+0x44>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e001      	b.n	8006780 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006780:	68fb      	ldr	r3, [r7, #12]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000fb0 	.word	0x20000fb0

08006794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800679c:	f7ff fa74 	bl	8005c88 <xTaskGetTickCount>
 80067a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067a2:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <prvSampleTimeNow+0x3c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d205      	bcs.n	80067b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067ac:	f000 f936 	bl	8006a1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	e002      	b.n	80067be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067be:	4a04      	ldr	r2, [pc, #16]	; (80067d0 <prvSampleTimeNow+0x3c>)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067c4:	68fb      	ldr	r3, [r7, #12]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000fc0 	.word	0x20000fc0

080067d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d812      	bhi.n	8006820 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	429a      	cmp	r2, r3
 8006806:	d302      	bcc.n	800680e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006808:	2301      	movs	r3, #1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e01b      	b.n	8006846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800680e:	4b10      	ldr	r3, [pc, #64]	; (8006850 <prvInsertTimerInActiveList+0x7c>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3304      	adds	r3, #4
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f7fe f924 	bl	8004a66 <vListInsert>
 800681e:	e012      	b.n	8006846 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d206      	bcs.n	8006836 <prvInsertTimerInActiveList+0x62>
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d302      	bcc.n	8006836 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006830:	2301      	movs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	e007      	b.n	8006846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006836:	4b07      	ldr	r3, [pc, #28]	; (8006854 <prvInsertTimerInActiveList+0x80>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3304      	adds	r3, #4
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f7fe f910 	bl	8004a66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006846:	697b      	ldr	r3, [r7, #20]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20000fb4 	.word	0x20000fb4
 8006854:	20000fb0 	.word	0x20000fb0

08006858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08e      	sub	sp, #56	; 0x38
 800685c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800685e:	e0ca      	b.n	80069f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	da18      	bge.n	8006898 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006866:	1d3b      	adds	r3, r7, #4
 8006868:	3304      	adds	r3, #4
 800686a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	61fb      	str	r3, [r7, #28]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688e:	6850      	ldr	r0, [r2, #4]
 8006890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006892:	6892      	ldr	r2, [r2, #8]
 8006894:	4611      	mov	r1, r2
 8006896:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f2c0 80aa 	blt.w	80069f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d004      	beq.n	80068b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	3304      	adds	r3, #4
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe f911 	bl	8004ad8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068b6:	463b      	mov	r3, r7
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff ff6b 	bl	8006794 <prvSampleTimeNow>
 80068be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	f200 8097 	bhi.w	80069f6 <prvProcessReceivedCommands+0x19e>
 80068c8:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <prvProcessReceivedCommands+0x78>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	080068f9 	.word	0x080068f9
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	080068f9 	.word	0x080068f9
 80068dc:	0800696d 	.word	0x0800696d
 80068e0:	08006981 	.word	0x08006981
 80068e4:	080069cb 	.word	0x080069cb
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	080068f9 	.word	0x080068f9
 80068f0:	0800696d 	.word	0x0800696d
 80068f4:	08006981 	.word	0x08006981
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	b2da      	uxtb	r2, r3
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	18d1      	adds	r1, r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006918:	f7ff ff5c 	bl	80067d4 <prvInsertTimerInActiveList>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d069      	beq.n	80069f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006928:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d05e      	beq.n	80069f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	441a      	add	r2, r3
 8006940:	2300      	movs	r3, #0
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	2100      	movs	r1, #0
 8006948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800694a:	f7ff fe05 	bl	8006558 <xTimerGenericCommand>
 800694e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d14f      	bne.n	80069f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	61bb      	str	r3, [r7, #24]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006972:	f023 0301 	bic.w	r3, r3, #1
 8006976:	b2da      	uxtb	r2, r3
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800697e:	e03a      	b.n	80069f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	b2da      	uxtb	r2, r3
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	617b      	str	r3, [r7, #20]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	18d1      	adds	r1, r2, r3
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069c4:	f7ff ff06 	bl	80067d4 <prvInsertTimerInActiveList>
					break;
 80069c8:	e015      	b.n	80069f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d103      	bne.n	80069e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80069d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069da:	f000 fbe1 	bl	80071a0 <vPortFree>
 80069de:	e00a      	b.n	80069f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e6:	f023 0301 	bic.w	r3, r3, #1
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069f2:	e000      	b.n	80069f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80069f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069f6:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <prvProcessReceivedCommands+0x1c0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	1d39      	adds	r1, r7, #4
 80069fc:	2200      	movs	r2, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fb6c 	bl	80050dc <xQueueReceive>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f47f af2a 	bne.w	8006860 <prvProcessReceivedCommands+0x8>
	}
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	3730      	adds	r7, #48	; 0x30
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000fb8 	.word	0x20000fb8

08006a1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a22:	e048      	b.n	8006ab6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a24:	4b2d      	ldr	r3, [pc, #180]	; (8006adc <prvSwitchTimerLists+0xc0>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a2e:	4b2b      	ldr	r3, [pc, #172]	; (8006adc <prvSwitchTimerLists+0xc0>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe f84b 	bl	8004ad8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d02e      	beq.n	8006ab6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d90e      	bls.n	8006a88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a76:	4b19      	ldr	r3, [pc, #100]	; (8006adc <prvSwitchTimerLists+0xc0>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f7fd fff0 	bl	8004a66 <vListInsert>
 8006a86:	e016      	b.n	8006ab6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	2100      	movs	r1, #0
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff fd60 	bl	8006558 <xTimerGenericCommand>
 8006a98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	603b      	str	r3, [r7, #0]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ab6:	4b09      	ldr	r3, [pc, #36]	; (8006adc <prvSwitchTimerLists+0xc0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1b1      	bne.n	8006a24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <prvSwitchTimerLists+0xc0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ac6:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <prvSwitchTimerLists+0xc4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a04      	ldr	r2, [pc, #16]	; (8006adc <prvSwitchTimerLists+0xc0>)
 8006acc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ace:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <prvSwitchTimerLists+0xc4>)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	6013      	str	r3, [r2, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000fb0 	.word	0x20000fb0
 8006ae0:	20000fb4 	.word	0x20000fb4

08006ae4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006aea:	f000 f96b 	bl	8006dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006aee:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <prvCheckForValidListAndQueue+0x60>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d120      	bne.n	8006b38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006af6:	4814      	ldr	r0, [pc, #80]	; (8006b48 <prvCheckForValidListAndQueue+0x64>)
 8006af8:	f7fd ff64 	bl	80049c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006afc:	4813      	ldr	r0, [pc, #76]	; (8006b4c <prvCheckForValidListAndQueue+0x68>)
 8006afe:	f7fd ff61 	bl	80049c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b02:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <prvCheckForValidListAndQueue+0x6c>)
 8006b04:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <prvCheckForValidListAndQueue+0x64>)
 8006b06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b08:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <prvCheckForValidListAndQueue+0x70>)
 8006b0a:	4a10      	ldr	r2, [pc, #64]	; (8006b4c <prvCheckForValidListAndQueue+0x68>)
 8006b0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b0e:	2300      	movs	r3, #0
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <prvCheckForValidListAndQueue+0x74>)
 8006b14:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <prvCheckForValidListAndQueue+0x78>)
 8006b16:	2110      	movs	r1, #16
 8006b18:	200a      	movs	r0, #10
 8006b1a:	f7fe f86f 	bl	8004bfc <xQueueGenericCreateStatic>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	4a08      	ldr	r2, [pc, #32]	; (8006b44 <prvCheckForValidListAndQueue+0x60>)
 8006b22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b24:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <prvCheckForValidListAndQueue+0x60>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <prvCheckForValidListAndQueue+0x60>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	490b      	ldr	r1, [pc, #44]	; (8006b60 <prvCheckForValidListAndQueue+0x7c>)
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe fd42 	bl	80055bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b38:	f000 f974 	bl	8006e24 <vPortExitCritical>
}
 8006b3c:	bf00      	nop
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000fb8 	.word	0x20000fb8
 8006b48:	20000f88 	.word	0x20000f88
 8006b4c:	20000f9c 	.word	0x20000f9c
 8006b50:	20000fb0 	.word	0x20000fb0
 8006b54:	20000fb4 	.word	0x20000fb4
 8006b58:	20001064 	.word	0x20001064
 8006b5c:	20000fc4 	.word	0x20000fc4
 8006b60:	08007844 	.word	0x08007844

08006b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3b04      	subs	r3, #4
 8006b74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f023 0201 	bic.w	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3b04      	subs	r3, #4
 8006b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b94:	4a0c      	ldr	r2, [pc, #48]	; (8006bc8 <pxPortInitialiseStack+0x64>)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3b14      	subs	r3, #20
 8006b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3b04      	subs	r3, #4
 8006baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f06f 0202 	mvn.w	r2, #2
 8006bb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3b20      	subs	r3, #32
 8006bb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bba:	68fb      	ldr	r3, [r7, #12]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	08006bcd 	.word	0x08006bcd

08006bcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bd6:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <prvTaskExitError+0x54>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d00a      	beq.n	8006bf6 <prvTaskExitError+0x2a>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60fb      	str	r3, [r7, #12]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <prvTaskExitError+0x28>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	60bb      	str	r3, [r7, #8]
}
 8006c08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c0a:	bf00      	nop
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0fc      	beq.n	8006c0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c12:	bf00      	nop
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	20000074 	.word	0x20000074
	...

08006c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <pxCurrentTCBConst2>)
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	6808      	ldr	r0, [r1, #0]
 8006c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3a:	f380 8809 	msr	PSP, r0
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f04f 0000 	mov.w	r0, #0
 8006c46:	f380 8811 	msr	BASEPRI, r0
 8006c4a:	4770      	bx	lr
 8006c4c:	f3af 8000 	nop.w

08006c50 <pxCurrentTCBConst2>:
 8006c50:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop

08006c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c58:	4808      	ldr	r0, [pc, #32]	; (8006c7c <prvPortStartFirstTask+0x24>)
 8006c5a:	6800      	ldr	r0, [r0, #0]
 8006c5c:	6800      	ldr	r0, [r0, #0]
 8006c5e:	f380 8808 	msr	MSP, r0
 8006c62:	f04f 0000 	mov.w	r0, #0
 8006c66:	f380 8814 	msr	CONTROL, r0
 8006c6a:	b662      	cpsie	i
 8006c6c:	b661      	cpsie	f
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	df00      	svc	0
 8006c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c7a:	bf00      	nop
 8006c7c:	e000ed08 	.word	0xe000ed08

08006c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c86:	4b46      	ldr	r3, [pc, #280]	; (8006da0 <xPortStartScheduler+0x120>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a46      	ldr	r2, [pc, #280]	; (8006da4 <xPortStartScheduler+0x124>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10a      	bne.n	8006ca6 <xPortStartScheduler+0x26>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	613b      	str	r3, [r7, #16]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ca6:	4b3e      	ldr	r3, [pc, #248]	; (8006da0 <xPortStartScheduler+0x120>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3f      	ldr	r2, [pc, #252]	; (8006da8 <xPortStartScheduler+0x128>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d10a      	bne.n	8006cc6 <xPortStartScheduler+0x46>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	60fb      	str	r3, [r7, #12]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cc6:	4b39      	ldr	r3, [pc, #228]	; (8006dac <xPortStartScheduler+0x12c>)
 8006cc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	22ff      	movs	r2, #255	; 0xff
 8006cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	4b31      	ldr	r3, [pc, #196]	; (8006db0 <xPortStartScheduler+0x130>)
 8006cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cee:	4b31      	ldr	r3, [pc, #196]	; (8006db4 <xPortStartScheduler+0x134>)
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cf4:	e009      	b.n	8006d0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006cf6:	4b2f      	ldr	r3, [pc, #188]	; (8006db4 <xPortStartScheduler+0x134>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	4a2d      	ldr	r2, [pc, #180]	; (8006db4 <xPortStartScheduler+0x134>)
 8006cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d12:	2b80      	cmp	r3, #128	; 0x80
 8006d14:	d0ef      	beq.n	8006cf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d16:	4b27      	ldr	r3, [pc, #156]	; (8006db4 <xPortStartScheduler+0x134>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1c3 0307 	rsb	r3, r3, #7
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d00a      	beq.n	8006d38 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	60bb      	str	r3, [r7, #8]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d38:	4b1e      	ldr	r3, [pc, #120]	; (8006db4 <xPortStartScheduler+0x134>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	4a1d      	ldr	r2, [pc, #116]	; (8006db4 <xPortStartScheduler+0x134>)
 8006d40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d42:	4b1c      	ldr	r3, [pc, #112]	; (8006db4 <xPortStartScheduler+0x134>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d4a:	4a1a      	ldr	r2, [pc, #104]	; (8006db4 <xPortStartScheduler+0x134>)
 8006d4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d56:	4b18      	ldr	r3, [pc, #96]	; (8006db8 <xPortStartScheduler+0x138>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <xPortStartScheduler+0x138>)
 8006d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d62:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <xPortStartScheduler+0x138>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <xPortStartScheduler+0x138>)
 8006d68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d6e:	f000 f8dd 	bl	8006f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d72:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <xPortStartScheduler+0x13c>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d78:	f000 f8fc 	bl	8006f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d7c:	4b10      	ldr	r3, [pc, #64]	; (8006dc0 <xPortStartScheduler+0x140>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a0f      	ldr	r2, [pc, #60]	; (8006dc0 <xPortStartScheduler+0x140>)
 8006d82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d88:	f7ff ff66 	bl	8006c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d8c:	f7ff f846 	bl	8005e1c <vTaskSwitchContext>
	prvTaskExitError();
 8006d90:	f7ff ff1c 	bl	8006bcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	e000ed00 	.word	0xe000ed00
 8006da4:	410fc271 	.word	0x410fc271
 8006da8:	410fc270 	.word	0x410fc270
 8006dac:	e000e400 	.word	0xe000e400
 8006db0:	200010b4 	.word	0x200010b4
 8006db4:	200010b8 	.word	0x200010b8
 8006db8:	e000ed20 	.word	0xe000ed20
 8006dbc:	20000074 	.word	0x20000074
 8006dc0:	e000ef34 	.word	0xe000ef34

08006dc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	607b      	str	r3, [r7, #4]
}
 8006ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dde:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <vPortEnterCritical+0x58>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3301      	adds	r3, #1
 8006de4:	4a0d      	ldr	r2, [pc, #52]	; (8006e1c <vPortEnterCritical+0x58>)
 8006de6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <vPortEnterCritical+0x58>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10f      	bne.n	8006e10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <vPortEnterCritical+0x5c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <vPortEnterCritical+0x4c>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	603b      	str	r3, [r7, #0]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <vPortEnterCritical+0x4a>
	}
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	20000074 	.word	0x20000074
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e2a:	4b12      	ldr	r3, [pc, #72]	; (8006e74 <vPortExitCritical+0x50>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <vPortExitCritical+0x24>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	607b      	str	r3, [r7, #4]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <vPortExitCritical+0x50>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <vPortExitCritical+0x50>)
 8006e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e52:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <vPortExitCritical+0x50>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d105      	bne.n	8006e66 <vPortExitCritical+0x42>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	f383 8811 	msr	BASEPRI, r3
}
 8006e64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20000074 	.word	0x20000074
	...

08006e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e80:	f3ef 8009 	mrs	r0, PSP
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <pxCurrentTCBConst>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	f01e 0f10 	tst.w	lr, #16
 8006e90:	bf08      	it	eq
 8006e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	6010      	str	r0, [r2, #0]
 8006e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ea4:	f380 8811 	msr	BASEPRI, r0
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f7fe ffb4 	bl	8005e1c <vTaskSwitchContext>
 8006eb4:	f04f 0000 	mov.w	r0, #0
 8006eb8:	f380 8811 	msr	BASEPRI, r0
 8006ebc:	bc09      	pop	{r0, r3}
 8006ebe:	6819      	ldr	r1, [r3, #0]
 8006ec0:	6808      	ldr	r0, [r1, #0]
 8006ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec6:	f01e 0f10 	tst.w	lr, #16
 8006eca:	bf08      	it	eq
 8006ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ed0:	f380 8809 	msr	PSP, r0
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	f3af 8000 	nop.w

08006ee0 <pxCurrentTCBConst>:
 8006ee0:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop

08006ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	607b      	str	r3, [r7, #4]
}
 8006f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f02:	f7fe fed1 	bl	8005ca8 <xTaskIncrementTick>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f0c:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <xPortSysTickHandler+0x40>)
 8006f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	2300      	movs	r3, #0
 8006f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f383 8811 	msr	BASEPRI, r3
}
 8006f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f30:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <vPortSetupTimerInterrupt+0x34>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f36:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <vPortSetupTimerInterrupt+0x38>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <vPortSetupTimerInterrupt+0x3c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <vPortSetupTimerInterrupt+0x40>)
 8006f42:	fba2 2303 	umull	r2, r3, r2, r3
 8006f46:	099b      	lsrs	r3, r3, #6
 8006f48:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <vPortSetupTimerInterrupt+0x44>)
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f4e:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <vPortSetupTimerInterrupt+0x34>)
 8006f50:	2207      	movs	r2, #7
 8006f52:	601a      	str	r2, [r3, #0]
}
 8006f54:	bf00      	nop
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	e000e010 	.word	0xe000e010
 8006f64:	e000e018 	.word	0xe000e018
 8006f68:	20000068 	.word	0x20000068
 8006f6c:	10624dd3 	.word	0x10624dd3
 8006f70:	e000e014 	.word	0xe000e014

08006f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f84 <vPortEnableVFP+0x10>
 8006f78:	6801      	ldr	r1, [r0, #0]
 8006f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f7e:	6001      	str	r1, [r0, #0]
 8006f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f82:	bf00      	nop
 8006f84:	e000ed88 	.word	0xe000ed88

08006f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f8e:	f3ef 8305 	mrs	r3, IPSR
 8006f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b0f      	cmp	r3, #15
 8006f98:	d914      	bls.n	8006fc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f9a:	4a17      	ldr	r2, [pc, #92]	; (8006ff8 <vPortValidateInterruptPriority+0x70>)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fa4:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <vPortValidateInterruptPriority+0x74>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	7afa      	ldrb	r2, [r7, #11]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d20a      	bcs.n	8006fc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	607b      	str	r3, [r7, #4]
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fc4:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <vPortValidateInterruptPriority+0x78>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <vPortValidateInterruptPriority+0x7c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d90a      	bls.n	8006fea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	603b      	str	r3, [r7, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	e7fe      	b.n	8006fe8 <vPortValidateInterruptPriority+0x60>
	}
 8006fea:	bf00      	nop
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	e000e3f0 	.word	0xe000e3f0
 8006ffc:	200010b4 	.word	0x200010b4
 8007000:	e000ed0c 	.word	0xe000ed0c
 8007004:	200010b8 	.word	0x200010b8

08007008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	; 0x28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007010:	2300      	movs	r3, #0
 8007012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007014:	f7fe fd8c 	bl	8005b30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007018:	4b5b      	ldr	r3, [pc, #364]	; (8007188 <pvPortMalloc+0x180>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007020:	f000 f920 	bl	8007264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007024:	4b59      	ldr	r3, [pc, #356]	; (800718c <pvPortMalloc+0x184>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4013      	ands	r3, r2
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 8093 	bne.w	8007158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01d      	beq.n	8007074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007038:	2208      	movs	r2, #8
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	2b00      	cmp	r3, #0
 8007048:	d014      	beq.n	8007074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f023 0307 	bic.w	r3, r3, #7
 8007050:	3308      	adds	r3, #8
 8007052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <pvPortMalloc+0x6c>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	617b      	str	r3, [r7, #20]
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d06e      	beq.n	8007158 <pvPortMalloc+0x150>
 800707a:	4b45      	ldr	r3, [pc, #276]	; (8007190 <pvPortMalloc+0x188>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d869      	bhi.n	8007158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007084:	4b43      	ldr	r3, [pc, #268]	; (8007194 <pvPortMalloc+0x18c>)
 8007086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007088:	4b42      	ldr	r3, [pc, #264]	; (8007194 <pvPortMalloc+0x18c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800708e:	e004      	b.n	800709a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d903      	bls.n	80070ac <pvPortMalloc+0xa4>
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f1      	bne.n	8007090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070ac:	4b36      	ldr	r3, [pc, #216]	; (8007188 <pvPortMalloc+0x180>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d050      	beq.n	8007158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2208      	movs	r2, #8
 80070bc:	4413      	add	r3, r2
 80070be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	2308      	movs	r3, #8
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d91f      	bls.n	8007118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <pvPortMalloc+0xf8>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	613b      	str	r3, [r7, #16]
}
 80070fc:	bf00      	nop
 80070fe:	e7fe      	b.n	80070fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	1ad2      	subs	r2, r2, r3
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007112:	69b8      	ldr	r0, [r7, #24]
 8007114:	f000 f908 	bl	8007328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007118:	4b1d      	ldr	r3, [pc, #116]	; (8007190 <pvPortMalloc+0x188>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <pvPortMalloc+0x188>)
 8007124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007126:	4b1a      	ldr	r3, [pc, #104]	; (8007190 <pvPortMalloc+0x188>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <pvPortMalloc+0x190>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	d203      	bcs.n	800713a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007132:	4b17      	ldr	r3, [pc, #92]	; (8007190 <pvPortMalloc+0x188>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a18      	ldr	r2, [pc, #96]	; (8007198 <pvPortMalloc+0x190>)
 8007138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <pvPortMalloc+0x184>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	431a      	orrs	r2, r3
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800714e:	4b13      	ldr	r3, [pc, #76]	; (800719c <pvPortMalloc+0x194>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	4a11      	ldr	r2, [pc, #68]	; (800719c <pvPortMalloc+0x194>)
 8007156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007158:	f7fe fcf8 	bl	8005b4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <pvPortMalloc+0x174>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	60fb      	str	r3, [r7, #12]
}
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <pvPortMalloc+0x172>
	return pvReturn;
 800717c:	69fb      	ldr	r3, [r7, #28]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3728      	adds	r7, #40	; 0x28
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20004cc4 	.word	0x20004cc4
 800718c:	20004cd8 	.word	0x20004cd8
 8007190:	20004cc8 	.word	0x20004cc8
 8007194:	20004cbc 	.word	0x20004cbc
 8007198:	20004ccc 	.word	0x20004ccc
 800719c:	20004cd0 	.word	0x20004cd0

080071a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d04d      	beq.n	800724e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071b2:	2308      	movs	r3, #8
 80071b4:	425b      	negs	r3, r3
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	4413      	add	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	4b24      	ldr	r3, [pc, #144]	; (8007258 <vPortFree+0xb8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4013      	ands	r3, r2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <vPortFree+0x44>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60fb      	str	r3, [r7, #12]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <vPortFree+0x62>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	60bb      	str	r3, [r7, #8]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	4b14      	ldr	r3, [pc, #80]	; (8007258 <vPortFree+0xb8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01e      	beq.n	800724e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d11a      	bne.n	800724e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <vPortFree+0xb8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	43db      	mvns	r3, r3
 8007222:	401a      	ands	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007228:	f7fe fc82 	bl	8005b30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	4b0a      	ldr	r3, [pc, #40]	; (800725c <vPortFree+0xbc>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4413      	add	r3, r2
 8007236:	4a09      	ldr	r2, [pc, #36]	; (800725c <vPortFree+0xbc>)
 8007238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800723a:	6938      	ldr	r0, [r7, #16]
 800723c:	f000 f874 	bl	8007328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007240:	4b07      	ldr	r3, [pc, #28]	; (8007260 <vPortFree+0xc0>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	4a06      	ldr	r2, [pc, #24]	; (8007260 <vPortFree+0xc0>)
 8007248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800724a:	f7fe fc7f 	bl	8005b4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800724e:	bf00      	nop
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20004cd8 	.word	0x20004cd8
 800725c:	20004cc8 	.word	0x20004cc8
 8007260:	20004cd4 	.word	0x20004cd4

08007264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800726a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800726e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007270:	4b27      	ldr	r3, [pc, #156]	; (8007310 <prvHeapInit+0xac>)
 8007272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3307      	adds	r3, #7
 8007282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0307 	bic.w	r3, r3, #7
 800728a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	4a1f      	ldr	r2, [pc, #124]	; (8007310 <prvHeapInit+0xac>)
 8007294:	4413      	add	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800729c:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <prvHeapInit+0xb0>)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072a2:	4b1c      	ldr	r3, [pc, #112]	; (8007314 <prvHeapInit+0xb0>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4413      	add	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072b0:	2208      	movs	r2, #8
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4a15      	ldr	r2, [pc, #84]	; (8007318 <prvHeapInit+0xb4>)
 80072c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <prvHeapInit+0xb4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <prvHeapInit+0xb4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <prvHeapInit+0xb4>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4a0a      	ldr	r2, [pc, #40]	; (800731c <prvHeapInit+0xb8>)
 80072f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4a09      	ldr	r2, [pc, #36]	; (8007320 <prvHeapInit+0xbc>)
 80072fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072fc:	4b09      	ldr	r3, [pc, #36]	; (8007324 <prvHeapInit+0xc0>)
 80072fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007302:	601a      	str	r2, [r3, #0]
}
 8007304:	bf00      	nop
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	200010bc 	.word	0x200010bc
 8007314:	20004cbc 	.word	0x20004cbc
 8007318:	20004cc4 	.word	0x20004cc4
 800731c:	20004ccc 	.word	0x20004ccc
 8007320:	20004cc8 	.word	0x20004cc8
 8007324:	20004cd8 	.word	0x20004cd8

08007328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007330:	4b28      	ldr	r3, [pc, #160]	; (80073d4 <prvInsertBlockIntoFreeList+0xac>)
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e002      	b.n	800733c <prvInsertBlockIntoFreeList+0x14>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d8f7      	bhi.n	8007336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	4413      	add	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	429a      	cmp	r2, r3
 8007356:	d108      	bne.n	800736a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	441a      	add	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d118      	bne.n	80073b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d00d      	beq.n	80073a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	441a      	add	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	e008      	b.n	80073b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <prvInsertBlockIntoFreeList+0xb0>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e003      	b.n	80073b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d002      	beq.n	80073c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20004cbc 	.word	0x20004cbc
 80073d8:	20004cc4 	.word	0x20004cc4

080073dc <__errno>:
 80073dc:	4b01      	ldr	r3, [pc, #4]	; (80073e4 <__errno+0x8>)
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20000078 	.word	0x20000078

080073e8 <__libc_init_array>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	4d0d      	ldr	r5, [pc, #52]	; (8007420 <__libc_init_array+0x38>)
 80073ec:	4c0d      	ldr	r4, [pc, #52]	; (8007424 <__libc_init_array+0x3c>)
 80073ee:	1b64      	subs	r4, r4, r5
 80073f0:	10a4      	asrs	r4, r4, #2
 80073f2:	2600      	movs	r6, #0
 80073f4:	42a6      	cmp	r6, r4
 80073f6:	d109      	bne.n	800740c <__libc_init_array+0x24>
 80073f8:	4d0b      	ldr	r5, [pc, #44]	; (8007428 <__libc_init_array+0x40>)
 80073fa:	4c0c      	ldr	r4, [pc, #48]	; (800742c <__libc_init_array+0x44>)
 80073fc:	f000 f9a6 	bl	800774c <_init>
 8007400:	1b64      	subs	r4, r4, r5
 8007402:	10a4      	asrs	r4, r4, #2
 8007404:	2600      	movs	r6, #0
 8007406:	42a6      	cmp	r6, r4
 8007408:	d105      	bne.n	8007416 <__libc_init_array+0x2e>
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007410:	4798      	blx	r3
 8007412:	3601      	adds	r6, #1
 8007414:	e7ee      	b.n	80073f4 <__libc_init_array+0xc>
 8007416:	f855 3b04 	ldr.w	r3, [r5], #4
 800741a:	4798      	blx	r3
 800741c:	3601      	adds	r6, #1
 800741e:	e7f2      	b.n	8007406 <__libc_init_array+0x1e>
 8007420:	0800a1f4 	.word	0x0800a1f4
 8007424:	0800a1f4 	.word	0x0800a1f4
 8007428:	0800a1f4 	.word	0x0800a1f4
 800742c:	0800a1f8 	.word	0x0800a1f8

08007430 <__retarget_lock_acquire_recursive>:
 8007430:	4770      	bx	lr

08007432 <__retarget_lock_release_recursive>:
 8007432:	4770      	bx	lr

08007434 <malloc>:
 8007434:	4b02      	ldr	r3, [pc, #8]	; (8007440 <malloc+0xc>)
 8007436:	4601      	mov	r1, r0
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	f000 b88d 	b.w	8007558 <_malloc_r>
 800743e:	bf00      	nop
 8007440:	20000078 	.word	0x20000078

08007444 <free>:
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <free+0xc>)
 8007446:	4601      	mov	r1, r0
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	f000 b819 	b.w	8007480 <_free_r>
 800744e:	bf00      	nop
 8007450:	20000078 	.word	0x20000078

08007454 <memcpy>:
 8007454:	440a      	add	r2, r1
 8007456:	4291      	cmp	r1, r2
 8007458:	f100 33ff 	add.w	r3, r0, #4294967295
 800745c:	d100      	bne.n	8007460 <memcpy+0xc>
 800745e:	4770      	bx	lr
 8007460:	b510      	push	{r4, lr}
 8007462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800746a:	4291      	cmp	r1, r2
 800746c:	d1f9      	bne.n	8007462 <memcpy+0xe>
 800746e:	bd10      	pop	{r4, pc}

08007470 <memset>:
 8007470:	4402      	add	r2, r0
 8007472:	4603      	mov	r3, r0
 8007474:	4293      	cmp	r3, r2
 8007476:	d100      	bne.n	800747a <memset+0xa>
 8007478:	4770      	bx	lr
 800747a:	f803 1b01 	strb.w	r1, [r3], #1
 800747e:	e7f9      	b.n	8007474 <memset+0x4>

08007480 <_free_r>:
 8007480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007482:	2900      	cmp	r1, #0
 8007484:	d044      	beq.n	8007510 <_free_r+0x90>
 8007486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800748a:	9001      	str	r0, [sp, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f1a1 0404 	sub.w	r4, r1, #4
 8007492:	bfb8      	it	lt
 8007494:	18e4      	addlt	r4, r4, r3
 8007496:	f000 f94d 	bl	8007734 <__malloc_lock>
 800749a:	4a1e      	ldr	r2, [pc, #120]	; (8007514 <_free_r+0x94>)
 800749c:	9801      	ldr	r0, [sp, #4]
 800749e:	6813      	ldr	r3, [r2, #0]
 80074a0:	b933      	cbnz	r3, 80074b0 <_free_r+0x30>
 80074a2:	6063      	str	r3, [r4, #4]
 80074a4:	6014      	str	r4, [r2, #0]
 80074a6:	b003      	add	sp, #12
 80074a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074ac:	f000 b948 	b.w	8007740 <__malloc_unlock>
 80074b0:	42a3      	cmp	r3, r4
 80074b2:	d908      	bls.n	80074c6 <_free_r+0x46>
 80074b4:	6825      	ldr	r5, [r4, #0]
 80074b6:	1961      	adds	r1, r4, r5
 80074b8:	428b      	cmp	r3, r1
 80074ba:	bf01      	itttt	eq
 80074bc:	6819      	ldreq	r1, [r3, #0]
 80074be:	685b      	ldreq	r3, [r3, #4]
 80074c0:	1949      	addeq	r1, r1, r5
 80074c2:	6021      	streq	r1, [r4, #0]
 80074c4:	e7ed      	b.n	80074a2 <_free_r+0x22>
 80074c6:	461a      	mov	r2, r3
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	b10b      	cbz	r3, 80074d0 <_free_r+0x50>
 80074cc:	42a3      	cmp	r3, r4
 80074ce:	d9fa      	bls.n	80074c6 <_free_r+0x46>
 80074d0:	6811      	ldr	r1, [r2, #0]
 80074d2:	1855      	adds	r5, r2, r1
 80074d4:	42a5      	cmp	r5, r4
 80074d6:	d10b      	bne.n	80074f0 <_free_r+0x70>
 80074d8:	6824      	ldr	r4, [r4, #0]
 80074da:	4421      	add	r1, r4
 80074dc:	1854      	adds	r4, r2, r1
 80074de:	42a3      	cmp	r3, r4
 80074e0:	6011      	str	r1, [r2, #0]
 80074e2:	d1e0      	bne.n	80074a6 <_free_r+0x26>
 80074e4:	681c      	ldr	r4, [r3, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	6053      	str	r3, [r2, #4]
 80074ea:	4421      	add	r1, r4
 80074ec:	6011      	str	r1, [r2, #0]
 80074ee:	e7da      	b.n	80074a6 <_free_r+0x26>
 80074f0:	d902      	bls.n	80074f8 <_free_r+0x78>
 80074f2:	230c      	movs	r3, #12
 80074f4:	6003      	str	r3, [r0, #0]
 80074f6:	e7d6      	b.n	80074a6 <_free_r+0x26>
 80074f8:	6825      	ldr	r5, [r4, #0]
 80074fa:	1961      	adds	r1, r4, r5
 80074fc:	428b      	cmp	r3, r1
 80074fe:	bf04      	itt	eq
 8007500:	6819      	ldreq	r1, [r3, #0]
 8007502:	685b      	ldreq	r3, [r3, #4]
 8007504:	6063      	str	r3, [r4, #4]
 8007506:	bf04      	itt	eq
 8007508:	1949      	addeq	r1, r1, r5
 800750a:	6021      	streq	r1, [r4, #0]
 800750c:	6054      	str	r4, [r2, #4]
 800750e:	e7ca      	b.n	80074a6 <_free_r+0x26>
 8007510:	b003      	add	sp, #12
 8007512:	bd30      	pop	{r4, r5, pc}
 8007514:	20004ce0 	.word	0x20004ce0

08007518 <sbrk_aligned>:
 8007518:	b570      	push	{r4, r5, r6, lr}
 800751a:	4e0e      	ldr	r6, [pc, #56]	; (8007554 <sbrk_aligned+0x3c>)
 800751c:	460c      	mov	r4, r1
 800751e:	6831      	ldr	r1, [r6, #0]
 8007520:	4605      	mov	r5, r0
 8007522:	b911      	cbnz	r1, 800752a <sbrk_aligned+0x12>
 8007524:	f000 f8f6 	bl	8007714 <_sbrk_r>
 8007528:	6030      	str	r0, [r6, #0]
 800752a:	4621      	mov	r1, r4
 800752c:	4628      	mov	r0, r5
 800752e:	f000 f8f1 	bl	8007714 <_sbrk_r>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	d00a      	beq.n	800754c <sbrk_aligned+0x34>
 8007536:	1cc4      	adds	r4, r0, #3
 8007538:	f024 0403 	bic.w	r4, r4, #3
 800753c:	42a0      	cmp	r0, r4
 800753e:	d007      	beq.n	8007550 <sbrk_aligned+0x38>
 8007540:	1a21      	subs	r1, r4, r0
 8007542:	4628      	mov	r0, r5
 8007544:	f000 f8e6 	bl	8007714 <_sbrk_r>
 8007548:	3001      	adds	r0, #1
 800754a:	d101      	bne.n	8007550 <sbrk_aligned+0x38>
 800754c:	f04f 34ff 	mov.w	r4, #4294967295
 8007550:	4620      	mov	r0, r4
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	20004ce4 	.word	0x20004ce4

08007558 <_malloc_r>:
 8007558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755c:	1ccd      	adds	r5, r1, #3
 800755e:	f025 0503 	bic.w	r5, r5, #3
 8007562:	3508      	adds	r5, #8
 8007564:	2d0c      	cmp	r5, #12
 8007566:	bf38      	it	cc
 8007568:	250c      	movcc	r5, #12
 800756a:	2d00      	cmp	r5, #0
 800756c:	4607      	mov	r7, r0
 800756e:	db01      	blt.n	8007574 <_malloc_r+0x1c>
 8007570:	42a9      	cmp	r1, r5
 8007572:	d905      	bls.n	8007580 <_malloc_r+0x28>
 8007574:	230c      	movs	r3, #12
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	2600      	movs	r6, #0
 800757a:	4630      	mov	r0, r6
 800757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007580:	4e2e      	ldr	r6, [pc, #184]	; (800763c <_malloc_r+0xe4>)
 8007582:	f000 f8d7 	bl	8007734 <__malloc_lock>
 8007586:	6833      	ldr	r3, [r6, #0]
 8007588:	461c      	mov	r4, r3
 800758a:	bb34      	cbnz	r4, 80075da <_malloc_r+0x82>
 800758c:	4629      	mov	r1, r5
 800758e:	4638      	mov	r0, r7
 8007590:	f7ff ffc2 	bl	8007518 <sbrk_aligned>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	4604      	mov	r4, r0
 8007598:	d14d      	bne.n	8007636 <_malloc_r+0xde>
 800759a:	6834      	ldr	r4, [r6, #0]
 800759c:	4626      	mov	r6, r4
 800759e:	2e00      	cmp	r6, #0
 80075a0:	d140      	bne.n	8007624 <_malloc_r+0xcc>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	4631      	mov	r1, r6
 80075a6:	4638      	mov	r0, r7
 80075a8:	eb04 0803 	add.w	r8, r4, r3
 80075ac:	f000 f8b2 	bl	8007714 <_sbrk_r>
 80075b0:	4580      	cmp	r8, r0
 80075b2:	d13a      	bne.n	800762a <_malloc_r+0xd2>
 80075b4:	6821      	ldr	r1, [r4, #0]
 80075b6:	3503      	adds	r5, #3
 80075b8:	1a6d      	subs	r5, r5, r1
 80075ba:	f025 0503 	bic.w	r5, r5, #3
 80075be:	3508      	adds	r5, #8
 80075c0:	2d0c      	cmp	r5, #12
 80075c2:	bf38      	it	cc
 80075c4:	250c      	movcc	r5, #12
 80075c6:	4629      	mov	r1, r5
 80075c8:	4638      	mov	r0, r7
 80075ca:	f7ff ffa5 	bl	8007518 <sbrk_aligned>
 80075ce:	3001      	adds	r0, #1
 80075d0:	d02b      	beq.n	800762a <_malloc_r+0xd2>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	442b      	add	r3, r5
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	e00e      	b.n	80075f8 <_malloc_r+0xa0>
 80075da:	6822      	ldr	r2, [r4, #0]
 80075dc:	1b52      	subs	r2, r2, r5
 80075de:	d41e      	bmi.n	800761e <_malloc_r+0xc6>
 80075e0:	2a0b      	cmp	r2, #11
 80075e2:	d916      	bls.n	8007612 <_malloc_r+0xba>
 80075e4:	1961      	adds	r1, r4, r5
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	6025      	str	r5, [r4, #0]
 80075ea:	bf18      	it	ne
 80075ec:	6059      	strne	r1, [r3, #4]
 80075ee:	6863      	ldr	r3, [r4, #4]
 80075f0:	bf08      	it	eq
 80075f2:	6031      	streq	r1, [r6, #0]
 80075f4:	5162      	str	r2, [r4, r5]
 80075f6:	604b      	str	r3, [r1, #4]
 80075f8:	4638      	mov	r0, r7
 80075fa:	f104 060b 	add.w	r6, r4, #11
 80075fe:	f000 f89f 	bl	8007740 <__malloc_unlock>
 8007602:	f026 0607 	bic.w	r6, r6, #7
 8007606:	1d23      	adds	r3, r4, #4
 8007608:	1af2      	subs	r2, r6, r3
 800760a:	d0b6      	beq.n	800757a <_malloc_r+0x22>
 800760c:	1b9b      	subs	r3, r3, r6
 800760e:	50a3      	str	r3, [r4, r2]
 8007610:	e7b3      	b.n	800757a <_malloc_r+0x22>
 8007612:	6862      	ldr	r2, [r4, #4]
 8007614:	42a3      	cmp	r3, r4
 8007616:	bf0c      	ite	eq
 8007618:	6032      	streq	r2, [r6, #0]
 800761a:	605a      	strne	r2, [r3, #4]
 800761c:	e7ec      	b.n	80075f8 <_malloc_r+0xa0>
 800761e:	4623      	mov	r3, r4
 8007620:	6864      	ldr	r4, [r4, #4]
 8007622:	e7b2      	b.n	800758a <_malloc_r+0x32>
 8007624:	4634      	mov	r4, r6
 8007626:	6876      	ldr	r6, [r6, #4]
 8007628:	e7b9      	b.n	800759e <_malloc_r+0x46>
 800762a:	230c      	movs	r3, #12
 800762c:	603b      	str	r3, [r7, #0]
 800762e:	4638      	mov	r0, r7
 8007630:	f000 f886 	bl	8007740 <__malloc_unlock>
 8007634:	e7a1      	b.n	800757a <_malloc_r+0x22>
 8007636:	6025      	str	r5, [r4, #0]
 8007638:	e7de      	b.n	80075f8 <_malloc_r+0xa0>
 800763a:	bf00      	nop
 800763c:	20004ce0 	.word	0x20004ce0

08007640 <cleanup_glue>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	460c      	mov	r4, r1
 8007644:	6809      	ldr	r1, [r1, #0]
 8007646:	4605      	mov	r5, r0
 8007648:	b109      	cbz	r1, 800764e <cleanup_glue+0xe>
 800764a:	f7ff fff9 	bl	8007640 <cleanup_glue>
 800764e:	4621      	mov	r1, r4
 8007650:	4628      	mov	r0, r5
 8007652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007656:	f7ff bf13 	b.w	8007480 <_free_r>
	...

0800765c <_reclaim_reent>:
 800765c:	4b2c      	ldr	r3, [pc, #176]	; (8007710 <_reclaim_reent+0xb4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4283      	cmp	r3, r0
 8007662:	b570      	push	{r4, r5, r6, lr}
 8007664:	4604      	mov	r4, r0
 8007666:	d051      	beq.n	800770c <_reclaim_reent+0xb0>
 8007668:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800766a:	b143      	cbz	r3, 800767e <_reclaim_reent+0x22>
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d14a      	bne.n	8007708 <_reclaim_reent+0xac>
 8007672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007674:	6819      	ldr	r1, [r3, #0]
 8007676:	b111      	cbz	r1, 800767e <_reclaim_reent+0x22>
 8007678:	4620      	mov	r0, r4
 800767a:	f7ff ff01 	bl	8007480 <_free_r>
 800767e:	6961      	ldr	r1, [r4, #20]
 8007680:	b111      	cbz	r1, 8007688 <_reclaim_reent+0x2c>
 8007682:	4620      	mov	r0, r4
 8007684:	f7ff fefc 	bl	8007480 <_free_r>
 8007688:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800768a:	b111      	cbz	r1, 8007692 <_reclaim_reent+0x36>
 800768c:	4620      	mov	r0, r4
 800768e:	f7ff fef7 	bl	8007480 <_free_r>
 8007692:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007694:	b111      	cbz	r1, 800769c <_reclaim_reent+0x40>
 8007696:	4620      	mov	r0, r4
 8007698:	f7ff fef2 	bl	8007480 <_free_r>
 800769c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800769e:	b111      	cbz	r1, 80076a6 <_reclaim_reent+0x4a>
 80076a0:	4620      	mov	r0, r4
 80076a2:	f7ff feed 	bl	8007480 <_free_r>
 80076a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80076a8:	b111      	cbz	r1, 80076b0 <_reclaim_reent+0x54>
 80076aa:	4620      	mov	r0, r4
 80076ac:	f7ff fee8 	bl	8007480 <_free_r>
 80076b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80076b2:	b111      	cbz	r1, 80076ba <_reclaim_reent+0x5e>
 80076b4:	4620      	mov	r0, r4
 80076b6:	f7ff fee3 	bl	8007480 <_free_r>
 80076ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80076bc:	b111      	cbz	r1, 80076c4 <_reclaim_reent+0x68>
 80076be:	4620      	mov	r0, r4
 80076c0:	f7ff fede 	bl	8007480 <_free_r>
 80076c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076c6:	b111      	cbz	r1, 80076ce <_reclaim_reent+0x72>
 80076c8:	4620      	mov	r0, r4
 80076ca:	f7ff fed9 	bl	8007480 <_free_r>
 80076ce:	69a3      	ldr	r3, [r4, #24]
 80076d0:	b1e3      	cbz	r3, 800770c <_reclaim_reent+0xb0>
 80076d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076d4:	4620      	mov	r0, r4
 80076d6:	4798      	blx	r3
 80076d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80076da:	b1b9      	cbz	r1, 800770c <_reclaim_reent+0xb0>
 80076dc:	4620      	mov	r0, r4
 80076de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076e2:	f7ff bfad 	b.w	8007640 <cleanup_glue>
 80076e6:	5949      	ldr	r1, [r1, r5]
 80076e8:	b941      	cbnz	r1, 80076fc <_reclaim_reent+0xa0>
 80076ea:	3504      	adds	r5, #4
 80076ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ee:	2d80      	cmp	r5, #128	; 0x80
 80076f0:	68d9      	ldr	r1, [r3, #12]
 80076f2:	d1f8      	bne.n	80076e6 <_reclaim_reent+0x8a>
 80076f4:	4620      	mov	r0, r4
 80076f6:	f7ff fec3 	bl	8007480 <_free_r>
 80076fa:	e7ba      	b.n	8007672 <_reclaim_reent+0x16>
 80076fc:	680e      	ldr	r6, [r1, #0]
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff febe 	bl	8007480 <_free_r>
 8007704:	4631      	mov	r1, r6
 8007706:	e7ef      	b.n	80076e8 <_reclaim_reent+0x8c>
 8007708:	2500      	movs	r5, #0
 800770a:	e7ef      	b.n	80076ec <_reclaim_reent+0x90>
 800770c:	bd70      	pop	{r4, r5, r6, pc}
 800770e:	bf00      	nop
 8007710:	20000078 	.word	0x20000078

08007714 <_sbrk_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d06      	ldr	r5, [pc, #24]	; (8007730 <_sbrk_r+0x1c>)
 8007718:	2300      	movs	r3, #0
 800771a:	4604      	mov	r4, r0
 800771c:	4608      	mov	r0, r1
 800771e:	602b      	str	r3, [r5, #0]
 8007720:	f7f9 ff42 	bl	80015a8 <_sbrk>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_sbrk_r+0x1a>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_sbrk_r+0x1a>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	20004ce8 	.word	0x20004ce8

08007734 <__malloc_lock>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__malloc_lock+0x8>)
 8007736:	f7ff be7b 	b.w	8007430 <__retarget_lock_acquire_recursive>
 800773a:	bf00      	nop
 800773c:	20004cdc 	.word	0x20004cdc

08007740 <__malloc_unlock>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__malloc_unlock+0x8>)
 8007742:	f7ff be76 	b.w	8007432 <__retarget_lock_release_recursive>
 8007746:	bf00      	nop
 8007748:	20004cdc 	.word	0x20004cdc

0800774c <_init>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	bf00      	nop
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr

08007758 <_fini>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr

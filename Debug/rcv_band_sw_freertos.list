
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fe0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d60  08011180  08011180  00021180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ee0  08013ee0  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08013ee0  08013ee0  00023ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ee8  08013ee8  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ee8  08013ee8  00023ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013eec  08013eec  00023eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08013ef0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b048  200001d0  080140c0  000301d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  2001b218  080140c0  0003b218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac0f  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065bc  00000000  00000000  0005ae0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002258  00000000  00000000  000613d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f90  00000000  00000000  00063628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc77  00000000  00000000  000655b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e09c  00000000  00000000  0008522f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7a0f  00000000  00000000  000b32cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015acda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009834  00000000  00000000  0015ad2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011168 	.word	0x08011168

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	08011168 	.word	0x08011168

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBackgrounds>:
char buff[20];

uint16_t light_color = ST7735_COLOR565(125, 160, 175);
uint16_t dark_color = ST7735_COLOR565(40, 80, 130);

void displayBackgrounds() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16
	/* backgriund */
	ST7735_FillRectangleFast(0, 0, 160, 80, light_color);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <displayBackgrounds+0xbc>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2350      	movs	r3, #80	; 0x50
 8000592:	22a0      	movs	r2, #160	; 0xa0
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f8be 	bl	8001718 <ST7735_FillRectangleFast>
	/* down string */
	ST7735_FillRectangleFast(0, 64, 160, 16, dark_color);
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <displayBackgrounds+0xc0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2310      	movs	r3, #16
 80005a4:	22a0      	movs	r2, #160	; 0xa0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 f8b5 	bl	8001718 <ST7735_FillRectangleFast>
	/* up string */
	ST7735_FillRectangleFast(0, 0, 160, 20, dark_color);
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <displayBackgrounds+0xc0>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2314      	movs	r3, #20
 80005b6:	22a0      	movs	r2, #160	; 0xa0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f001 f8ac 	bl	8001718 <ST7735_FillRectangleFast>
	/* labels */
	ST7735_WriteString(1, 6, "BAND",Font_7x10, light_color, dark_color);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <displayBackgrounds+0xbc>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <displayBackgrounds+0xc0>)
 80005c6:	8819      	ldrh	r1, [r3, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <displayBackgrounds+0xc4>)
 80005ca:	9102      	str	r1, [sp, #8]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <displayBackgrounds+0xc8>)
 80005d6:	2106      	movs	r1, #6
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 ffe0 	bl	800159e <ST7735_WriteString>
	ST7735_WriteString(72, 6,"STEP",Font_7x10, light_color, dark_color);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <displayBackgrounds+0xbc>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <displayBackgrounds+0xc0>)
 80005e4:	8819      	ldrh	r1, [r3, #0]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <displayBackgrounds+0xc4>)
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <displayBackgrounds+0xcc>)
 80005f4:	2106      	movs	r1, #6
 80005f6:	2048      	movs	r0, #72	; 0x48
 80005f8:	f000 ffd1 	bl	800159e <ST7735_WriteString>
    ST7735_WriteString(2, 35, "VFO", Font_7x10, dark_color, light_color);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <displayBackgrounds+0xc0>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <displayBackgrounds+0xbc>)
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <displayBackgrounds+0xc4>)
 8000606:	9102      	str	r1, [sp, #8]
 8000608:	9201      	str	r2, [sp, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <displayBackgrounds+0xd0>)
 8000612:	2123      	movs	r1, #35	; 0x23
 8000614:	2002      	movs	r0, #2
 8000616:	f000 ffc2 	bl	800159e <ST7735_WriteString>
    ST7735_WriteString(2, 43, " Hz", Font_7x10, dark_color, light_color);
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <displayBackgrounds+0xc0>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <displayBackgrounds+0xbc>)
 8000620:	8819      	ldrh	r1, [r3, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <displayBackgrounds+0xc4>)
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <displayBackgrounds+0xd4>)
 8000630:	212b      	movs	r1, #43	; 0x2b
 8000632:	2002      	movs	r0, #2
 8000634:	f000 ffb3 	bl	800159e <ST7735_WriteString>
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002
 8000648:	20000004 	.word	0x20000004
 800064c:	08011180 	.word	0x08011180
 8000650:	08011188 	.word	0x08011188
 8000654:	08011190 	.word	0x08011190
 8000658:	08011194 	.word	0x08011194

0800065c <displayBand>:

void displayBand(const char * band)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]

	ST7735_WriteString(35, 2, band, Font_11x18, light_color, dark_color);
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <displayBand+0x30>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <displayBand+0x34>)
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <displayBand+0x38>)
 800066e:	9102      	str	r1, [sp, #8]
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	2102      	movs	r1, #2
 800067c:	2023      	movs	r0, #35	; 0x23
 800067e:	f000 ff8e 	bl	800159e <ST7735_WriteString>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	20000002 	.word	0x20000002
 8000694:	2000000c 	.word	0x2000000c

08000698 <displayStep>:

void displayStep(const char * step)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(104, 2, step, Font_11x18, light_color, dark_color);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <displayStep+0x30>)
 80006a2:	881a      	ldrh	r2, [r3, #0]
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <displayStep+0x34>)
 80006a6:	8819      	ldrh	r1, [r3, #0]
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <displayStep+0x38>)
 80006aa:	9102      	str	r1, [sp, #8]
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	9200      	str	r2, [sp, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	2102      	movs	r1, #2
 80006b8:	2068      	movs	r0, #104	; 0x68
 80006ba:	f000 ff70 	bl	800159e <ST7735_WriteString>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000002 	.word	0x20000002
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <displayFrequency>:

void displayFrequency(uint32_t freq) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	6078      	str	r0, [r7, #4]
	uint16_t th, dig, mi;
	th = freq%1000;
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <displayFrequency+0xa4>)
 80006e0:	fba3 1302 	umull	r1, r3, r3, r2
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ea:	fb01 f303 	mul.w	r3, r1, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	81fb      	strh	r3, [r7, #14]
	dig = (freq / 1000)%1000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <displayFrequency+0xa4>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099a      	lsrs	r2, r3, #6
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <displayFrequency+0xa4>)
 80006fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000702:	099b      	lsrs	r3, r3, #6
 8000704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	81bb      	strh	r3, [r7, #12]
	mi = (freq / 1000000);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <displayFrequency+0xa8>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	0c9b      	lsrs	r3, r3, #18
 800071a:	817b      	strh	r3, [r7, #10]
	sprintf(buff, "%02d.%03d",mi, dig);
 800071c:	897a      	ldrh	r2, [r7, #10]
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <displayFrequency+0xac>)
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <displayFrequency+0xb0>)
 8000724:	f00f fd7c 	bl	8010220 <siprintf>
	ST7735_WriteString(26, 32, buff, Font_16x26, dark_color, light_color);
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <displayFrequency+0xb4>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <displayFrequency+0xb8>)
 800072e:	8819      	ldrh	r1, [r3, #0]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <displayFrequency+0xbc>)
 8000732:	9102      	str	r1, [sp, #8]
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <displayFrequency+0xb0>)
 800073e:	2120      	movs	r1, #32
 8000740:	201a      	movs	r0, #26
 8000742:	f000 ff2c 	bl	800159e <ST7735_WriteString>
	sprintf(buff, "%03d",th);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	461a      	mov	r2, r3
 800074a:	4912      	ldr	r1, [pc, #72]	; (8000794 <displayFrequency+0xc0>)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <displayFrequency+0xb0>)
 800074e:	f00f fd67 	bl	8010220 <siprintf>
	ST7735_WriteString(125, 37, buff, Font_11x18, dark_color, light_color);
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <displayFrequency+0xb4>)
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <displayFrequency+0xb8>)
 8000758:	8819      	ldrh	r1, [r3, #0]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <displayFrequency+0xc4>)
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <displayFrequency+0xb0>)
 8000768:	2125      	movs	r1, #37	; 0x25
 800076a:	207d      	movs	r0, #125	; 0x7d
 800076c:	f000 ff17 	bl	800159e <ST7735_WriteString>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	10624dd3 	.word	0x10624dd3
 800077c:	431bde83 	.word	0x431bde83
 8000780:	08011198 	.word	0x08011198
 8000784:	200001ec 	.word	0x200001ec
 8000788:	20000002 	.word	0x20000002
 800078c:	20000000 	.word	0x20000000
 8000790:	20000014 	.word	0x20000014
 8000794:	080111a4 	.word	0x080111a4
 8000798:	2000000c 	.word	0x2000000c

0800079c <blk_pwm_setvalue>:

void blk_pwm_setvalue(uint16_t value)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	  USR_TIM_PWM_OpenTim5Ch2();
 80007a6:	f001 fb95 	bl	8001ed4 <USR_TIM_PWM_OpenTim5Ch2>
	  USR_TIM_PWM_SetCompare(value * 10);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	461a      	mov	r2, r3
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fb96 	bl	8001ee8 <USR_TIM_PWM_SetCompare>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <setBacklight>:

void setBacklight(uint8_t percent) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	81fb      	strh	r3, [r7, #14]
	uint16_t d = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	81fb      	strh	r3, [r7, #14]
 80007da:	e013      	b.n	8000804 <setBacklight+0x40>
		blk_pwm_setvalue(i);
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffdc 	bl	800079c <blk_pwm_setvalue>
		for (d = 0; d <=60000; d++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	81bb      	strh	r3, [r7, #12]
 80007e8:	e002      	b.n	80007f0 <setBacklight+0x2c>
 80007ea:	89bb      	ldrh	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	81bb      	strh	r3, [r7, #12]
 80007f0:	89bb      	ldrh	r3, [r7, #12]
 80007f2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d9f7      	bls.n	80007ea <setBacklight+0x26>
		{

		}
		d = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	3301      	adds	r3, #1
 8000802:	81fb      	strh	r3, [r7, #14]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	b29b      	uxth	r3, r3
 8000808:	89fa      	ldrh	r2, [r7, #14]
 800080a:	429a      	cmp	r2, r3
 800080c:	d9e6      	bls.n	80007dc <setBacklight+0x18>
	}
	i=0;
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <getRunTimeCounterValue+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	2000026c 	.word	0x2000026c

08000840 <vApplicationIdleHook>:
extern uint16_t current_step;
extern uint8_t current_band;
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	//vTaskList(taskListStatus);
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <MX_FREERTOS_Init+0x38>)
 8000856:	2100      	movs	r1, #0
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_FREERTOS_Init+0x3c>)
 800085a:	f00b ffa7 	bl	800c7ac <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <MX_FREERTOS_Init+0x40>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_FREERTOS_Init+0x44>)
 8000866:	2100      	movs	r1, #0
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_FREERTOS_Init+0x48>)
 800086a:	f00b ff9f 	bl	800c7ac <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a0a      	ldr	r2, [pc, #40]	; (800089c <MX_FREERTOS_Init+0x4c>)
 8000872:	6013      	str	r3, [r2, #0]

  /* creation of buttonsTask */
  buttonsTaskHandle = osThreadNew(StartButtonsTask, NULL, &buttonsTask_attributes);
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <MX_FREERTOS_Init+0x50>)
 8000876:	2100      	movs	r1, #0
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <MX_FREERTOS_Init+0x54>)
 800087a:	f00b ff97 	bl	800c7ac <osThreadNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <MX_FREERTOS_Init+0x58>)
 8000882:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08013d4c 	.word	0x08013d4c
 800088c:	080008ad 	.word	0x080008ad
 8000890:	2000020c 	.word	0x2000020c
 8000894:	08013d70 	.word	0x08013d70
 8000898:	080008fd 	.word	0x080008fd
 800089c:	20000210 	.word	0x20000210
 80008a0:	08013d94 	.word	0x08013d94
 80008a4:	08000a71 	.word	0x08000a71
 80008a8:	20000214 	.word	0x20000214

080008ac <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80008b4:	f00e fcd2 	bl	800f25c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	current_freq = band[current_band].minFreq;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <StartDefaultTask+0x44>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <StartDefaultTask+0x48>)
 80008c0:	460b      	mov	r3, r1
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	440b      	add	r3, r1
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	3304      	adds	r3, #4
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <StartDefaultTask+0x4c>)
 80008d2:	601a      	str	r2, [r3, #0]
	si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <StartDefaultTask+0x4c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f009 fe24 	bl	800a528 <si5351_SetupCLK0>
	si5351_EnableOutputs(1 << 0);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f009 fe42 	bl	800a56a <si5351_EnableOutputs>
	/* Timer*/
	for (;;) {
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		osDelay(250);
 80008e6:	20fa      	movs	r0, #250	; 0xfa
 80008e8:	f00b fff2 	bl	800c8d0 <osDelay>
 80008ec:	e7fb      	b.n	80008e6 <StartDefaultTask+0x3a>
 80008ee:	bf00      	nop
 80008f0:	20000276 	.word	0x20000276
 80008f4:	20000054 	.word	0x20000054
 80008f8:	20000270 	.word	0x20000270

080008fc <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */

	int32_t prevCounter = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
	/*  */
	max_freq = band[current_band].maxFreq;
 8000908:	4b51      	ldr	r3, [pc, #324]	; (8000a50 <StartEncoderTask+0x154>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	4a51      	ldr	r2, [pc, #324]	; (8000a54 <StartEncoderTask+0x158>)
 8000910:	460b      	mov	r3, r1
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	440b      	add	r3, r1
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	3308      	adds	r3, #8
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	4b4d      	ldr	r3, [pc, #308]	; (8000a58 <StartEncoderTask+0x15c>)
 8000922:	601a      	str	r2, [r3, #0]
	min_freq = band[current_band].minFreq;
 8000924:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <StartEncoderTask+0x154>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	4a4a      	ldr	r2, [pc, #296]	; (8000a54 <StartEncoderTask+0x158>)
 800092c:	460b      	mov	r3, r1
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	440b      	add	r3, r1
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	3304      	adds	r3, #4
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	4b47      	ldr	r3, [pc, #284]	; (8000a5c <StartEncoderTask+0x160>)
 800093e:	601a      	str	r2, [r3, #0]
	current_freq = min_freq;
 8000940:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <StartEncoderTask+0x160>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a46      	ldr	r2, [pc, #280]	; (8000a60 <StartEncoderTask+0x164>)
 8000946:	6013      	str	r3, [r2, #0]
	/* */
	//ST7735_FillScreenFast(ST7735_BLACK);
	displayBackgrounds();
 8000948:	f7ff fe1c 	bl	8000584 <displayBackgrounds>
	displayBand(band[current_band].name);
 800094c:	4b40      	ldr	r3, [pc, #256]	; (8000a50 <StartEncoderTask+0x154>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <StartEncoderTask+0x158>)
 8000954:	460b      	mov	r3, r1
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	440b      	add	r3, r1
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe7b 	bl	800065c <displayBand>
	displayStep(step[current_step].name);
 8000966:	4b3f      	ldr	r3, [pc, #252]	; (8000a64 <StartEncoderTask+0x168>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <StartEncoderTask+0x16c>)
 800096e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe90 	bl	8000698 <displayStep>
	displayFrequency(current_freq);
 8000978:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <StartEncoderTask+0x164>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fea9 	bl	80006d4 <displayFrequency>
	/* */
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8000982:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <StartEncoderTask+0x170>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000988:	613b      	str	r3, [r7, #16]
		uint16_t step_value = step[current_step].step;
 800098a:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <StartEncoderTask+0x168>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	4a36      	ldr	r2, [pc, #216]	; (8000a68 <StartEncoderTask+0x16c>)
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	4413      	add	r3, r2
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	81fb      	strh	r3, [r7, #14]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	3b01      	subs	r3, #1
 800099c:	b29b      	uxth	r3, r3
 800099e:	0fda      	lsrs	r2, r3, #31
 80009a0:	4413      	add	r3, r2
 80009a2:	105b      	asrs	r3, r3, #1
 80009a4:	425b      	negs	r3, r3
 80009a6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80009aa:	337f      	adds	r3, #127	; 0x7f
 80009ac:	613b      	str	r3, [r7, #16]

		if (currCounter != prevCounter) {
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d048      	beq.n	8000a48 <StartEncoderTask+0x14c>
			if (currCounter > prevCounter) {
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	dd1f      	ble.n	80009fe <StartEncoderTask+0x102>
				if (current_freq != min_freq) {
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <StartEncoderTask+0x164>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <StartEncoderTask+0x160>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d006      	beq.n	80009d8 <StartEncoderTask+0xdc>
					current_freq -= step_value;
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <StartEncoderTask+0x164>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <StartEncoderTask+0x164>)
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e003      	b.n	80009e0 <StartEncoderTask+0xe4>
				} else {
					current_freq = max_freq;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <StartEncoderTask+0x15c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <StartEncoderTask+0x164>)
 80009de:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <StartEncoderTask+0x164>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	4618      	mov	r0, r3
 80009e8:	f009 fd9e 	bl	800a528 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <StartEncoderTask+0x164>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fe6f 	bl	80006d4 <displayFrequency>
				osDelay(5);
 80009f6:	2005      	movs	r0, #5
 80009f8:	f00b ff6a 	bl	800c8d0 <osDelay>
 80009fc:	e022      	b.n	8000a44 <StartEncoderTask+0x148>
			} else if (currCounter < prevCounter) {
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	da1e      	bge.n	8000a44 <StartEncoderTask+0x148>
				if (current_freq != max_freq) {
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <StartEncoderTask+0x164>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <StartEncoderTask+0x15c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d006      	beq.n	8000a20 <StartEncoderTask+0x124>
					current_freq += step_value;
 8000a12:	89fa      	ldrh	r2, [r7, #14]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <StartEncoderTask+0x164>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <StartEncoderTask+0x164>)
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e003      	b.n	8000a28 <StartEncoderTask+0x12c>
				} else {
					current_freq = min_freq;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <StartEncoderTask+0x160>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <StartEncoderTask+0x164>)
 8000a26:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <StartEncoderTask+0x164>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f009 fd7a 	bl	800a528 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <StartEncoderTask+0x164>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fe4b 	bl	80006d4 <displayFrequency>
				osDelay(5);
 8000a3e:	2005      	movs	r0, #5
 8000a40:	f00b ff46 	bl	800c8d0 <osDelay>
			} else {

			}
			prevCounter = currCounter;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	617b      	str	r3, [r7, #20]
		}

		osDelay(5);
 8000a48:	2005      	movs	r0, #5
 8000a4a:	f00b ff41 	bl	800c8d0 <osDelay>
	for (;;) {
 8000a4e:	e798      	b.n	8000982 <StartEncoderTask+0x86>
 8000a50:	20000276 	.word	0x20000276
 8000a54:	20000054 	.word	0x20000054
 8000a58:	20000204 	.word	0x20000204
 8000a5c:	20000208 	.word	0x20000208
 8000a60:	20000270 	.word	0x20000270
 8000a64:	20000274 	.word	0x20000274
 8000a68:	2000001c 	.word	0x2000001c
 8000a6c:	20000344 	.word	0x20000344

08000a70 <StartButtonsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonsTask */
void StartButtonsTask(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonsTask */
	/* Infinite loop */
	for (;;) {
		/* BUTTON */
		//printf("Step %d\n\r", current_step);
		if (buttonPressed[buttonNumber]) {
 8000a78:	4b61      	ldr	r3, [pc, #388]	; (8000c00 <StartButtonsTask+0x190>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b61      	ldr	r3, [pc, #388]	; (8000c04 <StartButtonsTask+0x194>)
 8000a80:	5c9b      	ldrb	r3, [r3, r2]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 80b6 	beq.w	8000bf6 <StartButtonsTask+0x186>
			buttonPressed[buttonNumber] = 0;
 8000a8a:	4b5d      	ldr	r3, [pc, #372]	; (8000c00 <StartButtonsTask+0x190>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b5c      	ldr	r3, [pc, #368]	; (8000c04 <StartButtonsTask+0x194>)
 8000a92:	2100      	movs	r1, #0
 8000a94:	5499      	strb	r1, [r3, r2]
			if (buttonNumber == 0) {
 8000a96:	4b5a      	ldr	r3, [pc, #360]	; (8000c00 <StartButtonsTask+0x190>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d121      	bne.n	8000ae2 <StartButtonsTask+0x72>
				if (current_step != lastStep) {
 8000a9e:	4b5a      	ldr	r3, [pc, #360]	; (8000c08 <StartButtonsTask+0x198>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d00f      	beq.n	8000aca <StartButtonsTask+0x5a>
					current_step++;
 8000aaa:	4b57      	ldr	r3, [pc, #348]	; (8000c08 <StartButtonsTask+0x198>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b55      	ldr	r3, [pc, #340]	; (8000c08 <StartButtonsTask+0x198>)
 8000ab4:	801a      	strh	r2, [r3, #0]
					displayStep(step[current_step].name);
 8000ab6:	4b54      	ldr	r3, [pc, #336]	; (8000c08 <StartButtonsTask+0x198>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <StartButtonsTask+0x19c>)
 8000abe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fde8 	bl	8000698 <displayStep>
 8000ac8:	e00b      	b.n	8000ae2 <StartButtonsTask+0x72>
				} else {
					current_step = 0;
 8000aca:	4b4f      	ldr	r3, [pc, #316]	; (8000c08 <StartButtonsTask+0x198>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	801a      	strh	r2, [r3, #0]
					displayStep(step[current_step].name);
 8000ad0:	4b4d      	ldr	r3, [pc, #308]	; (8000c08 <StartButtonsTask+0x198>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <StartButtonsTask+0x19c>)
 8000ad8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fddb 	bl	8000698 <displayStep>
				}
			}
			if (buttonNumber == 1) {
 8000ae2:	4b47      	ldr	r3, [pc, #284]	; (8000c00 <StartButtonsTask+0x190>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	f040 8085 	bne.w	8000bf6 <StartButtonsTask+0x186>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af0:	4847      	ldr	r0, [pc, #284]	; (8000c10 <StartButtonsTask+0x1a0>)
 8000af2:	f001 fe7f 	bl	80027f4 <HAL_GPIO_TogglePin>
				if (current_band != lastBand) {
 8000af6:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	2301      	movs	r3, #1
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d03e      	beq.n	8000b80 <StartButtonsTask+0x110>
					current_band++;
 8000b02:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b0c:	701a      	strb	r2, [r3, #0]
					displayBand(band[current_band].name);
 8000b0e:	4b41      	ldr	r3, [pc, #260]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	4619      	mov	r1, r3
 8000b14:	4a40      	ldr	r2, [pc, #256]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000b16:	460b      	mov	r3, r1
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	440b      	add	r3, r1
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fd9a 	bl	800065c <displayBand>
					max_freq = band[current_band].maxFreq;
 8000b28:	4b3a      	ldr	r3, [pc, #232]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4a3a      	ldr	r2, [pc, #232]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000b30:	460b      	mov	r3, r1
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	440b      	add	r3, r1
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4413      	add	r3, r2
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b36      	ldr	r3, [pc, #216]	; (8000c1c <StartButtonsTask+0x1ac>)
 8000b42:	601a      	str	r2, [r3, #0]
					min_freq = band[current_band].minFreq;
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4a33      	ldr	r2, [pc, #204]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	440b      	add	r3, r1
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	3304      	adds	r3, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <StartButtonsTask+0x1b0>)
 8000b5e:	601a      	str	r2, [r3, #0]
					current_freq = min_freq;
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <StartButtonsTask+0x1b0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a2f      	ldr	r2, [pc, #188]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000b66:	6013      	str	r3, [r2, #0]
					displayFrequency(current_freq);
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fdb1 	bl	80006d4 <displayFrequency>
					si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2101      	movs	r1, #1
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f009 fcd5 	bl	800a528 <si5351_SetupCLK0>
 8000b7e:	e03a      	b.n	8000bf6 <StartButtonsTask+0x186>
				} else {
					current_band = 0;
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
					displayBand(band[current_band].name);
 8000b86:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000b8e:	460b      	mov	r3, r1
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	440b      	add	r3, r1
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fd5e 	bl	800065c <displayBand>
					max_freq = band[current_band].maxFreq;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000ba8:	460b      	mov	r3, r1
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	440b      	add	r3, r1
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <StartButtonsTask+0x1ac>)
 8000bba:	601a      	str	r2, [r3, #0]
					min_freq = band[current_band].minFreq;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <StartButtonsTask+0x1a4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <StartButtonsTask+0x1a8>)
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	440b      	add	r3, r1
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	3304      	adds	r3, #4
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <StartButtonsTask+0x1b0>)
 8000bd6:	601a      	str	r2, [r3, #0]
					current_freq = min_freq;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <StartButtonsTask+0x1b0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000bde:	6013      	str	r3, [r2, #0]
					displayFrequency(current_freq);
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fd75 	bl	80006d4 <displayFrequency>
					si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <StartButtonsTask+0x1b4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f009 fc99 	bl	800a528 <si5351_SetupCLK0>
				}
			}
		}
		osDelay(1);
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f00b fe6a 	bl	800c8d0 <osDelay>
		if (buttonPressed[buttonNumber]) {
 8000bfc:	e73c      	b.n	8000a78 <StartButtonsTask+0x8>
 8000bfe:	bf00      	nop
 8000c00:	20000200 	.word	0x20000200
 8000c04:	20000338 	.word	0x20000338
 8000c08:	20000274 	.word	0x20000274
 8000c0c:	2000001c 	.word	0x2000001c
 8000c10:	40020800 	.word	0x40020800
 8000c14:	20000276 	.word	0x20000276
 8000c18:	20000054 	.word	0x20000054
 8000c1c:	20000204 	.word	0x20000204
 8000c20:	20000208 	.word	0x20000208
 8000c24:	20000270 	.word	0x20000270

08000c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a45      	ldr	r2, [pc, #276]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a3e      	ldr	r2, [pc, #248]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a37      	ldr	r2, [pc, #220]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a30      	ldr	r2, [pc, #192]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <MX_GPIO_Init+0x134>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb4:	482a      	ldr	r0, [pc, #168]	; (8000d60 <MX_GPIO_Init+0x138>)
 8000cb6:	f001 fd6b 	bl	8002790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	211c      	movs	r1, #28
 8000cbe:	4829      	ldr	r0, [pc, #164]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000cc0:	f001 fd66 	bl	8002790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4820      	ldr	r0, [pc, #128]	; (8000d60 <MX_GPIO_Init+0x138>)
 8000cde:	f001 fabd 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAND_BTN_Pin;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAND_BTN_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481b      	ldr	r0, [pc, #108]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000cf8:	f001 fab0 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000cfc:	231c      	movs	r3, #28
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000d14:	f001 faa2 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480e      	ldr	r0, [pc, #56]	; (8000d68 <MX_GPIO_Init+0x140>)
 8000d2e:	f001 fa95 	bl	800225c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2105      	movs	r1, #5
 8000d36:	2006      	movs	r0, #6
 8000d38:	f001 fa4c 	bl	80021d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d3c:	2006      	movs	r0, #6
 8000d3e:	f001 fa75 	bl	800222c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2105      	movs	r1, #5
 8000d46:	2008      	movs	r0, #8
 8000d48:	f001 fa44 	bl	80021d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d4c:	2008      	movs	r0, #8
 8000d4e:	f001 fa6d 	bl	800222c <HAL_NVIC_EnableIRQ>

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020800 	.word	0x40020800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020400 	.word	0x40020400

08000d6c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d72:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <MX_I2C2_Init+0x54>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d78:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <MX_I2C2_Init+0x58>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d8e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_I2C2_Init+0x50>)
 8000daa:	f001 fd63 	bl	8002874 <HAL_I2C_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000db4:	f000 f962 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000218 	.word	0x20000218
 8000dc0:	40005800 	.word	0x40005800
 8000dc4:	000186a0 	.word	0x000186a0

08000dc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <HAL_I2C_MspInit+0xa4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d13c      	bne.n	8000e64 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0c:	2312      	movs	r3, #18
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4814      	ldr	r0, [pc, #80]	; (8000e74 <HAL_I2C_MspInit+0xac>)
 8000e24:	f001 fa1a 	bl	800225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2c:	2312      	movs	r3, #18
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000e38:	2309      	movs	r3, #9
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <HAL_I2C_MspInit+0xac>)
 8000e44:	f001 fa0a 	bl	800225c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005800 	.word	0x40005800
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020400 	.word	0x40020400

08000e78 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000e7e:	f000 fafd 	bl	800147c <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_COLOR565(40, 80, 130));
 8000e82:	f642 2090 	movw	r0, #10896	; 0x2a90
 8000e86:	f000 fccb 	bl	8001820 <ST7735_FillScreen>
    ST7735_WriteString(8, 10, "ShortWave", Font_16x26, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <Display_Init+0x5c>)
 8000e8c:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000e90:	9202      	str	r2, [sp, #8]
 8000e92:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000e96:	9201      	str	r2, [sp, #4]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	9200      	str	r2, [sp, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <Display_Init+0x60>)
 8000ea0:	210a      	movs	r1, #10
 8000ea2:	2008      	movs	r0, #8
 8000ea4:	f000 fb7b 	bl	800159e <ST7735_WriteString>
    ST7735_WriteString(34, 35, "receiver", Font_11x18, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <Display_Init+0x64>)
 8000eaa:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000eae:	9202      	str	r2, [sp, #8]
 8000eb0:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000eb4:	9201      	str	r2, [sp, #4]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	9200      	str	r2, [sp, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <Display_Init+0x68>)
 8000ebe:	2123      	movs	r1, #35	; 0x23
 8000ec0:	2022      	movs	r0, #34	; 0x22
 8000ec2:	f000 fb6c 	bl	800159e <ST7735_WriteString>
    HAL_Delay(3000);
 8000ec6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eca:	f001 f891 	bl	8001ff0 <HAL_Delay>
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000014 	.word	0x20000014
 8000ed8:	08011210 	.word	0x08011210
 8000edc:	2000000c 	.word	0x2000000c
 8000ee0:	0801121c 	.word	0x0801121c

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f001 f840 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f82a 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f7ff fe9a 	bl	8000c28 <MX_GPIO_Init>
  MX_RTC_Init();
 8000ef4:	f000 f8d8 	bl	80010a8 <MX_RTC_Init>
  MX_TIM3_Init();
 8000ef8:	f000 fe50 	bl	8001b9c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000efc:	f000 fea2 	bl	8001c44 <MX_TIM5_Init>
  MX_SPI1_Init();
 8000f00:	f000 f958 	bl	80011b4 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000f04:	f7ff ff32 	bl	8000d6c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000f08:	f00e f9a8 	bl	800f25c <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f0c:	213c      	movs	r1, #60	; 0x3c
 8000f0e:	480b      	ldr	r0, [pc, #44]	; (8000f3c <main+0x58>)
 8000f10:	f006 f9c4 	bl	800729c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000f14:	2104      	movs	r1, #4
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <main+0x5c>)
 8000f18:	f005 fefa 	bl	8006d10 <HAL_TIM_PWM_Start>

  /* Display */
  setBacklight(100);
 8000f1c:	2064      	movs	r0, #100	; 0x64
 8000f1e:	f7ff fc51 	bl	80007c4 <setBacklight>
  Display_Init();
 8000f22:	f7ff ffa9 	bl	8000e78 <Display_Init>
  /* si5251*/
  si5351_Init(0);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f009 f918 	bl	800a15c <si5351_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f2c:	f00b fbf4 	bl	800c718 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f30:	f7ff fc8e 	bl	8000850 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f34:	f00b fc14 	bl	800c760 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <main+0x54>
 8000f3a:	bf00      	nop
 8000f3c:	20000344 	.word	0x20000344
 8000f40:	2000038c 	.word	0x2000038c

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f00e ffd4 	bl	800ff00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <SystemClock_Config+0xcc>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000fa0:	2305      	movs	r3, #5
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000faa:	2301      	movs	r3, #1
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fb8:	2319      	movs	r3, #25
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fbc:	23c0      	movs	r3, #192	; 0xc0
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 fcf7 	bl	80049c0 <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fd8:	f000 f850 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 f809 	bl	8005010 <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001004:	f000 f83a 	bl	800107c <Error_Handler>
  }
}
 8001008:	bf00      	nop
 800100a:	3750      	adds	r7, #80	; 0x50
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, uint8_t *ptr, int len) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS(ptr, len);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4619      	mov	r1, r3
 800102a:	68b8      	ldr	r0, [r7, #8]
 800102c:	f00e f9d4 	bl	800f3d8 <CDC_Transmit_FS>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_write+0x40>)
 8001036:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_write+0x40>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d0f1      	beq.n	8001024 <_write+0xc>

    if (USBD_FAIL == rc) {
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <_write+0x40>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d101      	bne.n	800104c <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8001048:	2300      	movs	r3, #0
 800104a:	e000      	b.n	800104e <_write+0x36>
    }
    return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000277 	.word	0x20000277

0800105c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d101      	bne.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800106e:	f000 ff9f 	bl	8001fb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error_Handler");
 8001084:	4801      	ldr	r0, [pc, #4]	; (800108c <Error_Handler+0x10>)
 8001086:	f00f f823 	bl	80100d0 <iprintf>
 800108a:	e7fb      	b.n	8001084 <Error_Handler+0x8>
 800108c:	08011228 	.word	0x08011228

08001090 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <MX_RTC_Init+0xac>)
 80010c2:	4a25      	ldr	r2, [pc, #148]	; (8001158 <MX_RTC_Init+0xb0>)
 80010c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <MX_RTC_Init+0xac>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_RTC_Init+0xac>)
 80010ce:	227f      	movs	r2, #127	; 0x7f
 80010d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_RTC_Init+0xac>)
 80010d4:	22ff      	movs	r2, #255	; 0xff
 80010d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_RTC_Init+0xac>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_RTC_Init+0xac>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_RTC_Init+0xac>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ea:	481a      	ldr	r0, [pc, #104]	; (8001154 <MX_RTC_Init+0xac>)
 80010ec:	f004 fc4c 	bl	8005988 <HAL_RTC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80010f6:	f7ff ffc1 	bl	800107c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	4619      	mov	r1, r3
 8001114:	480f      	ldr	r0, [pc, #60]	; (8001154 <MX_RTC_Init+0xac>)
 8001116:	f004 fd0f 	bl	8005b38 <HAL_RTC_SetTime>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001120:	f7ff ffac 	bl	800107c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001124:	2305      	movs	r3, #5
 8001126:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001128:	2305      	movs	r3, #5
 800112a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 800112c:	2307      	movs	r3, #7
 800112e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8001130:	2316      	movs	r3, #22
 8001132:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_RTC_Init+0xac>)
 800113c:	f004 fe44 	bl	8005dc8 <HAL_RTC_SetDate>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001146:	f7ff ff99 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000278 	.word	0x20000278
 8001158:	40002800 	.word	0x40002800

0800115c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <HAL_RTC_MspInit+0x50>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d111      	bne.n	80011a4 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001180:	2302      	movs	r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001188:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4618      	mov	r0, r3
 8001190:	f004 f9e4 	bl	800555c <HAL_RCCEx_PeriphCLKConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800119a:	f7ff ff6f 	bl	800107c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_RTC_MspInit+0x54>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40002800 	.word	0x40002800
 80011b0:	42470e3c 	.word	0x42470e3c

080011b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_SPI1_Init+0x64>)
 80011ba:	4a18      	ldr	r2, [pc, #96]	; (800121c <MX_SPI1_Init+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_SPI1_Init+0x64>)
 80011c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_SPI1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_SPI1_Init+0x64>)
 80011e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_SPI1_Init+0x64>)
 8001200:	220a      	movs	r2, #10
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_SPI1_Init+0x64>)
 8001206:	f004 ffa9 	bl	800615c <HAL_SPI_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001210:	f7ff ff34 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000298 	.word	0x20000298
 800121c:	40013000 	.word	0x40013000

08001220 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_SPI_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12b      	bne.n	800129a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 800124c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800127a:	23a0      	movs	r3, #160	; 0xa0
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128a:	2305      	movs	r3, #5
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_SPI_MspInit+0x8c>)
 8001296:	f000 ffe1 	bl	800225c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40013000 	.word	0x40013000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000

080012b0 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2110      	movs	r1, #16
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <ST7735_Select+0x14>)
 80012ba:	f001 fa69 	bl	8002790 <HAL_GPIO_WritePin>
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40020000 	.word	0x40020000

080012c8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2110      	movs	r1, #16
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <ST7735_Unselect+0x14>)
 80012d2:	f001 fa5d 	bl	8002790 <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40020000 	.word	0x40020000

080012e0 <ST7735_Reset>:

static void ST7735_Reset() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2108      	movs	r1, #8
 80012e8:	4806      	ldr	r0, [pc, #24]	; (8001304 <ST7735_Reset+0x24>)
 80012ea:	f001 fa51 	bl	8002790 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80012ee:	2005      	movs	r0, #5
 80012f0:	f000 fe7e 	bl	8001ff0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2108      	movs	r1, #8
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <ST7735_Reset+0x24>)
 80012fa:	f001 fa49 	bl	8002790 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020000 	.word	0x40020000

08001308 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2104      	movs	r1, #4
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <ST7735_WriteCommand+0x2c>)
 8001318:	f001 fa3a 	bl	8002790 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800131c:	1df9      	adds	r1, r7, #7
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	2201      	movs	r2, #1
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <ST7735_WriteCommand+0x30>)
 8001326:	f005 f8b5 	bl	8006494 <HAL_SPI_Transmit>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40020000 	.word	0x40020000
 8001338:	20000298 	.word	0x20000298

0800133c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2104      	movs	r1, #4
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <ST7735_WriteData+0x2c>)
 800134c:	f001 fa20 	bl	8002790 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b29a      	uxth	r2, r3
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <ST7735_WriteData+0x30>)
 800135c:	f005 f89a 	bl	8006494 <HAL_SPI_Transmit>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40020000 	.word	0x40020000
 800136c:	20000298 	.word	0x20000298

08001370 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001382:	e034      	b.n	80013ee <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800138e:	7afb      	ldrb	r3, [r7, #11]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ffb9 	bl	8001308 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80013a0:	7abb      	ldrb	r3, [r7, #10]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80013aa:	7abb      	ldrb	r3, [r7, #10]
 80013ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013b0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80013b2:	7abb      	ldrb	r3, [r7, #10]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d008      	beq.n	80013ca <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80013b8:	7abb      	ldrb	r3, [r7, #10]
 80013ba:	4619      	mov	r1, r3
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ffbd 	bl	800133c <ST7735_WriteData>
            addr += numArgs;
 80013c2:	7abb      	ldrb	r3, [r7, #10]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80013ca:	89bb      	ldrh	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00e      	beq.n	80013ee <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80013da:	89bb      	ldrh	r3, [r7, #12]
 80013dc:	2bff      	cmp	r3, #255	; 0xff
 80013de:	d102      	bne.n	80013e6 <ST7735_ExecuteCommandList+0x76>
 80013e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80013e6:	89bb      	ldrh	r3, [r7, #12]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fe01 	bl	8001ff0 <HAL_Delay>
    while(numCommands--) {
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	1e5a      	subs	r2, r3, #1
 80013f2:	73fa      	strb	r2, [r7, #15]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1c5      	bne.n	8001384 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001402:	b590      	push	{r4, r7, lr}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	4604      	mov	r4, r0
 800140a:	4608      	mov	r0, r1
 800140c:	4611      	mov	r1, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4623      	mov	r3, r4
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	4603      	mov	r3, r0
 8001416:	71bb      	strb	r3, [r7, #6]
 8001418:	460b      	mov	r3, r1
 800141a:	717b      	strb	r3, [r7, #5]
 800141c:	4613      	mov	r3, r2
 800141e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001420:	202a      	movs	r0, #42	; 0x2a
 8001422:	f7ff ff71 	bl	8001308 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001426:	2300      	movs	r3, #0
 8001428:	733b      	strb	r3, [r7, #12]
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	3301      	adds	r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	737b      	strb	r3, [r7, #13]
 8001432:	2300      	movs	r3, #0
 8001434:	73bb      	strb	r3, [r7, #14]
 8001436:	797b      	ldrb	r3, [r7, #5]
 8001438:	3301      	adds	r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	2104      	movs	r1, #4
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff79 	bl	800133c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800144a:	202b      	movs	r0, #43	; 0x2b
 800144c:	f7ff ff5c 	bl	8001308 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	331a      	adds	r3, #26
 8001454:	b2db      	uxtb	r3, r3
 8001456:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001458:	793b      	ldrb	r3, [r7, #4]
 800145a:	331a      	adds	r3, #26
 800145c:	b2db      	uxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2104      	movs	r1, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff68 	bl	800133c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800146c:	202c      	movs	r0, #44	; 0x2c
 800146e:	f7ff ff4b 	bl	8001308 <ST7735_WriteCommand>
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bd90      	pop	{r4, r7, pc}
	...

0800147c <ST7735_Init>:

void ST7735_Init() {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001480:	f7ff ff16 	bl	80012b0 <ST7735_Select>
    ST7735_Reset();
 8001484:	f7ff ff2c 	bl	80012e0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <ST7735_Init+0x28>)
 800148a:	f7ff ff71 	bl	8001370 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <ST7735_Init+0x2c>)
 8001490:	f7ff ff6e 	bl	8001370 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <ST7735_Init+0x30>)
 8001496:	f7ff ff6b 	bl	8001370 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800149a:	f7ff ff15 	bl	80012c8 <ST7735_Unselect>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	08013db8 	.word	0x08013db8
 80014a8:	08013df4 	.word	0x08013df4
 80014ac:	08013e04 	.word	0x08013e04

080014b0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80014b0:	b082      	sub	sp, #8
 80014b2:	b590      	push	{r4, r7, lr}
 80014b4:	b089      	sub	sp, #36	; 0x24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
 80014be:	460b      	mov	r3, r1
 80014c0:	80bb      	strh	r3, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	b2d8      	uxtb	r0, r3
 80014ca:	88bb      	ldrh	r3, [r7, #4]
 80014cc:	b2d9      	uxtb	r1, r3
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80014d6:	4413      	add	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3b01      	subs	r3, #1
 80014dc:	b2dc      	uxtb	r4, r3
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80014e6:	4413      	add	r3, r2
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4622      	mov	r2, r4
 80014f0:	f7ff ff87 	bl	8001402 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	e043      	b.n	8001582 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80014fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	3b20      	subs	r3, #32
 8001500:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	4619      	mov	r1, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	440b      	add	r3, r1
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	e029      	b.n	8001570 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00e      	beq.n	800154a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800152c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	b29b      	uxth	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	743b      	strb	r3, [r7, #16]
 8001536:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001538:	b2db      	uxtb	r3, r3
 800153a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fefa 	bl	800133c <ST7735_WriteData>
 8001548:	e00f      	b.n	800156a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800154a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800154e:	0a1b      	lsrs	r3, r3, #8
 8001550:	b29b      	uxth	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	733b      	strb	r3, [r7, #12]
 8001556:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800155a:	b2db      	uxtb	r3, r3
 800155c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2102      	movs	r1, #2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fee9 	bl	800133c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	3301      	adds	r3, #1
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001574:	461a      	mov	r2, r3
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4293      	cmp	r3, r2
 800157a:	d3cf      	bcc.n	800151c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	3301      	adds	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001586:	461a      	mov	r2, r3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4293      	cmp	r3, r2
 800158c:	d3b5      	bcc.n	80014fa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	3724      	adds	r7, #36	; 0x24
 8001594:	46bd      	mov	sp, r7
 8001596:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800159a:	b002      	add	sp, #8
 800159c:	4770      	bx	lr

0800159e <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800159e:	b082      	sub	sp, #8
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af04      	add	r7, sp, #16
 80015a6:	603a      	str	r2, [r7, #0]
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
 80015ae:	460b      	mov	r3, r1
 80015b0:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80015b2:	f7ff fe7d 	bl	80012b0 <ST7735_Select>

    while(*str) {
 80015b6:	e02d      	b.n	8001614 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	7d3a      	ldrb	r2, [r7, #20]
 80015bc:	4413      	add	r3, r2
 80015be:	2b9f      	cmp	r3, #159	; 0x9f
 80015c0:	dd13      	ble.n	80015ea <ST7735_WriteString+0x4c>
            x = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80015c6:	7d7b      	ldrb	r3, [r7, #21]
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	88bb      	ldrh	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80015d0:	88bb      	ldrh	r3, [r7, #4]
 80015d2:	7d7a      	ldrb	r2, [r7, #21]
 80015d4:	4413      	add	r3, r2
 80015d6:	2b4f      	cmp	r3, #79	; 0x4f
 80015d8:	dc21      	bgt.n	800161e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d103      	bne.n	80015ea <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	603b      	str	r3, [r7, #0]
                continue;
 80015e8:	e014      	b.n	8001614 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	88b9      	ldrh	r1, [r7, #4]
 80015f0:	88f8      	ldrh	r0, [r7, #6]
 80015f2:	8c3b      	ldrh	r3, [r7, #32]
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	8bbb      	ldrh	r3, [r7, #28]
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f7ff ff56 	bl	80014b0 <ST7735_WriteChar>
        x += font.width;
 8001604:	7d3b      	ldrb	r3, [r7, #20]
 8001606:	b29a      	uxth	r2, r3
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	4413      	add	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]
        str++;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	3301      	adds	r3, #1
 8001612:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1cd      	bne.n	80015b8 <ST7735_WriteString+0x1a>
 800161c:	e000      	b.n	8001620 <ST7735_WriteString+0x82>
                break;
 800161e:	bf00      	nop
    }

    ST7735_Unselect();
 8001620:	f7ff fe52 	bl	80012c8 <ST7735_Unselect>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800162e:	b002      	add	sp, #8
 8001630:	4770      	bx	lr
	...

08001634 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	4604      	mov	r4, r0
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4623      	mov	r3, r4
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	4603      	mov	r3, r0
 8001648:	80bb      	strh	r3, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	807b      	strh	r3, [r7, #2]
 800164e:	4613      	mov	r3, r2
 8001650:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	2b9f      	cmp	r3, #159	; 0x9f
 8001656:	d857      	bhi.n	8001708 <ST7735_FillRectangle+0xd4>
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	2b4f      	cmp	r3, #79	; 0x4f
 800165c:	d854      	bhi.n	8001708 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800165e:	88fa      	ldrh	r2, [r7, #6]
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	4413      	add	r3, r2
 8001664:	2ba0      	cmp	r3, #160	; 0xa0
 8001666:	dd03      	ble.n	8001670 <ST7735_FillRectangle+0x3c>
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800166e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001670:	88ba      	ldrh	r2, [r7, #4]
 8001672:	883b      	ldrh	r3, [r7, #0]
 8001674:	4413      	add	r3, r2
 8001676:	2b50      	cmp	r3, #80	; 0x50
 8001678:	dd03      	ble.n	8001682 <ST7735_FillRectangle+0x4e>
 800167a:	88bb      	ldrh	r3, [r7, #4]
 800167c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001680:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001682:	f7ff fe15 	bl	80012b0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	88bb      	ldrh	r3, [r7, #4]
 800168c:	b2d9      	uxtb	r1, r3
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4413      	add	r3, r2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	3b01      	subs	r3, #1
 800169c:	b2dc      	uxtb	r4, r3
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	883b      	ldrh	r3, [r7, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4622      	mov	r2, r4
 80016b0:	f7ff fea7 	bl	8001402 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80016b4:	8c3b      	ldrh	r3, [r7, #32]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	733b      	strb	r3, [r7, #12]
 80016be:	8c3b      	ldrh	r3, [r7, #32]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2104      	movs	r1, #4
 80016c8:	4811      	ldr	r0, [pc, #68]	; (8001710 <ST7735_FillRectangle+0xdc>)
 80016ca:	f001 f861 	bl	8002790 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80016ce:	883b      	ldrh	r3, [r7, #0]
 80016d0:	80bb      	strh	r3, [r7, #4]
 80016d2:	e013      	b.n	80016fc <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	80fb      	strh	r3, [r7, #6]
 80016d8:	e00a      	b.n	80016f0 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80016da:	f107 010c 	add.w	r1, r7, #12
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	2202      	movs	r2, #2
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <ST7735_FillRectangle+0xe0>)
 80016e6:	f004 fed5 	bl	8006494 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	80fb      	strh	r3, [r7, #6]
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f1      	bne.n	80016da <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 80016f6:	88bb      	ldrh	r3, [r7, #4]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	80bb      	strh	r3, [r7, #4]
 80016fc:	88bb      	ldrh	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1e8      	bne.n	80016d4 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001702:	f7ff fde1 	bl	80012c8 <ST7735_Unselect>
 8001706:	e000      	b.n	800170a <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001708:	bf00      	nop
}
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bd90      	pop	{r4, r7, pc}
 8001710:	40020000 	.word	0x40020000
 8001714:	20000298 	.word	0x20000298

08001718 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4623      	mov	r3, r4
 8001728:	80fb      	strh	r3, [r7, #6]
 800172a:	4603      	mov	r3, r0
 800172c:	80bb      	strh	r3, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	807b      	strh	r3, [r7, #2]
 8001732:	4613      	mov	r3, r2
 8001734:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	2b9f      	cmp	r3, #159	; 0x9f
 800173a:	d869      	bhi.n	8001810 <ST7735_FillRectangleFast+0xf8>
 800173c:	88bb      	ldrh	r3, [r7, #4]
 800173e:	2b4f      	cmp	r3, #79	; 0x4f
 8001740:	d866      	bhi.n	8001810 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001742:	88fa      	ldrh	r2, [r7, #6]
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	4413      	add	r3, r2
 8001748:	2ba0      	cmp	r3, #160	; 0xa0
 800174a:	dd03      	ble.n	8001754 <ST7735_FillRectangleFast+0x3c>
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001752:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001754:	88ba      	ldrh	r2, [r7, #4]
 8001756:	883b      	ldrh	r3, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	2b50      	cmp	r3, #80	; 0x50
 800175c:	dd03      	ble.n	8001766 <ST7735_FillRectangleFast+0x4e>
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001764:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001766:	f7ff fda3 	bl	80012b0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	b2d8      	uxtb	r0, r3
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	b2d9      	uxtb	r1, r3
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4413      	add	r3, r2
 800177c:	b2db      	uxtb	r3, r3
 800177e:	3b01      	subs	r3, #1
 8001780:	b2dc      	uxtb	r4, r3
 8001782:	88bb      	ldrh	r3, [r7, #4]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	883b      	ldrh	r3, [r7, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4413      	add	r3, r2
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3b01      	subs	r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4622      	mov	r2, r4
 8001794:	f7ff fe35 	bl	8001402 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001798:	8c3b      	ldrh	r3, [r7, #32]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	b29b      	uxth	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	723b      	strb	r3, [r7, #8]
 80017a2:	8c3b      	ldrh	r3, [r7, #32]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00e fb89 	bl	800fec4 <malloc>
 80017b2:	4603      	mov	r3, r0
 80017b4:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80017b6:	2300      	movs	r3, #0
 80017b8:	80fb      	strh	r3, [r7, #6]
 80017ba:	e008      	b.n	80017ce <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	893a      	ldrh	r2, [r7, #8]
 80017c6:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	3301      	adds	r3, #1
 80017cc:	80fb      	strh	r3, [r7, #6]
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3f2      	bcc.n	80017bc <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	2104      	movs	r1, #4
 80017da:	480f      	ldr	r0, [pc, #60]	; (8001818 <ST7735_FillRectangleFast+0x100>)
 80017dc:	f000 ffd8 	bl	8002790 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80017e0:	883b      	ldrh	r3, [r7, #0]
 80017e2:	80bb      	strh	r3, [r7, #4]
 80017e4:	e00b      	b.n	80017fe <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	480a      	ldr	r0, [pc, #40]	; (800181c <ST7735_FillRectangleFast+0x104>)
 80017f4:	f004 fe4e 	bl	8006494 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 80017f8:	88bb      	ldrh	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	80bb      	strh	r3, [r7, #4]
 80017fe:	88bb      	ldrh	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <ST7735_FillRectangleFast+0xce>

    free(line);
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f00e fb65 	bl	800fed4 <free>
    ST7735_Unselect();
 800180a:	f7ff fd5d 	bl	80012c8 <ST7735_Unselect>
 800180e:	e000      	b.n	8001812 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001810:	bf00      	nop
}
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	40020000 	.word	0x40020000
 800181c:	20000298 	.word	0x20000298

08001820 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af02      	add	r7, sp, #8
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2350      	movs	r3, #80	; 0x50
 8001830:	22a0      	movs	r2, #160	; 0xa0
 8001832:	2100      	movs	r1, #0
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fefd 	bl	8001634 <ST7735_FillRectangle>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_MspInit+0x54>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_MspInit+0x54>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_MspInit+0x54>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_MspInit+0x54>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <HAL_MspInit+0x54>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_MspInit+0x54>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	210f      	movs	r1, #15
 8001886:	f06f 0001 	mvn.w	r0, #1
 800188a:	f000 fca3 	bl	80021d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	201c      	movs	r0, #28
 80018b2:	f000 fc8f 	bl	80021d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018b6:	201c      	movs	r0, #28
 80018b8:	f000 fcb8 	bl	800222c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_InitTick+0xa8>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <HAL_InitTick+0xa8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_InitTick+0xa8>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018d8:	f107 0210 	add.w	r2, r7, #16
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fe08 	bl	80054f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018e8:	f003 fdf2 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 80018ec:	4603      	mov	r3, r0
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <HAL_InitTick+0xac>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0c9b      	lsrs	r3, r3, #18
 80018fc:	3b01      	subs	r3, #1
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0xb0>)
 8001902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001906:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_InitTick+0xb0>)
 800190a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800190e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_InitTick+0xb0>)
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001914:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_InitTick+0xb0>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_InitTick+0xb0>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <HAL_InitTick+0xb0>)
 8001924:	f004 ffcc 	bl	80068c0 <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d104      	bne.n	8001938 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <HAL_InitTick+0xb0>)
 8001930:	f005 f88c 	bl	8006a4c <HAL_TIM_Base_Start_IT>
 8001934:	4603      	mov	r3, r0
 8001936:	e000      	b.n	800193a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	3730      	adds	r7, #48	; 0x30
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	431bde83 	.word	0x431bde83
 800194c:	200002f0 	.word	0x200002f0

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BAND_BTN_Pin);
 8001980:	2001      	movs	r0, #1
 8001982:	f000 ff5f 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}

0800198a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 800198e:	2004      	movs	r0, #4
 8001990:	f000 ff58 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM2_IRQHandler+0x10>)
 800199e:	f005 fd3b 	bl	8007418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200002f0 	.word	0x200002f0

080019ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019b0:	4808      	ldr	r0, [pc, #32]	; (80019d4 <TIM3_IRQHandler+0x28>)
 80019b2:	f005 fd31 	bl	8007418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <TIM3_IRQHandler+0x2c>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <TIM3_IRQHandler+0x2c>)
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <TIM3_IRQHandler+0x2c>)
 80019c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019cc:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000344 	.word	0x20000344
 80019d8:	40000400 	.word	0x40000400

080019dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM5_IRQHandler+0x10>)
 80019e2:	f005 fd19 	bl	8007418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000038c 	.word	0x2000038c

080019f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <OTG_FS_IRQHandler+0x10>)
 80019f6:	f001 feb6 	bl	8003766 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2001aadc 	.word	0x2001aadc

08001a04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
	buttonNumber = -1;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x58>)
 8001a10:	22ff      	movs	r2, #255	; 0xff
 8001a12:	701a      	strb	r2, [r3, #0]
    if(GPIO_Pin == ENC_BTN_Pin)
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d103      	bne.n	8001a22 <HAL_GPIO_EXTI_Callback+0x1e>
    {
		buttonNumber = 0;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e005      	b.n	8001a2e <HAL_GPIO_EXTI_Callback+0x2a>
    } else if(GPIO_Pin == BAND_BTN_Pin)
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d102      	bne.n	8001a2e <HAL_GPIO_EXTI_Callback+0x2a>
    {
		buttonNumber = 1;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x58>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
	if(buttonNumber < 0) {
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8001a2e:	f000 fad3 	bl	8001fd8 <HAL_GetTick>
 8001a32:	60f8      	str	r0, [r7, #12]
    if(tstamp - lastPressed < 250)
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2bf9      	cmp	r3, #249	; 0xf9
 8001a3e:	d909      	bls.n	8001a54 <HAL_GPIO_EXTI_Callback+0x50>
        return;
    lastPressed = tstamp;
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x58>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]
 8001a52:	e000      	b.n	8001a56 <HAL_GPIO_EXTI_Callback+0x52>
        return;
 8001a54:	bf00      	nop
}
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000200 	.word	0x20000200
 8001a60:	2000033c 	.word	0x2000033c
 8001a64:	20000338 	.word	0x20000338

08001a68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e00a      	b.n	8001a90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a7a:	f3af 8000 	nop.w
 8001a7e:	4601      	mov	r1, r0
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	60ba      	str	r2, [r7, #8]
 8001a86:	b2ca      	uxtb	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbf0      	blt.n	8001a7a <_read+0x12>
	}

return len;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
	return -1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aca:	605a      	str	r2, [r3, #4]
	return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_isatty>:

int _isatty(int file)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
	return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <_sbrk+0x5c>)
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <_sbrk+0x60>)
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <_sbrk+0x64>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <_sbrk+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d207      	bcs.n	8001b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b3c:	f00e f89e 	bl	800fc7c <__errno>
 8001b40:	4603      	mov	r3, r0
 8001b42:	220c      	movs	r2, #12
 8001b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	e009      	b.n	8001b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <_sbrk+0x64>)
 8001b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20020000 	.word	0x20020000
 8001b6c:	00000800 	.word	0x00000800
 8001b70:	20000340 	.word	0x20000340
 8001b74:	2001b218 	.word	0x2001b218

08001b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <SystemInit+0x20>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <SystemInit+0x20>)
 8001b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	2224      	movs	r2, #36	; 0x24
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f00e f9a8 	bl	800ff00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <MX_TIM3_Init+0xa0>)
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <MX_TIM3_Init+0xa4>)
 8001bbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <MX_TIM3_Init+0xa0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <MX_TIM3_Init+0xa0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <MX_TIM3_Init+0xa0>)
 8001bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_TIM3_Init+0xa0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_TIM3_Init+0xa0>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001be6:	2301      	movs	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4619      	mov	r1, r3
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <MX_TIM3_Init+0xa0>)
 8001c0a:	f005 f9ad 	bl	8006f68 <HAL_TIM_Encoder_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c14:	f7ff fa32 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_TIM3_Init+0xa0>)
 8001c26:	f006 fd79 	bl	800871c <HAL_TIMEx_MasterConfigSynchronization>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c30:	f7ff fa24 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3730      	adds	r7, #48	; 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000344 	.word	0x20000344
 8001c40:	40000400 	.word	0x40000400

08001c44 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08e      	sub	sp, #56	; 0x38
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	615a      	str	r2, [r3, #20]
 8001c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c74:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001c76:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <MX_TIM5_Init+0xe8>)
 8001c78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 8001c7a:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001c7c:	222f      	movs	r2, #47	; 0x2f
 8001c7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c80:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8001c86:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001c88:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001c8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c9a:	4823      	ldr	r0, [pc, #140]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001c9c:	f004 fe10 	bl	80068c0 <HAL_TIM_Base_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001ca6:	f7ff f9e9 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	481c      	ldr	r0, [pc, #112]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001cb8:	f005 fe5c 	bl	8007974 <HAL_TIM_ConfigClockSource>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001cc2:	f7ff f9db 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001cc6:	4818      	ldr	r0, [pc, #96]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001cc8:	f004 ff52 	bl	8006b70 <HAL_TIM_PWM_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001cd2:	f7ff f9d3 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cde:	f107 0320 	add.w	r3, r7, #32
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4810      	ldr	r0, [pc, #64]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001ce6:	f006 fd19 	bl	800871c <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001cf0:	f7ff f9c4 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf4:	2360      	movs	r3, #96	; 0x60
 8001cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2204      	movs	r2, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4807      	ldr	r0, [pc, #28]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001d0c:	f005 fc8c 	bl	8007628 <HAL_TIM_PWM_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001d16:	f7ff f9b1 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001d1a:	4803      	ldr	r0, [pc, #12]	; (8001d28 <MX_TIM5_Init+0xe4>)
 8001d1c:	f000 f8a0 	bl	8001e60 <HAL_TIM_MspPostInit>

}
 8001d20:	bf00      	nop
 8001d22:	3738      	adds	r7, #56	; 0x38
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000038c 	.word	0x2000038c
 8001d2c:	40000c00 	.word	0x40000c00

08001d30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d151      	bne.n	8001df6 <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a2a      	ldr	r2, [pc, #168]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001da6:	2340      	movs	r3, #64	; 0x40
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001db6:	2302      	movs	r3, #2
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4811      	ldr	r0, [pc, #68]	; (8001e08 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001dc2:	f000 fa4b 	bl	800225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	480a      	ldr	r0, [pc, #40]	; (8001e0c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001de2:	f000 fa3b 	bl	800225c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2105      	movs	r1, #5
 8001dea:	201d      	movs	r0, #29
 8001dec:	f000 f9f2 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001df0:	201d      	movs	r0, #29
 8001df2:	f000 fa1b 	bl	800222c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40000400 	.word	0x40000400
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400

08001e10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <HAL_TIM_Base_MspInit+0x48>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d115      	bne.n	8001e4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_TIM_Base_MspInit+0x4c>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_TIM_Base_MspInit+0x4c>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_TIM_Base_MspInit+0x4c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2105      	movs	r1, #5
 8001e42:	2032      	movs	r0, #50	; 0x32
 8001e44:	f000 f9c6 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e48:	2032      	movs	r0, #50	; 0x32
 8001e4a:	f000 f9ef 	bl	800222c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40000c00 	.word	0x40000c00
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <HAL_TIM_MspPostInit+0x68>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d11d      	bne.n	8001ebe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_TIM_MspPostInit+0x6c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_TIM_MspPostInit+0x6c>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_TIM_MspPostInit+0x6c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_TIM_MspPostInit+0x70>)
 8001eba:	f000 f9cf 	bl	800225c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ebe:	bf00      	nop
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40000c00 	.word	0x40000c00
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <USR_TIM_PWM_OpenTim5Ch2>:
  /* USER CODE END TIM5_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USR_TIM_PWM_OpenTim5Ch2() {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <USR_TIM_PWM_OpenTim5Ch2+0x10>)
 8001edc:	f004 ff18 	bl	8006d10 <HAL_TIM_PWM_Start>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000038c 	.word	0x2000038c

08001ee8 <USR_TIM_PWM_SetCompare>:
void USR_TIM_PWM_CloseTim5Ch2() {
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
}

//duty == 0~1000
void USR_TIM_PWM_SetCompare(uint16_t duty) {
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
	if (duty > 1000) // здесь 1000, потому что порог подсчета установлен в 1 тысячу
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef8:	d902      	bls.n	8001f00 <USR_TIM_PWM_SetCompare+0x18>
			{
		duty = 1000;
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	80fb      	strh	r3, [r7, #6]
	}
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, duty);
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <USR_TIM_PWM_SetCompare+0x2c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	88fa      	ldrh	r2, [r7, #6]
 8001f06:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	2000038c 	.word	0x2000038c

08001f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f1e:	490e      	ldr	r1, [pc, #56]	; (8001f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f20:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f34:	4c0b      	ldr	r4, [pc, #44]	; (8001f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f42:	f7ff fe19 	bl	8001b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f46:	f00d ff95 	bl	800fe74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4a:	f7fe ffcb 	bl	8000ee4 <main>
  bx  lr    
 8001f4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f58:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001f5c:	08013ef0 	.word	0x08013ef0
  ldr r2, =_sbss
 8001f60:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001f64:	2001b218 	.word	0x2001b218

08001f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <HAL_Init+0x40>)
 8001f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_Init+0x40>)
 8001f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_Init+0x40>)
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 f8fd 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f7ff fc7e 	bl	800189c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff fc50 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000074 	.word	0x20000074
 8001fd4:	200003d4 	.word	0x200003d4

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	200003d4 	.word	0x200003d4

08001ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff ffee 	bl	8001fd8 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d005      	beq.n	8002016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_Delay+0x44>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002016:	bf00      	nop
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d8f7      	bhi.n	8002018 <HAL_Delay+0x28>
  {
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000074 	.word	0x20000074

08002038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	; (80020d4 <__NVIC_EnableIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
         );
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b07      	cmp	r3, #7
 80021a0:	d00f      	beq.n	80021c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b06      	cmp	r3, #6
 80021a6:	d00c      	beq.n	80021c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d009      	beq.n	80021c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d006      	beq.n	80021c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d003      	beq.n	80021c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021ba:	2190      	movs	r1, #144	; 0x90
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80021be:	f7fe ff67 	bl	8001090 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ff38 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	08011238 	.word	0x08011238

080021d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d903      	bls.n	80021f4 <HAL_NVIC_SetPriority+0x20>
 80021ec:	21a8      	movs	r1, #168	; 0xa8
 80021ee:	480e      	ldr	r0, [pc, #56]	; (8002228 <HAL_NVIC_SetPriority+0x54>)
 80021f0:	f7fe ff4e 	bl	8001090 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b0f      	cmp	r3, #15
 80021f8:	d903      	bls.n	8002202 <HAL_NVIC_SetPriority+0x2e>
 80021fa:	21a9      	movs	r1, #169	; 0xa9
 80021fc:	480a      	ldr	r0, [pc, #40]	; (8002228 <HAL_NVIC_SetPriority+0x54>)
 80021fe:	f7fe ff47 	bl	8001090 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002202:	f7ff ff3d 	bl	8002080 <__NVIC_GetPriorityGrouping>
 8002206:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	6978      	ldr	r0, [r7, #20]
 800220e:	f7ff ff8d 	bl	800212c <NVIC_EncodePriority>
 8002212:	4602      	mov	r2, r0
 8002214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff5c 	bl	80020d8 <__NVIC_SetPriority>
}
 8002220:	bf00      	nop
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	08011238 	.word	0x08011238

0800222c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	da03      	bge.n	8002246 <HAL_NVIC_EnableIRQ+0x1a>
 800223e:	21bc      	movs	r1, #188	; 0xbc
 8002240:	4805      	ldr	r0, [pc, #20]	; (8002258 <HAL_NVIC_EnableIRQ+0x2c>)
 8002242:	f7fe ff25 	bl	8001090 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff26 	bl	800209c <__NVIC_EnableIRQ>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	08011238 	.word	0x08011238

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a33      	ldr	r2, [pc, #204]	; (8002344 <HAL_GPIO_Init+0xe8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d017      	beq.n	80022aa <HAL_GPIO_Init+0x4e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a32      	ldr	r2, [pc, #200]	; (8002348 <HAL_GPIO_Init+0xec>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0x4e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a31      	ldr	r2, [pc, #196]	; (800234c <HAL_GPIO_Init+0xf0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00f      	beq.n	80022aa <HAL_GPIO_Init+0x4e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a30      	ldr	r2, [pc, #192]	; (8002350 <HAL_GPIO_Init+0xf4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00b      	beq.n	80022aa <HAL_GPIO_Init+0x4e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <HAL_GPIO_Init+0xf8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x4e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <HAL_GPIO_Init+0xfc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x4e>
 80022a2:	21ac      	movs	r1, #172	; 0xac
 80022a4:	482d      	ldr	r0, [pc, #180]	; (800235c <HAL_GPIO_Init+0x100>)
 80022a6:	f7fe fef3 	bl	8001090 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_GPIO_Init+0x64>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	041b      	lsls	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x6c>
 80022c0:	21ad      	movs	r1, #173	; 0xad
 80022c2:	4826      	ldr	r0, [pc, #152]	; (800235c <HAL_GPIO_Init+0x100>)
 80022c4:	f7fe fee4 	bl	8001090 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d035      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d031      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b11      	cmp	r3, #17
 80022de:	d02d      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d029      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d025      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80022f8:	d020      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002302:	d01b      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800230c:	d016      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002316:	d011      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002320:	d00c      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800232a:	d007      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0xe0>
 8002334:	21ae      	movs	r1, #174	; 0xae
 8002336:	4809      	ldr	r0, [pc, #36]	; (800235c <HAL_GPIO_Init+0x100>)
 8002338:	f7fe feaa 	bl	8001090 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	e20c      	b.n	800275c <HAL_GPIO_Init+0x500>
 8002342:	bf00      	nop
 8002344:	40020000 	.word	0x40020000
 8002348:	40020400 	.word	0x40020400
 800234c:	40020800 	.word	0x40020800
 8002350:	40020c00 	.word	0x40020c00
 8002354:	40021000 	.word	0x40021000
 8002358:	40021c00 	.word	0x40021c00
 800235c:	08011274 	.word	0x08011274
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	f040 81ec 	bne.w	8002756 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d005      	beq.n	8002396 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002392:	2b02      	cmp	r3, #2
 8002394:	d144      	bne.n	8002420 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00f      	beq.n	80023be <HAL_GPIO_Init+0x162>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d00b      	beq.n	80023be <HAL_GPIO_Init+0x162>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d007      	beq.n	80023be <HAL_GPIO_Init+0x162>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x162>
 80023b6:	21c0      	movs	r1, #192	; 0xc0
 80023b8:	4884      	ldr	r0, [pc, #528]	; (80025cc <HAL_GPIO_Init+0x370>)
 80023ba:	f7fe fe69 	bl	8001090 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 0201 	and.w	r2, r3, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b03      	cmp	r3, #3
 800242a:	d027      	beq.n	800247c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <HAL_GPIO_Init+0x1f0>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d007      	beq.n	800244c <HAL_GPIO_Init+0x1f0>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x1f0>
 8002444:	21d1      	movs	r1, #209	; 0xd1
 8002446:	4861      	ldr	r0, [pc, #388]	; (80025cc <HAL_GPIO_Init+0x370>)
 8002448:	f7fe fe22 	bl	8001090 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b02      	cmp	r3, #2
 8002486:	f040 80a3 	bne.w	80025d0 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d077      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b09      	cmp	r3, #9
 8002498:	d073      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d06f      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d06b      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d067      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d063      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d05f      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d05b      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d057      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d053      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d04f      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d04b      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d047      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d043      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d03f      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d03b      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b05      	cmp	r3, #5
 8002510:	d037      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b06      	cmp	r3, #6
 8002518:	d033      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b06      	cmp	r3, #6
 8002520:	d02f      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b05      	cmp	r3, #5
 8002528:	d02b      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d027      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b07      	cmp	r3, #7
 8002538:	d023      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b07      	cmp	r3, #7
 8002540:	d01f      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b07      	cmp	r3, #7
 8002548:	d01b      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b08      	cmp	r3, #8
 8002550:	d017      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b0a      	cmp	r3, #10
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b09      	cmp	r3, #9
 8002560:	d00f      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b09      	cmp	r3, #9
 8002568:	d00b      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d007      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b0f      	cmp	r3, #15
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x326>
 800257a:	21de      	movs	r1, #222	; 0xde
 800257c:	4813      	ldr	r0, [pc, #76]	; (80025cc <HAL_GPIO_Init+0x370>)
 800257e:	f7fe fd87 	bl	8001090 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	69b9      	ldr	r1, [r7, #24]
 80025c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025ca:	e001      	b.n	80025d0 <HAL_GPIO_Init+0x374>
 80025cc:	08011274 	.word	0x08011274
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0203 	and.w	r2, r3, #3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a2 	beq.w	8002756 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b56      	ldr	r3, [pc, #344]	; (8002770 <HAL_GPIO_Init+0x514>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	4a55      	ldr	r2, [pc, #340]	; (8002770 <HAL_GPIO_Init+0x514>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6453      	str	r3, [r2, #68]	; 0x44
 8002622:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_GPIO_Init+0x514>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262e:	4a51      	ldr	r2, [pc, #324]	; (8002774 <HAL_GPIO_Init+0x518>)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a48      	ldr	r2, [pc, #288]	; (8002778 <HAL_GPIO_Init+0x51c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d019      	beq.n	800268e <HAL_GPIO_Init+0x432>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a47      	ldr	r2, [pc, #284]	; (800277c <HAL_GPIO_Init+0x520>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_GPIO_Init+0x42e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a46      	ldr	r2, [pc, #280]	; (8002780 <HAL_GPIO_Init+0x524>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00d      	beq.n	8002686 <HAL_GPIO_Init+0x42a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a45      	ldr	r2, [pc, #276]	; (8002784 <HAL_GPIO_Init+0x528>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <HAL_GPIO_Init+0x426>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a44      	ldr	r2, [pc, #272]	; (8002788 <HAL_GPIO_Init+0x52c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_GPIO_Init+0x422>
 800267a:	2304      	movs	r3, #4
 800267c:	e008      	b.n	8002690 <HAL_GPIO_Init+0x434>
 800267e:	2307      	movs	r3, #7
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x434>
 8002682:	2303      	movs	r3, #3
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x434>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x434>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x434>
 800268e:	2300      	movs	r3, #0
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f002 0203 	and.w	r2, r2, #3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4093      	lsls	r3, r2
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a0:	4934      	ldr	r1, [pc, #208]	; (8002774 <HAL_GPIO_Init+0x518>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_GPIO_Init+0x530>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d2:	4a2e      	ldr	r2, [pc, #184]	; (800278c <HAL_GPIO_Init+0x530>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d8:	4b2c      	ldr	r3, [pc, #176]	; (800278c <HAL_GPIO_Init+0x530>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026fc:	4a23      	ldr	r2, [pc, #140]	; (800278c <HAL_GPIO_Init+0x530>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_GPIO_Init+0x530>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002726:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_GPIO_Init+0x530>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_GPIO_Init+0x530>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <HAL_GPIO_Init+0x530>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3301      	adds	r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b0f      	cmp	r3, #15
 8002760:	f67f adfe 	bls.w	8002360 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40013800 	.word	0x40013800
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40013c00 	.word	0x40013c00

08002790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
 800279c:	4613      	mov	r3, r2
 800279e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <HAL_GPIO_WritePin+0x20>
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	0c1b      	lsrs	r3, r3, #16
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d004      	beq.n	80027ba <HAL_GPIO_WritePin+0x2a>
 80027b0:	f240 119d 	movw	r1, #413	; 0x19d
 80027b4:	480e      	ldr	r0, [pc, #56]	; (80027f0 <HAL_GPIO_WritePin+0x60>)
 80027b6:	f7fe fc6b 	bl	8001090 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80027ba:	787b      	ldrb	r3, [r7, #1]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_GPIO_WritePin+0x40>
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d004      	beq.n	80027d0 <HAL_GPIO_WritePin+0x40>
 80027c6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80027ca:	4809      	ldr	r0, [pc, #36]	; (80027f0 <HAL_GPIO_WritePin+0x60>)
 80027cc:	f7fe fc60 	bl	8001090 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	08011274 	.word	0x08011274

080027f4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <HAL_GPIO_TogglePin+0x1c>
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_GPIO_TogglePin+0x26>
 8002810:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002814:	480a      	ldr	r0, [pc, #40]	; (8002840 <HAL_GPIO_TogglePin+0x4c>)
 8002816:	f7fe fc3b 	bl	8001090 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002820:	887a      	ldrh	r2, [r7, #2]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	041a      	lsls	r2, r3, #16
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	43d9      	mvns	r1, r3
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	400b      	ands	r3, r1
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	619a      	str	r2, [r3, #24]
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	08011274 	.word	0x08011274

08002844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f8ce 	bl	8001a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1bd      	b.n	8002c02 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a93      	ldr	r2, [pc, #588]	; (8002ad8 <HAL_I2C_Init+0x264>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00e      	beq.n	80028ae <HAL_I2C_Init+0x3a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a91      	ldr	r2, [pc, #580]	; (8002adc <HAL_I2C_Init+0x268>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_I2C_Init+0x3a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a90      	ldr	r2, [pc, #576]	; (8002ae0 <HAL_I2C_Init+0x26c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_I2C_Init+0x3a>
 80028a4:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80028a8:	488e      	ldr	r0, [pc, #568]	; (8002ae4 <HAL_I2C_Init+0x270>)
 80028aa:	f7fe fbf1 	bl	8001090 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <HAL_I2C_Init+0x4c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a8b      	ldr	r2, [pc, #556]	; (8002ae8 <HAL_I2C_Init+0x274>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d904      	bls.n	80028ca <HAL_I2C_Init+0x56>
 80028c0:	f240 11bf 	movw	r1, #447	; 0x1bf
 80028c4:	4887      	ldr	r0, [pc, #540]	; (8002ae4 <HAL_I2C_Init+0x270>)
 80028c6:	f7fe fbe3 	bl	8001090 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_I2C_Init+0x72>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028da:	d004      	beq.n	80028e6 <HAL_I2C_Init+0x72>
 80028dc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80028e0:	4880      	ldr	r0, [pc, #512]	; (8002ae4 <HAL_I2C_Init+0x270>)
 80028e2:	f7fe fbd5 	bl	8001090 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ee:	f023 0303 	bic.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d004      	beq.n	8002900 <HAL_I2C_Init+0x8c>
 80028f6:	f240 11c1 	movw	r1, #449	; 0x1c1
 80028fa:	487a      	ldr	r0, [pc, #488]	; (8002ae4 <HAL_I2C_Init+0x270>)
 80028fc:	f7fe fbc8 	bl	8001090 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002908:	d009      	beq.n	800291e <HAL_I2C_Init+0xaa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002912:	d004      	beq.n	800291e <HAL_I2C_Init+0xaa>
 8002914:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002918:	4872      	ldr	r0, [pc, #456]	; (8002ae4 <HAL_I2C_Init+0x270>)
 800291a:	f7fe fbb9 	bl	8001090 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_I2C_Init+0xc4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d004      	beq.n	8002938 <HAL_I2C_Init+0xc4>
 800292e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002932:	486c      	ldr	r0, [pc, #432]	; (8002ae4 <HAL_I2C_Init+0x270>)
 8002934:	f7fe fbac 	bl	8001090 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <HAL_I2C_Init+0xda>
 8002944:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002948:	4866      	ldr	r0, [pc, #408]	; (8002ae4 <HAL_I2C_Init+0x270>)
 800294a:	f7fe fba1 	bl	8001090 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_I2C_Init+0xf4>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d004      	beq.n	8002968 <HAL_I2C_Init+0xf4>
 800295e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002962:	4860      	ldr	r0, [pc, #384]	; (8002ae4 <HAL_I2C_Init+0x270>)
 8002964:	f7fe fb94 	bl	8001090 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_I2C_Init+0x10e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d004      	beq.n	8002982 <HAL_I2C_Init+0x10e>
 8002978:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800297c:	4859      	ldr	r0, [pc, #356]	; (8002ae4 <HAL_I2C_Init+0x270>)
 800297e:	f7fe fb87 	bl	8001090 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fa16 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029d4:	f002 fd7c 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 80029d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a43      	ldr	r2, [pc, #268]	; (8002aec <HAL_I2C_Init+0x278>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d807      	bhi.n	80029f4 <HAL_I2C_Init+0x180>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4a42      	ldr	r2, [pc, #264]	; (8002af0 <HAL_I2C_Init+0x27c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	bf94      	ite	ls
 80029ec:	2301      	movls	r3, #1
 80029ee:	2300      	movhi	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e006      	b.n	8002a02 <HAL_I2C_Init+0x18e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a3f      	ldr	r2, [pc, #252]	; (8002af4 <HAL_I2C_Init+0x280>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	bf94      	ite	ls
 80029fc:	2301      	movls	r3, #1
 80029fe:	2300      	movhi	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0fb      	b.n	8002c02 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a3a      	ldr	r2, [pc, #232]	; (8002af8 <HAL_I2C_Init+0x284>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0c9b      	lsrs	r3, r3, #18
 8002a14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <HAL_I2C_Init+0x278>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d802      	bhi.n	8002a44 <HAL_I2C_Init+0x1d0>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3301      	adds	r3, #1
 8002a42:	e009      	b.n	8002a58 <HAL_I2C_Init+0x1e4>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	4a2b      	ldr	r2, [pc, #172]	; (8002afc <HAL_I2C_Init+0x288>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	3301      	adds	r3, #1
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	491e      	ldr	r1, [pc, #120]	; (8002aec <HAL_I2C_Init+0x278>)
 8002a74:	428b      	cmp	r3, r1
 8002a76:	d819      	bhi.n	8002aac <HAL_I2C_Init+0x238>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e59      	subs	r1, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a86:	1c59      	adds	r1, r3, #1
 8002a88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a8c:	400b      	ands	r3, r1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_I2C_Init+0x234>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1e59      	subs	r1, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa6:	e065      	b.n	8002b74 <HAL_I2C_Init+0x300>
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	e063      	b.n	8002b74 <HAL_I2C_Init+0x300>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d125      	bne.n	8002b00 <HAL_I2C_Init+0x28c>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1e58      	subs	r0, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	440b      	add	r3, r1
 8002ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e026      	b.n	8002b26 <HAL_I2C_Init+0x2b2>
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	40005800 	.word	0x40005800
 8002ae0:	40005c00 	.word	0x40005c00
 8002ae4:	080112b0 	.word	0x080112b0
 8002ae8:	00061a80 	.word	0x00061a80
 8002aec:	000186a0 	.word	0x000186a0
 8002af0:	001e847f 	.word	0x001e847f
 8002af4:	003d08ff 	.word	0x003d08ff
 8002af8:	431bde83 	.word	0x431bde83
 8002afc:	10624dd3 	.word	0x10624dd3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1e58      	subs	r0, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	0099      	lsls	r1, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_Init+0x2ba>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e022      	b.n	8002b74 <HAL_I2C_Init+0x300>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10e      	bne.n	8002b54 <HAL_I2C_Init+0x2e0>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e58      	subs	r0, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	440b      	add	r3, r1
 8002b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b52:	e00f      	b.n	8002b74 <HAL_I2C_Init+0x300>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e58      	subs	r0, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	6809      	ldr	r1, [r1, #0]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6911      	ldr	r1, [r2, #16]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68d2      	ldr	r2, [r2, #12]
 8002bae:	4311      	orrs	r1, r2
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop

08002c0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	813b      	strh	r3, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c26:	f7ff f9d7 	bl	8001fd8 <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d007      	beq.n	8002c42 <HAL_I2C_Mem_Write+0x36>
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d004      	beq.n	8002c42 <HAL_I2C_Mem_Write+0x36>
 8002c38:	f640 11b9 	movw	r1, #2489	; 0x9b9
 8002c3c:	4873      	ldr	r0, [pc, #460]	; (8002e0c <HAL_I2C_Mem_Write+0x200>)
 8002c3e:	f7fe fa27 	bl	8001090 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	f040 80d9 	bne.w	8002e02 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2319      	movs	r3, #25
 8002c56:	2201      	movs	r2, #1
 8002c58:	496d      	ldr	r1, [pc, #436]	; (8002e10 <HAL_I2C_Mem_Write+0x204>)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 faa0 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	e0cc      	b.n	8002e04 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_I2C_Mem_Write+0x6c>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e0c5      	b.n	8002e04 <HAL_I2C_Mem_Write+0x1f8>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d007      	beq.n	8002c9e <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2221      	movs	r2, #33	; 0x21
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2240      	movs	r2, #64	; 0x40
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a3a      	ldr	r2, [r7, #32]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a4d      	ldr	r2, [pc, #308]	; (8002e14 <HAL_I2C_Mem_Write+0x208>)
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ce0:	88f8      	ldrh	r0, [r7, #6]
 8002ce2:	893a      	ldrh	r2, [r7, #8]
 8002ce4:	8979      	ldrh	r1, [r7, #10]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	4603      	mov	r3, r0
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f9bf 	bl	8003074 <I2C_RequestMemoryWrite>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d052      	beq.n	8002da2 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e081      	b.n	8002e04 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fb21 	bl	800334c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d107      	bne.n	8002d28 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e06b      	b.n	8002e04 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d11b      	bne.n	8002da2 <HAL_I2C_Mem_Write+0x196>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d017      	beq.n	8002da2 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1aa      	bne.n	8002d00 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fb0d 	bl	80033ce <I2C_WaitOnBTFFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d107      	bne.n	8002dd2 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e016      	b.n	8002e04 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
  }
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	080112b0 	.word	0x080112b0
 8002e10:	00100002 	.word	0x00100002
 8002e14:	ffff0000 	.word	0xffff0000

08002e18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	460b      	mov	r3, r1
 8002e26:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff f8d6 	bl	8001fd8 <HAL_GetTick>
 8002e2c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	f040 8111 	bne.w	8003062 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2319      	movs	r3, #25
 8002e46:	2201      	movs	r2, #1
 8002e48:	4988      	ldr	r1, [pc, #544]	; (800306c <HAL_I2C_IsDeviceReady+0x254>)
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f9a8 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
 8002e58:	e104      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_I2C_IsDeviceReady+0x50>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0fd      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d007      	beq.n	8002e8e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2224      	movs	r2, #36	; 0x24
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a70      	ldr	r2, [pc, #448]	; (8003070 <HAL_I2C_IsDeviceReady+0x258>)
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f966 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee8:	d103      	bne.n	8002ef2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0b6      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f06:	f7ff f867 	bl	8001fd8 <HAL_GetTick>
 8002f0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	bf0c      	ite	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	2300      	movne	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f3a:	e025      	b.n	8002f88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7ff f84c 	bl	8001fd8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <HAL_I2C_IsDeviceReady+0x13a>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	22a0      	movs	r2, #160	; 0xa0
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2ba0      	cmp	r3, #160	; 0xa0
 8002f92:	d005      	beq.n	8002fa0 <HAL_I2C_IsDeviceReady+0x188>
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_I2C_IsDeviceReady+0x188>
 8002f9a:	7dbb      	ldrb	r3, [r7, #22]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0cd      	beq.n	8002f3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d129      	bne.n	800300a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	2319      	movs	r3, #25
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4921      	ldr	r1, [pc, #132]	; (800306c <HAL_I2C_IsDeviceReady+0x254>)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f8da 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e036      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e02c      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003018:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003022:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2319      	movs	r3, #25
 800302a:	2201      	movs	r2, #1
 800302c:	490f      	ldr	r1, [pc, #60]	; (800306c <HAL_I2C_IsDeviceReady+0x254>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f8b6 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e012      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	3301      	adds	r3, #1
 8003042:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	f4ff af32 	bcc.w	8002eb2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	00100002 	.word	0x00100002
 8003070:	ffff0000 	.word	0xffff0000

08003074 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	4608      	mov	r0, r1
 800307e:	4611      	mov	r1, r2
 8003080:	461a      	mov	r2, r3
 8003082:	4603      	mov	r3, r0
 8003084:	817b      	strh	r3, [r7, #10]
 8003086:	460b      	mov	r3, r1
 8003088:	813b      	strh	r3, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f878 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c4:	d103      	bne.n	80030ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e05f      	b.n	8003192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	6a3a      	ldr	r2, [r7, #32]
 80030e6:	492d      	ldr	r1, [pc, #180]	; (800319c <I2C_RequestMemoryWrite+0x128>)
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f8b0 	bl	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e04c      	b.n	8003192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	6a39      	ldr	r1, [r7, #32]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f91a 	bl	800334c <I2C_WaitOnTXEFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00d      	beq.n	800313a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	2b04      	cmp	r3, #4
 8003124:	d107      	bne.n	8003136 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003134:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e02b      	b.n	8003192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003140:	893b      	ldrh	r3, [r7, #8]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]
 800314a:	e021      	b.n	8003190 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800314c:	893b      	ldrh	r3, [r7, #8]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	b29b      	uxth	r3, r3
 8003152:	b2da      	uxtb	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	6a39      	ldr	r1, [r7, #32]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f8f4 	bl	800334c <I2C_WaitOnTXEFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00d      	beq.n	8003186 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b04      	cmp	r3, #4
 8003170:	d107      	bne.n	8003182 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003180:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e005      	b.n	8003192 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003186:	893b      	ldrh	r3, [r7, #8]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	00010002 	.word	0x00010002

080031a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b0:	e025      	b.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d021      	beq.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fe ff0d 	bl	8001fd8 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d116      	bne.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e023      	b.n	8003246 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d10d      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	e00c      	b.n	800323e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4013      	ands	r3, r2
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	429a      	cmp	r2, r3
 8003242:	d0b6      	beq.n	80031b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800325c:	e051      	b.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326c:	d123      	bne.n	80032b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003286:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e046      	b.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d021      	beq.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032be:	f7fe fe8b 	bl	8001fd8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d116      	bne.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0220 	orr.w	r2, r3, #32
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e020      	b.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10c      	bne.n	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e00b      	b.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	43da      	mvns	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4013      	ands	r3, r2
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d18d      	bne.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003358:	e02d      	b.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f878 	bl	8003450 <I2C_IsAcknowledgeFailed>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e02d      	b.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d021      	beq.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7fe fe31 	bl	8001fd8 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d302      	bcc.n	8003388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d116      	bne.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e007      	b.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b80      	cmp	r3, #128	; 0x80
 80033c2:	d1ca      	bne.n	800335a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033da:	e02d      	b.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f837 	bl	8003450 <I2C_IsAcknowledgeFailed>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e02d      	b.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d021      	beq.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f4:	f7fe fdf0 	bl	8001fd8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d116      	bne.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e007      	b.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d1ca      	bne.n	80033dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003466:	d11b      	bne.n	80034a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003470:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 0204 	orr.w	r2, r3, #4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b2:	b08f      	sub	sp, #60	; 0x3c
 80034b4:	af0a      	add	r7, sp, #40	; 0x28
 80034b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e118      	b.n	80036f4 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ca:	d003      	beq.n	80034d4 <HAL_PCD_Init+0x24>
 80034cc:	2187      	movs	r1, #135	; 0x87
 80034ce:	488b      	ldr	r0, [pc, #556]	; (80036fc <HAL_PCD_Init+0x24c>)
 80034d0:	f7fd fdde 	bl	8001090 <assert_failed>

  USBx = hpcd->Instance;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f00c f8ba 	bl	800f668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2203      	movs	r2, #3
 80034f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f005 fae9 	bl	8008aea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	687e      	ldr	r6, [r7, #4]
 8003520:	466d      	mov	r5, sp
 8003522:	f106 0410 	add.w	r4, r6, #16
 8003526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003532:	e885 0003 	stmia.w	r5, {r0, r1}
 8003536:	1d33      	adds	r3, r6, #4
 8003538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800353a:	6838      	ldr	r0, [r7, #0]
 800353c:	f005 f9c0 	bl	80088c0 <USB_CoreInit>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0d0      	b.n	80036f4 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f005 fad7 	bl	8008b0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
 8003562:	e04a      	b.n	80035fa <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	333d      	adds	r3, #61	; 0x3d
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	333c      	adds	r3, #60	; 0x3c
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	b298      	uxth	r0, r3
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3344      	adds	r3, #68	; 0x44
 80035a0:	4602      	mov	r2, r0
 80035a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	3340      	adds	r3, #64	; 0x40
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3348      	adds	r3, #72	; 0x48
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	334c      	adds	r3, #76	; 0x4c
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3354      	adds	r3, #84	; 0x54
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	3301      	adds	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d3af      	bcc.n	8003564 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]
 8003608:	e044      	b.n	8003694 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	3301      	adds	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	429a      	cmp	r2, r3
 800369c:	d3b5      	bcc.n	800360a <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	687e      	ldr	r6, [r7, #4]
 80036a6:	466d      	mov	r5, sp
 80036a8:	f106 0410 	add.w	r4, r6, #16
 80036ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80036bc:	1d33      	adds	r3, r6, #4
 80036be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c0:	6838      	ldr	r0, [r7, #0]
 80036c2:	f005 fa6f 	bl	8008ba4 <USB_DevInit>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e00d      	b.n	80036f4 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f006 fbbe 	bl	8009e6e <USB_DevDisconnect>

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036fc:	080112e8 	.word	0x080112e8

08003700 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_PCD_Start+0x1c>
 8003718:	2302      	movs	r3, #2
 800371a:	e020      	b.n	800375e <HAL_PCD_Start+0x5e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	2b01      	cmp	r3, #1
 800372a:	d109      	bne.n	8003740 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003730:	2b01      	cmp	r3, #1
 8003732:	d005      	beq.n	8003740 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f005 f9bf 	bl	8008ac8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f006 fb6c 	bl	8009e2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003766:	b590      	push	{r4, r7, lr}
 8003768:	b08d      	sub	sp, #52	; 0x34
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f006 fc2a 	bl	8009fd6 <USB_GetMode>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	f040 848a 	bne.w	800409e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f006 fb8e 	bl	8009eb0 <USB_ReadInterrupts>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8480 	beq.w	800409c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f006 fb7b 	bl	8009eb0 <USB_ReadInterrupts>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d107      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f002 0202 	and.w	r2, r2, #2
 80037d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f006 fb69 	bl	8009eb0 <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d161      	bne.n	80038ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0210 	bic.w	r2, r2, #16
 80037f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	4413      	add	r3, r2
 8003814:	3304      	adds	r3, #4
 8003816:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	0c5b      	lsrs	r3, r3, #17
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	2b02      	cmp	r3, #2
 8003822:	d124      	bne.n	800386e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d035      	beq.n	800389c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800383a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6a38      	ldr	r0, [r7, #32]
 8003844:	f006 f9a0 	bl	8009b88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003854:	441a      	add	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	6a1a      	ldr	r2, [r3, #32]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003866:	441a      	add	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
 800386c:	e016      	b.n	800389c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	0c5b      	lsrs	r3, r3, #17
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	2b06      	cmp	r3, #6
 8003878:	d110      	bne.n	800389c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003880:	2208      	movs	r2, #8
 8003882:	4619      	mov	r1, r3
 8003884:	6a38      	ldr	r0, [r7, #32]
 8003886:	f006 f97f 	bl	8009b88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	6a1a      	ldr	r2, [r3, #32]
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003896:	441a      	add	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0210 	orr.w	r2, r2, #16
 80038aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f006 fafd 	bl	8009eb0 <USB_ReadInterrupts>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038c0:	f040 80a7 	bne.w	8003a12 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f006 fb02 	bl	8009ed6 <USB_ReadDevAllOutEpInterrupt>
 80038d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038d4:	e099      	b.n	8003a0a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 808e 	beq.w	80039fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f006 fb26 	bl	8009f3e <USB_ReadDevOutEPInterrupt>
 80038f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	461a      	mov	r2, r3
 800390c:	2301      	movs	r3, #1
 800390e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fec2 	bl	800469c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392e:	461a      	mov	r2, r3
 8003930:	2308      	movs	r3, #8
 8003932:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 ff98 	bl	800486c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	461a      	mov	r2, r3
 8003954:	2310      	movs	r3, #16
 8003956:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d030      	beq.n	80039c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d109      	bne.n	8003982 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800397c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003980:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	4413      	add	r3, r2
 8003994:	3304      	adds	r3, #4
 8003996:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	78db      	ldrb	r3, [r3, #3]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d108      	bne.n	80039b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2200      	movs	r2, #0
 80039a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f00b ff57 	bl	800f860 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	461a      	mov	r2, r3
 80039c0:	2302      	movs	r3, #2
 80039c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039da:	461a      	mov	r2, r3
 80039dc:	2320      	movs	r3, #32
 80039de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	461a      	mov	r2, r3
 80039f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	3301      	adds	r3, #1
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f47f af62 	bne.w	80038d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f006 fa4a 	bl	8009eb0 <USB_ReadInterrupts>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a26:	f040 80db 	bne.w	8003be0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f006 fa6b 	bl	8009f0a <USB_ReadDevAllInEpInterrupt>
 8003a34:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a3a:	e0cd      	b.n	8003bd8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80c2 	beq.w	8003bcc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f006 fa91 	bl	8009f7a <USB_ReadDevInEPInterrupt>
 8003a58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d057      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69f9      	ldr	r1, [r7, #28]
 8003a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a84:	4013      	ands	r3, r2
 8003a86:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a94:	461a      	mov	r2, r3
 8003a96:	2301      	movs	r3, #1
 8003a98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d132      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	334c      	adds	r3, #76	; 0x4c
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4403      	add	r3, r0
 8003ac2:	3348      	adds	r3, #72	; 0x48
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4419      	add	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4403      	add	r3, r0
 8003ad6:	334c      	adds	r3, #76	; 0x4c
 8003ad8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d113      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x3a2>
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	3354      	adds	r3, #84	; 0x54
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b00:	461a      	mov	r2, r3
 8003b02:	2101      	movs	r1, #1
 8003b04:	f006 fa98 	bl	800a038 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f00b fe2b 	bl	800f76a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b46:	461a      	mov	r2, r3
 8003b48:	2310      	movs	r3, #16
 8003b4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b62:	461a      	mov	r2, r3
 8003b64:	2340      	movs	r3, #64	; 0x40
 8003b66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d023      	beq.n	8003bba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b74:	6a38      	ldr	r0, [r7, #32]
 8003b76:	f005 f979 	bl	8008e6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	3338      	adds	r3, #56	; 0x38
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	78db      	ldrb	r3, [r3, #3]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d108      	bne.n	8003ba8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f00b fe6e 	bl	800f884 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fcdb 	bl	8004582 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	3301      	adds	r3, #1
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f47f af2e 	bne.w	8003a3c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f006 f963 	bl	8009eb0 <USB_ReadInterrupts>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bf4:	d122      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d108      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fec2 	bl	80049a8 <HAL_PCDEx_LPM_Callback>
 8003c24:	e002      	b.n	8003c2c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f00b fe0c 	bl	800f844 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f006 f935 	bl	8009eb0 <USB_ReadInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c50:	d112      	bne.n	8003c78 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d102      	bne.n	8003c68 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f00b fdc8 	bl	800f7f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c76:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f006 f917 	bl	8009eb0 <USB_ReadInterrupts>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8c:	f040 80b7 	bne.w	8003dfe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2110      	movs	r1, #16
 8003caa:	4618      	mov	r0, r3
 8003cac:	f005 f8de 	bl	8008e6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb4:	e046      	b.n	8003d44 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cc8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ce8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cfc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	3301      	adds	r3, #1
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d3b3      	bcc.n	8003cb6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7a:	f043 030b 	orr.w	r3, r3, #11
 8003d7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d90:	f043 030b 	orr.w	r3, r3, #11
 8003d94:	6453      	str	r3, [r2, #68]	; 0x44
 8003d96:	e015      	b.n	8003dc4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003daa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003dae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dbe:	f043 030b 	orr.w	r3, r3, #11
 8003dc2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dd6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003de8:	461a      	mov	r2, r3
 8003dea:	f006 f925 	bl	800a038 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f006 f854 	bl	8009eb0 <USB_ReadInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	d124      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f006 f8ea 	bl	8009ff2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f005 f89f 	bl	8008f66 <USB_GetDevSpeed>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681c      	ldr	r4, [r3, #0]
 8003e34:	f001 fb40 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 8003e38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	4620      	mov	r0, r4
 8003e44:	f004 fd9e 	bl	8008984 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f00b fcb6 	bl	800f7ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f006 f824 	bl	8009eb0 <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d10a      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f00b fc93 	bl	800f79e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f002 0208 	and.w	r2, r2, #8
 8003e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f006 f80f 	bl	8009eb0 <USB_ReadInterrupts>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b80      	cmp	r3, #128	; 0x80
 8003e9a:	d122      	bne.n	8003ee2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	e014      	b.n	8003ed8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fb27 	bl	8004520 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d3e5      	bcc.n	8003eae <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f005 ffe2 	bl	8009eb0 <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef6:	d13b      	bne.n	8003f70 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ef8:	2301      	movs	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	e02b      	b.n	8003f56 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3340      	adds	r3, #64	; 0x40
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d115      	bne.n	8003f50 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da12      	bge.n	8003f50 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	333f      	adds	r3, #63	; 0x3f
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fae8 	bl	8004520 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	3301      	adds	r3, #1
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d3ce      	bcc.n	8003efe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f005 ff9b 	bl	8009eb0 <USB_ReadInterrupts>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f84:	d155      	bne.n	8004032 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f86:	2301      	movs	r3, #1
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8a:	e045      	b.n	8004018 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d12e      	bne.n	8004012 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	da2b      	bge.n	8004012 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003fc6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d121      	bne.n	8004012 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800400a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800400e:	6053      	str	r3, [r2, #4]
            break;
 8004010:	e007      	b.n	8004022 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	3301      	adds	r3, #1
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401e:	429a      	cmp	r2, r3
 8004020:	d3b4      	bcc.n	8003f8c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f005 ff3a 	bl	8009eb0 <USB_ReadInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004046:	d10a      	bne.n	800405e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f00b fc2d 	bl	800f8a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800405c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f005 ff24 	bl	8009eb0 <USB_ReadInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d115      	bne.n	800409e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f00b fc1d 	bl	800f8c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	e000      	b.n	800409e <HAL_PCD_IRQHandler+0x938>
      return;
 800409c:	bf00      	nop
    }
  }
}
 800409e:	3734      	adds	r7, #52	; 0x34
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd90      	pop	{r4, r7, pc}

080040a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_PCD_SetAddress+0x1a>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e013      	b.n	80040e6 <HAL_PCD_SetAddress+0x42>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f005 fe82 	bl	8009de0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	4608      	mov	r0, r1
 80040f8:	4611      	mov	r1, r2
 80040fa:	461a      	mov	r2, r3
 80040fc:	4603      	mov	r3, r0
 80040fe:	70fb      	strb	r3, [r7, #3]
 8004100:	460b      	mov	r3, r1
 8004102:	803b      	strh	r3, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800410c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004110:	2b00      	cmp	r3, #0
 8004112:	da0f      	bge.n	8004134 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	f003 020f 	and.w	r2, r3, #15
 800411a:	4613      	mov	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	3338      	adds	r3, #56	; 0x38
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4413      	add	r3, r2
 8004128:	3304      	adds	r3, #4
 800412a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	705a      	strb	r2, [r3, #1]
 8004132:	e00f      	b.n	8004154 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	f003 020f 	and.w	r2, r3, #15
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	3304      	adds	r3, #4
 800414c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004160:	883a      	ldrh	r2, [r7, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	78ba      	ldrb	r2, [r7, #2]
 800416a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800417e:	78bb      	ldrb	r3, [r7, #2]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d102      	bne.n	800418a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_PCD_EP_Open+0xaa>
 8004194:	2302      	movs	r3, #2
 8004196:	e00e      	b.n	80041b6 <HAL_PCD_EP_Open+0xc8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68f9      	ldr	r1, [r7, #12]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f004 ff02 	bl	8008fb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80041b4:	7afb      	ldrb	r3, [r7, #11]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da0f      	bge.n	80041f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	f003 020f 	and.w	r2, r3, #15
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	3338      	adds	r3, #56	; 0x38
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4413      	add	r3, r2
 80041e6:	3304      	adds	r3, #4
 80041e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	705a      	strb	r2, [r3, #1]
 80041f0:	e00f      	b.n	8004212 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4413      	add	r3, r2
 8004208:	3304      	adds	r3, #4
 800420a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	b2da      	uxtb	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_PCD_EP_Close+0x6e>
 8004228:	2302      	movs	r3, #2
 800422a:	e00e      	b.n	800424a <HAL_PCD_EP_Close+0x8c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68f9      	ldr	r1, [r7, #12]
 800423a:	4618      	mov	r0, r3
 800423c:	f004 ff40 	bl	80090c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	460b      	mov	r3, r1
 8004260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f003 020f 	and.w	r2, r3, #15
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	3304      	adds	r3, #4
 800427a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2200      	movs	r2, #0
 800428c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2200      	movs	r2, #0
 8004292:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004294:	7afb      	ldrb	r3, [r7, #11]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	b2da      	uxtb	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d102      	bne.n	80042ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042ae:	7afb      	ldrb	r3, [r7, #11]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d109      	bne.n	80042cc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	6979      	ldr	r1, [r7, #20]
 80042c6:	f005 fa1f 	bl	8009708 <USB_EP0StartXfer>
 80042ca:	e008      	b.n	80042de <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	6979      	ldr	r1, [r7, #20]
 80042da:	f004 ffcd 	bl	8009278 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	f003 020f 	and.w	r2, r3, #15
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800430a:	681b      	ldr	r3, [r3, #0]
}
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	460b      	mov	r3, r1
 8004326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004328:	7afb      	ldrb	r3, [r7, #11]
 800432a:	f003 020f 	and.w	r2, r3, #15
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	3338      	adds	r3, #56	; 0x38
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	3304      	adds	r3, #4
 800433e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2201      	movs	r2, #1
 8004356:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004358:	7afb      	ldrb	r3, [r7, #11]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	b2da      	uxtb	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d102      	bne.n	8004372 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004372:	7afb      	ldrb	r3, [r7, #11]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	6979      	ldr	r1, [r7, #20]
 800438a:	f005 f9bd 	bl	8009708 <USB_EP0StartXfer>
 800438e:	e008      	b.n	80043a2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	6979      	ldr	r1, [r7, #20]
 800439e:	f004 ff6b 	bl	8009278 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	f003 020f 	and.w	r2, r3, #15
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d901      	bls.n	80043ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e050      	b.n	800446c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	da0f      	bge.n	80043f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	f003 020f 	and.w	r2, r3, #15
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	3338      	adds	r3, #56	; 0x38
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	3304      	adds	r3, #4
 80043e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	705a      	strb	r2, [r3, #1]
 80043f0:	e00d      	b.n	800440e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	3304      	adds	r3, #4
 8004406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_PCD_EP_SetStall+0x82>
 800442a:	2302      	movs	r3, #2
 800442c:	e01e      	b.n	800446c <HAL_PCD_EP_SetStall+0xc0>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	4618      	mov	r0, r3
 800443e:	f005 fbfb 	bl	8009c38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	b2d9      	uxtb	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800445c:	461a      	mov	r2, r3
 800445e:	f005 fdeb 	bl	800a038 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	429a      	cmp	r2, r3
 800448c:	d901      	bls.n	8004492 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e042      	b.n	8004518 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004496:	2b00      	cmp	r3, #0
 8004498:	da0f      	bge.n	80044ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	f003 020f 	and.w	r2, r3, #15
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	3338      	adds	r3, #56	; 0x38
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3304      	adds	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	705a      	strb	r2, [r3, #1]
 80044b8:	e00f      	b.n	80044da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	f003 020f 	and.w	r2, r3, #15
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	4413      	add	r3, r2
 80044d0:	3304      	adds	r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_PCD_EP_ClrStall+0x86>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e00e      	b.n	8004518 <HAL_PCD_EP_ClrStall+0xa4>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68f9      	ldr	r1, [r7, #12]
 8004508:	4618      	mov	r0, r3
 800450a:	f005 fc03 	bl	8009d14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800452c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004530:	2b00      	cmp	r3, #0
 8004532:	da0c      	bge.n	800454e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	f003 020f 	and.w	r2, r3, #15
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	3338      	adds	r3, #56	; 0x38
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4413      	add	r3, r2
 8004548:	3304      	adds	r3, #4
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e00c      	b.n	8004568 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	f003 020f 	and.w	r2, r3, #15
 8004554:	4613      	mov	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	3304      	adds	r3, #4
 8004566:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68f9      	ldr	r1, [r7, #12]
 800456e:	4618      	mov	r0, r3
 8004570:	f005 fa22 	bl	80099b8 <USB_EPStopXfer>
 8004574:	4603      	mov	r3, r0
 8004576:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004578:	7afb      	ldrb	r3, [r7, #11]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b08a      	sub	sp, #40	; 0x28
 8004586:	af02      	add	r7, sp, #8
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	3338      	adds	r3, #56	; 0x38
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	3304      	adds	r3, #4
 80045a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1a      	ldr	r2, [r3, #32]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d901      	bls.n	80045ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e06c      	b.n	8004694 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d902      	bls.n	80045d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3303      	adds	r3, #3
 80045da:	089b      	lsrs	r3, r3, #2
 80045dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045de:	e02b      	b.n	8004638 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d902      	bls.n	80045fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	3303      	adds	r3, #3
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6919      	ldr	r1, [r3, #16]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004614:	b2db      	uxtb	r3, r3
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	4603      	mov	r3, r0
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	f005 fa76 	bl	8009b0c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	441a      	add	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	b29b      	uxth	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	429a      	cmp	r2, r3
 800464c:	d809      	bhi.n	8004662 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1a      	ldr	r2, [r3, #32]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004656:	429a      	cmp	r2, r3
 8004658:	d203      	bcs.n	8004662 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1be      	bne.n	80045e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	429a      	cmp	r2, r3
 800466c:	d811      	bhi.n	8004692 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	2201      	movs	r2, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	43db      	mvns	r3, r3
 8004688:	6939      	ldr	r1, [r7, #16]
 800468a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800468e:	4013      	ands	r3, r2
 8004690:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	333c      	adds	r3, #60	; 0x3c
 80046b4:	3304      	adds	r3, #4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d17b      	bne.n	80047ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d015      	beq.n	8004708 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	4a61      	ldr	r2, [pc, #388]	; (8004864 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	f240 80b9 	bls.w	8004858 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80b3 	beq.w	8004858 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	461a      	mov	r2, r3
 8004700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004704:	6093      	str	r3, [r2, #8]
 8004706:	e0a7      	b.n	8004858 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471e:	461a      	mov	r2, r3
 8004720:	2320      	movs	r3, #32
 8004722:	6093      	str	r3, [r2, #8]
 8004724:	e098      	b.n	8004858 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 8093 	bne.w	8004858 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4a4b      	ldr	r2, [pc, #300]	; (8004864 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d90f      	bls.n	800475a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004750:	461a      	mov	r2, r3
 8004752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004756:	6093      	str	r3, [r2, #8]
 8004758:	e07e      	b.n	8004858 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	4413      	add	r3, r2
 800476c:	3304      	adds	r3, #4
 800476e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	0159      	lsls	r1, r3, #5
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	440b      	add	r3, r1
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004786:	1ad2      	subs	r2, r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d114      	bne.n	80047bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047a4:	461a      	mov	r2, r3
 80047a6:	2101      	movs	r1, #1
 80047a8:	f005 fc46 	bl	800a038 <USB_EP0_OutStart>
 80047ac:	e006      	b.n	80047bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	441a      	add	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f00a ffb6 	bl	800f734 <HAL_PCD_DataOutStageCallback>
 80047c8:	e046      	b.n	8004858 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	4a26      	ldr	r2, [pc, #152]	; (8004868 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d124      	bne.n	800481c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e8:	461a      	mov	r2, r3
 80047ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ee:	6093      	str	r3, [r2, #8]
 80047f0:	e032      	b.n	8004858 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	461a      	mov	r2, r3
 800480a:	2320      	movs	r3, #32
 800480c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	4619      	mov	r1, r3
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f00a ff8d 	bl	800f734 <HAL_PCD_DataOutStageCallback>
 800481a:	e01d      	b.n	8004858 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d114      	bne.n	800484c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d108      	bne.n	800484c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004844:	461a      	mov	r2, r3
 8004846:	2100      	movs	r1, #0
 8004848:	f005 fbf6 	bl	800a038 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f00a ff6e 	bl	800f734 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	4f54300a 	.word	0x4f54300a
 8004868:	4f54310a 	.word	0x4f54310a

0800486c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	333c      	adds	r3, #60	; 0x3c
 8004884:	3304      	adds	r3, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a15      	ldr	r2, [pc, #84]	; (80048f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d90e      	bls.n	80048c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d009      	beq.n	80048c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b8:	461a      	mov	r2, r3
 80048ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f00a ff25 	bl	800f710 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d90c      	bls.n	80048e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d108      	bne.n	80048e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048e0:	461a      	mov	r2, r3
 80048e2:	2101      	movs	r1, #1
 80048e4:	f005 fba8 	bl	800a038 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	4f54300a 	.word	0x4f54300a

080048f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
 8004904:	4613      	mov	r3, r2
 8004906:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d107      	bne.n	8004926 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004916:	883b      	ldrh	r3, [r7, #0]
 8004918:	0419      	lsls	r1, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	430a      	orrs	r2, r1
 8004922:	629a      	str	r2, [r3, #40]	; 0x28
 8004924:	e028      	b.n	8004978 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	4413      	add	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]
 8004938:	e00d      	b.n	8004956 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	3340      	adds	r3, #64	; 0x40
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	0c1b      	lsrs	r3, r3, #16
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4413      	add	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	3301      	adds	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	3b01      	subs	r3, #1
 800495c:	429a      	cmp	r2, r3
 800495e:	d3ec      	bcc.n	800493a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004960:	883b      	ldrh	r3, [r7, #0]
 8004962:	0418      	lsls	r0, r3, #16
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6819      	ldr	r1, [r3, #0]
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	3b01      	subs	r3, #1
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	4302      	orrs	r2, r0
 8004970:	3340      	adds	r3, #64	; 0x40
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	460b      	mov	r3, r1
 8004990:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	887a      	ldrh	r2, [r7, #2]
 8004998:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e314      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	d903      	bls.n	80049e2 <HAL_RCC_OscConfig+0x22>
 80049da:	21e6      	movs	r1, #230	; 0xe6
 80049dc:	4897      	ldr	r0, [pc, #604]	; (8004c3c <HAL_RCC_OscConfig+0x27c>)
 80049de:	f7fc fb57 	bl	8001090 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8088 	beq.w	8004b00 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00d      	beq.n	8004a14 <HAL_RCC_OscConfig+0x54>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d008      	beq.n	8004a14 <HAL_RCC_OscConfig+0x54>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a0a:	d003      	beq.n	8004a14 <HAL_RCC_OscConfig+0x54>
 8004a0c:	21eb      	movs	r1, #235	; 0xeb
 8004a0e:	488b      	ldr	r0, [pc, #556]	; (8004c3c <HAL_RCC_OscConfig+0x27c>)
 8004a10:	f7fc fb3e 	bl	8001090 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a14:	4b8a      	ldr	r3, [pc, #552]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 030c 	and.w	r3, r3, #12
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d00c      	beq.n	8004a3a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a20:	4b87      	ldr	r3, [pc, #540]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d112      	bne.n	8004a52 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2c:	4b84      	ldr	r3, [pc, #528]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a38:	d10b      	bne.n	8004a52 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3a:	4b81      	ldr	r3, [pc, #516]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d05b      	beq.n	8004afe <HAL_RCC_OscConfig+0x13e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d157      	bne.n	8004afe <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e2d4      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCC_OscConfig+0xaa>
 8004a5c:	4b78      	ldr	r3, [pc, #480]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a77      	ldr	r2, [pc, #476]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	e01d      	b.n	8004aa6 <HAL_RCC_OscConfig+0xe6>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a72:	d10c      	bne.n	8004a8e <HAL_RCC_OscConfig+0xce>
 8004a74:	4b72      	ldr	r3, [pc, #456]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a71      	ldr	r2, [pc, #452]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b6f      	ldr	r3, [pc, #444]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a6e      	ldr	r2, [pc, #440]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e00b      	b.n	8004aa6 <HAL_RCC_OscConfig+0xe6>
 8004a8e:	4b6c      	ldr	r3, [pc, #432]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6b      	ldr	r2, [pc, #428]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b69      	ldr	r3, [pc, #420]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a68      	ldr	r2, [pc, #416]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d013      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aae:	f7fd fa93 	bl	8001fd8 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab6:	f7fd fa8f 	bl	8001fd8 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b64      	cmp	r3, #100	; 0x64
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e299      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac8:	4b5d      	ldr	r3, [pc, #372]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0xf6>
 8004ad4:	e014      	b.n	8004b00 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad6:	f7fd fa7f 	bl	8001fd8 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ade:	f7fd fa7b 	bl	8001fd8 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b64      	cmp	r3, #100	; 0x64
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e285      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af0:	4b53      	ldr	r3, [pc, #332]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x11e>
 8004afc:	e000      	b.n	8004b00 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d079      	beq.n	8004c00 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_RCC_OscConfig+0x166>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d004      	beq.n	8004b26 <HAL_RCC_OscConfig+0x166>
 8004b1c:	f240 111d 	movw	r1, #285	; 0x11d
 8004b20:	4846      	ldr	r0, [pc, #280]	; (8004c3c <HAL_RCC_OscConfig+0x27c>)
 8004b22:	f7fc fab5 	bl	8001090 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b1f      	cmp	r3, #31
 8004b2c:	d904      	bls.n	8004b38 <HAL_RCC_OscConfig+0x178>
 8004b2e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004b32:	4842      	ldr	r0, [pc, #264]	; (8004c3c <HAL_RCC_OscConfig+0x27c>)
 8004b34:	f7fc faac 	bl	8001090 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b38:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 030c 	and.w	r3, r3, #12
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b44:	4b3e      	ldr	r3, [pc, #248]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d11c      	bne.n	8004b8a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b50:	4b3b      	ldr	r3, [pc, #236]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d116      	bne.n	8004b8a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5c:	4b38      	ldr	r3, [pc, #224]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_OscConfig+0x1b4>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e243      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b74:	4b32      	ldr	r3, [pc, #200]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	492f      	ldr	r1, [pc, #188]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b88:	e03a      	b.n	8004c00 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d020      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b92:	4b2c      	ldr	r3, [pc, #176]	; (8004c44 <HAL_RCC_OscConfig+0x284>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd fa1e 	bl	8001fd8 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fd fa1a 	bl	8001fd8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e224      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb2:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbe:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	491c      	ldr	r1, [pc, #112]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]
 8004bd2:	e015      	b.n	8004c00 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCC_OscConfig+0x284>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fd f9fd 	bl	8001fd8 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be2:	f7fd f9f9 	bl	8001fd8 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e203      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <HAL_RCC_OscConfig+0x280>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f0      	bne.n	8004be2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d045      	beq.n	8004c98 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_RCC_OscConfig+0x266>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d004      	beq.n	8004c26 <HAL_RCC_OscConfig+0x266>
 8004c1c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004c20:	4806      	ldr	r0, [pc, #24]	; (8004c3c <HAL_RCC_OscConfig+0x27c>)
 8004c22:	f7fc fa35 	bl	8001090 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01e      	beq.n	8004c6c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RCC_OscConfig+0x288>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fd f9d0 	bl	8001fd8 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3a:	e010      	b.n	8004c5e <HAL_RCC_OscConfig+0x29e>
 8004c3c:	08011320 	.word	0x08011320
 8004c40:	40023800 	.word	0x40023800
 8004c44:	42470000 	.word	0x42470000
 8004c48:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4c:	f7fd f9c4 	bl	8001fd8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e1ce      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5e:	4b5e      	ldr	r3, [pc, #376]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x28c>
 8004c6a:	e015      	b.n	8004c98 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6c:	4b5b      	ldr	r3, [pc, #364]	; (8004ddc <HAL_RCC_OscConfig+0x41c>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c72:	f7fd f9b1 	bl	8001fd8 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7a:	f7fd f9ad 	bl	8001fd8 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e1b7      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	4b52      	ldr	r3, [pc, #328]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80b0 	beq.w	8004e06 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00c      	beq.n	8004ccc <HAL_RCC_OscConfig+0x30c>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d008      	beq.n	8004ccc <HAL_RCC_OscConfig+0x30c>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b05      	cmp	r3, #5
 8004cc0:	d004      	beq.n	8004ccc <HAL_RCC_OscConfig+0x30c>
 8004cc2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004cc6:	4846      	ldr	r0, [pc, #280]	; (8004de0 <HAL_RCC_OscConfig+0x420>)
 8004cc8:	f7fc f9e2 	bl	8001090 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ccc:	4b42      	ldr	r3, [pc, #264]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10f      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	4a3d      	ldr	r2, [pc, #244]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce8:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	; (8004de4 <HAL_RCC_OscConfig+0x424>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d118      	bne.n	8004d36 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d04:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <HAL_RCC_OscConfig+0x424>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a36      	ldr	r2, [pc, #216]	; (8004de4 <HAL_RCC_OscConfig+0x424>)
 8004d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d10:	f7fd f962 	bl	8001fd8 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d18:	f7fd f95e 	bl	8001fd8 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e168      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2a:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <HAL_RCC_OscConfig+0x424>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d106      	bne.n	8004d4c <HAL_RCC_OscConfig+0x38c>
 8004d3e:	4b26      	ldr	r3, [pc, #152]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	4a25      	ldr	r2, [pc, #148]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4a:	e01c      	b.n	8004d86 <HAL_RCC_OscConfig+0x3c6>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b05      	cmp	r3, #5
 8004d52:	d10c      	bne.n	8004d6e <HAL_RCC_OscConfig+0x3ae>
 8004d54:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004d5a:	f043 0304 	orr.w	r3, r3, #4
 8004d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d60:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	4a1c      	ldr	r2, [pc, #112]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6c:	e00b      	b.n	8004d86 <HAL_RCC_OscConfig+0x3c6>
 8004d6e:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	4a19      	ldr	r2, [pc, #100]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7a:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004d80:	f023 0304 	bic.w	r3, r3, #4
 8004d84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d015      	beq.n	8004dba <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8e:	f7fd f923 	bl	8001fd8 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	e00a      	b.n	8004dac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fd f91f 	bl	8001fd8 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e127      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <HAL_RCC_OscConfig+0x418>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ee      	beq.n	8004d96 <HAL_RCC_OscConfig+0x3d6>
 8004db8:	e01c      	b.n	8004df4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dba:	f7fd f90d 	bl	8001fd8 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc0:	e012      	b.n	8004de8 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc2:	f7fd f909 	bl	8001fd8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d909      	bls.n	8004de8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e111      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	42470e80 	.word	0x42470e80
 8004de0:	08011320 	.word	0x08011320
 8004de4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de8:	4b86      	ldr	r3, [pc, #536]	; (8005004 <HAL_RCC_OscConfig+0x644>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e6      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d105      	bne.n	8004e06 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfa:	4b82      	ldr	r3, [pc, #520]	; (8005004 <HAL_RCC_OscConfig+0x644>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	4a81      	ldr	r2, [pc, #516]	; (8005004 <HAL_RCC_OscConfig+0x644>)
 8004e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00c      	beq.n	8004e28 <HAL_RCC_OscConfig+0x468>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d008      	beq.n	8004e28 <HAL_RCC_OscConfig+0x468>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d004      	beq.n	8004e28 <HAL_RCC_OscConfig+0x468>
 8004e1e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004e22:	4879      	ldr	r0, [pc, #484]	; (8005008 <HAL_RCC_OscConfig+0x648>)
 8004e24:	f7fc f934 	bl	8001090 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80e4 	beq.w	8004ffa <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e32:	4b74      	ldr	r3, [pc, #464]	; (8005004 <HAL_RCC_OscConfig+0x644>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	f000 80a5 	beq.w	8004f8a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	f040 8089 	bne.w	8004f5c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_RCC_OscConfig+0x4a6>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e5a:	d004      	beq.n	8004e66 <HAL_RCC_OscConfig+0x4a6>
 8004e5c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004e60:	4869      	ldr	r0, [pc, #420]	; (8005008 <HAL_RCC_OscConfig+0x648>)
 8004e62:	f7fc f915 	bl	8001090 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	2b3f      	cmp	r3, #63	; 0x3f
 8004e6c:	d904      	bls.n	8004e78 <HAL_RCC_OscConfig+0x4b8>
 8004e6e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004e72:	4865      	ldr	r0, [pc, #404]	; (8005008 <HAL_RCC_OscConfig+0x648>)
 8004e74:	f7fc f90c 	bl	8001090 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b31      	cmp	r3, #49	; 0x31
 8004e7e:	d904      	bls.n	8004e8a <HAL_RCC_OscConfig+0x4ca>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004e88:	d904      	bls.n	8004e94 <HAL_RCC_OscConfig+0x4d4>
 8004e8a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004e8e:	485e      	ldr	r0, [pc, #376]	; (8005008 <HAL_RCC_OscConfig+0x648>)
 8004e90:	f7fc f8fe 	bl	8001090 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d010      	beq.n	8004ebe <HAL_RCC_OscConfig+0x4fe>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d00c      	beq.n	8004ebe <HAL_RCC_OscConfig+0x4fe>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	2b06      	cmp	r3, #6
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCC_OscConfig+0x4fe>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d004      	beq.n	8004ebe <HAL_RCC_OscConfig+0x4fe>
 8004eb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004eb8:	4853      	ldr	r0, [pc, #332]	; (8005008 <HAL_RCC_OscConfig+0x648>)
 8004eba:	f7fc f8e9 	bl	8001090 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d903      	bls.n	8004ece <HAL_RCC_OscConfig+0x50e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	2b0f      	cmp	r3, #15
 8004ecc:	d904      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x518>
 8004ece:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004ed2:	484d      	ldr	r0, [pc, #308]	; (8005008 <HAL_RCC_OscConfig+0x648>)
 8004ed4:	f7fc f8dc 	bl	8001090 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed8:	4b4c      	ldr	r3, [pc, #304]	; (800500c <HAL_RCC_OscConfig+0x64c>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ede:	f7fd f87b 	bl	8001fd8 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7fd f877 	bl	8001fd8 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e081      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef8:	4b42      	ldr	r3, [pc, #264]	; (8005004 <HAL_RCC_OscConfig+0x644>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	019b      	lsls	r3, r3, #6
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	061b      	lsls	r3, r3, #24
 8004f28:	4936      	ldr	r1, [pc, #216]	; (8005004 <HAL_RCC_OscConfig+0x644>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f2e:	4b37      	ldr	r3, [pc, #220]	; (800500c <HAL_RCC_OscConfig+0x64c>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fd f850 	bl	8001fd8 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3c:	f7fd f84c 	bl	8001fd8 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e056      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4e:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <HAL_RCC_OscConfig+0x644>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x57c>
 8004f5a:	e04e      	b.n	8004ffa <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <HAL_RCC_OscConfig+0x64c>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f62:	f7fd f839 	bl	8001fd8 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f6a:	f7fd f835 	bl	8001fd8 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e03f      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7c:	4b21      	ldr	r3, [pc, #132]	; (8005004 <HAL_RCC_OscConfig+0x644>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f0      	bne.n	8004f6a <HAL_RCC_OscConfig+0x5aa>
 8004f88:	e037      	b.n	8004ffa <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e032      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f96:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <HAL_RCC_OscConfig+0x644>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d028      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d121      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d11a      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d111      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	085b      	lsrs	r3, r3, #1
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d107      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40023800 	.word	0x40023800
 8005008:	08011320 	.word	0x08011320
 800500c:	42470060 	.word	0x42470060

08005010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e174      	b.n	800530e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_RCC_ClockConfig+0x24>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b0f      	cmp	r3, #15
 8005032:	d904      	bls.n	800503e <HAL_RCC_ClockConfig+0x2e>
 8005034:	f240 215a 	movw	r1, #602	; 0x25a
 8005038:	487b      	ldr	r0, [pc, #492]	; (8005228 <HAL_RCC_ClockConfig+0x218>)
 800503a:	f7fc f829 	bl	8001090 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d019      	beq.n	8005078 <HAL_RCC_ClockConfig+0x68>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d016      	beq.n	8005078 <HAL_RCC_ClockConfig+0x68>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d013      	beq.n	8005078 <HAL_RCC_ClockConfig+0x68>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d010      	beq.n	8005078 <HAL_RCC_ClockConfig+0x68>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b04      	cmp	r3, #4
 800505a:	d00d      	beq.n	8005078 <HAL_RCC_ClockConfig+0x68>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b05      	cmp	r3, #5
 8005060:	d00a      	beq.n	8005078 <HAL_RCC_ClockConfig+0x68>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b06      	cmp	r3, #6
 8005066:	d007      	beq.n	8005078 <HAL_RCC_ClockConfig+0x68>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b07      	cmp	r3, #7
 800506c:	d004      	beq.n	8005078 <HAL_RCC_ClockConfig+0x68>
 800506e:	f240 215b 	movw	r1, #603	; 0x25b
 8005072:	486d      	ldr	r0, [pc, #436]	; (8005228 <HAL_RCC_ClockConfig+0x218>)
 8005074:	f7fc f80c 	bl	8001090 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b6c      	ldr	r3, [pc, #432]	; (800522c <HAL_RCC_ClockConfig+0x21c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d90c      	bls.n	80050a0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b69      	ldr	r3, [pc, #420]	; (800522c <HAL_RCC_ClockConfig+0x21c>)
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b67      	ldr	r3, [pc, #412]	; (800522c <HAL_RCC_ClockConfig+0x21c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e136      	b.n	800530e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d049      	beq.n	8005140 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b8:	4b5d      	ldr	r3, [pc, #372]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a5c      	ldr	r2, [pc, #368]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 80050be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050d0:	4b57      	ldr	r3, [pc, #348]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4a56      	ldr	r2, [pc, #344]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 80050d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d024      	beq.n	800512e <HAL_RCC_ClockConfig+0x11e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b80      	cmp	r3, #128	; 0x80
 80050ea:	d020      	beq.n	800512e <HAL_RCC_ClockConfig+0x11e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b90      	cmp	r3, #144	; 0x90
 80050f2:	d01c      	beq.n	800512e <HAL_RCC_ClockConfig+0x11e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2ba0      	cmp	r3, #160	; 0xa0
 80050fa:	d018      	beq.n	800512e <HAL_RCC_ClockConfig+0x11e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2bb0      	cmp	r3, #176	; 0xb0
 8005102:	d014      	beq.n	800512e <HAL_RCC_ClockConfig+0x11e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2bc0      	cmp	r3, #192	; 0xc0
 800510a:	d010      	beq.n	800512e <HAL_RCC_ClockConfig+0x11e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2bd0      	cmp	r3, #208	; 0xd0
 8005112:	d00c      	beq.n	800512e <HAL_RCC_ClockConfig+0x11e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2be0      	cmp	r3, #224	; 0xe0
 800511a:	d008      	beq.n	800512e <HAL_RCC_ClockConfig+0x11e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2bf0      	cmp	r3, #240	; 0xf0
 8005122:	d004      	beq.n	800512e <HAL_RCC_ClockConfig+0x11e>
 8005124:	f240 217e 	movw	r1, #638	; 0x27e
 8005128:	483f      	ldr	r0, [pc, #252]	; (8005228 <HAL_RCC_ClockConfig+0x218>)
 800512a:	f7fb ffb1 	bl	8001090 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512e:	4b40      	ldr	r3, [pc, #256]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	493d      	ldr	r1, [pc, #244]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d059      	beq.n	8005200 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d010      	beq.n	8005176 <HAL_RCC_ClockConfig+0x166>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d00c      	beq.n	8005176 <HAL_RCC_ClockConfig+0x166>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d008      	beq.n	8005176 <HAL_RCC_ClockConfig+0x166>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d004      	beq.n	8005176 <HAL_RCC_ClockConfig+0x166>
 800516c:	f240 2185 	movw	r1, #645	; 0x285
 8005170:	482d      	ldr	r0, [pc, #180]	; (8005228 <HAL_RCC_ClockConfig+0x218>)
 8005172:	f7fb ff8d 	bl	8001090 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d107      	bne.n	800518e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517e:	4b2c      	ldr	r3, [pc, #176]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d119      	bne.n	80051be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0bf      	b.n	800530e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d003      	beq.n	800519e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800519a:	2b03      	cmp	r3, #3
 800519c:	d107      	bne.n	80051ae <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519e:	4b24      	ldr	r3, [pc, #144]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e0af      	b.n	800530e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ae:	4b20      	ldr	r3, [pc, #128]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e0a7      	b.n	800530e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051be:	4b1c      	ldr	r3, [pc, #112]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f023 0203 	bic.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4919      	ldr	r1, [pc, #100]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051d0:	f7fc ff02 	bl	8001fd8 <HAL_GetTick>
 80051d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d8:	f7fc fefe 	bl	8001fd8 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e08f      	b.n	800530e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <HAL_RCC_ClockConfig+0x220>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 020c 	and.w	r2, r3, #12
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d1eb      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <HAL_RCC_ClockConfig+0x21c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d212      	bcs.n	8005234 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <HAL_RCC_ClockConfig+0x21c>)
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCC_ClockConfig+0x21c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d007      	beq.n	8005234 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e072      	b.n	800530e <HAL_RCC_ClockConfig+0x2fe>
 8005228:	08011320 	.word	0x08011320
 800522c:	40023c00 	.word	0x40023c00
 8005230:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d025      	beq.n	800528c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d018      	beq.n	800527a <HAL_RCC_ClockConfig+0x26a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005250:	d013      	beq.n	800527a <HAL_RCC_ClockConfig+0x26a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800525a:	d00e      	beq.n	800527a <HAL_RCC_ClockConfig+0x26a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x26a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800526e:	d004      	beq.n	800527a <HAL_RCC_ClockConfig+0x26a>
 8005270:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005274:	4828      	ldr	r0, [pc, #160]	; (8005318 <HAL_RCC_ClockConfig+0x308>)
 8005276:	f7fb ff0b 	bl	8001090 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800527a:	4b28      	ldr	r3, [pc, #160]	; (800531c <HAL_RCC_ClockConfig+0x30c>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4925      	ldr	r1, [pc, #148]	; (800531c <HAL_RCC_ClockConfig+0x30c>)
 8005288:	4313      	orrs	r3, r2
 800528a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d026      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d018      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x2c2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a8:	d013      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x2c2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052b2:	d00e      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x2c2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80052bc:	d009      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x2c2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80052c6:	d004      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x2c2>
 80052c8:	f240 21ca 	movw	r1, #714	; 0x2ca
 80052cc:	4812      	ldr	r0, [pc, #72]	; (8005318 <HAL_RCC_ClockConfig+0x308>)
 80052ce:	f7fb fedf 	bl	8001090 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052d2:	4b12      	ldr	r3, [pc, #72]	; (800531c <HAL_RCC_ClockConfig+0x30c>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	490e      	ldr	r1, [pc, #56]	; (800531c <HAL_RCC_ClockConfig+0x30c>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052e6:	f000 f821 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80052ea:	4602      	mov	r2, r0
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_RCC_ClockConfig+0x30c>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	490a      	ldr	r1, [pc, #40]	; (8005320 <HAL_RCC_ClockConfig+0x310>)
 80052f8:	5ccb      	ldrb	r3, [r1, r3]
 80052fa:	fa22 f303 	lsr.w	r3, r2, r3
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <HAL_RCC_ClockConfig+0x314>)
 8005300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <HAL_RCC_ClockConfig+0x318>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7fc fac8 	bl	800189c <HAL_InitTick>

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	08011320 	.word	0x08011320
 800531c:	40023800 	.word	0x40023800
 8005320:	08013e30 	.word	0x08013e30
 8005324:	2000006c 	.word	0x2000006c
 8005328:	20000070 	.word	0x20000070

0800532c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800532c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005330:	b090      	sub	sp, #64	; 0x40
 8005332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	637b      	str	r3, [r7, #52]	; 0x34
 8005338:	2300      	movs	r3, #0
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533c:	2300      	movs	r3, #0
 800533e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005344:	4b59      	ldr	r3, [pc, #356]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 030c 	and.w	r3, r3, #12
 800534c:	2b08      	cmp	r3, #8
 800534e:	d00d      	beq.n	800536c <HAL_RCC_GetSysClockFreq+0x40>
 8005350:	2b08      	cmp	r3, #8
 8005352:	f200 80a1 	bhi.w	8005498 <HAL_RCC_GetSysClockFreq+0x16c>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x34>
 800535a:	2b04      	cmp	r3, #4
 800535c:	d003      	beq.n	8005366 <HAL_RCC_GetSysClockFreq+0x3a>
 800535e:	e09b      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005360:	4b53      	ldr	r3, [pc, #332]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005362:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005364:	e09b      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005366:	4b53      	ldr	r3, [pc, #332]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800536a:	e098      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800536c:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005376:	4b4d      	ldr	r3, [pc, #308]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d028      	beq.n	80053d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005382:	4b4a      	ldr	r3, [pc, #296]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	099b      	lsrs	r3, r3, #6
 8005388:	2200      	movs	r2, #0
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	627a      	str	r2, [r7, #36]	; 0x24
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005394:	2100      	movs	r1, #0
 8005396:	4b47      	ldr	r3, [pc, #284]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005398:	fb03 f201 	mul.w	r2, r3, r1
 800539c:	2300      	movs	r3, #0
 800539e:	fb00 f303 	mul.w	r3, r0, r3
 80053a2:	4413      	add	r3, r2
 80053a4:	4a43      	ldr	r2, [pc, #268]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80053a6:	fba0 1202 	umull	r1, r2, r0, r2
 80053aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053ac:	460a      	mov	r2, r1
 80053ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80053b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b2:	4413      	add	r3, r2
 80053b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	2200      	movs	r2, #0
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	61fa      	str	r2, [r7, #28]
 80053be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053c6:	f7fa ff5b 	bl	8000280 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4613      	mov	r3, r2
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d2:	e053      	b.n	800547c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d4:	4b35      	ldr	r3, [pc, #212]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	099b      	lsrs	r3, r3, #6
 80053da:	2200      	movs	r2, #0
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	617a      	str	r2, [r7, #20]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80053e6:	f04f 0b00 	mov.w	fp, #0
 80053ea:	4652      	mov	r2, sl
 80053ec:	465b      	mov	r3, fp
 80053ee:	f04f 0000 	mov.w	r0, #0
 80053f2:	f04f 0100 	mov.w	r1, #0
 80053f6:	0159      	lsls	r1, r3, #5
 80053f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053fc:	0150      	lsls	r0, r2, #5
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	ebb2 080a 	subs.w	r8, r2, sl
 8005406:	eb63 090b 	sbc.w	r9, r3, fp
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005416:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800541a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800541e:	ebb2 0408 	subs.w	r4, r2, r8
 8005422:	eb63 0509 	sbc.w	r5, r3, r9
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	00eb      	lsls	r3, r5, #3
 8005430:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005434:	00e2      	lsls	r2, r4, #3
 8005436:	4614      	mov	r4, r2
 8005438:	461d      	mov	r5, r3
 800543a:	eb14 030a 	adds.w	r3, r4, sl
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	eb45 030b 	adc.w	r3, r5, fp
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005452:	4629      	mov	r1, r5
 8005454:	028b      	lsls	r3, r1, #10
 8005456:	4621      	mov	r1, r4
 8005458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800545c:	4621      	mov	r1, r4
 800545e:	028a      	lsls	r2, r1, #10
 8005460:	4610      	mov	r0, r2
 8005462:	4619      	mov	r1, r3
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	2200      	movs	r2, #0
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	60fa      	str	r2, [r7, #12]
 800546c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005470:	f7fa ff06 	bl	8000280 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4613      	mov	r3, r2
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	3301      	adds	r3, #1
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800548c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	fbb2 f3f3 	udiv	r3, r2, r3
 8005494:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005496:	e002      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800549a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800549c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3740      	adds	r7, #64	; 0x40
 80054a4:	46bd      	mov	sp, r7
 80054a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054aa:	bf00      	nop
 80054ac:	40023800 	.word	0x40023800
 80054b0:	00f42400 	.word	0x00f42400
 80054b4:	017d7840 	.word	0x017d7840

080054b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <HAL_RCC_GetHCLKFreq+0x14>)
 80054be:	681b      	ldr	r3, [r3, #0]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	2000006c 	.word	0x2000006c

080054d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054d4:	f7ff fff0 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	0a9b      	lsrs	r3, r3, #10
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4903      	ldr	r1, [pc, #12]	; (80054f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40023800 	.word	0x40023800
 80054f4:	08013e40 	.word	0x08013e40

080054f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	220f      	movs	r2, #15
 8005506:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005508:	4b12      	ldr	r3, [pc, #72]	; (8005554 <HAL_RCC_GetClockConfig+0x5c>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 0203 	and.w	r2, r3, #3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005514:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <HAL_RCC_GetClockConfig+0x5c>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005520:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <HAL_RCC_GetClockConfig+0x5c>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800552c:	4b09      	ldr	r3, [pc, #36]	; (8005554 <HAL_RCC_GetClockConfig+0x5c>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	08db      	lsrs	r3, r3, #3
 8005532:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <HAL_RCC_GetClockConfig+0x60>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0207 	and.w	r2, r3, #7
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	601a      	str	r2, [r3, #0]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40023800 	.word	0x40023800
 8005558:	40023c00 	.word	0x40023c00

0800555c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b0f      	cmp	r3, #15
 800557a:	d904      	bls.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800557c:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8005580:	4834      	ldr	r0, [pc, #208]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005582:	f7fb fd85 	bl	8001090 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d105      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800559a:	2b00      	cmp	r3, #0
 800559c:	d066      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d903      	bls.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	2b07      	cmp	r3, #7
 80055ac:	d904      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80055ae:	f640 11de 	movw	r1, #2526	; 0x9de
 80055b2:	4828      	ldr	r0, [pc, #160]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80055b4:	f7fb fd6c 	bl	8001090 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b31      	cmp	r3, #49	; 0x31
 80055be:	d904      	bls.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80055c8:	d904      	bls.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80055ca:	f640 11df 	movw	r1, #2527	; 0x9df
 80055ce:	4821      	ldr	r0, [pc, #132]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80055d0:	f7fb fd5e 	bl	8001090 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d903      	bls.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b3f      	cmp	r3, #63	; 0x3f
 80055e2:	d904      	bls.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x92>
 80055e4:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80055e8:	481a      	ldr	r0, [pc, #104]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80055ea:	f7fb fd51 	bl	8001090 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055ee:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055f4:	f7fc fcf0 	bl	8001fd8 <HAL_GetTick>
 80055f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055fc:	f7fc fcec 	bl	8001fd8 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e1b3      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	019b      	lsls	r3, r3, #6
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	071b      	lsls	r3, r3, #28
 800562c:	490b      	ldr	r1, [pc, #44]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005634:	4b08      	ldr	r3, [pc, #32]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800563a:	f7fc fccd 	bl	8001fd8 <HAL_GetTick>
 800563e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005640:	e00e      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005642:	f7fc fcc9 	bl	8001fd8 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d907      	bls.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e190      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005654:	08011358 	.word	0x08011358
 8005658:	42470068 	.word	0x42470068
 800565c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005660:	4b88      	ldr	r3, [pc, #544]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0ea      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8173 	beq.w	8005960 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005682:	f000 80a6 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568e:	f000 80a0 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	4a7c      	ldr	r2, [pc, #496]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	f000 809a 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	4a7a      	ldr	r2, [pc, #488]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	f000 8094 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	4a78      	ldr	r2, [pc, #480]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	f000 808e 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	4a76      	ldr	r2, [pc, #472]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	f000 8088 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	4a74      	ldr	r2, [pc, #464]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	f000 8082 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	4a72      	ldr	r2, [pc, #456]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d07c      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	4a70      	ldr	r2, [pc, #448]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d077      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	4a6f      	ldr	r2, [pc, #444]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d072      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	4a6d      	ldr	r2, [pc, #436]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d06d      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	4a6c      	ldr	r2, [pc, #432]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d068      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	4a6a      	ldr	r2, [pc, #424]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d063      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	4a69      	ldr	r2, [pc, #420]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d05e      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	4a67      	ldr	r2, [pc, #412]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d059      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	4a66      	ldr	r2, [pc, #408]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d054      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	4a64      	ldr	r2, [pc, #400]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d04f      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	4a63      	ldr	r2, [pc, #396]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d04a      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	4a61      	ldr	r2, [pc, #388]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d045      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	4a60      	ldr	r2, [pc, #384]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d040      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	4a5e      	ldr	r2, [pc, #376]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d03b      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	4a5d      	ldr	r2, [pc, #372]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d036      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	4a5b      	ldr	r2, [pc, #364]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d031      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	4a5a      	ldr	r2, [pc, #360]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d02c      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	4a58      	ldr	r2, [pc, #352]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d027      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	4a57      	ldr	r2, [pc, #348]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d022      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	4a55      	ldr	r2, [pc, #340]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01d      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	4a54      	ldr	r2, [pc, #336]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d018      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	4a52      	ldr	r2, [pc, #328]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	4a51      	ldr	r2, [pc, #324]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	4a4f      	ldr	r2, [pc, #316]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	4a4e      	ldr	r2, [pc, #312]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057c8:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 80057cc:	484c      	ldr	r0, [pc, #304]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80057ce:	f7fb fc5f 	bl	8001090 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	4b2b      	ldr	r3, [pc, #172]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e0:	6413      	str	r3, [r2, #64]	; 0x40
 80057e2:	4b28      	ldr	r3, [pc, #160]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057ee:	4b45      	ldr	r3, [pc, #276]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a44      	ldr	r2, [pc, #272]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80057f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057fa:	f7fc fbed 	bl	8001fd8 <HAL_GetTick>
 80057fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005802:	f7fc fbe9 	bl	8001fd8 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e0b0      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005814:	4b3b      	ldr	r3, [pc, #236]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0f0      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005820:	4b18      	ldr	r3, [pc, #96]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005828:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d073      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d06c      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005848:	4b2f      	ldr	r3, [pc, #188]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800584e:	4b2e      	ldr	r3, [pc, #184]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005854:	4a0b      	ldr	r2, [pc, #44]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800585a:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b01      	cmp	r3, #1
 8005864:	d158      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005866:	f7fc fbb7 	bl	8001fd8 <HAL_GetTick>
 800586a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800586c:	e04e      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800586e:	f7fc fbb3 	bl	8001fd8 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	f241 3288 	movw	r2, #5000	; 0x1388
 800587c:	4293      	cmp	r3, r2
 800587e:	d945      	bls.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e078      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005884:	40023800 	.word	0x40023800
 8005888:	00020300 	.word	0x00020300
 800588c:	00030300 	.word	0x00030300
 8005890:	00040300 	.word	0x00040300
 8005894:	00050300 	.word	0x00050300
 8005898:	00060300 	.word	0x00060300
 800589c:	00070300 	.word	0x00070300
 80058a0:	00080300 	.word	0x00080300
 80058a4:	00090300 	.word	0x00090300
 80058a8:	000a0300 	.word	0x000a0300
 80058ac:	000b0300 	.word	0x000b0300
 80058b0:	000c0300 	.word	0x000c0300
 80058b4:	000d0300 	.word	0x000d0300
 80058b8:	000e0300 	.word	0x000e0300
 80058bc:	000f0300 	.word	0x000f0300
 80058c0:	00100300 	.word	0x00100300
 80058c4:	00110300 	.word	0x00110300
 80058c8:	00120300 	.word	0x00120300
 80058cc:	00130300 	.word	0x00130300
 80058d0:	00140300 	.word	0x00140300
 80058d4:	00150300 	.word	0x00150300
 80058d8:	00160300 	.word	0x00160300
 80058dc:	00170300 	.word	0x00170300
 80058e0:	00180300 	.word	0x00180300
 80058e4:	00190300 	.word	0x00190300
 80058e8:	001a0300 	.word	0x001a0300
 80058ec:	001b0300 	.word	0x001b0300
 80058f0:	001c0300 	.word	0x001c0300
 80058f4:	001d0300 	.word	0x001d0300
 80058f8:	001e0300 	.word	0x001e0300
 80058fc:	001f0300 	.word	0x001f0300
 8005900:	08011358 	.word	0x08011358
 8005904:	40007000 	.word	0x40007000
 8005908:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800590c:	4b1c      	ldr	r3, [pc, #112]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800590e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0aa      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005924:	d10d      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005926:	4b16      	ldr	r3, [pc, #88]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593a:	4911      	ldr	r1, [pc, #68]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800593c:	4313      	orrs	r3, r2
 800593e:	608b      	str	r3, [r1, #8]
 8005940:	e005      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	4a0e      	ldr	r2, [pc, #56]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005948:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800594c:	6093      	str	r3, [r2, #8]
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595a:	4909      	ldr	r1, [pc, #36]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800595c:	4313      	orrs	r3, r2
 800595e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	7d1a      	ldrb	r2, [r3, #20]
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005972:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40023800 	.word	0x40023800
 8005984:	424711e0 	.word	0x424711e0

08005988 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e0c4      	b.n	8005b28 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a63      	ldr	r2, [pc, #396]	; (8005b30 <HAL_RTC_Init+0x1a8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_RTC_Init+0x2a>
 80059a8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80059ac:	4861      	ldr	r0, [pc, #388]	; (8005b34 <HAL_RTC_Init+0x1ac>)
 80059ae:	f7fb fb6f 	bl	8001090 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b40      	cmp	r3, #64	; 0x40
 80059b8:	d008      	beq.n	80059cc <HAL_RTC_Init+0x44>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <HAL_RTC_Init+0x44>
 80059c2:	f240 1105 	movw	r1, #261	; 0x105
 80059c6:	485b      	ldr	r0, [pc, #364]	; (8005b34 <HAL_RTC_Init+0x1ac>)
 80059c8:	f7fb fb62 	bl	8001090 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2b7f      	cmp	r3, #127	; 0x7f
 80059d2:	d904      	bls.n	80059de <HAL_RTC_Init+0x56>
 80059d4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80059d8:	4856      	ldr	r0, [pc, #344]	; (8005b34 <HAL_RTC_Init+0x1ac>)
 80059da:	f7fb fb59 	bl	8001090 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e6:	d304      	bcc.n	80059f2 <HAL_RTC_Init+0x6a>
 80059e8:	f240 1107 	movw	r1, #263	; 0x107
 80059ec:	4851      	ldr	r0, [pc, #324]	; (8005b34 <HAL_RTC_Init+0x1ac>)
 80059ee:	f7fb fb4f 	bl	8001090 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d013      	beq.n	8005a22 <HAL_RTC_Init+0x9a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a02:	d00e      	beq.n	8005a22 <HAL_RTC_Init+0x9a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a0c:	d009      	beq.n	8005a22 <HAL_RTC_Init+0x9a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a16:	d004      	beq.n	8005a22 <HAL_RTC_Init+0x9a>
 8005a18:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005a1c:	4845      	ldr	r0, [pc, #276]	; (8005b34 <HAL_RTC_Init+0x1ac>)
 8005a1e:	f7fb fb37 	bl	8001090 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <HAL_RTC_Init+0xb6>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a32:	d004      	beq.n	8005a3e <HAL_RTC_Init+0xb6>
 8005a34:	f240 1109 	movw	r1, #265	; 0x109
 8005a38:	483e      	ldr	r0, [pc, #248]	; (8005b34 <HAL_RTC_Init+0x1ac>)
 8005a3a:	f7fb fb29 	bl	8001090 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <HAL_RTC_Init+0xd2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a4e:	d004      	beq.n	8005a5a <HAL_RTC_Init+0xd2>
 8005a50:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005a54:	4837      	ldr	r0, [pc, #220]	; (8005b34 <HAL_RTC_Init+0x1ac>)
 8005a56:	f7fb fb1b 	bl	8001090 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7f5b      	ldrb	r3, [r3, #29]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fb fb76 	bl	800115c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	22ca      	movs	r2, #202	; 0xca
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2253      	movs	r2, #83	; 0x53
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fad2 	bl	8006030 <RTC_EnterInitMode>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d12c      	bne.n	8005af0 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6899      	ldr	r1, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68d2      	ldr	r2, [r2, #12]
 8005ad0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6919      	ldr	r1, [r3, #16]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	041a      	lsls	r2, r3, #16
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fad9 	bl	800609e <RTC_ExitInitMode>
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d113      	bne.n	8005b1e <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	22ff      	movs	r2, #255	; 0xff
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40002800 	.word	0x40002800
 8005b34:	08011394 	.word	0x08011394

08005b38 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b38:	b590      	push	{r4, r7, lr}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_RTC_SetTime+0x26>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d004      	beq.n	8005b5e <HAL_RTC_SetTime+0x26>
 8005b54:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8005b58:	489a      	ldr	r0, [pc, #616]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005b5a:	f7fb fa99 	bl	8001090 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b66:	d00d      	beq.n	8005b84 <HAL_RTC_SetTime+0x4c>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b70:	d008      	beq.n	8005b84 <HAL_RTC_SetTime+0x4c>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d004      	beq.n	8005b84 <HAL_RTC_SetTime+0x4c>
 8005b7a:	f240 21b5 	movw	r1, #693	; 0x2b5
 8005b7e:	4891      	ldr	r0, [pc, #580]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005b80:	f7fb fa86 	bl	8001090 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <HAL_RTC_SetTime+0x68>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b94:	d004      	beq.n	8005ba0 <HAL_RTC_SetTime+0x68>
 8005b96:	f240 21b6 	movw	r1, #694	; 0x2b6
 8005b9a:	488a      	ldr	r0, [pc, #552]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005b9c:	f7fb fa78 	bl	8001090 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	7f1b      	ldrb	r3, [r3, #28]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_RTC_SetTime+0x74>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e107      	b.n	8005dbc <HAL_RTC_SetTime+0x284>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d15c      	bne.n	8005c78 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01a      	beq.n	8005c02 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_RTC_SetTime+0xa4>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b0c      	cmp	r3, #12
 8005bda:	d904      	bls.n	8005be6 <HAL_RTC_SetTime+0xae>
 8005bdc:	f240 21c1 	movw	r1, #705	; 0x2c1
 8005be0:	4878      	ldr	r0, [pc, #480]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005be2:	f7fb fa55 	bl	8001090 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	78db      	ldrb	r3, [r3, #3]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d015      	beq.n	8005c1a <HAL_RTC_SetTime+0xe2>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	78db      	ldrb	r3, [r3, #3]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d011      	beq.n	8005c1a <HAL_RTC_SetTime+0xe2>
 8005bf6:	f240 21c2 	movw	r1, #706	; 0x2c2
 8005bfa:	4872      	ldr	r0, [pc, #456]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005bfc:	f7fb fa48 	bl	8001090 <assert_failed>
 8005c00:	e00b      	b.n	8005c1a <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2200      	movs	r2, #0
 8005c06:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b17      	cmp	r3, #23
 8005c0e:	d904      	bls.n	8005c1a <HAL_RTC_SetTime+0xe2>
 8005c10:	f240 21c7 	movw	r1, #711	; 0x2c7
 8005c14:	486b      	ldr	r0, [pc, #428]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005c16:	f7fb fa3b 	bl	8001090 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	2b3b      	cmp	r3, #59	; 0x3b
 8005c20:	d904      	bls.n	8005c2c <HAL_RTC_SetTime+0xf4>
 8005c22:	f240 21c9 	movw	r1, #713	; 0x2c9
 8005c26:	4867      	ldr	r0, [pc, #412]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005c28:	f7fb fa32 	bl	8001090 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	789b      	ldrb	r3, [r3, #2]
 8005c30:	2b3b      	cmp	r3, #59	; 0x3b
 8005c32:	d904      	bls.n	8005c3e <HAL_RTC_SetTime+0x106>
 8005c34:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005c38:	4862      	ldr	r0, [pc, #392]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005c3a:	f7fb fa29 	bl	8001090 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fa50 	bl	80060e8 <RTC_ByteToBcd2>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fa49 	bl	80060e8 <RTC_ByteToBcd2>
 8005c56:	4603      	mov	r3, r0
 8005c58:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c5a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	789b      	ldrb	r3, [r3, #2]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fa41 	bl	80060e8 <RTC_ByteToBcd2>
 8005c66:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c68:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	78db      	ldrb	r3, [r3, #3]
 8005c70:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e062      	b.n	8005d3e <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d022      	beq.n	8005ccc <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fa49 	bl	8006122 <RTC_Bcd2ToByte>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_RTC_SetTime+0x16e>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fa41 	bl	8006122 <RTC_Bcd2ToByte>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b0c      	cmp	r3, #12
 8005ca4:	d904      	bls.n	8005cb0 <HAL_RTC_SetTime+0x178>
 8005ca6:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005caa:	4846      	ldr	r0, [pc, #280]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005cac:	f7fb f9f0 	bl	8001090 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	78db      	ldrb	r3, [r3, #3]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d019      	beq.n	8005cec <HAL_RTC_SetTime+0x1b4>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	78db      	ldrb	r3, [r3, #3]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d015      	beq.n	8005cec <HAL_RTC_SetTime+0x1b4>
 8005cc0:	f240 21d6 	movw	r1, #726	; 0x2d6
 8005cc4:	483f      	ldr	r0, [pc, #252]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005cc6:	f7fb f9e3 	bl	8001090 <assert_failed>
 8005cca:	e00f      	b.n	8005cec <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fa23 	bl	8006122 <RTC_Bcd2ToByte>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b17      	cmp	r3, #23
 8005ce0:	d904      	bls.n	8005cec <HAL_RTC_SetTime+0x1b4>
 8005ce2:	f240 21db 	movw	r1, #731	; 0x2db
 8005ce6:	4837      	ldr	r0, [pc, #220]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005ce8:	f7fb f9d2 	bl	8001090 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fa16 	bl	8006122 <RTC_Bcd2ToByte>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b3b      	cmp	r3, #59	; 0x3b
 8005cfa:	d904      	bls.n	8005d06 <HAL_RTC_SetTime+0x1ce>
 8005cfc:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005d00:	4830      	ldr	r0, [pc, #192]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005d02:	f7fb f9c5 	bl	8001090 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	789b      	ldrb	r3, [r3, #2]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fa09 	bl	8006122 <RTC_Bcd2ToByte>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b3b      	cmp	r3, #59	; 0x3b
 8005d14:	d904      	bls.n	8005d20 <HAL_RTC_SetTime+0x1e8>
 8005d16:	f240 21de 	movw	r1, #734	; 0x2de
 8005d1a:	482a      	ldr	r0, [pc, #168]	; (8005dc4 <HAL_RTC_SetTime+0x28c>)
 8005d1c:	f7fb f9b8 	bl	8001090 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d2c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d32:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	78db      	ldrb	r3, [r3, #3]
 8005d38:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	22ca      	movs	r2, #202	; 0xca
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2253      	movs	r2, #83	; 0x53
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 f96e 	bl	8006030 <RTC_EnterInitMode>
 8005d54:	4603      	mov	r3, r0
 8005d56:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d120      	bne.n	8005da0 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d68:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d6c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6899      	ldr	r1, [r3, #8]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f981 	bl	800609e <RTC_ExitInitMode>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005da0:	7cfb      	ldrb	r3, [r7, #19]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	22ff      	movs	r2, #255	; 0xff
 8005db2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	771a      	strb	r2, [r3, #28]

  return status;
 8005dba:	7cfb      	ldrb	r3, [r7, #19]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd90      	pop	{r4, r7, pc}
 8005dc4:	08011394 	.word	0x08011394

08005dc8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <HAL_RTC_SetDate+0x26>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d004      	beq.n	8005dee <HAL_RTC_SetDate+0x26>
 8005de4:	f240 3153 	movw	r1, #851	; 0x353
 8005de8:	487c      	ldr	r0, [pc, #496]	; (8005fdc <HAL_RTC_SetDate+0x214>)
 8005dea:	f7fb f951 	bl	8001090 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	7f1b      	ldrb	r3, [r3, #28]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_RTC_SetDate+0x32>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e0ec      	b.n	8005fd4 <HAL_RTC_SetDate+0x20c>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2202      	movs	r2, #2
 8005e04:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10e      	bne.n	8005e2a <HAL_RTC_SetDate+0x62>
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	f023 0310 	bic.w	r3, r3, #16
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	330a      	adds	r3, #10
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d01c      	beq.n	8005e6c <HAL_RTC_SetDate+0xa4>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d018      	beq.n	8005e6c <HAL_RTC_SetDate+0xa4>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d014      	beq.n	8005e6c <HAL_RTC_SetDate+0xa4>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d010      	beq.n	8005e6c <HAL_RTC_SetDate+0xa4>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d00c      	beq.n	8005e6c <HAL_RTC_SetDate+0xa4>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b06      	cmp	r3, #6
 8005e58:	d008      	beq.n	8005e6c <HAL_RTC_SetDate+0xa4>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b07      	cmp	r3, #7
 8005e60:	d004      	beq.n	8005e6c <HAL_RTC_SetDate+0xa4>
 8005e62:	f240 315f 	movw	r1, #863	; 0x35f
 8005e66:	485d      	ldr	r0, [pc, #372]	; (8005fdc <HAL_RTC_SetDate+0x214>)
 8005e68:	f7fb f912 	bl	8001090 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d13f      	bne.n	8005ef2 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	78db      	ldrb	r3, [r3, #3]
 8005e76:	2b63      	cmp	r3, #99	; 0x63
 8005e78:	d904      	bls.n	8005e84 <HAL_RTC_SetDate+0xbc>
 8005e7a:	f240 3163 	movw	r1, #867	; 0x363
 8005e7e:	4857      	ldr	r0, [pc, #348]	; (8005fdc <HAL_RTC_SetDate+0x214>)
 8005e80:	f7fb f906 	bl	8001090 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_RTC_SetDate+0xcc>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b0c      	cmp	r3, #12
 8005e92:	d904      	bls.n	8005e9e <HAL_RTC_SetDate+0xd6>
 8005e94:	f44f 7159 	mov.w	r1, #868	; 0x364
 8005e98:	4850      	ldr	r0, [pc, #320]	; (8005fdc <HAL_RTC_SetDate+0x214>)
 8005e9a:	f7fb f8f9 	bl	8001090 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	789b      	ldrb	r3, [r3, #2]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_RTC_SetDate+0xe6>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	789b      	ldrb	r3, [r3, #2]
 8005eaa:	2b1f      	cmp	r3, #31
 8005eac:	d904      	bls.n	8005eb8 <HAL_RTC_SetDate+0xf0>
 8005eae:	f240 3165 	movw	r1, #869	; 0x365
 8005eb2:	484a      	ldr	r0, [pc, #296]	; (8005fdc <HAL_RTC_SetDate+0x214>)
 8005eb4:	f7fb f8ec 	bl	8001090 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	78db      	ldrb	r3, [r3, #3]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 f913 	bl	80060e8 <RTC_ByteToBcd2>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	785b      	ldrb	r3, [r3, #1]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 f90c 	bl	80060e8 <RTC_ByteToBcd2>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ed4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	789b      	ldrb	r3, [r3, #2]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f904 	bl	80060e8 <RTC_ByteToBcd2>
 8005ee0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ee2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e045      	b.n	8005f7e <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	78db      	ldrb	r3, [r3, #3]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f913 	bl	8006122 <RTC_Bcd2ToByte>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b63      	cmp	r3, #99	; 0x63
 8005f00:	d904      	bls.n	8005f0c <HAL_RTC_SetDate+0x144>
 8005f02:	f240 316e 	movw	r1, #878	; 0x36e
 8005f06:	4835      	ldr	r0, [pc, #212]	; (8005fdc <HAL_RTC_SetDate+0x214>)
 8005f08:	f7fb f8c2 	bl	8001090 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 f906 	bl	8006122 <RTC_Bcd2ToByte>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_RTC_SetDate+0x164>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 f8fe 	bl	8006122 <RTC_Bcd2ToByte>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b0c      	cmp	r3, #12
 8005f2a:	d904      	bls.n	8005f36 <HAL_RTC_SetDate+0x16e>
 8005f2c:	f240 316f 	movw	r1, #879	; 0x36f
 8005f30:	482a      	ldr	r0, [pc, #168]	; (8005fdc <HAL_RTC_SetDate+0x214>)
 8005f32:	f7fb f8ad 	bl	8001090 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	789b      	ldrb	r3, [r3, #2]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f8f1 	bl	8006122 <RTC_Bcd2ToByte>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <HAL_RTC_SetDate+0x18e>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	789b      	ldrb	r3, [r3, #2]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f8e9 	bl	8006122 <RTC_Bcd2ToByte>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b1f      	cmp	r3, #31
 8005f54:	d904      	bls.n	8005f60 <HAL_RTC_SetDate+0x198>
 8005f56:	f44f 715c 	mov.w	r1, #880	; 0x370
 8005f5a:	4820      	ldr	r0, [pc, #128]	; (8005fdc <HAL_RTC_SetDate+0x214>)
 8005f5c:	f7fb f898 	bl	8001090 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	78db      	ldrb	r3, [r3, #3]
 8005f64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f6c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	22ca      	movs	r2, #202	; 0xca
 8005f84:	625a      	str	r2, [r3, #36]	; 0x24
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2253      	movs	r2, #83	; 0x53
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f84e 	bl	8006030 <RTC_EnterInitMode>
 8005f94:	4603      	mov	r3, r0
 8005f96:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fa8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 f875 	bl	800609e <RTC_ExitInitMode>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fb8:	7cfb      	ldrb	r3, [r7, #19]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	22ff      	movs	r2, #255	; 0xff
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	771a      	strb	r2, [r3, #28]

  return status;
 8005fd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd90      	pop	{r4, r7, pc}
 8005fdc:	08011394 	.word	0x08011394

08005fe0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ffa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ffc:	f7fb ffec 	bl	8001fd8 <HAL_GetTick>
 8006000:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006002:	e009      	b.n	8006018 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006004:	f7fb ffe8 	bl	8001fd8 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006012:	d901      	bls.n	8006018 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e007      	b.n	8006028 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ee      	beq.n	8006004 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d122      	bne.n	8006094 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800605c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800605e:	f7fb ffbb 	bl	8001fd8 <HAL_GetTick>
 8006062:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006064:	e00c      	b.n	8006080 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006066:	f7fb ffb7 	bl	8001fd8 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006074:	d904      	bls.n	8006080 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2204      	movs	r2, #4
 800607a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <RTC_EnterInitMode+0x64>
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d1e8      	bne.n	8006066 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060b8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ff89 	bl	8005fe0 <HAL_RTC_WaitForSynchro>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2204      	movs	r2, #4
 80060d8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80060f6:	e005      	b.n	8006104 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	3301      	adds	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	3b0a      	subs	r3, #10
 8006102:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	2b09      	cmp	r3, #9
 8006108:	d8f6      	bhi.n	80060f8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	b2da      	uxtb	r2, r3
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	4313      	orrs	r3, r2
 8006114:	b2db      	uxtb	r3, r3
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	4603      	mov	r3, r0
 800612a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	b2db      	uxtb	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	0092      	lsls	r2, r2, #2
 800613a:	4413      	add	r3, r2
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	b2da      	uxtb	r2, r3
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	4413      	add	r3, r2
 800614c:	b2db      	uxtb	r3, r3
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
	...

0800615c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e18c      	b.n	8006488 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a75      	ldr	r2, [pc, #468]	; (8006348 <HAL_SPI_Init+0x1ec>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d018      	beq.n	80061aa <HAL_SPI_Init+0x4e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a73      	ldr	r2, [pc, #460]	; (800634c <HAL_SPI_Init+0x1f0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <HAL_SPI_Init+0x4e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a72      	ldr	r2, [pc, #456]	; (8006350 <HAL_SPI_Init+0x1f4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_SPI_Init+0x4e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a70      	ldr	r2, [pc, #448]	; (8006354 <HAL_SPI_Init+0x1f8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_SPI_Init+0x4e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a6f      	ldr	r2, [pc, #444]	; (8006358 <HAL_SPI_Init+0x1fc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_SPI_Init+0x4e>
 80061a0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061a4:	486d      	ldr	r0, [pc, #436]	; (800635c <HAL_SPI_Init+0x200>)
 80061a6:	f7fa ff73 	bl	8001090 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <HAL_SPI_Init+0x6a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ba:	d004      	beq.n	80061c6 <HAL_SPI_Init+0x6a>
 80061bc:	f240 1141 	movw	r1, #321	; 0x141
 80061c0:	4866      	ldr	r0, [pc, #408]	; (800635c <HAL_SPI_Init+0x200>)
 80061c2:	f7fa ff65 	bl	8001090 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00e      	beq.n	80061ec <HAL_SPI_Init+0x90>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d6:	d009      	beq.n	80061ec <HAL_SPI_Init+0x90>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e0:	d004      	beq.n	80061ec <HAL_SPI_Init+0x90>
 80061e2:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80061e6:	485d      	ldr	r0, [pc, #372]	; (800635c <HAL_SPI_Init+0x200>)
 80061e8:	f7fa ff52 	bl	8001090 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f4:	d008      	beq.n	8006208 <HAL_SPI_Init+0xac>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d004      	beq.n	8006208 <HAL_SPI_Init+0xac>
 80061fe:	f240 1143 	movw	r1, #323	; 0x143
 8006202:	4856      	ldr	r0, [pc, #344]	; (800635c <HAL_SPI_Init+0x200>)
 8006204:	f7fa ff44 	bl	8001090 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006210:	d00d      	beq.n	800622e <HAL_SPI_Init+0xd2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <HAL_SPI_Init+0xd2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006222:	d004      	beq.n	800622e <HAL_SPI_Init+0xd2>
 8006224:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006228:	484c      	ldr	r0, [pc, #304]	; (800635c <HAL_SPI_Init+0x200>)
 800622a:	f7fa ff31 	bl	8001090 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d020      	beq.n	8006278 <HAL_SPI_Init+0x11c>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	2b08      	cmp	r3, #8
 800623c:	d01c      	beq.n	8006278 <HAL_SPI_Init+0x11c>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	2b10      	cmp	r3, #16
 8006244:	d018      	beq.n	8006278 <HAL_SPI_Init+0x11c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	2b18      	cmp	r3, #24
 800624c:	d014      	beq.n	8006278 <HAL_SPI_Init+0x11c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	2b20      	cmp	r3, #32
 8006254:	d010      	beq.n	8006278 <HAL_SPI_Init+0x11c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	2b28      	cmp	r3, #40	; 0x28
 800625c:	d00c      	beq.n	8006278 <HAL_SPI_Init+0x11c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	2b30      	cmp	r3, #48	; 0x30
 8006264:	d008      	beq.n	8006278 <HAL_SPI_Init+0x11c>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	2b38      	cmp	r3, #56	; 0x38
 800626c:	d004      	beq.n	8006278 <HAL_SPI_Init+0x11c>
 800626e:	f240 1145 	movw	r1, #325	; 0x145
 8006272:	483a      	ldr	r0, [pc, #232]	; (800635c <HAL_SPI_Init+0x200>)
 8006274:	f7fa ff0c 	bl	8001090 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <HAL_SPI_Init+0x136>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d004      	beq.n	8006292 <HAL_SPI_Init+0x136>
 8006288:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800628c:	4833      	ldr	r0, [pc, #204]	; (800635c <HAL_SPI_Init+0x200>)
 800628e:	f7fa feff 	bl	8001090 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b00      	cmp	r3, #0
 8006298:	d008      	beq.n	80062ac <HAL_SPI_Init+0x150>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	2b10      	cmp	r3, #16
 80062a0:	d004      	beq.n	80062ac <HAL_SPI_Init+0x150>
 80062a2:	f240 1147 	movw	r1, #327	; 0x147
 80062a6:	482d      	ldr	r0, [pc, #180]	; (800635c <HAL_SPI_Init+0x200>)
 80062a8:	f7fa fef2 	bl	8001090 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d155      	bne.n	8006360 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_SPI_Init+0x172>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d004      	beq.n	80062ce <HAL_SPI_Init+0x172>
 80062c4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80062c8:	4824      	ldr	r0, [pc, #144]	; (800635c <HAL_SPI_Init+0x200>)
 80062ca:	f7fa fee1 	bl	8001090 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d008      	beq.n	80062e8 <HAL_SPI_Init+0x18c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d004      	beq.n	80062e8 <HAL_SPI_Init+0x18c>
 80062de:	f240 114b 	movw	r1, #331	; 0x14b
 80062e2:	481e      	ldr	r0, [pc, #120]	; (800635c <HAL_SPI_Init+0x200>)
 80062e4:	f7fa fed4 	bl	8001090 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f0:	d125      	bne.n	800633e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d05d      	beq.n	80063b6 <HAL_SPI_Init+0x25a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d059      	beq.n	80063b6 <HAL_SPI_Init+0x25a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	2b10      	cmp	r3, #16
 8006308:	d055      	beq.n	80063b6 <HAL_SPI_Init+0x25a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	2b18      	cmp	r3, #24
 8006310:	d051      	beq.n	80063b6 <HAL_SPI_Init+0x25a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	2b20      	cmp	r3, #32
 8006318:	d04d      	beq.n	80063b6 <HAL_SPI_Init+0x25a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	2b28      	cmp	r3, #40	; 0x28
 8006320:	d049      	beq.n	80063b6 <HAL_SPI_Init+0x25a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	2b30      	cmp	r3, #48	; 0x30
 8006328:	d045      	beq.n	80063b6 <HAL_SPI_Init+0x25a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	2b38      	cmp	r3, #56	; 0x38
 8006330:	d041      	beq.n	80063b6 <HAL_SPI_Init+0x25a>
 8006332:	f240 114f 	movw	r1, #335	; 0x14f
 8006336:	4809      	ldr	r0, [pc, #36]	; (800635c <HAL_SPI_Init+0x200>)
 8006338:	f7fa feaa 	bl	8001090 <assert_failed>
 800633c:	e03b      	b.n	80063b6 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	61da      	str	r2, [r3, #28]
 8006344:	e037      	b.n	80063b6 <HAL_SPI_Init+0x25a>
 8006346:	bf00      	nop
 8006348:	40013000 	.word	0x40013000
 800634c:	40003800 	.word	0x40003800
 8006350:	40003c00 	.word	0x40003c00
 8006354:	40013400 	.word	0x40013400
 8006358:	40015000 	.word	0x40015000
 800635c:	080113cc 	.word	0x080113cc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d020      	beq.n	80063aa <HAL_SPI_Init+0x24e>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	2b08      	cmp	r3, #8
 800636e:	d01c      	beq.n	80063aa <HAL_SPI_Init+0x24e>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	2b10      	cmp	r3, #16
 8006376:	d018      	beq.n	80063aa <HAL_SPI_Init+0x24e>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	2b18      	cmp	r3, #24
 800637e:	d014      	beq.n	80063aa <HAL_SPI_Init+0x24e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	2b20      	cmp	r3, #32
 8006386:	d010      	beq.n	80063aa <HAL_SPI_Init+0x24e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	2b28      	cmp	r3, #40	; 0x28
 800638e:	d00c      	beq.n	80063aa <HAL_SPI_Init+0x24e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	2b30      	cmp	r3, #48	; 0x30
 8006396:	d008      	beq.n	80063aa <HAL_SPI_Init+0x24e>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	2b38      	cmp	r3, #56	; 0x38
 800639e:	d004      	beq.n	80063aa <HAL_SPI_Init+0x24e>
 80063a0:	f240 1159 	movw	r1, #345	; 0x159
 80063a4:	483a      	ldr	r0, [pc, #232]	; (8006490 <HAL_SPI_Init+0x334>)
 80063a6:	f7fa fe73 	bl	8001090 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fa ff25 	bl	8001220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063fe:	431a      	orrs	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	ea42 0103 	orr.w	r1, r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	0c1b      	lsrs	r3, r3, #16
 8006454:	f003 0104 	and.w	r1, r3, #4
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	f003 0210 	and.w	r2, r3, #16
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69da      	ldr	r2, [r3, #28]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006476:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	080113cc 	.word	0x080113cc

08006494 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d009      	beq.n	80064c4 <HAL_SPI_Transmit+0x30>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b8:	d004      	beq.n	80064c4 <HAL_SPI_Transmit+0x30>
 80064ba:	f44f 7142 	mov.w	r1, #776	; 0x308
 80064be:	4880      	ldr	r0, [pc, #512]	; (80066c0 <HAL_SPI_Transmit+0x22c>)
 80064c0:	f7fa fde6 	bl	8001090 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_SPI_Transmit+0x3e>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e128      	b.n	8006724 <HAL_SPI_Transmit+0x290>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064da:	f7fb fd7d 	bl	8001fd8 <HAL_GetTick>
 80064de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d002      	beq.n	80064f6 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
 80064f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064f4:	e10d      	b.n	8006712 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_SPI_Transmit+0x6e>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006506:	e104      	b.n	8006712 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2203      	movs	r2, #3
 800650c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654e:	d10f      	bne.n	8006570 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800656e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d007      	beq.n	800658e <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006596:	d14b      	bne.n	8006630 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_SPI_Transmit+0x112>
 80065a0:	8afb      	ldrh	r3, [r7, #22]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d13e      	bne.n	8006624 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	881a      	ldrh	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	1c9a      	adds	r2, r3, #2
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065ca:	e02b      	b.n	8006624 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d112      	bne.n	8006600 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	881a      	ldrh	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	1c9a      	adds	r2, r3, #2
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80065fe:	e011      	b.n	8006624 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006600:	f7fb fcea 	bl	8001fd8 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d803      	bhi.n	8006618 <HAL_SPI_Transmit+0x184>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d102      	bne.n	800661e <HAL_SPI_Transmit+0x18a>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d102      	bne.n	8006624 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006622:	e076      	b.n	8006712 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1ce      	bne.n	80065cc <HAL_SPI_Transmit+0x138>
 800662e:	e04e      	b.n	80066ce <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_SPI_Transmit+0x1aa>
 8006638:	8afb      	ldrh	r3, [r7, #22]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d142      	bne.n	80066c4 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	330c      	adds	r3, #12
 8006648:	7812      	ldrb	r2, [r2, #0]
 800664a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006664:	e02e      	b.n	80066c4 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b02      	cmp	r3, #2
 8006672:	d113      	bne.n	800669c <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	86da      	strh	r2, [r3, #54]	; 0x36
 800669a:	e013      	b.n	80066c4 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800669c:	f7fb fc9c 	bl	8001fd8 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d803      	bhi.n	80066b4 <HAL_SPI_Transmit+0x220>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d102      	bne.n	80066ba <HAL_SPI_Transmit+0x226>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066be:	e028      	b.n	8006712 <HAL_SPI_Transmit+0x27e>
 80066c0:	080113cc 	.word	0x080113cc
    while (hspi->TxXferCount > 0U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1cb      	bne.n	8006666 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f8b2 	bl	800683c <SPI_EndRxTxTransaction>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ec:	2300      	movs	r3, #0
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e000      	b.n	8006712 <HAL_SPI_Transmit+0x27e>
  }

error:
 8006710:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006722:	7ffb      	ldrb	r3, [r7, #31]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	4613      	mov	r3, r2
 800673a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800673c:	f7fb fc4c 	bl	8001fd8 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	4413      	add	r3, r2
 800674a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800674c:	f7fb fc44 	bl	8001fd8 <HAL_GetTick>
 8006750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006752:	4b39      	ldr	r3, [pc, #228]	; (8006838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	015b      	lsls	r3, r3, #5
 8006758:	0d1b      	lsrs	r3, r3, #20
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	fb02 f303 	mul.w	r3, r2, r3
 8006760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006762:	e054      	b.n	800680e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d050      	beq.n	800680e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800676c:	f7fb fc34 	bl	8001fd8 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	429a      	cmp	r2, r3
 800677a:	d902      	bls.n	8006782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d13d      	bne.n	80067fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800679a:	d111      	bne.n	80067c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a4:	d004      	beq.n	80067b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ae:	d107      	bne.n	80067c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c8:	d10f      	bne.n	80067ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e017      	b.n	800682e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	3b01      	subs	r3, #1
 800680c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4013      	ands	r3, r2
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	429a      	cmp	r2, r3
 800681c:	bf0c      	ite	eq
 800681e:	2301      	moveq	r3, #1
 8006820:	2300      	movne	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	429a      	cmp	r2, r3
 800682a:	d19b      	bne.n	8006764 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	2000006c 	.word	0x2000006c

0800683c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af02      	add	r7, sp, #8
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006848:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <SPI_EndRxTxTransaction+0x7c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1b      	ldr	r2, [pc, #108]	; (80068bc <SPI_EndRxTxTransaction+0x80>)
 800684e:	fba2 2303 	umull	r2, r3, r2, r3
 8006852:	0d5b      	lsrs	r3, r3, #21
 8006854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006858:	fb02 f303 	mul.w	r3, r2, r3
 800685c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006866:	d112      	bne.n	800688e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2200      	movs	r2, #0
 8006870:	2180      	movs	r1, #128	; 0x80
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff ff5a 	bl	800672c <SPI_WaitFlagStateUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d016      	beq.n	80068ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e00f      	b.n	80068ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	3b01      	subs	r3, #1
 8006898:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a4:	2b80      	cmp	r3, #128	; 0x80
 80068a6:	d0f2      	beq.n	800688e <SPI_EndRxTxTransaction+0x52>
 80068a8:	e000      	b.n	80068ac <SPI_EndRxTxTransaction+0x70>
        break;
 80068aa:	bf00      	nop
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	2000006c 	.word	0x2000006c
 80068bc:	165e9f81 	.word	0x165e9f81

080068c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e0a7      	b.n	8006a22 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a55      	ldr	r2, [pc, #340]	; (8006a2c <HAL_TIM_Base_Init+0x16c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d027      	beq.n	800692c <HAL_TIM_Base_Init+0x6c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e4:	d022      	beq.n	800692c <HAL_TIM_Base_Init+0x6c>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a51      	ldr	r2, [pc, #324]	; (8006a30 <HAL_TIM_Base_Init+0x170>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d01d      	beq.n	800692c <HAL_TIM_Base_Init+0x6c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a4f      	ldr	r2, [pc, #316]	; (8006a34 <HAL_TIM_Base_Init+0x174>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d018      	beq.n	800692c <HAL_TIM_Base_Init+0x6c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a4e      	ldr	r2, [pc, #312]	; (8006a38 <HAL_TIM_Base_Init+0x178>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <HAL_TIM_Base_Init+0x6c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a4c      	ldr	r2, [pc, #304]	; (8006a3c <HAL_TIM_Base_Init+0x17c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00e      	beq.n	800692c <HAL_TIM_Base_Init+0x6c>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a4b      	ldr	r2, [pc, #300]	; (8006a40 <HAL_TIM_Base_Init+0x180>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_TIM_Base_Init+0x6c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a49      	ldr	r2, [pc, #292]	; (8006a44 <HAL_TIM_Base_Init+0x184>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_TIM_Base_Init+0x6c>
 8006922:	f240 1113 	movw	r1, #275	; 0x113
 8006926:	4848      	ldr	r0, [pc, #288]	; (8006a48 <HAL_TIM_Base_Init+0x188>)
 8006928:	f7fa fbb2 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d014      	beq.n	800695e <HAL_TIM_Base_Init+0x9e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2b10      	cmp	r3, #16
 800693a:	d010      	beq.n	800695e <HAL_TIM_Base_Init+0x9e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b20      	cmp	r3, #32
 8006942:	d00c      	beq.n	800695e <HAL_TIM_Base_Init+0x9e>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	d008      	beq.n	800695e <HAL_TIM_Base_Init+0x9e>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	2b60      	cmp	r3, #96	; 0x60
 8006952:	d004      	beq.n	800695e <HAL_TIM_Base_Init+0x9e>
 8006954:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006958:	483b      	ldr	r0, [pc, #236]	; (8006a48 <HAL_TIM_Base_Init+0x188>)
 800695a:	f7fa fb99 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00e      	beq.n	8006984 <HAL_TIM_Base_Init+0xc4>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696e:	d009      	beq.n	8006984 <HAL_TIM_Base_Init+0xc4>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006978:	d004      	beq.n	8006984 <HAL_TIM_Base_Init+0xc4>
 800697a:	f240 1115 	movw	r1, #277	; 0x115
 800697e:	4832      	ldr	r0, [pc, #200]	; (8006a48 <HAL_TIM_Base_Init+0x188>)
 8006980:	f7fa fb86 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d008      	beq.n	800699e <HAL_TIM_Base_Init+0xde>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b80      	cmp	r3, #128	; 0x80
 8006992:	d004      	beq.n	800699e <HAL_TIM_Base_Init+0xde>
 8006994:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006998:	482b      	ldr	r0, [pc, #172]	; (8006a48 <HAL_TIM_Base_Init+0x188>)
 800699a:	f7fa fb79 	bl	8001090 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7fb fa2c 	bl	8001e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4619      	mov	r1, r3
 80069ca:	4610      	mov	r0, r2
 80069cc:	f001 fb0a 	bl	8007fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40000400 	.word	0x40000400
 8006a34:	40000800 	.word	0x40000800
 8006a38:	40000c00 	.word	0x40000c00
 8006a3c:	40014000 	.word	0x40014000
 8006a40:	40014400 	.word	0x40014400
 8006a44:	40014800 	.word	0x40014800
 8006a48:	08011404 	.word	0x08011404

08006a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a3d      	ldr	r2, [pc, #244]	; (8006b50 <HAL_TIM_Base_Start_IT+0x104>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d027      	beq.n	8006aae <HAL_TIM_Base_Start_IT+0x62>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a66:	d022      	beq.n	8006aae <HAL_TIM_Base_Start_IT+0x62>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a39      	ldr	r2, [pc, #228]	; (8006b54 <HAL_TIM_Base_Start_IT+0x108>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d01d      	beq.n	8006aae <HAL_TIM_Base_Start_IT+0x62>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a38      	ldr	r2, [pc, #224]	; (8006b58 <HAL_TIM_Base_Start_IT+0x10c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_TIM_Base_Start_IT+0x62>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a36      	ldr	r2, [pc, #216]	; (8006b5c <HAL_TIM_Base_Start_IT+0x110>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_TIM_Base_Start_IT+0x62>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a35      	ldr	r2, [pc, #212]	; (8006b60 <HAL_TIM_Base_Start_IT+0x114>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIM_Base_Start_IT+0x62>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a33      	ldr	r2, [pc, #204]	; (8006b64 <HAL_TIM_Base_Start_IT+0x118>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIM_Base_Start_IT+0x62>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a32      	ldr	r2, [pc, #200]	; (8006b68 <HAL_TIM_Base_Start_IT+0x11c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIM_Base_Start_IT+0x62>
 8006aa4:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006aa8:	4830      	ldr	r0, [pc, #192]	; (8006b6c <HAL_TIM_Base_Start_IT+0x120>)
 8006aaa:	f7fa faf1 	bl	8001090 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d001      	beq.n	8006abe <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e044      	b.n	8006b48 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0201 	orr.w	r2, r2, #1
 8006ad4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a1d      	ldr	r2, [pc, #116]	; (8006b50 <HAL_TIM_Base_Start_IT+0x104>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d018      	beq.n	8006b12 <HAL_TIM_Base_Start_IT+0xc6>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae8:	d013      	beq.n	8006b12 <HAL_TIM_Base_Start_IT+0xc6>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a19      	ldr	r2, [pc, #100]	; (8006b54 <HAL_TIM_Base_Start_IT+0x108>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00e      	beq.n	8006b12 <HAL_TIM_Base_Start_IT+0xc6>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <HAL_TIM_Base_Start_IT+0x10c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d009      	beq.n	8006b12 <HAL_TIM_Base_Start_IT+0xc6>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a16      	ldr	r2, [pc, #88]	; (8006b5c <HAL_TIM_Base_Start_IT+0x110>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d004      	beq.n	8006b12 <HAL_TIM_Base_Start_IT+0xc6>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a14      	ldr	r2, [pc, #80]	; (8006b60 <HAL_TIM_Base_Start_IT+0x114>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d111      	bne.n	8006b36 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b06      	cmp	r3, #6
 8006b22:	d010      	beq.n	8006b46 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b34:	e007      	b.n	8006b46 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0201 	orr.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	40010000 	.word	0x40010000
 8006b54:	40000400 	.word	0x40000400
 8006b58:	40000800 	.word	0x40000800
 8006b5c:	40000c00 	.word	0x40000c00
 8006b60:	40014000 	.word	0x40014000
 8006b64:	40014400 	.word	0x40014400
 8006b68:	40014800 	.word	0x40014800
 8006b6c:	08011404 	.word	0x08011404

08006b70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e0a7      	b.n	8006cd2 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a55      	ldr	r2, [pc, #340]	; (8006cdc <HAL_TIM_PWM_Init+0x16c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d027      	beq.n	8006bdc <HAL_TIM_PWM_Init+0x6c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b94:	d022      	beq.n	8006bdc <HAL_TIM_PWM_Init+0x6c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a51      	ldr	r2, [pc, #324]	; (8006ce0 <HAL_TIM_PWM_Init+0x170>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d01d      	beq.n	8006bdc <HAL_TIM_PWM_Init+0x6c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a4f      	ldr	r2, [pc, #316]	; (8006ce4 <HAL_TIM_PWM_Init+0x174>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d018      	beq.n	8006bdc <HAL_TIM_PWM_Init+0x6c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a4e      	ldr	r2, [pc, #312]	; (8006ce8 <HAL_TIM_PWM_Init+0x178>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <HAL_TIM_PWM_Init+0x6c>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a4c      	ldr	r2, [pc, #304]	; (8006cec <HAL_TIM_PWM_Init+0x17c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00e      	beq.n	8006bdc <HAL_TIM_PWM_Init+0x6c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a4b      	ldr	r2, [pc, #300]	; (8006cf0 <HAL_TIM_PWM_Init+0x180>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d009      	beq.n	8006bdc <HAL_TIM_PWM_Init+0x6c>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a49      	ldr	r2, [pc, #292]	; (8006cf4 <HAL_TIM_PWM_Init+0x184>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d004      	beq.n	8006bdc <HAL_TIM_PWM_Init+0x6c>
 8006bd2:	f240 5129 	movw	r1, #1321	; 0x529
 8006bd6:	4848      	ldr	r0, [pc, #288]	; (8006cf8 <HAL_TIM_PWM_Init+0x188>)
 8006bd8:	f7fa fa5a 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d014      	beq.n	8006c0e <HAL_TIM_PWM_Init+0x9e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d010      	beq.n	8006c0e <HAL_TIM_PWM_Init+0x9e>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d00c      	beq.n	8006c0e <HAL_TIM_PWM_Init+0x9e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d008      	beq.n	8006c0e <HAL_TIM_PWM_Init+0x9e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b60      	cmp	r3, #96	; 0x60
 8006c02:	d004      	beq.n	8006c0e <HAL_TIM_PWM_Init+0x9e>
 8006c04:	f240 512a 	movw	r1, #1322	; 0x52a
 8006c08:	483b      	ldr	r0, [pc, #236]	; (8006cf8 <HAL_TIM_PWM_Init+0x188>)
 8006c0a:	f7fa fa41 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00e      	beq.n	8006c34 <HAL_TIM_PWM_Init+0xc4>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1e:	d009      	beq.n	8006c34 <HAL_TIM_PWM_Init+0xc4>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c28:	d004      	beq.n	8006c34 <HAL_TIM_PWM_Init+0xc4>
 8006c2a:	f240 512b 	movw	r1, #1323	; 0x52b
 8006c2e:	4832      	ldr	r0, [pc, #200]	; (8006cf8 <HAL_TIM_PWM_Init+0x188>)
 8006c30:	f7fa fa2e 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d008      	beq.n	8006c4e <HAL_TIM_PWM_Init+0xde>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	2b80      	cmp	r3, #128	; 0x80
 8006c42:	d004      	beq.n	8006c4e <HAL_TIM_PWM_Init+0xde>
 8006c44:	f240 512c 	movw	r1, #1324	; 0x52c
 8006c48:	482b      	ldr	r0, [pc, #172]	; (8006cf8 <HAL_TIM_PWM_Init+0x188>)
 8006c4a:	f7fa fa21 	bl	8001090 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f84a 	bl	8006cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f001 f9b2 	bl	8007fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40010000 	.word	0x40010000
 8006ce0:	40000400 	.word	0x40000400
 8006ce4:	40000800 	.word	0x40000800
 8006ce8:	40000c00 	.word	0x40000c00
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40014400 	.word	0x40014400
 8006cf4:	40014800 	.word	0x40014800
 8006cf8:	08011404 	.word	0x08011404

08006cfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a8a      	ldr	r2, [pc, #552]	; (8006f48 <HAL_TIM_PWM_Start+0x238>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10b      	bne.n	8006d3c <HAL_TIM_PWM_Start+0x2c>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d06c      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d069      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b08      	cmp	r3, #8
 8006d34:	d066      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b0c      	cmp	r3, #12
 8006d3a:	d063      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d44:	d10b      	bne.n	8006d5e <HAL_TIM_PWM_Start+0x4e>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d05b      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d058      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d055      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b0c      	cmp	r3, #12
 8006d5c:	d052      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a7a      	ldr	r2, [pc, #488]	; (8006f4c <HAL_TIM_PWM_Start+0x23c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d10b      	bne.n	8006d80 <HAL_TIM_PWM_Start+0x70>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d04a      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d047      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d044      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b0c      	cmp	r3, #12
 8006d7e:	d041      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a72      	ldr	r2, [pc, #456]	; (8006f50 <HAL_TIM_PWM_Start+0x240>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d10b      	bne.n	8006da2 <HAL_TIM_PWM_Start+0x92>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d039      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d036      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d033      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d030      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a6b      	ldr	r2, [pc, #428]	; (8006f54 <HAL_TIM_PWM_Start+0x244>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d10b      	bne.n	8006dc4 <HAL_TIM_PWM_Start+0xb4>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d028      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d025      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d022      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b0c      	cmp	r3, #12
 8006dc2:	d01f      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a63      	ldr	r2, [pc, #396]	; (8006f58 <HAL_TIM_PWM_Start+0x248>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d105      	bne.n	8006dda <HAL_TIM_PWM_Start+0xca>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d017      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d014      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a5f      	ldr	r2, [pc, #380]	; (8006f5c <HAL_TIM_PWM_Start+0x24c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d102      	bne.n	8006dea <HAL_TIM_PWM_Start+0xda>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00c      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a5c      	ldr	r2, [pc, #368]	; (8006f60 <HAL_TIM_PWM_Start+0x250>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d102      	bne.n	8006dfa <HAL_TIM_PWM_Start+0xea>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <HAL_TIM_PWM_Start+0xf4>
 8006dfa:	f240 51af 	movw	r1, #1455	; 0x5af
 8006dfe:	4859      	ldr	r0, [pc, #356]	; (8006f64 <HAL_TIM_PWM_Start+0x254>)
 8006e00:	f7fa f946 	bl	8001090 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d109      	bne.n	8006e1e <HAL_TIM_PWM_Start+0x10e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	bf14      	ite	ne
 8006e16:	2301      	movne	r3, #1
 8006e18:	2300      	moveq	r3, #0
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	e022      	b.n	8006e64 <HAL_TIM_PWM_Start+0x154>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d109      	bne.n	8006e38 <HAL_TIM_PWM_Start+0x128>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	bf14      	ite	ne
 8006e30:	2301      	movne	r3, #1
 8006e32:	2300      	moveq	r3, #0
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	e015      	b.n	8006e64 <HAL_TIM_PWM_Start+0x154>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d109      	bne.n	8006e52 <HAL_TIM_PWM_Start+0x142>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	bf14      	ite	ne
 8006e4a:	2301      	movne	r3, #1
 8006e4c:	2300      	moveq	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	e008      	b.n	8006e64 <HAL_TIM_PWM_Start+0x154>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	bf14      	ite	ne
 8006e5e:	2301      	movne	r3, #1
 8006e60:	2300      	moveq	r3, #0
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_PWM_Start+0x15c>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e068      	b.n	8006f3e <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d104      	bne.n	8006e7c <HAL_TIM_PWM_Start+0x16c>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e7a:	e013      	b.n	8006ea4 <HAL_TIM_PWM_Start+0x194>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d104      	bne.n	8006e8c <HAL_TIM_PWM_Start+0x17c>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e8a:	e00b      	b.n	8006ea4 <HAL_TIM_PWM_Start+0x194>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b08      	cmp	r3, #8
 8006e90:	d104      	bne.n	8006e9c <HAL_TIM_PWM_Start+0x18c>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2202      	movs	r2, #2
 8006e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e9a:	e003      	b.n	8006ea4 <HAL_TIM_PWM_Start+0x194>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 fbc9 	bl	8008644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a24      	ldr	r2, [pc, #144]	; (8006f48 <HAL_TIM_PWM_Start+0x238>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d107      	bne.n	8006ecc <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <HAL_TIM_PWM_Start+0x238>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d018      	beq.n	8006f08 <HAL_TIM_PWM_Start+0x1f8>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d013      	beq.n	8006f08 <HAL_TIM_PWM_Start+0x1f8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a19      	ldr	r2, [pc, #100]	; (8006f4c <HAL_TIM_PWM_Start+0x23c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00e      	beq.n	8006f08 <HAL_TIM_PWM_Start+0x1f8>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <HAL_TIM_PWM_Start+0x240>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_TIM_PWM_Start+0x1f8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a16      	ldr	r2, [pc, #88]	; (8006f54 <HAL_TIM_PWM_Start+0x244>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <HAL_TIM_PWM_Start+0x1f8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <HAL_TIM_PWM_Start+0x248>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d111      	bne.n	8006f2c <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b06      	cmp	r3, #6
 8006f18:	d010      	beq.n	8006f3c <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0201 	orr.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2a:	e007      	b.n	8006f3c <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40010000 	.word	0x40010000
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	40000c00 	.word	0x40000c00
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40014400 	.word	0x40014400
 8006f60:	40014800 	.word	0x40014800
 8006f64:	08011404 	.word	0x08011404

08006f68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e18a      	b.n	8007292 <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a78      	ldr	r2, [pc, #480]	; (8007164 <HAL_TIM_Encoder_Init+0x1fc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d01d      	beq.n	8006fc2 <HAL_TIM_Encoder_Init+0x5a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8e:	d018      	beq.n	8006fc2 <HAL_TIM_Encoder_Init+0x5a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a74      	ldr	r2, [pc, #464]	; (8007168 <HAL_TIM_Encoder_Init+0x200>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <HAL_TIM_Encoder_Init+0x5a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a73      	ldr	r2, [pc, #460]	; (800716c <HAL_TIM_Encoder_Init+0x204>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_TIM_Encoder_Init+0x5a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a71      	ldr	r2, [pc, #452]	; (8007170 <HAL_TIM_Encoder_Init+0x208>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d009      	beq.n	8006fc2 <HAL_TIM_Encoder_Init+0x5a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a70      	ldr	r2, [pc, #448]	; (8007174 <HAL_TIM_Encoder_Init+0x20c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_TIM_Encoder_Init+0x5a>
 8006fb8:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8006fbc:	486e      	ldr	r0, [pc, #440]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 8006fbe:	f7fa f867 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d014      	beq.n	8006ff4 <HAL_TIM_Encoder_Init+0x8c>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2b10      	cmp	r3, #16
 8006fd0:	d010      	beq.n	8006ff4 <HAL_TIM_Encoder_Init+0x8c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_TIM_Encoder_Init+0x8c>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d008      	beq.n	8006ff4 <HAL_TIM_Encoder_Init+0x8c>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	2b60      	cmp	r3, #96	; 0x60
 8006fe8:	d004      	beq.n	8006ff4 <HAL_TIM_Encoder_Init+0x8c>
 8006fea:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8006fee:	4862      	ldr	r0, [pc, #392]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 8006ff0:	f7fa f84e 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00e      	beq.n	800701a <HAL_TIM_Encoder_Init+0xb2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007004:	d009      	beq.n	800701a <HAL_TIM_Encoder_Init+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700e:	d004      	beq.n	800701a <HAL_TIM_Encoder_Init+0xb2>
 8007010:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8007014:	4858      	ldr	r0, [pc, #352]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 8007016:	f7fa f83b 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d008      	beq.n	8007034 <HAL_TIM_Encoder_Init+0xcc>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b80      	cmp	r3, #128	; 0x80
 8007028:	d004      	beq.n	8007034 <HAL_TIM_Encoder_Init+0xcc>
 800702a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800702e:	4852      	ldr	r0, [pc, #328]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 8007030:	f7fa f82e 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d00c      	beq.n	8007056 <HAL_TIM_Encoder_Init+0xee>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d008      	beq.n	8007056 <HAL_TIM_Encoder_Init+0xee>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b03      	cmp	r3, #3
 800704a:	d004      	beq.n	8007056 <HAL_TIM_Encoder_Init+0xee>
 800704c:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8007050:	4849      	ldr	r0, [pc, #292]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 8007052:	f7fa f81d 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d00c      	beq.n	8007078 <HAL_TIM_Encoder_Init+0x110>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d008      	beq.n	8007078 <HAL_TIM_Encoder_Init+0x110>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	2b03      	cmp	r3, #3
 800706c:	d004      	beq.n	8007078 <HAL_TIM_Encoder_Init+0x110>
 800706e:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8007072:	4841      	ldr	r0, [pc, #260]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 8007074:	f7fa f80c 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d00c      	beq.n	800709a <HAL_TIM_Encoder_Init+0x132>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d008      	beq.n	800709a <HAL_TIM_Encoder_Init+0x132>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	2b03      	cmp	r3, #3
 800708e:	d004      	beq.n	800709a <HAL_TIM_Encoder_Init+0x132>
 8007090:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8007094:	4838      	ldr	r0, [pc, #224]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 8007096:	f7f9 fffb 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d008      	beq.n	80070b4 <HAL_TIM_Encoder_Init+0x14c>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d004      	beq.n	80070b4 <HAL_TIM_Encoder_Init+0x14c>
 80070aa:	f640 31d8 	movw	r1, #3032	; 0xbd8
 80070ae:	4832      	ldr	r0, [pc, #200]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 80070b0:	f7f9 ffee 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <HAL_TIM_Encoder_Init+0x166>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d004      	beq.n	80070ce <HAL_TIM_Encoder_Init+0x166>
 80070c4:	f640 31d9 	movw	r1, #3033	; 0xbd9
 80070c8:	482b      	ldr	r0, [pc, #172]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 80070ca:	f7f9 ffe1 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d010      	beq.n	80070f8 <HAL_TIM_Encoder_Init+0x190>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d00c      	beq.n	80070f8 <HAL_TIM_Encoder_Init+0x190>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	2b08      	cmp	r3, #8
 80070e4:	d008      	beq.n	80070f8 <HAL_TIM_Encoder_Init+0x190>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	2b0c      	cmp	r3, #12
 80070ec:	d004      	beq.n	80070f8 <HAL_TIM_Encoder_Init+0x190>
 80070ee:	f640 31da 	movw	r1, #3034	; 0xbda
 80070f2:	4821      	ldr	r0, [pc, #132]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 80070f4:	f7f9 ffcc 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d010      	beq.n	8007122 <HAL_TIM_Encoder_Init+0x1ba>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	2b04      	cmp	r3, #4
 8007106:	d00c      	beq.n	8007122 <HAL_TIM_Encoder_Init+0x1ba>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	2b08      	cmp	r3, #8
 800710e:	d008      	beq.n	8007122 <HAL_TIM_Encoder_Init+0x1ba>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	2b0c      	cmp	r3, #12
 8007116:	d004      	beq.n	8007122 <HAL_TIM_Encoder_Init+0x1ba>
 8007118:	f640 31db 	movw	r1, #3035	; 0xbdb
 800711c:	4816      	ldr	r0, [pc, #88]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 800711e:	f7f9 ffb7 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b0f      	cmp	r3, #15
 8007128:	d904      	bls.n	8007134 <HAL_TIM_Encoder_Init+0x1cc>
 800712a:	f640 31dc 	movw	r1, #3036	; 0xbdc
 800712e:	4812      	ldr	r0, [pc, #72]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 8007130:	f7f9 ffae 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	2b0f      	cmp	r3, #15
 800713a:	d904      	bls.n	8007146 <HAL_TIM_Encoder_Init+0x1de>
 800713c:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8007140:	480d      	ldr	r0, [pc, #52]	; (8007178 <HAL_TIM_Encoder_Init+0x210>)
 8007142:	f7f9 ffa5 	bl	8001090 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d114      	bne.n	800717c <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fa fde8 	bl	8001d30 <HAL_TIM_Encoder_MspInit>
 8007160:	e00c      	b.n	800717c <HAL_TIM_Encoder_Init+0x214>
 8007162:	bf00      	nop
 8007164:	40010000 	.word	0x40010000
 8007168:	40000400 	.word	0x40000400
 800716c:	40000800 	.word	0x40000800
 8007170:	40000c00 	.word	0x40000c00
 8007174:	40014000 	.word	0x40014000
 8007178:	08011404 	.word	0x08011404
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007192:	f023 0307 	bic.w	r3, r3, #7
 8007196:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f000 ff1e 	bl	8007fe4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d0:	f023 0303 	bic.w	r3, r3, #3
 80071d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	021b      	lsls	r3, r3, #8
 80071e0:	4313      	orrs	r3, r2
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80071ee:	f023 030c 	bic.w	r3, r3, #12
 80071f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	4313      	orrs	r3, r2
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	011a      	lsls	r2, r3, #4
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	031b      	lsls	r3, r3, #12
 800721e:	4313      	orrs	r3, r2
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800722c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007234:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	4313      	orrs	r3, r2
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop

0800729c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a4d      	ldr	r2, [pc, #308]	; (8007400 <HAL_TIM_Encoder_Start+0x164>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d01d      	beq.n	800730c <HAL_TIM_Encoder_Start+0x70>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d8:	d018      	beq.n	800730c <HAL_TIM_Encoder_Start+0x70>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a49      	ldr	r2, [pc, #292]	; (8007404 <HAL_TIM_Encoder_Start+0x168>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d013      	beq.n	800730c <HAL_TIM_Encoder_Start+0x70>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a47      	ldr	r2, [pc, #284]	; (8007408 <HAL_TIM_Encoder_Start+0x16c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d00e      	beq.n	800730c <HAL_TIM_Encoder_Start+0x70>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a46      	ldr	r2, [pc, #280]	; (800740c <HAL_TIM_Encoder_Start+0x170>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d009      	beq.n	800730c <HAL_TIM_Encoder_Start+0x70>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a44      	ldr	r2, [pc, #272]	; (8007410 <HAL_TIM_Encoder_Start+0x174>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d004      	beq.n	800730c <HAL_TIM_Encoder_Start+0x70>
 8007302:	f640 418e 	movw	r1, #3214	; 0xc8e
 8007306:	4843      	ldr	r0, [pc, #268]	; (8007414 <HAL_TIM_Encoder_Start+0x178>)
 8007308:	f7f9 fec2 	bl	8001090 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d110      	bne.n	8007334 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d102      	bne.n	800731e <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007318:	7b7b      	ldrb	r3, [r7, #13]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d001      	beq.n	8007322 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e069      	b.n	80073f6 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2202      	movs	r2, #2
 8007326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007332:	e031      	b.n	8007398 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b04      	cmp	r3, #4
 8007338:	d110      	bne.n	800735c <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d102      	bne.n	8007346 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007340:	7b3b      	ldrb	r3, [r7, #12]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d001      	beq.n	800734a <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e055      	b.n	80073f6 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800735a:	e01d      	b.n	8007398 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d108      	bne.n	8007374 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d105      	bne.n	8007374 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007368:	7b7b      	ldrb	r3, [r7, #13]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d102      	bne.n	8007374 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800736e:	7b3b      	ldrb	r3, [r7, #12]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d001      	beq.n	8007378 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e03e      	b.n	80073f6 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_TIM_Encoder_Start+0x10a>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d008      	beq.n	80073b6 <HAL_TIM_Encoder_Start+0x11a>
 80073a4:	e00f      	b.n	80073c6 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2201      	movs	r2, #1
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 f948 	bl	8008644 <TIM_CCxChannelCmd>
      break;
 80073b4:	e016      	b.n	80073e4 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2201      	movs	r2, #1
 80073bc:	2104      	movs	r1, #4
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 f940 	bl	8008644 <TIM_CCxChannelCmd>
      break;
 80073c4:	e00e      	b.n	80073e4 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2201      	movs	r2, #1
 80073cc:	2100      	movs	r1, #0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 f938 	bl	8008644 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2201      	movs	r2, #1
 80073da:	2104      	movs	r1, #4
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 f931 	bl	8008644 <TIM_CCxChannelCmd>
      break;
 80073e2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	40010000 	.word	0x40010000
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800
 800740c:	40000c00 	.word	0x40000c00
 8007410:	40014000 	.word	0x40014000
 8007414:	08011404 	.word	0x08011404

08007418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b02      	cmp	r3, #2
 800742c:	d122      	bne.n	8007474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b02      	cmp	r3, #2
 800743a:	d11b      	bne.n	8007474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0202 	mvn.w	r2, #2
 8007444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fda4 	bl	8007fa8 <HAL_TIM_IC_CaptureCallback>
 8007460:	e005      	b.n	800746e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fd96 	bl	8007f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fda7 	bl	8007fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b04      	cmp	r3, #4
 8007480:	d122      	bne.n	80074c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b04      	cmp	r3, #4
 800748e:	d11b      	bne.n	80074c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0204 	mvn.w	r2, #4
 8007498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fd7a 	bl	8007fa8 <HAL_TIM_IC_CaptureCallback>
 80074b4:	e005      	b.n	80074c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fd6c 	bl	8007f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fd7d 	bl	8007fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	2b08      	cmp	r3, #8
 80074d4:	d122      	bne.n	800751c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0308 	and.w	r3, r3, #8
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d11b      	bne.n	800751c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0208 	mvn.w	r2, #8
 80074ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2204      	movs	r2, #4
 80074f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fd50 	bl	8007fa8 <HAL_TIM_IC_CaptureCallback>
 8007508:	e005      	b.n	8007516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fd42 	bl	8007f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fd53 	bl	8007fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b10      	cmp	r3, #16
 8007528:	d122      	bne.n	8007570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0310 	and.w	r3, r3, #16
 8007534:	2b10      	cmp	r3, #16
 8007536:	d11b      	bne.n	8007570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0210 	mvn.w	r2, #16
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2208      	movs	r2, #8
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fd26 	bl	8007fa8 <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fd18 	bl	8007f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fd29 	bl	8007fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	d10e      	bne.n	800759c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b01      	cmp	r3, #1
 800758a:	d107      	bne.n	800759c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0201 	mvn.w	r2, #1
 8007594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7f9 fd60 	bl	800105c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b80      	cmp	r3, #128	; 0x80
 80075a8:	d10e      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d107      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 f972 	bl	80088ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d10e      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e0:	2b40      	cmp	r3, #64	; 0x40
 80075e2:	d107      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fcee 	bl	8007fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d10e      	bne.n	8007620 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b20      	cmp	r3, #32
 800760e:	d107      	bne.n	8007620 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0220 	mvn.w	r2, #32
 8007618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f93c 	bl	8008898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d010      	beq.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x38>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b04      	cmp	r3, #4
 8007642:	d00d      	beq.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b08      	cmp	r3, #8
 8007648:	d00a      	beq.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x38>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b0c      	cmp	r3, #12
 800764e:	d007      	beq.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b3c      	cmp	r3, #60	; 0x3c
 8007654:	d004      	beq.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007656:	f241 0177 	movw	r1, #4215	; 0x1077
 800765a:	4893      	ldr	r0, [pc, #588]	; (80078a8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800765c:	f7f9 fd18 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b60      	cmp	r3, #96	; 0x60
 8007666:	d008      	beq.n	800767a <HAL_TIM_PWM_ConfigChannel+0x52>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b70      	cmp	r3, #112	; 0x70
 800766e:	d004      	beq.n	800767a <HAL_TIM_PWM_ConfigChannel+0x52>
 8007670:	f241 0178 	movw	r1, #4216	; 0x1078
 8007674:	488c      	ldr	r0, [pc, #560]	; (80078a8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007676:	f7f9 fd0b 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d008      	beq.n	8007694 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	2b02      	cmp	r3, #2
 8007688:	d004      	beq.n	8007694 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800768a:	f241 0179 	movw	r1, #4217	; 0x1079
 800768e:	4886      	ldr	r0, [pc, #536]	; (80078a8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007690:	f7f9 fcfe 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_TIM_PWM_ConfigChannel+0x86>
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d004      	beq.n	80076ae <HAL_TIM_PWM_ConfigChannel+0x86>
 80076a4:	f241 017a 	movw	r1, #4218	; 0x107a
 80076a8:	487f      	ldr	r0, [pc, #508]	; (80078a8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80076aa:	f7f9 fcf1 	bl	8001090 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_TIM_PWM_ConfigChannel+0x94>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e14c      	b.n	8007956 <HAL_TIM_PWM_ConfigChannel+0x32e>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b0c      	cmp	r3, #12
 80076c8:	f200 813d 	bhi.w	8007946 <HAL_TIM_PWM_ConfigChannel+0x31e>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <HAL_TIM_PWM_ConfigChannel+0xac>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	08007709 	.word	0x08007709
 80076d8:	08007947 	.word	0x08007947
 80076dc:	08007947 	.word	0x08007947
 80076e0:	08007947 	.word	0x08007947
 80076e4:	080077a3 	.word	0x080077a3
 80076e8:	08007947 	.word	0x08007947
 80076ec:	08007947 	.word	0x08007947
 80076f0:	08007947 	.word	0x08007947
 80076f4:	0800782b 	.word	0x0800782b
 80076f8:	08007947 	.word	0x08007947
 80076fc:	08007947 	.word	0x08007947
 8007700:	08007947 	.word	0x08007947
 8007704:	080078c9 	.word	0x080078c9
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a67      	ldr	r2, [pc, #412]	; (80078ac <HAL_TIM_PWM_ConfigChannel+0x284>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d027      	beq.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771a:	d022      	beq.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a63      	ldr	r2, [pc, #396]	; (80078b0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01d      	beq.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a62      	ldr	r2, [pc, #392]	; (80078b4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d018      	beq.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a60      	ldr	r2, [pc, #384]	; (80078b8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d013      	beq.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a5f      	ldr	r2, [pc, #380]	; (80078bc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d00e      	beq.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a5d      	ldr	r2, [pc, #372]	; (80078c0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d009      	beq.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a5c      	ldr	r2, [pc, #368]	; (80078c4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d004      	beq.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007758:	f241 0184 	movw	r1, #4228	; 0x1084
 800775c:	4852      	ldr	r0, [pc, #328]	; (80078a8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800775e:	f7f9 fc97 	bl	8001090 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68b9      	ldr	r1, [r7, #8]
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fcbb 	bl	80080e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699a      	ldr	r2, [r3, #24]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0208 	orr.w	r2, r2, #8
 800777c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0204 	bic.w	r2, r2, #4
 800778c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6999      	ldr	r1, [r3, #24]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	619a      	str	r2, [r3, #24]
      break;
 80077a0:	e0d4      	b.n	800794c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a41      	ldr	r2, [pc, #260]	; (80078ac <HAL_TIM_PWM_ConfigChannel+0x284>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d01d      	beq.n	80077e8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b4:	d018      	beq.n	80077e8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a3d      	ldr	r2, [pc, #244]	; (80078b0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a3b      	ldr	r2, [pc, #236]	; (80078b4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00e      	beq.n	80077e8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a3a      	ldr	r2, [pc, #232]	; (80078b8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d009      	beq.n	80077e8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a38      	ldr	r2, [pc, #224]	; (80078bc <HAL_TIM_PWM_ConfigChannel+0x294>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d004      	beq.n	80077e8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077de:	f241 0195 	movw	r1, #4245	; 0x1095
 80077e2:	4831      	ldr	r0, [pc, #196]	; (80078a8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80077e4:	f7f9 fc54 	bl	8001090 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68b9      	ldr	r1, [r7, #8]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 fd08 	bl	8008204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6999      	ldr	r1, [r3, #24]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	021a      	lsls	r2, r3, #8
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	619a      	str	r2, [r3, #24]
      break;
 8007828:	e090      	b.n	800794c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1f      	ldr	r2, [pc, #124]	; (80078ac <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d018      	beq.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800783c:	d013      	beq.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a1b      	ldr	r2, [pc, #108]	; (80078b0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00e      	beq.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a19      	ldr	r2, [pc, #100]	; (80078b4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d009      	beq.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a18      	ldr	r2, [pc, #96]	; (80078b8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d004      	beq.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800785c:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8007860:	4811      	ldr	r0, [pc, #68]	; (80078a8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007862:	f7f9 fc15 	bl	8001090 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	4618      	mov	r0, r3
 800786e:	f000 fd5d 	bl	800832c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69da      	ldr	r2, [r3, #28]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0208 	orr.w	r2, r2, #8
 8007880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69da      	ldr	r2, [r3, #28]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0204 	bic.w	r2, r2, #4
 8007890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69d9      	ldr	r1, [r3, #28]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	691a      	ldr	r2, [r3, #16]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	61da      	str	r2, [r3, #28]
      break;
 80078a4:	e052      	b.n	800794c <HAL_TIM_PWM_ConfigChannel+0x324>
 80078a6:	bf00      	nop
 80078a8:	08011404 	.word	0x08011404
 80078ac:	40010000 	.word	0x40010000
 80078b0:	40000400 	.word	0x40000400
 80078b4:	40000800 	.word	0x40000800
 80078b8:	40000c00 	.word	0x40000c00
 80078bc:	40014000 	.word	0x40014000
 80078c0:	40014400 	.word	0x40014400
 80078c4:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a24      	ldr	r2, [pc, #144]	; (8007960 <HAL_TIM_PWM_ConfigChannel+0x338>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d018      	beq.n	8007904 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078da:	d013      	beq.n	8007904 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a20      	ldr	r2, [pc, #128]	; (8007964 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00e      	beq.n	8007904 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1f      	ldr	r2, [pc, #124]	; (8007968 <HAL_TIM_PWM_ConfigChannel+0x340>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d009      	beq.n	8007904 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1d      	ldr	r2, [pc, #116]	; (800796c <HAL_TIM_PWM_ConfigChannel+0x344>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d004      	beq.n	8007904 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80078fa:	f241 01b7 	movw	r1, #4279	; 0x10b7
 80078fe:	481c      	ldr	r0, [pc, #112]	; (8007970 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8007900:	f7f9 fbc6 	bl	8001090 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fda2 	bl	8008454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69da      	ldr	r2, [r3, #28]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800791e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	69da      	ldr	r2, [r3, #28]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800792e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69d9      	ldr	r1, [r3, #28]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	021a      	lsls	r2, r3, #8
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	61da      	str	r2, [r3, #28]
      break;
 8007944:	e002      	b.n	800794c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
      break;
 800794a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007954:	7dfb      	ldrb	r3, [r7, #23]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40010000 	.word	0x40010000
 8007964:	40000400 	.word	0x40000400
 8007968:	40000800 	.word	0x40000800
 800796c:	40000c00 	.word	0x40000c00
 8007970:	08011404 	.word	0x08011404

08007974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_TIM_ConfigClockSource+0x1c>
 800798c:	2302      	movs	r3, #2
 800798e:	e2f0      	b.n	8007f72 <HAL_TIM_ConfigClockSource+0x5fe>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a8:	d029      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x8a>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b70      	cmp	r3, #112	; 0x70
 80079b0:	d025      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x8a>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ba:	d020      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x8a>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	d01c      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x8a>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b50      	cmp	r3, #80	; 0x50
 80079ca:	d018      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x8a>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b60      	cmp	r3, #96	; 0x60
 80079d2:	d014      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x8a>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d010      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x8a>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b10      	cmp	r3, #16
 80079e2:	d00c      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x8a>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d008      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x8a>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b30      	cmp	r3, #48	; 0x30
 80079f2:	d004      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0x8a>
 80079f4:	f241 41b7 	movw	r1, #5303	; 0x14b7
 80079f8:	487c      	ldr	r0, [pc, #496]	; (8007bec <HAL_TIM_ConfigClockSource+0x278>)
 80079fa:	f7f9 fb49 	bl	8001090 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a14:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a26:	f000 80f1 	beq.w	8007c0c <HAL_TIM_ConfigClockSource+0x298>
 8007a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a2e:	f200 8293 	bhi.w	8007f58 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a36:	d02d      	beq.n	8007a94 <HAL_TIM_ConfigClockSource+0x120>
 8007a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3c:	f200 828c 	bhi.w	8007f58 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a40:	2b70      	cmp	r3, #112	; 0x70
 8007a42:	d05d      	beq.n	8007b00 <HAL_TIM_ConfigClockSource+0x18c>
 8007a44:	2b70      	cmp	r3, #112	; 0x70
 8007a46:	f200 8287 	bhi.w	8007f58 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a4a:	2b60      	cmp	r3, #96	; 0x60
 8007a4c:	f000 81a0 	beq.w	8007d90 <HAL_TIM_ConfigClockSource+0x41c>
 8007a50:	2b60      	cmp	r3, #96	; 0x60
 8007a52:	f200 8281 	bhi.w	8007f58 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a56:	2b50      	cmp	r3, #80	; 0x50
 8007a58:	f000 8144 	beq.w	8007ce4 <HAL_TIM_ConfigClockSource+0x370>
 8007a5c:	2b50      	cmp	r3, #80	; 0x50
 8007a5e:	f200 827b 	bhi.w	8007f58 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a62:	2b40      	cmp	r3, #64	; 0x40
 8007a64:	f000 81f6 	beq.w	8007e54 <HAL_TIM_ConfigClockSource+0x4e0>
 8007a68:	2b40      	cmp	r3, #64	; 0x40
 8007a6a:	f200 8275 	bhi.w	8007f58 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a6e:	2b30      	cmp	r3, #48	; 0x30
 8007a70:	f000 8246 	beq.w	8007f00 <HAL_TIM_ConfigClockSource+0x58c>
 8007a74:	2b30      	cmp	r3, #48	; 0x30
 8007a76:	f200 826f 	bhi.w	8007f58 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	f000 8240 	beq.w	8007f00 <HAL_TIM_ConfigClockSource+0x58c>
 8007a80:	2b20      	cmp	r3, #32
 8007a82:	f200 8269 	bhi.w	8007f58 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 823a 	beq.w	8007f00 <HAL_TIM_ConfigClockSource+0x58c>
 8007a8c:	2b10      	cmp	r3, #16
 8007a8e:	f000 8237 	beq.w	8007f00 <HAL_TIM_ConfigClockSource+0x58c>
 8007a92:	e261      	b.n	8007f58 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a55      	ldr	r2, [pc, #340]	; (8007bf0 <HAL_TIM_ConfigClockSource+0x27c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	f000 825f 	beq.w	8007f5e <HAL_TIM_ConfigClockSource+0x5ea>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa8:	f000 8259 	beq.w	8007f5e <HAL_TIM_ConfigClockSource+0x5ea>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a50      	ldr	r2, [pc, #320]	; (8007bf4 <HAL_TIM_ConfigClockSource+0x280>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	f000 8253 	beq.w	8007f5e <HAL_TIM_ConfigClockSource+0x5ea>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a4e      	ldr	r2, [pc, #312]	; (8007bf8 <HAL_TIM_ConfigClockSource+0x284>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	f000 824d 	beq.w	8007f5e <HAL_TIM_ConfigClockSource+0x5ea>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a4c      	ldr	r2, [pc, #304]	; (8007bfc <HAL_TIM_ConfigClockSource+0x288>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	f000 8247 	beq.w	8007f5e <HAL_TIM_ConfigClockSource+0x5ea>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a4a      	ldr	r2, [pc, #296]	; (8007c00 <HAL_TIM_ConfigClockSource+0x28c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	f000 8241 	beq.w	8007f5e <HAL_TIM_ConfigClockSource+0x5ea>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a48      	ldr	r2, [pc, #288]	; (8007c04 <HAL_TIM_ConfigClockSource+0x290>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	f000 823b 	beq.w	8007f5e <HAL_TIM_ConfigClockSource+0x5ea>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a46      	ldr	r2, [pc, #280]	; (8007c08 <HAL_TIM_ConfigClockSource+0x294>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	f000 8235 	beq.w	8007f5e <HAL_TIM_ConfigClockSource+0x5ea>
 8007af4:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8007af8:	483c      	ldr	r0, [pc, #240]	; (8007bec <HAL_TIM_ConfigClockSource+0x278>)
 8007afa:	f7f9 fac9 	bl	8001090 <assert_failed>
      break;
 8007afe:	e22e      	b.n	8007f5e <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a3a      	ldr	r2, [pc, #232]	; (8007bf0 <HAL_TIM_ConfigClockSource+0x27c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d01d      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b12:	d018      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a36      	ldr	r2, [pc, #216]	; (8007bf4 <HAL_TIM_ConfigClockSource+0x280>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a35      	ldr	r2, [pc, #212]	; (8007bf8 <HAL_TIM_ConfigClockSource+0x284>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00e      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a33      	ldr	r2, [pc, #204]	; (8007bfc <HAL_TIM_ConfigClockSource+0x288>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d009      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a32      	ldr	r2, [pc, #200]	; (8007c00 <HAL_TIM_ConfigClockSource+0x28c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b3c:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8007b40:	482a      	ldr	r0, [pc, #168]	; (8007bec <HAL_TIM_ConfigClockSource+0x278>)
 8007b42:	f7f9 faa5 	bl	8001090 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d013      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x202>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b56:	d00e      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x202>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b60:	d009      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x202>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b6a:	d004      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x202>
 8007b6c:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8007b70:	481e      	ldr	r0, [pc, #120]	; (8007bec <HAL_TIM_ConfigClockSource+0x278>)
 8007b72:	f7f9 fa8d 	bl	8001090 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b7e:	d014      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x236>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d010      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x236>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00c      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x236>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d008      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x236>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b0a      	cmp	r3, #10
 8007b9e:	d004      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x236>
 8007ba0:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8007ba4:	4811      	ldr	r0, [pc, #68]	; (8007bec <HAL_TIM_ConfigClockSource+0x278>)
 8007ba6:	f7f9 fa73 	bl	8001090 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	2b0f      	cmp	r3, #15
 8007bb0:	d904      	bls.n	8007bbc <HAL_TIM_ConfigClockSource+0x248>
 8007bb2:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8007bb6:	480d      	ldr	r0, [pc, #52]	; (8007bec <HAL_TIM_ConfigClockSource+0x278>)
 8007bb8:	f7f9 fa6a 	bl	8001090 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	6899      	ldr	r1, [r3, #8]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f000 fd1a 	bl	8008604 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	609a      	str	r2, [r3, #8]
      break;
 8007be8:	e1ba      	b.n	8007f60 <HAL_TIM_ConfigClockSource+0x5ec>
 8007bea:	bf00      	nop
 8007bec:	08011404 	.word	0x08011404
 8007bf0:	40010000 	.word	0x40010000
 8007bf4:	40000400 	.word	0x40000400
 8007bf8:	40000800 	.word	0x40000800
 8007bfc:	40000c00 	.word	0x40000c00
 8007c00:	40014000 	.word	0x40014000
 8007c04:	40014400 	.word	0x40014400
 8007c08:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a8a      	ldr	r2, [pc, #552]	; (8007e3c <HAL_TIM_ConfigClockSource+0x4c8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d018      	beq.n	8007c48 <HAL_TIM_ConfigClockSource+0x2d4>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c1e:	d013      	beq.n	8007c48 <HAL_TIM_ConfigClockSource+0x2d4>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a86      	ldr	r2, [pc, #536]	; (8007e40 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00e      	beq.n	8007c48 <HAL_TIM_ConfigClockSource+0x2d4>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a85      	ldr	r2, [pc, #532]	; (8007e44 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d009      	beq.n	8007c48 <HAL_TIM_ConfigClockSource+0x2d4>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a83      	ldr	r2, [pc, #524]	; (8007e48 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d004      	beq.n	8007c48 <HAL_TIM_ConfigClockSource+0x2d4>
 8007c3e:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8007c42:	4882      	ldr	r0, [pc, #520]	; (8007e4c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c44:	f7f9 fa24 	bl	8001090 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d013      	beq.n	8007c78 <HAL_TIM_ConfigClockSource+0x304>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c58:	d00e      	beq.n	8007c78 <HAL_TIM_ConfigClockSource+0x304>
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c62:	d009      	beq.n	8007c78 <HAL_TIM_ConfigClockSource+0x304>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c6c:	d004      	beq.n	8007c78 <HAL_TIM_ConfigClockSource+0x304>
 8007c6e:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8007c72:	4876      	ldr	r0, [pc, #472]	; (8007e4c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c74:	f7f9 fa0c 	bl	8001090 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c80:	d014      	beq.n	8007cac <HAL_TIM_ConfigClockSource+0x338>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d010      	beq.n	8007cac <HAL_TIM_ConfigClockSource+0x338>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00c      	beq.n	8007cac <HAL_TIM_ConfigClockSource+0x338>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d008      	beq.n	8007cac <HAL_TIM_ConfigClockSource+0x338>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b0a      	cmp	r3, #10
 8007ca0:	d004      	beq.n	8007cac <HAL_TIM_ConfigClockSource+0x338>
 8007ca2:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8007ca6:	4869      	ldr	r0, [pc, #420]	; (8007e4c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007ca8:	f7f9 f9f2 	bl	8001090 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	2b0f      	cmp	r3, #15
 8007cb2:	d904      	bls.n	8007cbe <HAL_TIM_ConfigClockSource+0x34a>
 8007cb4:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8007cb8:	4864      	ldr	r0, [pc, #400]	; (8007e4c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007cba:	f7f9 f9e9 	bl	8001090 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	6899      	ldr	r1, [r3, #8]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f000 fc99 	bl	8008604 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ce0:	609a      	str	r2, [r3, #8]
      break;
 8007ce2:	e13d      	b.n	8007f60 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a54      	ldr	r2, [pc, #336]	; (8007e3c <HAL_TIM_ConfigClockSource+0x4c8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d01d      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x3b6>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf6:	d018      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x3b6>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a50      	ldr	r2, [pc, #320]	; (8007e40 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d013      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x3b6>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a4f      	ldr	r2, [pc, #316]	; (8007e44 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d00e      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x3b6>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a4d      	ldr	r2, [pc, #308]	; (8007e48 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d009      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x3b6>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a4d      	ldr	r2, [pc, #308]	; (8007e50 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d004      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x3b6>
 8007d20:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8007d24:	4849      	ldr	r0, [pc, #292]	; (8007e4c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d26:	f7f9 f9b3 	bl	8001090 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d32:	d014      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x3ea>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d010      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x3ea>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00c      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x3ea>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d008      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x3ea>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	2b0a      	cmp	r3, #10
 8007d52:	d004      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x3ea>
 8007d54:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8007d58:	483c      	ldr	r0, [pc, #240]	; (8007e4c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d5a:	f7f9 f999 	bl	8001090 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2b0f      	cmp	r3, #15
 8007d64:	d904      	bls.n	8007d70 <HAL_TIM_ConfigClockSource+0x3fc>
 8007d66:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8007d6a:	4838      	ldr	r0, [pc, #224]	; (8007e4c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d6c:	f7f9 f990 	bl	8001090 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	6859      	ldr	r1, [r3, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	f000 fbc7 	bl	8008510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2150      	movs	r1, #80	; 0x50
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 fc20 	bl	80085ce <TIM_ITRx_SetConfig>
      break;
 8007d8e:	e0e7      	b.n	8007f60 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a29      	ldr	r2, [pc, #164]	; (8007e3c <HAL_TIM_ConfigClockSource+0x4c8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d01d      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x462>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da2:	d018      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x462>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a25      	ldr	r2, [pc, #148]	; (8007e40 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x462>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a24      	ldr	r2, [pc, #144]	; (8007e44 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x462>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a22      	ldr	r2, [pc, #136]	; (8007e48 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x462>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a22      	ldr	r2, [pc, #136]	; (8007e50 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x462>
 8007dcc:	f241 5106 	movw	r1, #5382	; 0x1506
 8007dd0:	481e      	ldr	r0, [pc, #120]	; (8007e4c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007dd2:	f7f9 f95d 	bl	8001090 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dde:	d014      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x496>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d010      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x496>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00c      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x496>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d008      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x496>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	2b0a      	cmp	r3, #10
 8007dfe:	d004      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x496>
 8007e00:	f241 5109 	movw	r1, #5385	; 0x1509
 8007e04:	4811      	ldr	r0, [pc, #68]	; (8007e4c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007e06:	f7f9 f943 	bl	8001090 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2b0f      	cmp	r3, #15
 8007e10:	d904      	bls.n	8007e1c <HAL_TIM_ConfigClockSource+0x4a8>
 8007e12:	f241 510a 	movw	r1, #5386	; 0x150a
 8007e16:	480d      	ldr	r0, [pc, #52]	; (8007e4c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007e18:	f7f9 f93a 	bl	8001090 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	6859      	ldr	r1, [r3, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f000 fba0 	bl	800856e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2160      	movs	r1, #96	; 0x60
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fbca 	bl	80085ce <TIM_ITRx_SetConfig>
      break;
 8007e3a:	e091      	b.n	8007f60 <HAL_TIM_ConfigClockSource+0x5ec>
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40000c00 	.word	0x40000c00
 8007e4c:	08011404 	.word	0x08011404
 8007e50:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a48      	ldr	r2, [pc, #288]	; (8007f7c <HAL_TIM_ConfigClockSource+0x608>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d01d      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x526>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e66:	d018      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x526>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a44      	ldr	r2, [pc, #272]	; (8007f80 <HAL_TIM_ConfigClockSource+0x60c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d013      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x526>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a43      	ldr	r2, [pc, #268]	; (8007f84 <HAL_TIM_ConfigClockSource+0x610>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00e      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x526>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a41      	ldr	r2, [pc, #260]	; (8007f88 <HAL_TIM_ConfigClockSource+0x614>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d009      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x526>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a40      	ldr	r2, [pc, #256]	; (8007f8c <HAL_TIM_ConfigClockSource+0x618>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d004      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x526>
 8007e90:	f241 5116 	movw	r1, #5398	; 0x1516
 8007e94:	483e      	ldr	r0, [pc, #248]	; (8007f90 <HAL_TIM_ConfigClockSource+0x61c>)
 8007e96:	f7f9 f8fb 	bl	8001090 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea2:	d014      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0x55a>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d010      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0x55a>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00c      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0x55a>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d008      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0x55a>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	2b0a      	cmp	r3, #10
 8007ec2:	d004      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0x55a>
 8007ec4:	f241 5119 	movw	r1, #5401	; 0x1519
 8007ec8:	4831      	ldr	r0, [pc, #196]	; (8007f90 <HAL_TIM_ConfigClockSource+0x61c>)
 8007eca:	f7f9 f8e1 	bl	8001090 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2b0f      	cmp	r3, #15
 8007ed4:	d904      	bls.n	8007ee0 <HAL_TIM_ConfigClockSource+0x56c>
 8007ed6:	f241 511a 	movw	r1, #5402	; 0x151a
 8007eda:	482d      	ldr	r0, [pc, #180]	; (8007f90 <HAL_TIM_ConfigClockSource+0x61c>)
 8007edc:	f7f9 f8d8 	bl	8001090 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	6859      	ldr	r1, [r3, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	461a      	mov	r2, r3
 8007eee:	f000 fb0f 	bl	8008510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2140      	movs	r1, #64	; 0x40
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fb68 	bl	80085ce <TIM_ITRx_SetConfig>
      break;
 8007efe:	e02f      	b.n	8007f60 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1d      	ldr	r2, [pc, #116]	; (8007f7c <HAL_TIM_ConfigClockSource+0x608>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d01d      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x5d2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f12:	d018      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x5d2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a19      	ldr	r2, [pc, #100]	; (8007f80 <HAL_TIM_ConfigClockSource+0x60c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d013      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x5d2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a18      	ldr	r2, [pc, #96]	; (8007f84 <HAL_TIM_ConfigClockSource+0x610>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00e      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x5d2>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a16      	ldr	r2, [pc, #88]	; (8007f88 <HAL_TIM_ConfigClockSource+0x614>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d009      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x5d2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a15      	ldr	r2, [pc, #84]	; (8007f8c <HAL_TIM_ConfigClockSource+0x618>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d004      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x5d2>
 8007f3c:	f241 5129 	movw	r1, #5417	; 0x1529
 8007f40:	4813      	ldr	r0, [pc, #76]	; (8007f90 <HAL_TIM_ConfigClockSource+0x61c>)
 8007f42:	f7f9 f8a5 	bl	8001090 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4610      	mov	r0, r2
 8007f52:	f000 fb3c 	bl	80085ce <TIM_ITRx_SetConfig>
      break;
 8007f56:	e003      	b.n	8007f60 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5c:	e000      	b.n	8007f60 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8007f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	40010000 	.word	0x40010000
 8007f80:	40000400 	.word	0x40000400
 8007f84:	40000800 	.word	0x40000800
 8007f88:	40000c00 	.word	0x40000c00
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	08011404 	.word	0x08011404

08007f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a34      	ldr	r2, [pc, #208]	; (80080c8 <TIM_Base_SetConfig+0xe4>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d00f      	beq.n	800801c <TIM_Base_SetConfig+0x38>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008002:	d00b      	beq.n	800801c <TIM_Base_SetConfig+0x38>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a31      	ldr	r2, [pc, #196]	; (80080cc <TIM_Base_SetConfig+0xe8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d007      	beq.n	800801c <TIM_Base_SetConfig+0x38>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a30      	ldr	r2, [pc, #192]	; (80080d0 <TIM_Base_SetConfig+0xec>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d003      	beq.n	800801c <TIM_Base_SetConfig+0x38>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a2f      	ldr	r2, [pc, #188]	; (80080d4 <TIM_Base_SetConfig+0xf0>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d108      	bne.n	800802e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a25      	ldr	r2, [pc, #148]	; (80080c8 <TIM_Base_SetConfig+0xe4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01b      	beq.n	800806e <TIM_Base_SetConfig+0x8a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803c:	d017      	beq.n	800806e <TIM_Base_SetConfig+0x8a>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a22      	ldr	r2, [pc, #136]	; (80080cc <TIM_Base_SetConfig+0xe8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d013      	beq.n	800806e <TIM_Base_SetConfig+0x8a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a21      	ldr	r2, [pc, #132]	; (80080d0 <TIM_Base_SetConfig+0xec>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00f      	beq.n	800806e <TIM_Base_SetConfig+0x8a>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a20      	ldr	r2, [pc, #128]	; (80080d4 <TIM_Base_SetConfig+0xf0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d00b      	beq.n	800806e <TIM_Base_SetConfig+0x8a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1f      	ldr	r2, [pc, #124]	; (80080d8 <TIM_Base_SetConfig+0xf4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d007      	beq.n	800806e <TIM_Base_SetConfig+0x8a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a1e      	ldr	r2, [pc, #120]	; (80080dc <TIM_Base_SetConfig+0xf8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d003      	beq.n	800806e <TIM_Base_SetConfig+0x8a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a1d      	ldr	r2, [pc, #116]	; (80080e0 <TIM_Base_SetConfig+0xfc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d108      	bne.n	8008080 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <TIM_Base_SetConfig+0xe4>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d103      	bne.n	80080b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	615a      	str	r2, [r3, #20]
}
 80080ba:	bf00      	nop
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40000400 	.word	0x40000400
 80080d0:	40000800 	.word	0x40000800
 80080d4:	40000c00 	.word	0x40000c00
 80080d8:	40014000 	.word	0x40014000
 80080dc:	40014400 	.word	0x40014400
 80080e0:	40014800 	.word	0x40014800

080080e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0201 	bic.w	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0303 	bic.w	r3, r3, #3
 800811a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f023 0302 	bic.w	r3, r3, #2
 800812c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	4313      	orrs	r3, r2
 8008136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a30      	ldr	r2, [pc, #192]	; (80081fc <TIM_OC1_SetConfig+0x118>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d119      	bne.n	8008174 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d008      	beq.n	800815a <TIM_OC1_SetConfig+0x76>
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2b08      	cmp	r3, #8
 800814e:	d004      	beq.n	800815a <TIM_OC1_SetConfig+0x76>
 8008150:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 8008154:	482a      	ldr	r0, [pc, #168]	; (8008200 <TIM_OC1_SetConfig+0x11c>)
 8008156:	f7f8 ff9b 	bl	8001090 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f023 0308 	bic.w	r3, r3, #8
 8008160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f023 0304 	bic.w	r3, r3, #4
 8008172:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a21      	ldr	r2, [pc, #132]	; (80081fc <TIM_OC1_SetConfig+0x118>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d12d      	bne.n	80081d8 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008184:	d008      	beq.n	8008198 <TIM_OC1_SetConfig+0xb4>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d004      	beq.n	8008198 <TIM_OC1_SetConfig+0xb4>
 800818e:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8008192:	481b      	ldr	r0, [pc, #108]	; (8008200 <TIM_OC1_SetConfig+0x11c>)
 8008194:	f7f8 ff7c 	bl	8001090 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a0:	d008      	beq.n	80081b4 <TIM_OC1_SetConfig+0xd0>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d004      	beq.n	80081b4 <TIM_OC1_SetConfig+0xd0>
 80081aa:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 80081ae:	4814      	ldr	r0, [pc, #80]	; (8008200 <TIM_OC1_SetConfig+0x11c>)
 80081b0:	f7f8 ff6e 	bl	8001090 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	621a      	str	r2, [r3, #32]
}
 80081f2:	bf00      	nop
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	40010000 	.word	0x40010000
 8008200:	08011404 	.word	0x08011404

08008204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	f023 0210 	bic.w	r2, r3, #16
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800823a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	4313      	orrs	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f023 0320 	bic.w	r3, r3, #32
 800824e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a31      	ldr	r2, [pc, #196]	; (8008324 <TIM_OC2_SetConfig+0x120>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d11a      	bne.n	800829a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d008      	beq.n	800827e <TIM_OC2_SetConfig+0x7a>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b08      	cmp	r3, #8
 8008272:	d004      	beq.n	800827e <TIM_OC2_SetConfig+0x7a>
 8008274:	f641 3112 	movw	r1, #6930	; 0x1b12
 8008278:	482b      	ldr	r0, [pc, #172]	; (8008328 <TIM_OC2_SetConfig+0x124>)
 800827a:	f7f8 ff09 	bl	8001090 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	4313      	orrs	r3, r2
 8008290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008298:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a21      	ldr	r2, [pc, #132]	; (8008324 <TIM_OC2_SetConfig+0x120>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d12f      	bne.n	8008302 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082aa:	d008      	beq.n	80082be <TIM_OC2_SetConfig+0xba>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d004      	beq.n	80082be <TIM_OC2_SetConfig+0xba>
 80082b4:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 80082b8:	481b      	ldr	r0, [pc, #108]	; (8008328 <TIM_OC2_SetConfig+0x124>)
 80082ba:	f7f8 fee9 	bl	8001090 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082c6:	d008      	beq.n	80082da <TIM_OC2_SetConfig+0xd6>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d004      	beq.n	80082da <TIM_OC2_SetConfig+0xd6>
 80082d0:	f641 3121 	movw	r1, #6945	; 0x1b21
 80082d4:	4814      	ldr	r0, [pc, #80]	; (8008328 <TIM_OC2_SetConfig+0x124>)
 80082d6:	f7f8 fedb 	bl	8001090 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	621a      	str	r2, [r3, #32]
}
 800831c:	bf00      	nop
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40010000 	.word	0x40010000
 8008328:	08011404 	.word	0x08011404

0800832c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4313      	orrs	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	021b      	lsls	r3, r3, #8
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a31      	ldr	r2, [pc, #196]	; (800844c <TIM_OC3_SetConfig+0x120>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d11a      	bne.n	80083c0 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <TIM_OC3_SetConfig+0x78>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	2b08      	cmp	r3, #8
 8008398:	d004      	beq.n	80083a4 <TIM_OC3_SetConfig+0x78>
 800839a:	f641 315d 	movw	r1, #7005	; 0x1b5d
 800839e:	482c      	ldr	r0, [pc, #176]	; (8008450 <TIM_OC3_SetConfig+0x124>)
 80083a0:	f7f8 fe76 	bl	8001090 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	021b      	lsls	r3, r3, #8
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a22      	ldr	r2, [pc, #136]	; (800844c <TIM_OC3_SetConfig+0x120>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d12f      	bne.n	8008428 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d0:	d008      	beq.n	80083e4 <TIM_OC3_SetConfig+0xb8>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d004      	beq.n	80083e4 <TIM_OC3_SetConfig+0xb8>
 80083da:	f641 316a 	movw	r1, #7018	; 0x1b6a
 80083de:	481c      	ldr	r0, [pc, #112]	; (8008450 <TIM_OC3_SetConfig+0x124>)
 80083e0:	f7f8 fe56 	bl	8001090 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ec:	d008      	beq.n	8008400 <TIM_OC3_SetConfig+0xd4>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d004      	beq.n	8008400 <TIM_OC3_SetConfig+0xd4>
 80083f6:	f641 316b 	movw	r1, #7019	; 0x1b6b
 80083fa:	4815      	ldr	r0, [pc, #84]	; (8008450 <TIM_OC3_SetConfig+0x124>)
 80083fc:	f7f8 fe48 	bl	8001090 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800840e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	bf00      	nop
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	40010000 	.word	0x40010000
 8008450:	08011404 	.word	0x08011404

08008454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800848a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	021b      	lsls	r3, r3, #8
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800849e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	031b      	lsls	r3, r3, #12
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a16      	ldr	r2, [pc, #88]	; (8008508 <TIM_OC4_SetConfig+0xb4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d117      	bne.n	80084e4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084bc:	d008      	beq.n	80084d0 <TIM_OC4_SetConfig+0x7c>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <TIM_OC4_SetConfig+0x7c>
 80084c6:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 80084ca:	4810      	ldr	r0, [pc, #64]	; (800850c <TIM_OC4_SetConfig+0xb8>)
 80084cc:	f7f8 fde0 	bl	8001090 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	019b      	lsls	r3, r3, #6
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	621a      	str	r2, [r3, #32]
}
 80084fe:	bf00      	nop
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	40010000 	.word	0x40010000
 800850c:	08011404 	.word	0x08011404

08008510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f023 0201 	bic.w	r2, r3, #1
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800853a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	4313      	orrs	r3, r2
 8008544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f023 030a 	bic.w	r3, r3, #10
 800854c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4313      	orrs	r3, r2
 8008554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	621a      	str	r2, [r3, #32]
}
 8008562:	bf00      	nop
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800856e:	b480      	push	{r7}
 8008570:	b087      	sub	sp, #28
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	f023 0210 	bic.w	r2, r3, #16
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	031b      	lsls	r3, r3, #12
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	621a      	str	r2, [r3, #32]
}
 80085c2:	bf00      	nop
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b085      	sub	sp, #20
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	f043 0307 	orr.w	r3, r3, #7
 80085f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	609a      	str	r2, [r3, #8]
}
 80085f8:	bf00      	nop
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800861e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	021a      	lsls	r2, r3, #8
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	431a      	orrs	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4313      	orrs	r3, r2
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	609a      	str	r2, [r3, #8]
}
 8008638:	bf00      	nop
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4a2a      	ldr	r2, [pc, #168]	; (80086fc <TIM_CCxChannelCmd+0xb8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d020      	beq.n	800869a <TIM_CCxChannelCmd+0x56>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800865e:	d01c      	beq.n	800869a <TIM_CCxChannelCmd+0x56>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a27      	ldr	r2, [pc, #156]	; (8008700 <TIM_CCxChannelCmd+0xbc>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d018      	beq.n	800869a <TIM_CCxChannelCmd+0x56>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4a26      	ldr	r2, [pc, #152]	; (8008704 <TIM_CCxChannelCmd+0xc0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d014      	beq.n	800869a <TIM_CCxChannelCmd+0x56>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4a25      	ldr	r2, [pc, #148]	; (8008708 <TIM_CCxChannelCmd+0xc4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d010      	beq.n	800869a <TIM_CCxChannelCmd+0x56>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4a24      	ldr	r2, [pc, #144]	; (800870c <TIM_CCxChannelCmd+0xc8>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00c      	beq.n	800869a <TIM_CCxChannelCmd+0x56>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4a23      	ldr	r2, [pc, #140]	; (8008710 <TIM_CCxChannelCmd+0xcc>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d008      	beq.n	800869a <TIM_CCxChannelCmd+0x56>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4a22      	ldr	r2, [pc, #136]	; (8008714 <TIM_CCxChannelCmd+0xd0>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d004      	beq.n	800869a <TIM_CCxChannelCmd+0x56>
 8008690:	f641 5194 	movw	r1, #7572	; 0x1d94
 8008694:	4820      	ldr	r0, [pc, #128]	; (8008718 <TIM_CCxChannelCmd+0xd4>)
 8008696:	f7f8 fcfb 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d010      	beq.n	80086c2 <TIM_CCxChannelCmd+0x7e>
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d00d      	beq.n	80086c2 <TIM_CCxChannelCmd+0x7e>
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d00a      	beq.n	80086c2 <TIM_CCxChannelCmd+0x7e>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b0c      	cmp	r3, #12
 80086b0:	d007      	beq.n	80086c2 <TIM_CCxChannelCmd+0x7e>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b3c      	cmp	r3, #60	; 0x3c
 80086b6:	d004      	beq.n	80086c2 <TIM_CCxChannelCmd+0x7e>
 80086b8:	f641 5195 	movw	r1, #7573	; 0x1d95
 80086bc:	4816      	ldr	r0, [pc, #88]	; (8008718 <TIM_CCxChannelCmd+0xd4>)
 80086be:	f7f8 fce7 	bl	8001090 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f003 031f 	and.w	r3, r3, #31
 80086c8:	2201      	movs	r2, #1
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a1a      	ldr	r2, [r3, #32]
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	43db      	mvns	r3, r3
 80086d8:	401a      	ands	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a1a      	ldr	r2, [r3, #32]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f003 031f 	and.w	r3, r3, #31
 80086e8:	6879      	ldr	r1, [r7, #4]
 80086ea:	fa01 f303 	lsl.w	r3, r1, r3
 80086ee:	431a      	orrs	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	621a      	str	r2, [r3, #32]
}
 80086f4:	bf00      	nop
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	40010000 	.word	0x40010000
 8008700:	40000400 	.word	0x40000400
 8008704:	40000800 	.word	0x40000800
 8008708:	40000c00 	.word	0x40000c00
 800870c:	40014000 	.word	0x40014000
 8008710:	40014400 	.word	0x40014400
 8008714:	40014800 	.word	0x40014800
 8008718:	08011404 	.word	0x08011404

0800871c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a55      	ldr	r2, [pc, #340]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d018      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008738:	d013      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a51      	ldr	r2, [pc, #324]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d00e      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a4f      	ldr	r2, [pc, #316]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d009      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a4e      	ldr	r2, [pc, #312]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d004      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008758:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800875c:	484c      	ldr	r0, [pc, #304]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800875e:	f7f8 fc97 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d020      	beq.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b10      	cmp	r3, #16
 8008770:	d01c      	beq.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b20      	cmp	r3, #32
 8008778:	d018      	beq.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b30      	cmp	r3, #48	; 0x30
 8008780:	d014      	beq.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b40      	cmp	r3, #64	; 0x40
 8008788:	d010      	beq.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b50      	cmp	r3, #80	; 0x50
 8008790:	d00c      	beq.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b60      	cmp	r3, #96	; 0x60
 8008798:	d008      	beq.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b70      	cmp	r3, #112	; 0x70
 80087a0:	d004      	beq.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80087a2:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80087a6:	483a      	ldr	r0, [pc, #232]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80087a8:	f7f8 fc72 	bl	8001090 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	2b80      	cmp	r3, #128	; 0x80
 80087b2:	d008      	beq.n	80087c6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d004      	beq.n	80087c6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80087bc:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80087c0:	4833      	ldr	r0, [pc, #204]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80087c2:	f7f8 fc65 	bl	8001090 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e050      	b.n	8008876 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a1b      	ldr	r2, [pc, #108]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d018      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008820:	d013      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a17      	ldr	r2, [pc, #92]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00e      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a15      	ldr	r2, [pc, #84]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d009      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a14      	ldr	r2, [pc, #80]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d004      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a13      	ldr	r2, [pc, #76]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d10c      	bne.n	8008864 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	4313      	orrs	r3, r2
 800885a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	40010000 	.word	0x40010000
 8008884:	40000400 	.word	0x40000400
 8008888:	40000800 	.word	0x40000800
 800888c:	40000c00 	.word	0x40000c00
 8008890:	0801143c 	.word	0x0801143c
 8008894:	40014000 	.word	0x40014000

08008898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088c0:	b084      	sub	sp, #16
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	f107 001c 	add.w	r0, r7, #28
 80088ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d122      	bne.n	800891e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80088ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008902:	2b01      	cmp	r3, #1
 8008904:	d105      	bne.n	8008912 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f001 fbee 	bl	800a0f4 <USB_CoreReset>
 8008918:	4603      	mov	r3, r0
 800891a:	73fb      	strb	r3, [r7, #15]
 800891c:	e01a      	b.n	8008954 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 fbe2 	bl	800a0f4 <USB_CoreReset>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	639a      	str	r2, [r3, #56]	; 0x38
 8008946:	e005      	b.n	8008954 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	2b01      	cmp	r3, #1
 8008958:	d10b      	bne.n	8008972 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f043 0206 	orr.w	r2, r3, #6
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f043 0220 	orr.w	r2, r3, #32
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800897e:	b004      	add	sp, #16
 8008980:	4770      	bx	lr
	...

08008984 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	4613      	mov	r3, r2
 8008990:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d165      	bne.n	8008a64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4a41      	ldr	r2, [pc, #260]	; (8008aa0 <USB_SetTurnaroundTime+0x11c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d906      	bls.n	80089ae <USB_SetTurnaroundTime+0x2a>
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4a40      	ldr	r2, [pc, #256]	; (8008aa4 <USB_SetTurnaroundTime+0x120>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d202      	bcs.n	80089ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80089a8:	230f      	movs	r3, #15
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	e062      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4a3c      	ldr	r2, [pc, #240]	; (8008aa4 <USB_SetTurnaroundTime+0x120>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d306      	bcc.n	80089c4 <USB_SetTurnaroundTime+0x40>
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	4a3b      	ldr	r2, [pc, #236]	; (8008aa8 <USB_SetTurnaroundTime+0x124>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d202      	bcs.n	80089c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80089be:	230e      	movs	r3, #14
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	e057      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4a38      	ldr	r2, [pc, #224]	; (8008aa8 <USB_SetTurnaroundTime+0x124>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d306      	bcc.n	80089da <USB_SetTurnaroundTime+0x56>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4a37      	ldr	r2, [pc, #220]	; (8008aac <USB_SetTurnaroundTime+0x128>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d202      	bcs.n	80089da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80089d4:	230d      	movs	r3, #13
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	e04c      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4a33      	ldr	r2, [pc, #204]	; (8008aac <USB_SetTurnaroundTime+0x128>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d306      	bcc.n	80089f0 <USB_SetTurnaroundTime+0x6c>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	4a32      	ldr	r2, [pc, #200]	; (8008ab0 <USB_SetTurnaroundTime+0x12c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d802      	bhi.n	80089f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80089ea:	230c      	movs	r3, #12
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	e041      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4a2f      	ldr	r2, [pc, #188]	; (8008ab0 <USB_SetTurnaroundTime+0x12c>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d906      	bls.n	8008a06 <USB_SetTurnaroundTime+0x82>
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	4a2e      	ldr	r2, [pc, #184]	; (8008ab4 <USB_SetTurnaroundTime+0x130>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d802      	bhi.n	8008a06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008a00:	230b      	movs	r3, #11
 8008a02:	617b      	str	r3, [r7, #20]
 8008a04:	e036      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	4a2a      	ldr	r2, [pc, #168]	; (8008ab4 <USB_SetTurnaroundTime+0x130>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d906      	bls.n	8008a1c <USB_SetTurnaroundTime+0x98>
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	4a29      	ldr	r2, [pc, #164]	; (8008ab8 <USB_SetTurnaroundTime+0x134>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d802      	bhi.n	8008a1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008a16:	230a      	movs	r3, #10
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	e02b      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4a26      	ldr	r2, [pc, #152]	; (8008ab8 <USB_SetTurnaroundTime+0x134>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d906      	bls.n	8008a32 <USB_SetTurnaroundTime+0xae>
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	4a25      	ldr	r2, [pc, #148]	; (8008abc <USB_SetTurnaroundTime+0x138>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d202      	bcs.n	8008a32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008a2c:	2309      	movs	r3, #9
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	e020      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	4a21      	ldr	r2, [pc, #132]	; (8008abc <USB_SetTurnaroundTime+0x138>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d306      	bcc.n	8008a48 <USB_SetTurnaroundTime+0xc4>
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	4a20      	ldr	r2, [pc, #128]	; (8008ac0 <USB_SetTurnaroundTime+0x13c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d802      	bhi.n	8008a48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a42:	2308      	movs	r3, #8
 8008a44:	617b      	str	r3, [r7, #20]
 8008a46:	e015      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	4a1d      	ldr	r2, [pc, #116]	; (8008ac0 <USB_SetTurnaroundTime+0x13c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d906      	bls.n	8008a5e <USB_SetTurnaroundTime+0xda>
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	4a1c      	ldr	r2, [pc, #112]	; (8008ac4 <USB_SetTurnaroundTime+0x140>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d202      	bcs.n	8008a5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a58:	2307      	movs	r3, #7
 8008a5a:	617b      	str	r3, [r7, #20]
 8008a5c:	e00a      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a5e:	2306      	movs	r3, #6
 8008a60:	617b      	str	r3, [r7, #20]
 8008a62:	e007      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d102      	bne.n	8008a70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a6a:	2309      	movs	r3, #9
 8008a6c:	617b      	str	r3, [r7, #20]
 8008a6e:	e001      	b.n	8008a74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a70:	2309      	movs	r3, #9
 8008a72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	029b      	lsls	r3, r3, #10
 8008a88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	371c      	adds	r7, #28
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	00d8acbf 	.word	0x00d8acbf
 8008aa4:	00e4e1c0 	.word	0x00e4e1c0
 8008aa8:	00f42400 	.word	0x00f42400
 8008aac:	01067380 	.word	0x01067380
 8008ab0:	011a499f 	.word	0x011a499f
 8008ab4:	01312cff 	.word	0x01312cff
 8008ab8:	014ca43f 	.word	0x014ca43f
 8008abc:	016e3600 	.word	0x016e3600
 8008ac0:	01a6ab1f 	.word	0x01a6ab1f
 8008ac4:	01e84800 	.word	0x01e84800

08008ac8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	f043 0201 	orr.w	r2, r3, #1
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f023 0201 	bic.w	r2, r3, #1
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d115      	bne.n	8008b5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b3a:	2001      	movs	r0, #1
 8008b3c:	f7f9 fa58 	bl	8001ff0 <HAL_Delay>
      ms++;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3301      	adds	r3, #1
 8008b44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 fa45 	bl	8009fd6 <USB_GetMode>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d01e      	beq.n	8008b90 <USB_SetCurrentMode+0x84>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b31      	cmp	r3, #49	; 0x31
 8008b56:	d9f0      	bls.n	8008b3a <USB_SetCurrentMode+0x2e>
 8008b58:	e01a      	b.n	8008b90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d115      	bne.n	8008b8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b6c:	2001      	movs	r0, #1
 8008b6e:	f7f9 fa3f 	bl	8001ff0 <HAL_Delay>
      ms++;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3301      	adds	r3, #1
 8008b76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f001 fa2c 	bl	8009fd6 <USB_GetMode>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <USB_SetCurrentMode+0x84>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b31      	cmp	r3, #49	; 0x31
 8008b88:	d9f0      	bls.n	8008b6c <USB_SetCurrentMode+0x60>
 8008b8a:	e001      	b.n	8008b90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e005      	b.n	8008b9c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b32      	cmp	r3, #50	; 0x32
 8008b94:	d101      	bne.n	8008b9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e000      	b.n	8008b9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b086      	sub	sp, #24
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	613b      	str	r3, [r7, #16]
 8008bc2:	e009      	b.n	8008bd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	3340      	adds	r3, #64	; 0x40
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	2200      	movs	r2, #0
 8008bd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	613b      	str	r3, [r7, #16]
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	2b0e      	cmp	r3, #14
 8008bdc:	d9f2      	bls.n	8008bc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d11c      	bne.n	8008c1e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bf2:	f043 0302 	orr.w	r3, r3, #2
 8008bf6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8008c1c:	e00b      	b.n	8008c36 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c48:	4619      	mov	r1, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c50:	461a      	mov	r2, r3
 8008c52:	680b      	ldr	r3, [r1, #0]
 8008c54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d10c      	bne.n	8008c76 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d104      	bne.n	8008c6c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c62:	2100      	movs	r1, #0
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f965 	bl	8008f34 <USB_SetDevSpeed>
 8008c6a:	e008      	b.n	8008c7e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f960 	bl	8008f34 <USB_SetDevSpeed>
 8008c74:	e003      	b.n	8008c7e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c76:	2103      	movs	r1, #3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f95b 	bl	8008f34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c7e:	2110      	movs	r1, #16
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f8f3 	bl	8008e6c <USB_FlushTxFifo>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f91f 	bl	8008ed4 <USB_FlushRxFifo>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	2300      	movs	r3, #0
 8008caa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	613b      	str	r3, [r7, #16]
 8008cc8:	e043      	b.n	8008d52 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ce0:	d118      	bne.n	8008d14 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	e013      	b.n	8008d26 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	e008      	b.n	8008d26 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d20:	461a      	mov	r2, r3
 8008d22:	2300      	movs	r3, #0
 8008d24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d32:	461a      	mov	r2, r3
 8008d34:	2300      	movs	r3, #0
 8008d36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d44:	461a      	mov	r2, r3
 8008d46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d3b7      	bcc.n	8008cca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	613b      	str	r3, [r7, #16]
 8008d5e:	e043      	b.n	8008de8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d76:	d118      	bne.n	8008daa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10a      	bne.n	8008d94 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	e013      	b.n	8008dbc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da0:	461a      	mov	r2, r3
 8008da2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	e008      	b.n	8008dbc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db6:	461a      	mov	r2, r3
 8008db8:	2300      	movs	r3, #0
 8008dba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008de0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	3301      	adds	r3, #1
 8008de6:	613b      	str	r3, [r7, #16]
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d3b7      	bcc.n	8008d60 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d105      	bne.n	8008e24 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	f043 0210 	orr.w	r2, r3, #16
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	699a      	ldr	r2, [r3, #24]
 8008e28:	4b0f      	ldr	r3, [pc, #60]	; (8008e68 <USB_DevInit+0x2c4>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d005      	beq.n	8008e42 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	f043 0208 	orr.w	r2, r3, #8
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d107      	bne.n	8008e58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e50:	f043 0304 	orr.w	r3, r3, #4
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e64:	b004      	add	sp, #16
 8008e66:	4770      	bx	lr
 8008e68:	803c3800 	.word	0x803c3800

08008e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <USB_FlushTxFifo+0x64>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d901      	bls.n	8008e8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e01b      	b.n	8008ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	daf2      	bge.n	8008e7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	019b      	lsls	r3, r3, #6
 8008e9c:	f043 0220 	orr.w	r2, r3, #32
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4a08      	ldr	r2, [pc, #32]	; (8008ed0 <USB_FlushTxFifo+0x64>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d901      	bls.n	8008eb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e006      	b.n	8008ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	f003 0320 	and.w	r3, r3, #32
 8008ebe:	2b20      	cmp	r3, #32
 8008ec0:	d0f0      	beq.n	8008ea4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	00030d40 	.word	0x00030d40

08008ed4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4a11      	ldr	r2, [pc, #68]	; (8008f30 <USB_FlushRxFifo+0x5c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d901      	bls.n	8008ef2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e018      	b.n	8008f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	daf2      	bge.n	8008ee0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2210      	movs	r2, #16
 8008f02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3301      	adds	r3, #1
 8008f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4a08      	ldr	r2, [pc, #32]	; (8008f30 <USB_FlushRxFifo+0x5c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d901      	bls.n	8008f16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e006      	b.n	8008f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f003 0310 	and.w	r3, r3, #16
 8008f1e:	2b10      	cmp	r3, #16
 8008f20:	d0f0      	beq.n	8008f04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	00030d40 	.word	0x00030d40

08008f34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	68f9      	ldr	r1, [r7, #12]
 8008f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f54:	4313      	orrs	r3, r2
 8008f56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b087      	sub	sp, #28
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f003 0306 	and.w	r3, r3, #6
 8008f7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d102      	bne.n	8008f8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f86:	2300      	movs	r3, #0
 8008f88:	75fb      	strb	r3, [r7, #23]
 8008f8a:	e00a      	b.n	8008fa2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d002      	beq.n	8008f98 <USB_GetDevSpeed+0x32>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2b06      	cmp	r3, #6
 8008f96:	d102      	bne.n	8008f9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f98:	2302      	movs	r3, #2
 8008f9a:	75fb      	strb	r3, [r7, #23]
 8008f9c:	e001      	b.n	8008fa2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f9e:	230f      	movs	r3, #15
 8008fa0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	371c      	adds	r7, #28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	785b      	ldrb	r3, [r3, #1]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d13a      	bne.n	8009042 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd2:	69da      	ldr	r2, [r3, #28]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	f003 030f 	and.w	r3, r3, #15
 8008fdc:	2101      	movs	r1, #1
 8008fde:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	68f9      	ldr	r1, [r7, #12]
 8008fe6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fea:	4313      	orrs	r3, r2
 8008fec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d155      	bne.n	80090b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	791b      	ldrb	r3, [r3, #4]
 800901e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009020:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	059b      	lsls	r3, r3, #22
 8009026:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009028:	4313      	orrs	r3, r2
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	0151      	lsls	r1, r2, #5
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	440a      	add	r2, r1
 8009032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800903a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	e036      	b.n	80090b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009048:	69da      	ldr	r2, [r3, #28]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	f003 030f 	and.w	r3, r3, #15
 8009052:	2101      	movs	r1, #1
 8009054:	fa01 f303 	lsl.w	r3, r1, r3
 8009058:	041b      	lsls	r3, r3, #16
 800905a:	68f9      	ldr	r1, [r7, #12]
 800905c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009060:	4313      	orrs	r3, r2
 8009062:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d11a      	bne.n	80090b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	015a      	lsls	r2, r3, #5
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4413      	add	r3, r2
 8009082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	791b      	ldrb	r3, [r3, #4]
 8009094:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009096:	430b      	orrs	r3, r1
 8009098:	4313      	orrs	r3, r2
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	0151      	lsls	r1, r2, #5
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	440a      	add	r2, r1
 80090a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
	...

080090c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	785b      	ldrb	r3, [r3, #1]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d161      	bne.n	80091a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090f2:	d11f      	bne.n	8009134 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	0151      	lsls	r1, r2, #5
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	440a      	add	r2, r1
 800910a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800910e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009112:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	0151      	lsls	r1, r2, #5
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	440a      	add	r2, r1
 800912a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009132:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	f003 030f 	and.w	r3, r3, #15
 8009144:	2101      	movs	r1, #1
 8009146:	fa01 f303 	lsl.w	r3, r1, r3
 800914a:	b29b      	uxth	r3, r3
 800914c:	43db      	mvns	r3, r3
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009154:	4013      	ands	r3, r2
 8009156:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915e:	69da      	ldr	r2, [r3, #28]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	2101      	movs	r1, #1
 800916a:	fa01 f303 	lsl.w	r3, r1, r3
 800916e:	b29b      	uxth	r3, r3
 8009170:	43db      	mvns	r3, r3
 8009172:	68f9      	ldr	r1, [r7, #12]
 8009174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009178:	4013      	ands	r3, r2
 800917a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	0159      	lsls	r1, r3, #5
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	440b      	add	r3, r1
 8009192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009196:	4619      	mov	r1, r3
 8009198:	4b35      	ldr	r3, [pc, #212]	; (8009270 <USB_DeactivateEndpoint+0x1b0>)
 800919a:	4013      	ands	r3, r2
 800919c:	600b      	str	r3, [r1, #0]
 800919e:	e060      	b.n	8009262 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091b6:	d11f      	bne.n	80091f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	0151      	lsls	r1, r2, #5
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	440a      	add	r2, r1
 80091ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	0151      	lsls	r1, r2, #5
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	440a      	add	r2, r1
 80091ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	f003 030f 	and.w	r3, r3, #15
 8009208:	2101      	movs	r1, #1
 800920a:	fa01 f303 	lsl.w	r3, r1, r3
 800920e:	041b      	lsls	r3, r3, #16
 8009210:	43db      	mvns	r3, r3
 8009212:	68f9      	ldr	r1, [r7, #12]
 8009214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009218:	4013      	ands	r3, r2
 800921a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009222:	69da      	ldr	r2, [r3, #28]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	f003 030f 	and.w	r3, r3, #15
 800922c:	2101      	movs	r1, #1
 800922e:	fa01 f303 	lsl.w	r3, r1, r3
 8009232:	041b      	lsls	r3, r3, #16
 8009234:	43db      	mvns	r3, r3
 8009236:	68f9      	ldr	r1, [r7, #12]
 8009238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800923c:	4013      	ands	r3, r2
 800923e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	0159      	lsls	r1, r3, #5
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	440b      	add	r3, r1
 8009256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925a:	4619      	mov	r1, r3
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <USB_DeactivateEndpoint+0x1b4>)
 800925e:	4013      	ands	r3, r2
 8009260:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	ec337800 	.word	0xec337800
 8009274:	eff37800 	.word	0xeff37800

08009278 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08a      	sub	sp, #40	; 0x28
 800927c:	af02      	add	r7, sp, #8
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4613      	mov	r3, r2
 8009284:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	785b      	ldrb	r3, [r3, #1]
 8009294:	2b01      	cmp	r3, #1
 8009296:	f040 815c 	bne.w	8009552 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d132      	bne.n	8009308 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	69fa      	ldr	r2, [r7, #28]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	0151      	lsls	r1, r2, #5
 80092d8:	69fa      	ldr	r2, [r7, #28]
 80092da:	440a      	add	r2, r1
 80092dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	0151      	lsls	r1, r2, #5
 80092f8:	69fa      	ldr	r2, [r7, #28]
 80092fa:	440a      	add	r2, r1
 80092fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009300:	0cdb      	lsrs	r3, r3, #19
 8009302:	04db      	lsls	r3, r3, #19
 8009304:	6113      	str	r3, [r2, #16]
 8009306:	e074      	b.n	80093f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	0151      	lsls	r1, r2, #5
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	440a      	add	r2, r1
 800931e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009322:	0cdb      	lsrs	r3, r3, #19
 8009324:	04db      	lsls	r3, r3, #19
 8009326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	69ba      	ldr	r2, [r7, #24]
 8009338:	0151      	lsls	r1, r2, #5
 800933a:	69fa      	ldr	r2, [r7, #28]
 800933c:	440a      	add	r2, r1
 800933e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009342:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009346:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800934a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009358:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	6999      	ldr	r1, [r3, #24]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	440b      	add	r3, r1
 8009364:	1e59      	subs	r1, r3, #1
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	fbb1 f3f3 	udiv	r3, r1, r3
 800936e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009370:	4b9d      	ldr	r3, [pc, #628]	; (80095e8 <USB_EPStartXfer+0x370>)
 8009372:	400b      	ands	r3, r1
 8009374:	69b9      	ldr	r1, [r7, #24]
 8009376:	0148      	lsls	r0, r1, #5
 8009378:	69f9      	ldr	r1, [r7, #28]
 800937a:	4401      	add	r1, r0
 800937c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009380:	4313      	orrs	r3, r2
 8009382:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009390:	691a      	ldr	r2, [r3, #16]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800939a:	69b9      	ldr	r1, [r7, #24]
 800939c:	0148      	lsls	r0, r1, #5
 800939e:	69f9      	ldr	r1, [r7, #28]
 80093a0:	4401      	add	r1, r0
 80093a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093a6:	4313      	orrs	r3, r2
 80093a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	791b      	ldrb	r3, [r3, #4]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d11f      	bne.n	80093f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	0151      	lsls	r1, r2, #5
 80093c4:	69fa      	ldr	r2, [r7, #28]
 80093c6:	440a      	add	r2, r1
 80093c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80093d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	0151      	lsls	r1, r2, #5
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	440a      	add	r2, r1
 80093e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d14b      	bne.n	8009490 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d009      	beq.n	8009414 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940c:	461a      	mov	r2, r3
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	791b      	ldrb	r3, [r3, #4]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d128      	bne.n	800946e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009428:	2b00      	cmp	r3, #0
 800942a:	d110      	bne.n	800944e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	0151      	lsls	r1, r2, #5
 800943e:	69fa      	ldr	r2, [r7, #28]
 8009440:	440a      	add	r2, r1
 8009442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009446:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	e00f      	b.n	800946e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	0151      	lsls	r1, r2, #5
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	440a      	add	r2, r1
 8009464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800946c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	0151      	lsls	r1, r2, #5
 8009480:	69fa      	ldr	r2, [r7, #28]
 8009482:	440a      	add	r2, r1
 8009484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009488:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800948c:	6013      	str	r3, [r2, #0]
 800948e:	e133      	b.n	80096f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	0151      	lsls	r1, r2, #5
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	440a      	add	r2, r1
 80094a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	791b      	ldrb	r3, [r3, #4]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d015      	beq.n	80094e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 811b 	beq.w	80096f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	f003 030f 	and.w	r3, r3, #15
 80094d2:	2101      	movs	r1, #1
 80094d4:	fa01 f303 	lsl.w	r3, r1, r3
 80094d8:	69f9      	ldr	r1, [r7, #28]
 80094da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094de:	4313      	orrs	r3, r2
 80094e0:	634b      	str	r3, [r1, #52]	; 0x34
 80094e2:	e109      	b.n	80096f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d110      	bne.n	8009516 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	0151      	lsls	r1, r2, #5
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	440a      	add	r2, r1
 800950a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800950e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	e00f      	b.n	8009536 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	440a      	add	r2, r1
 800952c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009534:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6919      	ldr	r1, [r3, #16]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	781a      	ldrb	r2, [r3, #0]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	b298      	uxth	r0, r3
 8009544:	79fb      	ldrb	r3, [r7, #7]
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	4603      	mov	r3, r0
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 fade 	bl	8009b0c <USB_WritePacket>
 8009550:	e0d2      	b.n	80096f8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	0151      	lsls	r1, r2, #5
 8009564:	69fa      	ldr	r2, [r7, #28]
 8009566:	440a      	add	r2, r1
 8009568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800956c:	0cdb      	lsrs	r3, r3, #19
 800956e:	04db      	lsls	r3, r3, #19
 8009570:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	0151      	lsls	r1, r2, #5
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	440a      	add	r2, r1
 8009588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800958c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009590:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009594:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d126      	bne.n	80095ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095aa:	691a      	ldr	r2, [r3, #16]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095b4:	69b9      	ldr	r1, [r7, #24]
 80095b6:	0148      	lsls	r0, r1, #5
 80095b8:	69f9      	ldr	r1, [r7, #28]
 80095ba:	4401      	add	r1, r0
 80095bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095c0:	4313      	orrs	r3, r2
 80095c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	0151      	lsls	r1, r2, #5
 80095d6:	69fa      	ldr	r2, [r7, #28]
 80095d8:	440a      	add	r2, r1
 80095da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095e2:	6113      	str	r3, [r2, #16]
 80095e4:	e03a      	b.n	800965c <USB_EPStartXfer+0x3e4>
 80095e6:	bf00      	nop
 80095e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	699a      	ldr	r2, [r3, #24]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	4413      	add	r3, r2
 80095f6:	1e5a      	subs	r2, r3, #1
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009600:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	8afa      	ldrh	r2, [r7, #22]
 8009608:	fb03 f202 	mul.w	r2, r3, r2
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961c:	691a      	ldr	r2, [r3, #16]
 800961e:	8afb      	ldrh	r3, [r7, #22]
 8009620:	04d9      	lsls	r1, r3, #19
 8009622:	4b38      	ldr	r3, [pc, #224]	; (8009704 <USB_EPStartXfer+0x48c>)
 8009624:	400b      	ands	r3, r1
 8009626:	69b9      	ldr	r1, [r7, #24]
 8009628:	0148      	lsls	r0, r1, #5
 800962a:	69f9      	ldr	r1, [r7, #28]
 800962c:	4401      	add	r1, r0
 800962e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009632:	4313      	orrs	r3, r2
 8009634:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009642:	691a      	ldr	r2, [r3, #16]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800964c:	69b9      	ldr	r1, [r7, #24]
 800964e:	0148      	lsls	r0, r1, #5
 8009650:	69f9      	ldr	r1, [r7, #28]
 8009652:	4401      	add	r1, r0
 8009654:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009658:	4313      	orrs	r3, r2
 800965a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800965c:	79fb      	ldrb	r3, [r7, #7]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d10d      	bne.n	800967e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d009      	beq.n	800967e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	6919      	ldr	r1, [r3, #16]
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967a:	460a      	mov	r2, r1
 800967c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	791b      	ldrb	r3, [r3, #4]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d128      	bne.n	80096d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009692:	2b00      	cmp	r3, #0
 8009694:	d110      	bne.n	80096b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	0151      	lsls	r1, r2, #5
 80096a8:	69fa      	ldr	r2, [r7, #28]
 80096aa:	440a      	add	r2, r1
 80096ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096b4:	6013      	str	r3, [r2, #0]
 80096b6:	e00f      	b.n	80096d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	69ba      	ldr	r2, [r7, #24]
 80096c8:	0151      	lsls	r1, r2, #5
 80096ca:	69fa      	ldr	r2, [r7, #28]
 80096cc:	440a      	add	r2, r1
 80096ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	0151      	lsls	r1, r2, #5
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	440a      	add	r2, r1
 80096ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3720      	adds	r7, #32
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	1ff80000 	.word	0x1ff80000

08009708 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009708:	b480      	push	{r7}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	785b      	ldrb	r3, [r3, #1]
 8009724:	2b01      	cmp	r3, #1
 8009726:	f040 80ce 	bne.w	80098c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d132      	bne.n	8009798 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800974c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009750:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009754:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	0151      	lsls	r1, r2, #5
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	440a      	add	r2, r1
 800976c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	0151      	lsls	r1, r2, #5
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	440a      	add	r2, r1
 800978c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009790:	0cdb      	lsrs	r3, r3, #19
 8009792:	04db      	lsls	r3, r3, #19
 8009794:	6113      	str	r3, [r2, #16]
 8009796:	e04e      	b.n	8009836 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097b2:	0cdb      	lsrs	r3, r3, #19
 80097b4:	04db      	lsls	r3, r3, #19
 80097b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	015a      	lsls	r2, r3, #5
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	4413      	add	r3, r2
 80097c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	0151      	lsls	r1, r2, #5
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	440a      	add	r2, r1
 80097ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	699a      	ldr	r2, [r3, #24]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d903      	bls.n	80097f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	0151      	lsls	r1, r2, #5
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	440a      	add	r2, r1
 8009806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800980a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800980e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	691a      	ldr	r2, [r3, #16]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009826:	6939      	ldr	r1, [r7, #16]
 8009828:	0148      	lsls	r0, r1, #5
 800982a:	6979      	ldr	r1, [r7, #20]
 800982c:	4401      	add	r1, r0
 800982e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009832:	4313      	orrs	r3, r2
 8009834:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d11e      	bne.n	800987a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	695b      	ldr	r3, [r3, #20]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d009      	beq.n	8009858 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009850:	461a      	mov	r2, r3
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	0151      	lsls	r1, r2, #5
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	440a      	add	r2, r1
 800986e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009872:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	e097      	b.n	80099aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	015a      	lsls	r2, r3, #5
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	4413      	add	r3, r2
 8009882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	0151      	lsls	r1, r2, #5
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	440a      	add	r2, r1
 8009890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009894:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009898:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 8083 	beq.w	80099aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	f003 030f 	and.w	r3, r3, #15
 80098b4:	2101      	movs	r1, #1
 80098b6:	fa01 f303 	lsl.w	r3, r1, r3
 80098ba:	6979      	ldr	r1, [r7, #20]
 80098bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098c0:	4313      	orrs	r3, r2
 80098c2:	634b      	str	r3, [r1, #52]	; 0x34
 80098c4:	e071      	b.n	80099aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	0151      	lsls	r1, r2, #5
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	440a      	add	r2, r1
 80098dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098e0:	0cdb      	lsrs	r3, r3, #19
 80098e2:	04db      	lsls	r3, r3, #19
 80098e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	0151      	lsls	r1, r2, #5
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	440a      	add	r2, r1
 80098fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009900:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009904:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009908:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	015a      	lsls	r2, r3, #5
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	4413      	add	r3, r2
 800992a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	0151      	lsls	r1, r2, #5
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	440a      	add	r2, r1
 8009938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800993c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009940:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994e:	691a      	ldr	r2, [r3, #16]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009958:	6939      	ldr	r1, [r7, #16]
 800995a:	0148      	lsls	r0, r1, #5
 800995c:	6979      	ldr	r1, [r7, #20]
 800995e:	4401      	add	r1, r0
 8009960:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009964:	4313      	orrs	r3, r2
 8009966:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d10d      	bne.n	800998a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d009      	beq.n	800998a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	6919      	ldr	r1, [r3, #16]
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	4413      	add	r3, r2
 8009982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009986:	460a      	mov	r2, r1
 8009988:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	4413      	add	r3, r2
 8009992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	0151      	lsls	r1, r2, #5
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	440a      	add	r2, r1
 80099a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	371c      	adds	r7, #28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d14a      	bne.n	8009a6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	015a      	lsls	r2, r3, #5
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	4413      	add	r3, r2
 80099e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099ee:	f040 8086 	bne.w	8009afe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	0151      	lsls	r1, r2, #5
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	440a      	add	r2, r1
 8009a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	7812      	ldrb	r2, [r2, #0]
 8009a2a:	0151      	lsls	r1, r2, #5
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	440a      	add	r2, r1
 8009a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d902      	bls.n	8009a50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009a4e:	e056      	b.n	8009afe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a68:	d0e7      	beq.n	8009a3a <USB_EPStopXfer+0x82>
 8009a6a:	e048      	b.n	8009afe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a84:	d13b      	bne.n	8009afe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	7812      	ldrb	r2, [r2, #0]
 8009a9a:	0151      	lsls	r1, r2, #5
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	440a      	add	r2, r1
 8009aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009aa8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	7812      	ldrb	r2, [r2, #0]
 8009abe:	0151      	lsls	r1, r2, #5
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	440a      	add	r2, r1
 8009ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009acc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d902      	bls.n	8009ae4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ae2:	e00c      	b.n	8009afe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009afc:	d0e7      	beq.n	8009ace <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	371c      	adds	r7, #28
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b089      	sub	sp, #36	; 0x24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	4611      	mov	r1, r2
 8009b18:	461a      	mov	r2, r3
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	71fb      	strb	r3, [r7, #7]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d123      	bne.n	8009b7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b32:	88bb      	ldrh	r3, [r7, #4]
 8009b34:	3303      	adds	r3, #3
 8009b36:	089b      	lsrs	r3, r3, #2
 8009b38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	61bb      	str	r3, [r7, #24]
 8009b3e:	e018      	b.n	8009b72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b40:	79fb      	ldrb	r3, [r7, #7]
 8009b42:	031a      	lsls	r2, r3, #12
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	3301      	adds	r3, #1
 8009b58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	3301      	adds	r3, #1
 8009b64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	61bb      	str	r3, [r7, #24]
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d3e2      	bcc.n	8009b40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3724      	adds	r7, #36	; 0x24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b08b      	sub	sp, #44	; 0x2c
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4613      	mov	r3, r2
 8009b94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	089b      	lsrs	r3, r3, #2
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	f003 0303 	and.w	r3, r3, #3
 8009bac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009bae:	2300      	movs	r3, #0
 8009bb0:	623b      	str	r3, [r7, #32]
 8009bb2:	e014      	b.n	8009bde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	3301      	adds	r3, #1
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	3301      	adds	r3, #1
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	623b      	str	r3, [r7, #32]
 8009bde:	6a3a      	ldr	r2, [r7, #32]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d3e6      	bcc.n	8009bb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009be6:	8bfb      	ldrh	r3, [r7, #30]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d01e      	beq.n	8009c2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f107 0310 	add.w	r3, r7, #16
 8009bfc:	6812      	ldr	r2, [r2, #0]
 8009bfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	fa22 f303 	lsr.w	r3, r2, r3
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c10:	701a      	strb	r2, [r3, #0]
      i++;
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	3301      	adds	r3, #1
 8009c16:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009c1e:	8bfb      	ldrh	r3, [r7, #30]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c24:	8bfb      	ldrh	r3, [r7, #30]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1ea      	bne.n	8009c00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	372c      	adds	r7, #44	; 0x2c
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	785b      	ldrb	r3, [r3, #1]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d12c      	bne.n	8009cae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	db12      	blt.n	8009c8c <USB_EPSetStall+0x54>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00f      	beq.n	8009c8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	0151      	lsls	r1, r2, #5
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	440a      	add	r2, r1
 8009c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	e02b      	b.n	8009d06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	db12      	blt.n	8009ce6 <USB_EPSetStall+0xae>
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00f      	beq.n	8009ce6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	0151      	lsls	r1, r2, #5
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	440a      	add	r2, r1
 8009cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ce0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ce4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	0151      	lsls	r1, r2, #5
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	785b      	ldrb	r3, [r3, #1]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d128      	bne.n	8009d82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	791b      	ldrb	r3, [r3, #4]
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d003      	beq.n	8009d60 <USB_EPClearStall+0x4c>
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	791b      	ldrb	r3, [r3, #4]
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d138      	bne.n	8009dd2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	015a      	lsls	r2, r3, #5
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	0151      	lsls	r1, r2, #5
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	440a      	add	r2, r1
 8009d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	e027      	b.n	8009dd2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	015a      	lsls	r2, r3, #5
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4413      	add	r3, r2
 8009d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	0151      	lsls	r1, r2, #5
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	440a      	add	r2, r1
 8009d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009da0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	791b      	ldrb	r3, [r3, #4]
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d003      	beq.n	8009db2 <USB_EPClearStall+0x9e>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	791b      	ldrb	r3, [r3, #4]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d10f      	bne.n	8009dd2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	0151      	lsls	r1, r2, #5
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dd0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dfe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	011b      	lsls	r3, r3, #4
 8009e10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009e14:	68f9      	ldr	r1, [r7, #12]
 8009e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e46:	f023 0303 	bic.w	r3, r3, #3
 8009e4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e5a:	f023 0302 	bic.w	r3, r3, #2
 8009e5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b085      	sub	sp, #20
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e88:	f023 0303 	bic.w	r3, r3, #3
 8009e8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e9c:	f043 0302 	orr.w	r3, r3, #2
 8009ea0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b085      	sub	sp, #20
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	0c1b      	lsrs	r3, r3, #16
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f26:	69db      	ldr	r3, [r3, #28]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	b29b      	uxth	r3, r3
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b085      	sub	sp, #20
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	460b      	mov	r3, r1
 8009f48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f4e:	78fb      	ldrb	r3, [r7, #3]
 8009f50:	015a      	lsls	r2, r3, #5
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4413      	add	r3, r2
 8009f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b087      	sub	sp, #28
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	460b      	mov	r3, r1
 8009f84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	f003 030f 	and.w	r3, r3, #15
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009faa:	01db      	lsls	r3, r3, #7
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fc8:	68bb      	ldr	r3, [r7, #8]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	371c      	adds	r7, #28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	f003 0301 	and.w	r3, r3, #1
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b085      	sub	sp, #20
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a00c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a010:	f023 0307 	bic.w	r3, r3, #7
 800a014:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a028:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a038:	b480      	push	{r7}
 800a03a:	b087      	sub	sp, #28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	460b      	mov	r3, r1
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	333c      	adds	r3, #60	; 0x3c
 800a04e:	3304      	adds	r3, #4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	4a26      	ldr	r2, [pc, #152]	; (800a0f0 <USB_EP0_OutStart+0xb8>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d90a      	bls.n	800a072 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a06c:	d101      	bne.n	800a072 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	e037      	b.n	800a0e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a078:	461a      	mov	r2, r3
 800a07a:	2300      	movs	r3, #0
 800a07c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a08c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a090:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0a0:	f043 0318 	orr.w	r3, r3, #24
 800a0a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a0b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a0ba:	7afb      	ldrb	r3, [r7, #11]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d10f      	bne.n	800a0e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a0de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	371c      	adds	r7, #28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	4f54300a 	.word	0x4f54300a

0800a0f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3301      	adds	r3, #1
 800a104:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	4a13      	ldr	r2, [pc, #76]	; (800a158 <USB_CoreReset+0x64>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d901      	bls.n	800a112 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e01b      	b.n	800a14a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	daf2      	bge.n	800a100 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	f043 0201 	orr.w	r2, r3, #1
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3301      	adds	r3, #1
 800a12e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	4a09      	ldr	r2, [pc, #36]	; (800a158 <USB_CoreReset+0x64>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d901      	bls.n	800a13c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a138:	2303      	movs	r3, #3
 800a13a:	e006      	b.n	800a14a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b01      	cmp	r3, #1
 800a146:	d0f0      	beq.n	800a12a <USB_CoreReset+0x36>

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	00030d40 	.word	0x00030d40

0800a15c <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 800a164:	4a18      	ldr	r2, [pc, #96]	; (800a1c8 <si5351_Init+0x6c>)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 800a16a:	21ff      	movs	r1, #255	; 0xff
 800a16c:	2003      	movs	r0, #3
 800a16e:	f000 fa0d 	bl	800a58c <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 800a172:	2180      	movs	r1, #128	; 0x80
 800a174:	2010      	movs	r0, #16
 800a176:	f000 fa09 	bl	800a58c <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 800a17a:	2180      	movs	r1, #128	; 0x80
 800a17c:	2011      	movs	r0, #17
 800a17e:	f000 fa05 	bl	800a58c <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 800a182:	2180      	movs	r1, #128	; 0x80
 800a184:	2012      	movs	r0, #18
 800a186:	f000 fa01 	bl	800a58c <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 800a18a:	2180      	movs	r1, #128	; 0x80
 800a18c:	2013      	movs	r0, #19
 800a18e:	f000 f9fd 	bl	800a58c <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 800a192:	2180      	movs	r1, #128	; 0x80
 800a194:	2014      	movs	r0, #20
 800a196:	f000 f9f9 	bl	800a58c <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 800a19a:	2180      	movs	r1, #128	; 0x80
 800a19c:	2015      	movs	r0, #21
 800a19e:	f000 f9f5 	bl	800a58c <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 800a1a2:	2180      	movs	r1, #128	; 0x80
 800a1a4:	2016      	movs	r0, #22
 800a1a6:	f000 f9f1 	bl	800a58c <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 800a1aa:	2180      	movs	r1, #128	; 0x80
 800a1ac:	2017      	movs	r0, #23
 800a1ae:	f000 f9ed 	bl	800a58c <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 800a1b2:	23c0      	movs	r3, #192	; 0xc0
 800a1b4:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	20b7      	movs	r0, #183	; 0xb7
 800a1bc:	f000 f9e6 	bl	800a58c <si5351_write>
}
 800a1c0:	bf00      	nop
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	200003d8 	.word	0x200003d8

0800a1cc <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08c      	sub	sp, #48	; 0x30
 800a1d0:	af02      	add	r7, sp, #8
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	6039      	str	r1, [r7, #0]
 800a1d6:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	01da      	lsls	r2, r3, #7
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	01d9      	lsls	r1, r3, #7
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	fb91 f3f3 	sdiv	r3, r1, r3
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a1fe:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	01db      	lsls	r3, r3, #7
 800a204:	69fa      	ldr	r2, [r7, #28]
 800a206:	fb93 f2f2 	sdiv	r2, r3, r2
 800a20a:	69f9      	ldr	r1, [r7, #28]
 800a20c:	fb01 f202 	mul.w	r2, r1, r2
 800a210:	1a9b      	subs	r3, r3, r2
 800a212:	617b      	str	r3, [r7, #20]
    P3 = denom;
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <si5351_SetupPLL+0x56>
 800a21e:	231a      	movs	r3, #26
 800a220:	e000      	b.n	800a224 <si5351_SetupPLL+0x58>
 800a222:	2322      	movs	r3, #34	; 0x22
 800a224:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 800a226:	7bf8      	ldrb	r0, [r7, #15]
 800a228:	2300      	movs	r3, #0
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	2300      	movs	r3, #0
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	69b9      	ldr	r1, [r7, #24]
 800a236:	f000 f9d1 	bl	800a5dc <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 800a23a:	21a0      	movs	r1, #160	; 0xa0
 800a23c:	20b1      	movs	r0, #177	; 0xb1
 800a23e:	f000 f9a5 	bl	800a58c <si5351_write>
}
 800a242:	bf00      	nop
 800a244:	3728      	adds	r7, #40	; 0x28
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b08c      	sub	sp, #48	; 0x30
 800a24e:	af02      	add	r7, sp, #8
 800a250:	603b      	str	r3, [r7, #0]
 800a252:	4603      	mov	r3, r0
 800a254:	71fb      	strb	r3, [r7, #7]
 800a256:	460b      	mov	r3, r1
 800a258:	71bb      	strb	r3, [r7, #6]
 800a25a:	4613      	mov	r3, r2
 800a25c:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 800a276:	79fb      	ldrb	r3, [r7, #7]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d901      	bls.n	800a280 <si5351_SetupOutput+0x36>
        return 1;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e08d      	b.n	800a39c <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <si5351_SetupOutput+0x54>
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	2b07      	cmp	r3, #7
 800a28c:	dd05      	ble.n	800a29a <si5351_SetupOutput+0x50>
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	2b08      	cmp	r3, #8
 800a292:	d104      	bne.n	800a29e <si5351_SetupOutput+0x54>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 800a29a:	2302      	movs	r3, #2
 800a29c:	e07e      	b.n	800a39c <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d109      	bne.n	800a2b8 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	623b      	str	r3, [r7, #32]
        P2 = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2b6:	e016      	b.n	800a2e6 <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	01da      	lsls	r2, r3, #7
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	01d9      	lsls	r1, r3, #7
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	fb91 f3f3 	sdiv	r3, r1, r3
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a2cc:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	01db      	lsls	r3, r3, #7
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	fb93 f2f2 	sdiv	r2, r3, r2
 800a2d8:	68b9      	ldr	r1, [r7, #8]
 800a2da:	fb01 f202 	mul.w	r2, r1, r2
 800a2de:	1a9b      	subs	r3, r3, r2
 800a2e0:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	757b      	strb	r3, [r7, #21]
    switch (output) {
 800a2f2:	79fb      	ldrb	r3, [r7, #7]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d014      	beq.n	800a322 <si5351_SetupOutput+0xd8>
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	dc19      	bgt.n	800a330 <si5351_SetupOutput+0xe6>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <si5351_SetupOutput+0xbc>
 800a300:	2b01      	cmp	r3, #1
 800a302:	d007      	beq.n	800a314 <si5351_SetupOutput+0xca>
 800a304:	e014      	b.n	800a330 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 800a306:	232a      	movs	r3, #42	; 0x2a
 800a308:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 800a30a:	23a5      	movs	r3, #165	; 0xa5
 800a30c:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800a30e:	2310      	movs	r3, #16
 800a310:	757b      	strb	r3, [r7, #21]
        break;
 800a312:	e00d      	b.n	800a330 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800a314:	2332      	movs	r3, #50	; 0x32
 800a316:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 800a318:	23a6      	movs	r3, #166	; 0xa6
 800a31a:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 800a31c:	2311      	movs	r3, #17
 800a31e:	757b      	strb	r3, [r7, #21]
        break;
 800a320:	e006      	b.n	800a330 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800a322:	233a      	movs	r3, #58	; 0x3a
 800a324:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 800a326:	23a7      	movs	r3, #167	; 0xa7
 800a328:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 800a32a:	2312      	movs	r3, #18
 800a32c:	757b      	strb	r3, [r7, #21]
        break;
 800a32e:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 800a330:	797b      	ldrb	r3, [r7, #5]
 800a332:	f043 030c 	orr.w	r3, r3, #12
 800a336:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 800a338:	79bb      	ldrb	r3, [r7, #6]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d103      	bne.n	800a346 <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 800a33e:	7d3b      	ldrb	r3, [r7, #20]
 800a340:	f043 0320 	orr.w	r3, r3, #32
 800a344:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d009      	beq.n	800a362 <si5351_SetupOutput+0x118>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <si5351_SetupOutput+0x110>
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	2b04      	cmp	r3, #4
 800a358:	d103      	bne.n	800a362 <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 800a35a:	7d3b      	ldrb	r3, [r7, #20]
 800a35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a360:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800a362:	7d3a      	ldrb	r2, [r7, #20]
 800a364:	7d7b      	ldrb	r3, [r7, #21]
 800a366:	4611      	mov	r1, r2
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 f90f 	bl	800a58c <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	7c1b      	ldrb	r3, [r3, #16]
 800a372:	7df8      	ldrb	r0, [r7, #23]
 800a374:	9301      	str	r3, [sp, #4]
 800a376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	6a39      	ldr	r1, [r7, #32]
 800a382:	f000 f92b 	bl	800a5dc <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800a386:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a38a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	7dbb      	ldrb	r3, [r7, #22]
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f000 f8f9 	bl	800a58c <si5351_write>

    return 0;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3728      	adds	r7, #40	; 0x28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 800a3a4:	b480      	push	{r7}
 800a3a6:	b08f      	sub	sp, #60	; 0x3c
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a3b6:	da03      	bge.n	800a3c0 <si5351_Calc+0x1c>
 800a3b8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	e005      	b.n	800a3cc <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4a4f      	ldr	r2, [pc, #316]	; (800a500 <si5351_Calc+0x15c>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	dd01      	ble.n	800a3cc <si5351_Calc+0x28>
 800a3c8:	4b4d      	ldr	r3, [pc, #308]	; (800a500 <si5351_Calc+0x15c>)
 800a3ca:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	4a4b      	ldr	r2, [pc, #300]	; (800a504 <si5351_Calc+0x160>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	dc06      	bgt.n	800a3e8 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	019b      	lsls	r3, r3, #6
 800a3de:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2206      	movs	r2, #6
 800a3e4:	741a      	strb	r2, [r3, #16]
 800a3e6:	e002      	b.n	800a3ee <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	4a45      	ldr	r2, [pc, #276]	; (800a508 <si5351_Calc+0x164>)
 800a3f2:	fb82 1203 	smull	r1, r2, r2, r3
 800a3f6:	1492      	asrs	r2, r2, #18
 800a3f8:	17db      	asrs	r3, r3, #31
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	4a43      	ldr	r2, [pc, #268]	; (800a50c <si5351_Calc+0x168>)
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	fb02 f303 	mul.w	r3, r2, r3
 800a404:	4a42      	ldr	r2, [pc, #264]	; (800a510 <si5351_Calc+0x16c>)
 800a406:	fb82 1203 	smull	r1, r2, r2, r3
 800a40a:	1152      	asrs	r2, r2, #5
 800a40c:	17db      	asrs	r3, r3, #31
 800a40e:	1a9b      	subs	r3, r3, r2
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 800a416:	4b3f      	ldr	r3, [pc, #252]	; (800a514 <si5351_Calc+0x170>)
 800a418:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	4a3e      	ldr	r2, [pc, #248]	; (800a518 <si5351_Calc+0x174>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	dc22      	bgt.n	800a468 <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 800a422:	2324      	movs	r3, #36	; 0x24
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 800a42a:	2301      	movs	r3, #1
 800a42c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 800a42e:	4b3b      	ldr	r3, [pc, #236]	; (800a51c <si5351_Calc+0x178>)
 800a430:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	fb92 f3f3 	sdiv	r3, r2, r3
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	151b      	asrs	r3, r3, #20
 800a440:	3301      	adds	r3, #1
 800a442:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	fb93 f2f2 	sdiv	r2, r3, r2
 800a44c:	68f9      	ldr	r1, [r7, #12]
 800a44e:	fb01 f202 	mul.w	r2, r1, r2
 800a452:	1a9a      	subs	r2, r3, r2
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	fb92 f3f3 	sdiv	r3, r2, r3
 800a45a:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	fb92 f3f3 	sdiv	r3, r2, r3
 800a464:	623b      	str	r3, [r7, #32]
 800a466:	e032      	b.n	800a4ce <si5351_Calc+0x12a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4a2d      	ldr	r2, [pc, #180]	; (800a520 <si5351_Calc+0x17c>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	dd02      	ble.n	800a476 <si5351_Calc+0xd2>
            x = 4;
 800a470:	2304      	movs	r3, #4
 800a472:	62bb      	str	r3, [r7, #40]	; 0x28
 800a474:	e008      	b.n	800a488 <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4a2a      	ldr	r2, [pc, #168]	; (800a524 <si5351_Calc+0x180>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	dd02      	ble.n	800a484 <si5351_Calc+0xe0>
            x = 6;
 800a47e:	2306      	movs	r3, #6
 800a480:	62bb      	str	r3, [r7, #40]	; 0x28
 800a482:	e001      	b.n	800a488 <si5351_Calc+0xe4>
        } else {
            x = 8;
 800a484:	2308      	movs	r3, #8
 800a486:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 800a48c:	2301      	movs	r3, #1
 800a48e:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 800a490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	fb02 f303 	mul.w	r3, r2, r3
 800a498:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 800a49a:	69ba      	ldr	r2, [r7, #24]
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a4a2:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	151b      	asrs	r3, r3, #20
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	69fa      	ldr	r2, [r7, #28]
 800a4b0:	fb93 f2f2 	sdiv	r2, r3, r2
 800a4b4:	69f9      	ldr	r1, [r7, #28]
 800a4b6:	fb01 f202 	mul.w	r2, r1, r2
 800a4ba:	1a9a      	subs	r2, r3, r2
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	fb92 f3f3 	sdiv	r3, r2, r3
 800a4c2:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 800a4c4:	69fa      	ldr	r2, [r7, #28]
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	fb92 f3f3 	sdiv	r3, r2, r3
 800a4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4d2:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4d8:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4de:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4e4:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ea:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a3a      	ldr	r2, [r7, #32]
 800a4f0:	60da      	str	r2, [r3, #12]
}
 800a4f2:	bf00      	nop
 800a4f4:	373c      	adds	r7, #60	; 0x3c
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	09896800 	.word	0x09896800
 800a504:	000f423f 	.word	0x000f423f
 800a508:	431bde83 	.word	0x431bde83
 800a50c:	200003d8 	.word	0x200003d8
 800a510:	51eb851f 	.word	0x51eb851f
 800a514:	017d7840 	.word	0x017d7840
 800a518:	04d3f63f 	.word	0x04d3f63f
 800a51c:	35a4e900 	.word	0x35a4e900
 800a520:	08f0d17f 	.word	0x08f0d17f
 800a524:	05f5e0ff 	.word	0x05f5e0ff

0800a528 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08c      	sub	sp, #48	; 0x30
 800a52c:	af02      	add	r7, sp, #8
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 800a534:	f107 0208 	add.w	r2, r7, #8
 800a538:	f107 031c 	add.w	r3, r7, #28
 800a53c:	4619      	mov	r1, r3
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7ff ff30 	bl	800a3a4 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 800a544:	f107 031c 	add.w	r3, r7, #28
 800a548:	4619      	mov	r1, r3
 800a54a:	2000      	movs	r0, #0
 800a54c:	f7ff fe3e 	bl	800a1cc <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 800a550:	f107 0308 	add.w	r3, r7, #8
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	2100      	movs	r1, #0
 800a558:	9100      	str	r1, [sp, #0]
 800a55a:	2100      	movs	r1, #0
 800a55c:	2000      	movs	r0, #0
 800a55e:	f7ff fe74 	bl	800a24a <si5351_SetupOutput>
}
 800a562:	bf00      	nop
 800a564:	3728      	adds	r7, #40	; 0x28
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	4603      	mov	r3, r0
 800a572:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800a574:	79fb      	ldrb	r3, [r7, #7]
 800a576:	43db      	mvns	r3, r3
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	4619      	mov	r1, r3
 800a57c:	2003      	movs	r0, #3
 800a57e:	f000 f805 	bl	800a58c <si5351_write>
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
	...

0800a58c <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af04      	add	r7, sp, #16
 800a592:	4603      	mov	r3, r0
 800a594:	460a      	mov	r2, r1
 800a596:	71fb      	strb	r3, [r7, #7]
 800a598:	4613      	mov	r3, r2
 800a59a:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 800a59c:	bf00      	nop
 800a59e:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a2:	2203      	movs	r2, #3
 800a5a4:	21c0      	movs	r1, #192	; 0xc0
 800a5a6:	480c      	ldr	r0, [pc, #48]	; (800a5d8 <si5351_write+0x4c>)
 800a5a8:	f7f8 fc36 	bl	8002e18 <HAL_I2C_IsDeviceReady>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1f5      	bne.n	800a59e <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ba:	9302      	str	r3, [sp, #8]
 800a5bc:	2301      	movs	r3, #1
 800a5be:	9301      	str	r3, [sp, #4]
 800a5c0:	1dbb      	adds	r3, r7, #6
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	21c0      	movs	r1, #192	; 0xc0
 800a5c8:	4803      	ldr	r0, [pc, #12]	; (800a5d8 <si5351_write+0x4c>)
 800a5ca:	f7f8 fb1f 	bl	8002c0c <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800a5ce:	bf00      	nop
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20000218 	.word	0x20000218

0800a5dc <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60b9      	str	r1, [r7, #8]
 800a5e4:	607a      	str	r2, [r7, #4]
 800a5e6:	603b      	str	r3, [r7, #0]
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	121b      	asrs	r3, r3, #8
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff ffc8 	bl	800a58c <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	3301      	adds	r3, #1
 800a600:	b2db      	uxtb	r3, r3
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	b2d2      	uxtb	r2, r2
 800a606:	4611      	mov	r1, r2
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff ffbf 	bl	800a58c <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	3302      	adds	r3, #2
 800a612:	b2d8      	uxtb	r0, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	141b      	asrs	r3, r3, #16
 800a618:	b25b      	sxtb	r3, r3
 800a61a:	f003 0303 	and.w	r3, r3, #3
 800a61e:	b25a      	sxtb	r2, r3
 800a620:	7e3b      	ldrb	r3, [r7, #24]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	b25b      	sxtb	r3, r3
 800a626:	f003 030c 	and.w	r3, r3, #12
 800a62a:	b25b      	sxtb	r3, r3
 800a62c:	4313      	orrs	r3, r2
 800a62e:	b25a      	sxtb	r2, r3
 800a630:	7f3b      	ldrb	r3, [r7, #28]
 800a632:	011b      	lsls	r3, r3, #4
 800a634:	b25b      	sxtb	r3, r3
 800a636:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a63a:	b25b      	sxtb	r3, r3
 800a63c:	4313      	orrs	r3, r2
 800a63e:	b25b      	sxtb	r3, r3
 800a640:	b2db      	uxtb	r3, r3
 800a642:	4619      	mov	r1, r3
 800a644:	f7ff ffa2 	bl	800a58c <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	3303      	adds	r3, #3
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	121b      	asrs	r3, r3, #8
 800a652:	b2db      	uxtb	r3, r3
 800a654:	4619      	mov	r1, r3
 800a656:	4610      	mov	r0, r2
 800a658:	f7ff ff98 	bl	800a58c <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
 800a65e:	3304      	adds	r3, #4
 800a660:	b2db      	uxtb	r3, r3
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	b2d2      	uxtb	r2, r2
 800a666:	4611      	mov	r1, r2
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff ff8f 	bl	800a58c <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	3305      	adds	r3, #5
 800a672:	b2d8      	uxtb	r0, r3
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	131b      	asrs	r3, r3, #12
 800a678:	b25b      	sxtb	r3, r3
 800a67a:	f023 030f 	bic.w	r3, r3, #15
 800a67e:	b25a      	sxtb	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	141b      	asrs	r3, r3, #16
 800a684:	b25b      	sxtb	r3, r3
 800a686:	f003 030f 	and.w	r3, r3, #15
 800a68a:	b25b      	sxtb	r3, r3
 800a68c:	4313      	orrs	r3, r2
 800a68e:	b25b      	sxtb	r3, r3
 800a690:	b2db      	uxtb	r3, r3
 800a692:	4619      	mov	r1, r3
 800a694:	f7ff ff7a 	bl	800a58c <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	3306      	adds	r3, #6
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	121b      	asrs	r3, r3, #8
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	f7ff ff70 	bl	800a58c <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	3307      	adds	r3, #7
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	b2d2      	uxtb	r2, r2
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7ff ff67 	bl	800a58c <si5351_write>
}
 800a6be:	bf00      	nop
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
	...

0800a6c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a6d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a6d8:	f005 fa8c 	bl	800fbf4 <USBD_static_malloc>
 800a6dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d109      	bne.n	800a6f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	32b0      	adds	r2, #176	; 0xb0
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	e0d4      	b.n	800a8a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a6f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f005 fbfe 	bl	800ff00 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	32b0      	adds	r2, #176	; 0xb0
 800a70e:	68f9      	ldr	r1, [r7, #12]
 800a710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	32b0      	adds	r2, #176	; 0xb0
 800a71e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	7c1b      	ldrb	r3, [r3, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d138      	bne.n	800a7a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a730:	4b5e      	ldr	r3, [pc, #376]	; (800a8ac <USBD_CDC_Init+0x1e4>)
 800a732:	7819      	ldrb	r1, [r3, #0]
 800a734:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a738:	2202      	movs	r2, #2
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f005 f937 	bl	800f9ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a740:	4b5a      	ldr	r3, [pc, #360]	; (800a8ac <USBD_CDC_Init+0x1e4>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	f003 020f 	and.w	r2, r3, #15
 800a748:	6879      	ldr	r1, [r7, #4]
 800a74a:	4613      	mov	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	440b      	add	r3, r1
 800a754:	3324      	adds	r3, #36	; 0x24
 800a756:	2201      	movs	r2, #1
 800a758:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a75a:	4b55      	ldr	r3, [pc, #340]	; (800a8b0 <USBD_CDC_Init+0x1e8>)
 800a75c:	7819      	ldrb	r1, [r3, #0]
 800a75e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a762:	2202      	movs	r2, #2
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f005 f922 	bl	800f9ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a76a:	4b51      	ldr	r3, [pc, #324]	; (800a8b0 <USBD_CDC_Init+0x1e8>)
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	f003 020f 	and.w	r2, r3, #15
 800a772:	6879      	ldr	r1, [r7, #4]
 800a774:	4613      	mov	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	440b      	add	r3, r1
 800a77e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a782:	2201      	movs	r2, #1
 800a784:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a786:	4b4b      	ldr	r3, [pc, #300]	; (800a8b4 <USBD_CDC_Init+0x1ec>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	f003 020f 	and.w	r2, r3, #15
 800a78e:	6879      	ldr	r1, [r7, #4]
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	440b      	add	r3, r1
 800a79a:	3326      	adds	r3, #38	; 0x26
 800a79c:	2210      	movs	r2, #16
 800a79e:	801a      	strh	r2, [r3, #0]
 800a7a0:	e035      	b.n	800a80e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a7a2:	4b42      	ldr	r3, [pc, #264]	; (800a8ac <USBD_CDC_Init+0x1e4>)
 800a7a4:	7819      	ldrb	r1, [r3, #0]
 800a7a6:	2340      	movs	r3, #64	; 0x40
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f005 f8ff 	bl	800f9ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a7b0:	4b3e      	ldr	r3, [pc, #248]	; (800a8ac <USBD_CDC_Init+0x1e4>)
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	f003 020f 	and.w	r2, r3, #15
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	440b      	add	r3, r1
 800a7c4:	3324      	adds	r3, #36	; 0x24
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a7ca:	4b39      	ldr	r3, [pc, #228]	; (800a8b0 <USBD_CDC_Init+0x1e8>)
 800a7cc:	7819      	ldrb	r1, [r3, #0]
 800a7ce:	2340      	movs	r3, #64	; 0x40
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f005 f8eb 	bl	800f9ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a7d8:	4b35      	ldr	r3, [pc, #212]	; (800a8b0 <USBD_CDC_Init+0x1e8>)
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	f003 020f 	and.w	r2, r3, #15
 800a7e0:	6879      	ldr	r1, [r7, #4]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a7f4:	4b2f      	ldr	r3, [pc, #188]	; (800a8b4 <USBD_CDC_Init+0x1ec>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	f003 020f 	and.w	r2, r3, #15
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	4613      	mov	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	440b      	add	r3, r1
 800a808:	3326      	adds	r3, #38	; 0x26
 800a80a:	2210      	movs	r2, #16
 800a80c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a80e:	4b29      	ldr	r3, [pc, #164]	; (800a8b4 <USBD_CDC_Init+0x1ec>)
 800a810:	7819      	ldrb	r1, [r3, #0]
 800a812:	2308      	movs	r3, #8
 800a814:	2203      	movs	r2, #3
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f005 f8c9 	bl	800f9ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a81c:	4b25      	ldr	r3, [pc, #148]	; (800a8b4 <USBD_CDC_Init+0x1ec>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	f003 020f 	and.w	r2, r3, #15
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	4613      	mov	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	440b      	add	r3, r1
 800a830:	3324      	adds	r3, #36	; 0x24
 800a832:	2201      	movs	r2, #1
 800a834:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	33b0      	adds	r3, #176	; 0xb0
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a86c:	2302      	movs	r3, #2
 800a86e:	e018      	b.n	800a8a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	7c1b      	ldrb	r3, [r3, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10a      	bne.n	800a88e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a878:	4b0d      	ldr	r3, [pc, #52]	; (800a8b0 <USBD_CDC_Init+0x1e8>)
 800a87a:	7819      	ldrb	r1, [r3, #0]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a882:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f005 f980 	bl	800fb8c <USBD_LL_PrepareReceive>
 800a88c:	e008      	b.n	800a8a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a88e:	4b08      	ldr	r3, [pc, #32]	; (800a8b0 <USBD_CDC_Init+0x1e8>)
 800a890:	7819      	ldrb	r1, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a898:	2340      	movs	r3, #64	; 0x40
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f005 f976 	bl	800fb8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	200000ff 	.word	0x200000ff
 800a8b0:	20000100 	.word	0x20000100
 800a8b4:	20000101 	.word	0x20000101

0800a8b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a8c4:	4b3a      	ldr	r3, [pc, #232]	; (800a9b0 <USBD_CDC_DeInit+0xf8>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f005 f895 	bl	800f9fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a8d0:	4b37      	ldr	r3, [pc, #220]	; (800a9b0 <USBD_CDC_DeInit+0xf8>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	f003 020f 	and.w	r2, r3, #15
 800a8d8:	6879      	ldr	r1, [r7, #4]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	440b      	add	r3, r1
 800a8e4:	3324      	adds	r3, #36	; 0x24
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a8ea:	4b32      	ldr	r3, [pc, #200]	; (800a9b4 <USBD_CDC_DeInit+0xfc>)
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f005 f882 	bl	800f9fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a8f6:	4b2f      	ldr	r3, [pc, #188]	; (800a9b4 <USBD_CDC_DeInit+0xfc>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	f003 020f 	and.w	r2, r3, #15
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	4613      	mov	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	440b      	add	r3, r1
 800a90a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a90e:	2200      	movs	r2, #0
 800a910:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a912:	4b29      	ldr	r3, [pc, #164]	; (800a9b8 <USBD_CDC_DeInit+0x100>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f005 f86e 	bl	800f9fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a91e:	4b26      	ldr	r3, [pc, #152]	; (800a9b8 <USBD_CDC_DeInit+0x100>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	f003 020f 	and.w	r2, r3, #15
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	3324      	adds	r3, #36	; 0x24
 800a934:	2200      	movs	r2, #0
 800a936:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a938:	4b1f      	ldr	r3, [pc, #124]	; (800a9b8 <USBD_CDC_DeInit+0x100>)
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	f003 020f 	and.w	r2, r3, #15
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	4613      	mov	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	440b      	add	r3, r1
 800a94c:	3326      	adds	r3, #38	; 0x26
 800a94e:	2200      	movs	r2, #0
 800a950:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	32b0      	adds	r2, #176	; 0xb0
 800a95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01f      	beq.n	800a9a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	33b0      	adds	r3, #176	; 0xb0
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	32b0      	adds	r2, #176	; 0xb0
 800a982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a986:	4618      	mov	r0, r3
 800a988:	f005 f942 	bl	800fc10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	32b0      	adds	r2, #176	; 0xb0
 800a996:	2100      	movs	r1, #0
 800a998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	200000ff 	.word	0x200000ff
 800a9b4:	20000100 	.word	0x20000100
 800a9b8:	20000101 	.word	0x20000101

0800a9bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	32b0      	adds	r2, #176	; 0xb0
 800a9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e0bf      	b.n	800ab6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d050      	beq.n	800aa9a <USBD_CDC_Setup+0xde>
 800a9f8:	2b20      	cmp	r3, #32
 800a9fa:	f040 80af 	bne.w	800ab5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	88db      	ldrh	r3, [r3, #6]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d03a      	beq.n	800aa7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	b25b      	sxtb	r3, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	da1b      	bge.n	800aa48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	33b0      	adds	r3, #176	; 0xb0
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aa26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	88d2      	ldrh	r2, [r2, #6]
 800aa2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	88db      	ldrh	r3, [r3, #6]
 800aa32:	2b07      	cmp	r3, #7
 800aa34:	bf28      	it	cs
 800aa36:	2307      	movcs	r3, #7
 800aa38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	89fa      	ldrh	r2, [r7, #14]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 fda5 	bl	800c590 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aa46:	e090      	b.n	800ab6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	785a      	ldrb	r2, [r3, #1]
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	88db      	ldrh	r3, [r3, #6]
 800aa56:	2b3f      	cmp	r3, #63	; 0x3f
 800aa58:	d803      	bhi.n	800aa62 <USBD_CDC_Setup+0xa6>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	88db      	ldrh	r3, [r3, #6]
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	e000      	b.n	800aa64 <USBD_CDC_Setup+0xa8>
 800aa62:	2240      	movs	r2, #64	; 0x40
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aa6a:	6939      	ldr	r1, [r7, #16]
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aa72:	461a      	mov	r2, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f001 fdb7 	bl	800c5e8 <USBD_CtlPrepareRx>
      break;
 800aa7a:	e076      	b.n	800ab6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	33b0      	adds	r3, #176	; 0xb0
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	7850      	ldrb	r0, [r2, #1]
 800aa92:	2200      	movs	r2, #0
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	4798      	blx	r3
      break;
 800aa98:	e067      	b.n	800ab6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	785b      	ldrb	r3, [r3, #1]
 800aa9e:	2b0b      	cmp	r3, #11
 800aaa0:	d851      	bhi.n	800ab46 <USBD_CDC_Setup+0x18a>
 800aaa2:	a201      	add	r2, pc, #4	; (adr r2, 800aaa8 <USBD_CDC_Setup+0xec>)
 800aaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa8:	0800aad9 	.word	0x0800aad9
 800aaac:	0800ab55 	.word	0x0800ab55
 800aab0:	0800ab47 	.word	0x0800ab47
 800aab4:	0800ab47 	.word	0x0800ab47
 800aab8:	0800ab47 	.word	0x0800ab47
 800aabc:	0800ab47 	.word	0x0800ab47
 800aac0:	0800ab47 	.word	0x0800ab47
 800aac4:	0800ab47 	.word	0x0800ab47
 800aac8:	0800ab47 	.word	0x0800ab47
 800aacc:	0800ab47 	.word	0x0800ab47
 800aad0:	0800ab03 	.word	0x0800ab03
 800aad4:	0800ab2d 	.word	0x0800ab2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d107      	bne.n	800aaf4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aae4:	f107 030a 	add.w	r3, r7, #10
 800aae8:	2202      	movs	r2, #2
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 fd4f 	bl	800c590 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aaf2:	e032      	b.n	800ab5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f001 fcd9 	bl	800c4ae <USBD_CtlError>
            ret = USBD_FAIL;
 800aafc:	2303      	movs	r3, #3
 800aafe:	75fb      	strb	r3, [r7, #23]
          break;
 800ab00:	e02b      	b.n	800ab5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	d107      	bne.n	800ab1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab0e:	f107 030d 	add.w	r3, r7, #13
 800ab12:	2201      	movs	r2, #1
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f001 fd3a 	bl	800c590 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab1c:	e01d      	b.n	800ab5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f001 fcc4 	bl	800c4ae <USBD_CtlError>
            ret = USBD_FAIL;
 800ab26:	2303      	movs	r3, #3
 800ab28:	75fb      	strb	r3, [r7, #23]
          break;
 800ab2a:	e016      	b.n	800ab5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d00f      	beq.n	800ab58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f001 fcb7 	bl	800c4ae <USBD_CtlError>
            ret = USBD_FAIL;
 800ab40:	2303      	movs	r3, #3
 800ab42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab44:	e008      	b.n	800ab58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab46:	6839      	ldr	r1, [r7, #0]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f001 fcb0 	bl	800c4ae <USBD_CtlError>
          ret = USBD_FAIL;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	75fb      	strb	r3, [r7, #23]
          break;
 800ab52:	e002      	b.n	800ab5a <USBD_CDC_Setup+0x19e>
          break;
 800ab54:	bf00      	nop
 800ab56:	e008      	b.n	800ab6a <USBD_CDC_Setup+0x1ae>
          break;
 800ab58:	bf00      	nop
      }
      break;
 800ab5a:	e006      	b.n	800ab6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f001 fca5 	bl	800c4ae <USBD_CtlError>
      ret = USBD_FAIL;
 800ab64:	2303      	movs	r3, #3
 800ab66:	75fb      	strb	r3, [r7, #23]
      break;
 800ab68:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	32b0      	adds	r2, #176	; 0xb0
 800ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e065      	b.n	800ac6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	32b0      	adds	r2, #176	; 0xb0
 800aba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800abae:	78fb      	ldrb	r3, [r7, #3]
 800abb0:	f003 020f 	and.w	r2, r3, #15
 800abb4:	6879      	ldr	r1, [r7, #4]
 800abb6:	4613      	mov	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	440b      	add	r3, r1
 800abc0:	3318      	adds	r3, #24
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d02f      	beq.n	800ac28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	f003 020f 	and.w	r2, r3, #15
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	4613      	mov	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	440b      	add	r3, r1
 800abda:	3318      	adds	r3, #24
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	78fb      	ldrb	r3, [r7, #3]
 800abe0:	f003 010f 	and.w	r1, r3, #15
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	460b      	mov	r3, r1
 800abe8:	00db      	lsls	r3, r3, #3
 800abea:	440b      	add	r3, r1
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4403      	add	r3, r0
 800abf0:	3348      	adds	r3, #72	; 0x48
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	fbb2 f1f3 	udiv	r1, r2, r3
 800abf8:	fb01 f303 	mul.w	r3, r1, r3
 800abfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d112      	bne.n	800ac28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	f003 020f 	and.w	r2, r3, #15
 800ac08:	6879      	ldr	r1, [r7, #4]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	440b      	add	r3, r1
 800ac14:	3318      	adds	r3, #24
 800ac16:	2200      	movs	r2, #0
 800ac18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac1a:	78f9      	ldrb	r1, [r7, #3]
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	2200      	movs	r2, #0
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f004 ff92 	bl	800fb4a <USBD_LL_Transmit>
 800ac26:	e01f      	b.n	800ac68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	33b0      	adds	r3, #176	; 0xb0
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d010      	beq.n	800ac68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	33b0      	adds	r3, #176	; 0xb0
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ac64:	78fa      	ldrb	r2, [r7, #3]
 800ac66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	32b0      	adds	r2, #176	; 0xb0
 800ac88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	32b0      	adds	r2, #176	; 0xb0
 800ac98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aca0:	2303      	movs	r3, #3
 800aca2:	e01a      	b.n	800acda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f004 ff90 	bl	800fbce <USBD_LL_GetRxDataSize>
 800acae:	4602      	mov	r2, r0
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	33b0      	adds	r3, #176	; 0xb0
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800acd4:	4611      	mov	r1, r2
 800acd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	32b0      	adds	r2, #176	; 0xb0
 800acf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d101      	bne.n	800ad04 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e025      	b.n	800ad50 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	33b0      	adds	r3, #176	; 0xb0
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d01a      	beq.n	800ad4e <USBD_CDC_EP0_RxReady+0x6c>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ad1e:	2bff      	cmp	r3, #255	; 0xff
 800ad20:	d015      	beq.n	800ad4e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	33b0      	adds	r3, #176	; 0xb0
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ad3a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad42:	b292      	uxth	r2, r2
 800ad44:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	22ff      	movs	r2, #255	; 0xff
 800ad4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad60:	2182      	movs	r1, #130	; 0x82
 800ad62:	4818      	ldr	r0, [pc, #96]	; (800adc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad64:	f000 fd6b 	bl	800b83e <USBD_GetEpDesc>
 800ad68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	4815      	ldr	r0, [pc, #84]	; (800adc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad6e:	f000 fd66 	bl	800b83e <USBD_GetEpDesc>
 800ad72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad74:	2181      	movs	r1, #129	; 0x81
 800ad76:	4813      	ldr	r0, [pc, #76]	; (800adc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad78:	f000 fd61 	bl	800b83e <USBD_GetEpDesc>
 800ad7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2210      	movs	r2, #16
 800ad88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d006      	beq.n	800ad9e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad98:	711a      	strb	r2, [r3, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d006      	beq.n	800adb2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adac:	711a      	strb	r2, [r3, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2243      	movs	r2, #67	; 0x43
 800adb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adb8:	4b02      	ldr	r3, [pc, #8]	; (800adc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3718      	adds	r7, #24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	200000bc 	.word	0x200000bc

0800adc8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800add0:	2182      	movs	r1, #130	; 0x82
 800add2:	4818      	ldr	r0, [pc, #96]	; (800ae34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800add4:	f000 fd33 	bl	800b83e <USBD_GetEpDesc>
 800add8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adda:	2101      	movs	r1, #1
 800addc:	4815      	ldr	r0, [pc, #84]	; (800ae34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800adde:	f000 fd2e 	bl	800b83e <USBD_GetEpDesc>
 800ade2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ade4:	2181      	movs	r1, #129	; 0x81
 800ade6:	4813      	ldr	r0, [pc, #76]	; (800ae34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ade8:	f000 fd29 	bl	800b83e <USBD_GetEpDesc>
 800adec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	2210      	movs	r2, #16
 800adf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d006      	beq.n	800ae0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2200      	movs	r2, #0
 800ae04:	711a      	strb	r2, [r3, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f042 0202 	orr.w	r2, r2, #2
 800ae0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d006      	beq.n	800ae22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	711a      	strb	r2, [r3, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f042 0202 	orr.w	r2, r2, #2
 800ae20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2243      	movs	r2, #67	; 0x43
 800ae26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae28:	4b02      	ldr	r3, [pc, #8]	; (800ae34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	200000bc 	.word	0x200000bc

0800ae38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae40:	2182      	movs	r1, #130	; 0x82
 800ae42:	4818      	ldr	r0, [pc, #96]	; (800aea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae44:	f000 fcfb 	bl	800b83e <USBD_GetEpDesc>
 800ae48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	4815      	ldr	r0, [pc, #84]	; (800aea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae4e:	f000 fcf6 	bl	800b83e <USBD_GetEpDesc>
 800ae52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae54:	2181      	movs	r1, #129	; 0x81
 800ae56:	4813      	ldr	r0, [pc, #76]	; (800aea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae58:	f000 fcf1 	bl	800b83e <USBD_GetEpDesc>
 800ae5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	2210      	movs	r2, #16
 800ae68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d006      	beq.n	800ae7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae78:	711a      	strb	r2, [r3, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d006      	beq.n	800ae92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae8c:	711a      	strb	r2, [r3, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2243      	movs	r2, #67	; 0x43
 800ae96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae98:	4b02      	ldr	r3, [pc, #8]	; (800aea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	200000bc 	.word	0x200000bc

0800aea8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	220a      	movs	r2, #10
 800aeb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aeb6:	4b03      	ldr	r3, [pc, #12]	; (800aec4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	20000078 	.word	0x20000078

0800aec8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e009      	b.n	800aef0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	33b0      	adds	r3, #176	; 0xb0
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b087      	sub	sp, #28
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	32b0      	adds	r2, #176	; 0xb0
 800af12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af16:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d101      	bne.n	800af22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af1e:	2303      	movs	r3, #3
 800af20:	e008      	b.n	800af34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	371c      	adds	r7, #28
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	32b0      	adds	r2, #176	; 0xb0
 800af54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800af60:	2303      	movs	r3, #3
 800af62:	e004      	b.n	800af6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
	...

0800af7c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	32b0      	adds	r2, #176	; 0xb0
 800af8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af92:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800af94:	2301      	movs	r3, #1
 800af96:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	32b0      	adds	r2, #176	; 0xb0
 800afa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800afaa:	2303      	movs	r3, #3
 800afac:	e025      	b.n	800affa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d11f      	bne.n	800aff8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2201      	movs	r2, #1
 800afbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800afc0:	4b10      	ldr	r3, [pc, #64]	; (800b004 <USBD_CDC_TransmitPacket+0x88>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	f003 020f 	and.w	r2, r3, #15
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	4613      	mov	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4403      	add	r3, r0
 800afda:	3318      	adds	r3, #24
 800afdc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800afde:	4b09      	ldr	r3, [pc, #36]	; (800b004 <USBD_CDC_TransmitPacket+0x88>)
 800afe0:	7819      	ldrb	r1, [r3, #0]
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f004 fdab 	bl	800fb4a <USBD_LL_Transmit>

    ret = USBD_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	200000ff 	.word	0x200000ff

0800b008 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	32b0      	adds	r2, #176	; 0xb0
 800b01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	32b0      	adds	r2, #176	; 0xb0
 800b02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b032:	2303      	movs	r3, #3
 800b034:	e018      	b.n	800b068 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	7c1b      	ldrb	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10a      	bne.n	800b054 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b03e:	4b0c      	ldr	r3, [pc, #48]	; (800b070 <USBD_CDC_ReceivePacket+0x68>)
 800b040:	7819      	ldrb	r1, [r3, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f004 fd9d 	bl	800fb8c <USBD_LL_PrepareReceive>
 800b052:	e008      	b.n	800b066 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b054:	4b06      	ldr	r3, [pc, #24]	; (800b070 <USBD_CDC_ReceivePacket+0x68>)
 800b056:	7819      	ldrb	r1, [r3, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b05e:	2340      	movs	r3, #64	; 0x40
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f004 fd93 	bl	800fb8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20000100 	.word	0x20000100

0800b074 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4613      	mov	r3, r2
 800b080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800b088:	4817      	ldr	r0, [pc, #92]	; (800b0e8 <USBD_Init+0x74>)
 800b08a:	f005 f821 	bl	80100d0 <iprintf>
 800b08e:	4817      	ldr	r0, [pc, #92]	; (800b0ec <USBD_Init+0x78>)
 800b090:	f005 f81e 	bl	80100d0 <iprintf>
 800b094:	200a      	movs	r0, #10
 800b096:	f005 f833 	bl	8010100 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e01f      	b.n	800b0de <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d003      	beq.n	800b0c4 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	79fa      	ldrb	r2, [r7, #7]
 800b0d0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f004 fc04 	bl	800f8e0 <USBD_LL_Init>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	08011478 	.word	0x08011478
 800b0ec:	08011480 	.word	0x08011480

0800b0f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10a      	bne.n	800b11a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800b104:	481a      	ldr	r0, [pc, #104]	; (800b170 <USBD_RegisterClass+0x80>)
 800b106:	f004 ffe3 	bl	80100d0 <iprintf>
 800b10a:	481a      	ldr	r0, [pc, #104]	; (800b174 <USBD_RegisterClass+0x84>)
 800b10c:	f004 ffe0 	bl	80100d0 <iprintf>
 800b110:	200a      	movs	r0, #10
 800b112:	f004 fff5 	bl	8010100 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b116:	2303      	movs	r3, #3
 800b118:	e025      	b.n	800b166 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	32ae      	adds	r2, #174	; 0xae
 800b12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00f      	beq.n	800b156 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	32ae      	adds	r2, #174	; 0xae
 800b140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b146:	f107 020e 	add.w	r2, r7, #14
 800b14a:	4610      	mov	r0, r2
 800b14c:	4798      	blx	r3
 800b14e:	4602      	mov	r2, r0
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b15c:	1c5a      	adds	r2, r3, #1
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	08011478 	.word	0x08011478
 800b174:	08011498 	.word	0x08011498

0800b178 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f004 fbf9 	bl	800f978 <USBD_LL_Start>
 800b186:	4603      	mov	r3, r0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b198:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d009      	beq.n	800b1d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	78fa      	ldrb	r2, [r7, #3]
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	4798      	blx	r3
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	78fa      	ldrb	r2, [r7, #3]
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	4798      	blx	r3
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b204:	2303      	movs	r3, #3
 800b206:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b222:	6839      	ldr	r1, [r7, #0]
 800b224:	4618      	mov	r0, r3
 800b226:	f001 f908 	bl	800c43a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2201      	movs	r2, #1
 800b22e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b238:	461a      	mov	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b246:	f003 031f 	and.w	r3, r3, #31
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d01a      	beq.n	800b284 <USBD_LL_SetupStage+0x72>
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d822      	bhi.n	800b298 <USBD_LL_SetupStage+0x86>
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <USBD_LL_SetupStage+0x4a>
 800b256:	2b01      	cmp	r3, #1
 800b258:	d00a      	beq.n	800b270 <USBD_LL_SetupStage+0x5e>
 800b25a:	e01d      	b.n	800b298 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fb5f 	bl	800b928 <USBD_StdDevReq>
 800b26a:	4603      	mov	r3, r0
 800b26c:	73fb      	strb	r3, [r7, #15]
      break;
 800b26e:	e020      	b.n	800b2b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fbc7 	bl	800ba0c <USBD_StdItfReq>
 800b27e:	4603      	mov	r3, r0
 800b280:	73fb      	strb	r3, [r7, #15]
      break;
 800b282:	e016      	b.n	800b2b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b28a:	4619      	mov	r1, r3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fc29 	bl	800bae4 <USBD_StdEPReq>
 800b292:	4603      	mov	r3, r0
 800b294:	73fb      	strb	r3, [r7, #15]
      break;
 800b296:	e00c      	b.n	800b2b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b29e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f004 fbc6 	bl	800fa38 <USBD_LL_StallEP>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b2b0:	bf00      	nop
  }

  return ret;
 800b2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b2ce:	7afb      	ldrb	r3, [r7, #11]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d16e      	bne.n	800b3b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b2da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2e2:	2b03      	cmp	r3, #3
 800b2e4:	f040 8098 	bne.w	800b418 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	689a      	ldr	r2, [r3, #8]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d913      	bls.n	800b31c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	689a      	ldr	r2, [r3, #8]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	1ad2      	subs	r2, r2, r3
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	68da      	ldr	r2, [r3, #12]
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	bf28      	it	cs
 800b30e:	4613      	movcs	r3, r2
 800b310:	461a      	mov	r2, r3
 800b312:	6879      	ldr	r1, [r7, #4]
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f001 f984 	bl	800c622 <USBD_CtlContinueRx>
 800b31a:	e07d      	b.n	800b418 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b322:	f003 031f 	and.w	r3, r3, #31
 800b326:	2b02      	cmp	r3, #2
 800b328:	d014      	beq.n	800b354 <USBD_LL_DataOutStage+0x98>
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d81d      	bhi.n	800b36a <USBD_LL_DataOutStage+0xae>
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d002      	beq.n	800b338 <USBD_LL_DataOutStage+0x7c>
 800b332:	2b01      	cmp	r3, #1
 800b334:	d003      	beq.n	800b33e <USBD_LL_DataOutStage+0x82>
 800b336:	e018      	b.n	800b36a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b338:	2300      	movs	r3, #0
 800b33a:	75bb      	strb	r3, [r7, #22]
            break;
 800b33c:	e018      	b.n	800b370 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b344:	b2db      	uxtb	r3, r3
 800b346:	4619      	mov	r1, r3
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 fa5e 	bl	800b80a <USBD_CoreFindIF>
 800b34e:	4603      	mov	r3, r0
 800b350:	75bb      	strb	r3, [r7, #22]
            break;
 800b352:	e00d      	b.n	800b370 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	4619      	mov	r1, r3
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f000 fa60 	bl	800b824 <USBD_CoreFindEP>
 800b364:	4603      	mov	r3, r0
 800b366:	75bb      	strb	r3, [r7, #22]
            break;
 800b368:	e002      	b.n	800b370 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b36a:	2300      	movs	r3, #0
 800b36c:	75bb      	strb	r3, [r7, #22]
            break;
 800b36e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b370:	7dbb      	ldrb	r3, [r7, #22]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d119      	bne.n	800b3aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d113      	bne.n	800b3aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b382:	7dba      	ldrb	r2, [r7, #22]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	32ae      	adds	r2, #174	; 0xae
 800b388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00b      	beq.n	800b3aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b392:	7dba      	ldrb	r2, [r7, #22]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b39a:	7dba      	ldrb	r2, [r7, #22]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	32ae      	adds	r2, #174	; 0xae
 800b3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f001 f94a 	bl	800c644 <USBD_CtlSendStatus>
 800b3b0:	e032      	b.n	800b418 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b3b2:	7afb      	ldrb	r3, [r7, #11]
 800b3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f000 fa31 	bl	800b824 <USBD_CoreFindEP>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3c6:	7dbb      	ldrb	r3, [r7, #22]
 800b3c8:	2bff      	cmp	r3, #255	; 0xff
 800b3ca:	d025      	beq.n	800b418 <USBD_LL_DataOutStage+0x15c>
 800b3cc:	7dbb      	ldrb	r3, [r7, #22]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d122      	bne.n	800b418 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b03      	cmp	r3, #3
 800b3dc:	d117      	bne.n	800b40e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b3de:	7dba      	ldrb	r2, [r7, #22]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	32ae      	adds	r2, #174	; 0xae
 800b3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00f      	beq.n	800b40e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b3ee:	7dba      	ldrb	r2, [r7, #22]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b3f6:	7dba      	ldrb	r2, [r7, #22]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	32ae      	adds	r2, #174	; 0xae
 800b3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	7afa      	ldrb	r2, [r7, #11]
 800b404:	4611      	mov	r1, r2
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	4798      	blx	r3
 800b40a:	4603      	mov	r3, r0
 800b40c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b414:	7dfb      	ldrb	r3, [r7, #23]
 800b416:	e000      	b.n	800b41a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b086      	sub	sp, #24
 800b426:	af00      	add	r7, sp, #0
 800b428:	60f8      	str	r0, [r7, #12]
 800b42a:	460b      	mov	r3, r1
 800b42c:	607a      	str	r2, [r7, #4]
 800b42e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b430:	7afb      	ldrb	r3, [r7, #11]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d16f      	bne.n	800b516 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3314      	adds	r3, #20
 800b43a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b442:	2b02      	cmp	r3, #2
 800b444:	d15a      	bne.n	800b4fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	689a      	ldr	r2, [r3, #8]
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d914      	bls.n	800b47c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	689a      	ldr	r2, [r3, #8]
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	1ad2      	subs	r2, r2, r3
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	461a      	mov	r2, r3
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f001 f8ac 	bl	800c5c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b46e:	2300      	movs	r3, #0
 800b470:	2200      	movs	r2, #0
 800b472:	2100      	movs	r1, #0
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f004 fb89 	bl	800fb8c <USBD_LL_PrepareReceive>
 800b47a:	e03f      	b.n	800b4fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	68da      	ldr	r2, [r3, #12]
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	429a      	cmp	r2, r3
 800b486:	d11c      	bne.n	800b4c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b490:	429a      	cmp	r2, r3
 800b492:	d316      	bcc.n	800b4c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d20f      	bcs.n	800b4c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	68f8      	ldr	r0, [r7, #12]
 800b4a8:	f001 f88d 	bl	800c5c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f004 fb66 	bl	800fb8c <USBD_LL_PrepareReceive>
 800b4c0:	e01c      	b.n	800b4fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d10f      	bne.n	800b4ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d009      	beq.n	800b4ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4ee:	2180      	movs	r1, #128	; 0x80
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f004 faa1 	bl	800fa38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f001 f8b7 	bl	800c66a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d03a      	beq.n	800b57c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f7ff fe42 	bl	800b190 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2200      	movs	r2, #0
 800b510:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b514:	e032      	b.n	800b57c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b516:	7afb      	ldrb	r3, [r7, #11]
 800b518:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	4619      	mov	r1, r3
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 f97f 	bl	800b824 <USBD_CoreFindEP>
 800b526:	4603      	mov	r3, r0
 800b528:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	2bff      	cmp	r3, #255	; 0xff
 800b52e:	d025      	beq.n	800b57c <USBD_LL_DataInStage+0x15a>
 800b530:	7dfb      	ldrb	r3, [r7, #23]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d122      	bne.n	800b57c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b03      	cmp	r3, #3
 800b540:	d11c      	bne.n	800b57c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b542:	7dfa      	ldrb	r2, [r7, #23]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	32ae      	adds	r2, #174	; 0xae
 800b548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54c:	695b      	ldr	r3, [r3, #20]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d014      	beq.n	800b57c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b552:	7dfa      	ldrb	r2, [r7, #23]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b55a:	7dfa      	ldrb	r2, [r7, #23]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	32ae      	adds	r2, #174	; 0xae
 800b560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b564:	695b      	ldr	r3, [r3, #20]
 800b566:	7afa      	ldrb	r2, [r7, #11]
 800b568:	4611      	mov	r1, r2
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	4798      	blx	r3
 800b56e:	4603      	mov	r3, r0
 800b570:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b572:	7dbb      	ldrb	r3, [r7, #22]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b578:	7dbb      	ldrb	r3, [r7, #22]
 800b57a:	e000      	b.n	800b57e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d014      	beq.n	800b5ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00e      	beq.n	800b5ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	6852      	ldr	r2, [r2, #4]
 800b5da:	b2d2      	uxtb	r2, r2
 800b5dc:	4611      	mov	r1, r2
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	4798      	blx	r3
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5ec:	2340      	movs	r3, #64	; 0x40
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f004 f9db 	bl	800f9ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2240      	movs	r2, #64	; 0x40
 800b604:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b608:	2340      	movs	r3, #64	; 0x40
 800b60a:	2200      	movs	r2, #0
 800b60c:	2180      	movs	r1, #128	; 0x80
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f004 f9cd 	bl	800f9ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2240      	movs	r2, #64	; 0x40
 800b61e:	621a      	str	r2, [r3, #32]

  return ret;
 800b620:	7bfb      	ldrb	r3, [r7, #15]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b083      	sub	sp, #12
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	460b      	mov	r3, r1
 800b634:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	78fa      	ldrb	r2, [r7, #3]
 800b63a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b64a:	b480      	push	{r7}
 800b64c:	b083      	sub	sp, #12
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2204      	movs	r2, #4
 800b664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b676:	b480      	push	{r7}
 800b678:	b083      	sub	sp, #12
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b04      	cmp	r3, #4
 800b688:	d106      	bne.n	800b698 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b690:	b2da      	uxtb	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b082      	sub	sp, #8
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d110      	bne.n	800b6dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00b      	beq.n	800b6dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ca:	69db      	ldr	r3, [r3, #28]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b082      	sub	sp, #8
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	32ae      	adds	r2, #174	; 0xae
 800b6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b704:	2303      	movs	r3, #3
 800b706:	e01c      	b.n	800b742 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b03      	cmp	r3, #3
 800b712:	d115      	bne.n	800b740 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	32ae      	adds	r2, #174	; 0xae
 800b71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b722:	6a1b      	ldr	r3, [r3, #32]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00b      	beq.n	800b740 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	32ae      	adds	r2, #174	; 0xae
 800b732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b736:	6a1b      	ldr	r3, [r3, #32]
 800b738:	78fa      	ldrb	r2, [r7, #3]
 800b73a:	4611      	mov	r1, r2
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b082      	sub	sp, #8
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	460b      	mov	r3, r1
 800b754:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	32ae      	adds	r2, #174	; 0xae
 800b760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d101      	bne.n	800b76c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b768:	2303      	movs	r3, #3
 800b76a:	e01c      	b.n	800b7a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b03      	cmp	r3, #3
 800b776:	d115      	bne.n	800b7a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	32ae      	adds	r2, #174	; 0xae
 800b782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00b      	beq.n	800b7a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	32ae      	adds	r2, #174	; 0xae
 800b796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79c:	78fa      	ldrb	r2, [r7, #3]
 800b79e:	4611      	mov	r1, r2
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b083      	sub	sp, #12
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00e      	beq.n	800b800 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	6852      	ldr	r2, [r2, #4]
 800b7ee:	b2d2      	uxtb	r2, r2
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	4798      	blx	r3
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b800:	7bfb      	ldrb	r3, [r7, #15]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	460b      	mov	r3, r1
 800b814:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b816:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b818:	4618      	mov	r0, r3
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b830:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b832:	4618      	mov	r0, r3
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b086      	sub	sp, #24
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	460b      	mov	r3, r1
 800b848:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b852:	2300      	movs	r3, #0
 800b854:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	885b      	ldrh	r3, [r3, #2]
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	b29b      	uxth	r3, r3
 800b862:	429a      	cmp	r2, r3
 800b864:	d920      	bls.n	800b8a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b86e:	e013      	b.n	800b898 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b870:	f107 030a 	add.w	r3, r7, #10
 800b874:	4619      	mov	r1, r3
 800b876:	6978      	ldr	r0, [r7, #20]
 800b878:	f000 f81b 	bl	800b8b2 <USBD_GetNextDesc>
 800b87c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	785b      	ldrb	r3, [r3, #1]
 800b882:	2b05      	cmp	r3, #5
 800b884:	d108      	bne.n	800b898 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	789b      	ldrb	r3, [r3, #2]
 800b88e:	78fa      	ldrb	r2, [r7, #3]
 800b890:	429a      	cmp	r2, r3
 800b892:	d008      	beq.n	800b8a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b894:	2300      	movs	r3, #0
 800b896:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	885b      	ldrh	r3, [r3, #2]
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	897b      	ldrh	r3, [r7, #10]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d8e5      	bhi.n	800b870 <USBD_GetEpDesc+0x32>
 800b8a4:	e000      	b.n	800b8a8 <USBD_GetEpDesc+0x6a>
          break;
 800b8a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b8a8:	693b      	ldr	r3, [r7, #16]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3718      	adds	r7, #24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b085      	sub	sp, #20
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	881a      	ldrh	r2, [r3, #0]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	4413      	add	r3, r2
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4413      	add	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b8de:	68fb      	ldr	r3, [r7, #12]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	3301      	adds	r3, #1
 800b902:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b90a:	8a3b      	ldrh	r3, [r7, #16]
 800b90c:	021b      	lsls	r3, r3, #8
 800b90e:	b21a      	sxth	r2, r3
 800b910:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b914:	4313      	orrs	r3, r2
 800b916:	b21b      	sxth	r3, r3
 800b918:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b91a:	89fb      	ldrh	r3, [r7, #14]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	371c      	adds	r7, #28
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b93e:	2b40      	cmp	r3, #64	; 0x40
 800b940:	d005      	beq.n	800b94e <USBD_StdDevReq+0x26>
 800b942:	2b40      	cmp	r3, #64	; 0x40
 800b944:	d857      	bhi.n	800b9f6 <USBD_StdDevReq+0xce>
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00f      	beq.n	800b96a <USBD_StdDevReq+0x42>
 800b94a:	2b20      	cmp	r3, #32
 800b94c:	d153      	bne.n	800b9f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	32ae      	adds	r2, #174	; 0xae
 800b958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	6839      	ldr	r1, [r7, #0]
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	4798      	blx	r3
 800b964:	4603      	mov	r3, r0
 800b966:	73fb      	strb	r3, [r7, #15]
      break;
 800b968:	e04a      	b.n	800ba00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	785b      	ldrb	r3, [r3, #1]
 800b96e:	2b09      	cmp	r3, #9
 800b970:	d83b      	bhi.n	800b9ea <USBD_StdDevReq+0xc2>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <USBD_StdDevReq+0x50>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b9cd 	.word	0x0800b9cd
 800b97c:	0800b9e1 	.word	0x0800b9e1
 800b980:	0800b9eb 	.word	0x0800b9eb
 800b984:	0800b9d7 	.word	0x0800b9d7
 800b988:	0800b9eb 	.word	0x0800b9eb
 800b98c:	0800b9ab 	.word	0x0800b9ab
 800b990:	0800b9a1 	.word	0x0800b9a1
 800b994:	0800b9eb 	.word	0x0800b9eb
 800b998:	0800b9c3 	.word	0x0800b9c3
 800b99c:	0800b9b5 	.word	0x0800b9b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fa3c 	bl	800be20 <USBD_GetDescriptor>
          break;
 800b9a8:	e024      	b.n	800b9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b9aa:	6839      	ldr	r1, [r7, #0]
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fba1 	bl	800c0f4 <USBD_SetAddress>
          break;
 800b9b2:	e01f      	b.n	800b9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fbe0 	bl	800c17c <USBD_SetConfig>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]
          break;
 800b9c0:	e018      	b.n	800b9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fc83 	bl	800c2d0 <USBD_GetConfig>
          break;
 800b9ca:	e013      	b.n	800b9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fcb4 	bl	800c33c <USBD_GetStatus>
          break;
 800b9d4:	e00e      	b.n	800b9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fce3 	bl	800c3a4 <USBD_SetFeature>
          break;
 800b9de:	e009      	b.n	800b9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fd07 	bl	800c3f6 <USBD_ClrFeature>
          break;
 800b9e8:	e004      	b.n	800b9f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b9ea:	6839      	ldr	r1, [r7, #0]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 fd5e 	bl	800c4ae <USBD_CtlError>
          break;
 800b9f2:	bf00      	nop
      }
      break;
 800b9f4:	e004      	b.n	800ba00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fd58 	bl	800c4ae <USBD_CtlError>
      break;
 800b9fe:	bf00      	nop
  }

  return ret;
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop

0800ba0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba22:	2b40      	cmp	r3, #64	; 0x40
 800ba24:	d005      	beq.n	800ba32 <USBD_StdItfReq+0x26>
 800ba26:	2b40      	cmp	r3, #64	; 0x40
 800ba28:	d852      	bhi.n	800bad0 <USBD_StdItfReq+0xc4>
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <USBD_StdItfReq+0x26>
 800ba2e:	2b20      	cmp	r3, #32
 800ba30:	d14e      	bne.n	800bad0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d840      	bhi.n	800bac2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	889b      	ldrh	r3, [r3, #4]
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d836      	bhi.n	800bab8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	889b      	ldrh	r3, [r3, #4]
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7ff fed9 	bl	800b80a <USBD_CoreFindIF>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	2bff      	cmp	r3, #255	; 0xff
 800ba60:	d01d      	beq.n	800ba9e <USBD_StdItfReq+0x92>
 800ba62:	7bbb      	ldrb	r3, [r7, #14]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d11a      	bne.n	800ba9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ba68:	7bba      	ldrb	r2, [r7, #14]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	32ae      	adds	r2, #174	; 0xae
 800ba6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00f      	beq.n	800ba98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ba78:	7bba      	ldrb	r2, [r7, #14]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba80:	7bba      	ldrb	r2, [r7, #14]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	32ae      	adds	r2, #174	; 0xae
 800ba86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	6839      	ldr	r1, [r7, #0]
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	4798      	blx	r3
 800ba92:	4603      	mov	r3, r0
 800ba94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba96:	e004      	b.n	800baa2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba9c:	e001      	b.n	800baa2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	88db      	ldrh	r3, [r3, #6]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d110      	bne.n	800bacc <USBD_StdItfReq+0xc0>
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10d      	bne.n	800bacc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fdc7 	bl	800c644 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bab6:	e009      	b.n	800bacc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bab8:	6839      	ldr	r1, [r7, #0]
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fcf7 	bl	800c4ae <USBD_CtlError>
          break;
 800bac0:	e004      	b.n	800bacc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fcf2 	bl	800c4ae <USBD_CtlError>
          break;
 800baca:	e000      	b.n	800bace <USBD_StdItfReq+0xc2>
          break;
 800bacc:	bf00      	nop
      }
      break;
 800bace:	e004      	b.n	800bada <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fceb 	bl	800c4ae <USBD_CtlError>
      break;
 800bad8:	bf00      	nop
  }

  return ret;
 800bada:	7bfb      	ldrb	r3, [r7, #15]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	889b      	ldrh	r3, [r3, #4]
 800baf6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb00:	2b40      	cmp	r3, #64	; 0x40
 800bb02:	d007      	beq.n	800bb14 <USBD_StdEPReq+0x30>
 800bb04:	2b40      	cmp	r3, #64	; 0x40
 800bb06:	f200 817f 	bhi.w	800be08 <USBD_StdEPReq+0x324>
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d02a      	beq.n	800bb64 <USBD_StdEPReq+0x80>
 800bb0e:	2b20      	cmp	r3, #32
 800bb10:	f040 817a 	bne.w	800be08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb14:	7bbb      	ldrb	r3, [r7, #14]
 800bb16:	4619      	mov	r1, r3
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f7ff fe83 	bl	800b824 <USBD_CoreFindEP>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb22:	7b7b      	ldrb	r3, [r7, #13]
 800bb24:	2bff      	cmp	r3, #255	; 0xff
 800bb26:	f000 8174 	beq.w	800be12 <USBD_StdEPReq+0x32e>
 800bb2a:	7b7b      	ldrb	r3, [r7, #13]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f040 8170 	bne.w	800be12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bb32:	7b7a      	ldrb	r2, [r7, #13]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bb3a:	7b7a      	ldrb	r2, [r7, #13]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	32ae      	adds	r2, #174	; 0xae
 800bb40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 8163 	beq.w	800be12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bb4c:	7b7a      	ldrb	r2, [r7, #13]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	32ae      	adds	r2, #174	; 0xae
 800bb52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	4798      	blx	r3
 800bb5e:	4603      	mov	r3, r0
 800bb60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bb62:	e156      	b.n	800be12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	785b      	ldrb	r3, [r3, #1]
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d008      	beq.n	800bb7e <USBD_StdEPReq+0x9a>
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	f300 8145 	bgt.w	800bdfc <USBD_StdEPReq+0x318>
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 809b 	beq.w	800bcae <USBD_StdEPReq+0x1ca>
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d03c      	beq.n	800bbf6 <USBD_StdEPReq+0x112>
 800bb7c:	e13e      	b.n	800bdfc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d002      	beq.n	800bb90 <USBD_StdEPReq+0xac>
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d016      	beq.n	800bbbc <USBD_StdEPReq+0xd8>
 800bb8e:	e02c      	b.n	800bbea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00d      	beq.n	800bbb2 <USBD_StdEPReq+0xce>
 800bb96:	7bbb      	ldrb	r3, [r7, #14]
 800bb98:	2b80      	cmp	r3, #128	; 0x80
 800bb9a:	d00a      	beq.n	800bbb2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb9c:	7bbb      	ldrb	r3, [r7, #14]
 800bb9e:	4619      	mov	r1, r3
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f003 ff49 	bl	800fa38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bba6:	2180      	movs	r1, #128	; 0x80
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f003 ff45 	bl	800fa38 <USBD_LL_StallEP>
 800bbae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbb0:	e020      	b.n	800bbf4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fc7a 	bl	800c4ae <USBD_CtlError>
              break;
 800bbba:	e01b      	b.n	800bbf4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	885b      	ldrh	r3, [r3, #2]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10e      	bne.n	800bbe2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00b      	beq.n	800bbe2 <USBD_StdEPReq+0xfe>
 800bbca:	7bbb      	ldrb	r3, [r7, #14]
 800bbcc:	2b80      	cmp	r3, #128	; 0x80
 800bbce:	d008      	beq.n	800bbe2 <USBD_StdEPReq+0xfe>
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	88db      	ldrh	r3, [r3, #6]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d104      	bne.n	800bbe2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f003 ff2b 	bl	800fa38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fd2e 	bl	800c644 <USBD_CtlSendStatus>

              break;
 800bbe8:	e004      	b.n	800bbf4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fc5e 	bl	800c4ae <USBD_CtlError>
              break;
 800bbf2:	bf00      	nop
          }
          break;
 800bbf4:	e107      	b.n	800be06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d002      	beq.n	800bc08 <USBD_StdEPReq+0x124>
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d016      	beq.n	800bc34 <USBD_StdEPReq+0x150>
 800bc06:	e04b      	b.n	800bca0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00d      	beq.n	800bc2a <USBD_StdEPReq+0x146>
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	2b80      	cmp	r3, #128	; 0x80
 800bc12:	d00a      	beq.n	800bc2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc14:	7bbb      	ldrb	r3, [r7, #14]
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f003 ff0d 	bl	800fa38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc1e:	2180      	movs	r1, #128	; 0x80
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f003 ff09 	bl	800fa38 <USBD_LL_StallEP>
 800bc26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc28:	e040      	b.n	800bcac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fc3e 	bl	800c4ae <USBD_CtlError>
              break;
 800bc32:	e03b      	b.n	800bcac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	885b      	ldrh	r3, [r3, #2]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d136      	bne.n	800bcaa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc3c:	7bbb      	ldrb	r3, [r7, #14]
 800bc3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d004      	beq.n	800bc50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f003 ff13 	bl	800fa76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fcf7 	bl	800c644 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc56:	7bbb      	ldrb	r3, [r7, #14]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff fde2 	bl	800b824 <USBD_CoreFindEP>
 800bc60:	4603      	mov	r3, r0
 800bc62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc64:	7b7b      	ldrb	r3, [r7, #13]
 800bc66:	2bff      	cmp	r3, #255	; 0xff
 800bc68:	d01f      	beq.n	800bcaa <USBD_StdEPReq+0x1c6>
 800bc6a:	7b7b      	ldrb	r3, [r7, #13]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d11c      	bne.n	800bcaa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bc70:	7b7a      	ldrb	r2, [r7, #13]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bc78:	7b7a      	ldrb	r2, [r7, #13]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	32ae      	adds	r2, #174	; 0xae
 800bc7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d010      	beq.n	800bcaa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc88:	7b7a      	ldrb	r2, [r7, #13]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	32ae      	adds	r2, #174	; 0xae
 800bc8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	4798      	blx	r3
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bc9e:	e004      	b.n	800bcaa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fc03 	bl	800c4ae <USBD_CtlError>
              break;
 800bca8:	e000      	b.n	800bcac <USBD_StdEPReq+0x1c8>
              break;
 800bcaa:	bf00      	nop
          }
          break;
 800bcac:	e0ab      	b.n	800be06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d002      	beq.n	800bcc0 <USBD_StdEPReq+0x1dc>
 800bcba:	2b03      	cmp	r3, #3
 800bcbc:	d032      	beq.n	800bd24 <USBD_StdEPReq+0x240>
 800bcbe:	e097      	b.n	800bdf0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcc0:	7bbb      	ldrb	r3, [r7, #14]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d007      	beq.n	800bcd6 <USBD_StdEPReq+0x1f2>
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	2b80      	cmp	r3, #128	; 0x80
 800bcca:	d004      	beq.n	800bcd6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fbed 	bl	800c4ae <USBD_CtlError>
                break;
 800bcd4:	e091      	b.n	800bdfa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	da0b      	bge.n	800bcf6 <USBD_StdEPReq+0x212>
 800bcde:	7bbb      	ldrb	r3, [r7, #14]
 800bce0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bce4:	4613      	mov	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	3310      	adds	r3, #16
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	3304      	adds	r3, #4
 800bcf4:	e00b      	b.n	800bd0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcf6:	7bbb      	ldrb	r3, [r7, #14]
 800bcf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	4413      	add	r3, r2
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2202      	movs	r2, #2
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 fc37 	bl	800c590 <USBD_CtlSendData>
              break;
 800bd22:	e06a      	b.n	800bdfa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	da11      	bge.n	800bd50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd2c:	7bbb      	ldrb	r3, [r7, #14]
 800bd2e:	f003 020f 	and.w	r2, r3, #15
 800bd32:	6879      	ldr	r1, [r7, #4]
 800bd34:	4613      	mov	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	440b      	add	r3, r1
 800bd3e:	3324      	adds	r3, #36	; 0x24
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d117      	bne.n	800bd76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd46:	6839      	ldr	r1, [r7, #0]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fbb0 	bl	800c4ae <USBD_CtlError>
                  break;
 800bd4e:	e054      	b.n	800bdfa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	f003 020f 	and.w	r2, r3, #15
 800bd56:	6879      	ldr	r1, [r7, #4]
 800bd58:	4613      	mov	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	440b      	add	r3, r1
 800bd62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd66:	881b      	ldrh	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d104      	bne.n	800bd76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fb9d 	bl	800c4ae <USBD_CtlError>
                  break;
 800bd74:	e041      	b.n	800bdfa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	da0b      	bge.n	800bd96 <USBD_StdEPReq+0x2b2>
 800bd7e:	7bbb      	ldrb	r3, [r7, #14]
 800bd80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd84:	4613      	mov	r3, r2
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4413      	add	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	3310      	adds	r3, #16
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	4413      	add	r3, r2
 800bd92:	3304      	adds	r3, #4
 800bd94:	e00b      	b.n	800bdae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd96:	7bbb      	ldrb	r3, [r7, #14]
 800bd98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	4413      	add	r3, r2
 800bdac:	3304      	adds	r3, #4
 800bdae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bdb0:	7bbb      	ldrb	r3, [r7, #14]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d002      	beq.n	800bdbc <USBD_StdEPReq+0x2d8>
 800bdb6:	7bbb      	ldrb	r3, [r7, #14]
 800bdb8:	2b80      	cmp	r3, #128	; 0x80
 800bdba:	d103      	bne.n	800bdc4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	601a      	str	r2, [r3, #0]
 800bdc2:	e00e      	b.n	800bde2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f003 fe73 	bl	800fab4 <USBD_LL_IsStallEP>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	e002      	b.n	800bde2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2200      	movs	r2, #0
 800bde0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2202      	movs	r2, #2
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fbd1 	bl	800c590 <USBD_CtlSendData>
              break;
 800bdee:	e004      	b.n	800bdfa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fb5b 	bl	800c4ae <USBD_CtlError>
              break;
 800bdf8:	bf00      	nop
          }
          break;
 800bdfa:	e004      	b.n	800be06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fb55 	bl	800c4ae <USBD_CtlError>
          break;
 800be04:	bf00      	nop
      }
      break;
 800be06:	e005      	b.n	800be14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fb4f 	bl	800c4ae <USBD_CtlError>
      break;
 800be10:	e000      	b.n	800be14 <USBD_StdEPReq+0x330>
      break;
 800be12:	bf00      	nop
  }

  return ret;
 800be14:	7bfb      	ldrb	r3, [r7, #15]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
	...

0800be20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be2a:	2300      	movs	r3, #0
 800be2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be32:	2300      	movs	r3, #0
 800be34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	885b      	ldrh	r3, [r3, #2]
 800be3a:	0a1b      	lsrs	r3, r3, #8
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	3b01      	subs	r3, #1
 800be40:	2b06      	cmp	r3, #6
 800be42:	f200 8128 	bhi.w	800c096 <USBD_GetDescriptor+0x276>
 800be46:	a201      	add	r2, pc, #4	; (adr r2, 800be4c <USBD_GetDescriptor+0x2c>)
 800be48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4c:	0800be69 	.word	0x0800be69
 800be50:	0800be81 	.word	0x0800be81
 800be54:	0800bec1 	.word	0x0800bec1
 800be58:	0800c097 	.word	0x0800c097
 800be5c:	0800c097 	.word	0x0800c097
 800be60:	0800c037 	.word	0x0800c037
 800be64:	0800c063 	.word	0x0800c063
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	7c12      	ldrb	r2, [r2, #16]
 800be74:	f107 0108 	add.w	r1, r7, #8
 800be78:	4610      	mov	r0, r2
 800be7a:	4798      	blx	r3
 800be7c:	60f8      	str	r0, [r7, #12]
      break;
 800be7e:	e112      	b.n	800c0a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	7c1b      	ldrb	r3, [r3, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10d      	bne.n	800bea4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be90:	f107 0208 	add.w	r2, r7, #8
 800be94:	4610      	mov	r0, r2
 800be96:	4798      	blx	r3
 800be98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3301      	adds	r3, #1
 800be9e:	2202      	movs	r2, #2
 800bea0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bea2:	e100      	b.n	800c0a6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beac:	f107 0208 	add.w	r2, r7, #8
 800beb0:	4610      	mov	r0, r2
 800beb2:	4798      	blx	r3
 800beb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3301      	adds	r3, #1
 800beba:	2202      	movs	r2, #2
 800bebc:	701a      	strb	r2, [r3, #0]
      break;
 800bebe:	e0f2      	b.n	800c0a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	885b      	ldrh	r3, [r3, #2]
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b05      	cmp	r3, #5
 800bec8:	f200 80ac 	bhi.w	800c024 <USBD_GetDescriptor+0x204>
 800becc:	a201      	add	r2, pc, #4	; (adr r2, 800bed4 <USBD_GetDescriptor+0xb4>)
 800bece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed2:	bf00      	nop
 800bed4:	0800beed 	.word	0x0800beed
 800bed8:	0800bf21 	.word	0x0800bf21
 800bedc:	0800bf55 	.word	0x0800bf55
 800bee0:	0800bf89 	.word	0x0800bf89
 800bee4:	0800bfbd 	.word	0x0800bfbd
 800bee8:	0800bff1 	.word	0x0800bff1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00b      	beq.n	800bf10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	7c12      	ldrb	r2, [r2, #16]
 800bf04:	f107 0108 	add.w	r1, r7, #8
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4798      	blx	r3
 800bf0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf0e:	e091      	b.n	800c034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 facb 	bl	800c4ae <USBD_CtlError>
            err++;
 800bf18:	7afb      	ldrb	r3, [r7, #11]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf1e:	e089      	b.n	800c034 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00b      	beq.n	800bf44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	7c12      	ldrb	r2, [r2, #16]
 800bf38:	f107 0108 	add.w	r1, r7, #8
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	4798      	blx	r3
 800bf40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf42:	e077      	b.n	800c034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fab1 	bl	800c4ae <USBD_CtlError>
            err++;
 800bf4c:	7afb      	ldrb	r3, [r7, #11]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	72fb      	strb	r3, [r7, #11]
          break;
 800bf52:	e06f      	b.n	800c034 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00b      	beq.n	800bf78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	7c12      	ldrb	r2, [r2, #16]
 800bf6c:	f107 0108 	add.w	r1, r7, #8
 800bf70:	4610      	mov	r0, r2
 800bf72:	4798      	blx	r3
 800bf74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf76:	e05d      	b.n	800c034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fa97 	bl	800c4ae <USBD_CtlError>
            err++;
 800bf80:	7afb      	ldrb	r3, [r7, #11]
 800bf82:	3301      	adds	r3, #1
 800bf84:	72fb      	strb	r3, [r7, #11]
          break;
 800bf86:	e055      	b.n	800c034 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00b      	beq.n	800bfac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	7c12      	ldrb	r2, [r2, #16]
 800bfa0:	f107 0108 	add.w	r1, r7, #8
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	4798      	blx	r3
 800bfa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfaa:	e043      	b.n	800c034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fa7d 	bl	800c4ae <USBD_CtlError>
            err++;
 800bfb4:	7afb      	ldrb	r3, [r7, #11]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfba:	e03b      	b.n	800c034 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00b      	beq.n	800bfe0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfce:	695b      	ldr	r3, [r3, #20]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	7c12      	ldrb	r2, [r2, #16]
 800bfd4:	f107 0108 	add.w	r1, r7, #8
 800bfd8:	4610      	mov	r0, r2
 800bfda:	4798      	blx	r3
 800bfdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfde:	e029      	b.n	800c034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fa63 	bl	800c4ae <USBD_CtlError>
            err++;
 800bfe8:	7afb      	ldrb	r3, [r7, #11]
 800bfea:	3301      	adds	r3, #1
 800bfec:	72fb      	strb	r3, [r7, #11]
          break;
 800bfee:	e021      	b.n	800c034 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00b      	beq.n	800c014 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	7c12      	ldrb	r2, [r2, #16]
 800c008:	f107 0108 	add.w	r1, r7, #8
 800c00c:	4610      	mov	r0, r2
 800c00e:	4798      	blx	r3
 800c010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c012:	e00f      	b.n	800c034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c014:	6839      	ldr	r1, [r7, #0]
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fa49 	bl	800c4ae <USBD_CtlError>
            err++;
 800c01c:	7afb      	ldrb	r3, [r7, #11]
 800c01e:	3301      	adds	r3, #1
 800c020:	72fb      	strb	r3, [r7, #11]
          break;
 800c022:	e007      	b.n	800c034 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fa41 	bl	800c4ae <USBD_CtlError>
          err++;
 800c02c:	7afb      	ldrb	r3, [r7, #11]
 800c02e:	3301      	adds	r3, #1
 800c030:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c032:	bf00      	nop
      }
      break;
 800c034:	e037      	b.n	800c0a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	7c1b      	ldrb	r3, [r3, #16]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d109      	bne.n	800c052 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c046:	f107 0208 	add.w	r2, r7, #8
 800c04a:	4610      	mov	r0, r2
 800c04c:	4798      	blx	r3
 800c04e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c050:	e029      	b.n	800c0a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fa2a 	bl	800c4ae <USBD_CtlError>
        err++;
 800c05a:	7afb      	ldrb	r3, [r7, #11]
 800c05c:	3301      	adds	r3, #1
 800c05e:	72fb      	strb	r3, [r7, #11]
      break;
 800c060:	e021      	b.n	800c0a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	7c1b      	ldrb	r3, [r3, #16]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10d      	bne.n	800c086 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c072:	f107 0208 	add.w	r2, r7, #8
 800c076:	4610      	mov	r0, r2
 800c078:	4798      	blx	r3
 800c07a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	3301      	adds	r3, #1
 800c080:	2207      	movs	r2, #7
 800c082:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c084:	e00f      	b.n	800c0a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fa10 	bl	800c4ae <USBD_CtlError>
        err++;
 800c08e:	7afb      	ldrb	r3, [r7, #11]
 800c090:	3301      	adds	r3, #1
 800c092:	72fb      	strb	r3, [r7, #11]
      break;
 800c094:	e007      	b.n	800c0a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fa08 	bl	800c4ae <USBD_CtlError>
      err++;
 800c09e:	7afb      	ldrb	r3, [r7, #11]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	72fb      	strb	r3, [r7, #11]
      break;
 800c0a4:	bf00      	nop
  }

  if (err != 0U)
 800c0a6:	7afb      	ldrb	r3, [r7, #11]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d11e      	bne.n	800c0ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	88db      	ldrh	r3, [r3, #6]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d016      	beq.n	800c0e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c0b4:	893b      	ldrh	r3, [r7, #8]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00e      	beq.n	800c0d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	88da      	ldrh	r2, [r3, #6]
 800c0be:	893b      	ldrh	r3, [r7, #8]
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	bf28      	it	cs
 800c0c4:	4613      	movcs	r3, r2
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c0ca:	893b      	ldrh	r3, [r7, #8]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	68f9      	ldr	r1, [r7, #12]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fa5d 	bl	800c590 <USBD_CtlSendData>
 800c0d6:	e009      	b.n	800c0ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f9e7 	bl	800c4ae <USBD_CtlError>
 800c0e0:	e004      	b.n	800c0ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 faae 	bl	800c644 <USBD_CtlSendStatus>
 800c0e8:	e000      	b.n	800c0ec <USBD_GetDescriptor+0x2cc>
    return;
 800c0ea:	bf00      	nop
  }
}
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop

0800c0f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	889b      	ldrh	r3, [r3, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d131      	bne.n	800c16a <USBD_SetAddress+0x76>
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	88db      	ldrh	r3, [r3, #6]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d12d      	bne.n	800c16a <USBD_SetAddress+0x76>
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	885b      	ldrh	r3, [r3, #2]
 800c112:	2b7f      	cmp	r3, #127	; 0x7f
 800c114:	d829      	bhi.n	800c16a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	885b      	ldrh	r3, [r3, #2]
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c120:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b03      	cmp	r3, #3
 800c12c:	d104      	bne.n	800c138 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f9bc 	bl	800c4ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c136:	e01d      	b.n	800c174 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	7bfa      	ldrb	r2, [r7, #15]
 800c13c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	4619      	mov	r1, r3
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f003 fce1 	bl	800fb0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fa7a 	bl	800c644 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d004      	beq.n	800c160 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2202      	movs	r2, #2
 800c15a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c15e:	e009      	b.n	800c174 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c168:	e004      	b.n	800c174 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f99e 	bl	800c4ae <USBD_CtlError>
  }
}
 800c172:	bf00      	nop
 800c174:	bf00      	nop
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c186:	2300      	movs	r3, #0
 800c188:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	885b      	ldrh	r3, [r3, #2]
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	4b4e      	ldr	r3, [pc, #312]	; (800c2cc <USBD_SetConfig+0x150>)
 800c192:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c194:	4b4d      	ldr	r3, [pc, #308]	; (800c2cc <USBD_SetConfig+0x150>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d905      	bls.n	800c1a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f985 	bl	800c4ae <USBD_CtlError>
    return USBD_FAIL;
 800c1a4:	2303      	movs	r3, #3
 800c1a6:	e08c      	b.n	800c2c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d002      	beq.n	800c1ba <USBD_SetConfig+0x3e>
 800c1b4:	2b03      	cmp	r3, #3
 800c1b6:	d029      	beq.n	800c20c <USBD_SetConfig+0x90>
 800c1b8:	e075      	b.n	800c2a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c1ba:	4b44      	ldr	r3, [pc, #272]	; (800c2cc <USBD_SetConfig+0x150>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d020      	beq.n	800c204 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c1c2:	4b42      	ldr	r3, [pc, #264]	; (800c2cc <USBD_SetConfig+0x150>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1cc:	4b3f      	ldr	r3, [pc, #252]	; (800c2cc <USBD_SetConfig+0x150>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7fe ffe7 	bl	800b1a6 <USBD_SetClassConfig>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d008      	beq.n	800c1f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f962 	bl	800c4ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2202      	movs	r2, #2
 800c1ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1f2:	e065      	b.n	800c2c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 fa25 	bl	800c644 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c202:	e05d      	b.n	800c2c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fa1d 	bl	800c644 <USBD_CtlSendStatus>
      break;
 800c20a:	e059      	b.n	800c2c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c20c:	4b2f      	ldr	r3, [pc, #188]	; (800c2cc <USBD_SetConfig+0x150>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d112      	bne.n	800c23a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c21c:	4b2b      	ldr	r3, [pc, #172]	; (800c2cc <USBD_SetConfig+0x150>)
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	461a      	mov	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c226:	4b29      	ldr	r3, [pc, #164]	; (800c2cc <USBD_SetConfig+0x150>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7fe ffd6 	bl	800b1de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fa06 	bl	800c644 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c238:	e042      	b.n	800c2c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c23a:	4b24      	ldr	r3, [pc, #144]	; (800c2cc <USBD_SetConfig+0x150>)
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	429a      	cmp	r2, r3
 800c246:	d02a      	beq.n	800c29e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7fe ffc4 	bl	800b1de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c256:	4b1d      	ldr	r3, [pc, #116]	; (800c2cc <USBD_SetConfig+0x150>)
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c260:	4b1a      	ldr	r3, [pc, #104]	; (800c2cc <USBD_SetConfig+0x150>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	4619      	mov	r1, r3
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7fe ff9d 	bl	800b1a6 <USBD_SetClassConfig>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c270:	7bfb      	ldrb	r3, [r7, #15]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00f      	beq.n	800c296 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f918 	bl	800c4ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	b2db      	uxtb	r3, r3
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7fe ffa9 	bl	800b1de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2202      	movs	r2, #2
 800c290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c294:	e014      	b.n	800c2c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f9d4 	bl	800c644 <USBD_CtlSendStatus>
      break;
 800c29c:	e010      	b.n	800c2c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f9d0 	bl	800c644 <USBD_CtlSendStatus>
      break;
 800c2a4:	e00c      	b.n	800c2c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f900 	bl	800c4ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2ae:	4b07      	ldr	r3, [pc, #28]	; (800c2cc <USBD_SetConfig+0x150>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7fe ff92 	bl	800b1de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c2be:	bf00      	nop
  }

  return ret;
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	200003dc 	.word	0x200003dc

0800c2d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	88db      	ldrh	r3, [r3, #6]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d004      	beq.n	800c2ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f8e2 	bl	800c4ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c2ea:	e023      	b.n	800c334 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	dc02      	bgt.n	800c2fe <USBD_GetConfig+0x2e>
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	dc03      	bgt.n	800c304 <USBD_GetConfig+0x34>
 800c2fc:	e015      	b.n	800c32a <USBD_GetConfig+0x5a>
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d00b      	beq.n	800c31a <USBD_GetConfig+0x4a>
 800c302:	e012      	b.n	800c32a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	3308      	adds	r3, #8
 800c30e:	2201      	movs	r2, #1
 800c310:	4619      	mov	r1, r3
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f93c 	bl	800c590 <USBD_CtlSendData>
        break;
 800c318:	e00c      	b.n	800c334 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	3304      	adds	r3, #4
 800c31e:	2201      	movs	r2, #1
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f934 	bl	800c590 <USBD_CtlSendData>
        break;
 800c328:	e004      	b.n	800c334 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f8be 	bl	800c4ae <USBD_CtlError>
        break;
 800c332:	bf00      	nop
}
 800c334:	bf00      	nop
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	3b01      	subs	r3, #1
 800c350:	2b02      	cmp	r3, #2
 800c352:	d81e      	bhi.n	800c392 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	88db      	ldrh	r3, [r3, #6]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d004      	beq.n	800c366 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 f8a5 	bl	800c4ae <USBD_CtlError>
        break;
 800c364:	e01a      	b.n	800c39c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c372:	2b00      	cmp	r3, #0
 800c374:	d005      	beq.n	800c382 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	f043 0202 	orr.w	r2, r3, #2
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	330c      	adds	r3, #12
 800c386:	2202      	movs	r2, #2
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f900 	bl	800c590 <USBD_CtlSendData>
      break;
 800c390:	e004      	b.n	800c39c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f88a 	bl	800c4ae <USBD_CtlError>
      break;
 800c39a:	bf00      	nop
  }
}
 800c39c:	bf00      	nop
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	885b      	ldrh	r3, [r3, #2]
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d107      	bne.n	800c3c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f940 	bl	800c644 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c3c4:	e013      	b.n	800c3ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	885b      	ldrh	r3, [r3, #2]
 800c3ca:	2b02      	cmp	r3, #2
 800c3cc:	d10b      	bne.n	800c3e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	889b      	ldrh	r3, [r3, #4]
 800c3d2:	0a1b      	lsrs	r3, r3, #8
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 f930 	bl	800c644 <USBD_CtlSendStatus>
}
 800c3e4:	e003      	b.n	800c3ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f860 	bl	800c4ae <USBD_CtlError>
}
 800c3ee:	bf00      	nop
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c406:	b2db      	uxtb	r3, r3
 800c408:	3b01      	subs	r3, #1
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d80b      	bhi.n	800c426 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	885b      	ldrh	r3, [r3, #2]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d10c      	bne.n	800c430 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f910 	bl	800c644 <USBD_CtlSendStatus>
      }
      break;
 800c424:	e004      	b.n	800c430 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c426:	6839      	ldr	r1, [r7, #0]
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 f840 	bl	800c4ae <USBD_CtlError>
      break;
 800c42e:	e000      	b.n	800c432 <USBD_ClrFeature+0x3c>
      break;
 800c430:	bf00      	nop
  }
}
 800c432:	bf00      	nop
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	781a      	ldrb	r2, [r3, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	3301      	adds	r3, #1
 800c454:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	781a      	ldrb	r2, [r3, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3301      	adds	r3, #1
 800c462:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff fa41 	bl	800b8ec <SWAPBYTE>
 800c46a:	4603      	mov	r3, r0
 800c46c:	461a      	mov	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	3301      	adds	r3, #1
 800c476:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	3301      	adds	r3, #1
 800c47c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7ff fa34 	bl	800b8ec <SWAPBYTE>
 800c484:	4603      	mov	r3, r0
 800c486:	461a      	mov	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	3301      	adds	r3, #1
 800c490:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3301      	adds	r3, #1
 800c496:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	f7ff fa27 	bl	800b8ec <SWAPBYTE>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	80da      	strh	r2, [r3, #6]
}
 800c4a6:	bf00      	nop
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b082      	sub	sp, #8
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4b8:	2180      	movs	r1, #128	; 0x80
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f003 fabc 	bl	800fa38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f003 fab8 	bl	800fa38 <USBD_LL_StallEP>
}
 800c4c8:	bf00      	nop
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d036      	beq.n	800c554 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c4ea:	6938      	ldr	r0, [r7, #16]
 800c4ec:	f000 f836 	bl	800c55c <USBD_GetLen>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	005b      	lsls	r3, r3, #1
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c4fe:	7dfb      	ldrb	r3, [r7, #23]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	4413      	add	r3, r2
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	7812      	ldrb	r2, [r2, #0]
 800c508:	701a      	strb	r2, [r3, #0]
  idx++;
 800c50a:	7dfb      	ldrb	r3, [r7, #23]
 800c50c:	3301      	adds	r3, #1
 800c50e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c510:	7dfb      	ldrb	r3, [r7, #23]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	4413      	add	r3, r2
 800c516:	2203      	movs	r2, #3
 800c518:	701a      	strb	r2, [r3, #0]
  idx++;
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
 800c51c:	3301      	adds	r3, #1
 800c51e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c520:	e013      	b.n	800c54a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c522:	7dfb      	ldrb	r3, [r7, #23]
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	4413      	add	r3, r2
 800c528:	693a      	ldr	r2, [r7, #16]
 800c52a:	7812      	ldrb	r2, [r2, #0]
 800c52c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	3301      	adds	r3, #1
 800c532:	613b      	str	r3, [r7, #16]
    idx++;
 800c534:	7dfb      	ldrb	r3, [r7, #23]
 800c536:	3301      	adds	r3, #1
 800c538:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c53a:	7dfb      	ldrb	r3, [r7, #23]
 800c53c:	68ba      	ldr	r2, [r7, #8]
 800c53e:	4413      	add	r3, r2
 800c540:	2200      	movs	r2, #0
 800c542:	701a      	strb	r2, [r3, #0]
    idx++;
 800c544:	7dfb      	ldrb	r3, [r7, #23]
 800c546:	3301      	adds	r3, #1
 800c548:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1e7      	bne.n	800c522 <USBD_GetString+0x52>
 800c552:	e000      	b.n	800c556 <USBD_GetString+0x86>
    return;
 800c554:	bf00      	nop
  }
}
 800c556:	3718      	adds	r7, #24
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c564:	2300      	movs	r3, #0
 800c566:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c56c:	e005      	b.n	800c57a <USBD_GetLen+0x1e>
  {
    len++;
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
 800c570:	3301      	adds	r3, #1
 800c572:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	3301      	adds	r3, #1
 800c578:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1f5      	bne.n	800c56e <USBD_GetLen+0x12>
  }

  return len;
 800c582:	7bfb      	ldrb	r3, [r7, #15]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2202      	movs	r2, #2
 800c5a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f003 fac7 	bl	800fb4a <USBD_LL_Transmit>

  return USBD_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	60f8      	str	r0, [r7, #12]
 800c5ce:	60b9      	str	r1, [r7, #8]
 800c5d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f003 fab6 	bl	800fb4a <USBD_LL_Transmit>

  return USBD_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2203      	movs	r2, #3
 800c5f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	2100      	movs	r1, #0
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f003 faba 	bl	800fb8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	60f8      	str	r0, [r7, #12]
 800c62a:	60b9      	str	r1, [r7, #8]
 800c62c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	2100      	movs	r1, #0
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f003 faa9 	bl	800fb8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2204      	movs	r2, #4
 800c650:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c654:	2300      	movs	r3, #0
 800c656:	2200      	movs	r2, #0
 800c658:	2100      	movs	r1, #0
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f003 fa75 	bl	800fb4a <USBD_LL_Transmit>

  return USBD_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b082      	sub	sp, #8
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2205      	movs	r2, #5
 800c676:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c67a:	2300      	movs	r3, #0
 800c67c:	2200      	movs	r2, #0
 800c67e:	2100      	movs	r1, #0
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f003 fa83 	bl	800fb8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <__NVIC_SetPriority>:
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	6039      	str	r1, [r7, #0]
 800c69a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c69c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	db0a      	blt.n	800c6ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	490c      	ldr	r1, [pc, #48]	; (800c6dc <__NVIC_SetPriority+0x4c>)
 800c6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6ae:	0112      	lsls	r2, r2, #4
 800c6b0:	b2d2      	uxtb	r2, r2
 800c6b2:	440b      	add	r3, r1
 800c6b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c6b8:	e00a      	b.n	800c6d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	b2da      	uxtb	r2, r3
 800c6be:	4908      	ldr	r1, [pc, #32]	; (800c6e0 <__NVIC_SetPriority+0x50>)
 800c6c0:	79fb      	ldrb	r3, [r7, #7]
 800c6c2:	f003 030f 	and.w	r3, r3, #15
 800c6c6:	3b04      	subs	r3, #4
 800c6c8:	0112      	lsls	r2, r2, #4
 800c6ca:	b2d2      	uxtb	r2, r2
 800c6cc:	440b      	add	r3, r1
 800c6ce:	761a      	strb	r2, [r3, #24]
}
 800c6d0:	bf00      	nop
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr
 800c6dc:	e000e100 	.word	0xe000e100
 800c6e0:	e000ed00 	.word	0xe000ed00

0800c6e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c6e8:	4b05      	ldr	r3, [pc, #20]	; (800c700 <SysTick_Handler+0x1c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c6ec:	f001 fd4c 	bl	800e188 <xTaskGetSchedulerState>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d001      	beq.n	800c6fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c6f6:	f002 fb37 	bl	800ed68 <xPortSysTickHandler>
  }
}
 800c6fa:	bf00      	nop
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	e000e010 	.word	0xe000e010

0800c704 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c708:	2100      	movs	r1, #0
 800c70a:	f06f 0004 	mvn.w	r0, #4
 800c70e:	f7ff ffbf 	bl	800c690 <__NVIC_SetPriority>
#endif
}
 800c712:	bf00      	nop
 800c714:	bd80      	pop	{r7, pc}
	...

0800c718 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c71e:	f3ef 8305 	mrs	r3, IPSR
 800c722:	603b      	str	r3, [r7, #0]
  return(result);
 800c724:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c726:	2b00      	cmp	r3, #0
 800c728:	d003      	beq.n	800c732 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c72a:	f06f 0305 	mvn.w	r3, #5
 800c72e:	607b      	str	r3, [r7, #4]
 800c730:	e00c      	b.n	800c74c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c732:	4b0a      	ldr	r3, [pc, #40]	; (800c75c <osKernelInitialize+0x44>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d105      	bne.n	800c746 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c73a:	4b08      	ldr	r3, [pc, #32]	; (800c75c <osKernelInitialize+0x44>)
 800c73c:	2201      	movs	r2, #1
 800c73e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c740:	2300      	movs	r3, #0
 800c742:	607b      	str	r3, [r7, #4]
 800c744:	e002      	b.n	800c74c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c746:	f04f 33ff 	mov.w	r3, #4294967295
 800c74a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c74c:	687b      	ldr	r3, [r7, #4]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	200003e0 	.word	0x200003e0

0800c760 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c766:	f3ef 8305 	mrs	r3, IPSR
 800c76a:	603b      	str	r3, [r7, #0]
  return(result);
 800c76c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c772:	f06f 0305 	mvn.w	r3, #5
 800c776:	607b      	str	r3, [r7, #4]
 800c778:	e010      	b.n	800c79c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c77a:	4b0b      	ldr	r3, [pc, #44]	; (800c7a8 <osKernelStart+0x48>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d109      	bne.n	800c796 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c782:	f7ff ffbf 	bl	800c704 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c786:	4b08      	ldr	r3, [pc, #32]	; (800c7a8 <osKernelStart+0x48>)
 800c788:	2202      	movs	r2, #2
 800c78a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c78c:	f001 f880 	bl	800d890 <vTaskStartScheduler>
      stat = osOK;
 800c790:	2300      	movs	r3, #0
 800c792:	607b      	str	r3, [r7, #4]
 800c794:	e002      	b.n	800c79c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c796:	f04f 33ff 	mov.w	r3, #4294967295
 800c79a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c79c:	687b      	ldr	r3, [r7, #4]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	200003e0 	.word	0x200003e0

0800c7ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08e      	sub	sp, #56	; 0x38
 800c7b0:	af04      	add	r7, sp, #16
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7bc:	f3ef 8305 	mrs	r3, IPSR
 800c7c0:	617b      	str	r3, [r7, #20]
  return(result);
 800c7c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d17e      	bne.n	800c8c6 <osThreadNew+0x11a>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d07b      	beq.n	800c8c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c7ce:	2380      	movs	r3, #128	; 0x80
 800c7d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c7d2:	2318      	movs	r3, #24
 800c7d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c7da:	f04f 33ff 	mov.w	r3, #4294967295
 800c7de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d045      	beq.n	800c872 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d002      	beq.n	800c7f4 <osThreadNew+0x48>
        name = attr->name;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d008      	beq.n	800c81a <osThreadNew+0x6e>
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	2b38      	cmp	r3, #56	; 0x38
 800c80c:	d805      	bhi.n	800c81a <osThreadNew+0x6e>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	f003 0301 	and.w	r3, r3, #1
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <osThreadNew+0x72>
        return (NULL);
 800c81a:	2300      	movs	r3, #0
 800c81c:	e054      	b.n	800c8c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d003      	beq.n	800c82e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	089b      	lsrs	r3, r3, #2
 800c82c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00e      	beq.n	800c854 <osThreadNew+0xa8>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	2bbf      	cmp	r3, #191	; 0xbf
 800c83c:	d90a      	bls.n	800c854 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c842:	2b00      	cmp	r3, #0
 800c844:	d006      	beq.n	800c854 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <osThreadNew+0xa8>
        mem = 1;
 800c84e:	2301      	movs	r3, #1
 800c850:	61bb      	str	r3, [r7, #24]
 800c852:	e010      	b.n	800c876 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d10c      	bne.n	800c876 <osThreadNew+0xca>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d108      	bne.n	800c876 <osThreadNew+0xca>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d104      	bne.n	800c876 <osThreadNew+0xca>
          mem = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	61bb      	str	r3, [r7, #24]
 800c870:	e001      	b.n	800c876 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c872:	2300      	movs	r3, #0
 800c874:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d110      	bne.n	800c89e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c884:	9202      	str	r2, [sp, #8]
 800c886:	9301      	str	r3, [sp, #4]
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	9300      	str	r3, [sp, #0]
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	6a3a      	ldr	r2, [r7, #32]
 800c890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f000 fe0c 	bl	800d4b0 <xTaskCreateStatic>
 800c898:	4603      	mov	r3, r0
 800c89a:	613b      	str	r3, [r7, #16]
 800c89c:	e013      	b.n	800c8c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d110      	bne.n	800c8c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	f107 0310 	add.w	r3, r7, #16
 800c8ac:	9301      	str	r3, [sp, #4]
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f000 fe57 	bl	800d56a <xTaskCreate>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d001      	beq.n	800c8c6 <osThreadNew+0x11a>
            hTask = NULL;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c8c6:	693b      	ldr	r3, [r7, #16]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3728      	adds	r7, #40	; 0x28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8d8:	f3ef 8305 	mrs	r3, IPSR
 800c8dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d003      	beq.n	800c8ec <osDelay+0x1c>
    stat = osErrorISR;
 800c8e4:	f06f 0305 	mvn.w	r3, #5
 800c8e8:	60fb      	str	r3, [r7, #12]
 800c8ea:	e007      	b.n	800c8fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d002      	beq.n	800c8fc <osDelay+0x2c>
      vTaskDelay(ticks);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 ff96 	bl	800d828 <vTaskDelay>
    }
  }

  return (stat);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
	...

0800c908 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	4a07      	ldr	r2, [pc, #28]	; (800c934 <vApplicationGetIdleTaskMemory+0x2c>)
 800c918:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	4a06      	ldr	r2, [pc, #24]	; (800c938 <vApplicationGetIdleTaskMemory+0x30>)
 800c91e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2280      	movs	r2, #128	; 0x80
 800c924:	601a      	str	r2, [r3, #0]
}
 800c926:	bf00      	nop
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	200003e4 	.word	0x200003e4
 800c938:	200004a4 	.word	0x200004a4

0800c93c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	4a07      	ldr	r2, [pc, #28]	; (800c968 <vApplicationGetTimerTaskMemory+0x2c>)
 800c94c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	4a06      	ldr	r2, [pc, #24]	; (800c96c <vApplicationGetTimerTaskMemory+0x30>)
 800c952:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c95a:	601a      	str	r2, [r3, #0]
}
 800c95c:	bf00      	nop
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr
 800c968:	200006a4 	.word	0x200006a4
 800c96c:	20000764 	.word	0x20000764

0800c970 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f103 0208 	add.w	r2, r3, #8
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f04f 32ff 	mov.w	r2, #4294967295
 800c988:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f103 0208 	add.w	r2, r3, #8
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f103 0208 	add.w	r2, r3, #8
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9be:	bf00      	nop
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9ca:	b480      	push	{r7}
 800c9cc:	b085      	sub	sp, #20
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	689a      	ldr	r2, [r3, #8]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	683a      	ldr	r2, [r7, #0]
 800c9ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	601a      	str	r2, [r3, #0]
}
 800ca06:	bf00      	nop
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca12:	b480      	push	{r7}
 800ca14:	b085      	sub	sp, #20
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca28:	d103      	bne.n	800ca32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	e00c      	b.n	800ca4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3308      	adds	r3, #8
 800ca36:	60fb      	str	r3, [r7, #12]
 800ca38:	e002      	b.n	800ca40 <vListInsert+0x2e>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	60fb      	str	r3, [r7, #12]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68ba      	ldr	r2, [r7, #8]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d2f6      	bcs.n	800ca3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	683a      	ldr	r2, [r7, #0]
 800ca5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	1c5a      	adds	r2, r3, #1
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	601a      	str	r2, [r3, #0]
}
 800ca78:	bf00      	nop
 800ca7a:	3714      	adds	r7, #20
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	6892      	ldr	r2, [r2, #8]
 800ca9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	6852      	ldr	r2, [r2, #4]
 800caa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	429a      	cmp	r2, r3
 800caae:	d103      	bne.n	800cab8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	689a      	ldr	r2, [r3, #8]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	1e5a      	subs	r2, r3, #1
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb02:	f002 f89f 	bl	800ec44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb0e:	68f9      	ldr	r1, [r7, #12]
 800cb10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb12:	fb01 f303 	mul.w	r3, r1, r3
 800cb16:	441a      	add	r2, r3
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb32:	3b01      	subs	r3, #1
 800cb34:	68f9      	ldr	r1, [r7, #12]
 800cb36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb38:	fb01 f303 	mul.w	r3, r1, r3
 800cb3c:	441a      	add	r2, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	22ff      	movs	r2, #255	; 0xff
 800cb46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	22ff      	movs	r2, #255	; 0xff
 800cb4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d114      	bne.n	800cb82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	691b      	ldr	r3, [r3, #16]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d01a      	beq.n	800cb96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3310      	adds	r3, #16
 800cb64:	4618      	mov	r0, r3
 800cb66:	f001 f94b 	bl	800de00 <xTaskRemoveFromEventList>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d012      	beq.n	800cb96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cb70:	4b0c      	ldr	r3, [pc, #48]	; (800cba4 <xQueueGenericReset+0xcc>)
 800cb72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb76:	601a      	str	r2, [r3, #0]
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	e009      	b.n	800cb96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	3310      	adds	r3, #16
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff fef2 	bl	800c970 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3324      	adds	r3, #36	; 0x24
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7ff feed 	bl	800c970 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cb96:	f002 f885 	bl	800eca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cb9a:	2301      	movs	r3, #1
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	e000ed04 	.word	0xe000ed04

0800cba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b08e      	sub	sp, #56	; 0x38
 800cbac:	af02      	add	r7, sp, #8
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
 800cbb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10a      	bne.n	800cbd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbce:	bf00      	nop
 800cbd0:	e7fe      	b.n	800cbd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d10a      	bne.n	800cbee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbea:	bf00      	nop
 800cbec:	e7fe      	b.n	800cbec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <xQueueGenericCreateStatic+0x52>
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <xQueueGenericCreateStatic+0x56>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e000      	b.n	800cc00 <xQueueGenericCreateStatic+0x58>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d10a      	bne.n	800cc1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc08:	f383 8811 	msr	BASEPRI, r3
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	623b      	str	r3, [r7, #32]
}
 800cc16:	bf00      	nop
 800cc18:	e7fe      	b.n	800cc18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d102      	bne.n	800cc26 <xQueueGenericCreateStatic+0x7e>
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d101      	bne.n	800cc2a <xQueueGenericCreateStatic+0x82>
 800cc26:	2301      	movs	r3, #1
 800cc28:	e000      	b.n	800cc2c <xQueueGenericCreateStatic+0x84>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10a      	bne.n	800cc46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	61fb      	str	r3, [r7, #28]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc46:	2350      	movs	r3, #80	; 0x50
 800cc48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2b50      	cmp	r3, #80	; 0x50
 800cc4e:	d00a      	beq.n	800cc66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	61bb      	str	r3, [r7, #24]
}
 800cc62:	bf00      	nop
 800cc64:	e7fe      	b.n	800cc64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00d      	beq.n	800cc8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc74:	2201      	movs	r2, #1
 800cc76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	4613      	mov	r3, r2
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	68b9      	ldr	r1, [r7, #8]
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f000 f805 	bl	800cc98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3730      	adds	r7, #48	; 0x30
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
 800cca4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d103      	bne.n	800ccb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	69ba      	ldr	r2, [r7, #24]
 800ccb0:	601a      	str	r2, [r3, #0]
 800ccb2:	e002      	b.n	800ccba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	69b8      	ldr	r0, [r7, #24]
 800ccca:	f7ff ff05 	bl	800cad8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	78fa      	ldrb	r2, [r7, #3]
 800ccd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ccd6:	bf00      	nop
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
	...

0800cce0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b08e      	sub	sp, #56	; 0x38
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10a      	bne.n	800cd12 <xQueueGenericSend+0x32>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd0e:	bf00      	nop
 800cd10:	e7fe      	b.n	800cd10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d103      	bne.n	800cd20 <xQueueGenericSend+0x40>
 800cd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d101      	bne.n	800cd24 <xQueueGenericSend+0x44>
 800cd20:	2301      	movs	r3, #1
 800cd22:	e000      	b.n	800cd26 <xQueueGenericSend+0x46>
 800cd24:	2300      	movs	r3, #0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10a      	bne.n	800cd40 <xQueueGenericSend+0x60>
	__asm volatile
 800cd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd3c:	bf00      	nop
 800cd3e:	e7fe      	b.n	800cd3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d103      	bne.n	800cd4e <xQueueGenericSend+0x6e>
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d101      	bne.n	800cd52 <xQueueGenericSend+0x72>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e000      	b.n	800cd54 <xQueueGenericSend+0x74>
 800cd52:	2300      	movs	r3, #0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d10a      	bne.n	800cd6e <xQueueGenericSend+0x8e>
	__asm volatile
 800cd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5c:	f383 8811 	msr	BASEPRI, r3
 800cd60:	f3bf 8f6f 	isb	sy
 800cd64:	f3bf 8f4f 	dsb	sy
 800cd68:	623b      	str	r3, [r7, #32]
}
 800cd6a:	bf00      	nop
 800cd6c:	e7fe      	b.n	800cd6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd6e:	f001 fa0b 	bl	800e188 <xTaskGetSchedulerState>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d102      	bne.n	800cd7e <xQueueGenericSend+0x9e>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <xQueueGenericSend+0xa2>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e000      	b.n	800cd84 <xQueueGenericSend+0xa4>
 800cd82:	2300      	movs	r3, #0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <xQueueGenericSend+0xbe>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	61fb      	str	r3, [r7, #28]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd9e:	f001 ff51 	bl	800ec44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d302      	bcc.n	800cdb4 <xQueueGenericSend+0xd4>
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	d129      	bne.n	800ce08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdb4:	683a      	ldr	r2, [r7, #0]
 800cdb6:	68b9      	ldr	r1, [r7, #8]
 800cdb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdba:	f000 fa0b 	bl	800d1d4 <prvCopyDataToQueue>
 800cdbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d010      	beq.n	800cdea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdca:	3324      	adds	r3, #36	; 0x24
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f001 f817 	bl	800de00 <xTaskRemoveFromEventList>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d013      	beq.n	800ce00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cdd8:	4b3f      	ldr	r3, [pc, #252]	; (800ced8 <xQueueGenericSend+0x1f8>)
 800cdda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdde:	601a      	str	r2, [r3, #0]
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	e00a      	b.n	800ce00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d007      	beq.n	800ce00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cdf0:	4b39      	ldr	r3, [pc, #228]	; (800ced8 <xQueueGenericSend+0x1f8>)
 800cdf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce00:	f001 ff50 	bl	800eca4 <vPortExitCritical>
				return pdPASS;
 800ce04:	2301      	movs	r3, #1
 800ce06:	e063      	b.n	800ced0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d103      	bne.n	800ce16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce0e:	f001 ff49 	bl	800eca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	e05c      	b.n	800ced0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d106      	bne.n	800ce2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce1c:	f107 0314 	add.w	r3, r7, #20
 800ce20:	4618      	mov	r0, r3
 800ce22:	f001 f851 	bl	800dec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce26:	2301      	movs	r3, #1
 800ce28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce2a:	f001 ff3b 	bl	800eca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce2e:	f000 fda1 	bl	800d974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce32:	f001 ff07 	bl	800ec44 <vPortEnterCritical>
 800ce36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce3c:	b25b      	sxtb	r3, r3
 800ce3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce42:	d103      	bne.n	800ce4c <xQueueGenericSend+0x16c>
 800ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce52:	b25b      	sxtb	r3, r3
 800ce54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce58:	d103      	bne.n	800ce62 <xQueueGenericSend+0x182>
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce62:	f001 ff1f 	bl	800eca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce66:	1d3a      	adds	r2, r7, #4
 800ce68:	f107 0314 	add.w	r3, r7, #20
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f001 f840 	bl	800def4 <xTaskCheckForTimeOut>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d124      	bne.n	800cec4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce7c:	f000 faa2 	bl	800d3c4 <prvIsQueueFull>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d018      	beq.n	800ceb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce88:	3310      	adds	r3, #16
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	4611      	mov	r1, r2
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f000 ff66 	bl	800dd60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce96:	f000 fa2d 	bl	800d2f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce9a:	f000 fd79 	bl	800d990 <xTaskResumeAll>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f47f af7c 	bne.w	800cd9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cea6:	4b0c      	ldr	r3, [pc, #48]	; (800ced8 <xQueueGenericSend+0x1f8>)
 800cea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceac:	601a      	str	r2, [r3, #0]
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	e772      	b.n	800cd9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ceb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceba:	f000 fa1b 	bl	800d2f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cebe:	f000 fd67 	bl	800d990 <xTaskResumeAll>
 800cec2:	e76c      	b.n	800cd9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cec6:	f000 fa15 	bl	800d2f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ceca:	f000 fd61 	bl	800d990 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cece:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3738      	adds	r7, #56	; 0x38
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	e000ed04 	.word	0xe000ed04

0800cedc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b090      	sub	sp, #64	; 0x40
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
 800cee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ceee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10a      	bne.n	800cf0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef8:	f383 8811 	msr	BASEPRI, r3
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf06:	bf00      	nop
 800cf08:	e7fe      	b.n	800cf08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d103      	bne.n	800cf18 <xQueueGenericSendFromISR+0x3c>
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <xQueueGenericSendFromISR+0x40>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e000      	b.n	800cf1e <xQueueGenericSendFromISR+0x42>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d10a      	bne.n	800cf38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf34:	bf00      	nop
 800cf36:	e7fe      	b.n	800cf36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d103      	bne.n	800cf46 <xQueueGenericSendFromISR+0x6a>
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d101      	bne.n	800cf4a <xQueueGenericSendFromISR+0x6e>
 800cf46:	2301      	movs	r3, #1
 800cf48:	e000      	b.n	800cf4c <xQueueGenericSendFromISR+0x70>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10a      	bne.n	800cf66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf54:	f383 8811 	msr	BASEPRI, r3
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	f3bf 8f4f 	dsb	sy
 800cf60:	623b      	str	r3, [r7, #32]
}
 800cf62:	bf00      	nop
 800cf64:	e7fe      	b.n	800cf64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf66:	f001 ff4f 	bl	800ee08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf6a:	f3ef 8211 	mrs	r2, BASEPRI
 800cf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	61fa      	str	r2, [r7, #28]
 800cf80:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cf82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d302      	bcc.n	800cf98 <xQueueGenericSendFromISR+0xbc>
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d12f      	bne.n	800cff8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	68b9      	ldr	r1, [r7, #8]
 800cfac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfae:	f000 f911 	bl	800d1d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d112      	bne.n	800cfe2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d016      	beq.n	800cff2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc6:	3324      	adds	r3, #36	; 0x24
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 ff19 	bl	800de00 <xTaskRemoveFromEventList>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00e      	beq.n	800cff2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00b      	beq.n	800cff2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	e007      	b.n	800cff2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cfe2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	b25a      	sxtb	r2, r3
 800cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cff2:	2301      	movs	r3, #1
 800cff4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cff6:	e001      	b.n	800cffc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cff8:	2300      	movs	r3, #0
 800cffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d006:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3740      	adds	r7, #64	; 0x40
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b08c      	sub	sp, #48	; 0x30
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d020:	2300      	movs	r3, #0
 800d022:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10a      	bne.n	800d044 <xQueueReceive+0x30>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	623b      	str	r3, [r7, #32]
}
 800d040:	bf00      	nop
 800d042:	e7fe      	b.n	800d042 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d103      	bne.n	800d052 <xQueueReceive+0x3e>
 800d04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d101      	bne.n	800d056 <xQueueReceive+0x42>
 800d052:	2301      	movs	r3, #1
 800d054:	e000      	b.n	800d058 <xQueueReceive+0x44>
 800d056:	2300      	movs	r3, #0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d10a      	bne.n	800d072 <xQueueReceive+0x5e>
	__asm volatile
 800d05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d060:	f383 8811 	msr	BASEPRI, r3
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	61fb      	str	r3, [r7, #28]
}
 800d06e:	bf00      	nop
 800d070:	e7fe      	b.n	800d070 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d072:	f001 f889 	bl	800e188 <xTaskGetSchedulerState>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d102      	bne.n	800d082 <xQueueReceive+0x6e>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d101      	bne.n	800d086 <xQueueReceive+0x72>
 800d082:	2301      	movs	r3, #1
 800d084:	e000      	b.n	800d088 <xQueueReceive+0x74>
 800d086:	2300      	movs	r3, #0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10a      	bne.n	800d0a2 <xQueueReceive+0x8e>
	__asm volatile
 800d08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d090:	f383 8811 	msr	BASEPRI, r3
 800d094:	f3bf 8f6f 	isb	sy
 800d098:	f3bf 8f4f 	dsb	sy
 800d09c:	61bb      	str	r3, [r7, #24]
}
 800d09e:	bf00      	nop
 800d0a0:	e7fe      	b.n	800d0a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0a2:	f001 fdcf 	bl	800ec44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d01f      	beq.n	800d0f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0b2:	68b9      	ldr	r1, [r7, #8]
 800d0b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0b6:	f000 f8f7 	bl	800d2a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	1e5a      	subs	r2, r3, #1
 800d0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c4:	691b      	ldr	r3, [r3, #16]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00f      	beq.n	800d0ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0cc:	3310      	adds	r3, #16
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 fe96 	bl	800de00 <xTaskRemoveFromEventList>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d007      	beq.n	800d0ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0da:	4b3d      	ldr	r3, [pc, #244]	; (800d1d0 <xQueueReceive+0x1bc>)
 800d0dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e0:	601a      	str	r2, [r3, #0]
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d0ea:	f001 fddb 	bl	800eca4 <vPortExitCritical>
				return pdPASS;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e069      	b.n	800d1c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d103      	bne.n	800d100 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d0f8:	f001 fdd4 	bl	800eca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	e062      	b.n	800d1c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d102:	2b00      	cmp	r3, #0
 800d104:	d106      	bne.n	800d114 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d106:	f107 0310 	add.w	r3, r7, #16
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 fedc 	bl	800dec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d110:	2301      	movs	r3, #1
 800d112:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d114:	f001 fdc6 	bl	800eca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d118:	f000 fc2c 	bl	800d974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d11c:	f001 fd92 	bl	800ec44 <vPortEnterCritical>
 800d120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d126:	b25b      	sxtb	r3, r3
 800d128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12c:	d103      	bne.n	800d136 <xQueueReceive+0x122>
 800d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d130:	2200      	movs	r2, #0
 800d132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d13c:	b25b      	sxtb	r3, r3
 800d13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d142:	d103      	bne.n	800d14c <xQueueReceive+0x138>
 800d144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d146:	2200      	movs	r2, #0
 800d148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d14c:	f001 fdaa 	bl	800eca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d150:	1d3a      	adds	r2, r7, #4
 800d152:	f107 0310 	add.w	r3, r7, #16
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 fecb 	bl	800def4 <xTaskCheckForTimeOut>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d123      	bne.n	800d1ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d166:	f000 f917 	bl	800d398 <prvIsQueueEmpty>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d017      	beq.n	800d1a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	3324      	adds	r3, #36	; 0x24
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	4611      	mov	r1, r2
 800d178:	4618      	mov	r0, r3
 800d17a:	f000 fdf1 	bl	800dd60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d180:	f000 f8b8 	bl	800d2f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d184:	f000 fc04 	bl	800d990 <xTaskResumeAll>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d189      	bne.n	800d0a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d18e:	4b10      	ldr	r3, [pc, #64]	; (800d1d0 <xQueueReceive+0x1bc>)
 800d190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	e780      	b.n	800d0a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1a2:	f000 f8a7 	bl	800d2f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1a6:	f000 fbf3 	bl	800d990 <xTaskResumeAll>
 800d1aa:	e77a      	b.n	800d0a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d1ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ae:	f000 f8a1 	bl	800d2f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1b2:	f000 fbed 	bl	800d990 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1b8:	f000 f8ee 	bl	800d398 <prvIsQueueEmpty>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f43f af6f 	beq.w	800d0a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3730      	adds	r7, #48	; 0x30
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	e000ed04 	.word	0xe000ed04

0800d1d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10d      	bne.n	800d20e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d14d      	bne.n	800d296 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f000 ffe0 	bl	800e1c4 <xTaskPriorityDisinherit>
 800d204:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	609a      	str	r2, [r3, #8]
 800d20c:	e043      	b.n	800d296 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d119      	bne.n	800d248 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6858      	ldr	r0, [r3, #4]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21c:	461a      	mov	r2, r3
 800d21e:	68b9      	ldr	r1, [r7, #8]
 800d220:	f002 fe60 	bl	800fee4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	685a      	ldr	r2, [r3, #4]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d22c:	441a      	add	r2, r3
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	685a      	ldr	r2, [r3, #4]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d32b      	bcc.n	800d296 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	605a      	str	r2, [r3, #4]
 800d246:	e026      	b.n	800d296 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	68d8      	ldr	r0, [r3, #12]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d250:	461a      	mov	r2, r3
 800d252:	68b9      	ldr	r1, [r7, #8]
 800d254:	f002 fe46 	bl	800fee4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	68da      	ldr	r2, [r3, #12]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d260:	425b      	negs	r3, r3
 800d262:	441a      	add	r2, r3
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	68da      	ldr	r2, [r3, #12]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	429a      	cmp	r2, r3
 800d272:	d207      	bcs.n	800d284 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	689a      	ldr	r2, [r3, #8]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27c:	425b      	negs	r3, r3
 800d27e:	441a      	add	r2, r3
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b02      	cmp	r3, #2
 800d288:	d105      	bne.n	800d296 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	3b01      	subs	r3, #1
 800d294:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	1c5a      	adds	r2, r3, #1
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d29e:	697b      	ldr	r3, [r7, #20]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3718      	adds	r7, #24
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d018      	beq.n	800d2ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68da      	ldr	r2, [r3, #12]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c2:	441a      	add	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	68da      	ldr	r2, [r3, #12]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d303      	bcc.n	800d2dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68d9      	ldr	r1, [r3, #12]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	6838      	ldr	r0, [r7, #0]
 800d2e8:	f002 fdfc 	bl	800fee4 <memcpy>
	}
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d2fc:	f001 fca2 	bl	800ec44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d306:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d308:	e011      	b.n	800d32e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d012      	beq.n	800d338 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3324      	adds	r3, #36	; 0x24
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fd72 	bl	800de00 <xTaskRemoveFromEventList>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d322:	f000 fe49 	bl	800dfb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d326:	7bfb      	ldrb	r3, [r7, #15]
 800d328:	3b01      	subs	r3, #1
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d32e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d332:	2b00      	cmp	r3, #0
 800d334:	dce9      	bgt.n	800d30a <prvUnlockQueue+0x16>
 800d336:	e000      	b.n	800d33a <prvUnlockQueue+0x46>
					break;
 800d338:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	22ff      	movs	r2, #255	; 0xff
 800d33e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d342:	f001 fcaf 	bl	800eca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d346:	f001 fc7d 	bl	800ec44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d350:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d352:	e011      	b.n	800d378 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d012      	beq.n	800d382 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	3310      	adds	r3, #16
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fd4d 	bl	800de00 <xTaskRemoveFromEventList>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d36c:	f000 fe24 	bl	800dfb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d370:	7bbb      	ldrb	r3, [r7, #14]
 800d372:	3b01      	subs	r3, #1
 800d374:	b2db      	uxtb	r3, r3
 800d376:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	dce9      	bgt.n	800d354 <prvUnlockQueue+0x60>
 800d380:	e000      	b.n	800d384 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d382:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	22ff      	movs	r2, #255	; 0xff
 800d388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d38c:	f001 fc8a 	bl	800eca4 <vPortExitCritical>
}
 800d390:	bf00      	nop
 800d392:	3710      	adds	r7, #16
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3a0:	f001 fc50 	bl	800ec44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d102      	bne.n	800d3b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	60fb      	str	r3, [r7, #12]
 800d3b0:	e001      	b.n	800d3b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3b6:	f001 fc75 	bl	800eca4 <vPortExitCritical>

	return xReturn;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3cc:	f001 fc3a 	bl	800ec44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d102      	bne.n	800d3e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	e001      	b.n	800d3e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3e6:	f001 fc5d 	bl	800eca4 <vPortExitCritical>

	return xReturn;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3710      	adds	r7, #16
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	e014      	b.n	800d42e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d404:	4a0f      	ldr	r2, [pc, #60]	; (800d444 <vQueueAddToRegistry+0x50>)
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10b      	bne.n	800d428 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d410:	490c      	ldr	r1, [pc, #48]	; (800d444 <vQueueAddToRegistry+0x50>)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	683a      	ldr	r2, [r7, #0]
 800d416:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d41a:	4a0a      	ldr	r2, [pc, #40]	; (800d444 <vQueueAddToRegistry+0x50>)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	00db      	lsls	r3, r3, #3
 800d420:	4413      	add	r3, r2
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d426:	e006      	b.n	800d436 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	3301      	adds	r3, #1
 800d42c:	60fb      	str	r3, [r7, #12]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b07      	cmp	r3, #7
 800d432:	d9e7      	bls.n	800d404 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d434:	bf00      	nop
 800d436:	bf00      	nop
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	20000b64 	.word	0x20000b64

0800d448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b086      	sub	sp, #24
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d458:	f001 fbf4 	bl	800ec44 <vPortEnterCritical>
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d462:	b25b      	sxtb	r3, r3
 800d464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d468:	d103      	bne.n	800d472 <vQueueWaitForMessageRestricted+0x2a>
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2200      	movs	r2, #0
 800d46e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d478:	b25b      	sxtb	r3, r3
 800d47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d47e:	d103      	bne.n	800d488 <vQueueWaitForMessageRestricted+0x40>
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	2200      	movs	r2, #0
 800d484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d488:	f001 fc0c 	bl	800eca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d490:	2b00      	cmp	r3, #0
 800d492:	d106      	bne.n	800d4a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	3324      	adds	r3, #36	; 0x24
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	68b9      	ldr	r1, [r7, #8]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f000 fc83 	bl	800dda8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d4a2:	6978      	ldr	r0, [r7, #20]
 800d4a4:	f7ff ff26 	bl	800d2f4 <prvUnlockQueue>
	}
 800d4a8:	bf00      	nop
 800d4aa:	3718      	adds	r7, #24
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b08e      	sub	sp, #56	; 0x38
 800d4b4:	af04      	add	r7, sp, #16
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	607a      	str	r2, [r7, #4]
 800d4bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10a      	bne.n	800d4da <xTaskCreateStatic+0x2a>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	623b      	str	r3, [r7, #32]
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d10a      	bne.n	800d4f6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	61fb      	str	r3, [r7, #28]
}
 800d4f2:	bf00      	nop
 800d4f4:	e7fe      	b.n	800d4f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d4f6:	23c0      	movs	r3, #192	; 0xc0
 800d4f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	2bc0      	cmp	r3, #192	; 0xc0
 800d4fe:	d00a      	beq.n	800d516 <xTaskCreateStatic+0x66>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	61bb      	str	r3, [r7, #24]
}
 800d512:	bf00      	nop
 800d514:	e7fe      	b.n	800d514 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d516:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d01e      	beq.n	800d55c <xTaskCreateStatic+0xac>
 800d51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d520:	2b00      	cmp	r3, #0
 800d522:	d01b      	beq.n	800d55c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d526:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d52c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d530:	2202      	movs	r2, #2
 800d532:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d536:	2300      	movs	r3, #0
 800d538:	9303      	str	r3, [sp, #12]
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53c:	9302      	str	r3, [sp, #8]
 800d53e:	f107 0314 	add.w	r3, r7, #20
 800d542:	9301      	str	r3, [sp, #4]
 800d544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	68b9      	ldr	r1, [r7, #8]
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f000 f850 	bl	800d5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d556:	f000 f8f7 	bl	800d748 <prvAddNewTaskToReadyList>
 800d55a:	e001      	b.n	800d560 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d55c:	2300      	movs	r3, #0
 800d55e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d560:	697b      	ldr	r3, [r7, #20]
	}
 800d562:	4618      	mov	r0, r3
 800d564:	3728      	adds	r7, #40	; 0x28
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b08c      	sub	sp, #48	; 0x30
 800d56e:	af04      	add	r7, sp, #16
 800d570:	60f8      	str	r0, [r7, #12]
 800d572:	60b9      	str	r1, [r7, #8]
 800d574:	603b      	str	r3, [r7, #0]
 800d576:	4613      	mov	r3, r2
 800d578:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d57a:	88fb      	ldrh	r3, [r7, #6]
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	4618      	mov	r0, r3
 800d580:	f001 fc82 	bl	800ee88 <pvPortMalloc>
 800d584:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00e      	beq.n	800d5aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d58c:	20c0      	movs	r0, #192	; 0xc0
 800d58e:	f001 fc7b 	bl	800ee88 <pvPortMalloc>
 800d592:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d003      	beq.n	800d5a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	697a      	ldr	r2, [r7, #20]
 800d59e:	631a      	str	r2, [r3, #48]	; 0x30
 800d5a0:	e005      	b.n	800d5ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d5a2:	6978      	ldr	r0, [r7, #20]
 800d5a4:	f001 fd3c 	bl	800f020 <vPortFree>
 800d5a8:	e001      	b.n	800d5ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d017      	beq.n	800d5e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d5bc:	88fa      	ldrh	r2, [r7, #6]
 800d5be:	2300      	movs	r3, #0
 800d5c0:	9303      	str	r3, [sp, #12]
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	9302      	str	r3, [sp, #8]
 800d5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c8:	9301      	str	r3, [sp, #4]
 800d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	68b9      	ldr	r1, [r7, #8]
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f000 f80e 	bl	800d5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5d8:	69f8      	ldr	r0, [r7, #28]
 800d5da:	f000 f8b5 	bl	800d748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	61bb      	str	r3, [r7, #24]
 800d5e2:	e002      	b.n	800d5ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d5e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d5ea:	69bb      	ldr	r3, [r7, #24]
	}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3720      	adds	r7, #32
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b088      	sub	sp, #32
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
 800d600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	461a      	mov	r2, r3
 800d60c:	21a5      	movs	r1, #165	; 0xa5
 800d60e:	f002 fc77 	bl	800ff00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d61c:	3b01      	subs	r3, #1
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	4413      	add	r3, r2
 800d622:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	f023 0307 	bic.w	r3, r3, #7
 800d62a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	f003 0307 	and.w	r3, r3, #7
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00a      	beq.n	800d64c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	617b      	str	r3, [r7, #20]
}
 800d648:	bf00      	nop
 800d64a:	e7fe      	b.n	800d64a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d01f      	beq.n	800d692 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d652:	2300      	movs	r3, #0
 800d654:	61fb      	str	r3, [r7, #28]
 800d656:	e012      	b.n	800d67e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	4413      	add	r3, r2
 800d65e:	7819      	ldrb	r1, [r3, #0]
 800d660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	4413      	add	r3, r2
 800d666:	3334      	adds	r3, #52	; 0x34
 800d668:	460a      	mov	r2, r1
 800d66a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d66c:	68ba      	ldr	r2, [r7, #8]
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	4413      	add	r3, r2
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d006      	beq.n	800d686 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	3301      	adds	r3, #1
 800d67c:	61fb      	str	r3, [r7, #28]
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	2b0f      	cmp	r3, #15
 800d682:	d9e9      	bls.n	800d658 <prvInitialiseNewTask+0x64>
 800d684:	e000      	b.n	800d688 <prvInitialiseNewTask+0x94>
			{
				break;
 800d686:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68a:	2200      	movs	r2, #0
 800d68c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d690:	e003      	b.n	800d69a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d694:	2200      	movs	r2, #0
 800d696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69c:	2b37      	cmp	r3, #55	; 0x37
 800d69e:	d901      	bls.n	800d6a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d6a0:	2337      	movs	r3, #55	; 0x37
 800d6a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b8:	3304      	adds	r3, #4
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7ff f978 	bl	800c9b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c2:	3318      	adds	r3, #24
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7ff f973 	bl	800c9b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f8:	3358      	adds	r3, #88	; 0x58
 800d6fa:	2260      	movs	r2, #96	; 0x60
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	4618      	mov	r0, r3
 800d700:	f002 fbfe 	bl	800ff00 <memset>
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	4a0d      	ldr	r2, [pc, #52]	; (800d73c <prvInitialiseNewTask+0x148>)
 800d708:	65da      	str	r2, [r3, #92]	; 0x5c
 800d70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70c:	4a0c      	ldr	r2, [pc, #48]	; (800d740 <prvInitialiseNewTask+0x14c>)
 800d70e:	661a      	str	r2, [r3, #96]	; 0x60
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	4a0c      	ldr	r2, [pc, #48]	; (800d744 <prvInitialiseNewTask+0x150>)
 800d714:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	68f9      	ldr	r1, [r7, #12]
 800d71a:	69b8      	ldr	r0, [r7, #24]
 800d71c:	f001 f962 	bl	800e9e4 <pxPortInitialiseStack>
 800d720:	4602      	mov	r2, r0
 800d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d724:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d002      	beq.n	800d732 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d732:	bf00      	nop
 800d734:	3720      	adds	r7, #32
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	08013e68 	.word	0x08013e68
 800d740:	08013e88 	.word	0x08013e88
 800d744:	08013e48 	.word	0x08013e48

0800d748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d750:	f001 fa78 	bl	800ec44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d754:	4b2d      	ldr	r3, [pc, #180]	; (800d80c <prvAddNewTaskToReadyList+0xc4>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	3301      	adds	r3, #1
 800d75a:	4a2c      	ldr	r2, [pc, #176]	; (800d80c <prvAddNewTaskToReadyList+0xc4>)
 800d75c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d75e:	4b2c      	ldr	r3, [pc, #176]	; (800d810 <prvAddNewTaskToReadyList+0xc8>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d109      	bne.n	800d77a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d766:	4a2a      	ldr	r2, [pc, #168]	; (800d810 <prvAddNewTaskToReadyList+0xc8>)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d76c:	4b27      	ldr	r3, [pc, #156]	; (800d80c <prvAddNewTaskToReadyList+0xc4>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d110      	bne.n	800d796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d774:	f000 fc46 	bl	800e004 <prvInitialiseTaskLists>
 800d778:	e00d      	b.n	800d796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d77a:	4b26      	ldr	r3, [pc, #152]	; (800d814 <prvAddNewTaskToReadyList+0xcc>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d109      	bne.n	800d796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d782:	4b23      	ldr	r3, [pc, #140]	; (800d810 <prvAddNewTaskToReadyList+0xc8>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d802      	bhi.n	800d796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d790:	4a1f      	ldr	r2, [pc, #124]	; (800d810 <prvAddNewTaskToReadyList+0xc8>)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d796:	4b20      	ldr	r3, [pc, #128]	; (800d818 <prvAddNewTaskToReadyList+0xd0>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	3301      	adds	r3, #1
 800d79c:	4a1e      	ldr	r2, [pc, #120]	; (800d818 <prvAddNewTaskToReadyList+0xd0>)
 800d79e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d7a0:	4b1d      	ldr	r3, [pc, #116]	; (800d818 <prvAddNewTaskToReadyList+0xd0>)
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ac:	4b1b      	ldr	r3, [pc, #108]	; (800d81c <prvAddNewTaskToReadyList+0xd4>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d903      	bls.n	800d7bc <prvAddNewTaskToReadyList+0x74>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b8:	4a18      	ldr	r2, [pc, #96]	; (800d81c <prvAddNewTaskToReadyList+0xd4>)
 800d7ba:	6013      	str	r3, [r2, #0]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4413      	add	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4a15      	ldr	r2, [pc, #84]	; (800d820 <prvAddNewTaskToReadyList+0xd8>)
 800d7ca:	441a      	add	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	4610      	mov	r0, r2
 800d7d4:	f7ff f8f9 	bl	800c9ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d7d8:	f001 fa64 	bl	800eca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d7dc:	4b0d      	ldr	r3, [pc, #52]	; (800d814 <prvAddNewTaskToReadyList+0xcc>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00e      	beq.n	800d802 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d7e4:	4b0a      	ldr	r3, [pc, #40]	; (800d810 <prvAddNewTaskToReadyList+0xc8>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d207      	bcs.n	800d802 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d7f2:	4b0c      	ldr	r3, [pc, #48]	; (800d824 <prvAddNewTaskToReadyList+0xdc>)
 800d7f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d802:	bf00      	nop
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	20001078 	.word	0x20001078
 800d810:	20000ba4 	.word	0x20000ba4
 800d814:	20001084 	.word	0x20001084
 800d818:	20001094 	.word	0x20001094
 800d81c:	20001080 	.word	0x20001080
 800d820:	20000ba8 	.word	0x20000ba8
 800d824:	e000ed04 	.word	0xe000ed04

0800d828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d830:	2300      	movs	r3, #0
 800d832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d017      	beq.n	800d86a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d83a:	4b13      	ldr	r3, [pc, #76]	; (800d888 <vTaskDelay+0x60>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00a      	beq.n	800d858 <vTaskDelay+0x30>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	60bb      	str	r3, [r7, #8]
}
 800d854:	bf00      	nop
 800d856:	e7fe      	b.n	800d856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d858:	f000 f88c 	bl	800d974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d85c:	2100      	movs	r1, #0
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 fd1e 	bl	800e2a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d864:	f000 f894 	bl	800d990 <xTaskResumeAll>
 800d868:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d107      	bne.n	800d880 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d870:	4b06      	ldr	r3, [pc, #24]	; (800d88c <vTaskDelay+0x64>)
 800d872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d876:	601a      	str	r2, [r3, #0]
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d880:	bf00      	nop
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	200010a0 	.word	0x200010a0
 800d88c:	e000ed04 	.word	0xe000ed04

0800d890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b08a      	sub	sp, #40	; 0x28
 800d894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d896:	2300      	movs	r3, #0
 800d898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d89a:	2300      	movs	r3, #0
 800d89c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d89e:	463a      	mov	r2, r7
 800d8a0:	1d39      	adds	r1, r7, #4
 800d8a2:	f107 0308 	add.w	r3, r7, #8
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7ff f82e 	bl	800c908 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	9202      	str	r2, [sp, #8]
 800d8b4:	9301      	str	r3, [sp, #4]
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	460a      	mov	r2, r1
 800d8be:	4925      	ldr	r1, [pc, #148]	; (800d954 <vTaskStartScheduler+0xc4>)
 800d8c0:	4825      	ldr	r0, [pc, #148]	; (800d958 <vTaskStartScheduler+0xc8>)
 800d8c2:	f7ff fdf5 	bl	800d4b0 <xTaskCreateStatic>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	4a24      	ldr	r2, [pc, #144]	; (800d95c <vTaskStartScheduler+0xcc>)
 800d8ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d8cc:	4b23      	ldr	r3, [pc, #140]	; (800d95c <vTaskStartScheduler+0xcc>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	617b      	str	r3, [r7, #20]
 800d8d8:	e001      	b.n	800d8de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d102      	bne.n	800d8ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d8e4:	f000 fd30 	bl	800e348 <xTimerCreateTimerTask>
 800d8e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d11d      	bne.n	800d92c <vTaskStartScheduler+0x9c>
	__asm volatile
 800d8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	613b      	str	r3, [r7, #16]
}
 800d902:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d904:	4b16      	ldr	r3, [pc, #88]	; (800d960 <vTaskStartScheduler+0xd0>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	3358      	adds	r3, #88	; 0x58
 800d90a:	4a16      	ldr	r2, [pc, #88]	; (800d964 <vTaskStartScheduler+0xd4>)
 800d90c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d90e:	4b16      	ldr	r3, [pc, #88]	; (800d968 <vTaskStartScheduler+0xd8>)
 800d910:	f04f 32ff 	mov.w	r2, #4294967295
 800d914:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d916:	4b15      	ldr	r3, [pc, #84]	; (800d96c <vTaskStartScheduler+0xdc>)
 800d918:	2201      	movs	r2, #1
 800d91a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d91c:	4b14      	ldr	r3, [pc, #80]	; (800d970 <vTaskStartScheduler+0xe0>)
 800d91e:	2200      	movs	r2, #0
 800d920:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d922:	f7f2 ff7a 	bl	800081a <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d926:	f001 f8eb 	bl	800eb00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d92a:	e00e      	b.n	800d94a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d932:	d10a      	bne.n	800d94a <vTaskStartScheduler+0xba>
	__asm volatile
 800d934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d938:	f383 8811 	msr	BASEPRI, r3
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	60fb      	str	r3, [r7, #12]
}
 800d946:	bf00      	nop
 800d948:	e7fe      	b.n	800d948 <vTaskStartScheduler+0xb8>
}
 800d94a:	bf00      	nop
 800d94c:	3718      	adds	r7, #24
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	080114b0 	.word	0x080114b0
 800d958:	0800dfd1 	.word	0x0800dfd1
 800d95c:	2000109c 	.word	0x2000109c
 800d960:	20000ba4 	.word	0x20000ba4
 800d964:	2000016c 	.word	0x2000016c
 800d968:	20001098 	.word	0x20001098
 800d96c:	20001084 	.word	0x20001084
 800d970:	2000107c 	.word	0x2000107c

0800d974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d974:	b480      	push	{r7}
 800d976:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d978:	4b04      	ldr	r3, [pc, #16]	; (800d98c <vTaskSuspendAll+0x18>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3301      	adds	r3, #1
 800d97e:	4a03      	ldr	r2, [pc, #12]	; (800d98c <vTaskSuspendAll+0x18>)
 800d980:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d982:	bf00      	nop
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr
 800d98c:	200010a0 	.word	0x200010a0

0800d990 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d996:	2300      	movs	r3, #0
 800d998:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d99a:	2300      	movs	r3, #0
 800d99c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d99e:	4b42      	ldr	r3, [pc, #264]	; (800daa8 <xTaskResumeAll+0x118>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10a      	bne.n	800d9bc <xTaskResumeAll+0x2c>
	__asm volatile
 800d9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
 800d9b6:	603b      	str	r3, [r7, #0]
}
 800d9b8:	bf00      	nop
 800d9ba:	e7fe      	b.n	800d9ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d9bc:	f001 f942 	bl	800ec44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d9c0:	4b39      	ldr	r3, [pc, #228]	; (800daa8 <xTaskResumeAll+0x118>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	3b01      	subs	r3, #1
 800d9c6:	4a38      	ldr	r2, [pc, #224]	; (800daa8 <xTaskResumeAll+0x118>)
 800d9c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9ca:	4b37      	ldr	r3, [pc, #220]	; (800daa8 <xTaskResumeAll+0x118>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d162      	bne.n	800da98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d9d2:	4b36      	ldr	r3, [pc, #216]	; (800daac <xTaskResumeAll+0x11c>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d05e      	beq.n	800da98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9da:	e02f      	b.n	800da3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9dc:	4b34      	ldr	r3, [pc, #208]	; (800dab0 <xTaskResumeAll+0x120>)
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	3318      	adds	r3, #24
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7ff f84b 	bl	800ca84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7ff f846 	bl	800ca84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9fc:	4b2d      	ldr	r3, [pc, #180]	; (800dab4 <xTaskResumeAll+0x124>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	429a      	cmp	r2, r3
 800da02:	d903      	bls.n	800da0c <xTaskResumeAll+0x7c>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da08:	4a2a      	ldr	r2, [pc, #168]	; (800dab4 <xTaskResumeAll+0x124>)
 800da0a:	6013      	str	r3, [r2, #0]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da10:	4613      	mov	r3, r2
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	4413      	add	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4a27      	ldr	r2, [pc, #156]	; (800dab8 <xTaskResumeAll+0x128>)
 800da1a:	441a      	add	r2, r3
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	3304      	adds	r3, #4
 800da20:	4619      	mov	r1, r3
 800da22:	4610      	mov	r0, r2
 800da24:	f7fe ffd1 	bl	800c9ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da2c:	4b23      	ldr	r3, [pc, #140]	; (800dabc <xTaskResumeAll+0x12c>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da32:	429a      	cmp	r2, r3
 800da34:	d302      	bcc.n	800da3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800da36:	4b22      	ldr	r3, [pc, #136]	; (800dac0 <xTaskResumeAll+0x130>)
 800da38:	2201      	movs	r2, #1
 800da3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da3c:	4b1c      	ldr	r3, [pc, #112]	; (800dab0 <xTaskResumeAll+0x120>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1cb      	bne.n	800d9dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da4a:	f000 fb7d 	bl	800e148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800da4e:	4b1d      	ldr	r3, [pc, #116]	; (800dac4 <xTaskResumeAll+0x134>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d010      	beq.n	800da7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da5a:	f000 f847 	bl	800daec <xTaskIncrementTick>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d002      	beq.n	800da6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800da64:	4b16      	ldr	r3, [pc, #88]	; (800dac0 <xTaskResumeAll+0x130>)
 800da66:	2201      	movs	r2, #1
 800da68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	3b01      	subs	r3, #1
 800da6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1f1      	bne.n	800da5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800da76:	4b13      	ldr	r3, [pc, #76]	; (800dac4 <xTaskResumeAll+0x134>)
 800da78:	2200      	movs	r2, #0
 800da7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800da7c:	4b10      	ldr	r3, [pc, #64]	; (800dac0 <xTaskResumeAll+0x130>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d009      	beq.n	800da98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800da84:	2301      	movs	r3, #1
 800da86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800da88:	4b0f      	ldr	r3, [pc, #60]	; (800dac8 <xTaskResumeAll+0x138>)
 800da8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da98:	f001 f904 	bl	800eca4 <vPortExitCritical>

	return xAlreadyYielded;
 800da9c:	68bb      	ldr	r3, [r7, #8]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	200010a0 	.word	0x200010a0
 800daac:	20001078 	.word	0x20001078
 800dab0:	20001038 	.word	0x20001038
 800dab4:	20001080 	.word	0x20001080
 800dab8:	20000ba8 	.word	0x20000ba8
 800dabc:	20000ba4 	.word	0x20000ba4
 800dac0:	2000108c 	.word	0x2000108c
 800dac4:	20001088 	.word	0x20001088
 800dac8:	e000ed04 	.word	0xe000ed04

0800dacc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dad2:	4b05      	ldr	r3, [pc, #20]	; (800dae8 <xTaskGetTickCount+0x1c>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dad8:	687b      	ldr	r3, [r7, #4]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	370c      	adds	r7, #12
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	2000107c 	.word	0x2000107c

0800daec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b086      	sub	sp, #24
 800daf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800daf2:	2300      	movs	r3, #0
 800daf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daf6:	4b4f      	ldr	r3, [pc, #316]	; (800dc34 <xTaskIncrementTick+0x148>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f040 808f 	bne.w	800dc1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db00:	4b4d      	ldr	r3, [pc, #308]	; (800dc38 <xTaskIncrementTick+0x14c>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	3301      	adds	r3, #1
 800db06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db08:	4a4b      	ldr	r2, [pc, #300]	; (800dc38 <xTaskIncrementTick+0x14c>)
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d120      	bne.n	800db56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800db14:	4b49      	ldr	r3, [pc, #292]	; (800dc3c <xTaskIncrementTick+0x150>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00a      	beq.n	800db34 <xTaskIncrementTick+0x48>
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	603b      	str	r3, [r7, #0]
}
 800db30:	bf00      	nop
 800db32:	e7fe      	b.n	800db32 <xTaskIncrementTick+0x46>
 800db34:	4b41      	ldr	r3, [pc, #260]	; (800dc3c <xTaskIncrementTick+0x150>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	60fb      	str	r3, [r7, #12]
 800db3a:	4b41      	ldr	r3, [pc, #260]	; (800dc40 <xTaskIncrementTick+0x154>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a3f      	ldr	r2, [pc, #252]	; (800dc3c <xTaskIncrementTick+0x150>)
 800db40:	6013      	str	r3, [r2, #0]
 800db42:	4a3f      	ldr	r2, [pc, #252]	; (800dc40 <xTaskIncrementTick+0x154>)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6013      	str	r3, [r2, #0]
 800db48:	4b3e      	ldr	r3, [pc, #248]	; (800dc44 <xTaskIncrementTick+0x158>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	3301      	adds	r3, #1
 800db4e:	4a3d      	ldr	r2, [pc, #244]	; (800dc44 <xTaskIncrementTick+0x158>)
 800db50:	6013      	str	r3, [r2, #0]
 800db52:	f000 faf9 	bl	800e148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db56:	4b3c      	ldr	r3, [pc, #240]	; (800dc48 <xTaskIncrementTick+0x15c>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	693a      	ldr	r2, [r7, #16]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d349      	bcc.n	800dbf4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db60:	4b36      	ldr	r3, [pc, #216]	; (800dc3c <xTaskIncrementTick+0x150>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d104      	bne.n	800db74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db6a:	4b37      	ldr	r3, [pc, #220]	; (800dc48 <xTaskIncrementTick+0x15c>)
 800db6c:	f04f 32ff 	mov.w	r2, #4294967295
 800db70:	601a      	str	r2, [r3, #0]
					break;
 800db72:	e03f      	b.n	800dbf4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db74:	4b31      	ldr	r3, [pc, #196]	; (800dc3c <xTaskIncrementTick+0x150>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800db84:	693a      	ldr	r2, [r7, #16]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d203      	bcs.n	800db94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800db8c:	4a2e      	ldr	r2, [pc, #184]	; (800dc48 <xTaskIncrementTick+0x15c>)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800db92:	e02f      	b.n	800dbf4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	3304      	adds	r3, #4
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fe ff73 	bl	800ca84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d004      	beq.n	800dbb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	3318      	adds	r3, #24
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fe ff6a 	bl	800ca84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb4:	4b25      	ldr	r3, [pc, #148]	; (800dc4c <xTaskIncrementTick+0x160>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d903      	bls.n	800dbc4 <xTaskIncrementTick+0xd8>
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc0:	4a22      	ldr	r2, [pc, #136]	; (800dc4c <xTaskIncrementTick+0x160>)
 800dbc2:	6013      	str	r3, [r2, #0]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc8:	4613      	mov	r3, r2
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	4413      	add	r3, r2
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4a1f      	ldr	r2, [pc, #124]	; (800dc50 <xTaskIncrementTick+0x164>)
 800dbd2:	441a      	add	r2, r3
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	3304      	adds	r3, #4
 800dbd8:	4619      	mov	r1, r3
 800dbda:	4610      	mov	r0, r2
 800dbdc:	f7fe fef5 	bl	800c9ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe4:	4b1b      	ldr	r3, [pc, #108]	; (800dc54 <xTaskIncrementTick+0x168>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d3b8      	bcc.n	800db60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbf2:	e7b5      	b.n	800db60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dbf4:	4b17      	ldr	r3, [pc, #92]	; (800dc54 <xTaskIncrementTick+0x168>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfa:	4915      	ldr	r1, [pc, #84]	; (800dc50 <xTaskIncrementTick+0x164>)
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4413      	add	r3, r2
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	440b      	add	r3, r1
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d901      	bls.n	800dc10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc10:	4b11      	ldr	r3, [pc, #68]	; (800dc58 <xTaskIncrementTick+0x16c>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d007      	beq.n	800dc28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	617b      	str	r3, [r7, #20]
 800dc1c:	e004      	b.n	800dc28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc1e:	4b0f      	ldr	r3, [pc, #60]	; (800dc5c <xTaskIncrementTick+0x170>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	3301      	adds	r3, #1
 800dc24:	4a0d      	ldr	r2, [pc, #52]	; (800dc5c <xTaskIncrementTick+0x170>)
 800dc26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc28:	697b      	ldr	r3, [r7, #20]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3718      	adds	r7, #24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	200010a0 	.word	0x200010a0
 800dc38:	2000107c 	.word	0x2000107c
 800dc3c:	20001030 	.word	0x20001030
 800dc40:	20001034 	.word	0x20001034
 800dc44:	20001090 	.word	0x20001090
 800dc48:	20001098 	.word	0x20001098
 800dc4c:	20001080 	.word	0x20001080
 800dc50:	20000ba8 	.word	0x20000ba8
 800dc54:	20000ba4 	.word	0x20000ba4
 800dc58:	2000108c 	.word	0x2000108c
 800dc5c:	20001088 	.word	0x20001088

0800dc60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc66:	4b36      	ldr	r3, [pc, #216]	; (800dd40 <vTaskSwitchContext+0xe0>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d003      	beq.n	800dc76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc6e:	4b35      	ldr	r3, [pc, #212]	; (800dd44 <vTaskSwitchContext+0xe4>)
 800dc70:	2201      	movs	r2, #1
 800dc72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc74:	e05f      	b.n	800dd36 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800dc76:	4b33      	ldr	r3, [pc, #204]	; (800dd44 <vTaskSwitchContext+0xe4>)
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800dc7c:	f7f2 fdd4 	bl	8000828 <getRunTimeCounterValue>
 800dc80:	4603      	mov	r3, r0
 800dc82:	4a31      	ldr	r2, [pc, #196]	; (800dd48 <vTaskSwitchContext+0xe8>)
 800dc84:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800dc86:	4b30      	ldr	r3, [pc, #192]	; (800dd48 <vTaskSwitchContext+0xe8>)
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	4b30      	ldr	r3, [pc, #192]	; (800dd4c <vTaskSwitchContext+0xec>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d909      	bls.n	800dca6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800dc92:	4b2f      	ldr	r3, [pc, #188]	; (800dd50 <vTaskSwitchContext+0xf0>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dc98:	4a2b      	ldr	r2, [pc, #172]	; (800dd48 <vTaskSwitchContext+0xe8>)
 800dc9a:	6810      	ldr	r0, [r2, #0]
 800dc9c:	4a2b      	ldr	r2, [pc, #172]	; (800dd4c <vTaskSwitchContext+0xec>)
 800dc9e:	6812      	ldr	r2, [r2, #0]
 800dca0:	1a82      	subs	r2, r0, r2
 800dca2:	440a      	add	r2, r1
 800dca4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800dca6:	4b28      	ldr	r3, [pc, #160]	; (800dd48 <vTaskSwitchContext+0xe8>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a28      	ldr	r2, [pc, #160]	; (800dd4c <vTaskSwitchContext+0xec>)
 800dcac:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcae:	4b29      	ldr	r3, [pc, #164]	; (800dd54 <vTaskSwitchContext+0xf4>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	60fb      	str	r3, [r7, #12]
 800dcb4:	e010      	b.n	800dcd8 <vTaskSwitchContext+0x78>
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d10a      	bne.n	800dcd2 <vTaskSwitchContext+0x72>
	__asm volatile
 800dcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	607b      	str	r3, [r7, #4]
}
 800dcce:	bf00      	nop
 800dcd0:	e7fe      	b.n	800dcd0 <vTaskSwitchContext+0x70>
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	3b01      	subs	r3, #1
 800dcd6:	60fb      	str	r3, [r7, #12]
 800dcd8:	491f      	ldr	r1, [pc, #124]	; (800dd58 <vTaskSwitchContext+0xf8>)
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	4613      	mov	r3, r2
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	4413      	add	r3, r2
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	440b      	add	r3, r1
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d0e4      	beq.n	800dcb6 <vTaskSwitchContext+0x56>
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	4413      	add	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4a18      	ldr	r2, [pc, #96]	; (800dd58 <vTaskSwitchContext+0xf8>)
 800dcf8:	4413      	add	r3, r2
 800dcfa:	60bb      	str	r3, [r7, #8]
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	685a      	ldr	r2, [r3, #4]
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	605a      	str	r2, [r3, #4]
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	685a      	ldr	r2, [r3, #4]
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	3308      	adds	r3, #8
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d104      	bne.n	800dd1c <vTaskSwitchContext+0xbc>
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	685a      	ldr	r2, [r3, #4]
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	605a      	str	r2, [r3, #4]
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	4a0b      	ldr	r2, [pc, #44]	; (800dd50 <vTaskSwitchContext+0xf0>)
 800dd24:	6013      	str	r3, [r2, #0]
 800dd26:	4a0b      	ldr	r2, [pc, #44]	; (800dd54 <vTaskSwitchContext+0xf4>)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd2c:	4b08      	ldr	r3, [pc, #32]	; (800dd50 <vTaskSwitchContext+0xf0>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	3358      	adds	r3, #88	; 0x58
 800dd32:	4a0a      	ldr	r2, [pc, #40]	; (800dd5c <vTaskSwitchContext+0xfc>)
 800dd34:	6013      	str	r3, [r2, #0]
}
 800dd36:	bf00      	nop
 800dd38:	3710      	adds	r7, #16
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	200010a0 	.word	0x200010a0
 800dd44:	2000108c 	.word	0x2000108c
 800dd48:	200010a8 	.word	0x200010a8
 800dd4c:	200010a4 	.word	0x200010a4
 800dd50:	20000ba4 	.word	0x20000ba4
 800dd54:	20001080 	.word	0x20001080
 800dd58:	20000ba8 	.word	0x20000ba8
 800dd5c:	2000016c 	.word	0x2000016c

0800dd60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10a      	bne.n	800dd86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	60fb      	str	r3, [r7, #12]
}
 800dd82:	bf00      	nop
 800dd84:	e7fe      	b.n	800dd84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd86:	4b07      	ldr	r3, [pc, #28]	; (800dda4 <vTaskPlaceOnEventList+0x44>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	3318      	adds	r3, #24
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7fe fe3f 	bl	800ca12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd94:	2101      	movs	r1, #1
 800dd96:	6838      	ldr	r0, [r7, #0]
 800dd98:	f000 fa82 	bl	800e2a0 <prvAddCurrentTaskToDelayedList>
}
 800dd9c:	bf00      	nop
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	20000ba4 	.word	0x20000ba4

0800dda8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b086      	sub	sp, #24
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10a      	bne.n	800ddd0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	617b      	str	r3, [r7, #20]
}
 800ddcc:	bf00      	nop
 800ddce:	e7fe      	b.n	800ddce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddd0:	4b0a      	ldr	r3, [pc, #40]	; (800ddfc <vTaskPlaceOnEventListRestricted+0x54>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	3318      	adds	r3, #24
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f7fe fdf6 	bl	800c9ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d002      	beq.n	800ddea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dde4:	f04f 33ff 	mov.w	r3, #4294967295
 800dde8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ddea:	6879      	ldr	r1, [r7, #4]
 800ddec:	68b8      	ldr	r0, [r7, #8]
 800ddee:	f000 fa57 	bl	800e2a0 <prvAddCurrentTaskToDelayedList>
	}
 800ddf2:	bf00      	nop
 800ddf4:	3718      	adds	r7, #24
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	20000ba4 	.word	0x20000ba4

0800de00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b086      	sub	sp, #24
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10a      	bne.n	800de2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800de16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1a:	f383 8811 	msr	BASEPRI, r3
 800de1e:	f3bf 8f6f 	isb	sy
 800de22:	f3bf 8f4f 	dsb	sy
 800de26:	60fb      	str	r3, [r7, #12]
}
 800de28:	bf00      	nop
 800de2a:	e7fe      	b.n	800de2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	3318      	adds	r3, #24
 800de30:	4618      	mov	r0, r3
 800de32:	f7fe fe27 	bl	800ca84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de36:	4b1e      	ldr	r3, [pc, #120]	; (800deb0 <xTaskRemoveFromEventList+0xb0>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d11d      	bne.n	800de7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	3304      	adds	r3, #4
 800de42:	4618      	mov	r0, r3
 800de44:	f7fe fe1e 	bl	800ca84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de4c:	4b19      	ldr	r3, [pc, #100]	; (800deb4 <xTaskRemoveFromEventList+0xb4>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	429a      	cmp	r2, r3
 800de52:	d903      	bls.n	800de5c <xTaskRemoveFromEventList+0x5c>
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de58:	4a16      	ldr	r2, [pc, #88]	; (800deb4 <xTaskRemoveFromEventList+0xb4>)
 800de5a:	6013      	str	r3, [r2, #0]
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de60:	4613      	mov	r3, r2
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	4413      	add	r3, r2
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4a13      	ldr	r2, [pc, #76]	; (800deb8 <xTaskRemoveFromEventList+0xb8>)
 800de6a:	441a      	add	r2, r3
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	3304      	adds	r3, #4
 800de70:	4619      	mov	r1, r3
 800de72:	4610      	mov	r0, r2
 800de74:	f7fe fda9 	bl	800c9ca <vListInsertEnd>
 800de78:	e005      	b.n	800de86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	3318      	adds	r3, #24
 800de7e:	4619      	mov	r1, r3
 800de80:	480e      	ldr	r0, [pc, #56]	; (800debc <xTaskRemoveFromEventList+0xbc>)
 800de82:	f7fe fda2 	bl	800c9ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de8a:	4b0d      	ldr	r3, [pc, #52]	; (800dec0 <xTaskRemoveFromEventList+0xc0>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de90:	429a      	cmp	r2, r3
 800de92:	d905      	bls.n	800dea0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800de94:	2301      	movs	r3, #1
 800de96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800de98:	4b0a      	ldr	r3, [pc, #40]	; (800dec4 <xTaskRemoveFromEventList+0xc4>)
 800de9a:	2201      	movs	r2, #1
 800de9c:	601a      	str	r2, [r3, #0]
 800de9e:	e001      	b.n	800dea4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dea0:	2300      	movs	r3, #0
 800dea2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dea4:	697b      	ldr	r3, [r7, #20]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3718      	adds	r7, #24
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	200010a0 	.word	0x200010a0
 800deb4:	20001080 	.word	0x20001080
 800deb8:	20000ba8 	.word	0x20000ba8
 800debc:	20001038 	.word	0x20001038
 800dec0:	20000ba4 	.word	0x20000ba4
 800dec4:	2000108c 	.word	0x2000108c

0800dec8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dec8:	b480      	push	{r7}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ded0:	4b06      	ldr	r3, [pc, #24]	; (800deec <vTaskInternalSetTimeOutState+0x24>)
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ded8:	4b05      	ldr	r3, [pc, #20]	; (800def0 <vTaskInternalSetTimeOutState+0x28>)
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	605a      	str	r2, [r3, #4]
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr
 800deec:	20001090 	.word	0x20001090
 800def0:	2000107c 	.word	0x2000107c

0800def4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b088      	sub	sp, #32
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10a      	bne.n	800df1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800df04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df08:	f383 8811 	msr	BASEPRI, r3
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	613b      	str	r3, [r7, #16]
}
 800df16:	bf00      	nop
 800df18:	e7fe      	b.n	800df18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10a      	bne.n	800df36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	60fb      	str	r3, [r7, #12]
}
 800df32:	bf00      	nop
 800df34:	e7fe      	b.n	800df34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800df36:	f000 fe85 	bl	800ec44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df3a:	4b1d      	ldr	r3, [pc, #116]	; (800dfb0 <xTaskCheckForTimeOut+0xbc>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	69ba      	ldr	r2, [r7, #24]
 800df46:	1ad3      	subs	r3, r2, r3
 800df48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df52:	d102      	bne.n	800df5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df54:	2300      	movs	r3, #0
 800df56:	61fb      	str	r3, [r7, #28]
 800df58:	e023      	b.n	800dfa2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	4b15      	ldr	r3, [pc, #84]	; (800dfb4 <xTaskCheckForTimeOut+0xc0>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	429a      	cmp	r2, r3
 800df64:	d007      	beq.n	800df76 <xTaskCheckForTimeOut+0x82>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	69ba      	ldr	r2, [r7, #24]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d302      	bcc.n	800df76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df70:	2301      	movs	r3, #1
 800df72:	61fb      	str	r3, [r7, #28]
 800df74:	e015      	b.n	800dfa2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	697a      	ldr	r2, [r7, #20]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d20b      	bcs.n	800df98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	1ad2      	subs	r2, r2, r3
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff ff9b 	bl	800dec8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800df92:	2300      	movs	r3, #0
 800df94:	61fb      	str	r3, [r7, #28]
 800df96:	e004      	b.n	800dfa2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	2200      	movs	r2, #0
 800df9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dfa2:	f000 fe7f 	bl	800eca4 <vPortExitCritical>

	return xReturn;
 800dfa6:	69fb      	ldr	r3, [r7, #28]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3720      	adds	r7, #32
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	2000107c 	.word	0x2000107c
 800dfb4:	20001090 	.word	0x20001090

0800dfb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dfb8:	b480      	push	{r7}
 800dfba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dfbc:	4b03      	ldr	r3, [pc, #12]	; (800dfcc <vTaskMissedYield+0x14>)
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	601a      	str	r2, [r3, #0]
}
 800dfc2:	bf00      	nop
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr
 800dfcc:	2000108c 	.word	0x2000108c

0800dfd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dfd8:	f000 f854 	bl	800e084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfdc:	4b07      	ldr	r3, [pc, #28]	; (800dffc <prvIdleTask+0x2c>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d907      	bls.n	800dff4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800dfe4:	4b06      	ldr	r3, [pc, #24]	; (800e000 <prvIdleTask+0x30>)
 800dfe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfea:	601a      	str	r2, [r3, #0]
 800dfec:	f3bf 8f4f 	dsb	sy
 800dff0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800dff4:	f7f2 fc24 	bl	8000840 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800dff8:	e7ee      	b.n	800dfd8 <prvIdleTask+0x8>
 800dffa:	bf00      	nop
 800dffc:	20000ba8 	.word	0x20000ba8
 800e000:	e000ed04 	.word	0xe000ed04

0800e004 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e00a:	2300      	movs	r3, #0
 800e00c:	607b      	str	r3, [r7, #4]
 800e00e:	e00c      	b.n	800e02a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	4613      	mov	r3, r2
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4413      	add	r3, r2
 800e018:	009b      	lsls	r3, r3, #2
 800e01a:	4a12      	ldr	r2, [pc, #72]	; (800e064 <prvInitialiseTaskLists+0x60>)
 800e01c:	4413      	add	r3, r2
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fe fca6 	bl	800c970 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	3301      	adds	r3, #1
 800e028:	607b      	str	r3, [r7, #4]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2b37      	cmp	r3, #55	; 0x37
 800e02e:	d9ef      	bls.n	800e010 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e030:	480d      	ldr	r0, [pc, #52]	; (800e068 <prvInitialiseTaskLists+0x64>)
 800e032:	f7fe fc9d 	bl	800c970 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e036:	480d      	ldr	r0, [pc, #52]	; (800e06c <prvInitialiseTaskLists+0x68>)
 800e038:	f7fe fc9a 	bl	800c970 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e03c:	480c      	ldr	r0, [pc, #48]	; (800e070 <prvInitialiseTaskLists+0x6c>)
 800e03e:	f7fe fc97 	bl	800c970 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e042:	480c      	ldr	r0, [pc, #48]	; (800e074 <prvInitialiseTaskLists+0x70>)
 800e044:	f7fe fc94 	bl	800c970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e048:	480b      	ldr	r0, [pc, #44]	; (800e078 <prvInitialiseTaskLists+0x74>)
 800e04a:	f7fe fc91 	bl	800c970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e04e:	4b0b      	ldr	r3, [pc, #44]	; (800e07c <prvInitialiseTaskLists+0x78>)
 800e050:	4a05      	ldr	r2, [pc, #20]	; (800e068 <prvInitialiseTaskLists+0x64>)
 800e052:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e054:	4b0a      	ldr	r3, [pc, #40]	; (800e080 <prvInitialiseTaskLists+0x7c>)
 800e056:	4a05      	ldr	r2, [pc, #20]	; (800e06c <prvInitialiseTaskLists+0x68>)
 800e058:	601a      	str	r2, [r3, #0]
}
 800e05a:	bf00      	nop
 800e05c:	3708      	adds	r7, #8
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	20000ba8 	.word	0x20000ba8
 800e068:	20001008 	.word	0x20001008
 800e06c:	2000101c 	.word	0x2000101c
 800e070:	20001038 	.word	0x20001038
 800e074:	2000104c 	.word	0x2000104c
 800e078:	20001064 	.word	0x20001064
 800e07c:	20001030 	.word	0x20001030
 800e080:	20001034 	.word	0x20001034

0800e084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e08a:	e019      	b.n	800e0c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e08c:	f000 fdda 	bl	800ec44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e090:	4b10      	ldr	r3, [pc, #64]	; (800e0d4 <prvCheckTasksWaitingTermination+0x50>)
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	3304      	adds	r3, #4
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fe fcf1 	bl	800ca84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e0a2:	4b0d      	ldr	r3, [pc, #52]	; (800e0d8 <prvCheckTasksWaitingTermination+0x54>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	4a0b      	ldr	r2, [pc, #44]	; (800e0d8 <prvCheckTasksWaitingTermination+0x54>)
 800e0aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e0ac:	4b0b      	ldr	r3, [pc, #44]	; (800e0dc <prvCheckTasksWaitingTermination+0x58>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	3b01      	subs	r3, #1
 800e0b2:	4a0a      	ldr	r2, [pc, #40]	; (800e0dc <prvCheckTasksWaitingTermination+0x58>)
 800e0b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e0b6:	f000 fdf5 	bl	800eca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f810 	bl	800e0e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0c0:	4b06      	ldr	r3, [pc, #24]	; (800e0dc <prvCheckTasksWaitingTermination+0x58>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d1e1      	bne.n	800e08c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0c8:	bf00      	nop
 800e0ca:	bf00      	nop
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	2000104c 	.word	0x2000104c
 800e0d8:	20001078 	.word	0x20001078
 800e0dc:	20001060 	.word	0x20001060

0800e0e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3358      	adds	r3, #88	; 0x58
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f002 f82b 	bl	8010148 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d108      	bne.n	800e10e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e100:	4618      	mov	r0, r3
 800e102:	f000 ff8d 	bl	800f020 <vPortFree>
				vPortFree( pxTCB );
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 ff8a 	bl	800f020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e10c:	e018      	b.n	800e140 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e114:	2b01      	cmp	r3, #1
 800e116:	d103      	bne.n	800e120 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f000 ff81 	bl	800f020 <vPortFree>
	}
 800e11e:	e00f      	b.n	800e140 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e126:	2b02      	cmp	r3, #2
 800e128:	d00a      	beq.n	800e140 <prvDeleteTCB+0x60>
	__asm volatile
 800e12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12e:	f383 8811 	msr	BASEPRI, r3
 800e132:	f3bf 8f6f 	isb	sy
 800e136:	f3bf 8f4f 	dsb	sy
 800e13a:	60fb      	str	r3, [r7, #12]
}
 800e13c:	bf00      	nop
 800e13e:	e7fe      	b.n	800e13e <prvDeleteTCB+0x5e>
	}
 800e140:	bf00      	nop
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e14e:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <prvResetNextTaskUnblockTime+0x38>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d104      	bne.n	800e162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e158:	4b0a      	ldr	r3, [pc, #40]	; (800e184 <prvResetNextTaskUnblockTime+0x3c>)
 800e15a:	f04f 32ff 	mov.w	r2, #4294967295
 800e15e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e160:	e008      	b.n	800e174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e162:	4b07      	ldr	r3, [pc, #28]	; (800e180 <prvResetNextTaskUnblockTime+0x38>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	4a04      	ldr	r2, [pc, #16]	; (800e184 <prvResetNextTaskUnblockTime+0x3c>)
 800e172:	6013      	str	r3, [r2, #0]
}
 800e174:	bf00      	nop
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr
 800e180:	20001030 	.word	0x20001030
 800e184:	20001098 	.word	0x20001098

0800e188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e18e:	4b0b      	ldr	r3, [pc, #44]	; (800e1bc <xTaskGetSchedulerState+0x34>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d102      	bne.n	800e19c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e196:	2301      	movs	r3, #1
 800e198:	607b      	str	r3, [r7, #4]
 800e19a:	e008      	b.n	800e1ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e19c:	4b08      	ldr	r3, [pc, #32]	; (800e1c0 <xTaskGetSchedulerState+0x38>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d102      	bne.n	800e1aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e1a4:	2302      	movs	r3, #2
 800e1a6:	607b      	str	r3, [r7, #4]
 800e1a8:	e001      	b.n	800e1ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e1ae:	687b      	ldr	r3, [r7, #4]
	}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr
 800e1bc:	20001084 	.word	0x20001084
 800e1c0:	200010a0 	.word	0x200010a0

0800e1c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d056      	beq.n	800e288 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1da:	4b2e      	ldr	r3, [pc, #184]	; (800e294 <xTaskPriorityDisinherit+0xd0>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	693a      	ldr	r2, [r7, #16]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d00a      	beq.n	800e1fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e8:	f383 8811 	msr	BASEPRI, r3
 800e1ec:	f3bf 8f6f 	isb	sy
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	60fb      	str	r3, [r7, #12]
}
 800e1f6:	bf00      	nop
 800e1f8:	e7fe      	b.n	800e1f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10a      	bne.n	800e218 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	60bb      	str	r3, [r7, #8]
}
 800e214:	bf00      	nop
 800e216:	e7fe      	b.n	800e216 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e21c:	1e5a      	subs	r2, r3, #1
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d02c      	beq.n	800e288 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e232:	2b00      	cmp	r3, #0
 800e234:	d128      	bne.n	800e288 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	3304      	adds	r3, #4
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe fc22 	bl	800ca84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e24c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e258:	4b0f      	ldr	r3, [pc, #60]	; (800e298 <xTaskPriorityDisinherit+0xd4>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d903      	bls.n	800e268 <xTaskPriorityDisinherit+0xa4>
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e264:	4a0c      	ldr	r2, [pc, #48]	; (800e298 <xTaskPriorityDisinherit+0xd4>)
 800e266:	6013      	str	r3, [r2, #0]
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e26c:	4613      	mov	r3, r2
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	4a09      	ldr	r2, [pc, #36]	; (800e29c <xTaskPriorityDisinherit+0xd8>)
 800e276:	441a      	add	r2, r3
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	3304      	adds	r3, #4
 800e27c:	4619      	mov	r1, r3
 800e27e:	4610      	mov	r0, r2
 800e280:	f7fe fba3 	bl	800c9ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e284:	2301      	movs	r3, #1
 800e286:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e288:	697b      	ldr	r3, [r7, #20]
	}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3718      	adds	r7, #24
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	20000ba4 	.word	0x20000ba4
 800e298:	20001080 	.word	0x20001080
 800e29c:	20000ba8 	.word	0x20000ba8

0800e2a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e2aa:	4b21      	ldr	r3, [pc, #132]	; (800e330 <prvAddCurrentTaskToDelayedList+0x90>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2b0:	4b20      	ldr	r3, [pc, #128]	; (800e334 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	3304      	adds	r3, #4
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fe fbe4 	bl	800ca84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c2:	d10a      	bne.n	800e2da <prvAddCurrentTaskToDelayedList+0x3a>
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d007      	beq.n	800e2da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2ca:	4b1a      	ldr	r3, [pc, #104]	; (800e334 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4819      	ldr	r0, [pc, #100]	; (800e338 <prvAddCurrentTaskToDelayedList+0x98>)
 800e2d4:	f7fe fb79 	bl	800c9ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e2d8:	e026      	b.n	800e328 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4413      	add	r3, r2
 800e2e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2e2:	4b14      	ldr	r3, [pc, #80]	; (800e334 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68ba      	ldr	r2, [r7, #8]
 800e2e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d209      	bcs.n	800e306 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2f2:	4b12      	ldr	r3, [pc, #72]	; (800e33c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	4b0f      	ldr	r3, [pc, #60]	; (800e334 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	4610      	mov	r0, r2
 800e300:	f7fe fb87 	bl	800ca12 <vListInsert>
}
 800e304:	e010      	b.n	800e328 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e306:	4b0e      	ldr	r3, [pc, #56]	; (800e340 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	4b0a      	ldr	r3, [pc, #40]	; (800e334 <prvAddCurrentTaskToDelayedList+0x94>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3304      	adds	r3, #4
 800e310:	4619      	mov	r1, r3
 800e312:	4610      	mov	r0, r2
 800e314:	f7fe fb7d 	bl	800ca12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e318:	4b0a      	ldr	r3, [pc, #40]	; (800e344 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	68ba      	ldr	r2, [r7, #8]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d202      	bcs.n	800e328 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e322:	4a08      	ldr	r2, [pc, #32]	; (800e344 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	6013      	str	r3, [r2, #0]
}
 800e328:	bf00      	nop
 800e32a:	3710      	adds	r7, #16
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	2000107c 	.word	0x2000107c
 800e334:	20000ba4 	.word	0x20000ba4
 800e338:	20001064 	.word	0x20001064
 800e33c:	20001034 	.word	0x20001034
 800e340:	20001030 	.word	0x20001030
 800e344:	20001098 	.word	0x20001098

0800e348 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b08a      	sub	sp, #40	; 0x28
 800e34c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e34e:	2300      	movs	r3, #0
 800e350:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e352:	f000 fb07 	bl	800e964 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e356:	4b1c      	ldr	r3, [pc, #112]	; (800e3c8 <xTimerCreateTimerTask+0x80>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d021      	beq.n	800e3a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e35e:	2300      	movs	r3, #0
 800e360:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e362:	2300      	movs	r3, #0
 800e364:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e366:	1d3a      	adds	r2, r7, #4
 800e368:	f107 0108 	add.w	r1, r7, #8
 800e36c:	f107 030c 	add.w	r3, r7, #12
 800e370:	4618      	mov	r0, r3
 800e372:	f7fe fae3 	bl	800c93c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e376:	6879      	ldr	r1, [r7, #4]
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	9202      	str	r2, [sp, #8]
 800e37e:	9301      	str	r3, [sp, #4]
 800e380:	2302      	movs	r3, #2
 800e382:	9300      	str	r3, [sp, #0]
 800e384:	2300      	movs	r3, #0
 800e386:	460a      	mov	r2, r1
 800e388:	4910      	ldr	r1, [pc, #64]	; (800e3cc <xTimerCreateTimerTask+0x84>)
 800e38a:	4811      	ldr	r0, [pc, #68]	; (800e3d0 <xTimerCreateTimerTask+0x88>)
 800e38c:	f7ff f890 	bl	800d4b0 <xTaskCreateStatic>
 800e390:	4603      	mov	r3, r0
 800e392:	4a10      	ldr	r2, [pc, #64]	; (800e3d4 <xTimerCreateTimerTask+0x8c>)
 800e394:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e396:	4b0f      	ldr	r3, [pc, #60]	; (800e3d4 <xTimerCreateTimerTask+0x8c>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d001      	beq.n	800e3a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d10a      	bne.n	800e3be <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ac:	f383 8811 	msr	BASEPRI, r3
 800e3b0:	f3bf 8f6f 	isb	sy
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	613b      	str	r3, [r7, #16]
}
 800e3ba:	bf00      	nop
 800e3bc:	e7fe      	b.n	800e3bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e3be:	697b      	ldr	r3, [r7, #20]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	200010dc 	.word	0x200010dc
 800e3cc:	080114e0 	.word	0x080114e0
 800e3d0:	0800e50d 	.word	0x0800e50d
 800e3d4:	200010e0 	.word	0x200010e0

0800e3d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b08a      	sub	sp, #40	; 0x28
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
 800e3e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10a      	bne.n	800e406 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	623b      	str	r3, [r7, #32]
}
 800e402:	bf00      	nop
 800e404:	e7fe      	b.n	800e404 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e406:	4b1a      	ldr	r3, [pc, #104]	; (800e470 <xTimerGenericCommand+0x98>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d02a      	beq.n	800e464 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	2b05      	cmp	r3, #5
 800e41e:	dc18      	bgt.n	800e452 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e420:	f7ff feb2 	bl	800e188 <xTaskGetSchedulerState>
 800e424:	4603      	mov	r3, r0
 800e426:	2b02      	cmp	r3, #2
 800e428:	d109      	bne.n	800e43e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e42a:	4b11      	ldr	r3, [pc, #68]	; (800e470 <xTimerGenericCommand+0x98>)
 800e42c:	6818      	ldr	r0, [r3, #0]
 800e42e:	f107 0110 	add.w	r1, r7, #16
 800e432:	2300      	movs	r3, #0
 800e434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e436:	f7fe fc53 	bl	800cce0 <xQueueGenericSend>
 800e43a:	6278      	str	r0, [r7, #36]	; 0x24
 800e43c:	e012      	b.n	800e464 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e43e:	4b0c      	ldr	r3, [pc, #48]	; (800e470 <xTimerGenericCommand+0x98>)
 800e440:	6818      	ldr	r0, [r3, #0]
 800e442:	f107 0110 	add.w	r1, r7, #16
 800e446:	2300      	movs	r3, #0
 800e448:	2200      	movs	r2, #0
 800e44a:	f7fe fc49 	bl	800cce0 <xQueueGenericSend>
 800e44e:	6278      	str	r0, [r7, #36]	; 0x24
 800e450:	e008      	b.n	800e464 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e452:	4b07      	ldr	r3, [pc, #28]	; (800e470 <xTimerGenericCommand+0x98>)
 800e454:	6818      	ldr	r0, [r3, #0]
 800e456:	f107 0110 	add.w	r1, r7, #16
 800e45a:	2300      	movs	r3, #0
 800e45c:	683a      	ldr	r2, [r7, #0]
 800e45e:	f7fe fd3d 	bl	800cedc <xQueueGenericSendFromISR>
 800e462:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e466:	4618      	mov	r0, r3
 800e468:	3728      	adds	r7, #40	; 0x28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	200010dc 	.word	0x200010dc

0800e474 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b088      	sub	sp, #32
 800e478:	af02      	add	r7, sp, #8
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e47e:	4b22      	ldr	r3, [pc, #136]	; (800e508 <prvProcessExpiredTimer+0x94>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	3304      	adds	r3, #4
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7fe faf9 	bl	800ca84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e498:	f003 0304 	and.w	r3, r3, #4
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d022      	beq.n	800e4e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	699a      	ldr	r2, [r3, #24]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	18d1      	adds	r1, r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	683a      	ldr	r2, [r7, #0]
 800e4ac:	6978      	ldr	r0, [r7, #20]
 800e4ae:	f000 f8d1 	bl	800e654 <prvInsertTimerInActiveList>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d01f      	beq.n	800e4f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	9300      	str	r3, [sp, #0]
 800e4bc:	2300      	movs	r3, #0
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	6978      	ldr	r0, [r7, #20]
 800e4c4:	f7ff ff88 	bl	800e3d8 <xTimerGenericCommand>
 800e4c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d113      	bne.n	800e4f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	60fb      	str	r3, [r7, #12]
}
 800e4e2:	bf00      	nop
 800e4e4:	e7fe      	b.n	800e4e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4ec:	f023 0301 	bic.w	r3, r3, #1
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	6a1b      	ldr	r3, [r3, #32]
 800e4fc:	6978      	ldr	r0, [r7, #20]
 800e4fe:	4798      	blx	r3
}
 800e500:	bf00      	nop
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	200010d4 	.word	0x200010d4

0800e50c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e514:	f107 0308 	add.w	r3, r7, #8
 800e518:	4618      	mov	r0, r3
 800e51a:	f000 f857 	bl	800e5cc <prvGetNextExpireTime>
 800e51e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	4619      	mov	r1, r3
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f000 f803 	bl	800e530 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e52a:	f000 f8d5 	bl	800e6d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e52e:	e7f1      	b.n	800e514 <prvTimerTask+0x8>

0800e530 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e53a:	f7ff fa1b 	bl	800d974 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e53e:	f107 0308 	add.w	r3, r7, #8
 800e542:	4618      	mov	r0, r3
 800e544:	f000 f866 	bl	800e614 <prvSampleTimeNow>
 800e548:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d130      	bne.n	800e5b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10a      	bne.n	800e56c <prvProcessTimerOrBlockTask+0x3c>
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d806      	bhi.n	800e56c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e55e:	f7ff fa17 	bl	800d990 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e562:	68f9      	ldr	r1, [r7, #12]
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f7ff ff85 	bl	800e474 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e56a:	e024      	b.n	800e5b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d008      	beq.n	800e584 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e572:	4b13      	ldr	r3, [pc, #76]	; (800e5c0 <prvProcessTimerOrBlockTask+0x90>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d101      	bne.n	800e580 <prvProcessTimerOrBlockTask+0x50>
 800e57c:	2301      	movs	r3, #1
 800e57e:	e000      	b.n	800e582 <prvProcessTimerOrBlockTask+0x52>
 800e580:	2300      	movs	r3, #0
 800e582:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e584:	4b0f      	ldr	r3, [pc, #60]	; (800e5c4 <prvProcessTimerOrBlockTask+0x94>)
 800e586:	6818      	ldr	r0, [r3, #0]
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	1ad3      	subs	r3, r2, r3
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	4619      	mov	r1, r3
 800e592:	f7fe ff59 	bl	800d448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e596:	f7ff f9fb 	bl	800d990 <xTaskResumeAll>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d10a      	bne.n	800e5b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e5a0:	4b09      	ldr	r3, [pc, #36]	; (800e5c8 <prvProcessTimerOrBlockTask+0x98>)
 800e5a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5a6:	601a      	str	r2, [r3, #0]
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	f3bf 8f6f 	isb	sy
}
 800e5b0:	e001      	b.n	800e5b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e5b2:	f7ff f9ed 	bl	800d990 <xTaskResumeAll>
}
 800e5b6:	bf00      	nop
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	200010d8 	.word	0x200010d8
 800e5c4:	200010dc 	.word	0x200010dc
 800e5c8:	e000ed04 	.word	0xe000ed04

0800e5cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b085      	sub	sp, #20
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5d4:	4b0e      	ldr	r3, [pc, #56]	; (800e610 <prvGetNextExpireTime+0x44>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d101      	bne.n	800e5e2 <prvGetNextExpireTime+0x16>
 800e5de:	2201      	movs	r2, #1
 800e5e0:	e000      	b.n	800e5e4 <prvGetNextExpireTime+0x18>
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d105      	bne.n	800e5fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5f0:	4b07      	ldr	r3, [pc, #28]	; (800e610 <prvGetNextExpireTime+0x44>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	68db      	ldr	r3, [r3, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	60fb      	str	r3, [r7, #12]
 800e5fa:	e001      	b.n	800e600 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e600:	68fb      	ldr	r3, [r7, #12]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3714      	adds	r7, #20
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	200010d4 	.word	0x200010d4

0800e614 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e61c:	f7ff fa56 	bl	800dacc <xTaskGetTickCount>
 800e620:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e622:	4b0b      	ldr	r3, [pc, #44]	; (800e650 <prvSampleTimeNow+0x3c>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	68fa      	ldr	r2, [r7, #12]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d205      	bcs.n	800e638 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e62c:	f000 f936 	bl	800e89c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2201      	movs	r2, #1
 800e634:	601a      	str	r2, [r3, #0]
 800e636:	e002      	b.n	800e63e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e63e:	4a04      	ldr	r2, [pc, #16]	; (800e650 <prvSampleTimeNow+0x3c>)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e644:	68fb      	ldr	r3, [r7, #12]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	200010e4 	.word	0x200010e4

0800e654 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b086      	sub	sp, #24
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	607a      	str	r2, [r7, #4]
 800e660:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e662:	2300      	movs	r3, #0
 800e664:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	68ba      	ldr	r2, [r7, #8]
 800e66a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e672:	68ba      	ldr	r2, [r7, #8]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	429a      	cmp	r2, r3
 800e678:	d812      	bhi.n	800e6a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	1ad2      	subs	r2, r2, r3
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	429a      	cmp	r2, r3
 800e686:	d302      	bcc.n	800e68e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e688:	2301      	movs	r3, #1
 800e68a:	617b      	str	r3, [r7, #20]
 800e68c:	e01b      	b.n	800e6c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e68e:	4b10      	ldr	r3, [pc, #64]	; (800e6d0 <prvInsertTimerInActiveList+0x7c>)
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	3304      	adds	r3, #4
 800e696:	4619      	mov	r1, r3
 800e698:	4610      	mov	r0, r2
 800e69a:	f7fe f9ba 	bl	800ca12 <vListInsert>
 800e69e:	e012      	b.n	800e6c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d206      	bcs.n	800e6b6 <prvInsertTimerInActiveList+0x62>
 800e6a8:	68ba      	ldr	r2, [r7, #8]
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d302      	bcc.n	800e6b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	617b      	str	r3, [r7, #20]
 800e6b4:	e007      	b.n	800e6c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6b6:	4b07      	ldr	r3, [pc, #28]	; (800e6d4 <prvInsertTimerInActiveList+0x80>)
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	3304      	adds	r3, #4
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	f7fe f9a6 	bl	800ca12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e6c6:	697b      	ldr	r3, [r7, #20]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3718      	adds	r7, #24
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	200010d8 	.word	0x200010d8
 800e6d4:	200010d4 	.word	0x200010d4

0800e6d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08e      	sub	sp, #56	; 0x38
 800e6dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6de:	e0ca      	b.n	800e876 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	da18      	bge.n	800e718 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6e6:	1d3b      	adds	r3, r7, #4
 800e6e8:	3304      	adds	r3, #4
 800e6ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d10a      	bne.n	800e708 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f6:	f383 8811 	msr	BASEPRI, r3
 800e6fa:	f3bf 8f6f 	isb	sy
 800e6fe:	f3bf 8f4f 	dsb	sy
 800e702:	61fb      	str	r3, [r7, #28]
}
 800e704:	bf00      	nop
 800e706:	e7fe      	b.n	800e706 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e70e:	6850      	ldr	r0, [r2, #4]
 800e710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e712:	6892      	ldr	r2, [r2, #8]
 800e714:	4611      	mov	r1, r2
 800e716:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f2c0 80aa 	blt.w	800e874 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e726:	695b      	ldr	r3, [r3, #20]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d004      	beq.n	800e736 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	3304      	adds	r3, #4
 800e730:	4618      	mov	r0, r3
 800e732:	f7fe f9a7 	bl	800ca84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e736:	463b      	mov	r3, r7
 800e738:	4618      	mov	r0, r3
 800e73a:	f7ff ff6b 	bl	800e614 <prvSampleTimeNow>
 800e73e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b09      	cmp	r3, #9
 800e744:	f200 8097 	bhi.w	800e876 <prvProcessReceivedCommands+0x19e>
 800e748:	a201      	add	r2, pc, #4	; (adr r2, 800e750 <prvProcessReceivedCommands+0x78>)
 800e74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e74e:	bf00      	nop
 800e750:	0800e779 	.word	0x0800e779
 800e754:	0800e779 	.word	0x0800e779
 800e758:	0800e779 	.word	0x0800e779
 800e75c:	0800e7ed 	.word	0x0800e7ed
 800e760:	0800e801 	.word	0x0800e801
 800e764:	0800e84b 	.word	0x0800e84b
 800e768:	0800e779 	.word	0x0800e779
 800e76c:	0800e779 	.word	0x0800e779
 800e770:	0800e7ed 	.word	0x0800e7ed
 800e774:	0800e801 	.word	0x0800e801
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e77e:	f043 0301 	orr.w	r3, r3, #1
 800e782:	b2da      	uxtb	r2, r3
 800e784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e78a:	68ba      	ldr	r2, [r7, #8]
 800e78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78e:	699b      	ldr	r3, [r3, #24]
 800e790:	18d1      	adds	r1, r2, r3
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e798:	f7ff ff5c 	bl	800e654 <prvInsertTimerInActiveList>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d069      	beq.n	800e876 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a4:	6a1b      	ldr	r3, [r3, #32]
 800e7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7b0:	f003 0304 	and.w	r3, r3, #4
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d05e      	beq.n	800e876 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e7b8:	68ba      	ldr	r2, [r7, #8]
 800e7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7bc:	699b      	ldr	r3, [r3, #24]
 800e7be:	441a      	add	r2, r3
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	9300      	str	r3, [sp, #0]
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7ca:	f7ff fe05 	bl	800e3d8 <xTimerGenericCommand>
 800e7ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e7d0:	6a3b      	ldr	r3, [r7, #32]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d14f      	bne.n	800e876 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	61bb      	str	r3, [r7, #24]
}
 800e7e8:	bf00      	nop
 800e7ea:	e7fe      	b.n	800e7ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7f2:	f023 0301 	bic.w	r3, r3, #1
 800e7f6:	b2da      	uxtb	r2, r3
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e7fe:	e03a      	b.n	800e876 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e806:	f043 0301 	orr.w	r3, r3, #1
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	699b      	ldr	r3, [r3, #24]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10a      	bne.n	800e836 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	617b      	str	r3, [r7, #20]
}
 800e832:	bf00      	nop
 800e834:	e7fe      	b.n	800e834 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	699a      	ldr	r2, [r3, #24]
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83c:	18d1      	adds	r1, r2, r3
 800e83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e844:	f7ff ff06 	bl	800e654 <prvInsertTimerInActiveList>
					break;
 800e848:	e015      	b.n	800e876 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e850:	f003 0302 	and.w	r3, r3, #2
 800e854:	2b00      	cmp	r3, #0
 800e856:	d103      	bne.n	800e860 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e85a:	f000 fbe1 	bl	800f020 <vPortFree>
 800e85e:	e00a      	b.n	800e876 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e866:	f023 0301 	bic.w	r3, r3, #1
 800e86a:	b2da      	uxtb	r2, r3
 800e86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e872:	e000      	b.n	800e876 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e874:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e876:	4b08      	ldr	r3, [pc, #32]	; (800e898 <prvProcessReceivedCommands+0x1c0>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	1d39      	adds	r1, r7, #4
 800e87c:	2200      	movs	r2, #0
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fe fbc8 	bl	800d014 <xQueueReceive>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	f47f af2a 	bne.w	800e6e0 <prvProcessReceivedCommands+0x8>
	}
}
 800e88c:	bf00      	nop
 800e88e:	bf00      	nop
 800e890:	3730      	adds	r7, #48	; 0x30
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	200010dc 	.word	0x200010dc

0800e89c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b088      	sub	sp, #32
 800e8a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8a2:	e048      	b.n	800e936 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8a4:	4b2d      	ldr	r3, [pc, #180]	; (800e95c <prvSwitchTimerLists+0xc0>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	68db      	ldr	r3, [r3, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8ae:	4b2b      	ldr	r3, [pc, #172]	; (800e95c <prvSwitchTimerLists+0xc0>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fe f8e1 	bl	800ca84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6a1b      	ldr	r3, [r3, #32]
 800e8c6:	68f8      	ldr	r0, [r7, #12]
 800e8c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8d0:	f003 0304 	and.w	r3, r3, #4
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d02e      	beq.n	800e936 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	699b      	ldr	r3, [r3, #24]
 800e8dc:	693a      	ldr	r2, [r7, #16]
 800e8de:	4413      	add	r3, r2
 800e8e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d90e      	bls.n	800e908 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8f6:	4b19      	ldr	r3, [pc, #100]	; (800e95c <prvSwitchTimerLists+0xc0>)
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	4619      	mov	r1, r3
 800e900:	4610      	mov	r0, r2
 800e902:	f7fe f886 	bl	800ca12 <vListInsert>
 800e906:	e016      	b.n	800e936 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e908:	2300      	movs	r3, #0
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	2300      	movs	r3, #0
 800e90e:	693a      	ldr	r2, [r7, #16]
 800e910:	2100      	movs	r1, #0
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	f7ff fd60 	bl	800e3d8 <xTimerGenericCommand>
 800e918:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d10a      	bne.n	800e936 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e924:	f383 8811 	msr	BASEPRI, r3
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	603b      	str	r3, [r7, #0]
}
 800e932:	bf00      	nop
 800e934:	e7fe      	b.n	800e934 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e936:	4b09      	ldr	r3, [pc, #36]	; (800e95c <prvSwitchTimerLists+0xc0>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d1b1      	bne.n	800e8a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e940:	4b06      	ldr	r3, [pc, #24]	; (800e95c <prvSwitchTimerLists+0xc0>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e946:	4b06      	ldr	r3, [pc, #24]	; (800e960 <prvSwitchTimerLists+0xc4>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a04      	ldr	r2, [pc, #16]	; (800e95c <prvSwitchTimerLists+0xc0>)
 800e94c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e94e:	4a04      	ldr	r2, [pc, #16]	; (800e960 <prvSwitchTimerLists+0xc4>)
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	6013      	str	r3, [r2, #0]
}
 800e954:	bf00      	nop
 800e956:	3718      	adds	r7, #24
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	200010d4 	.word	0x200010d4
 800e960:	200010d8 	.word	0x200010d8

0800e964 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e96a:	f000 f96b 	bl	800ec44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e96e:	4b15      	ldr	r3, [pc, #84]	; (800e9c4 <prvCheckForValidListAndQueue+0x60>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d120      	bne.n	800e9b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e976:	4814      	ldr	r0, [pc, #80]	; (800e9c8 <prvCheckForValidListAndQueue+0x64>)
 800e978:	f7fd fffa 	bl	800c970 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e97c:	4813      	ldr	r0, [pc, #76]	; (800e9cc <prvCheckForValidListAndQueue+0x68>)
 800e97e:	f7fd fff7 	bl	800c970 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e982:	4b13      	ldr	r3, [pc, #76]	; (800e9d0 <prvCheckForValidListAndQueue+0x6c>)
 800e984:	4a10      	ldr	r2, [pc, #64]	; (800e9c8 <prvCheckForValidListAndQueue+0x64>)
 800e986:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e988:	4b12      	ldr	r3, [pc, #72]	; (800e9d4 <prvCheckForValidListAndQueue+0x70>)
 800e98a:	4a10      	ldr	r2, [pc, #64]	; (800e9cc <prvCheckForValidListAndQueue+0x68>)
 800e98c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e98e:	2300      	movs	r3, #0
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	4b11      	ldr	r3, [pc, #68]	; (800e9d8 <prvCheckForValidListAndQueue+0x74>)
 800e994:	4a11      	ldr	r2, [pc, #68]	; (800e9dc <prvCheckForValidListAndQueue+0x78>)
 800e996:	2110      	movs	r1, #16
 800e998:	200a      	movs	r0, #10
 800e99a:	f7fe f905 	bl	800cba8 <xQueueGenericCreateStatic>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	4a08      	ldr	r2, [pc, #32]	; (800e9c4 <prvCheckForValidListAndQueue+0x60>)
 800e9a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e9a4:	4b07      	ldr	r3, [pc, #28]	; (800e9c4 <prvCheckForValidListAndQueue+0x60>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d005      	beq.n	800e9b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e9ac:	4b05      	ldr	r3, [pc, #20]	; (800e9c4 <prvCheckForValidListAndQueue+0x60>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	490b      	ldr	r1, [pc, #44]	; (800e9e0 <prvCheckForValidListAndQueue+0x7c>)
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fe fd1e 	bl	800d3f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e9b8:	f000 f974 	bl	800eca4 <vPortExitCritical>
}
 800e9bc:	bf00      	nop
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	200010dc 	.word	0x200010dc
 800e9c8:	200010ac 	.word	0x200010ac
 800e9cc:	200010c0 	.word	0x200010c0
 800e9d0:	200010d4 	.word	0x200010d4
 800e9d4:	200010d8 	.word	0x200010d8
 800e9d8:	20001188 	.word	0x20001188
 800e9dc:	200010e8 	.word	0x200010e8
 800e9e0:	080114e8 	.word	0x080114e8

0800e9e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b085      	sub	sp, #20
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	3b04      	subs	r3, #4
 800e9f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	3b04      	subs	r3, #4
 800ea02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	f023 0201 	bic.w	r2, r3, #1
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	3b04      	subs	r3, #4
 800ea12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea14:	4a0c      	ldr	r2, [pc, #48]	; (800ea48 <pxPortInitialiseStack+0x64>)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	3b14      	subs	r3, #20
 800ea1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3b04      	subs	r3, #4
 800ea2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f06f 0202 	mvn.w	r2, #2
 800ea32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	3b20      	subs	r3, #32
 800ea38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3714      	adds	r7, #20
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr
 800ea48:	0800ea4d 	.word	0x0800ea4d

0800ea4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea52:	2300      	movs	r3, #0
 800ea54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea56:	4b12      	ldr	r3, [pc, #72]	; (800eaa0 <prvTaskExitError+0x54>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea5e:	d00a      	beq.n	800ea76 <prvTaskExitError+0x2a>
	__asm volatile
 800ea60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea64:	f383 8811 	msr	BASEPRI, r3
 800ea68:	f3bf 8f6f 	isb	sy
 800ea6c:	f3bf 8f4f 	dsb	sy
 800ea70:	60fb      	str	r3, [r7, #12]
}
 800ea72:	bf00      	nop
 800ea74:	e7fe      	b.n	800ea74 <prvTaskExitError+0x28>
	__asm volatile
 800ea76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7a:	f383 8811 	msr	BASEPRI, r3
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f3bf 8f4f 	dsb	sy
 800ea86:	60bb      	str	r3, [r7, #8]
}
 800ea88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea8a:	bf00      	nop
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d0fc      	beq.n	800ea8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea92:	bf00      	nop
 800ea94:	bf00      	nop
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr
 800eaa0:	20000104 	.word	0x20000104
	...

0800eab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eab0:	4b07      	ldr	r3, [pc, #28]	; (800ead0 <pxCurrentTCBConst2>)
 800eab2:	6819      	ldr	r1, [r3, #0]
 800eab4:	6808      	ldr	r0, [r1, #0]
 800eab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaba:	f380 8809 	msr	PSP, r0
 800eabe:	f3bf 8f6f 	isb	sy
 800eac2:	f04f 0000 	mov.w	r0, #0
 800eac6:	f380 8811 	msr	BASEPRI, r0
 800eaca:	4770      	bx	lr
 800eacc:	f3af 8000 	nop.w

0800ead0 <pxCurrentTCBConst2>:
 800ead0:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ead4:	bf00      	nop
 800ead6:	bf00      	nop

0800ead8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ead8:	4808      	ldr	r0, [pc, #32]	; (800eafc <prvPortStartFirstTask+0x24>)
 800eada:	6800      	ldr	r0, [r0, #0]
 800eadc:	6800      	ldr	r0, [r0, #0]
 800eade:	f380 8808 	msr	MSP, r0
 800eae2:	f04f 0000 	mov.w	r0, #0
 800eae6:	f380 8814 	msr	CONTROL, r0
 800eaea:	b662      	cpsie	i
 800eaec:	b661      	cpsie	f
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	f3bf 8f6f 	isb	sy
 800eaf6:	df00      	svc	0
 800eaf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eafa:	bf00      	nop
 800eafc:	e000ed08 	.word	0xe000ed08

0800eb00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b086      	sub	sp, #24
 800eb04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eb06:	4b46      	ldr	r3, [pc, #280]	; (800ec20 <xPortStartScheduler+0x120>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a46      	ldr	r2, [pc, #280]	; (800ec24 <xPortStartScheduler+0x124>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d10a      	bne.n	800eb26 <xPortStartScheduler+0x26>
	__asm volatile
 800eb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb14:	f383 8811 	msr	BASEPRI, r3
 800eb18:	f3bf 8f6f 	isb	sy
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	613b      	str	r3, [r7, #16]
}
 800eb22:	bf00      	nop
 800eb24:	e7fe      	b.n	800eb24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb26:	4b3e      	ldr	r3, [pc, #248]	; (800ec20 <xPortStartScheduler+0x120>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	4a3f      	ldr	r2, [pc, #252]	; (800ec28 <xPortStartScheduler+0x128>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d10a      	bne.n	800eb46 <xPortStartScheduler+0x46>
	__asm volatile
 800eb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb34:	f383 8811 	msr	BASEPRI, r3
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	f3bf 8f4f 	dsb	sy
 800eb40:	60fb      	str	r3, [r7, #12]
}
 800eb42:	bf00      	nop
 800eb44:	e7fe      	b.n	800eb44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb46:	4b39      	ldr	r3, [pc, #228]	; (800ec2c <xPortStartScheduler+0x12c>)
 800eb48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	22ff      	movs	r2, #255	; 0xff
 800eb56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb60:	78fb      	ldrb	r3, [r7, #3]
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	4b31      	ldr	r3, [pc, #196]	; (800ec30 <xPortStartScheduler+0x130>)
 800eb6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb6e:	4b31      	ldr	r3, [pc, #196]	; (800ec34 <xPortStartScheduler+0x134>)
 800eb70:	2207      	movs	r2, #7
 800eb72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb74:	e009      	b.n	800eb8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800eb76:	4b2f      	ldr	r3, [pc, #188]	; (800ec34 <xPortStartScheduler+0x134>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	4a2d      	ldr	r2, [pc, #180]	; (800ec34 <xPortStartScheduler+0x134>)
 800eb7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb80:	78fb      	ldrb	r3, [r7, #3]
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	005b      	lsls	r3, r3, #1
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb8a:	78fb      	ldrb	r3, [r7, #3]
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb92:	2b80      	cmp	r3, #128	; 0x80
 800eb94:	d0ef      	beq.n	800eb76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb96:	4b27      	ldr	r3, [pc, #156]	; (800ec34 <xPortStartScheduler+0x134>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f1c3 0307 	rsb	r3, r3, #7
 800eb9e:	2b04      	cmp	r3, #4
 800eba0:	d00a      	beq.n	800ebb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800eba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba6:	f383 8811 	msr	BASEPRI, r3
 800ebaa:	f3bf 8f6f 	isb	sy
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	60bb      	str	r3, [r7, #8]
}
 800ebb4:	bf00      	nop
 800ebb6:	e7fe      	b.n	800ebb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ebb8:	4b1e      	ldr	r3, [pc, #120]	; (800ec34 <xPortStartScheduler+0x134>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	021b      	lsls	r3, r3, #8
 800ebbe:	4a1d      	ldr	r2, [pc, #116]	; (800ec34 <xPortStartScheduler+0x134>)
 800ebc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ebc2:	4b1c      	ldr	r3, [pc, #112]	; (800ec34 <xPortStartScheduler+0x134>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ebca:	4a1a      	ldr	r2, [pc, #104]	; (800ec34 <xPortStartScheduler+0x134>)
 800ebcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	b2da      	uxtb	r2, r3
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ebd6:	4b18      	ldr	r3, [pc, #96]	; (800ec38 <xPortStartScheduler+0x138>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4a17      	ldr	r2, [pc, #92]	; (800ec38 <xPortStartScheduler+0x138>)
 800ebdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ebe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ebe2:	4b15      	ldr	r3, [pc, #84]	; (800ec38 <xPortStartScheduler+0x138>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4a14      	ldr	r2, [pc, #80]	; (800ec38 <xPortStartScheduler+0x138>)
 800ebe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ebec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ebee:	f000 f8dd 	bl	800edac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ebf2:	4b12      	ldr	r3, [pc, #72]	; (800ec3c <xPortStartScheduler+0x13c>)
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ebf8:	f000 f8fc 	bl	800edf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebfc:	4b10      	ldr	r3, [pc, #64]	; (800ec40 <xPortStartScheduler+0x140>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a0f      	ldr	r2, [pc, #60]	; (800ec40 <xPortStartScheduler+0x140>)
 800ec02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ec06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ec08:	f7ff ff66 	bl	800ead8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ec0c:	f7ff f828 	bl	800dc60 <vTaskSwitchContext>
	prvTaskExitError();
 800ec10:	f7ff ff1c 	bl	800ea4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3718      	adds	r7, #24
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	e000ed00 	.word	0xe000ed00
 800ec24:	410fc271 	.word	0x410fc271
 800ec28:	410fc270 	.word	0x410fc270
 800ec2c:	e000e400 	.word	0xe000e400
 800ec30:	200011d8 	.word	0x200011d8
 800ec34:	200011dc 	.word	0x200011dc
 800ec38:	e000ed20 	.word	0xe000ed20
 800ec3c:	20000104 	.word	0x20000104
 800ec40:	e000ef34 	.word	0xe000ef34

0800ec44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
	__asm volatile
 800ec4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4e:	f383 8811 	msr	BASEPRI, r3
 800ec52:	f3bf 8f6f 	isb	sy
 800ec56:	f3bf 8f4f 	dsb	sy
 800ec5a:	607b      	str	r3, [r7, #4]
}
 800ec5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec5e:	4b0f      	ldr	r3, [pc, #60]	; (800ec9c <vPortEnterCritical+0x58>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	3301      	adds	r3, #1
 800ec64:	4a0d      	ldr	r2, [pc, #52]	; (800ec9c <vPortEnterCritical+0x58>)
 800ec66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec68:	4b0c      	ldr	r3, [pc, #48]	; (800ec9c <vPortEnterCritical+0x58>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d10f      	bne.n	800ec90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec70:	4b0b      	ldr	r3, [pc, #44]	; (800eca0 <vPortEnterCritical+0x5c>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00a      	beq.n	800ec90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ec7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7e:	f383 8811 	msr	BASEPRI, r3
 800ec82:	f3bf 8f6f 	isb	sy
 800ec86:	f3bf 8f4f 	dsb	sy
 800ec8a:	603b      	str	r3, [r7, #0]
}
 800ec8c:	bf00      	nop
 800ec8e:	e7fe      	b.n	800ec8e <vPortEnterCritical+0x4a>
	}
}
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	20000104 	.word	0x20000104
 800eca0:	e000ed04 	.word	0xe000ed04

0800eca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ecaa:	4b12      	ldr	r3, [pc, #72]	; (800ecf4 <vPortExitCritical+0x50>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10a      	bne.n	800ecc8 <vPortExitCritical+0x24>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	607b      	str	r3, [r7, #4]
}
 800ecc4:	bf00      	nop
 800ecc6:	e7fe      	b.n	800ecc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ecc8:	4b0a      	ldr	r3, [pc, #40]	; (800ecf4 <vPortExitCritical+0x50>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	3b01      	subs	r3, #1
 800ecce:	4a09      	ldr	r2, [pc, #36]	; (800ecf4 <vPortExitCritical+0x50>)
 800ecd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ecd2:	4b08      	ldr	r3, [pc, #32]	; (800ecf4 <vPortExitCritical+0x50>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d105      	bne.n	800ece6 <vPortExitCritical+0x42>
 800ecda:	2300      	movs	r3, #0
 800ecdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	f383 8811 	msr	BASEPRI, r3
}
 800ece4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ece6:	bf00      	nop
 800ece8:	370c      	adds	r7, #12
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	20000104 	.word	0x20000104
	...

0800ed00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ed00:	f3ef 8009 	mrs	r0, PSP
 800ed04:	f3bf 8f6f 	isb	sy
 800ed08:	4b15      	ldr	r3, [pc, #84]	; (800ed60 <pxCurrentTCBConst>)
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	f01e 0f10 	tst.w	lr, #16
 800ed10:	bf08      	it	eq
 800ed12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed1a:	6010      	str	r0, [r2, #0]
 800ed1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed24:	f380 8811 	msr	BASEPRI, r0
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	f3bf 8f6f 	isb	sy
 800ed30:	f7fe ff96 	bl	800dc60 <vTaskSwitchContext>
 800ed34:	f04f 0000 	mov.w	r0, #0
 800ed38:	f380 8811 	msr	BASEPRI, r0
 800ed3c:	bc09      	pop	{r0, r3}
 800ed3e:	6819      	ldr	r1, [r3, #0]
 800ed40:	6808      	ldr	r0, [r1, #0]
 800ed42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed46:	f01e 0f10 	tst.w	lr, #16
 800ed4a:	bf08      	it	eq
 800ed4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed50:	f380 8809 	msr	PSP, r0
 800ed54:	f3bf 8f6f 	isb	sy
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	f3af 8000 	nop.w

0800ed60 <pxCurrentTCBConst>:
 800ed60:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed64:	bf00      	nop
 800ed66:	bf00      	nop

0800ed68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed72:	f383 8811 	msr	BASEPRI, r3
 800ed76:	f3bf 8f6f 	isb	sy
 800ed7a:	f3bf 8f4f 	dsb	sy
 800ed7e:	607b      	str	r3, [r7, #4]
}
 800ed80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed82:	f7fe feb3 	bl	800daec <xTaskIncrementTick>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d003      	beq.n	800ed94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed8c:	4b06      	ldr	r3, [pc, #24]	; (800eda8 <xPortSysTickHandler+0x40>)
 800ed8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed92:	601a      	str	r2, [r3, #0]
 800ed94:	2300      	movs	r3, #0
 800ed96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	f383 8811 	msr	BASEPRI, r3
}
 800ed9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eda0:	bf00      	nop
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	e000ed04 	.word	0xe000ed04

0800edac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800edac:	b480      	push	{r7}
 800edae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800edb0:	4b0b      	ldr	r3, [pc, #44]	; (800ede0 <vPortSetupTimerInterrupt+0x34>)
 800edb2:	2200      	movs	r2, #0
 800edb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800edb6:	4b0b      	ldr	r3, [pc, #44]	; (800ede4 <vPortSetupTimerInterrupt+0x38>)
 800edb8:	2200      	movs	r2, #0
 800edba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800edbc:	4b0a      	ldr	r3, [pc, #40]	; (800ede8 <vPortSetupTimerInterrupt+0x3c>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a0a      	ldr	r2, [pc, #40]	; (800edec <vPortSetupTimerInterrupt+0x40>)
 800edc2:	fba2 2303 	umull	r2, r3, r2, r3
 800edc6:	099b      	lsrs	r3, r3, #6
 800edc8:	4a09      	ldr	r2, [pc, #36]	; (800edf0 <vPortSetupTimerInterrupt+0x44>)
 800edca:	3b01      	subs	r3, #1
 800edcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800edce:	4b04      	ldr	r3, [pc, #16]	; (800ede0 <vPortSetupTimerInterrupt+0x34>)
 800edd0:	2207      	movs	r2, #7
 800edd2:	601a      	str	r2, [r3, #0]
}
 800edd4:	bf00      	nop
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	e000e010 	.word	0xe000e010
 800ede4:	e000e018 	.word	0xe000e018
 800ede8:	2000006c 	.word	0x2000006c
 800edec:	10624dd3 	.word	0x10624dd3
 800edf0:	e000e014 	.word	0xe000e014

0800edf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800edf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ee04 <vPortEnableVFP+0x10>
 800edf8:	6801      	ldr	r1, [r0, #0]
 800edfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800edfe:	6001      	str	r1, [r0, #0]
 800ee00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ee02:	bf00      	nop
 800ee04:	e000ed88 	.word	0xe000ed88

0800ee08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ee08:	b480      	push	{r7}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ee0e:	f3ef 8305 	mrs	r3, IPSR
 800ee12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2b0f      	cmp	r3, #15
 800ee18:	d914      	bls.n	800ee44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee1a:	4a17      	ldr	r2, [pc, #92]	; (800ee78 <vPortValidateInterruptPriority+0x70>)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	4413      	add	r3, r2
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee24:	4b15      	ldr	r3, [pc, #84]	; (800ee7c <vPortValidateInterruptPriority+0x74>)
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	7afa      	ldrb	r2, [r7, #11]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d20a      	bcs.n	800ee44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ee2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee32:	f383 8811 	msr	BASEPRI, r3
 800ee36:	f3bf 8f6f 	isb	sy
 800ee3a:	f3bf 8f4f 	dsb	sy
 800ee3e:	607b      	str	r3, [r7, #4]
}
 800ee40:	bf00      	nop
 800ee42:	e7fe      	b.n	800ee42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee44:	4b0e      	ldr	r3, [pc, #56]	; (800ee80 <vPortValidateInterruptPriority+0x78>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee4c:	4b0d      	ldr	r3, [pc, #52]	; (800ee84 <vPortValidateInterruptPriority+0x7c>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d90a      	bls.n	800ee6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ee54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee58:	f383 8811 	msr	BASEPRI, r3
 800ee5c:	f3bf 8f6f 	isb	sy
 800ee60:	f3bf 8f4f 	dsb	sy
 800ee64:	603b      	str	r3, [r7, #0]
}
 800ee66:	bf00      	nop
 800ee68:	e7fe      	b.n	800ee68 <vPortValidateInterruptPriority+0x60>
	}
 800ee6a:	bf00      	nop
 800ee6c:	3714      	adds	r7, #20
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop
 800ee78:	e000e3f0 	.word	0xe000e3f0
 800ee7c:	200011d8 	.word	0x200011d8
 800ee80:	e000ed0c 	.word	0xe000ed0c
 800ee84:	200011dc 	.word	0x200011dc

0800ee88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b08a      	sub	sp, #40	; 0x28
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee90:	2300      	movs	r3, #0
 800ee92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee94:	f7fe fd6e 	bl	800d974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee98:	4b5b      	ldr	r3, [pc, #364]	; (800f008 <pvPortMalloc+0x180>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d101      	bne.n	800eea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eea0:	f000 f920 	bl	800f0e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eea4:	4b59      	ldr	r3, [pc, #356]	; (800f00c <pvPortMalloc+0x184>)
 800eea6:	681a      	ldr	r2, [r3, #0]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	4013      	ands	r3, r2
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f040 8093 	bne.w	800efd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d01d      	beq.n	800eef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eeb8:	2208      	movs	r2, #8
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4413      	add	r3, r2
 800eebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f003 0307 	and.w	r3, r3, #7
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d014      	beq.n	800eef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f023 0307 	bic.w	r3, r3, #7
 800eed0:	3308      	adds	r3, #8
 800eed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f003 0307 	and.w	r3, r3, #7
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00a      	beq.n	800eef4 <pvPortMalloc+0x6c>
	__asm volatile
 800eede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee2:	f383 8811 	msr	BASEPRI, r3
 800eee6:	f3bf 8f6f 	isb	sy
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	617b      	str	r3, [r7, #20]
}
 800eef0:	bf00      	nop
 800eef2:	e7fe      	b.n	800eef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d06e      	beq.n	800efd8 <pvPortMalloc+0x150>
 800eefa:	4b45      	ldr	r3, [pc, #276]	; (800f010 <pvPortMalloc+0x188>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d869      	bhi.n	800efd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ef04:	4b43      	ldr	r3, [pc, #268]	; (800f014 <pvPortMalloc+0x18c>)
 800ef06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ef08:	4b42      	ldr	r3, [pc, #264]	; (800f014 <pvPortMalloc+0x18c>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef0e:	e004      	b.n	800ef1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ef14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d903      	bls.n	800ef2c <pvPortMalloc+0xa4>
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d1f1      	bne.n	800ef10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ef2c:	4b36      	ldr	r3, [pc, #216]	; (800f008 <pvPortMalloc+0x180>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d050      	beq.n	800efd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	2208      	movs	r2, #8
 800ef3c:	4413      	add	r3, r2
 800ef3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	6a3b      	ldr	r3, [r7, #32]
 800ef46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4a:	685a      	ldr	r2, [r3, #4]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	1ad2      	subs	r2, r2, r3
 800ef50:	2308      	movs	r3, #8
 800ef52:	005b      	lsls	r3, r3, #1
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d91f      	bls.n	800ef98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	f003 0307 	and.w	r3, r3, #7
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d00a      	beq.n	800ef80 <pvPortMalloc+0xf8>
	__asm volatile
 800ef6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6e:	f383 8811 	msr	BASEPRI, r3
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	f3bf 8f4f 	dsb	sy
 800ef7a:	613b      	str	r3, [r7, #16]
}
 800ef7c:	bf00      	nop
 800ef7e:	e7fe      	b.n	800ef7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef82:	685a      	ldr	r2, [r3, #4]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	1ad2      	subs	r2, r2, r3
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef92:	69b8      	ldr	r0, [r7, #24]
 800ef94:	f000 f908 	bl	800f1a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef98:	4b1d      	ldr	r3, [pc, #116]	; (800f010 <pvPortMalloc+0x188>)
 800ef9a:	681a      	ldr	r2, [r3, #0]
 800ef9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	1ad3      	subs	r3, r2, r3
 800efa2:	4a1b      	ldr	r2, [pc, #108]	; (800f010 <pvPortMalloc+0x188>)
 800efa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800efa6:	4b1a      	ldr	r3, [pc, #104]	; (800f010 <pvPortMalloc+0x188>)
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	4b1b      	ldr	r3, [pc, #108]	; (800f018 <pvPortMalloc+0x190>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d203      	bcs.n	800efba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800efb2:	4b17      	ldr	r3, [pc, #92]	; (800f010 <pvPortMalloc+0x188>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a18      	ldr	r2, [pc, #96]	; (800f018 <pvPortMalloc+0x190>)
 800efb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800efba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbc:	685a      	ldr	r2, [r3, #4]
 800efbe:	4b13      	ldr	r3, [pc, #76]	; (800f00c <pvPortMalloc+0x184>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	431a      	orrs	r2, r3
 800efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800efc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efca:	2200      	movs	r2, #0
 800efcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800efce:	4b13      	ldr	r3, [pc, #76]	; (800f01c <pvPortMalloc+0x194>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	3301      	adds	r3, #1
 800efd4:	4a11      	ldr	r2, [pc, #68]	; (800f01c <pvPortMalloc+0x194>)
 800efd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800efd8:	f7fe fcda 	bl	800d990 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	f003 0307 	and.w	r3, r3, #7
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00a      	beq.n	800effc <pvPortMalloc+0x174>
	__asm volatile
 800efe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efea:	f383 8811 	msr	BASEPRI, r3
 800efee:	f3bf 8f6f 	isb	sy
 800eff2:	f3bf 8f4f 	dsb	sy
 800eff6:	60fb      	str	r3, [r7, #12]
}
 800eff8:	bf00      	nop
 800effa:	e7fe      	b.n	800effa <pvPortMalloc+0x172>
	return pvReturn;
 800effc:	69fb      	ldr	r3, [r7, #28]
}
 800effe:	4618      	mov	r0, r3
 800f000:	3728      	adds	r7, #40	; 0x28
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	2001a1e8 	.word	0x2001a1e8
 800f00c:	2001a1fc 	.word	0x2001a1fc
 800f010:	2001a1ec 	.word	0x2001a1ec
 800f014:	2001a1e0 	.word	0x2001a1e0
 800f018:	2001a1f0 	.word	0x2001a1f0
 800f01c:	2001a1f4 	.word	0x2001a1f4

0800f020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d04d      	beq.n	800f0ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f032:	2308      	movs	r3, #8
 800f034:	425b      	negs	r3, r3
 800f036:	697a      	ldr	r2, [r7, #20]
 800f038:	4413      	add	r3, r2
 800f03a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	685a      	ldr	r2, [r3, #4]
 800f044:	4b24      	ldr	r3, [pc, #144]	; (800f0d8 <vPortFree+0xb8>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4013      	ands	r3, r2
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10a      	bne.n	800f064 <vPortFree+0x44>
	__asm volatile
 800f04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f052:	f383 8811 	msr	BASEPRI, r3
 800f056:	f3bf 8f6f 	isb	sy
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	60fb      	str	r3, [r7, #12]
}
 800f060:	bf00      	nop
 800f062:	e7fe      	b.n	800f062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00a      	beq.n	800f082 <vPortFree+0x62>
	__asm volatile
 800f06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f070:	f383 8811 	msr	BASEPRI, r3
 800f074:	f3bf 8f6f 	isb	sy
 800f078:	f3bf 8f4f 	dsb	sy
 800f07c:	60bb      	str	r3, [r7, #8]
}
 800f07e:	bf00      	nop
 800f080:	e7fe      	b.n	800f080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	685a      	ldr	r2, [r3, #4]
 800f086:	4b14      	ldr	r3, [pc, #80]	; (800f0d8 <vPortFree+0xb8>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	4013      	ands	r3, r2
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d01e      	beq.n	800f0ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d11a      	bne.n	800f0ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	685a      	ldr	r2, [r3, #4]
 800f09c:	4b0e      	ldr	r3, [pc, #56]	; (800f0d8 <vPortFree+0xb8>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	43db      	mvns	r3, r3
 800f0a2:	401a      	ands	r2, r3
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f0a8:	f7fe fc64 	bl	800d974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	685a      	ldr	r2, [r3, #4]
 800f0b0:	4b0a      	ldr	r3, [pc, #40]	; (800f0dc <vPortFree+0xbc>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	4a09      	ldr	r2, [pc, #36]	; (800f0dc <vPortFree+0xbc>)
 800f0b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f0ba:	6938      	ldr	r0, [r7, #16]
 800f0bc:	f000 f874 	bl	800f1a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f0c0:	4b07      	ldr	r3, [pc, #28]	; (800f0e0 <vPortFree+0xc0>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	4a06      	ldr	r2, [pc, #24]	; (800f0e0 <vPortFree+0xc0>)
 800f0c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f0ca:	f7fe fc61 	bl	800d990 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f0ce:	bf00      	nop
 800f0d0:	3718      	adds	r7, #24
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	2001a1fc 	.word	0x2001a1fc
 800f0dc:	2001a1ec 	.word	0x2001a1ec
 800f0e0:	2001a1f8 	.word	0x2001a1f8

0800f0e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f0ea:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800f0ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f0f0:	4b27      	ldr	r3, [pc, #156]	; (800f190 <prvHeapInit+0xac>)
 800f0f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f003 0307 	and.w	r3, r3, #7
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00c      	beq.n	800f118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	3307      	adds	r3, #7
 800f102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f023 0307 	bic.w	r3, r3, #7
 800f10a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f10c:	68ba      	ldr	r2, [r7, #8]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	4a1f      	ldr	r2, [pc, #124]	; (800f190 <prvHeapInit+0xac>)
 800f114:	4413      	add	r3, r2
 800f116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f11c:	4a1d      	ldr	r2, [pc, #116]	; (800f194 <prvHeapInit+0xb0>)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f122:	4b1c      	ldr	r3, [pc, #112]	; (800f194 <prvHeapInit+0xb0>)
 800f124:	2200      	movs	r2, #0
 800f126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	4413      	add	r3, r2
 800f12e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f130:	2208      	movs	r2, #8
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	1a9b      	subs	r3, r3, r2
 800f136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f023 0307 	bic.w	r3, r3, #7
 800f13e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	4a15      	ldr	r2, [pc, #84]	; (800f198 <prvHeapInit+0xb4>)
 800f144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f146:	4b14      	ldr	r3, [pc, #80]	; (800f198 <prvHeapInit+0xb4>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2200      	movs	r2, #0
 800f14c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f14e:	4b12      	ldr	r3, [pc, #72]	; (800f198 <prvHeapInit+0xb4>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2200      	movs	r2, #0
 800f154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	68fa      	ldr	r2, [r7, #12]
 800f15e:	1ad2      	subs	r2, r2, r3
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f164:	4b0c      	ldr	r3, [pc, #48]	; (800f198 <prvHeapInit+0xb4>)
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	4a0a      	ldr	r2, [pc, #40]	; (800f19c <prvHeapInit+0xb8>)
 800f172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	4a09      	ldr	r2, [pc, #36]	; (800f1a0 <prvHeapInit+0xbc>)
 800f17a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f17c:	4b09      	ldr	r3, [pc, #36]	; (800f1a4 <prvHeapInit+0xc0>)
 800f17e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f182:	601a      	str	r2, [r3, #0]
}
 800f184:	bf00      	nop
 800f186:	3714      	adds	r7, #20
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr
 800f190:	200011e0 	.word	0x200011e0
 800f194:	2001a1e0 	.word	0x2001a1e0
 800f198:	2001a1e8 	.word	0x2001a1e8
 800f19c:	2001a1f0 	.word	0x2001a1f0
 800f1a0:	2001a1ec 	.word	0x2001a1ec
 800f1a4:	2001a1fc 	.word	0x2001a1fc

0800f1a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1b0:	4b28      	ldr	r3, [pc, #160]	; (800f254 <prvInsertBlockIntoFreeList+0xac>)
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	e002      	b.n	800f1bc <prvInsertBlockIntoFreeList+0x14>
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	60fb      	str	r3, [r7, #12]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d8f7      	bhi.n	800f1b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d108      	bne.n	800f1ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	441a      	add	r2, r3
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	441a      	add	r2, r3
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d118      	bne.n	800f230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681a      	ldr	r2, [r3, #0]
 800f202:	4b15      	ldr	r3, [pc, #84]	; (800f258 <prvInsertBlockIntoFreeList+0xb0>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	429a      	cmp	r2, r3
 800f208:	d00d      	beq.n	800f226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	441a      	add	r2, r3
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	601a      	str	r2, [r3, #0]
 800f224:	e008      	b.n	800f238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f226:	4b0c      	ldr	r3, [pc, #48]	; (800f258 <prvInsertBlockIntoFreeList+0xb0>)
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	e003      	b.n	800f238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d002      	beq.n	800f246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f246:	bf00      	nop
 800f248:	3714      	adds	r7, #20
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	2001a1e0 	.word	0x2001a1e0
 800f258:	2001a1e8 	.word	0x2001a1e8

0800f25c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f260:	2200      	movs	r2, #0
 800f262:	4912      	ldr	r1, [pc, #72]	; (800f2ac <MX_USB_DEVICE_Init+0x50>)
 800f264:	4812      	ldr	r0, [pc, #72]	; (800f2b0 <MX_USB_DEVICE_Init+0x54>)
 800f266:	f7fb ff05 	bl	800b074 <USBD_Init>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f270:	f7f1 ff04 	bl	800107c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f274:	490f      	ldr	r1, [pc, #60]	; (800f2b4 <MX_USB_DEVICE_Init+0x58>)
 800f276:	480e      	ldr	r0, [pc, #56]	; (800f2b0 <MX_USB_DEVICE_Init+0x54>)
 800f278:	f7fb ff3a 	bl	800b0f0 <USBD_RegisterClass>
 800f27c:	4603      	mov	r3, r0
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d001      	beq.n	800f286 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f282:	f7f1 fefb 	bl	800107c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f286:	490c      	ldr	r1, [pc, #48]	; (800f2b8 <MX_USB_DEVICE_Init+0x5c>)
 800f288:	4809      	ldr	r0, [pc, #36]	; (800f2b0 <MX_USB_DEVICE_Init+0x54>)
 800f28a:	f7fb fe1d 	bl	800aec8 <USBD_CDC_RegisterInterface>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d001      	beq.n	800f298 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f294:	f7f1 fef2 	bl	800107c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f298:	4805      	ldr	r0, [pc, #20]	; (800f2b0 <MX_USB_DEVICE_Init+0x54>)
 800f29a:	f7fb ff6d 	bl	800b178 <USBD_Start>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d001      	beq.n	800f2a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f2a4:	f7f1 feea 	bl	800107c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f2a8:	bf00      	nop
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	2000011c 	.word	0x2000011c
 800f2b0:	2001a200 	.word	0x2001a200
 800f2b4:	20000084 	.word	0x20000084
 800f2b8:	20000108 	.word	0x20000108

0800f2bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	4905      	ldr	r1, [pc, #20]	; (800f2d8 <CDC_Init_FS+0x1c>)
 800f2c4:	4805      	ldr	r0, [pc, #20]	; (800f2dc <CDC_Init_FS+0x20>)
 800f2c6:	f7fb fe19 	bl	800aefc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f2ca:	4905      	ldr	r1, [pc, #20]	; (800f2e0 <CDC_Init_FS+0x24>)
 800f2cc:	4803      	ldr	r0, [pc, #12]	; (800f2dc <CDC_Init_FS+0x20>)
 800f2ce:	f7fb fe37 	bl	800af40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f2d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	2001a6dc 	.word	0x2001a6dc
 800f2dc:	2001a200 	.word	0x2001a200
 800f2e0:	2001a4dc 	.word	0x2001a4dc

0800f2e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f2e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	6039      	str	r1, [r7, #0]
 800f2fe:	71fb      	strb	r3, [r7, #7]
 800f300:	4613      	mov	r3, r2
 800f302:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f304:	79fb      	ldrb	r3, [r7, #7]
 800f306:	2b23      	cmp	r3, #35	; 0x23
 800f308:	d84a      	bhi.n	800f3a0 <CDC_Control_FS+0xac>
 800f30a:	a201      	add	r2, pc, #4	; (adr r2, 800f310 <CDC_Control_FS+0x1c>)
 800f30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f310:	0800f3a1 	.word	0x0800f3a1
 800f314:	0800f3a1 	.word	0x0800f3a1
 800f318:	0800f3a1 	.word	0x0800f3a1
 800f31c:	0800f3a1 	.word	0x0800f3a1
 800f320:	0800f3a1 	.word	0x0800f3a1
 800f324:	0800f3a1 	.word	0x0800f3a1
 800f328:	0800f3a1 	.word	0x0800f3a1
 800f32c:	0800f3a1 	.word	0x0800f3a1
 800f330:	0800f3a1 	.word	0x0800f3a1
 800f334:	0800f3a1 	.word	0x0800f3a1
 800f338:	0800f3a1 	.word	0x0800f3a1
 800f33c:	0800f3a1 	.word	0x0800f3a1
 800f340:	0800f3a1 	.word	0x0800f3a1
 800f344:	0800f3a1 	.word	0x0800f3a1
 800f348:	0800f3a1 	.word	0x0800f3a1
 800f34c:	0800f3a1 	.word	0x0800f3a1
 800f350:	0800f3a1 	.word	0x0800f3a1
 800f354:	0800f3a1 	.word	0x0800f3a1
 800f358:	0800f3a1 	.word	0x0800f3a1
 800f35c:	0800f3a1 	.word	0x0800f3a1
 800f360:	0800f3a1 	.word	0x0800f3a1
 800f364:	0800f3a1 	.word	0x0800f3a1
 800f368:	0800f3a1 	.word	0x0800f3a1
 800f36c:	0800f3a1 	.word	0x0800f3a1
 800f370:	0800f3a1 	.word	0x0800f3a1
 800f374:	0800f3a1 	.word	0x0800f3a1
 800f378:	0800f3a1 	.word	0x0800f3a1
 800f37c:	0800f3a1 	.word	0x0800f3a1
 800f380:	0800f3a1 	.word	0x0800f3a1
 800f384:	0800f3a1 	.word	0x0800f3a1
 800f388:	0800f3a1 	.word	0x0800f3a1
 800f38c:	0800f3a1 	.word	0x0800f3a1
 800f390:	0800f3a1 	.word	0x0800f3a1
 800f394:	0800f3a1 	.word	0x0800f3a1
 800f398:	0800f3a1 	.word	0x0800f3a1
 800f39c:	0800f3a1 	.word	0x0800f3a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f3a0:	bf00      	nop
  }

  return (USBD_OK);
 800f3a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f3ba:	6879      	ldr	r1, [r7, #4]
 800f3bc:	4805      	ldr	r0, [pc, #20]	; (800f3d4 <CDC_Receive_FS+0x24>)
 800f3be:	f7fb fdbf 	bl	800af40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f3c2:	4804      	ldr	r0, [pc, #16]	; (800f3d4 <CDC_Receive_FS+0x24>)
 800f3c4:	f7fb fe20 	bl	800b008 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f3c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3708      	adds	r7, #8
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	2001a200 	.word	0x2001a200

0800f3d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f3e8:	4b0d      	ldr	r3, [pc, #52]	; (800f420 <CDC_Transmit_FS+0x48>)
 800f3ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d001      	beq.n	800f3fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	e00b      	b.n	800f416 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f3fe:	887b      	ldrh	r3, [r7, #2]
 800f400:	461a      	mov	r2, r3
 800f402:	6879      	ldr	r1, [r7, #4]
 800f404:	4806      	ldr	r0, [pc, #24]	; (800f420 <CDC_Transmit_FS+0x48>)
 800f406:	f7fb fd79 	bl	800aefc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f40a:	4805      	ldr	r0, [pc, #20]	; (800f420 <CDC_Transmit_FS+0x48>)
 800f40c:	f7fb fdb6 	bl	800af7c <USBD_CDC_TransmitPacket>
 800f410:	4603      	mov	r3, r0
 800f412:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f414:	7bfb      	ldrb	r3, [r7, #15]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	2001a200 	.word	0x2001a200

0800f424 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f424:	b480      	push	{r7}
 800f426:	b087      	sub	sp, #28
 800f428:	af00      	add	r7, sp, #0
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	60b9      	str	r1, [r7, #8]
 800f42e:	4613      	mov	r3, r2
 800f430:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f432:	2300      	movs	r3, #0
 800f434:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f436:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	371c      	adds	r7, #28
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr
	...

0800f448 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	4603      	mov	r3, r0
 800f450:	6039      	str	r1, [r7, #0]
 800f452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	2212      	movs	r2, #18
 800f458:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f45a:	4b03      	ldr	r3, [pc, #12]	; (800f468 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	370c      	adds	r7, #12
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	20000138 	.word	0x20000138

0800f46c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	4603      	mov	r3, r0
 800f474:	6039      	str	r1, [r7, #0]
 800f476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	2204      	movs	r2, #4
 800f47c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f47e:	4b03      	ldr	r3, [pc, #12]	; (800f48c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f480:	4618      	mov	r0, r3
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr
 800f48c:	2000014c 	.word	0x2000014c

0800f490 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	4603      	mov	r3, r0
 800f498:	6039      	str	r1, [r7, #0]
 800f49a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f49c:	79fb      	ldrb	r3, [r7, #7]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d105      	bne.n	800f4ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f4a2:	683a      	ldr	r2, [r7, #0]
 800f4a4:	4907      	ldr	r1, [pc, #28]	; (800f4c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4a6:	4808      	ldr	r0, [pc, #32]	; (800f4c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f4a8:	f7fd f812 	bl	800c4d0 <USBD_GetString>
 800f4ac:	e004      	b.n	800f4b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f4ae:	683a      	ldr	r2, [r7, #0]
 800f4b0:	4904      	ldr	r1, [pc, #16]	; (800f4c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4b2:	4805      	ldr	r0, [pc, #20]	; (800f4c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f4b4:	f7fd f80c 	bl	800c4d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4b8:	4b02      	ldr	r3, [pc, #8]	; (800f4c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	2001a8dc 	.word	0x2001a8dc
 800f4c8:	080114f0 	.word	0x080114f0

0800f4cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	6039      	str	r1, [r7, #0]
 800f4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f4d8:	683a      	ldr	r2, [r7, #0]
 800f4da:	4904      	ldr	r1, [pc, #16]	; (800f4ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f4dc:	4804      	ldr	r0, [pc, #16]	; (800f4f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f4de:	f7fc fff7 	bl	800c4d0 <USBD_GetString>
  return USBD_StrDesc;
 800f4e2:	4b02      	ldr	r3, [pc, #8]	; (800f4ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	2001a8dc 	.word	0x2001a8dc
 800f4f0:	08011508 	.word	0x08011508

0800f4f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	6039      	str	r1, [r7, #0]
 800f4fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	221a      	movs	r2, #26
 800f504:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f506:	f000 f843 	bl	800f590 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f50a:	4b02      	ldr	r3, [pc, #8]	; (800f514 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}
 800f514:	20000150 	.word	0x20000150

0800f518 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	4603      	mov	r3, r0
 800f520:	6039      	str	r1, [r7, #0]
 800f522:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f524:	79fb      	ldrb	r3, [r7, #7]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d105      	bne.n	800f536 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f52a:	683a      	ldr	r2, [r7, #0]
 800f52c:	4907      	ldr	r1, [pc, #28]	; (800f54c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f52e:	4808      	ldr	r0, [pc, #32]	; (800f550 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f530:	f7fc ffce 	bl	800c4d0 <USBD_GetString>
 800f534:	e004      	b.n	800f540 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f536:	683a      	ldr	r2, [r7, #0]
 800f538:	4904      	ldr	r1, [pc, #16]	; (800f54c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f53a:	4805      	ldr	r0, [pc, #20]	; (800f550 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f53c:	f7fc ffc8 	bl	800c4d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f540:	4b02      	ldr	r3, [pc, #8]	; (800f54c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f542:	4618      	mov	r0, r3
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	2001a8dc 	.word	0x2001a8dc
 800f550:	0801151c 	.word	0x0801151c

0800f554 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	4603      	mov	r3, r0
 800f55c:	6039      	str	r1, [r7, #0]
 800f55e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f560:	79fb      	ldrb	r3, [r7, #7]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d105      	bne.n	800f572 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	4907      	ldr	r1, [pc, #28]	; (800f588 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f56a:	4808      	ldr	r0, [pc, #32]	; (800f58c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f56c:	f7fc ffb0 	bl	800c4d0 <USBD_GetString>
 800f570:	e004      	b.n	800f57c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f572:	683a      	ldr	r2, [r7, #0]
 800f574:	4904      	ldr	r1, [pc, #16]	; (800f588 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f576:	4805      	ldr	r0, [pc, #20]	; (800f58c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f578:	f7fc ffaa 	bl	800c4d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f57c:	4b02      	ldr	r3, [pc, #8]	; (800f588 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	2001a8dc 	.word	0x2001a8dc
 800f58c:	08011528 	.word	0x08011528

0800f590 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f596:	4b0f      	ldr	r3, [pc, #60]	; (800f5d4 <Get_SerialNum+0x44>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f59c:	4b0e      	ldr	r3, [pc, #56]	; (800f5d8 <Get_SerialNum+0x48>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f5a2:	4b0e      	ldr	r3, [pc, #56]	; (800f5dc <Get_SerialNum+0x4c>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d009      	beq.n	800f5ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f5b6:	2208      	movs	r2, #8
 800f5b8:	4909      	ldr	r1, [pc, #36]	; (800f5e0 <Get_SerialNum+0x50>)
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f000 f814 	bl	800f5e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f5c0:	2204      	movs	r2, #4
 800f5c2:	4908      	ldr	r1, [pc, #32]	; (800f5e4 <Get_SerialNum+0x54>)
 800f5c4:	68b8      	ldr	r0, [r7, #8]
 800f5c6:	f000 f80f 	bl	800f5e8 <IntToUnicode>
  }
}
 800f5ca:	bf00      	nop
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	1fff7a10 	.word	0x1fff7a10
 800f5d8:	1fff7a14 	.word	0x1fff7a14
 800f5dc:	1fff7a18 	.word	0x1fff7a18
 800f5e0:	20000152 	.word	0x20000152
 800f5e4:	20000162 	.word	0x20000162

0800f5e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b087      	sub	sp, #28
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	75fb      	strb	r3, [r7, #23]
 800f5fe:	e027      	b.n	800f650 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	0f1b      	lsrs	r3, r3, #28
 800f604:	2b09      	cmp	r3, #9
 800f606:	d80b      	bhi.n	800f620 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	0f1b      	lsrs	r3, r3, #28
 800f60c:	b2da      	uxtb	r2, r3
 800f60e:	7dfb      	ldrb	r3, [r7, #23]
 800f610:	005b      	lsls	r3, r3, #1
 800f612:	4619      	mov	r1, r3
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	440b      	add	r3, r1
 800f618:	3230      	adds	r2, #48	; 0x30
 800f61a:	b2d2      	uxtb	r2, r2
 800f61c:	701a      	strb	r2, [r3, #0]
 800f61e:	e00a      	b.n	800f636 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	0f1b      	lsrs	r3, r3, #28
 800f624:	b2da      	uxtb	r2, r3
 800f626:	7dfb      	ldrb	r3, [r7, #23]
 800f628:	005b      	lsls	r3, r3, #1
 800f62a:	4619      	mov	r1, r3
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	440b      	add	r3, r1
 800f630:	3237      	adds	r2, #55	; 0x37
 800f632:	b2d2      	uxtb	r2, r2
 800f634:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	011b      	lsls	r3, r3, #4
 800f63a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f63c:	7dfb      	ldrb	r3, [r7, #23]
 800f63e:	005b      	lsls	r3, r3, #1
 800f640:	3301      	adds	r3, #1
 800f642:	68ba      	ldr	r2, [r7, #8]
 800f644:	4413      	add	r3, r2
 800f646:	2200      	movs	r2, #0
 800f648:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f64a:	7dfb      	ldrb	r3, [r7, #23]
 800f64c:	3301      	adds	r3, #1
 800f64e:	75fb      	strb	r3, [r7, #23]
 800f650:	7dfa      	ldrb	r2, [r7, #23]
 800f652:	79fb      	ldrb	r3, [r7, #7]
 800f654:	429a      	cmp	r2, r3
 800f656:	d3d3      	bcc.n	800f600 <IntToUnicode+0x18>
  }
}
 800f658:	bf00      	nop
 800f65a:	bf00      	nop
 800f65c:	371c      	adds	r7, #28
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr
	...

0800f668 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b08a      	sub	sp, #40	; 0x28
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f670:	f107 0314 	add.w	r3, r7, #20
 800f674:	2200      	movs	r2, #0
 800f676:	601a      	str	r2, [r3, #0]
 800f678:	605a      	str	r2, [r3, #4]
 800f67a:	609a      	str	r2, [r3, #8]
 800f67c:	60da      	str	r2, [r3, #12]
 800f67e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f688:	d13a      	bne.n	800f700 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f68a:	2300      	movs	r3, #0
 800f68c:	613b      	str	r3, [r7, #16]
 800f68e:	4b1e      	ldr	r3, [pc, #120]	; (800f708 <HAL_PCD_MspInit+0xa0>)
 800f690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f692:	4a1d      	ldr	r2, [pc, #116]	; (800f708 <HAL_PCD_MspInit+0xa0>)
 800f694:	f043 0301 	orr.w	r3, r3, #1
 800f698:	6313      	str	r3, [r2, #48]	; 0x30
 800f69a:	4b1b      	ldr	r3, [pc, #108]	; (800f708 <HAL_PCD_MspInit+0xa0>)
 800f69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f69e:	f003 0301 	and.w	r3, r3, #1
 800f6a2:	613b      	str	r3, [r7, #16]
 800f6a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f6a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f6aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6ac:	2302      	movs	r3, #2
 800f6ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6b4:	2303      	movs	r3, #3
 800f6b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f6b8:	230a      	movs	r3, #10
 800f6ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6bc:	f107 0314 	add.w	r3, r7, #20
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	4812      	ldr	r0, [pc, #72]	; (800f70c <HAL_PCD_MspInit+0xa4>)
 800f6c4:	f7f2 fdca 	bl	800225c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f6c8:	4b0f      	ldr	r3, [pc, #60]	; (800f708 <HAL_PCD_MspInit+0xa0>)
 800f6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6cc:	4a0e      	ldr	r2, [pc, #56]	; (800f708 <HAL_PCD_MspInit+0xa0>)
 800f6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6d2:	6353      	str	r3, [r2, #52]	; 0x34
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	60fb      	str	r3, [r7, #12]
 800f6d8:	4b0b      	ldr	r3, [pc, #44]	; (800f708 <HAL_PCD_MspInit+0xa0>)
 800f6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6dc:	4a0a      	ldr	r2, [pc, #40]	; (800f708 <HAL_PCD_MspInit+0xa0>)
 800f6de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f6e2:	6453      	str	r3, [r2, #68]	; 0x44
 800f6e4:	4b08      	ldr	r3, [pc, #32]	; (800f708 <HAL_PCD_MspInit+0xa0>)
 800f6e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f6ec:	60fb      	str	r3, [r7, #12]
 800f6ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	2105      	movs	r1, #5
 800f6f4:	2043      	movs	r0, #67	; 0x43
 800f6f6:	f7f2 fd6d 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f6fa:	2043      	movs	r0, #67	; 0x43
 800f6fc:	f7f2 fd96 	bl	800222c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f700:	bf00      	nop
 800f702:	3728      	adds	r7, #40	; 0x28
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	40023800 	.word	0x40023800
 800f70c:	40020000 	.word	0x40020000

0800f710 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f724:	4619      	mov	r1, r3
 800f726:	4610      	mov	r0, r2
 800f728:	f7fb fd73 	bl	800b212 <USBD_LL_SetupStage>
}
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	460b      	mov	r3, r1
 800f73e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f746:	78fa      	ldrb	r2, [r7, #3]
 800f748:	6879      	ldr	r1, [r7, #4]
 800f74a:	4613      	mov	r3, r2
 800f74c:	00db      	lsls	r3, r3, #3
 800f74e:	4413      	add	r3, r2
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	440b      	add	r3, r1
 800f754:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	78fb      	ldrb	r3, [r7, #3]
 800f75c:	4619      	mov	r1, r3
 800f75e:	f7fb fdad 	bl	800b2bc <USBD_LL_DataOutStage>
}
 800f762:	bf00      	nop
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b082      	sub	sp, #8
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	460b      	mov	r3, r1
 800f774:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f77c:	78fa      	ldrb	r2, [r7, #3]
 800f77e:	6879      	ldr	r1, [r7, #4]
 800f780:	4613      	mov	r3, r2
 800f782:	00db      	lsls	r3, r3, #3
 800f784:	4413      	add	r3, r2
 800f786:	009b      	lsls	r3, r3, #2
 800f788:	440b      	add	r3, r1
 800f78a:	334c      	adds	r3, #76	; 0x4c
 800f78c:	681a      	ldr	r2, [r3, #0]
 800f78e:	78fb      	ldrb	r3, [r7, #3]
 800f790:	4619      	mov	r1, r3
 800f792:	f7fb fe46 	bl	800b422 <USBD_LL_DataInStage>
}
 800f796:	bf00      	nop
 800f798:	3708      	adds	r7, #8
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b082      	sub	sp, #8
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7fb ff7a 	bl	800b6a6 <USBD_LL_SOF>
}
 800f7b2:	bf00      	nop
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b084      	sub	sp, #16
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	2b02      	cmp	r3, #2
 800f7cc:	d001      	beq.n	800f7d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f7ce:	f7f1 fc55 	bl	800107c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7d8:	7bfa      	ldrb	r2, [r7, #15]
 800f7da:	4611      	mov	r1, r2
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fb ff24 	bl	800b62a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fb fecc 	bl	800b586 <USBD_LL_Reset>
}
 800f7ee:	bf00      	nop
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
	...

0800f7f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f806:	4618      	mov	r0, r3
 800f808:	f7fb ff1f 	bl	800b64a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	6812      	ldr	r2, [r2, #0]
 800f81a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f81e:	f043 0301 	orr.w	r3, r3, #1
 800f822:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6a1b      	ldr	r3, [r3, #32]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d005      	beq.n	800f838 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f82c:	4b04      	ldr	r3, [pc, #16]	; (800f840 <HAL_PCD_SuspendCallback+0x48>)
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	4a03      	ldr	r2, [pc, #12]	; (800f840 <HAL_PCD_SuspendCallback+0x48>)
 800f832:	f043 0306 	orr.w	r3, r3, #6
 800f836:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f838:	bf00      	nop
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	e000ed00 	.word	0xe000ed00

0800f844 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f852:	4618      	mov	r0, r3
 800f854:	f7fb ff0f 	bl	800b676 <USBD_LL_Resume>
}
 800f858:	bf00      	nop
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	460b      	mov	r3, r1
 800f86a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f872:	78fa      	ldrb	r2, [r7, #3]
 800f874:	4611      	mov	r1, r2
 800f876:	4618      	mov	r0, r3
 800f878:	f7fb ff67 	bl	800b74a <USBD_LL_IsoOUTIncomplete>
}
 800f87c:	bf00      	nop
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	460b      	mov	r3, r1
 800f88e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f896:	78fa      	ldrb	r2, [r7, #3]
 800f898:	4611      	mov	r1, r2
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fb ff23 	bl	800b6e6 <USBD_LL_IsoINIncomplete>
}
 800f8a0:	bf00      	nop
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}

0800f8a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fb ff79 	bl	800b7ae <USBD_LL_DevConnected>
}
 800f8bc:	bf00      	nop
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fb ff76 	bl	800b7c4 <USBD_LL_DevDisconnected>
}
 800f8d8:	bf00      	nop
 800f8da:	3708      	adds	r7, #8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d13c      	bne.n	800f96a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f8f0:	4a20      	ldr	r2, [pc, #128]	; (800f974 <USBD_LL_Init+0x94>)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a1e      	ldr	r2, [pc, #120]	; (800f974 <USBD_LL_Init+0x94>)
 800f8fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f900:	4b1c      	ldr	r3, [pc, #112]	; (800f974 <USBD_LL_Init+0x94>)
 800f902:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f906:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f908:	4b1a      	ldr	r3, [pc, #104]	; (800f974 <USBD_LL_Init+0x94>)
 800f90a:	2204      	movs	r2, #4
 800f90c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f90e:	4b19      	ldr	r3, [pc, #100]	; (800f974 <USBD_LL_Init+0x94>)
 800f910:	2202      	movs	r2, #2
 800f912:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f914:	4b17      	ldr	r3, [pc, #92]	; (800f974 <USBD_LL_Init+0x94>)
 800f916:	2200      	movs	r2, #0
 800f918:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f91a:	4b16      	ldr	r3, [pc, #88]	; (800f974 <USBD_LL_Init+0x94>)
 800f91c:	2202      	movs	r2, #2
 800f91e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f920:	4b14      	ldr	r3, [pc, #80]	; (800f974 <USBD_LL_Init+0x94>)
 800f922:	2200      	movs	r2, #0
 800f924:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f926:	4b13      	ldr	r3, [pc, #76]	; (800f974 <USBD_LL_Init+0x94>)
 800f928:	2200      	movs	r2, #0
 800f92a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f92c:	4b11      	ldr	r3, [pc, #68]	; (800f974 <USBD_LL_Init+0x94>)
 800f92e:	2200      	movs	r2, #0
 800f930:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f932:	4b10      	ldr	r3, [pc, #64]	; (800f974 <USBD_LL_Init+0x94>)
 800f934:	2200      	movs	r2, #0
 800f936:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f938:	4b0e      	ldr	r3, [pc, #56]	; (800f974 <USBD_LL_Init+0x94>)
 800f93a:	2200      	movs	r2, #0
 800f93c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f93e:	480d      	ldr	r0, [pc, #52]	; (800f974 <USBD_LL_Init+0x94>)
 800f940:	f7f3 fdb6 	bl	80034b0 <HAL_PCD_Init>
 800f944:	4603      	mov	r3, r0
 800f946:	2b00      	cmp	r3, #0
 800f948:	d001      	beq.n	800f94e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f94a:	f7f1 fb97 	bl	800107c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f94e:	2180      	movs	r1, #128	; 0x80
 800f950:	4808      	ldr	r0, [pc, #32]	; (800f974 <USBD_LL_Init+0x94>)
 800f952:	f7f5 f818 	bl	8004986 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f956:	2240      	movs	r2, #64	; 0x40
 800f958:	2100      	movs	r1, #0
 800f95a:	4806      	ldr	r0, [pc, #24]	; (800f974 <USBD_LL_Init+0x94>)
 800f95c:	f7f4 ffcc 	bl	80048f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f960:	2280      	movs	r2, #128	; 0x80
 800f962:	2101      	movs	r1, #1
 800f964:	4803      	ldr	r0, [pc, #12]	; (800f974 <USBD_LL_Init+0x94>)
 800f966:	f7f4 ffc7 	bl	80048f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f96a:	2300      	movs	r3, #0
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	2001aadc 	.word	0x2001aadc

0800f978 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f980:	2300      	movs	r3, #0
 800f982:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f984:	2300      	movs	r3, #0
 800f986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f3 feb6 	bl	8003700 <HAL_PCD_Start>
 800f994:	4603      	mov	r3, r0
 800f996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f998:	7bfb      	ldrb	r3, [r7, #15]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f000 f942 	bl	800fc24 <USBD_Get_USB_Status>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b084      	sub	sp, #16
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
 800f9b6:	4608      	mov	r0, r1
 800f9b8:	4611      	mov	r1, r2
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	4603      	mov	r3, r0
 800f9be:	70fb      	strb	r3, [r7, #3]
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	70bb      	strb	r3, [r7, #2]
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f9d6:	78bb      	ldrb	r3, [r7, #2]
 800f9d8:	883a      	ldrh	r2, [r7, #0]
 800f9da:	78f9      	ldrb	r1, [r7, #3]
 800f9dc:	f7f4 fb87 	bl	80040ee <HAL_PCD_EP_Open>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f000 f91c 	bl	800fc24 <USBD_Get_USB_Status>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
 800fa02:	460b      	mov	r3, r1
 800fa04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa06:	2300      	movs	r3, #0
 800fa08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa14:	78fa      	ldrb	r2, [r7, #3]
 800fa16:	4611      	mov	r1, r2
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7f4 fbd0 	bl	80041be <HAL_PCD_EP_Close>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa22:	7bfb      	ldrb	r3, [r7, #15]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f000 f8fd 	bl	800fc24 <USBD_Get_USB_Status>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3710      	adds	r7, #16
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	460b      	mov	r3, r1
 800fa42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa44:	2300      	movs	r3, #0
 800fa46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa52:	78fa      	ldrb	r2, [r7, #3]
 800fa54:	4611      	mov	r1, r2
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7f4 fca8 	bl	80043ac <HAL_PCD_EP_SetStall>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa60:	7bfb      	ldrb	r3, [r7, #15]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f000 f8de 	bl	800fc24 <USBD_Get_USB_Status>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3710      	adds	r7, #16
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b084      	sub	sp, #16
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
 800fa7e:	460b      	mov	r3, r1
 800fa80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa82:	2300      	movs	r3, #0
 800fa84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa86:	2300      	movs	r3, #0
 800fa88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa90:	78fa      	ldrb	r2, [r7, #3]
 800fa92:	4611      	mov	r1, r2
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7f4 fced 	bl	8004474 <HAL_PCD_EP_ClrStall>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa9e:	7bfb      	ldrb	r3, [r7, #15]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f000 f8bf 	bl	800fc24 <USBD_Get_USB_Status>
 800faa6:	4603      	mov	r3, r0
 800faa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800faac:	4618      	mov	r0, r3
 800faae:	3710      	adds	r7, #16
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	460b      	mov	r3, r1
 800fabe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fac6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800facc:	2b00      	cmp	r3, #0
 800face:	da0b      	bge.n	800fae8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fad0:	78fb      	ldrb	r3, [r7, #3]
 800fad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fad6:	68f9      	ldr	r1, [r7, #12]
 800fad8:	4613      	mov	r3, r2
 800fada:	00db      	lsls	r3, r3, #3
 800fadc:	4413      	add	r3, r2
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	440b      	add	r3, r1
 800fae2:	333e      	adds	r3, #62	; 0x3e
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	e00b      	b.n	800fb00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fae8:	78fb      	ldrb	r3, [r7, #3]
 800faea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800faee:	68f9      	ldr	r1, [r7, #12]
 800faf0:	4613      	mov	r3, r2
 800faf2:	00db      	lsls	r3, r3, #3
 800faf4:	4413      	add	r3, r2
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	440b      	add	r3, r1
 800fafa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fafe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	460b      	mov	r3, r1
 800fb16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb26:	78fa      	ldrb	r2, [r7, #3]
 800fb28:	4611      	mov	r1, r2
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7f4 faba 	bl	80040a4 <HAL_PCD_SetAddress>
 800fb30:	4603      	mov	r3, r0
 800fb32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb34:	7bfb      	ldrb	r3, [r7, #15]
 800fb36:	4618      	mov	r0, r3
 800fb38:	f000 f874 	bl	800fc24 <USBD_Get_USB_Status>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb40:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb4a:	b580      	push	{r7, lr}
 800fb4c:	b086      	sub	sp, #24
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	60f8      	str	r0, [r7, #12]
 800fb52:	607a      	str	r2, [r7, #4]
 800fb54:	603b      	str	r3, [r7, #0]
 800fb56:	460b      	mov	r3, r1
 800fb58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb68:	7af9      	ldrb	r1, [r7, #11]
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	f7f4 fbd3 	bl	8004318 <HAL_PCD_EP_Transmit>
 800fb72:	4603      	mov	r3, r0
 800fb74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb76:	7dfb      	ldrb	r3, [r7, #23]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f000 f853 	bl	800fc24 <USBD_Get_USB_Status>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb82:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3718      	adds	r7, #24
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b086      	sub	sp, #24
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	607a      	str	r2, [r7, #4]
 800fb96:	603b      	str	r3, [r7, #0]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbaa:	7af9      	ldrb	r1, [r7, #11]
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	f7f4 fb4f 	bl	8004252 <HAL_PCD_EP_Receive>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbb8:	7dfb      	ldrb	r3, [r7, #23]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f000 f832 	bl	800fc24 <USBD_Get_USB_Status>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fbc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3718      	adds	r7, #24
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbce:	b580      	push	{r7, lr}
 800fbd0:	b082      	sub	sp, #8
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
 800fbd6:	460b      	mov	r3, r1
 800fbd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbe0:	78fa      	ldrb	r2, [r7, #3]
 800fbe2:	4611      	mov	r1, r2
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7f4 fb7f 	bl	80042e8 <HAL_PCD_EP_GetRxCount>
 800fbea:	4603      	mov	r3, r0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3708      	adds	r7, #8
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fbfc:	4b03      	ldr	r3, [pc, #12]	; (800fc0c <USBD_static_malloc+0x18>)
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	370c      	adds	r7, #12
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	2001afe8 	.word	0x2001afe8

0800fc10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]

}
 800fc18:	bf00      	nop
 800fc1a:	370c      	adds	r7, #12
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc32:	79fb      	ldrb	r3, [r7, #7]
 800fc34:	2b03      	cmp	r3, #3
 800fc36:	d817      	bhi.n	800fc68 <USBD_Get_USB_Status+0x44>
 800fc38:	a201      	add	r2, pc, #4	; (adr r2, 800fc40 <USBD_Get_USB_Status+0x1c>)
 800fc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3e:	bf00      	nop
 800fc40:	0800fc51 	.word	0x0800fc51
 800fc44:	0800fc57 	.word	0x0800fc57
 800fc48:	0800fc5d 	.word	0x0800fc5d
 800fc4c:	0800fc63 	.word	0x0800fc63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fc50:	2300      	movs	r3, #0
 800fc52:	73fb      	strb	r3, [r7, #15]
    break;
 800fc54:	e00b      	b.n	800fc6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc56:	2303      	movs	r3, #3
 800fc58:	73fb      	strb	r3, [r7, #15]
    break;
 800fc5a:	e008      	b.n	800fc6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	73fb      	strb	r3, [r7, #15]
    break;
 800fc60:	e005      	b.n	800fc6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc62:	2303      	movs	r3, #3
 800fc64:	73fb      	strb	r3, [r7, #15]
    break;
 800fc66:	e002      	b.n	800fc6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fc68:	2303      	movs	r3, #3
 800fc6a:	73fb      	strb	r3, [r7, #15]
    break;
 800fc6c:	bf00      	nop
  }
  return usb_status;
 800fc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <__errno>:
 800fc7c:	4b01      	ldr	r3, [pc, #4]	; (800fc84 <__errno+0x8>)
 800fc7e:	6818      	ldr	r0, [r3, #0]
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop
 800fc84:	2000016c 	.word	0x2000016c

0800fc88 <std>:
 800fc88:	2300      	movs	r3, #0
 800fc8a:	b510      	push	{r4, lr}
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	e9c0 3300 	strd	r3, r3, [r0]
 800fc92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc96:	6083      	str	r3, [r0, #8]
 800fc98:	8181      	strh	r1, [r0, #12]
 800fc9a:	6643      	str	r3, [r0, #100]	; 0x64
 800fc9c:	81c2      	strh	r2, [r0, #14]
 800fc9e:	6183      	str	r3, [r0, #24]
 800fca0:	4619      	mov	r1, r3
 800fca2:	2208      	movs	r2, #8
 800fca4:	305c      	adds	r0, #92	; 0x5c
 800fca6:	f000 f92b 	bl	800ff00 <memset>
 800fcaa:	4b05      	ldr	r3, [pc, #20]	; (800fcc0 <std+0x38>)
 800fcac:	6263      	str	r3, [r4, #36]	; 0x24
 800fcae:	4b05      	ldr	r3, [pc, #20]	; (800fcc4 <std+0x3c>)
 800fcb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fcb2:	4b05      	ldr	r3, [pc, #20]	; (800fcc8 <std+0x40>)
 800fcb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fcb6:	4b05      	ldr	r3, [pc, #20]	; (800fccc <std+0x44>)
 800fcb8:	6224      	str	r4, [r4, #32]
 800fcba:	6323      	str	r3, [r4, #48]	; 0x30
 800fcbc:	bd10      	pop	{r4, pc}
 800fcbe:	bf00      	nop
 800fcc0:	08010261 	.word	0x08010261
 800fcc4:	08010283 	.word	0x08010283
 800fcc8:	080102bb 	.word	0x080102bb
 800fccc:	080102df 	.word	0x080102df

0800fcd0 <_cleanup_r>:
 800fcd0:	4901      	ldr	r1, [pc, #4]	; (800fcd8 <_cleanup_r+0x8>)
 800fcd2:	f000 b8af 	b.w	800fe34 <_fwalk_reent>
 800fcd6:	bf00      	nop
 800fcd8:	08010439 	.word	0x08010439

0800fcdc <__sfmoreglue>:
 800fcdc:	b570      	push	{r4, r5, r6, lr}
 800fcde:	2268      	movs	r2, #104	; 0x68
 800fce0:	1e4d      	subs	r5, r1, #1
 800fce2:	4355      	muls	r5, r2
 800fce4:	460e      	mov	r6, r1
 800fce6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fcea:	f000 f97d 	bl	800ffe8 <_malloc_r>
 800fcee:	4604      	mov	r4, r0
 800fcf0:	b140      	cbz	r0, 800fd04 <__sfmoreglue+0x28>
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	e9c0 1600 	strd	r1, r6, [r0]
 800fcf8:	300c      	adds	r0, #12
 800fcfa:	60a0      	str	r0, [r4, #8]
 800fcfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd00:	f000 f8fe 	bl	800ff00 <memset>
 800fd04:	4620      	mov	r0, r4
 800fd06:	bd70      	pop	{r4, r5, r6, pc}

0800fd08 <__sfp_lock_acquire>:
 800fd08:	4801      	ldr	r0, [pc, #4]	; (800fd10 <__sfp_lock_acquire+0x8>)
 800fd0a:	f000 b8d8 	b.w	800febe <__retarget_lock_acquire_recursive>
 800fd0e:	bf00      	nop
 800fd10:	2001b209 	.word	0x2001b209

0800fd14 <__sfp_lock_release>:
 800fd14:	4801      	ldr	r0, [pc, #4]	; (800fd1c <__sfp_lock_release+0x8>)
 800fd16:	f000 b8d3 	b.w	800fec0 <__retarget_lock_release_recursive>
 800fd1a:	bf00      	nop
 800fd1c:	2001b209 	.word	0x2001b209

0800fd20 <__sinit_lock_acquire>:
 800fd20:	4801      	ldr	r0, [pc, #4]	; (800fd28 <__sinit_lock_acquire+0x8>)
 800fd22:	f000 b8cc 	b.w	800febe <__retarget_lock_acquire_recursive>
 800fd26:	bf00      	nop
 800fd28:	2001b20a 	.word	0x2001b20a

0800fd2c <__sinit_lock_release>:
 800fd2c:	4801      	ldr	r0, [pc, #4]	; (800fd34 <__sinit_lock_release+0x8>)
 800fd2e:	f000 b8c7 	b.w	800fec0 <__retarget_lock_release_recursive>
 800fd32:	bf00      	nop
 800fd34:	2001b20a 	.word	0x2001b20a

0800fd38 <__sinit>:
 800fd38:	b510      	push	{r4, lr}
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	f7ff fff0 	bl	800fd20 <__sinit_lock_acquire>
 800fd40:	69a3      	ldr	r3, [r4, #24]
 800fd42:	b11b      	cbz	r3, 800fd4c <__sinit+0x14>
 800fd44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd48:	f7ff bff0 	b.w	800fd2c <__sinit_lock_release>
 800fd4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd50:	6523      	str	r3, [r4, #80]	; 0x50
 800fd52:	4b13      	ldr	r3, [pc, #76]	; (800fda0 <__sinit+0x68>)
 800fd54:	4a13      	ldr	r2, [pc, #76]	; (800fda4 <__sinit+0x6c>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd5a:	42a3      	cmp	r3, r4
 800fd5c:	bf04      	itt	eq
 800fd5e:	2301      	moveq	r3, #1
 800fd60:	61a3      	streq	r3, [r4, #24]
 800fd62:	4620      	mov	r0, r4
 800fd64:	f000 f820 	bl	800fda8 <__sfp>
 800fd68:	6060      	str	r0, [r4, #4]
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	f000 f81c 	bl	800fda8 <__sfp>
 800fd70:	60a0      	str	r0, [r4, #8]
 800fd72:	4620      	mov	r0, r4
 800fd74:	f000 f818 	bl	800fda8 <__sfp>
 800fd78:	2200      	movs	r2, #0
 800fd7a:	60e0      	str	r0, [r4, #12]
 800fd7c:	2104      	movs	r1, #4
 800fd7e:	6860      	ldr	r0, [r4, #4]
 800fd80:	f7ff ff82 	bl	800fc88 <std>
 800fd84:	68a0      	ldr	r0, [r4, #8]
 800fd86:	2201      	movs	r2, #1
 800fd88:	2109      	movs	r1, #9
 800fd8a:	f7ff ff7d 	bl	800fc88 <std>
 800fd8e:	68e0      	ldr	r0, [r4, #12]
 800fd90:	2202      	movs	r2, #2
 800fd92:	2112      	movs	r1, #18
 800fd94:	f7ff ff78 	bl	800fc88 <std>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	61a3      	str	r3, [r4, #24]
 800fd9c:	e7d2      	b.n	800fd44 <__sinit+0xc>
 800fd9e:	bf00      	nop
 800fda0:	08013ea8 	.word	0x08013ea8
 800fda4:	0800fcd1 	.word	0x0800fcd1

0800fda8 <__sfp>:
 800fda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdaa:	4607      	mov	r7, r0
 800fdac:	f7ff ffac 	bl	800fd08 <__sfp_lock_acquire>
 800fdb0:	4b1e      	ldr	r3, [pc, #120]	; (800fe2c <__sfp+0x84>)
 800fdb2:	681e      	ldr	r6, [r3, #0]
 800fdb4:	69b3      	ldr	r3, [r6, #24]
 800fdb6:	b913      	cbnz	r3, 800fdbe <__sfp+0x16>
 800fdb8:	4630      	mov	r0, r6
 800fdba:	f7ff ffbd 	bl	800fd38 <__sinit>
 800fdbe:	3648      	adds	r6, #72	; 0x48
 800fdc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fdc4:	3b01      	subs	r3, #1
 800fdc6:	d503      	bpl.n	800fdd0 <__sfp+0x28>
 800fdc8:	6833      	ldr	r3, [r6, #0]
 800fdca:	b30b      	cbz	r3, 800fe10 <__sfp+0x68>
 800fdcc:	6836      	ldr	r6, [r6, #0]
 800fdce:	e7f7      	b.n	800fdc0 <__sfp+0x18>
 800fdd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fdd4:	b9d5      	cbnz	r5, 800fe0c <__sfp+0x64>
 800fdd6:	4b16      	ldr	r3, [pc, #88]	; (800fe30 <__sfp+0x88>)
 800fdd8:	60e3      	str	r3, [r4, #12]
 800fdda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fdde:	6665      	str	r5, [r4, #100]	; 0x64
 800fde0:	f000 f86c 	bl	800febc <__retarget_lock_init_recursive>
 800fde4:	f7ff ff96 	bl	800fd14 <__sfp_lock_release>
 800fde8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fdec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fdf0:	6025      	str	r5, [r4, #0]
 800fdf2:	61a5      	str	r5, [r4, #24]
 800fdf4:	2208      	movs	r2, #8
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fdfc:	f000 f880 	bl	800ff00 <memset>
 800fe00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe08:	4620      	mov	r0, r4
 800fe0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe0c:	3468      	adds	r4, #104	; 0x68
 800fe0e:	e7d9      	b.n	800fdc4 <__sfp+0x1c>
 800fe10:	2104      	movs	r1, #4
 800fe12:	4638      	mov	r0, r7
 800fe14:	f7ff ff62 	bl	800fcdc <__sfmoreglue>
 800fe18:	4604      	mov	r4, r0
 800fe1a:	6030      	str	r0, [r6, #0]
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	d1d5      	bne.n	800fdcc <__sfp+0x24>
 800fe20:	f7ff ff78 	bl	800fd14 <__sfp_lock_release>
 800fe24:	230c      	movs	r3, #12
 800fe26:	603b      	str	r3, [r7, #0]
 800fe28:	e7ee      	b.n	800fe08 <__sfp+0x60>
 800fe2a:	bf00      	nop
 800fe2c:	08013ea8 	.word	0x08013ea8
 800fe30:	ffff0001 	.word	0xffff0001

0800fe34 <_fwalk_reent>:
 800fe34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe38:	4606      	mov	r6, r0
 800fe3a:	4688      	mov	r8, r1
 800fe3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fe40:	2700      	movs	r7, #0
 800fe42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe46:	f1b9 0901 	subs.w	r9, r9, #1
 800fe4a:	d505      	bpl.n	800fe58 <_fwalk_reent+0x24>
 800fe4c:	6824      	ldr	r4, [r4, #0]
 800fe4e:	2c00      	cmp	r4, #0
 800fe50:	d1f7      	bne.n	800fe42 <_fwalk_reent+0xe>
 800fe52:	4638      	mov	r0, r7
 800fe54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe58:	89ab      	ldrh	r3, [r5, #12]
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d907      	bls.n	800fe6e <_fwalk_reent+0x3a>
 800fe5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe62:	3301      	adds	r3, #1
 800fe64:	d003      	beq.n	800fe6e <_fwalk_reent+0x3a>
 800fe66:	4629      	mov	r1, r5
 800fe68:	4630      	mov	r0, r6
 800fe6a:	47c0      	blx	r8
 800fe6c:	4307      	orrs	r7, r0
 800fe6e:	3568      	adds	r5, #104	; 0x68
 800fe70:	e7e9      	b.n	800fe46 <_fwalk_reent+0x12>
	...

0800fe74 <__libc_init_array>:
 800fe74:	b570      	push	{r4, r5, r6, lr}
 800fe76:	4d0d      	ldr	r5, [pc, #52]	; (800feac <__libc_init_array+0x38>)
 800fe78:	4c0d      	ldr	r4, [pc, #52]	; (800feb0 <__libc_init_array+0x3c>)
 800fe7a:	1b64      	subs	r4, r4, r5
 800fe7c:	10a4      	asrs	r4, r4, #2
 800fe7e:	2600      	movs	r6, #0
 800fe80:	42a6      	cmp	r6, r4
 800fe82:	d109      	bne.n	800fe98 <__libc_init_array+0x24>
 800fe84:	4d0b      	ldr	r5, [pc, #44]	; (800feb4 <__libc_init_array+0x40>)
 800fe86:	4c0c      	ldr	r4, [pc, #48]	; (800feb8 <__libc_init_array+0x44>)
 800fe88:	f001 f96e 	bl	8011168 <_init>
 800fe8c:	1b64      	subs	r4, r4, r5
 800fe8e:	10a4      	asrs	r4, r4, #2
 800fe90:	2600      	movs	r6, #0
 800fe92:	42a6      	cmp	r6, r4
 800fe94:	d105      	bne.n	800fea2 <__libc_init_array+0x2e>
 800fe96:	bd70      	pop	{r4, r5, r6, pc}
 800fe98:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe9c:	4798      	blx	r3
 800fe9e:	3601      	adds	r6, #1
 800fea0:	e7ee      	b.n	800fe80 <__libc_init_array+0xc>
 800fea2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fea6:	4798      	blx	r3
 800fea8:	3601      	adds	r6, #1
 800feaa:	e7f2      	b.n	800fe92 <__libc_init_array+0x1e>
 800feac:	08013ee8 	.word	0x08013ee8
 800feb0:	08013ee8 	.word	0x08013ee8
 800feb4:	08013ee8 	.word	0x08013ee8
 800feb8:	08013eec 	.word	0x08013eec

0800febc <__retarget_lock_init_recursive>:
 800febc:	4770      	bx	lr

0800febe <__retarget_lock_acquire_recursive>:
 800febe:	4770      	bx	lr

0800fec0 <__retarget_lock_release_recursive>:
 800fec0:	4770      	bx	lr
	...

0800fec4 <malloc>:
 800fec4:	4b02      	ldr	r3, [pc, #8]	; (800fed0 <malloc+0xc>)
 800fec6:	4601      	mov	r1, r0
 800fec8:	6818      	ldr	r0, [r3, #0]
 800feca:	f000 b88d 	b.w	800ffe8 <_malloc_r>
 800fece:	bf00      	nop
 800fed0:	2000016c 	.word	0x2000016c

0800fed4 <free>:
 800fed4:	4b02      	ldr	r3, [pc, #8]	; (800fee0 <free+0xc>)
 800fed6:	4601      	mov	r1, r0
 800fed8:	6818      	ldr	r0, [r3, #0]
 800feda:	f000 b819 	b.w	800ff10 <_free_r>
 800fede:	bf00      	nop
 800fee0:	2000016c 	.word	0x2000016c

0800fee4 <memcpy>:
 800fee4:	440a      	add	r2, r1
 800fee6:	4291      	cmp	r1, r2
 800fee8:	f100 33ff 	add.w	r3, r0, #4294967295
 800feec:	d100      	bne.n	800fef0 <memcpy+0xc>
 800feee:	4770      	bx	lr
 800fef0:	b510      	push	{r4, lr}
 800fef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fefa:	4291      	cmp	r1, r2
 800fefc:	d1f9      	bne.n	800fef2 <memcpy+0xe>
 800fefe:	bd10      	pop	{r4, pc}

0800ff00 <memset>:
 800ff00:	4402      	add	r2, r0
 800ff02:	4603      	mov	r3, r0
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d100      	bne.n	800ff0a <memset+0xa>
 800ff08:	4770      	bx	lr
 800ff0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff0e:	e7f9      	b.n	800ff04 <memset+0x4>

0800ff10 <_free_r>:
 800ff10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff12:	2900      	cmp	r1, #0
 800ff14:	d044      	beq.n	800ffa0 <_free_r+0x90>
 800ff16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff1a:	9001      	str	r0, [sp, #4]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ff22:	bfb8      	it	lt
 800ff24:	18e4      	addlt	r4, r4, r3
 800ff26:	f000 fad5 	bl	80104d4 <__malloc_lock>
 800ff2a:	4a1e      	ldr	r2, [pc, #120]	; (800ffa4 <_free_r+0x94>)
 800ff2c:	9801      	ldr	r0, [sp, #4]
 800ff2e:	6813      	ldr	r3, [r2, #0]
 800ff30:	b933      	cbnz	r3, 800ff40 <_free_r+0x30>
 800ff32:	6063      	str	r3, [r4, #4]
 800ff34:	6014      	str	r4, [r2, #0]
 800ff36:	b003      	add	sp, #12
 800ff38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff3c:	f000 bad0 	b.w	80104e0 <__malloc_unlock>
 800ff40:	42a3      	cmp	r3, r4
 800ff42:	d908      	bls.n	800ff56 <_free_r+0x46>
 800ff44:	6825      	ldr	r5, [r4, #0]
 800ff46:	1961      	adds	r1, r4, r5
 800ff48:	428b      	cmp	r3, r1
 800ff4a:	bf01      	itttt	eq
 800ff4c:	6819      	ldreq	r1, [r3, #0]
 800ff4e:	685b      	ldreq	r3, [r3, #4]
 800ff50:	1949      	addeq	r1, r1, r5
 800ff52:	6021      	streq	r1, [r4, #0]
 800ff54:	e7ed      	b.n	800ff32 <_free_r+0x22>
 800ff56:	461a      	mov	r2, r3
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	b10b      	cbz	r3, 800ff60 <_free_r+0x50>
 800ff5c:	42a3      	cmp	r3, r4
 800ff5e:	d9fa      	bls.n	800ff56 <_free_r+0x46>
 800ff60:	6811      	ldr	r1, [r2, #0]
 800ff62:	1855      	adds	r5, r2, r1
 800ff64:	42a5      	cmp	r5, r4
 800ff66:	d10b      	bne.n	800ff80 <_free_r+0x70>
 800ff68:	6824      	ldr	r4, [r4, #0]
 800ff6a:	4421      	add	r1, r4
 800ff6c:	1854      	adds	r4, r2, r1
 800ff6e:	42a3      	cmp	r3, r4
 800ff70:	6011      	str	r1, [r2, #0]
 800ff72:	d1e0      	bne.n	800ff36 <_free_r+0x26>
 800ff74:	681c      	ldr	r4, [r3, #0]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	6053      	str	r3, [r2, #4]
 800ff7a:	4421      	add	r1, r4
 800ff7c:	6011      	str	r1, [r2, #0]
 800ff7e:	e7da      	b.n	800ff36 <_free_r+0x26>
 800ff80:	d902      	bls.n	800ff88 <_free_r+0x78>
 800ff82:	230c      	movs	r3, #12
 800ff84:	6003      	str	r3, [r0, #0]
 800ff86:	e7d6      	b.n	800ff36 <_free_r+0x26>
 800ff88:	6825      	ldr	r5, [r4, #0]
 800ff8a:	1961      	adds	r1, r4, r5
 800ff8c:	428b      	cmp	r3, r1
 800ff8e:	bf04      	itt	eq
 800ff90:	6819      	ldreq	r1, [r3, #0]
 800ff92:	685b      	ldreq	r3, [r3, #4]
 800ff94:	6063      	str	r3, [r4, #4]
 800ff96:	bf04      	itt	eq
 800ff98:	1949      	addeq	r1, r1, r5
 800ff9a:	6021      	streq	r1, [r4, #0]
 800ff9c:	6054      	str	r4, [r2, #4]
 800ff9e:	e7ca      	b.n	800ff36 <_free_r+0x26>
 800ffa0:	b003      	add	sp, #12
 800ffa2:	bd30      	pop	{r4, r5, pc}
 800ffa4:	2001b20c 	.word	0x2001b20c

0800ffa8 <sbrk_aligned>:
 800ffa8:	b570      	push	{r4, r5, r6, lr}
 800ffaa:	4e0e      	ldr	r6, [pc, #56]	; (800ffe4 <sbrk_aligned+0x3c>)
 800ffac:	460c      	mov	r4, r1
 800ffae:	6831      	ldr	r1, [r6, #0]
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	b911      	cbnz	r1, 800ffba <sbrk_aligned+0x12>
 800ffb4:	f000 f924 	bl	8010200 <_sbrk_r>
 800ffb8:	6030      	str	r0, [r6, #0]
 800ffba:	4621      	mov	r1, r4
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	f000 f91f 	bl	8010200 <_sbrk_r>
 800ffc2:	1c43      	adds	r3, r0, #1
 800ffc4:	d00a      	beq.n	800ffdc <sbrk_aligned+0x34>
 800ffc6:	1cc4      	adds	r4, r0, #3
 800ffc8:	f024 0403 	bic.w	r4, r4, #3
 800ffcc:	42a0      	cmp	r0, r4
 800ffce:	d007      	beq.n	800ffe0 <sbrk_aligned+0x38>
 800ffd0:	1a21      	subs	r1, r4, r0
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	f000 f914 	bl	8010200 <_sbrk_r>
 800ffd8:	3001      	adds	r0, #1
 800ffda:	d101      	bne.n	800ffe0 <sbrk_aligned+0x38>
 800ffdc:	f04f 34ff 	mov.w	r4, #4294967295
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	bd70      	pop	{r4, r5, r6, pc}
 800ffe4:	2001b210 	.word	0x2001b210

0800ffe8 <_malloc_r>:
 800ffe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffec:	1ccd      	adds	r5, r1, #3
 800ffee:	f025 0503 	bic.w	r5, r5, #3
 800fff2:	3508      	adds	r5, #8
 800fff4:	2d0c      	cmp	r5, #12
 800fff6:	bf38      	it	cc
 800fff8:	250c      	movcc	r5, #12
 800fffa:	2d00      	cmp	r5, #0
 800fffc:	4607      	mov	r7, r0
 800fffe:	db01      	blt.n	8010004 <_malloc_r+0x1c>
 8010000:	42a9      	cmp	r1, r5
 8010002:	d905      	bls.n	8010010 <_malloc_r+0x28>
 8010004:	230c      	movs	r3, #12
 8010006:	603b      	str	r3, [r7, #0]
 8010008:	2600      	movs	r6, #0
 801000a:	4630      	mov	r0, r6
 801000c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010010:	4e2e      	ldr	r6, [pc, #184]	; (80100cc <_malloc_r+0xe4>)
 8010012:	f000 fa5f 	bl	80104d4 <__malloc_lock>
 8010016:	6833      	ldr	r3, [r6, #0]
 8010018:	461c      	mov	r4, r3
 801001a:	bb34      	cbnz	r4, 801006a <_malloc_r+0x82>
 801001c:	4629      	mov	r1, r5
 801001e:	4638      	mov	r0, r7
 8010020:	f7ff ffc2 	bl	800ffa8 <sbrk_aligned>
 8010024:	1c43      	adds	r3, r0, #1
 8010026:	4604      	mov	r4, r0
 8010028:	d14d      	bne.n	80100c6 <_malloc_r+0xde>
 801002a:	6834      	ldr	r4, [r6, #0]
 801002c:	4626      	mov	r6, r4
 801002e:	2e00      	cmp	r6, #0
 8010030:	d140      	bne.n	80100b4 <_malloc_r+0xcc>
 8010032:	6823      	ldr	r3, [r4, #0]
 8010034:	4631      	mov	r1, r6
 8010036:	4638      	mov	r0, r7
 8010038:	eb04 0803 	add.w	r8, r4, r3
 801003c:	f000 f8e0 	bl	8010200 <_sbrk_r>
 8010040:	4580      	cmp	r8, r0
 8010042:	d13a      	bne.n	80100ba <_malloc_r+0xd2>
 8010044:	6821      	ldr	r1, [r4, #0]
 8010046:	3503      	adds	r5, #3
 8010048:	1a6d      	subs	r5, r5, r1
 801004a:	f025 0503 	bic.w	r5, r5, #3
 801004e:	3508      	adds	r5, #8
 8010050:	2d0c      	cmp	r5, #12
 8010052:	bf38      	it	cc
 8010054:	250c      	movcc	r5, #12
 8010056:	4629      	mov	r1, r5
 8010058:	4638      	mov	r0, r7
 801005a:	f7ff ffa5 	bl	800ffa8 <sbrk_aligned>
 801005e:	3001      	adds	r0, #1
 8010060:	d02b      	beq.n	80100ba <_malloc_r+0xd2>
 8010062:	6823      	ldr	r3, [r4, #0]
 8010064:	442b      	add	r3, r5
 8010066:	6023      	str	r3, [r4, #0]
 8010068:	e00e      	b.n	8010088 <_malloc_r+0xa0>
 801006a:	6822      	ldr	r2, [r4, #0]
 801006c:	1b52      	subs	r2, r2, r5
 801006e:	d41e      	bmi.n	80100ae <_malloc_r+0xc6>
 8010070:	2a0b      	cmp	r2, #11
 8010072:	d916      	bls.n	80100a2 <_malloc_r+0xba>
 8010074:	1961      	adds	r1, r4, r5
 8010076:	42a3      	cmp	r3, r4
 8010078:	6025      	str	r5, [r4, #0]
 801007a:	bf18      	it	ne
 801007c:	6059      	strne	r1, [r3, #4]
 801007e:	6863      	ldr	r3, [r4, #4]
 8010080:	bf08      	it	eq
 8010082:	6031      	streq	r1, [r6, #0]
 8010084:	5162      	str	r2, [r4, r5]
 8010086:	604b      	str	r3, [r1, #4]
 8010088:	4638      	mov	r0, r7
 801008a:	f104 060b 	add.w	r6, r4, #11
 801008e:	f000 fa27 	bl	80104e0 <__malloc_unlock>
 8010092:	f026 0607 	bic.w	r6, r6, #7
 8010096:	1d23      	adds	r3, r4, #4
 8010098:	1af2      	subs	r2, r6, r3
 801009a:	d0b6      	beq.n	801000a <_malloc_r+0x22>
 801009c:	1b9b      	subs	r3, r3, r6
 801009e:	50a3      	str	r3, [r4, r2]
 80100a0:	e7b3      	b.n	801000a <_malloc_r+0x22>
 80100a2:	6862      	ldr	r2, [r4, #4]
 80100a4:	42a3      	cmp	r3, r4
 80100a6:	bf0c      	ite	eq
 80100a8:	6032      	streq	r2, [r6, #0]
 80100aa:	605a      	strne	r2, [r3, #4]
 80100ac:	e7ec      	b.n	8010088 <_malloc_r+0xa0>
 80100ae:	4623      	mov	r3, r4
 80100b0:	6864      	ldr	r4, [r4, #4]
 80100b2:	e7b2      	b.n	801001a <_malloc_r+0x32>
 80100b4:	4634      	mov	r4, r6
 80100b6:	6876      	ldr	r6, [r6, #4]
 80100b8:	e7b9      	b.n	801002e <_malloc_r+0x46>
 80100ba:	230c      	movs	r3, #12
 80100bc:	603b      	str	r3, [r7, #0]
 80100be:	4638      	mov	r0, r7
 80100c0:	f000 fa0e 	bl	80104e0 <__malloc_unlock>
 80100c4:	e7a1      	b.n	801000a <_malloc_r+0x22>
 80100c6:	6025      	str	r5, [r4, #0]
 80100c8:	e7de      	b.n	8010088 <_malloc_r+0xa0>
 80100ca:	bf00      	nop
 80100cc:	2001b20c 	.word	0x2001b20c

080100d0 <iprintf>:
 80100d0:	b40f      	push	{r0, r1, r2, r3}
 80100d2:	4b0a      	ldr	r3, [pc, #40]	; (80100fc <iprintf+0x2c>)
 80100d4:	b513      	push	{r0, r1, r4, lr}
 80100d6:	681c      	ldr	r4, [r3, #0]
 80100d8:	b124      	cbz	r4, 80100e4 <iprintf+0x14>
 80100da:	69a3      	ldr	r3, [r4, #24]
 80100dc:	b913      	cbnz	r3, 80100e4 <iprintf+0x14>
 80100de:	4620      	mov	r0, r4
 80100e0:	f7ff fe2a 	bl	800fd38 <__sinit>
 80100e4:	ab05      	add	r3, sp, #20
 80100e6:	9a04      	ldr	r2, [sp, #16]
 80100e8:	68a1      	ldr	r1, [r4, #8]
 80100ea:	9301      	str	r3, [sp, #4]
 80100ec:	4620      	mov	r0, r4
 80100ee:	f000 fb83 	bl	80107f8 <_vfiprintf_r>
 80100f2:	b002      	add	sp, #8
 80100f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100f8:	b004      	add	sp, #16
 80100fa:	4770      	bx	lr
 80100fc:	2000016c 	.word	0x2000016c

08010100 <putchar>:
 8010100:	4b09      	ldr	r3, [pc, #36]	; (8010128 <putchar+0x28>)
 8010102:	b513      	push	{r0, r1, r4, lr}
 8010104:	681c      	ldr	r4, [r3, #0]
 8010106:	4601      	mov	r1, r0
 8010108:	b134      	cbz	r4, 8010118 <putchar+0x18>
 801010a:	69a3      	ldr	r3, [r4, #24]
 801010c:	b923      	cbnz	r3, 8010118 <putchar+0x18>
 801010e:	9001      	str	r0, [sp, #4]
 8010110:	4620      	mov	r0, r4
 8010112:	f7ff fe11 	bl	800fd38 <__sinit>
 8010116:	9901      	ldr	r1, [sp, #4]
 8010118:	68a2      	ldr	r2, [r4, #8]
 801011a:	4620      	mov	r0, r4
 801011c:	b002      	add	sp, #8
 801011e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010122:	f000 be2d 	b.w	8010d80 <_putc_r>
 8010126:	bf00      	nop
 8010128:	2000016c 	.word	0x2000016c

0801012c <cleanup_glue>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	460c      	mov	r4, r1
 8010130:	6809      	ldr	r1, [r1, #0]
 8010132:	4605      	mov	r5, r0
 8010134:	b109      	cbz	r1, 801013a <cleanup_glue+0xe>
 8010136:	f7ff fff9 	bl	801012c <cleanup_glue>
 801013a:	4621      	mov	r1, r4
 801013c:	4628      	mov	r0, r5
 801013e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010142:	f7ff bee5 	b.w	800ff10 <_free_r>
	...

08010148 <_reclaim_reent>:
 8010148:	4b2c      	ldr	r3, [pc, #176]	; (80101fc <_reclaim_reent+0xb4>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	4283      	cmp	r3, r0
 801014e:	b570      	push	{r4, r5, r6, lr}
 8010150:	4604      	mov	r4, r0
 8010152:	d051      	beq.n	80101f8 <_reclaim_reent+0xb0>
 8010154:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010156:	b143      	cbz	r3, 801016a <_reclaim_reent+0x22>
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d14a      	bne.n	80101f4 <_reclaim_reent+0xac>
 801015e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010160:	6819      	ldr	r1, [r3, #0]
 8010162:	b111      	cbz	r1, 801016a <_reclaim_reent+0x22>
 8010164:	4620      	mov	r0, r4
 8010166:	f7ff fed3 	bl	800ff10 <_free_r>
 801016a:	6961      	ldr	r1, [r4, #20]
 801016c:	b111      	cbz	r1, 8010174 <_reclaim_reent+0x2c>
 801016e:	4620      	mov	r0, r4
 8010170:	f7ff fece 	bl	800ff10 <_free_r>
 8010174:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010176:	b111      	cbz	r1, 801017e <_reclaim_reent+0x36>
 8010178:	4620      	mov	r0, r4
 801017a:	f7ff fec9 	bl	800ff10 <_free_r>
 801017e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010180:	b111      	cbz	r1, 8010188 <_reclaim_reent+0x40>
 8010182:	4620      	mov	r0, r4
 8010184:	f7ff fec4 	bl	800ff10 <_free_r>
 8010188:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801018a:	b111      	cbz	r1, 8010192 <_reclaim_reent+0x4a>
 801018c:	4620      	mov	r0, r4
 801018e:	f7ff febf 	bl	800ff10 <_free_r>
 8010192:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010194:	b111      	cbz	r1, 801019c <_reclaim_reent+0x54>
 8010196:	4620      	mov	r0, r4
 8010198:	f7ff feba 	bl	800ff10 <_free_r>
 801019c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801019e:	b111      	cbz	r1, 80101a6 <_reclaim_reent+0x5e>
 80101a0:	4620      	mov	r0, r4
 80101a2:	f7ff feb5 	bl	800ff10 <_free_r>
 80101a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80101a8:	b111      	cbz	r1, 80101b0 <_reclaim_reent+0x68>
 80101aa:	4620      	mov	r0, r4
 80101ac:	f7ff feb0 	bl	800ff10 <_free_r>
 80101b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101b2:	b111      	cbz	r1, 80101ba <_reclaim_reent+0x72>
 80101b4:	4620      	mov	r0, r4
 80101b6:	f7ff feab 	bl	800ff10 <_free_r>
 80101ba:	69a3      	ldr	r3, [r4, #24]
 80101bc:	b1e3      	cbz	r3, 80101f8 <_reclaim_reent+0xb0>
 80101be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80101c0:	4620      	mov	r0, r4
 80101c2:	4798      	blx	r3
 80101c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80101c6:	b1b9      	cbz	r1, 80101f8 <_reclaim_reent+0xb0>
 80101c8:	4620      	mov	r0, r4
 80101ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101ce:	f7ff bfad 	b.w	801012c <cleanup_glue>
 80101d2:	5949      	ldr	r1, [r1, r5]
 80101d4:	b941      	cbnz	r1, 80101e8 <_reclaim_reent+0xa0>
 80101d6:	3504      	adds	r5, #4
 80101d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101da:	2d80      	cmp	r5, #128	; 0x80
 80101dc:	68d9      	ldr	r1, [r3, #12]
 80101de:	d1f8      	bne.n	80101d2 <_reclaim_reent+0x8a>
 80101e0:	4620      	mov	r0, r4
 80101e2:	f7ff fe95 	bl	800ff10 <_free_r>
 80101e6:	e7ba      	b.n	801015e <_reclaim_reent+0x16>
 80101e8:	680e      	ldr	r6, [r1, #0]
 80101ea:	4620      	mov	r0, r4
 80101ec:	f7ff fe90 	bl	800ff10 <_free_r>
 80101f0:	4631      	mov	r1, r6
 80101f2:	e7ef      	b.n	80101d4 <_reclaim_reent+0x8c>
 80101f4:	2500      	movs	r5, #0
 80101f6:	e7ef      	b.n	80101d8 <_reclaim_reent+0x90>
 80101f8:	bd70      	pop	{r4, r5, r6, pc}
 80101fa:	bf00      	nop
 80101fc:	2000016c 	.word	0x2000016c

08010200 <_sbrk_r>:
 8010200:	b538      	push	{r3, r4, r5, lr}
 8010202:	4d06      	ldr	r5, [pc, #24]	; (801021c <_sbrk_r+0x1c>)
 8010204:	2300      	movs	r3, #0
 8010206:	4604      	mov	r4, r0
 8010208:	4608      	mov	r0, r1
 801020a:	602b      	str	r3, [r5, #0]
 801020c:	f7f1 fc7e 	bl	8001b0c <_sbrk>
 8010210:	1c43      	adds	r3, r0, #1
 8010212:	d102      	bne.n	801021a <_sbrk_r+0x1a>
 8010214:	682b      	ldr	r3, [r5, #0]
 8010216:	b103      	cbz	r3, 801021a <_sbrk_r+0x1a>
 8010218:	6023      	str	r3, [r4, #0]
 801021a:	bd38      	pop	{r3, r4, r5, pc}
 801021c:	2001b214 	.word	0x2001b214

08010220 <siprintf>:
 8010220:	b40e      	push	{r1, r2, r3}
 8010222:	b500      	push	{lr}
 8010224:	b09c      	sub	sp, #112	; 0x70
 8010226:	ab1d      	add	r3, sp, #116	; 0x74
 8010228:	9002      	str	r0, [sp, #8]
 801022a:	9006      	str	r0, [sp, #24]
 801022c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010230:	4809      	ldr	r0, [pc, #36]	; (8010258 <siprintf+0x38>)
 8010232:	9107      	str	r1, [sp, #28]
 8010234:	9104      	str	r1, [sp, #16]
 8010236:	4909      	ldr	r1, [pc, #36]	; (801025c <siprintf+0x3c>)
 8010238:	f853 2b04 	ldr.w	r2, [r3], #4
 801023c:	9105      	str	r1, [sp, #20]
 801023e:	6800      	ldr	r0, [r0, #0]
 8010240:	9301      	str	r3, [sp, #4]
 8010242:	a902      	add	r1, sp, #8
 8010244:	f000 f9ae 	bl	80105a4 <_svfiprintf_r>
 8010248:	9b02      	ldr	r3, [sp, #8]
 801024a:	2200      	movs	r2, #0
 801024c:	701a      	strb	r2, [r3, #0]
 801024e:	b01c      	add	sp, #112	; 0x70
 8010250:	f85d eb04 	ldr.w	lr, [sp], #4
 8010254:	b003      	add	sp, #12
 8010256:	4770      	bx	lr
 8010258:	2000016c 	.word	0x2000016c
 801025c:	ffff0208 	.word	0xffff0208

08010260 <__sread>:
 8010260:	b510      	push	{r4, lr}
 8010262:	460c      	mov	r4, r1
 8010264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010268:	f000 fdd2 	bl	8010e10 <_read_r>
 801026c:	2800      	cmp	r0, #0
 801026e:	bfab      	itete	ge
 8010270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010272:	89a3      	ldrhlt	r3, [r4, #12]
 8010274:	181b      	addge	r3, r3, r0
 8010276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801027a:	bfac      	ite	ge
 801027c:	6563      	strge	r3, [r4, #84]	; 0x54
 801027e:	81a3      	strhlt	r3, [r4, #12]
 8010280:	bd10      	pop	{r4, pc}

08010282 <__swrite>:
 8010282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010286:	461f      	mov	r7, r3
 8010288:	898b      	ldrh	r3, [r1, #12]
 801028a:	05db      	lsls	r3, r3, #23
 801028c:	4605      	mov	r5, r0
 801028e:	460c      	mov	r4, r1
 8010290:	4616      	mov	r6, r2
 8010292:	d505      	bpl.n	80102a0 <__swrite+0x1e>
 8010294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010298:	2302      	movs	r3, #2
 801029a:	2200      	movs	r2, #0
 801029c:	f000 f908 	bl	80104b0 <_lseek_r>
 80102a0:	89a3      	ldrh	r3, [r4, #12]
 80102a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102aa:	81a3      	strh	r3, [r4, #12]
 80102ac:	4632      	mov	r2, r6
 80102ae:	463b      	mov	r3, r7
 80102b0:	4628      	mov	r0, r5
 80102b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102b6:	f000 b817 	b.w	80102e8 <_write_r>

080102ba <__sseek>:
 80102ba:	b510      	push	{r4, lr}
 80102bc:	460c      	mov	r4, r1
 80102be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102c2:	f000 f8f5 	bl	80104b0 <_lseek_r>
 80102c6:	1c43      	adds	r3, r0, #1
 80102c8:	89a3      	ldrh	r3, [r4, #12]
 80102ca:	bf15      	itete	ne
 80102cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80102ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80102d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80102d6:	81a3      	strheq	r3, [r4, #12]
 80102d8:	bf18      	it	ne
 80102da:	81a3      	strhne	r3, [r4, #12]
 80102dc:	bd10      	pop	{r4, pc}

080102de <__sclose>:
 80102de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e2:	f000 b813 	b.w	801030c <_close_r>
	...

080102e8 <_write_r>:
 80102e8:	b538      	push	{r3, r4, r5, lr}
 80102ea:	4d07      	ldr	r5, [pc, #28]	; (8010308 <_write_r+0x20>)
 80102ec:	4604      	mov	r4, r0
 80102ee:	4608      	mov	r0, r1
 80102f0:	4611      	mov	r1, r2
 80102f2:	2200      	movs	r2, #0
 80102f4:	602a      	str	r2, [r5, #0]
 80102f6:	461a      	mov	r2, r3
 80102f8:	f7f0 fe8e 	bl	8001018 <_write>
 80102fc:	1c43      	adds	r3, r0, #1
 80102fe:	d102      	bne.n	8010306 <_write_r+0x1e>
 8010300:	682b      	ldr	r3, [r5, #0]
 8010302:	b103      	cbz	r3, 8010306 <_write_r+0x1e>
 8010304:	6023      	str	r3, [r4, #0]
 8010306:	bd38      	pop	{r3, r4, r5, pc}
 8010308:	2001b214 	.word	0x2001b214

0801030c <_close_r>:
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	4d06      	ldr	r5, [pc, #24]	; (8010328 <_close_r+0x1c>)
 8010310:	2300      	movs	r3, #0
 8010312:	4604      	mov	r4, r0
 8010314:	4608      	mov	r0, r1
 8010316:	602b      	str	r3, [r5, #0]
 8010318:	f7f1 fbc3 	bl	8001aa2 <_close>
 801031c:	1c43      	adds	r3, r0, #1
 801031e:	d102      	bne.n	8010326 <_close_r+0x1a>
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	b103      	cbz	r3, 8010326 <_close_r+0x1a>
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	bd38      	pop	{r3, r4, r5, pc}
 8010328:	2001b214 	.word	0x2001b214

0801032c <__sflush_r>:
 801032c:	898a      	ldrh	r2, [r1, #12]
 801032e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010332:	4605      	mov	r5, r0
 8010334:	0710      	lsls	r0, r2, #28
 8010336:	460c      	mov	r4, r1
 8010338:	d458      	bmi.n	80103ec <__sflush_r+0xc0>
 801033a:	684b      	ldr	r3, [r1, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	dc05      	bgt.n	801034c <__sflush_r+0x20>
 8010340:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010342:	2b00      	cmp	r3, #0
 8010344:	dc02      	bgt.n	801034c <__sflush_r+0x20>
 8010346:	2000      	movs	r0, #0
 8010348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801034c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801034e:	2e00      	cmp	r6, #0
 8010350:	d0f9      	beq.n	8010346 <__sflush_r+0x1a>
 8010352:	2300      	movs	r3, #0
 8010354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010358:	682f      	ldr	r7, [r5, #0]
 801035a:	602b      	str	r3, [r5, #0]
 801035c:	d032      	beq.n	80103c4 <__sflush_r+0x98>
 801035e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010360:	89a3      	ldrh	r3, [r4, #12]
 8010362:	075a      	lsls	r2, r3, #29
 8010364:	d505      	bpl.n	8010372 <__sflush_r+0x46>
 8010366:	6863      	ldr	r3, [r4, #4]
 8010368:	1ac0      	subs	r0, r0, r3
 801036a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801036c:	b10b      	cbz	r3, 8010372 <__sflush_r+0x46>
 801036e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010370:	1ac0      	subs	r0, r0, r3
 8010372:	2300      	movs	r3, #0
 8010374:	4602      	mov	r2, r0
 8010376:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010378:	6a21      	ldr	r1, [r4, #32]
 801037a:	4628      	mov	r0, r5
 801037c:	47b0      	blx	r6
 801037e:	1c43      	adds	r3, r0, #1
 8010380:	89a3      	ldrh	r3, [r4, #12]
 8010382:	d106      	bne.n	8010392 <__sflush_r+0x66>
 8010384:	6829      	ldr	r1, [r5, #0]
 8010386:	291d      	cmp	r1, #29
 8010388:	d82c      	bhi.n	80103e4 <__sflush_r+0xb8>
 801038a:	4a2a      	ldr	r2, [pc, #168]	; (8010434 <__sflush_r+0x108>)
 801038c:	40ca      	lsrs	r2, r1
 801038e:	07d6      	lsls	r6, r2, #31
 8010390:	d528      	bpl.n	80103e4 <__sflush_r+0xb8>
 8010392:	2200      	movs	r2, #0
 8010394:	6062      	str	r2, [r4, #4]
 8010396:	04d9      	lsls	r1, r3, #19
 8010398:	6922      	ldr	r2, [r4, #16]
 801039a:	6022      	str	r2, [r4, #0]
 801039c:	d504      	bpl.n	80103a8 <__sflush_r+0x7c>
 801039e:	1c42      	adds	r2, r0, #1
 80103a0:	d101      	bne.n	80103a6 <__sflush_r+0x7a>
 80103a2:	682b      	ldr	r3, [r5, #0]
 80103a4:	b903      	cbnz	r3, 80103a8 <__sflush_r+0x7c>
 80103a6:	6560      	str	r0, [r4, #84]	; 0x54
 80103a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103aa:	602f      	str	r7, [r5, #0]
 80103ac:	2900      	cmp	r1, #0
 80103ae:	d0ca      	beq.n	8010346 <__sflush_r+0x1a>
 80103b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103b4:	4299      	cmp	r1, r3
 80103b6:	d002      	beq.n	80103be <__sflush_r+0x92>
 80103b8:	4628      	mov	r0, r5
 80103ba:	f7ff fda9 	bl	800ff10 <_free_r>
 80103be:	2000      	movs	r0, #0
 80103c0:	6360      	str	r0, [r4, #52]	; 0x34
 80103c2:	e7c1      	b.n	8010348 <__sflush_r+0x1c>
 80103c4:	6a21      	ldr	r1, [r4, #32]
 80103c6:	2301      	movs	r3, #1
 80103c8:	4628      	mov	r0, r5
 80103ca:	47b0      	blx	r6
 80103cc:	1c41      	adds	r1, r0, #1
 80103ce:	d1c7      	bne.n	8010360 <__sflush_r+0x34>
 80103d0:	682b      	ldr	r3, [r5, #0]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d0c4      	beq.n	8010360 <__sflush_r+0x34>
 80103d6:	2b1d      	cmp	r3, #29
 80103d8:	d001      	beq.n	80103de <__sflush_r+0xb2>
 80103da:	2b16      	cmp	r3, #22
 80103dc:	d101      	bne.n	80103e2 <__sflush_r+0xb6>
 80103de:	602f      	str	r7, [r5, #0]
 80103e0:	e7b1      	b.n	8010346 <__sflush_r+0x1a>
 80103e2:	89a3      	ldrh	r3, [r4, #12]
 80103e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103e8:	81a3      	strh	r3, [r4, #12]
 80103ea:	e7ad      	b.n	8010348 <__sflush_r+0x1c>
 80103ec:	690f      	ldr	r7, [r1, #16]
 80103ee:	2f00      	cmp	r7, #0
 80103f0:	d0a9      	beq.n	8010346 <__sflush_r+0x1a>
 80103f2:	0793      	lsls	r3, r2, #30
 80103f4:	680e      	ldr	r6, [r1, #0]
 80103f6:	bf08      	it	eq
 80103f8:	694b      	ldreq	r3, [r1, #20]
 80103fa:	600f      	str	r7, [r1, #0]
 80103fc:	bf18      	it	ne
 80103fe:	2300      	movne	r3, #0
 8010400:	eba6 0807 	sub.w	r8, r6, r7
 8010404:	608b      	str	r3, [r1, #8]
 8010406:	f1b8 0f00 	cmp.w	r8, #0
 801040a:	dd9c      	ble.n	8010346 <__sflush_r+0x1a>
 801040c:	6a21      	ldr	r1, [r4, #32]
 801040e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010410:	4643      	mov	r3, r8
 8010412:	463a      	mov	r2, r7
 8010414:	4628      	mov	r0, r5
 8010416:	47b0      	blx	r6
 8010418:	2800      	cmp	r0, #0
 801041a:	dc06      	bgt.n	801042a <__sflush_r+0xfe>
 801041c:	89a3      	ldrh	r3, [r4, #12]
 801041e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010422:	81a3      	strh	r3, [r4, #12]
 8010424:	f04f 30ff 	mov.w	r0, #4294967295
 8010428:	e78e      	b.n	8010348 <__sflush_r+0x1c>
 801042a:	4407      	add	r7, r0
 801042c:	eba8 0800 	sub.w	r8, r8, r0
 8010430:	e7e9      	b.n	8010406 <__sflush_r+0xda>
 8010432:	bf00      	nop
 8010434:	20400001 	.word	0x20400001

08010438 <_fflush_r>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	690b      	ldr	r3, [r1, #16]
 801043c:	4605      	mov	r5, r0
 801043e:	460c      	mov	r4, r1
 8010440:	b913      	cbnz	r3, 8010448 <_fflush_r+0x10>
 8010442:	2500      	movs	r5, #0
 8010444:	4628      	mov	r0, r5
 8010446:	bd38      	pop	{r3, r4, r5, pc}
 8010448:	b118      	cbz	r0, 8010452 <_fflush_r+0x1a>
 801044a:	6983      	ldr	r3, [r0, #24]
 801044c:	b90b      	cbnz	r3, 8010452 <_fflush_r+0x1a>
 801044e:	f7ff fc73 	bl	800fd38 <__sinit>
 8010452:	4b14      	ldr	r3, [pc, #80]	; (80104a4 <_fflush_r+0x6c>)
 8010454:	429c      	cmp	r4, r3
 8010456:	d11b      	bne.n	8010490 <_fflush_r+0x58>
 8010458:	686c      	ldr	r4, [r5, #4]
 801045a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d0ef      	beq.n	8010442 <_fflush_r+0xa>
 8010462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010464:	07d0      	lsls	r0, r2, #31
 8010466:	d404      	bmi.n	8010472 <_fflush_r+0x3a>
 8010468:	0599      	lsls	r1, r3, #22
 801046a:	d402      	bmi.n	8010472 <_fflush_r+0x3a>
 801046c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801046e:	f7ff fd26 	bl	800febe <__retarget_lock_acquire_recursive>
 8010472:	4628      	mov	r0, r5
 8010474:	4621      	mov	r1, r4
 8010476:	f7ff ff59 	bl	801032c <__sflush_r>
 801047a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801047c:	07da      	lsls	r2, r3, #31
 801047e:	4605      	mov	r5, r0
 8010480:	d4e0      	bmi.n	8010444 <_fflush_r+0xc>
 8010482:	89a3      	ldrh	r3, [r4, #12]
 8010484:	059b      	lsls	r3, r3, #22
 8010486:	d4dd      	bmi.n	8010444 <_fflush_r+0xc>
 8010488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801048a:	f7ff fd19 	bl	800fec0 <__retarget_lock_release_recursive>
 801048e:	e7d9      	b.n	8010444 <_fflush_r+0xc>
 8010490:	4b05      	ldr	r3, [pc, #20]	; (80104a8 <_fflush_r+0x70>)
 8010492:	429c      	cmp	r4, r3
 8010494:	d101      	bne.n	801049a <_fflush_r+0x62>
 8010496:	68ac      	ldr	r4, [r5, #8]
 8010498:	e7df      	b.n	801045a <_fflush_r+0x22>
 801049a:	4b04      	ldr	r3, [pc, #16]	; (80104ac <_fflush_r+0x74>)
 801049c:	429c      	cmp	r4, r3
 801049e:	bf08      	it	eq
 80104a0:	68ec      	ldreq	r4, [r5, #12]
 80104a2:	e7da      	b.n	801045a <_fflush_r+0x22>
 80104a4:	08013e68 	.word	0x08013e68
 80104a8:	08013e88 	.word	0x08013e88
 80104ac:	08013e48 	.word	0x08013e48

080104b0 <_lseek_r>:
 80104b0:	b538      	push	{r3, r4, r5, lr}
 80104b2:	4d07      	ldr	r5, [pc, #28]	; (80104d0 <_lseek_r+0x20>)
 80104b4:	4604      	mov	r4, r0
 80104b6:	4608      	mov	r0, r1
 80104b8:	4611      	mov	r1, r2
 80104ba:	2200      	movs	r2, #0
 80104bc:	602a      	str	r2, [r5, #0]
 80104be:	461a      	mov	r2, r3
 80104c0:	f7f1 fb16 	bl	8001af0 <_lseek>
 80104c4:	1c43      	adds	r3, r0, #1
 80104c6:	d102      	bne.n	80104ce <_lseek_r+0x1e>
 80104c8:	682b      	ldr	r3, [r5, #0]
 80104ca:	b103      	cbz	r3, 80104ce <_lseek_r+0x1e>
 80104cc:	6023      	str	r3, [r4, #0]
 80104ce:	bd38      	pop	{r3, r4, r5, pc}
 80104d0:	2001b214 	.word	0x2001b214

080104d4 <__malloc_lock>:
 80104d4:	4801      	ldr	r0, [pc, #4]	; (80104dc <__malloc_lock+0x8>)
 80104d6:	f7ff bcf2 	b.w	800febe <__retarget_lock_acquire_recursive>
 80104da:	bf00      	nop
 80104dc:	2001b208 	.word	0x2001b208

080104e0 <__malloc_unlock>:
 80104e0:	4801      	ldr	r0, [pc, #4]	; (80104e8 <__malloc_unlock+0x8>)
 80104e2:	f7ff bced 	b.w	800fec0 <__retarget_lock_release_recursive>
 80104e6:	bf00      	nop
 80104e8:	2001b208 	.word	0x2001b208

080104ec <__ssputs_r>:
 80104ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104f0:	688e      	ldr	r6, [r1, #8]
 80104f2:	429e      	cmp	r6, r3
 80104f4:	4682      	mov	sl, r0
 80104f6:	460c      	mov	r4, r1
 80104f8:	4690      	mov	r8, r2
 80104fa:	461f      	mov	r7, r3
 80104fc:	d838      	bhi.n	8010570 <__ssputs_r+0x84>
 80104fe:	898a      	ldrh	r2, [r1, #12]
 8010500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010504:	d032      	beq.n	801056c <__ssputs_r+0x80>
 8010506:	6825      	ldr	r5, [r4, #0]
 8010508:	6909      	ldr	r1, [r1, #16]
 801050a:	eba5 0901 	sub.w	r9, r5, r1
 801050e:	6965      	ldr	r5, [r4, #20]
 8010510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010518:	3301      	adds	r3, #1
 801051a:	444b      	add	r3, r9
 801051c:	106d      	asrs	r5, r5, #1
 801051e:	429d      	cmp	r5, r3
 8010520:	bf38      	it	cc
 8010522:	461d      	movcc	r5, r3
 8010524:	0553      	lsls	r3, r2, #21
 8010526:	d531      	bpl.n	801058c <__ssputs_r+0xa0>
 8010528:	4629      	mov	r1, r5
 801052a:	f7ff fd5d 	bl	800ffe8 <_malloc_r>
 801052e:	4606      	mov	r6, r0
 8010530:	b950      	cbnz	r0, 8010548 <__ssputs_r+0x5c>
 8010532:	230c      	movs	r3, #12
 8010534:	f8ca 3000 	str.w	r3, [sl]
 8010538:	89a3      	ldrh	r3, [r4, #12]
 801053a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801053e:	81a3      	strh	r3, [r4, #12]
 8010540:	f04f 30ff 	mov.w	r0, #4294967295
 8010544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010548:	6921      	ldr	r1, [r4, #16]
 801054a:	464a      	mov	r2, r9
 801054c:	f7ff fcca 	bl	800fee4 <memcpy>
 8010550:	89a3      	ldrh	r3, [r4, #12]
 8010552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801055a:	81a3      	strh	r3, [r4, #12]
 801055c:	6126      	str	r6, [r4, #16]
 801055e:	6165      	str	r5, [r4, #20]
 8010560:	444e      	add	r6, r9
 8010562:	eba5 0509 	sub.w	r5, r5, r9
 8010566:	6026      	str	r6, [r4, #0]
 8010568:	60a5      	str	r5, [r4, #8]
 801056a:	463e      	mov	r6, r7
 801056c:	42be      	cmp	r6, r7
 801056e:	d900      	bls.n	8010572 <__ssputs_r+0x86>
 8010570:	463e      	mov	r6, r7
 8010572:	6820      	ldr	r0, [r4, #0]
 8010574:	4632      	mov	r2, r6
 8010576:	4641      	mov	r1, r8
 8010578:	f000 fd82 	bl	8011080 <memmove>
 801057c:	68a3      	ldr	r3, [r4, #8]
 801057e:	1b9b      	subs	r3, r3, r6
 8010580:	60a3      	str	r3, [r4, #8]
 8010582:	6823      	ldr	r3, [r4, #0]
 8010584:	4433      	add	r3, r6
 8010586:	6023      	str	r3, [r4, #0]
 8010588:	2000      	movs	r0, #0
 801058a:	e7db      	b.n	8010544 <__ssputs_r+0x58>
 801058c:	462a      	mov	r2, r5
 801058e:	f000 fd91 	bl	80110b4 <_realloc_r>
 8010592:	4606      	mov	r6, r0
 8010594:	2800      	cmp	r0, #0
 8010596:	d1e1      	bne.n	801055c <__ssputs_r+0x70>
 8010598:	6921      	ldr	r1, [r4, #16]
 801059a:	4650      	mov	r0, sl
 801059c:	f7ff fcb8 	bl	800ff10 <_free_r>
 80105a0:	e7c7      	b.n	8010532 <__ssputs_r+0x46>
	...

080105a4 <_svfiprintf_r>:
 80105a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a8:	4698      	mov	r8, r3
 80105aa:	898b      	ldrh	r3, [r1, #12]
 80105ac:	061b      	lsls	r3, r3, #24
 80105ae:	b09d      	sub	sp, #116	; 0x74
 80105b0:	4607      	mov	r7, r0
 80105b2:	460d      	mov	r5, r1
 80105b4:	4614      	mov	r4, r2
 80105b6:	d50e      	bpl.n	80105d6 <_svfiprintf_r+0x32>
 80105b8:	690b      	ldr	r3, [r1, #16]
 80105ba:	b963      	cbnz	r3, 80105d6 <_svfiprintf_r+0x32>
 80105bc:	2140      	movs	r1, #64	; 0x40
 80105be:	f7ff fd13 	bl	800ffe8 <_malloc_r>
 80105c2:	6028      	str	r0, [r5, #0]
 80105c4:	6128      	str	r0, [r5, #16]
 80105c6:	b920      	cbnz	r0, 80105d2 <_svfiprintf_r+0x2e>
 80105c8:	230c      	movs	r3, #12
 80105ca:	603b      	str	r3, [r7, #0]
 80105cc:	f04f 30ff 	mov.w	r0, #4294967295
 80105d0:	e0d1      	b.n	8010776 <_svfiprintf_r+0x1d2>
 80105d2:	2340      	movs	r3, #64	; 0x40
 80105d4:	616b      	str	r3, [r5, #20]
 80105d6:	2300      	movs	r3, #0
 80105d8:	9309      	str	r3, [sp, #36]	; 0x24
 80105da:	2320      	movs	r3, #32
 80105dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80105e4:	2330      	movs	r3, #48	; 0x30
 80105e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010790 <_svfiprintf_r+0x1ec>
 80105ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105ee:	f04f 0901 	mov.w	r9, #1
 80105f2:	4623      	mov	r3, r4
 80105f4:	469a      	mov	sl, r3
 80105f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105fa:	b10a      	cbz	r2, 8010600 <_svfiprintf_r+0x5c>
 80105fc:	2a25      	cmp	r2, #37	; 0x25
 80105fe:	d1f9      	bne.n	80105f4 <_svfiprintf_r+0x50>
 8010600:	ebba 0b04 	subs.w	fp, sl, r4
 8010604:	d00b      	beq.n	801061e <_svfiprintf_r+0x7a>
 8010606:	465b      	mov	r3, fp
 8010608:	4622      	mov	r2, r4
 801060a:	4629      	mov	r1, r5
 801060c:	4638      	mov	r0, r7
 801060e:	f7ff ff6d 	bl	80104ec <__ssputs_r>
 8010612:	3001      	adds	r0, #1
 8010614:	f000 80aa 	beq.w	801076c <_svfiprintf_r+0x1c8>
 8010618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801061a:	445a      	add	r2, fp
 801061c:	9209      	str	r2, [sp, #36]	; 0x24
 801061e:	f89a 3000 	ldrb.w	r3, [sl]
 8010622:	2b00      	cmp	r3, #0
 8010624:	f000 80a2 	beq.w	801076c <_svfiprintf_r+0x1c8>
 8010628:	2300      	movs	r3, #0
 801062a:	f04f 32ff 	mov.w	r2, #4294967295
 801062e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010632:	f10a 0a01 	add.w	sl, sl, #1
 8010636:	9304      	str	r3, [sp, #16]
 8010638:	9307      	str	r3, [sp, #28]
 801063a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801063e:	931a      	str	r3, [sp, #104]	; 0x68
 8010640:	4654      	mov	r4, sl
 8010642:	2205      	movs	r2, #5
 8010644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010648:	4851      	ldr	r0, [pc, #324]	; (8010790 <_svfiprintf_r+0x1ec>)
 801064a:	f7ef fdc9 	bl	80001e0 <memchr>
 801064e:	9a04      	ldr	r2, [sp, #16]
 8010650:	b9d8      	cbnz	r0, 801068a <_svfiprintf_r+0xe6>
 8010652:	06d0      	lsls	r0, r2, #27
 8010654:	bf44      	itt	mi
 8010656:	2320      	movmi	r3, #32
 8010658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801065c:	0711      	lsls	r1, r2, #28
 801065e:	bf44      	itt	mi
 8010660:	232b      	movmi	r3, #43	; 0x2b
 8010662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010666:	f89a 3000 	ldrb.w	r3, [sl]
 801066a:	2b2a      	cmp	r3, #42	; 0x2a
 801066c:	d015      	beq.n	801069a <_svfiprintf_r+0xf6>
 801066e:	9a07      	ldr	r2, [sp, #28]
 8010670:	4654      	mov	r4, sl
 8010672:	2000      	movs	r0, #0
 8010674:	f04f 0c0a 	mov.w	ip, #10
 8010678:	4621      	mov	r1, r4
 801067a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801067e:	3b30      	subs	r3, #48	; 0x30
 8010680:	2b09      	cmp	r3, #9
 8010682:	d94e      	bls.n	8010722 <_svfiprintf_r+0x17e>
 8010684:	b1b0      	cbz	r0, 80106b4 <_svfiprintf_r+0x110>
 8010686:	9207      	str	r2, [sp, #28]
 8010688:	e014      	b.n	80106b4 <_svfiprintf_r+0x110>
 801068a:	eba0 0308 	sub.w	r3, r0, r8
 801068e:	fa09 f303 	lsl.w	r3, r9, r3
 8010692:	4313      	orrs	r3, r2
 8010694:	9304      	str	r3, [sp, #16]
 8010696:	46a2      	mov	sl, r4
 8010698:	e7d2      	b.n	8010640 <_svfiprintf_r+0x9c>
 801069a:	9b03      	ldr	r3, [sp, #12]
 801069c:	1d19      	adds	r1, r3, #4
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	9103      	str	r1, [sp, #12]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	bfbb      	ittet	lt
 80106a6:	425b      	neglt	r3, r3
 80106a8:	f042 0202 	orrlt.w	r2, r2, #2
 80106ac:	9307      	strge	r3, [sp, #28]
 80106ae:	9307      	strlt	r3, [sp, #28]
 80106b0:	bfb8      	it	lt
 80106b2:	9204      	strlt	r2, [sp, #16]
 80106b4:	7823      	ldrb	r3, [r4, #0]
 80106b6:	2b2e      	cmp	r3, #46	; 0x2e
 80106b8:	d10c      	bne.n	80106d4 <_svfiprintf_r+0x130>
 80106ba:	7863      	ldrb	r3, [r4, #1]
 80106bc:	2b2a      	cmp	r3, #42	; 0x2a
 80106be:	d135      	bne.n	801072c <_svfiprintf_r+0x188>
 80106c0:	9b03      	ldr	r3, [sp, #12]
 80106c2:	1d1a      	adds	r2, r3, #4
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	9203      	str	r2, [sp, #12]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	bfb8      	it	lt
 80106cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80106d0:	3402      	adds	r4, #2
 80106d2:	9305      	str	r3, [sp, #20]
 80106d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80107a0 <_svfiprintf_r+0x1fc>
 80106d8:	7821      	ldrb	r1, [r4, #0]
 80106da:	2203      	movs	r2, #3
 80106dc:	4650      	mov	r0, sl
 80106de:	f7ef fd7f 	bl	80001e0 <memchr>
 80106e2:	b140      	cbz	r0, 80106f6 <_svfiprintf_r+0x152>
 80106e4:	2340      	movs	r3, #64	; 0x40
 80106e6:	eba0 000a 	sub.w	r0, r0, sl
 80106ea:	fa03 f000 	lsl.w	r0, r3, r0
 80106ee:	9b04      	ldr	r3, [sp, #16]
 80106f0:	4303      	orrs	r3, r0
 80106f2:	3401      	adds	r4, #1
 80106f4:	9304      	str	r3, [sp, #16]
 80106f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106fa:	4826      	ldr	r0, [pc, #152]	; (8010794 <_svfiprintf_r+0x1f0>)
 80106fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010700:	2206      	movs	r2, #6
 8010702:	f7ef fd6d 	bl	80001e0 <memchr>
 8010706:	2800      	cmp	r0, #0
 8010708:	d038      	beq.n	801077c <_svfiprintf_r+0x1d8>
 801070a:	4b23      	ldr	r3, [pc, #140]	; (8010798 <_svfiprintf_r+0x1f4>)
 801070c:	bb1b      	cbnz	r3, 8010756 <_svfiprintf_r+0x1b2>
 801070e:	9b03      	ldr	r3, [sp, #12]
 8010710:	3307      	adds	r3, #7
 8010712:	f023 0307 	bic.w	r3, r3, #7
 8010716:	3308      	adds	r3, #8
 8010718:	9303      	str	r3, [sp, #12]
 801071a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801071c:	4433      	add	r3, r6
 801071e:	9309      	str	r3, [sp, #36]	; 0x24
 8010720:	e767      	b.n	80105f2 <_svfiprintf_r+0x4e>
 8010722:	fb0c 3202 	mla	r2, ip, r2, r3
 8010726:	460c      	mov	r4, r1
 8010728:	2001      	movs	r0, #1
 801072a:	e7a5      	b.n	8010678 <_svfiprintf_r+0xd4>
 801072c:	2300      	movs	r3, #0
 801072e:	3401      	adds	r4, #1
 8010730:	9305      	str	r3, [sp, #20]
 8010732:	4619      	mov	r1, r3
 8010734:	f04f 0c0a 	mov.w	ip, #10
 8010738:	4620      	mov	r0, r4
 801073a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801073e:	3a30      	subs	r2, #48	; 0x30
 8010740:	2a09      	cmp	r2, #9
 8010742:	d903      	bls.n	801074c <_svfiprintf_r+0x1a8>
 8010744:	2b00      	cmp	r3, #0
 8010746:	d0c5      	beq.n	80106d4 <_svfiprintf_r+0x130>
 8010748:	9105      	str	r1, [sp, #20]
 801074a:	e7c3      	b.n	80106d4 <_svfiprintf_r+0x130>
 801074c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010750:	4604      	mov	r4, r0
 8010752:	2301      	movs	r3, #1
 8010754:	e7f0      	b.n	8010738 <_svfiprintf_r+0x194>
 8010756:	ab03      	add	r3, sp, #12
 8010758:	9300      	str	r3, [sp, #0]
 801075a:	462a      	mov	r2, r5
 801075c:	4b0f      	ldr	r3, [pc, #60]	; (801079c <_svfiprintf_r+0x1f8>)
 801075e:	a904      	add	r1, sp, #16
 8010760:	4638      	mov	r0, r7
 8010762:	f3af 8000 	nop.w
 8010766:	1c42      	adds	r2, r0, #1
 8010768:	4606      	mov	r6, r0
 801076a:	d1d6      	bne.n	801071a <_svfiprintf_r+0x176>
 801076c:	89ab      	ldrh	r3, [r5, #12]
 801076e:	065b      	lsls	r3, r3, #25
 8010770:	f53f af2c 	bmi.w	80105cc <_svfiprintf_r+0x28>
 8010774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010776:	b01d      	add	sp, #116	; 0x74
 8010778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801077c:	ab03      	add	r3, sp, #12
 801077e:	9300      	str	r3, [sp, #0]
 8010780:	462a      	mov	r2, r5
 8010782:	4b06      	ldr	r3, [pc, #24]	; (801079c <_svfiprintf_r+0x1f8>)
 8010784:	a904      	add	r1, sp, #16
 8010786:	4638      	mov	r0, r7
 8010788:	f000 f9d4 	bl	8010b34 <_printf_i>
 801078c:	e7eb      	b.n	8010766 <_svfiprintf_r+0x1c2>
 801078e:	bf00      	nop
 8010790:	08013eac 	.word	0x08013eac
 8010794:	08013eb6 	.word	0x08013eb6
 8010798:	00000000 	.word	0x00000000
 801079c:	080104ed 	.word	0x080104ed
 80107a0:	08013eb2 	.word	0x08013eb2

080107a4 <__sfputc_r>:
 80107a4:	6893      	ldr	r3, [r2, #8]
 80107a6:	3b01      	subs	r3, #1
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	b410      	push	{r4}
 80107ac:	6093      	str	r3, [r2, #8]
 80107ae:	da08      	bge.n	80107c2 <__sfputc_r+0x1e>
 80107b0:	6994      	ldr	r4, [r2, #24]
 80107b2:	42a3      	cmp	r3, r4
 80107b4:	db01      	blt.n	80107ba <__sfputc_r+0x16>
 80107b6:	290a      	cmp	r1, #10
 80107b8:	d103      	bne.n	80107c2 <__sfputc_r+0x1e>
 80107ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107be:	f000 bb39 	b.w	8010e34 <__swbuf_r>
 80107c2:	6813      	ldr	r3, [r2, #0]
 80107c4:	1c58      	adds	r0, r3, #1
 80107c6:	6010      	str	r0, [r2, #0]
 80107c8:	7019      	strb	r1, [r3, #0]
 80107ca:	4608      	mov	r0, r1
 80107cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107d0:	4770      	bx	lr

080107d2 <__sfputs_r>:
 80107d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d4:	4606      	mov	r6, r0
 80107d6:	460f      	mov	r7, r1
 80107d8:	4614      	mov	r4, r2
 80107da:	18d5      	adds	r5, r2, r3
 80107dc:	42ac      	cmp	r4, r5
 80107de:	d101      	bne.n	80107e4 <__sfputs_r+0x12>
 80107e0:	2000      	movs	r0, #0
 80107e2:	e007      	b.n	80107f4 <__sfputs_r+0x22>
 80107e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107e8:	463a      	mov	r2, r7
 80107ea:	4630      	mov	r0, r6
 80107ec:	f7ff ffda 	bl	80107a4 <__sfputc_r>
 80107f0:	1c43      	adds	r3, r0, #1
 80107f2:	d1f3      	bne.n	80107dc <__sfputs_r+0xa>
 80107f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107f8 <_vfiprintf_r>:
 80107f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107fc:	460d      	mov	r5, r1
 80107fe:	b09d      	sub	sp, #116	; 0x74
 8010800:	4614      	mov	r4, r2
 8010802:	4698      	mov	r8, r3
 8010804:	4606      	mov	r6, r0
 8010806:	b118      	cbz	r0, 8010810 <_vfiprintf_r+0x18>
 8010808:	6983      	ldr	r3, [r0, #24]
 801080a:	b90b      	cbnz	r3, 8010810 <_vfiprintf_r+0x18>
 801080c:	f7ff fa94 	bl	800fd38 <__sinit>
 8010810:	4b89      	ldr	r3, [pc, #548]	; (8010a38 <_vfiprintf_r+0x240>)
 8010812:	429d      	cmp	r5, r3
 8010814:	d11b      	bne.n	801084e <_vfiprintf_r+0x56>
 8010816:	6875      	ldr	r5, [r6, #4]
 8010818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801081a:	07d9      	lsls	r1, r3, #31
 801081c:	d405      	bmi.n	801082a <_vfiprintf_r+0x32>
 801081e:	89ab      	ldrh	r3, [r5, #12]
 8010820:	059a      	lsls	r2, r3, #22
 8010822:	d402      	bmi.n	801082a <_vfiprintf_r+0x32>
 8010824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010826:	f7ff fb4a 	bl	800febe <__retarget_lock_acquire_recursive>
 801082a:	89ab      	ldrh	r3, [r5, #12]
 801082c:	071b      	lsls	r3, r3, #28
 801082e:	d501      	bpl.n	8010834 <_vfiprintf_r+0x3c>
 8010830:	692b      	ldr	r3, [r5, #16]
 8010832:	b9eb      	cbnz	r3, 8010870 <_vfiprintf_r+0x78>
 8010834:	4629      	mov	r1, r5
 8010836:	4630      	mov	r0, r6
 8010838:	f000 fb4e 	bl	8010ed8 <__swsetup_r>
 801083c:	b1c0      	cbz	r0, 8010870 <_vfiprintf_r+0x78>
 801083e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010840:	07dc      	lsls	r4, r3, #31
 8010842:	d50e      	bpl.n	8010862 <_vfiprintf_r+0x6a>
 8010844:	f04f 30ff 	mov.w	r0, #4294967295
 8010848:	b01d      	add	sp, #116	; 0x74
 801084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084e:	4b7b      	ldr	r3, [pc, #492]	; (8010a3c <_vfiprintf_r+0x244>)
 8010850:	429d      	cmp	r5, r3
 8010852:	d101      	bne.n	8010858 <_vfiprintf_r+0x60>
 8010854:	68b5      	ldr	r5, [r6, #8]
 8010856:	e7df      	b.n	8010818 <_vfiprintf_r+0x20>
 8010858:	4b79      	ldr	r3, [pc, #484]	; (8010a40 <_vfiprintf_r+0x248>)
 801085a:	429d      	cmp	r5, r3
 801085c:	bf08      	it	eq
 801085e:	68f5      	ldreq	r5, [r6, #12]
 8010860:	e7da      	b.n	8010818 <_vfiprintf_r+0x20>
 8010862:	89ab      	ldrh	r3, [r5, #12]
 8010864:	0598      	lsls	r0, r3, #22
 8010866:	d4ed      	bmi.n	8010844 <_vfiprintf_r+0x4c>
 8010868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801086a:	f7ff fb29 	bl	800fec0 <__retarget_lock_release_recursive>
 801086e:	e7e9      	b.n	8010844 <_vfiprintf_r+0x4c>
 8010870:	2300      	movs	r3, #0
 8010872:	9309      	str	r3, [sp, #36]	; 0x24
 8010874:	2320      	movs	r3, #32
 8010876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801087a:	f8cd 800c 	str.w	r8, [sp, #12]
 801087e:	2330      	movs	r3, #48	; 0x30
 8010880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010a44 <_vfiprintf_r+0x24c>
 8010884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010888:	f04f 0901 	mov.w	r9, #1
 801088c:	4623      	mov	r3, r4
 801088e:	469a      	mov	sl, r3
 8010890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010894:	b10a      	cbz	r2, 801089a <_vfiprintf_r+0xa2>
 8010896:	2a25      	cmp	r2, #37	; 0x25
 8010898:	d1f9      	bne.n	801088e <_vfiprintf_r+0x96>
 801089a:	ebba 0b04 	subs.w	fp, sl, r4
 801089e:	d00b      	beq.n	80108b8 <_vfiprintf_r+0xc0>
 80108a0:	465b      	mov	r3, fp
 80108a2:	4622      	mov	r2, r4
 80108a4:	4629      	mov	r1, r5
 80108a6:	4630      	mov	r0, r6
 80108a8:	f7ff ff93 	bl	80107d2 <__sfputs_r>
 80108ac:	3001      	adds	r0, #1
 80108ae:	f000 80aa 	beq.w	8010a06 <_vfiprintf_r+0x20e>
 80108b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108b4:	445a      	add	r2, fp
 80108b6:	9209      	str	r2, [sp, #36]	; 0x24
 80108b8:	f89a 3000 	ldrb.w	r3, [sl]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f000 80a2 	beq.w	8010a06 <_vfiprintf_r+0x20e>
 80108c2:	2300      	movs	r3, #0
 80108c4:	f04f 32ff 	mov.w	r2, #4294967295
 80108c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108cc:	f10a 0a01 	add.w	sl, sl, #1
 80108d0:	9304      	str	r3, [sp, #16]
 80108d2:	9307      	str	r3, [sp, #28]
 80108d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108d8:	931a      	str	r3, [sp, #104]	; 0x68
 80108da:	4654      	mov	r4, sl
 80108dc:	2205      	movs	r2, #5
 80108de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108e2:	4858      	ldr	r0, [pc, #352]	; (8010a44 <_vfiprintf_r+0x24c>)
 80108e4:	f7ef fc7c 	bl	80001e0 <memchr>
 80108e8:	9a04      	ldr	r2, [sp, #16]
 80108ea:	b9d8      	cbnz	r0, 8010924 <_vfiprintf_r+0x12c>
 80108ec:	06d1      	lsls	r1, r2, #27
 80108ee:	bf44      	itt	mi
 80108f0:	2320      	movmi	r3, #32
 80108f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108f6:	0713      	lsls	r3, r2, #28
 80108f8:	bf44      	itt	mi
 80108fa:	232b      	movmi	r3, #43	; 0x2b
 80108fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010900:	f89a 3000 	ldrb.w	r3, [sl]
 8010904:	2b2a      	cmp	r3, #42	; 0x2a
 8010906:	d015      	beq.n	8010934 <_vfiprintf_r+0x13c>
 8010908:	9a07      	ldr	r2, [sp, #28]
 801090a:	4654      	mov	r4, sl
 801090c:	2000      	movs	r0, #0
 801090e:	f04f 0c0a 	mov.w	ip, #10
 8010912:	4621      	mov	r1, r4
 8010914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010918:	3b30      	subs	r3, #48	; 0x30
 801091a:	2b09      	cmp	r3, #9
 801091c:	d94e      	bls.n	80109bc <_vfiprintf_r+0x1c4>
 801091e:	b1b0      	cbz	r0, 801094e <_vfiprintf_r+0x156>
 8010920:	9207      	str	r2, [sp, #28]
 8010922:	e014      	b.n	801094e <_vfiprintf_r+0x156>
 8010924:	eba0 0308 	sub.w	r3, r0, r8
 8010928:	fa09 f303 	lsl.w	r3, r9, r3
 801092c:	4313      	orrs	r3, r2
 801092e:	9304      	str	r3, [sp, #16]
 8010930:	46a2      	mov	sl, r4
 8010932:	e7d2      	b.n	80108da <_vfiprintf_r+0xe2>
 8010934:	9b03      	ldr	r3, [sp, #12]
 8010936:	1d19      	adds	r1, r3, #4
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	9103      	str	r1, [sp, #12]
 801093c:	2b00      	cmp	r3, #0
 801093e:	bfbb      	ittet	lt
 8010940:	425b      	neglt	r3, r3
 8010942:	f042 0202 	orrlt.w	r2, r2, #2
 8010946:	9307      	strge	r3, [sp, #28]
 8010948:	9307      	strlt	r3, [sp, #28]
 801094a:	bfb8      	it	lt
 801094c:	9204      	strlt	r2, [sp, #16]
 801094e:	7823      	ldrb	r3, [r4, #0]
 8010950:	2b2e      	cmp	r3, #46	; 0x2e
 8010952:	d10c      	bne.n	801096e <_vfiprintf_r+0x176>
 8010954:	7863      	ldrb	r3, [r4, #1]
 8010956:	2b2a      	cmp	r3, #42	; 0x2a
 8010958:	d135      	bne.n	80109c6 <_vfiprintf_r+0x1ce>
 801095a:	9b03      	ldr	r3, [sp, #12]
 801095c:	1d1a      	adds	r2, r3, #4
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	9203      	str	r2, [sp, #12]
 8010962:	2b00      	cmp	r3, #0
 8010964:	bfb8      	it	lt
 8010966:	f04f 33ff 	movlt.w	r3, #4294967295
 801096a:	3402      	adds	r4, #2
 801096c:	9305      	str	r3, [sp, #20]
 801096e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a54 <_vfiprintf_r+0x25c>
 8010972:	7821      	ldrb	r1, [r4, #0]
 8010974:	2203      	movs	r2, #3
 8010976:	4650      	mov	r0, sl
 8010978:	f7ef fc32 	bl	80001e0 <memchr>
 801097c:	b140      	cbz	r0, 8010990 <_vfiprintf_r+0x198>
 801097e:	2340      	movs	r3, #64	; 0x40
 8010980:	eba0 000a 	sub.w	r0, r0, sl
 8010984:	fa03 f000 	lsl.w	r0, r3, r0
 8010988:	9b04      	ldr	r3, [sp, #16]
 801098a:	4303      	orrs	r3, r0
 801098c:	3401      	adds	r4, #1
 801098e:	9304      	str	r3, [sp, #16]
 8010990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010994:	482c      	ldr	r0, [pc, #176]	; (8010a48 <_vfiprintf_r+0x250>)
 8010996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801099a:	2206      	movs	r2, #6
 801099c:	f7ef fc20 	bl	80001e0 <memchr>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	d03f      	beq.n	8010a24 <_vfiprintf_r+0x22c>
 80109a4:	4b29      	ldr	r3, [pc, #164]	; (8010a4c <_vfiprintf_r+0x254>)
 80109a6:	bb1b      	cbnz	r3, 80109f0 <_vfiprintf_r+0x1f8>
 80109a8:	9b03      	ldr	r3, [sp, #12]
 80109aa:	3307      	adds	r3, #7
 80109ac:	f023 0307 	bic.w	r3, r3, #7
 80109b0:	3308      	adds	r3, #8
 80109b2:	9303      	str	r3, [sp, #12]
 80109b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109b6:	443b      	add	r3, r7
 80109b8:	9309      	str	r3, [sp, #36]	; 0x24
 80109ba:	e767      	b.n	801088c <_vfiprintf_r+0x94>
 80109bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80109c0:	460c      	mov	r4, r1
 80109c2:	2001      	movs	r0, #1
 80109c4:	e7a5      	b.n	8010912 <_vfiprintf_r+0x11a>
 80109c6:	2300      	movs	r3, #0
 80109c8:	3401      	adds	r4, #1
 80109ca:	9305      	str	r3, [sp, #20]
 80109cc:	4619      	mov	r1, r3
 80109ce:	f04f 0c0a 	mov.w	ip, #10
 80109d2:	4620      	mov	r0, r4
 80109d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109d8:	3a30      	subs	r2, #48	; 0x30
 80109da:	2a09      	cmp	r2, #9
 80109dc:	d903      	bls.n	80109e6 <_vfiprintf_r+0x1ee>
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d0c5      	beq.n	801096e <_vfiprintf_r+0x176>
 80109e2:	9105      	str	r1, [sp, #20]
 80109e4:	e7c3      	b.n	801096e <_vfiprintf_r+0x176>
 80109e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80109ea:	4604      	mov	r4, r0
 80109ec:	2301      	movs	r3, #1
 80109ee:	e7f0      	b.n	80109d2 <_vfiprintf_r+0x1da>
 80109f0:	ab03      	add	r3, sp, #12
 80109f2:	9300      	str	r3, [sp, #0]
 80109f4:	462a      	mov	r2, r5
 80109f6:	4b16      	ldr	r3, [pc, #88]	; (8010a50 <_vfiprintf_r+0x258>)
 80109f8:	a904      	add	r1, sp, #16
 80109fa:	4630      	mov	r0, r6
 80109fc:	f3af 8000 	nop.w
 8010a00:	4607      	mov	r7, r0
 8010a02:	1c78      	adds	r0, r7, #1
 8010a04:	d1d6      	bne.n	80109b4 <_vfiprintf_r+0x1bc>
 8010a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a08:	07d9      	lsls	r1, r3, #31
 8010a0a:	d405      	bmi.n	8010a18 <_vfiprintf_r+0x220>
 8010a0c:	89ab      	ldrh	r3, [r5, #12]
 8010a0e:	059a      	lsls	r2, r3, #22
 8010a10:	d402      	bmi.n	8010a18 <_vfiprintf_r+0x220>
 8010a12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a14:	f7ff fa54 	bl	800fec0 <__retarget_lock_release_recursive>
 8010a18:	89ab      	ldrh	r3, [r5, #12]
 8010a1a:	065b      	lsls	r3, r3, #25
 8010a1c:	f53f af12 	bmi.w	8010844 <_vfiprintf_r+0x4c>
 8010a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a22:	e711      	b.n	8010848 <_vfiprintf_r+0x50>
 8010a24:	ab03      	add	r3, sp, #12
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	462a      	mov	r2, r5
 8010a2a:	4b09      	ldr	r3, [pc, #36]	; (8010a50 <_vfiprintf_r+0x258>)
 8010a2c:	a904      	add	r1, sp, #16
 8010a2e:	4630      	mov	r0, r6
 8010a30:	f000 f880 	bl	8010b34 <_printf_i>
 8010a34:	e7e4      	b.n	8010a00 <_vfiprintf_r+0x208>
 8010a36:	bf00      	nop
 8010a38:	08013e68 	.word	0x08013e68
 8010a3c:	08013e88 	.word	0x08013e88
 8010a40:	08013e48 	.word	0x08013e48
 8010a44:	08013eac 	.word	0x08013eac
 8010a48:	08013eb6 	.word	0x08013eb6
 8010a4c:	00000000 	.word	0x00000000
 8010a50:	080107d3 	.word	0x080107d3
 8010a54:	08013eb2 	.word	0x08013eb2

08010a58 <_printf_common>:
 8010a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a5c:	4616      	mov	r6, r2
 8010a5e:	4699      	mov	r9, r3
 8010a60:	688a      	ldr	r2, [r1, #8]
 8010a62:	690b      	ldr	r3, [r1, #16]
 8010a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	bfb8      	it	lt
 8010a6c:	4613      	movlt	r3, r2
 8010a6e:	6033      	str	r3, [r6, #0]
 8010a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a74:	4607      	mov	r7, r0
 8010a76:	460c      	mov	r4, r1
 8010a78:	b10a      	cbz	r2, 8010a7e <_printf_common+0x26>
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	6033      	str	r3, [r6, #0]
 8010a7e:	6823      	ldr	r3, [r4, #0]
 8010a80:	0699      	lsls	r1, r3, #26
 8010a82:	bf42      	ittt	mi
 8010a84:	6833      	ldrmi	r3, [r6, #0]
 8010a86:	3302      	addmi	r3, #2
 8010a88:	6033      	strmi	r3, [r6, #0]
 8010a8a:	6825      	ldr	r5, [r4, #0]
 8010a8c:	f015 0506 	ands.w	r5, r5, #6
 8010a90:	d106      	bne.n	8010aa0 <_printf_common+0x48>
 8010a92:	f104 0a19 	add.w	sl, r4, #25
 8010a96:	68e3      	ldr	r3, [r4, #12]
 8010a98:	6832      	ldr	r2, [r6, #0]
 8010a9a:	1a9b      	subs	r3, r3, r2
 8010a9c:	42ab      	cmp	r3, r5
 8010a9e:	dc26      	bgt.n	8010aee <_printf_common+0x96>
 8010aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010aa4:	1e13      	subs	r3, r2, #0
 8010aa6:	6822      	ldr	r2, [r4, #0]
 8010aa8:	bf18      	it	ne
 8010aaa:	2301      	movne	r3, #1
 8010aac:	0692      	lsls	r2, r2, #26
 8010aae:	d42b      	bmi.n	8010b08 <_printf_common+0xb0>
 8010ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ab4:	4649      	mov	r1, r9
 8010ab6:	4638      	mov	r0, r7
 8010ab8:	47c0      	blx	r8
 8010aba:	3001      	adds	r0, #1
 8010abc:	d01e      	beq.n	8010afc <_printf_common+0xa4>
 8010abe:	6823      	ldr	r3, [r4, #0]
 8010ac0:	68e5      	ldr	r5, [r4, #12]
 8010ac2:	6832      	ldr	r2, [r6, #0]
 8010ac4:	f003 0306 	and.w	r3, r3, #6
 8010ac8:	2b04      	cmp	r3, #4
 8010aca:	bf08      	it	eq
 8010acc:	1aad      	subeq	r5, r5, r2
 8010ace:	68a3      	ldr	r3, [r4, #8]
 8010ad0:	6922      	ldr	r2, [r4, #16]
 8010ad2:	bf0c      	ite	eq
 8010ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ad8:	2500      	movne	r5, #0
 8010ada:	4293      	cmp	r3, r2
 8010adc:	bfc4      	itt	gt
 8010ade:	1a9b      	subgt	r3, r3, r2
 8010ae0:	18ed      	addgt	r5, r5, r3
 8010ae2:	2600      	movs	r6, #0
 8010ae4:	341a      	adds	r4, #26
 8010ae6:	42b5      	cmp	r5, r6
 8010ae8:	d11a      	bne.n	8010b20 <_printf_common+0xc8>
 8010aea:	2000      	movs	r0, #0
 8010aec:	e008      	b.n	8010b00 <_printf_common+0xa8>
 8010aee:	2301      	movs	r3, #1
 8010af0:	4652      	mov	r2, sl
 8010af2:	4649      	mov	r1, r9
 8010af4:	4638      	mov	r0, r7
 8010af6:	47c0      	blx	r8
 8010af8:	3001      	adds	r0, #1
 8010afa:	d103      	bne.n	8010b04 <_printf_common+0xac>
 8010afc:	f04f 30ff 	mov.w	r0, #4294967295
 8010b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b04:	3501      	adds	r5, #1
 8010b06:	e7c6      	b.n	8010a96 <_printf_common+0x3e>
 8010b08:	18e1      	adds	r1, r4, r3
 8010b0a:	1c5a      	adds	r2, r3, #1
 8010b0c:	2030      	movs	r0, #48	; 0x30
 8010b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010b12:	4422      	add	r2, r4
 8010b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b1c:	3302      	adds	r3, #2
 8010b1e:	e7c7      	b.n	8010ab0 <_printf_common+0x58>
 8010b20:	2301      	movs	r3, #1
 8010b22:	4622      	mov	r2, r4
 8010b24:	4649      	mov	r1, r9
 8010b26:	4638      	mov	r0, r7
 8010b28:	47c0      	blx	r8
 8010b2a:	3001      	adds	r0, #1
 8010b2c:	d0e6      	beq.n	8010afc <_printf_common+0xa4>
 8010b2e:	3601      	adds	r6, #1
 8010b30:	e7d9      	b.n	8010ae6 <_printf_common+0x8e>
	...

08010b34 <_printf_i>:
 8010b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b38:	7e0f      	ldrb	r7, [r1, #24]
 8010b3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010b3c:	2f78      	cmp	r7, #120	; 0x78
 8010b3e:	4691      	mov	r9, r2
 8010b40:	4680      	mov	r8, r0
 8010b42:	460c      	mov	r4, r1
 8010b44:	469a      	mov	sl, r3
 8010b46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010b4a:	d807      	bhi.n	8010b5c <_printf_i+0x28>
 8010b4c:	2f62      	cmp	r7, #98	; 0x62
 8010b4e:	d80a      	bhi.n	8010b66 <_printf_i+0x32>
 8010b50:	2f00      	cmp	r7, #0
 8010b52:	f000 80d8 	beq.w	8010d06 <_printf_i+0x1d2>
 8010b56:	2f58      	cmp	r7, #88	; 0x58
 8010b58:	f000 80a3 	beq.w	8010ca2 <_printf_i+0x16e>
 8010b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b64:	e03a      	b.n	8010bdc <_printf_i+0xa8>
 8010b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b6a:	2b15      	cmp	r3, #21
 8010b6c:	d8f6      	bhi.n	8010b5c <_printf_i+0x28>
 8010b6e:	a101      	add	r1, pc, #4	; (adr r1, 8010b74 <_printf_i+0x40>)
 8010b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b74:	08010bcd 	.word	0x08010bcd
 8010b78:	08010be1 	.word	0x08010be1
 8010b7c:	08010b5d 	.word	0x08010b5d
 8010b80:	08010b5d 	.word	0x08010b5d
 8010b84:	08010b5d 	.word	0x08010b5d
 8010b88:	08010b5d 	.word	0x08010b5d
 8010b8c:	08010be1 	.word	0x08010be1
 8010b90:	08010b5d 	.word	0x08010b5d
 8010b94:	08010b5d 	.word	0x08010b5d
 8010b98:	08010b5d 	.word	0x08010b5d
 8010b9c:	08010b5d 	.word	0x08010b5d
 8010ba0:	08010ced 	.word	0x08010ced
 8010ba4:	08010c11 	.word	0x08010c11
 8010ba8:	08010ccf 	.word	0x08010ccf
 8010bac:	08010b5d 	.word	0x08010b5d
 8010bb0:	08010b5d 	.word	0x08010b5d
 8010bb4:	08010d0f 	.word	0x08010d0f
 8010bb8:	08010b5d 	.word	0x08010b5d
 8010bbc:	08010c11 	.word	0x08010c11
 8010bc0:	08010b5d 	.word	0x08010b5d
 8010bc4:	08010b5d 	.word	0x08010b5d
 8010bc8:	08010cd7 	.word	0x08010cd7
 8010bcc:	682b      	ldr	r3, [r5, #0]
 8010bce:	1d1a      	adds	r2, r3, #4
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	602a      	str	r2, [r5, #0]
 8010bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010bdc:	2301      	movs	r3, #1
 8010bde:	e0a3      	b.n	8010d28 <_printf_i+0x1f4>
 8010be0:	6820      	ldr	r0, [r4, #0]
 8010be2:	6829      	ldr	r1, [r5, #0]
 8010be4:	0606      	lsls	r6, r0, #24
 8010be6:	f101 0304 	add.w	r3, r1, #4
 8010bea:	d50a      	bpl.n	8010c02 <_printf_i+0xce>
 8010bec:	680e      	ldr	r6, [r1, #0]
 8010bee:	602b      	str	r3, [r5, #0]
 8010bf0:	2e00      	cmp	r6, #0
 8010bf2:	da03      	bge.n	8010bfc <_printf_i+0xc8>
 8010bf4:	232d      	movs	r3, #45	; 0x2d
 8010bf6:	4276      	negs	r6, r6
 8010bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bfc:	485e      	ldr	r0, [pc, #376]	; (8010d78 <_printf_i+0x244>)
 8010bfe:	230a      	movs	r3, #10
 8010c00:	e019      	b.n	8010c36 <_printf_i+0x102>
 8010c02:	680e      	ldr	r6, [r1, #0]
 8010c04:	602b      	str	r3, [r5, #0]
 8010c06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010c0a:	bf18      	it	ne
 8010c0c:	b236      	sxthne	r6, r6
 8010c0e:	e7ef      	b.n	8010bf0 <_printf_i+0xbc>
 8010c10:	682b      	ldr	r3, [r5, #0]
 8010c12:	6820      	ldr	r0, [r4, #0]
 8010c14:	1d19      	adds	r1, r3, #4
 8010c16:	6029      	str	r1, [r5, #0]
 8010c18:	0601      	lsls	r1, r0, #24
 8010c1a:	d501      	bpl.n	8010c20 <_printf_i+0xec>
 8010c1c:	681e      	ldr	r6, [r3, #0]
 8010c1e:	e002      	b.n	8010c26 <_printf_i+0xf2>
 8010c20:	0646      	lsls	r6, r0, #25
 8010c22:	d5fb      	bpl.n	8010c1c <_printf_i+0xe8>
 8010c24:	881e      	ldrh	r6, [r3, #0]
 8010c26:	4854      	ldr	r0, [pc, #336]	; (8010d78 <_printf_i+0x244>)
 8010c28:	2f6f      	cmp	r7, #111	; 0x6f
 8010c2a:	bf0c      	ite	eq
 8010c2c:	2308      	moveq	r3, #8
 8010c2e:	230a      	movne	r3, #10
 8010c30:	2100      	movs	r1, #0
 8010c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c36:	6865      	ldr	r5, [r4, #4]
 8010c38:	60a5      	str	r5, [r4, #8]
 8010c3a:	2d00      	cmp	r5, #0
 8010c3c:	bfa2      	ittt	ge
 8010c3e:	6821      	ldrge	r1, [r4, #0]
 8010c40:	f021 0104 	bicge.w	r1, r1, #4
 8010c44:	6021      	strge	r1, [r4, #0]
 8010c46:	b90e      	cbnz	r6, 8010c4c <_printf_i+0x118>
 8010c48:	2d00      	cmp	r5, #0
 8010c4a:	d04d      	beq.n	8010ce8 <_printf_i+0x1b4>
 8010c4c:	4615      	mov	r5, r2
 8010c4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010c52:	fb03 6711 	mls	r7, r3, r1, r6
 8010c56:	5dc7      	ldrb	r7, [r0, r7]
 8010c58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010c5c:	4637      	mov	r7, r6
 8010c5e:	42bb      	cmp	r3, r7
 8010c60:	460e      	mov	r6, r1
 8010c62:	d9f4      	bls.n	8010c4e <_printf_i+0x11a>
 8010c64:	2b08      	cmp	r3, #8
 8010c66:	d10b      	bne.n	8010c80 <_printf_i+0x14c>
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	07de      	lsls	r6, r3, #31
 8010c6c:	d508      	bpl.n	8010c80 <_printf_i+0x14c>
 8010c6e:	6923      	ldr	r3, [r4, #16]
 8010c70:	6861      	ldr	r1, [r4, #4]
 8010c72:	4299      	cmp	r1, r3
 8010c74:	bfde      	ittt	le
 8010c76:	2330      	movle	r3, #48	; 0x30
 8010c78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010c7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010c80:	1b52      	subs	r2, r2, r5
 8010c82:	6122      	str	r2, [r4, #16]
 8010c84:	f8cd a000 	str.w	sl, [sp]
 8010c88:	464b      	mov	r3, r9
 8010c8a:	aa03      	add	r2, sp, #12
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	4640      	mov	r0, r8
 8010c90:	f7ff fee2 	bl	8010a58 <_printf_common>
 8010c94:	3001      	adds	r0, #1
 8010c96:	d14c      	bne.n	8010d32 <_printf_i+0x1fe>
 8010c98:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9c:	b004      	add	sp, #16
 8010c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ca2:	4835      	ldr	r0, [pc, #212]	; (8010d78 <_printf_i+0x244>)
 8010ca4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010ca8:	6829      	ldr	r1, [r5, #0]
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	f851 6b04 	ldr.w	r6, [r1], #4
 8010cb0:	6029      	str	r1, [r5, #0]
 8010cb2:	061d      	lsls	r5, r3, #24
 8010cb4:	d514      	bpl.n	8010ce0 <_printf_i+0x1ac>
 8010cb6:	07df      	lsls	r7, r3, #31
 8010cb8:	bf44      	itt	mi
 8010cba:	f043 0320 	orrmi.w	r3, r3, #32
 8010cbe:	6023      	strmi	r3, [r4, #0]
 8010cc0:	b91e      	cbnz	r6, 8010cca <_printf_i+0x196>
 8010cc2:	6823      	ldr	r3, [r4, #0]
 8010cc4:	f023 0320 	bic.w	r3, r3, #32
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	2310      	movs	r3, #16
 8010ccc:	e7b0      	b.n	8010c30 <_printf_i+0xfc>
 8010cce:	6823      	ldr	r3, [r4, #0]
 8010cd0:	f043 0320 	orr.w	r3, r3, #32
 8010cd4:	6023      	str	r3, [r4, #0]
 8010cd6:	2378      	movs	r3, #120	; 0x78
 8010cd8:	4828      	ldr	r0, [pc, #160]	; (8010d7c <_printf_i+0x248>)
 8010cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010cde:	e7e3      	b.n	8010ca8 <_printf_i+0x174>
 8010ce0:	0659      	lsls	r1, r3, #25
 8010ce2:	bf48      	it	mi
 8010ce4:	b2b6      	uxthmi	r6, r6
 8010ce6:	e7e6      	b.n	8010cb6 <_printf_i+0x182>
 8010ce8:	4615      	mov	r5, r2
 8010cea:	e7bb      	b.n	8010c64 <_printf_i+0x130>
 8010cec:	682b      	ldr	r3, [r5, #0]
 8010cee:	6826      	ldr	r6, [r4, #0]
 8010cf0:	6961      	ldr	r1, [r4, #20]
 8010cf2:	1d18      	adds	r0, r3, #4
 8010cf4:	6028      	str	r0, [r5, #0]
 8010cf6:	0635      	lsls	r5, r6, #24
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	d501      	bpl.n	8010d00 <_printf_i+0x1cc>
 8010cfc:	6019      	str	r1, [r3, #0]
 8010cfe:	e002      	b.n	8010d06 <_printf_i+0x1d2>
 8010d00:	0670      	lsls	r0, r6, #25
 8010d02:	d5fb      	bpl.n	8010cfc <_printf_i+0x1c8>
 8010d04:	8019      	strh	r1, [r3, #0]
 8010d06:	2300      	movs	r3, #0
 8010d08:	6123      	str	r3, [r4, #16]
 8010d0a:	4615      	mov	r5, r2
 8010d0c:	e7ba      	b.n	8010c84 <_printf_i+0x150>
 8010d0e:	682b      	ldr	r3, [r5, #0]
 8010d10:	1d1a      	adds	r2, r3, #4
 8010d12:	602a      	str	r2, [r5, #0]
 8010d14:	681d      	ldr	r5, [r3, #0]
 8010d16:	6862      	ldr	r2, [r4, #4]
 8010d18:	2100      	movs	r1, #0
 8010d1a:	4628      	mov	r0, r5
 8010d1c:	f7ef fa60 	bl	80001e0 <memchr>
 8010d20:	b108      	cbz	r0, 8010d26 <_printf_i+0x1f2>
 8010d22:	1b40      	subs	r0, r0, r5
 8010d24:	6060      	str	r0, [r4, #4]
 8010d26:	6863      	ldr	r3, [r4, #4]
 8010d28:	6123      	str	r3, [r4, #16]
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d30:	e7a8      	b.n	8010c84 <_printf_i+0x150>
 8010d32:	6923      	ldr	r3, [r4, #16]
 8010d34:	462a      	mov	r2, r5
 8010d36:	4649      	mov	r1, r9
 8010d38:	4640      	mov	r0, r8
 8010d3a:	47d0      	blx	sl
 8010d3c:	3001      	adds	r0, #1
 8010d3e:	d0ab      	beq.n	8010c98 <_printf_i+0x164>
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	079b      	lsls	r3, r3, #30
 8010d44:	d413      	bmi.n	8010d6e <_printf_i+0x23a>
 8010d46:	68e0      	ldr	r0, [r4, #12]
 8010d48:	9b03      	ldr	r3, [sp, #12]
 8010d4a:	4298      	cmp	r0, r3
 8010d4c:	bfb8      	it	lt
 8010d4e:	4618      	movlt	r0, r3
 8010d50:	e7a4      	b.n	8010c9c <_printf_i+0x168>
 8010d52:	2301      	movs	r3, #1
 8010d54:	4632      	mov	r2, r6
 8010d56:	4649      	mov	r1, r9
 8010d58:	4640      	mov	r0, r8
 8010d5a:	47d0      	blx	sl
 8010d5c:	3001      	adds	r0, #1
 8010d5e:	d09b      	beq.n	8010c98 <_printf_i+0x164>
 8010d60:	3501      	adds	r5, #1
 8010d62:	68e3      	ldr	r3, [r4, #12]
 8010d64:	9903      	ldr	r1, [sp, #12]
 8010d66:	1a5b      	subs	r3, r3, r1
 8010d68:	42ab      	cmp	r3, r5
 8010d6a:	dcf2      	bgt.n	8010d52 <_printf_i+0x21e>
 8010d6c:	e7eb      	b.n	8010d46 <_printf_i+0x212>
 8010d6e:	2500      	movs	r5, #0
 8010d70:	f104 0619 	add.w	r6, r4, #25
 8010d74:	e7f5      	b.n	8010d62 <_printf_i+0x22e>
 8010d76:	bf00      	nop
 8010d78:	08013ebd 	.word	0x08013ebd
 8010d7c:	08013ece 	.word	0x08013ece

08010d80 <_putc_r>:
 8010d80:	b570      	push	{r4, r5, r6, lr}
 8010d82:	460d      	mov	r5, r1
 8010d84:	4614      	mov	r4, r2
 8010d86:	4606      	mov	r6, r0
 8010d88:	b118      	cbz	r0, 8010d92 <_putc_r+0x12>
 8010d8a:	6983      	ldr	r3, [r0, #24]
 8010d8c:	b90b      	cbnz	r3, 8010d92 <_putc_r+0x12>
 8010d8e:	f7fe ffd3 	bl	800fd38 <__sinit>
 8010d92:	4b1c      	ldr	r3, [pc, #112]	; (8010e04 <_putc_r+0x84>)
 8010d94:	429c      	cmp	r4, r3
 8010d96:	d124      	bne.n	8010de2 <_putc_r+0x62>
 8010d98:	6874      	ldr	r4, [r6, #4]
 8010d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d9c:	07d8      	lsls	r0, r3, #31
 8010d9e:	d405      	bmi.n	8010dac <_putc_r+0x2c>
 8010da0:	89a3      	ldrh	r3, [r4, #12]
 8010da2:	0599      	lsls	r1, r3, #22
 8010da4:	d402      	bmi.n	8010dac <_putc_r+0x2c>
 8010da6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010da8:	f7ff f889 	bl	800febe <__retarget_lock_acquire_recursive>
 8010dac:	68a3      	ldr	r3, [r4, #8]
 8010dae:	3b01      	subs	r3, #1
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	60a3      	str	r3, [r4, #8]
 8010db4:	da05      	bge.n	8010dc2 <_putc_r+0x42>
 8010db6:	69a2      	ldr	r2, [r4, #24]
 8010db8:	4293      	cmp	r3, r2
 8010dba:	db1c      	blt.n	8010df6 <_putc_r+0x76>
 8010dbc:	b2eb      	uxtb	r3, r5
 8010dbe:	2b0a      	cmp	r3, #10
 8010dc0:	d019      	beq.n	8010df6 <_putc_r+0x76>
 8010dc2:	6823      	ldr	r3, [r4, #0]
 8010dc4:	1c5a      	adds	r2, r3, #1
 8010dc6:	6022      	str	r2, [r4, #0]
 8010dc8:	701d      	strb	r5, [r3, #0]
 8010dca:	b2ed      	uxtb	r5, r5
 8010dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dce:	07da      	lsls	r2, r3, #31
 8010dd0:	d405      	bmi.n	8010dde <_putc_r+0x5e>
 8010dd2:	89a3      	ldrh	r3, [r4, #12]
 8010dd4:	059b      	lsls	r3, r3, #22
 8010dd6:	d402      	bmi.n	8010dde <_putc_r+0x5e>
 8010dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dda:	f7ff f871 	bl	800fec0 <__retarget_lock_release_recursive>
 8010dde:	4628      	mov	r0, r5
 8010de0:	bd70      	pop	{r4, r5, r6, pc}
 8010de2:	4b09      	ldr	r3, [pc, #36]	; (8010e08 <_putc_r+0x88>)
 8010de4:	429c      	cmp	r4, r3
 8010de6:	d101      	bne.n	8010dec <_putc_r+0x6c>
 8010de8:	68b4      	ldr	r4, [r6, #8]
 8010dea:	e7d6      	b.n	8010d9a <_putc_r+0x1a>
 8010dec:	4b07      	ldr	r3, [pc, #28]	; (8010e0c <_putc_r+0x8c>)
 8010dee:	429c      	cmp	r4, r3
 8010df0:	bf08      	it	eq
 8010df2:	68f4      	ldreq	r4, [r6, #12]
 8010df4:	e7d1      	b.n	8010d9a <_putc_r+0x1a>
 8010df6:	4629      	mov	r1, r5
 8010df8:	4622      	mov	r2, r4
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f000 f81a 	bl	8010e34 <__swbuf_r>
 8010e00:	4605      	mov	r5, r0
 8010e02:	e7e3      	b.n	8010dcc <_putc_r+0x4c>
 8010e04:	08013e68 	.word	0x08013e68
 8010e08:	08013e88 	.word	0x08013e88
 8010e0c:	08013e48 	.word	0x08013e48

08010e10 <_read_r>:
 8010e10:	b538      	push	{r3, r4, r5, lr}
 8010e12:	4d07      	ldr	r5, [pc, #28]	; (8010e30 <_read_r+0x20>)
 8010e14:	4604      	mov	r4, r0
 8010e16:	4608      	mov	r0, r1
 8010e18:	4611      	mov	r1, r2
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	602a      	str	r2, [r5, #0]
 8010e1e:	461a      	mov	r2, r3
 8010e20:	f7f0 fe22 	bl	8001a68 <_read>
 8010e24:	1c43      	adds	r3, r0, #1
 8010e26:	d102      	bne.n	8010e2e <_read_r+0x1e>
 8010e28:	682b      	ldr	r3, [r5, #0]
 8010e2a:	b103      	cbz	r3, 8010e2e <_read_r+0x1e>
 8010e2c:	6023      	str	r3, [r4, #0]
 8010e2e:	bd38      	pop	{r3, r4, r5, pc}
 8010e30:	2001b214 	.word	0x2001b214

08010e34 <__swbuf_r>:
 8010e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e36:	460e      	mov	r6, r1
 8010e38:	4614      	mov	r4, r2
 8010e3a:	4605      	mov	r5, r0
 8010e3c:	b118      	cbz	r0, 8010e46 <__swbuf_r+0x12>
 8010e3e:	6983      	ldr	r3, [r0, #24]
 8010e40:	b90b      	cbnz	r3, 8010e46 <__swbuf_r+0x12>
 8010e42:	f7fe ff79 	bl	800fd38 <__sinit>
 8010e46:	4b21      	ldr	r3, [pc, #132]	; (8010ecc <__swbuf_r+0x98>)
 8010e48:	429c      	cmp	r4, r3
 8010e4a:	d12b      	bne.n	8010ea4 <__swbuf_r+0x70>
 8010e4c:	686c      	ldr	r4, [r5, #4]
 8010e4e:	69a3      	ldr	r3, [r4, #24]
 8010e50:	60a3      	str	r3, [r4, #8]
 8010e52:	89a3      	ldrh	r3, [r4, #12]
 8010e54:	071a      	lsls	r2, r3, #28
 8010e56:	d52f      	bpl.n	8010eb8 <__swbuf_r+0x84>
 8010e58:	6923      	ldr	r3, [r4, #16]
 8010e5a:	b36b      	cbz	r3, 8010eb8 <__swbuf_r+0x84>
 8010e5c:	6923      	ldr	r3, [r4, #16]
 8010e5e:	6820      	ldr	r0, [r4, #0]
 8010e60:	1ac0      	subs	r0, r0, r3
 8010e62:	6963      	ldr	r3, [r4, #20]
 8010e64:	b2f6      	uxtb	r6, r6
 8010e66:	4283      	cmp	r3, r0
 8010e68:	4637      	mov	r7, r6
 8010e6a:	dc04      	bgt.n	8010e76 <__swbuf_r+0x42>
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	4628      	mov	r0, r5
 8010e70:	f7ff fae2 	bl	8010438 <_fflush_r>
 8010e74:	bb30      	cbnz	r0, 8010ec4 <__swbuf_r+0x90>
 8010e76:	68a3      	ldr	r3, [r4, #8]
 8010e78:	3b01      	subs	r3, #1
 8010e7a:	60a3      	str	r3, [r4, #8]
 8010e7c:	6823      	ldr	r3, [r4, #0]
 8010e7e:	1c5a      	adds	r2, r3, #1
 8010e80:	6022      	str	r2, [r4, #0]
 8010e82:	701e      	strb	r6, [r3, #0]
 8010e84:	6963      	ldr	r3, [r4, #20]
 8010e86:	3001      	adds	r0, #1
 8010e88:	4283      	cmp	r3, r0
 8010e8a:	d004      	beq.n	8010e96 <__swbuf_r+0x62>
 8010e8c:	89a3      	ldrh	r3, [r4, #12]
 8010e8e:	07db      	lsls	r3, r3, #31
 8010e90:	d506      	bpl.n	8010ea0 <__swbuf_r+0x6c>
 8010e92:	2e0a      	cmp	r6, #10
 8010e94:	d104      	bne.n	8010ea0 <__swbuf_r+0x6c>
 8010e96:	4621      	mov	r1, r4
 8010e98:	4628      	mov	r0, r5
 8010e9a:	f7ff facd 	bl	8010438 <_fflush_r>
 8010e9e:	b988      	cbnz	r0, 8010ec4 <__swbuf_r+0x90>
 8010ea0:	4638      	mov	r0, r7
 8010ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ea4:	4b0a      	ldr	r3, [pc, #40]	; (8010ed0 <__swbuf_r+0x9c>)
 8010ea6:	429c      	cmp	r4, r3
 8010ea8:	d101      	bne.n	8010eae <__swbuf_r+0x7a>
 8010eaa:	68ac      	ldr	r4, [r5, #8]
 8010eac:	e7cf      	b.n	8010e4e <__swbuf_r+0x1a>
 8010eae:	4b09      	ldr	r3, [pc, #36]	; (8010ed4 <__swbuf_r+0xa0>)
 8010eb0:	429c      	cmp	r4, r3
 8010eb2:	bf08      	it	eq
 8010eb4:	68ec      	ldreq	r4, [r5, #12]
 8010eb6:	e7ca      	b.n	8010e4e <__swbuf_r+0x1a>
 8010eb8:	4621      	mov	r1, r4
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f000 f80c 	bl	8010ed8 <__swsetup_r>
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	d0cb      	beq.n	8010e5c <__swbuf_r+0x28>
 8010ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8010ec8:	e7ea      	b.n	8010ea0 <__swbuf_r+0x6c>
 8010eca:	bf00      	nop
 8010ecc:	08013e68 	.word	0x08013e68
 8010ed0:	08013e88 	.word	0x08013e88
 8010ed4:	08013e48 	.word	0x08013e48

08010ed8 <__swsetup_r>:
 8010ed8:	4b32      	ldr	r3, [pc, #200]	; (8010fa4 <__swsetup_r+0xcc>)
 8010eda:	b570      	push	{r4, r5, r6, lr}
 8010edc:	681d      	ldr	r5, [r3, #0]
 8010ede:	4606      	mov	r6, r0
 8010ee0:	460c      	mov	r4, r1
 8010ee2:	b125      	cbz	r5, 8010eee <__swsetup_r+0x16>
 8010ee4:	69ab      	ldr	r3, [r5, #24]
 8010ee6:	b913      	cbnz	r3, 8010eee <__swsetup_r+0x16>
 8010ee8:	4628      	mov	r0, r5
 8010eea:	f7fe ff25 	bl	800fd38 <__sinit>
 8010eee:	4b2e      	ldr	r3, [pc, #184]	; (8010fa8 <__swsetup_r+0xd0>)
 8010ef0:	429c      	cmp	r4, r3
 8010ef2:	d10f      	bne.n	8010f14 <__swsetup_r+0x3c>
 8010ef4:	686c      	ldr	r4, [r5, #4]
 8010ef6:	89a3      	ldrh	r3, [r4, #12]
 8010ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010efc:	0719      	lsls	r1, r3, #28
 8010efe:	d42c      	bmi.n	8010f5a <__swsetup_r+0x82>
 8010f00:	06dd      	lsls	r5, r3, #27
 8010f02:	d411      	bmi.n	8010f28 <__swsetup_r+0x50>
 8010f04:	2309      	movs	r3, #9
 8010f06:	6033      	str	r3, [r6, #0]
 8010f08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f0c:	81a3      	strh	r3, [r4, #12]
 8010f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f12:	e03e      	b.n	8010f92 <__swsetup_r+0xba>
 8010f14:	4b25      	ldr	r3, [pc, #148]	; (8010fac <__swsetup_r+0xd4>)
 8010f16:	429c      	cmp	r4, r3
 8010f18:	d101      	bne.n	8010f1e <__swsetup_r+0x46>
 8010f1a:	68ac      	ldr	r4, [r5, #8]
 8010f1c:	e7eb      	b.n	8010ef6 <__swsetup_r+0x1e>
 8010f1e:	4b24      	ldr	r3, [pc, #144]	; (8010fb0 <__swsetup_r+0xd8>)
 8010f20:	429c      	cmp	r4, r3
 8010f22:	bf08      	it	eq
 8010f24:	68ec      	ldreq	r4, [r5, #12]
 8010f26:	e7e6      	b.n	8010ef6 <__swsetup_r+0x1e>
 8010f28:	0758      	lsls	r0, r3, #29
 8010f2a:	d512      	bpl.n	8010f52 <__swsetup_r+0x7a>
 8010f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f2e:	b141      	cbz	r1, 8010f42 <__swsetup_r+0x6a>
 8010f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f34:	4299      	cmp	r1, r3
 8010f36:	d002      	beq.n	8010f3e <__swsetup_r+0x66>
 8010f38:	4630      	mov	r0, r6
 8010f3a:	f7fe ffe9 	bl	800ff10 <_free_r>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	6363      	str	r3, [r4, #52]	; 0x34
 8010f42:	89a3      	ldrh	r3, [r4, #12]
 8010f44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f48:	81a3      	strh	r3, [r4, #12]
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	6063      	str	r3, [r4, #4]
 8010f4e:	6923      	ldr	r3, [r4, #16]
 8010f50:	6023      	str	r3, [r4, #0]
 8010f52:	89a3      	ldrh	r3, [r4, #12]
 8010f54:	f043 0308 	orr.w	r3, r3, #8
 8010f58:	81a3      	strh	r3, [r4, #12]
 8010f5a:	6923      	ldr	r3, [r4, #16]
 8010f5c:	b94b      	cbnz	r3, 8010f72 <__swsetup_r+0x9a>
 8010f5e:	89a3      	ldrh	r3, [r4, #12]
 8010f60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f68:	d003      	beq.n	8010f72 <__swsetup_r+0x9a>
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	f000 f847 	bl	8011000 <__smakebuf_r>
 8010f72:	89a0      	ldrh	r0, [r4, #12]
 8010f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f78:	f010 0301 	ands.w	r3, r0, #1
 8010f7c:	d00a      	beq.n	8010f94 <__swsetup_r+0xbc>
 8010f7e:	2300      	movs	r3, #0
 8010f80:	60a3      	str	r3, [r4, #8]
 8010f82:	6963      	ldr	r3, [r4, #20]
 8010f84:	425b      	negs	r3, r3
 8010f86:	61a3      	str	r3, [r4, #24]
 8010f88:	6923      	ldr	r3, [r4, #16]
 8010f8a:	b943      	cbnz	r3, 8010f9e <__swsetup_r+0xc6>
 8010f8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010f90:	d1ba      	bne.n	8010f08 <__swsetup_r+0x30>
 8010f92:	bd70      	pop	{r4, r5, r6, pc}
 8010f94:	0781      	lsls	r1, r0, #30
 8010f96:	bf58      	it	pl
 8010f98:	6963      	ldrpl	r3, [r4, #20]
 8010f9a:	60a3      	str	r3, [r4, #8]
 8010f9c:	e7f4      	b.n	8010f88 <__swsetup_r+0xb0>
 8010f9e:	2000      	movs	r0, #0
 8010fa0:	e7f7      	b.n	8010f92 <__swsetup_r+0xba>
 8010fa2:	bf00      	nop
 8010fa4:	2000016c 	.word	0x2000016c
 8010fa8:	08013e68 	.word	0x08013e68
 8010fac:	08013e88 	.word	0x08013e88
 8010fb0:	08013e48 	.word	0x08013e48

08010fb4 <__swhatbuf_r>:
 8010fb4:	b570      	push	{r4, r5, r6, lr}
 8010fb6:	460e      	mov	r6, r1
 8010fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fbc:	2900      	cmp	r1, #0
 8010fbe:	b096      	sub	sp, #88	; 0x58
 8010fc0:	4614      	mov	r4, r2
 8010fc2:	461d      	mov	r5, r3
 8010fc4:	da08      	bge.n	8010fd8 <__swhatbuf_r+0x24>
 8010fc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	602a      	str	r2, [r5, #0]
 8010fce:	061a      	lsls	r2, r3, #24
 8010fd0:	d410      	bmi.n	8010ff4 <__swhatbuf_r+0x40>
 8010fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fd6:	e00e      	b.n	8010ff6 <__swhatbuf_r+0x42>
 8010fd8:	466a      	mov	r2, sp
 8010fda:	f000 f89b 	bl	8011114 <_fstat_r>
 8010fde:	2800      	cmp	r0, #0
 8010fe0:	dbf1      	blt.n	8010fc6 <__swhatbuf_r+0x12>
 8010fe2:	9a01      	ldr	r2, [sp, #4]
 8010fe4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010fe8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010fec:	425a      	negs	r2, r3
 8010fee:	415a      	adcs	r2, r3
 8010ff0:	602a      	str	r2, [r5, #0]
 8010ff2:	e7ee      	b.n	8010fd2 <__swhatbuf_r+0x1e>
 8010ff4:	2340      	movs	r3, #64	; 0x40
 8010ff6:	2000      	movs	r0, #0
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	b016      	add	sp, #88	; 0x58
 8010ffc:	bd70      	pop	{r4, r5, r6, pc}
	...

08011000 <__smakebuf_r>:
 8011000:	898b      	ldrh	r3, [r1, #12]
 8011002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011004:	079d      	lsls	r5, r3, #30
 8011006:	4606      	mov	r6, r0
 8011008:	460c      	mov	r4, r1
 801100a:	d507      	bpl.n	801101c <__smakebuf_r+0x1c>
 801100c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011010:	6023      	str	r3, [r4, #0]
 8011012:	6123      	str	r3, [r4, #16]
 8011014:	2301      	movs	r3, #1
 8011016:	6163      	str	r3, [r4, #20]
 8011018:	b002      	add	sp, #8
 801101a:	bd70      	pop	{r4, r5, r6, pc}
 801101c:	ab01      	add	r3, sp, #4
 801101e:	466a      	mov	r2, sp
 8011020:	f7ff ffc8 	bl	8010fb4 <__swhatbuf_r>
 8011024:	9900      	ldr	r1, [sp, #0]
 8011026:	4605      	mov	r5, r0
 8011028:	4630      	mov	r0, r6
 801102a:	f7fe ffdd 	bl	800ffe8 <_malloc_r>
 801102e:	b948      	cbnz	r0, 8011044 <__smakebuf_r+0x44>
 8011030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011034:	059a      	lsls	r2, r3, #22
 8011036:	d4ef      	bmi.n	8011018 <__smakebuf_r+0x18>
 8011038:	f023 0303 	bic.w	r3, r3, #3
 801103c:	f043 0302 	orr.w	r3, r3, #2
 8011040:	81a3      	strh	r3, [r4, #12]
 8011042:	e7e3      	b.n	801100c <__smakebuf_r+0xc>
 8011044:	4b0d      	ldr	r3, [pc, #52]	; (801107c <__smakebuf_r+0x7c>)
 8011046:	62b3      	str	r3, [r6, #40]	; 0x28
 8011048:	89a3      	ldrh	r3, [r4, #12]
 801104a:	6020      	str	r0, [r4, #0]
 801104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011050:	81a3      	strh	r3, [r4, #12]
 8011052:	9b00      	ldr	r3, [sp, #0]
 8011054:	6163      	str	r3, [r4, #20]
 8011056:	9b01      	ldr	r3, [sp, #4]
 8011058:	6120      	str	r0, [r4, #16]
 801105a:	b15b      	cbz	r3, 8011074 <__smakebuf_r+0x74>
 801105c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011060:	4630      	mov	r0, r6
 8011062:	f000 f869 	bl	8011138 <_isatty_r>
 8011066:	b128      	cbz	r0, 8011074 <__smakebuf_r+0x74>
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	f023 0303 	bic.w	r3, r3, #3
 801106e:	f043 0301 	orr.w	r3, r3, #1
 8011072:	81a3      	strh	r3, [r4, #12]
 8011074:	89a0      	ldrh	r0, [r4, #12]
 8011076:	4305      	orrs	r5, r0
 8011078:	81a5      	strh	r5, [r4, #12]
 801107a:	e7cd      	b.n	8011018 <__smakebuf_r+0x18>
 801107c:	0800fcd1 	.word	0x0800fcd1

08011080 <memmove>:
 8011080:	4288      	cmp	r0, r1
 8011082:	b510      	push	{r4, lr}
 8011084:	eb01 0402 	add.w	r4, r1, r2
 8011088:	d902      	bls.n	8011090 <memmove+0x10>
 801108a:	4284      	cmp	r4, r0
 801108c:	4623      	mov	r3, r4
 801108e:	d807      	bhi.n	80110a0 <memmove+0x20>
 8011090:	1e43      	subs	r3, r0, #1
 8011092:	42a1      	cmp	r1, r4
 8011094:	d008      	beq.n	80110a8 <memmove+0x28>
 8011096:	f811 2b01 	ldrb.w	r2, [r1], #1
 801109a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801109e:	e7f8      	b.n	8011092 <memmove+0x12>
 80110a0:	4402      	add	r2, r0
 80110a2:	4601      	mov	r1, r0
 80110a4:	428a      	cmp	r2, r1
 80110a6:	d100      	bne.n	80110aa <memmove+0x2a>
 80110a8:	bd10      	pop	{r4, pc}
 80110aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110b2:	e7f7      	b.n	80110a4 <memmove+0x24>

080110b4 <_realloc_r>:
 80110b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b8:	4680      	mov	r8, r0
 80110ba:	4614      	mov	r4, r2
 80110bc:	460e      	mov	r6, r1
 80110be:	b921      	cbnz	r1, 80110ca <_realloc_r+0x16>
 80110c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110c4:	4611      	mov	r1, r2
 80110c6:	f7fe bf8f 	b.w	800ffe8 <_malloc_r>
 80110ca:	b92a      	cbnz	r2, 80110d8 <_realloc_r+0x24>
 80110cc:	f7fe ff20 	bl	800ff10 <_free_r>
 80110d0:	4625      	mov	r5, r4
 80110d2:	4628      	mov	r0, r5
 80110d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110d8:	f000 f83e 	bl	8011158 <_malloc_usable_size_r>
 80110dc:	4284      	cmp	r4, r0
 80110de:	4607      	mov	r7, r0
 80110e0:	d802      	bhi.n	80110e8 <_realloc_r+0x34>
 80110e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80110e6:	d812      	bhi.n	801110e <_realloc_r+0x5a>
 80110e8:	4621      	mov	r1, r4
 80110ea:	4640      	mov	r0, r8
 80110ec:	f7fe ff7c 	bl	800ffe8 <_malloc_r>
 80110f0:	4605      	mov	r5, r0
 80110f2:	2800      	cmp	r0, #0
 80110f4:	d0ed      	beq.n	80110d2 <_realloc_r+0x1e>
 80110f6:	42bc      	cmp	r4, r7
 80110f8:	4622      	mov	r2, r4
 80110fa:	4631      	mov	r1, r6
 80110fc:	bf28      	it	cs
 80110fe:	463a      	movcs	r2, r7
 8011100:	f7fe fef0 	bl	800fee4 <memcpy>
 8011104:	4631      	mov	r1, r6
 8011106:	4640      	mov	r0, r8
 8011108:	f7fe ff02 	bl	800ff10 <_free_r>
 801110c:	e7e1      	b.n	80110d2 <_realloc_r+0x1e>
 801110e:	4635      	mov	r5, r6
 8011110:	e7df      	b.n	80110d2 <_realloc_r+0x1e>
	...

08011114 <_fstat_r>:
 8011114:	b538      	push	{r3, r4, r5, lr}
 8011116:	4d07      	ldr	r5, [pc, #28]	; (8011134 <_fstat_r+0x20>)
 8011118:	2300      	movs	r3, #0
 801111a:	4604      	mov	r4, r0
 801111c:	4608      	mov	r0, r1
 801111e:	4611      	mov	r1, r2
 8011120:	602b      	str	r3, [r5, #0]
 8011122:	f7f0 fcca 	bl	8001aba <_fstat>
 8011126:	1c43      	adds	r3, r0, #1
 8011128:	d102      	bne.n	8011130 <_fstat_r+0x1c>
 801112a:	682b      	ldr	r3, [r5, #0]
 801112c:	b103      	cbz	r3, 8011130 <_fstat_r+0x1c>
 801112e:	6023      	str	r3, [r4, #0]
 8011130:	bd38      	pop	{r3, r4, r5, pc}
 8011132:	bf00      	nop
 8011134:	2001b214 	.word	0x2001b214

08011138 <_isatty_r>:
 8011138:	b538      	push	{r3, r4, r5, lr}
 801113a:	4d06      	ldr	r5, [pc, #24]	; (8011154 <_isatty_r+0x1c>)
 801113c:	2300      	movs	r3, #0
 801113e:	4604      	mov	r4, r0
 8011140:	4608      	mov	r0, r1
 8011142:	602b      	str	r3, [r5, #0]
 8011144:	f7f0 fcc9 	bl	8001ada <_isatty>
 8011148:	1c43      	adds	r3, r0, #1
 801114a:	d102      	bne.n	8011152 <_isatty_r+0x1a>
 801114c:	682b      	ldr	r3, [r5, #0]
 801114e:	b103      	cbz	r3, 8011152 <_isatty_r+0x1a>
 8011150:	6023      	str	r3, [r4, #0]
 8011152:	bd38      	pop	{r3, r4, r5, pc}
 8011154:	2001b214 	.word	0x2001b214

08011158 <_malloc_usable_size_r>:
 8011158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801115c:	1f18      	subs	r0, r3, #4
 801115e:	2b00      	cmp	r3, #0
 8011160:	bfbc      	itt	lt
 8011162:	580b      	ldrlt	r3, [r1, r0]
 8011164:	18c0      	addlt	r0, r0, r3
 8011166:	4770      	bx	lr

08011168 <_init>:
 8011168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116a:	bf00      	nop
 801116c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801116e:	bc08      	pop	{r3}
 8011170:	469e      	mov	lr, r3
 8011172:	4770      	bx	lr

08011174 <_fini>:
 8011174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011176:	bf00      	nop
 8011178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801117a:	bc08      	pop	{r3}
 801117c:	469e      	mov	lr, r3
 801117e:	4770      	bx	lr


rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002acc  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa3c  0800aa3c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa3c  0800aa3c  0001aa3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa44  0800aa44  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa44  0800aa44  0001aa44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa48  0800aa48  0001aa48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800aa4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c10  200000dc  0800ab28  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cec  0800ab28  00024cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f238  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004888  00000000  00000000  0003f344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  00043bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  000455c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc38  00000000  00000000  00046da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fa14  00000000  00000000  000629e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a185e  00000000  00000000  000823f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123c52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007090  00000000  00000000  00123ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000dc 	.word	0x200000dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f58 	.word	0x08007f58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e0 	.word	0x200000e0
 80001dc:	08007f58 	.word	0x08007f58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBand>:
// Calculate the last element position (index) of the array band
const int lastBand = (sizeof band / sizeof(Band)) - 1; // For this case will be 26.
int currentBand = 0;                          // First band. For this case, AM is the current band.

void displayBand(int band_index)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af04      	add	r7, sp, #16
 800058a:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 800058c:	2304      	movs	r3, #4
 800058e:	3301      	adds	r3, #1
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	d05e      	beq.n	8000654 <displayBand+0xd0>
    {
        ST7735_FillRectangleFast(0,0,160,38,ST7735_COLOR565(10, 10, 10));
 8000596:	f640 0341 	movw	r3, #2113	; 0x841
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2326      	movs	r3, #38	; 0x26
 800059e:	22a0      	movs	r2, #160	; 0xa0
 80005a0:	2100      	movs	r1, #0
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 feda 	bl	800135c <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,38,160,2,ST7735_COLOR565(50, 50, 50));
 80005a8:	f243 1386 	movw	r3, #12678	; 0x3186
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2302      	movs	r3, #2
 80005b0:	22a0      	movs	r2, #160	; 0xa0
 80005b2:	2126      	movs	r1, #38	; 0x26
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fed1 	bl	800135c <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 1, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(10, 10, 10));
 80005ba:	4a28      	ldr	r2, [pc, #160]	; (800065c <displayBand+0xd8>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	4413      	add	r3, r2
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <displayBand+0xdc>)
 80005c6:	f640 0241 	movw	r2, #2113	; 0x841
 80005ca:	9202      	str	r2, [sp, #8]
 80005cc:	f64f 5280 	movw	r2, #64896	; 0xfd80
 80005d0:	9201      	str	r2, [sp, #4]
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	9200      	str	r2, [sp, #0]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	460a      	mov	r2, r1
 80005da:	2101      	movs	r1, #1
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fe00 	bl	80011e2 <ST7735_WriteString>
        ST7735_WriteString(5, 26, "BAND", Font_7x10, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(10, 10, 10));
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <displayBand+0xe0>)
 80005e4:	f640 0241 	movw	r2, #2113	; 0x841
 80005e8:	9202      	str	r2, [sp, #8]
 80005ea:	f64f 5280 	movw	r2, #64896	; 0xfd80
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	9200      	str	r2, [sp, #0]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <displayBand+0xe4>)
 80005f8:	211a      	movs	r1, #26
 80005fa:	2005      	movs	r0, #5
 80005fc:	f000 fdf1 	bl	80011e2 <ST7735_WriteString>
        ST7735_WriteString(75, 1, band[band_index].minFreq, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8000600:	4a16      	ldr	r2, [pc, #88]	; (800065c <displayBand+0xd8>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	4413      	add	r3, r2
 8000608:	3304      	adds	r3, #4
 800060a:	6819      	ldr	r1, [r3, #0]
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <displayBand+0xe8>)
 800060e:	f640 0241 	movw	r2, #2113	; 0x841
 8000612:	9202      	str	r2, [sp, #8]
 8000614:	f244 52df 	movw	r2, #17887	; 0x45df
 8000618:	9201      	str	r2, [sp, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	460a      	mov	r2, r1
 8000622:	2101      	movs	r1, #1
 8000624:	204b      	movs	r0, #75	; 0x4b
 8000626:	f000 fddc 	bl	80011e2 <ST7735_WriteString>
        ST7735_WriteString(75, 19, band[band_index].maxFreq, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 800062a:	4a0c      	ldr	r2, [pc, #48]	; (800065c <displayBand+0xd8>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	4413      	add	r3, r2
 8000632:	3308      	adds	r3, #8
 8000634:	6819      	ldr	r1, [r3, #0]
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <displayBand+0xe8>)
 8000638:	f640 0241 	movw	r2, #2113	; 0x841
 800063c:	9202      	str	r2, [sp, #8]
 800063e:	f244 52df 	movw	r2, #17887	; 0x45df
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	460a      	mov	r2, r1
 800064c:	2113      	movs	r1, #19
 800064e:	204b      	movs	r0, #75	; 0x4b
 8000650:	f000 fdc7 	bl	80011e2 <ST7735_WriteString>
    }

}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	20000060 	.word	0x20000060
 8000664:	20000050 	.word	0x20000050
 8000668:	08007fe0 	.word	0x08007fe0
 800066c:	20000058 	.word	0x20000058

08000670 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_CRC_Init+0x20>)
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <MX_CRC_Init+0x24>)
 8000678:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_CRC_Init+0x20>)
 800067c:	f001 fb58 	bl	8001d30 <HAL_CRC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000686:	f000 fb2b 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000f8 	.word	0x200000f8
 8000694:	40023000 	.word	0x40023000

08000698 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <HAL_CRC_MspInit+0x3c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d10d      	bne.n	80006c6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_CRC_MspInit+0x40>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <HAL_CRC_MspInit+0x40>)
 80006b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_CRC_MspInit+0x40>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023000 	.word	0x40023000
 80006d8:	40023800 	.word	0x40023800

080006dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &EncoderQueue_attributes);
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <MX_FREERTOS_Init+0x58>)
 80006e2:	2102      	movs	r1, #2
 80006e4:	2010      	movs	r0, #16
 80006e6:	f004 f898 	bl	800481a <osMessageQueueNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_FREERTOS_Init+0x5c>)
 80006ee:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ButtonQueue_attributes);
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_FREERTOS_Init+0x60>)
 80006f2:	2102      	movs	r1, #2
 80006f4:	2010      	movs	r0, #16
 80006f6:	f004 f890 	bl	800481a <osMessageQueueNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <MX_FREERTOS_Init+0x64>)
 80006fe:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000700:	4a10      	ldr	r2, [pc, #64]	; (8000744 <MX_FREERTOS_Init+0x68>)
 8000702:	2100      	movs	r1, #0
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <MX_FREERTOS_Init+0x6c>)
 8000706:	f003 ffdb 	bl	80046c0 <osThreadNew>
 800070a:	4603      	mov	r3, r0
 800070c:	4a0f      	ldr	r2, [pc, #60]	; (800074c <MX_FREERTOS_Init+0x70>)
 800070e:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000710:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <MX_FREERTOS_Init+0x74>)
 8000712:	2100      	movs	r1, #0
 8000714:	480f      	ldr	r0, [pc, #60]	; (8000754 <MX_FREERTOS_Init+0x78>)
 8000716:	f003 ffd3 	bl	80046c0 <osThreadNew>
 800071a:	4603      	mov	r3, r0
 800071c:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <MX_FREERTOS_Init+0x7c>)
 800071e:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000720:	4a0e      	ldr	r2, [pc, #56]	; (800075c <MX_FREERTOS_Init+0x80>)
 8000722:	2100      	movs	r1, #0
 8000724:	480e      	ldr	r0, [pc, #56]	; (8000760 <MX_FREERTOS_Init+0x84>)
 8000726:	f003 ffcb 	bl	80046c0 <osThreadNew>
 800072a:	4603      	mov	r3, r0
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <MX_FREERTOS_Init+0x88>)
 800072e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800a8e8 	.word	0x0800a8e8
 8000738:	2000010c 	.word	0x2000010c
 800073c:	0800a900 	.word	0x0800a900
 8000740:	20000110 	.word	0x20000110
 8000744:	0800a87c 	.word	0x0800a87c
 8000748:	08000769 	.word	0x08000769
 800074c:	20000100 	.word	0x20000100
 8000750:	0800a8a0 	.word	0x0800a8a0
 8000754:	08000779 	.word	0x08000779
 8000758:	20000104 	.word	0x20000104
 800075c:	0800a8c4 	.word	0x0800a8c4
 8000760:	080008a5 	.word	0x080008a5
 8000764:	20000108 	.word	0x20000108

08000768 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8000770:	2064      	movs	r0, #100	; 0x64
 8000772:	f004 f837 	bl	80047e4 <osDelay>
 8000776:	e7fb      	b.n	8000770 <StartDefaultTask+0x8>

08000778 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b092      	sub	sp, #72	; 0x48
 800077c:	af04      	add	r7, sp, #16
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	uint16_t EncoderReceiveResult = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t ButtonReceiveResult = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	863b      	strh	r3, [r7, #48]	; 0x30
	int32_t counter = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t button = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t last_counter = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t max_index = 5;
 8000794:	2305      	movs	r3, #5
 8000796:	85fb      	strh	r3, [r7, #46]	; 0x2e
	char buff[16];
	char bbuff[8];
	ST7735_FillScreenFast(ST7735_BLACK);
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fe74 	bl	8001486 <ST7735_FillScreenFast>
	displayBand(last_counter);
 800079e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007a0:	f7ff fef0 	bl	8000584 <displayBand>
	for (;;) {
		//Encoder Rotate
		EncoderReceiveResult = osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 80007a4:	4b3a      	ldr	r3, [pc, #232]	; (8000890 <StartDisplayTask+0x118>)
 80007a6:	6818      	ldr	r0, [r3, #0]
 80007a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80007ac:	2300      	movs	r3, #0
 80007ae:	2200      	movs	r2, #0
 80007b0:	f004 f906 	bl	80049c0 <osMessageQueueGet>
 80007b4:	4603      	mov	r3, r0
 80007b6:	867b      	strh	r3, [r7, #50]	; 0x32
		//snprintf(buff, sizeof(buff), "%02d", counter);
		//ST7735_WriteString(0, 60, buff, Font_7x10, ST7735_GREEN, ST7735_BLACK);
		if(counter == 2) {
 80007b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d113      	bne.n	80007e6 <StartDisplayTask+0x6e>
			if(last_counter != max_index -1)
 80007be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d005      	beq.n	80007d6 <StartDisplayTask+0x5e>
			{
				last_counter += 1;
 80007ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007cc:	3301      	adds	r3, #1
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80007d4:	e003      	b.n	80007de <StartDisplayTask+0x66>
			} else
			{
				last_counter = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			displayBand(last_counter);
 80007de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007e0:	f7ff fed0 	bl	8000584 <displayBand>
 80007e4:	e014      	b.n	8000810 <StartDisplayTask+0x98>
		}else if (counter == 1){
 80007e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d111      	bne.n	8000810 <StartDisplayTask+0x98>
			if(last_counter != 0)
 80007ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d005      	beq.n	80007fe <StartDisplayTask+0x86>
			{
				last_counter -= 1;
 80007f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007f4:	3b01      	subs	r3, #1
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80007fc:	e005      	b.n	800080a <StartDisplayTask+0x92>
			} else
			{
				last_counter = max_index -1;
 80007fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000802:	3b01      	subs	r3, #1
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			displayBand(last_counter);
 800080a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800080c:	f7ff feba 	bl	8000584 <displayBand>
		{

		}

		//Button click
		ButtonReceiveResult = osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <StartDisplayTask+0x11c>)
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8000818:	2300      	movs	r3, #0
 800081a:	2200      	movs	r2, #0
 800081c:	f004 f8d0 	bl	80049c0 <osMessageQueueGet>
 8000820:	4603      	mov	r3, r0
 8000822:	863b      	strh	r3, [r7, #48]	; 0x30
		if (button)
 8000824:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000828:	2b00      	cmp	r3, #0
 800082a:	d02b      	beq.n	8000884 <StartDisplayTask+0x10c>
		{
			snprintf(bbuff, sizeof(bbuff), "%01d", button);
 800082c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000830:	f107 000c 	add.w	r0, r7, #12
 8000834:	4a18      	ldr	r2, [pc, #96]	; (8000898 <StartDisplayTask+0x120>)
 8000836:	2108      	movs	r1, #8
 8000838:	f007 f80c 	bl	8007854 <sniprintf>
			ST7735_WriteString(80, 60, bbuff, Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <StartDisplayTask+0x124>)
 800083e:	f107 010c 	add.w	r1, r7, #12
 8000842:	2200      	movs	r2, #0
 8000844:	9202      	str	r2, [sp, #8]
 8000846:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	9200      	str	r2, [sp, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	460a      	mov	r2, r1
 8000854:	213c      	movs	r1, #60	; 0x3c
 8000856:	2050      	movs	r0, #80	; 0x50
 8000858:	f000 fcc3 	bl	80011e2 <ST7735_WriteString>
			button = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	84fb      	strh	r3, [r7, #38]	; 0x26
			osDelay(500);
 8000860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000864:	f003 ffbe 	bl	80047e4 <osDelay>
			ST7735_WriteString(80, 60, "     ", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <StartDisplayTask+0x124>)
 800086a:	2200      	movs	r2, #0
 800086c:	9202      	str	r2, [sp, #8]
 800086e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000872:	9201      	str	r2, [sp, #4]
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	9200      	str	r2, [sp, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <StartDisplayTask+0x128>)
 800087c:	213c      	movs	r1, #60	; 0x3c
 800087e:	2050      	movs	r0, #80	; 0x50
 8000880:	f000 fcaf 	bl	80011e2 <ST7735_WriteString>
		}

		osDelay(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f003 ffac 	bl	80047e4 <osDelay>
		EncoderReceiveResult = osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 800088c:	e78a      	b.n	80007a4 <StartDisplayTask+0x2c>
 800088e:	bf00      	nop
 8000890:	2000010c 	.word	0x2000010c
 8000894:	20000110 	.word	0x20000110
 8000898:	08008028 	.word	0x08008028
 800089c:	20000050 	.word	0x20000050
 80008a0:	08008030 	.word	0x08008030

080008a4 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	char buff[16];
	int32_t prevCounter = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t counter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t buttonSend = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80008be:	4b25      	ldr	r3, [pc, #148]	; (8000954 <StartEncoderTask+0xb0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	3b01      	subs	r3, #1
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	0fda      	lsrs	r2, r3, #31
 80008ce:	4413      	add	r3, r2
 80008d0:	105b      	asrs	r3, r3, #1
 80008d2:	425b      	negs	r3, r3
 80008d4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80008d8:	337f      	adds	r3, #127	; 0x7f
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
		if (currCounter != prevCounter) {
 80008dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d01e      	beq.n	8000922 <StartEncoderTask+0x7e>
			if (currCounter > prevCounter) {
 80008e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dd0a      	ble.n	8000902 <StartEncoderTask+0x5e>
				counter = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <StartEncoderTask+0xb4>)
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	f107 0110 	add.w	r1, r7, #16
 80008f8:	2300      	movs	r3, #0
 80008fa:	2200      	movs	r2, #0
 80008fc:	f004 f800 	bl	8004900 <osMessageQueuePut>
 8000900:	e00d      	b.n	800091e <StartEncoderTask+0x7a>
			} else if (currCounter < prevCounter){
 8000902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000906:	429a      	cmp	r2, r3
 8000908:	da09      	bge.n	800091e <StartEncoderTask+0x7a>
				counter = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <StartEncoderTask+0xb4>)
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	f107 0110 	add.w	r1, r7, #16
 8000916:	2300      	movs	r3, #0
 8000918:	2200      	movs	r2, #0
 800091a:	f003 fff1 	bl	8004900 <osMessageQueuePut>
			{

			}
			//snprintf(buff, sizeof(buff), "%06d", currCounter);
			//ST7735_WriteString(90, 46, buff, Font_7x10, ST7735_GREEN, ST7735_BLACK);
			prevCounter = currCounter;
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		// Button
		if(buttonPressed[buttonNumber]) {
 8000922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000926:	4a0d      	ldr	r2, [pc, #52]	; (800095c <StartEncoderTask+0xb8>)
 8000928:	5cd3      	ldrb	r3, [r2, r3]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00c      	beq.n	800094a <StartEncoderTask+0xa6>
			buttonPressed[buttonNumber] = 0;
 8000930:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000934:	4a09      	ldr	r2, [pc, #36]	; (800095c <StartEncoderTask+0xb8>)
 8000936:	2100      	movs	r1, #0
 8000938:	54d1      	strb	r1, [r2, r3]
			//char buff[16];
			//snprintf(buff, sizeof(buff), "BUTTON %d", buttonNumber);
			//ST7735_WriteString(80, 60, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <StartEncoderTask+0xbc>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	f107 010f 	add.w	r1, r7, #15
 8000942:	2300      	movs	r3, #0
 8000944:	2200      	movs	r2, #0
 8000946:	f003 ffdb 	bl	8004900 <osMessageQueuePut>
		}
		osDelay(500);
 800094a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800094e:	f003 ff49 	bl	80047e4 <osDelay>
	for (;;) {
 8000952:	e7b4      	b.n	80008be <StartEncoderTask+0x1a>
 8000954:	20000280 	.word	0x20000280
 8000958:	2000010c 	.word	0x2000010c
 800095c:	20000228 	.word	0x20000228
 8000960:	20000110 	.word	0x20000110

08000964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <MX_GPIO_Init+0xe0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a30      	ldr	r2, [pc, #192]	; (8000a44 <MX_GPIO_Init+0xe0>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <MX_GPIO_Init+0xe0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <MX_GPIO_Init+0xe0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a29      	ldr	r2, [pc, #164]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	211c      	movs	r1, #28
 80009ee:	4816      	ldr	r0, [pc, #88]	; (8000a48 <MX_GPIO_Init+0xe4>)
 80009f0:	f001 fb3e 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	480f      	ldr	r0, [pc, #60]	; (8000a48 <MX_GPIO_Init+0xe4>)
 8000a0a:	f001 f9ad 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000a0e:	231c      	movs	r3, #28
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_GPIO_Init+0xe4>)
 8000a26:	f001 f99f 	bl	8001d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2006      	movs	r0, #6
 8000a30:	f001 f954 	bl	8001cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a34:	2006      	movs	r0, #6
 8000a36:	f001 f96d 	bl	8001d14 <HAL_NVIC_EnableIRQ>

}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	; 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_I2C1_Init+0x50>)
 8000a52:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <MX_I2C1_Init+0x54>)
 8000a54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_I2C1_Init+0x50>)
 8000a58:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <MX_I2C1_Init+0x58>)
 8000a5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_I2C1_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_I2C1_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_I2C1_Init+0x50>)
 8000a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_I2C1_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_I2C1_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_I2C1_Init+0x50>)
 8000a8a:	f001 fb23 	bl	80020d4 <HAL_I2C_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a94:	f000 f924 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000114 	.word	0x20000114
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	000186a0 	.word	0x000186a0

08000aa8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <HAL_I2C_MspInit+0x84>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12b      	bne.n	8000b22 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ae6:	23c0      	movs	r3, #192	; 0xc0
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aea:	2312      	movs	r3, #18
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af6:	2304      	movs	r3, #4
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <HAL_I2C_MspInit+0x8c>)
 8000b02:	f001 f931 	bl	8001d68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400

08000b38 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000b3e:	f000 fabf 	bl	80010c0 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 fc8e 	bl	8001464 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <Display_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	9202      	str	r2, [sp, #8]
 8000b4e:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8000b52:	9201      	str	r2, [sp, #4]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	9200      	str	r2, [sp, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <Display_Init+0x5c>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f000 fb3f 	bl	80011e2 <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <Display_Init+0x60>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	9202      	str	r2, [sp, #8]
 8000b6a:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8000b6e:	9201      	str	r2, [sp, #4]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	9200      	str	r2, [sp, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <Display_Init+0x64>)
 8000b78:	2119      	movs	r1, #25
 8000b7a:	2022      	movs	r0, #34	; 0x22
 8000b7c:	f000 fb31 	bl	80011e2 <ST7735_WriteString>
    HAL_Delay(2000);
 8000b80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b84:	f000 ffce 	bl	8001b24 <HAL_Delay>
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000060 	.word	0x20000060
 8000b94:	08008038 	.word	0x08008038
 8000b98:	20000058 	.word	0x20000058
 8000b9c:	08008044 	.word	0x08008044

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba4:	f000 ff7c 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba8:	f000 f81e 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bac:	f7ff feda 	bl	8000964 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bb0:	f7ff ff4c 	bl	8000a4c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bb4:	f000 f920 	bl	8000df8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000bb8:	f000 fe26 	bl	8001808 <MX_TIM3_Init>
  MX_CRC_Init();
 8000bbc:	f7ff fd58 	bl	8000670 <MX_CRC_Init>
  MX_TIM2_Init();
 8000bc0:	f000 fdca 	bl	8001758 <MX_TIM2_Init>
  MX_RTC_Init();
 8000bc4:	f000 f892 	bl	8000cec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000bc8:	213c      	movs	r1, #60	; 0x3c
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <main+0x44>)
 8000bcc:	f002 ffb5 	bl	8003b3a <HAL_TIM_Encoder_Start>
  Display_Init();
 8000bd0:	f7ff ffb2 	bl	8000b38 <Display_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000bd4:	f003 fd2a 	bl	800462c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000bd8:	f7ff fd80 	bl	80006dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bdc:	f003 fd4a 	bl	8004674 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <main+0x40>
 8000be2:	bf00      	nop
 8000be4:	20000280 	.word	0x20000280

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	; 0x50
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2230      	movs	r2, #48	; 0x30
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f006 fcca 	bl	8007590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <SystemClock_Config+0xcc>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <SystemClock_Config+0xcc>)
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <SystemClock_Config+0xcc>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <SystemClock_Config+0xd0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <SystemClock_Config+0xd0>)
 8000c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <SystemClock_Config+0xd0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c44:	2305      	movs	r3, #5
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c52:	2302      	movs	r3, #2
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c5c:	2319      	movs	r3, #25
 8000c5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c60:	2390      	movs	r3, #144	; 0x90
 8000c62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fb73 	bl	800235c <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c7c:	f000 f830 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	230f      	movs	r3, #15
 8000c82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c84:	2302      	movs	r3, #2
 8000c86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fdd5 	bl	800284c <HAL_RCC_ClockConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ca8:	f000 f81a 	bl	8000ce0 <Error_Handler>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3750      	adds	r7, #80	; 0x50
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40007000 	.word	0x40007000

08000cbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cce:	f000 ff09 	bl	8001ae4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d04:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <MX_RTC_Init+0xac>)
 8000d06:	4a25      	ldr	r2, [pc, #148]	; (8000d9c <MX_RTC_Init+0xb0>)
 8000d08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <MX_RTC_Init+0xac>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d10:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_RTC_Init+0xac>)
 8000d12:	227f      	movs	r2, #127	; 0x7f
 8000d14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <MX_RTC_Init+0xac>)
 8000d18:	22ff      	movs	r2, #255	; 0xff
 8000d1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_RTC_Init+0xac>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_RTC_Init+0xac>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_RTC_Init+0xac>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d2e:	481a      	ldr	r0, [pc, #104]	; (8000d98 <MX_RTC_Init+0xac>)
 8000d30:	f002 f88e 	bl	8002e50 <HAL_RTC_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f7ff ffd1 	bl	8000ce0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	4619      	mov	r1, r3
 8000d58:	480f      	ldr	r0, [pc, #60]	; (8000d98 <MX_RTC_Init+0xac>)
 8000d5a:	f002 f8ef 	bl	8002f3c <HAL_RTC_SetTime>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d64:	f7ff ffbc 	bl	8000ce0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000d68:	2305      	movs	r3, #5
 8000d6a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000d6c:	2305      	movs	r3, #5
 8000d6e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8000d70:	2307      	movs	r3, #7
 8000d72:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000d74:	2316      	movs	r3, #22
 8000d76:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_RTC_Init+0xac>)
 8000d80:	f002 f976 	bl	8003070 <HAL_RTC_SetDate>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000d8a:	f7ff ffa9 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000168 	.word	0x20000168
 8000d9c:	40002800 	.word	0x40002800

08000da0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <HAL_RTC_MspInit+0x50>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d111      	bne.n	8000de8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dcc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 ff4c 	bl	8002c70 <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000dde:	f7ff ff7f 	bl	8000ce0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_RTC_MspInit+0x54>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40002800 	.word	0x40002800
 8000df4:	42470e3c 	.word	0x42470e3c

08000df8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000dfe:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <MX_SPI1_Init+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e44:	220a      	movs	r2, #10
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e4a:	f002 fa36 	bl	80032ba <HAL_SPI_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e54:	f7ff ff44 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000188 	.word	0x20000188
 8000e60:	40013000 	.word	0x40013000

08000e64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_SPI_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ebe:	23a0      	movs	r3, #160	; 0xa0
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_SPI_MspInit+0x8c>)
 8000eda:	f000 ff45 	bl	8001d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40013000 	.word	0x40013000
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2110      	movs	r1, #16
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <ST7735_Select+0x14>)
 8000efe:	f001 f8b7 	bl	8002070 <HAL_GPIO_WritePin>
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40020000 	.word	0x40020000

08000f0c <ST7735_Unselect>:

void ST7735_Unselect() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2110      	movs	r1, #16
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <ST7735_Unselect+0x14>)
 8000f16:	f001 f8ab 	bl	8002070 <HAL_GPIO_WritePin>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020000 	.word	0x40020000

08000f24 <ST7735_Reset>:

static void ST7735_Reset() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	4806      	ldr	r0, [pc, #24]	; (8000f48 <ST7735_Reset+0x24>)
 8000f2e:	f001 f89f 	bl	8002070 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f32:	2005      	movs	r0, #5
 8000f34:	f000 fdf6 	bl	8001b24 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <ST7735_Reset+0x24>)
 8000f3e:	f001 f897 	bl	8002070 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020000 	.word	0x40020000

08000f4c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2104      	movs	r1, #4
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <ST7735_WriteCommand+0x2c>)
 8000f5c:	f001 f888 	bl	8002070 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f60:	1df9      	adds	r1, r7, #7
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	2201      	movs	r2, #1
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <ST7735_WriteCommand+0x30>)
 8000f6a:	f002 fa2f 	bl	80033cc <HAL_SPI_Transmit>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	20000188 	.word	0x20000188

08000f80 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <ST7735_WriteData+0x2c>)
 8000f90:	f001 f86e 	bl	8002070 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <ST7735_WriteData+0x30>)
 8000fa0:	f002 fa14 	bl	80033cc <HAL_SPI_Transmit>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	20000188 	.word	0x20000188

08000fb4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000fc6:	e034      	b.n	8001032 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000fd2:	7afb      	ldrb	r3, [r7, #11]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffb9 	bl	8000f4c <ST7735_WriteCommand>

        numArgs = *addr++;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000fe4:	7abb      	ldrb	r3, [r7, #10]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fec:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000fee:	7abb      	ldrb	r3, [r7, #10]
 8000ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000ff6:	7abb      	ldrb	r3, [r7, #10]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000ffc:	7abb      	ldrb	r3, [r7, #10]
 8000ffe:	4619      	mov	r1, r3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffbd 	bl	8000f80 <ST7735_WriteData>
            addr += numArgs;
 8001006:	7abb      	ldrb	r3, [r7, #10]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800100e:	89bb      	ldrh	r3, [r7, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00e      	beq.n	8001032 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800101e:	89bb      	ldrh	r3, [r7, #12]
 8001020:	2bff      	cmp	r3, #255	; 0xff
 8001022:	d102      	bne.n	800102a <ST7735_ExecuteCommandList+0x76>
 8001024:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001028:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800102a:	89bb      	ldrh	r3, [r7, #12]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fd79 	bl	8001b24 <HAL_Delay>
    while(numCommands--) {
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	73fa      	strb	r2, [r7, #15]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1c5      	bne.n	8000fc8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001046:	b590      	push	{r4, r7, lr}
 8001048:	b085      	sub	sp, #20
 800104a:	af00      	add	r7, sp, #0
 800104c:	4604      	mov	r4, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4611      	mov	r1, r2
 8001052:	461a      	mov	r2, r3
 8001054:	4623      	mov	r3, r4
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4603      	mov	r3, r0
 800105a:	71bb      	strb	r3, [r7, #6]
 800105c:	460b      	mov	r3, r1
 800105e:	717b      	strb	r3, [r7, #5]
 8001060:	4613      	mov	r3, r2
 8001062:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001064:	202a      	movs	r0, #42	; 0x2a
 8001066:	f7ff ff71 	bl	8000f4c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800106a:	2300      	movs	r3, #0
 800106c:	733b      	strb	r3, [r7, #12]
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	3301      	adds	r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	737b      	strb	r3, [r7, #13]
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	797b      	ldrb	r3, [r7, #5]
 800107c:	3301      	adds	r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2104      	movs	r1, #4
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff79 	bl	8000f80 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800108e:	202b      	movs	r0, #43	; 0x2b
 8001090:	f7ff ff5c 	bl	8000f4c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	331a      	adds	r3, #26
 8001098:	b2db      	uxtb	r3, r3
 800109a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800109c:	793b      	ldrb	r3, [r7, #4]
 800109e:	331a      	adds	r3, #26
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2104      	movs	r1, #4
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff68 	bl	8000f80 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80010b0:	202c      	movs	r0, #44	; 0x2c
 80010b2:	f7ff ff4b 	bl	8000f4c <ST7735_WriteCommand>
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
	...

080010c0 <ST7735_Init>:

void ST7735_Init() {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
    ST7735_Select();
 80010c4:	f7ff ff16 	bl	8000ef4 <ST7735_Select>
    ST7735_Reset();
 80010c8:	f7ff ff2c 	bl	8000f24 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <ST7735_Init+0x28>)
 80010ce:	f7ff ff71 	bl	8000fb4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <ST7735_Init+0x2c>)
 80010d4:	f7ff ff6e 	bl	8000fb4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <ST7735_Init+0x30>)
 80010da:	f7ff ff6b 	bl	8000fb4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80010de:	f7ff ff15 	bl	8000f0c <ST7735_Unselect>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	0800a918 	.word	0x0800a918
 80010ec:	0800a954 	.word	0x0800a954
 80010f0:	0800a964 	.word	0x0800a964

080010f4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010f4:	b082      	sub	sp, #8
 80010f6:	b590      	push	{r4, r7, lr}
 80010f8:	b089      	sub	sp, #36	; 0x24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
 8001102:	460b      	mov	r3, r1
 8001104:	80bb      	strh	r3, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	b2d8      	uxtb	r0, r3
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	b2d9      	uxtb	r1, r3
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800111a:	4413      	add	r3, r2
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3b01      	subs	r3, #1
 8001120:	b2dc      	uxtb	r4, r3
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800112a:	4413      	add	r3, r2
 800112c:	b2db      	uxtb	r3, r3
 800112e:	3b01      	subs	r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4622      	mov	r2, r4
 8001134:	f7ff ff87 	bl	8001046 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	e043      	b.n	80011c6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800113e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	3b20      	subs	r3, #32
 8001144:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	4619      	mov	r1, r3
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	440b      	add	r3, r1
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	e029      	b.n	80011b4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00e      	beq.n	800118e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001170:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	b29b      	uxth	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	743b      	strb	r3, [r7, #16]
 800117a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800117c:	b2db      	uxtb	r3, r3
 800117e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2102      	movs	r1, #2
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fefa 	bl	8000f80 <ST7735_WriteData>
 800118c:	e00f      	b.n	80011ae <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800118e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	b29b      	uxth	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	733b      	strb	r3, [r7, #12]
 800119a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2102      	movs	r1, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fee9 	bl	8000f80 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011b8:	461a      	mov	r2, r3
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d3cf      	bcc.n	8001160 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	3301      	adds	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011ca:	461a      	mov	r2, r3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d3b5      	bcc.n	800113e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3724      	adds	r7, #36	; 0x24
 80011d8:	46bd      	mov	sp, r7
 80011da:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011de:	b002      	add	sp, #8
 80011e0:	4770      	bx	lr

080011e2 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011e2:	b082      	sub	sp, #8
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af04      	add	r7, sp, #16
 80011ea:	603a      	str	r2, [r7, #0]
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
 80011f2:	460b      	mov	r3, r1
 80011f4:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80011f6:	f7ff fe7d 	bl	8000ef4 <ST7735_Select>

    while(*str) {
 80011fa:	e02d      	b.n	8001258 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	7d3a      	ldrb	r2, [r7, #20]
 8001200:	4413      	add	r3, r2
 8001202:	2b9f      	cmp	r3, #159	; 0x9f
 8001204:	dd13      	ble.n	800122e <ST7735_WriteString+0x4c>
            x = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800120a:	7d7b      	ldrb	r3, [r7, #21]
 800120c:	b29a      	uxth	r2, r3
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	7d7a      	ldrb	r2, [r7, #21]
 8001218:	4413      	add	r3, r2
 800121a:	2b4f      	cmp	r3, #79	; 0x4f
 800121c:	dc21      	bgt.n	8001262 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b20      	cmp	r3, #32
 8001224:	d103      	bne.n	800122e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	603b      	str	r3, [r7, #0]
                continue;
 800122c:	e014      	b.n	8001258 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	88b9      	ldrh	r1, [r7, #4]
 8001234:	88f8      	ldrh	r0, [r7, #6]
 8001236:	8c3b      	ldrh	r3, [r7, #32]
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	8bbb      	ldrh	r3, [r7, #28]
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f7ff ff56 	bl	80010f4 <ST7735_WriteChar>
        x += font.width;
 8001248:	7d3b      	ldrb	r3, [r7, #20]
 800124a:	b29a      	uxth	r2, r3
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	4413      	add	r3, r2
 8001250:	80fb      	strh	r3, [r7, #6]
        str++;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1cd      	bne.n	80011fc <ST7735_WriteString+0x1a>
 8001260:	e000      	b.n	8001264 <ST7735_WriteString+0x82>
                break;
 8001262:	bf00      	nop
    }

    ST7735_Unselect();
 8001264:	f7ff fe52 	bl	8000f0c <ST7735_Unselect>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001272:	b002      	add	sp, #8
 8001274:	4770      	bx	lr
	...

08001278 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	4604      	mov	r4, r0
 8001280:	4608      	mov	r0, r1
 8001282:	4611      	mov	r1, r2
 8001284:	461a      	mov	r2, r3
 8001286:	4623      	mov	r3, r4
 8001288:	80fb      	strh	r3, [r7, #6]
 800128a:	4603      	mov	r3, r0
 800128c:	80bb      	strh	r3, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	2b9f      	cmp	r3, #159	; 0x9f
 800129a:	d857      	bhi.n	800134c <ST7735_FillRectangle+0xd4>
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	2b4f      	cmp	r3, #79	; 0x4f
 80012a0:	d854      	bhi.n	800134c <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80012a2:	88fa      	ldrh	r2, [r7, #6]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	4413      	add	r3, r2
 80012a8:	2ba0      	cmp	r3, #160	; 0xa0
 80012aa:	dd03      	ble.n	80012b4 <ST7735_FillRectangle+0x3c>
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80012b2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80012b4:	88ba      	ldrh	r2, [r7, #4]
 80012b6:	883b      	ldrh	r3, [r7, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	2b50      	cmp	r3, #80	; 0x50
 80012bc:	dd03      	ble.n	80012c6 <ST7735_FillRectangle+0x4e>
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80012c4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80012c6:	f7ff fe15 	bl	8000ef4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	b2d8      	uxtb	r0, r3
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	b2d9      	uxtb	r1, r3
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4413      	add	r3, r2
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	3b01      	subs	r3, #1
 80012e0:	b2dc      	uxtb	r4, r3
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	883b      	ldrh	r3, [r7, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4622      	mov	r2, r4
 80012f4:	f7ff fea7 	bl	8001046 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80012f8:	8c3b      	ldrh	r3, [r7, #32]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	733b      	strb	r3, [r7, #12]
 8001302:	8c3b      	ldrh	r3, [r7, #32]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2104      	movs	r1, #4
 800130c:	4811      	ldr	r0, [pc, #68]	; (8001354 <ST7735_FillRectangle+0xdc>)
 800130e:	f000 feaf 	bl	8002070 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	80bb      	strh	r3, [r7, #4]
 8001316:	e013      	b.n	8001340 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	80fb      	strh	r3, [r7, #6]
 800131c:	e00a      	b.n	8001334 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800131e:	f107 010c 	add.w	r1, r7, #12
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	2202      	movs	r2, #2
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <ST7735_FillRectangle+0xe0>)
 800132a:	f002 f84f 	bl	80033cc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	3b01      	subs	r3, #1
 8001332:	80fb      	strh	r3, [r7, #6]
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f1      	bne.n	800131e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800133a:	88bb      	ldrh	r3, [r7, #4]
 800133c:	3b01      	subs	r3, #1
 800133e:	80bb      	strh	r3, [r7, #4]
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1e8      	bne.n	8001318 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001346:	f7ff fde1 	bl	8000f0c <ST7735_Unselect>
 800134a:	e000      	b.n	800134e <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800134c:	bf00      	nop
}
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	40020000 	.word	0x40020000
 8001358:	20000188 	.word	0x20000188

0800135c <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	4604      	mov	r4, r0
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	4623      	mov	r3, r4
 800136c:	80fb      	strh	r3, [r7, #6]
 800136e:	4603      	mov	r3, r0
 8001370:	80bb      	strh	r3, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	807b      	strh	r3, [r7, #2]
 8001376:	4613      	mov	r3, r2
 8001378:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	2b9f      	cmp	r3, #159	; 0x9f
 800137e:	d869      	bhi.n	8001454 <ST7735_FillRectangleFast+0xf8>
 8001380:	88bb      	ldrh	r3, [r7, #4]
 8001382:	2b4f      	cmp	r3, #79	; 0x4f
 8001384:	d866      	bhi.n	8001454 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001386:	88fa      	ldrh	r2, [r7, #6]
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	4413      	add	r3, r2
 800138c:	2ba0      	cmp	r3, #160	; 0xa0
 800138e:	dd03      	ble.n	8001398 <ST7735_FillRectangleFast+0x3c>
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001396:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001398:	88ba      	ldrh	r2, [r7, #4]
 800139a:	883b      	ldrh	r3, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	2b50      	cmp	r3, #80	; 0x50
 80013a0:	dd03      	ble.n	80013aa <ST7735_FillRectangleFast+0x4e>
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80013a8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80013aa:	f7ff fda3 	bl	8000ef4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	b2d9      	uxtb	r1, r3
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	3b01      	subs	r3, #1
 80013c4:	b2dc      	uxtb	r4, r3
 80013c6:	88bb      	ldrh	r3, [r7, #4]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	883b      	ldrh	r3, [r7, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4622      	mov	r2, r4
 80013d8:	f7ff fe35 	bl	8001046 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80013dc:	8c3b      	ldrh	r3, [r7, #32]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	723b      	strb	r3, [r7, #8]
 80013e6:	8c3b      	ldrh	r3, [r7, #32]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4618      	mov	r0, r3
 80013f2:	f006 f8af 	bl	8007554 <malloc>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80013fa:	2300      	movs	r3, #0
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	e008      	b.n	8001412 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	893a      	ldrh	r2, [r7, #8]
 800140a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	3301      	adds	r3, #1
 8001410:	80fb      	strh	r3, [r7, #6]
 8001412:	88fa      	ldrh	r2, [r7, #6]
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3f2      	bcc.n	8001400 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2104      	movs	r1, #4
 800141e:	480f      	ldr	r0, [pc, #60]	; (800145c <ST7735_FillRectangleFast+0x100>)
 8001420:	f000 fe26 	bl	8002070 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001424:	883b      	ldrh	r3, [r7, #0]
 8001426:	80bb      	strh	r3, [r7, #4]
 8001428:	e00b      	b.n	8001442 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	b29a      	uxth	r2, r3
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	68f9      	ldr	r1, [r7, #12]
 8001436:	480a      	ldr	r0, [pc, #40]	; (8001460 <ST7735_FillRectangleFast+0x104>)
 8001438:	f001 ffc8 	bl	80033cc <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 800143c:	88bb      	ldrh	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	80bb      	strh	r3, [r7, #4]
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f0      	bne.n	800142a <ST7735_FillRectangleFast+0xce>

    free(line);
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f006 f88b 	bl	8007564 <free>
    ST7735_Unselect();
 800144e:	f7ff fd5d 	bl	8000f0c <ST7735_Unselect>
 8001452:	e000      	b.n	8001456 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001454:	bf00      	nop
}
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	40020000 	.word	0x40020000
 8001460:	20000188 	.word	0x20000188

08001464 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af02      	add	r7, sp, #8
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2350      	movs	r3, #80	; 0x50
 8001474:	22a0      	movs	r2, #160	; 0xa0
 8001476:	2100      	movs	r1, #0
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff fefd 	bl	8001278 <ST7735_FillRectangle>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af02      	add	r7, sp, #8
 800148c:	4603      	mov	r3, r0
 800148e:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2350      	movs	r3, #80	; 0x50
 8001496:	22a0      	movs	r2, #160	; 0xa0
 8001498:	2100      	movs	r1, #0
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff ff5e 	bl	800135c <ST7735_FillRectangleFast>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_MspInit+0x74>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_MspInit+0x74>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_MspInit+0x74>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_MspInit+0x74>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <HAL_MspInit+0x74>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_MspInit+0x74>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	210f      	movs	r1, #15
 80014ea:	f06f 0001 	mvn.w	r0, #1
 80014ee:	f000 fbf5 	bl	8001cdc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2105      	movs	r1, #5
 80014f6:	2005      	movs	r0, #5
 80014f8:	f000 fbf0 	bl	8001cdc <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014fc:	2005      	movs	r0, #5
 80014fe:	f000 fc09 	bl	8001d14 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2105      	movs	r1, #5
 8001506:	2005      	movs	r0, #5
 8001508:	f000 fbe8 	bl	8001cdc <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800150c:	2005      	movs	r0, #5
 800150e:	f000 fc01 	bl	8001d14 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	2019      	movs	r0, #25
 8001536:	f000 fbd1 	bl	8001cdc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800153a:	2019      	movs	r0, #25
 800153c:	f000 fbea 	bl	8001d14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_InitTick+0xa0>)
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_InitTick+0xa0>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6453      	str	r3, [r2, #68]	; 0x44
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_InitTick+0xa0>)
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800155c:	f107 0210 	add.w	r2, r7, #16
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fb50 	bl	8002c0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800156c:	f001 fb3a 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 8001570:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <HAL_InitTick+0xa4>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9b      	lsrs	r3, r3, #18
 800157c:	3b01      	subs	r3, #1
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_InitTick+0xa8>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <HAL_InitTick+0xac>)
 8001584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_InitTick+0xa8>)
 8001588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800158c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_InitTick+0xa8>)
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_InitTick+0xa8>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_InitTick+0xa8>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <HAL_InitTick+0xa8>)
 80015a2:	f002 f919 	bl	80037d8 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d104      	bne.n	80015b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80015ac:	4806      	ldr	r0, [pc, #24]	; (80015c8 <HAL_InitTick+0xa8>)
 80015ae:	f002 f96d 	bl	800388c <HAL_TIM_Base_Start_IT>
 80015b2:	4603      	mov	r3, r0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3730      	adds	r7, #48	; 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	431bde83 	.word	0x431bde83
 80015c8:	200001e0 	.word	0x200001e0
 80015cc:	40010000 	.word	0x40010000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800160e:	2001      	movs	r0, #1
 8001610:	f000 fd48 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800161e:	f002 fb1a 	bl	8003c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200001e0 	.word	0x200001e0

0800162c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <TIM2_IRQHandler+0x10>)
 8001632:	f002 fb10 	bl	8003c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000238 	.word	0x20000238

08001640 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <TIM3_IRQHandler+0x28>)
 8001646:	f002 fb06 	bl	8003c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <TIM3_IRQHandler+0x2c>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <TIM3_IRQHandler+0x2c>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <TIM3_IRQHandler+0x2c>)
 800165c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001660:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000280 	.word	0x20000280
 800166c:	40000400 	.word	0x40000400

08001670 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 800167a:	23ff      	movs	r3, #255	; 0xff
 800167c:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db11      	blt.n	80016b4 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8001690:	f000 fa3c 	bl	8001b0c <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b63      	cmp	r3, #99	; 0x63
 80016a0:	d90a      	bls.n	80016b8 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x50>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 80016a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ac:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x54>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	54d1      	strb	r1, [r2, r3]
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 80016b4:	bf00      	nop
 80016b6:	e000      	b.n	80016ba <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 80016b8:	bf00      	nop
}
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000230 	.word	0x20000230
 80016c4:	20000228 	.word	0x20000228

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f005 ff00 	bl	80074fc <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20020000 	.word	0x20020000
 8001728:	00000400 	.word	0x00000400
 800172c:	20000234 	.word	0x20000234
 8001730:	20004cf0 	.word	0x20004cf0

08001734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	615a      	str	r2, [r3, #20]
 8001778:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <MX_TIM2_Init+0xac>)
 800177c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001780:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <MX_TIM2_Init+0xac>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <MX_TIM2_Init+0xac>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <MX_TIM2_Init+0xac>)
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_TIM2_Init+0xac>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <MX_TIM2_Init+0xac>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017a2:	4818      	ldr	r0, [pc, #96]	; (8001804 <MX_TIM2_Init+0xac>)
 80017a4:	f002 f8d4 	bl	8003950 <HAL_TIM_PWM_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017ae:	f7ff fa97 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	4619      	mov	r1, r3
 80017c0:	4810      	ldr	r0, [pc, #64]	; (8001804 <MX_TIM2_Init+0xac>)
 80017c2:	f002 fe6d 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017cc:	f7ff fa88 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d0:	2360      	movs	r3, #96	; 0x60
 80017d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2204      	movs	r2, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	; (8001804 <MX_TIM2_Init+0xac>)
 80017e8:	f002 fb3e 	bl	8003e68 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80017f2:	f7ff fa75 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017f6:	4803      	ldr	r0, [pc, #12]	; (8001804 <MX_TIM2_Init+0xac>)
 80017f8:	f000 f8f0 	bl	80019dc <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000238 	.word	0x20000238

08001808 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2224      	movs	r2, #36	; 0x24
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f005 feba 	bl	8007590 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <MX_TIM3_Init+0xa0>)
 8001826:	4a21      	ldr	r2, [pc, #132]	; (80018ac <MX_TIM3_Init+0xa4>)
 8001828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_TIM3_Init+0xa0>)
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <MX_TIM3_Init+0xa0>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <MX_TIM3_Init+0xa0>)
 8001838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_TIM3_Init+0xa0>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <MX_TIM3_Init+0xa0>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800184a:	2301      	movs	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001852:	2301      	movs	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 800185a:	2306      	movs	r3, #6
 800185c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001862:	2301      	movs	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 800186a:	2306      	movs	r3, #6
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <MX_TIM3_Init+0xa0>)
 8001876:	f002 f8ba 	bl	80039ee <HAL_TIM_Encoder_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001880:	f7ff fa2e 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_TIM3_Init+0xa0>)
 8001892:	f002 fe05 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800189c:	f7ff fa20 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	3730      	adds	r7, #48	; 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000280 	.word	0x20000280
 80018ac:	40000400 	.word	0x40000400

080018b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c0:	d115      	bne.n	80018ee <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_TIM_PWM_MspInit+0x48>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_TIM_PWM_MspInit+0x48>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_TIM_PWM_MspInit+0x48>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2105      	movs	r1, #5
 80018e2:	201c      	movs	r0, #28
 80018e4:	f000 f9fa 	bl	8001cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018e8:	201c      	movs	r0, #28
 80018ea:	f000 fa13 	bl	8001d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2c      	ldr	r2, [pc, #176]	; (80019cc <HAL_TIM_Encoder_MspInit+0xd0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d151      	bne.n	80019c2 <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a2a      	ldr	r2, [pc, #168]	; (80019d0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_TIM_Encoder_MspInit+0xd4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_TIM_Encoder_MspInit+0xd4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001972:	2340      	movs	r3, #64	; 0x40
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197a:	2301      	movs	r3, #1
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001982:	2302      	movs	r3, #2
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	4811      	ldr	r0, [pc, #68]	; (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800198e:	f000 f9eb 	bl	8001d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001992:	2320      	movs	r3, #32
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199a:	2301      	movs	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019a2:	2302      	movs	r3, #2
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	480a      	ldr	r0, [pc, #40]	; (80019d8 <HAL_TIM_Encoder_MspInit+0xdc>)
 80019ae:	f000 f9db 	bl	8001d68 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2105      	movs	r1, #5
 80019b6:	201d      	movs	r0, #29
 80019b8:	f000 f990 	bl	8001cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019bc:	201d      	movs	r0, #29
 80019be:	f000 f9a9 	bl	8001d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020400 	.word	0x40020400

080019dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fc:	d11d      	bne.n	8001a3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_TIM_MspPostInit+0x68>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <HAL_TIM_MspPostInit+0x68>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_TIM_MspPostInit+0x68>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	4619      	mov	r1, r3
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <HAL_TIM_MspPostInit+0x6c>)
 8001a36:	f000 f997 	bl	8001d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000

08001a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a50:	480d      	ldr	r0, [pc, #52]	; (8001a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a52:	490e      	ldr	r1, [pc, #56]	; (8001a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a68:	4c0b      	ldr	r4, [pc, #44]	; (8001a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a76:	f7ff fe5d 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f005 fd45 	bl	8007508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7e:	f7ff f88f 	bl	8000ba0 <main>
  bx  lr    
 8001a82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001a90:	0800aa4c 	.word	0x0800aa4c
  ldr r2, =_sbss
 8001a94:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001a98:	20004cec 	.word	0x20004cec

08001a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <HAL_Init+0x40>)
 8001aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_Init+0x40>)
 8001ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x40>)
 8001ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 f8fc 	bl	8001cc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	200f      	movs	r0, #15
 8001ad0:	f7ff fd26 	bl	8001520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff fce8 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_IncTick+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_IncTick+0x24>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000070 	.word	0x20000070
 8001b08:	200002c8 	.word	0x200002c8

08001b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200002c8 	.word	0x200002c8

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff ffee 	bl	8001b0c <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffde 	bl	8001b0c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000070 	.word	0x20000070

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0b      	blt.n	8001bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <__NVIC_EnableIRQ+0x38>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	; (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff4c 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cee:	f7ff ff61 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001cf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	6978      	ldr	r0, [r7, #20]
 8001cfa:	f7ff ffb1 	bl	8001c60 <NVIC_EncodePriority>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff80 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d0c:	bf00      	nop
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff54 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00e      	b.n	8001d60 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	795b      	ldrb	r3, [r3, #5]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7fe fca0 	bl	8000698 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e159      	b.n	8002038 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f040 8148 	bne.w	8002032 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d005      	beq.n	8001dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d130      	bne.n	8001e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 0201 	and.w	r2, r3, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d017      	beq.n	8001e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d123      	bne.n	8001eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	69b9      	ldr	r1, [r7, #24]
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80a2 	beq.w	8002032 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_GPIO_Init+0x2e8>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a56      	ldr	r2, [pc, #344]	; (8002050 <HAL_GPIO_Init+0x2e8>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b54      	ldr	r3, [pc, #336]	; (8002050 <HAL_GPIO_Init+0x2e8>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f0a:	4a52      	ldr	r2, [pc, #328]	; (8002054 <HAL_GPIO_Init+0x2ec>)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a49      	ldr	r2, [pc, #292]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d019      	beq.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a48      	ldr	r2, [pc, #288]	; (800205c <HAL_GPIO_Init+0x2f4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x1fe>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a47      	ldr	r2, [pc, #284]	; (8002060 <HAL_GPIO_Init+0x2f8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x1fa>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a46      	ldr	r2, [pc, #280]	; (8002064 <HAL_GPIO_Init+0x2fc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x1f6>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a45      	ldr	r2, [pc, #276]	; (8002068 <HAL_GPIO_Init+0x300>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x1f2>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e008      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	f002 0203 	and.w	r2, r2, #3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4093      	lsls	r3, r2
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f7c:	4935      	ldr	r1, [pc, #212]	; (8002054 <HAL_GPIO_Init+0x2ec>)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <HAL_GPIO_Init+0x304>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fae:	4a2f      	ldr	r2, [pc, #188]	; (800206c <HAL_GPIO_Init+0x304>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_GPIO_Init+0x304>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd8:	4a24      	ldr	r2, [pc, #144]	; (800206c <HAL_GPIO_Init+0x304>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_GPIO_Init+0x304>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002002:	4a1a      	ldr	r2, [pc, #104]	; (800206c <HAL_GPIO_Init+0x304>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_GPIO_Init+0x304>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800202c:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HAL_GPIO_Init+0x304>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3301      	adds	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b0f      	cmp	r3, #15
 800203c:	f67f aea2 	bls.w	8001d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	40013800 	.word	0x40013800
 8002058:	40020000 	.word	0x40020000
 800205c:	40020400 	.word	0x40020400
 8002060:	40020800 	.word	0x40020800
 8002064:	40020c00 	.word	0x40020c00
 8002068:	40021000 	.word	0x40021000
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fad4 	bl	8001670 <HAL_GPIO_EXTI_Callback>
  }
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e12b      	b.n	800233e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fcd4 	bl	8000aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2224      	movs	r2, #36	; 0x24
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002138:	f000 fd40 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 800213c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4a81      	ldr	r2, [pc, #516]	; (8002348 <HAL_I2C_Init+0x274>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d807      	bhi.n	8002158 <HAL_I2C_Init+0x84>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4a80      	ldr	r2, [pc, #512]	; (800234c <HAL_I2C_Init+0x278>)
 800214c:	4293      	cmp	r3, r2
 800214e:	bf94      	ite	ls
 8002150:	2301      	movls	r3, #1
 8002152:	2300      	movhi	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e006      	b.n	8002166 <HAL_I2C_Init+0x92>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a7d      	ldr	r2, [pc, #500]	; (8002350 <HAL_I2C_Init+0x27c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	bf94      	ite	ls
 8002160:	2301      	movls	r3, #1
 8002162:	2300      	movhi	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0e7      	b.n	800233e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4a78      	ldr	r2, [pc, #480]	; (8002354 <HAL_I2C_Init+0x280>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0c9b      	lsrs	r3, r3, #18
 8002178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a6a      	ldr	r2, [pc, #424]	; (8002348 <HAL_I2C_Init+0x274>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d802      	bhi.n	80021a8 <HAL_I2C_Init+0xd4>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	e009      	b.n	80021bc <HAL_I2C_Init+0xe8>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	4a69      	ldr	r2, [pc, #420]	; (8002358 <HAL_I2C_Init+0x284>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	3301      	adds	r3, #1
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	495c      	ldr	r1, [pc, #368]	; (8002348 <HAL_I2C_Init+0x274>)
 80021d8:	428b      	cmp	r3, r1
 80021da:	d819      	bhi.n	8002210 <HAL_I2C_Init+0x13c>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1e59      	subs	r1, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ea:	1c59      	adds	r1, r3, #1
 80021ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021f0:	400b      	ands	r3, r1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_I2C_Init+0x138>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1e59      	subs	r1, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fbb1 f3f3 	udiv	r3, r1, r3
 8002204:	3301      	adds	r3, #1
 8002206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220a:	e051      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 800220c:	2304      	movs	r3, #4
 800220e:	e04f      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d111      	bne.n	800223c <HAL_I2C_Init+0x168>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	440b      	add	r3, r1
 8002226:	fbb0 f3f3 	udiv	r3, r0, r3
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e012      	b.n	8002262 <HAL_I2C_Init+0x18e>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e58      	subs	r0, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	0099      	lsls	r1, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Init+0x196>
 8002266:	2301      	movs	r3, #1
 8002268:	e022      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10e      	bne.n	8002290 <HAL_I2C_Init+0x1bc>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e58      	subs	r0, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	440b      	add	r3, r1
 8002280:	fbb0 f3f3 	udiv	r3, r0, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228e:	e00f      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	0099      	lsls	r1, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	6809      	ldr	r1, [r1, #0]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6911      	ldr	r1, [r2, #16]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68d2      	ldr	r2, [r2, #12]
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	000186a0 	.word	0x000186a0
 800234c:	001e847f 	.word	0x001e847f
 8002350:	003d08ff 	.word	0x003d08ff
 8002354:	431bde83 	.word	0x431bde83
 8002358:	10624dd3 	.word	0x10624dd3

0800235c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e267      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d075      	beq.n	8002466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800237a:	4b88      	ldr	r3, [pc, #544]	; (800259c <HAL_RCC_OscConfig+0x240>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b04      	cmp	r3, #4
 8002384:	d00c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002386:	4b85      	ldr	r3, [pc, #532]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238e:	2b08      	cmp	r3, #8
 8002390:	d112      	bne.n	80023b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002392:	4b82      	ldr	r3, [pc, #520]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800239e:	d10b      	bne.n	80023b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	4b7e      	ldr	r3, [pc, #504]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d05b      	beq.n	8002464 <HAL_RCC_OscConfig+0x108>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d157      	bne.n	8002464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e242      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c0:	d106      	bne.n	80023d0 <HAL_RCC_OscConfig+0x74>
 80023c2:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a75      	ldr	r2, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e01d      	b.n	800240c <HAL_RCC_OscConfig+0xb0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x98>
 80023da:	4b70      	ldr	r3, [pc, #448]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6f      	ldr	r2, [pc, #444]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b6d      	ldr	r3, [pc, #436]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6c      	ldr	r2, [pc, #432]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0xb0>
 80023f4:	4b69      	ldr	r3, [pc, #420]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a68      	ldr	r2, [pc, #416]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b66      	ldr	r3, [pc, #408]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a65      	ldr	r2, [pc, #404]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff fb7a 	bl	8001b0c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241c:	f7ff fb76 	bl	8001b0c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e207      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b5b      	ldr	r3, [pc, #364]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0xc0>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fb66 	bl	8001b0c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002444:	f7ff fb62 	bl	8001b0c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1f3      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	4b51      	ldr	r3, [pc, #324]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0xe8>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d063      	beq.n	800253a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002472:	4b4a      	ldr	r3, [pc, #296]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002486:	2b08      	cmp	r3, #8
 8002488:	d11c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248a:	4b44      	ldr	r3, [pc, #272]	; (800259c <HAL_RCC_OscConfig+0x240>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d116      	bne.n	80024c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_RCC_OscConfig+0x152>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e1c7      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ae:	4b3b      	ldr	r3, [pc, #236]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4937      	ldr	r1, [pc, #220]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	e03a      	b.n	800253a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024cc:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <HAL_RCC_OscConfig+0x244>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7ff fb1b 	bl	8001b0c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024da:	f7ff fb17 	bl	8001b0c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1a8      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f8:	4b28      	ldr	r3, [pc, #160]	; (800259c <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4925      	ldr	r1, [pc, #148]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
 800250c:	e015      	b.n	800253a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_RCC_OscConfig+0x244>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7ff fafa 	bl	8001b0c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251c:	f7ff faf6 	bl	8001b0c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e187      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d036      	beq.n	80025b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_RCC_OscConfig+0x248>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7ff fada 	bl	8001b0c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255c:	f7ff fad6 	bl	8001b0c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e167      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_OscConfig+0x240>)
 8002570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x200>
 800257a:	e01b      	b.n	80025b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_OscConfig+0x248>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7ff fac3 	bl	8001b0c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	e00e      	b.n	80025a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258a:	f7ff fabf 	bl	8001b0c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d907      	bls.n	80025a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e150      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
 800259c:	40023800 	.word	0x40023800
 80025a0:	42470000 	.word	0x42470000
 80025a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80025aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ea      	bne.n	800258a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8097 	beq.w	80026f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c6:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	4b7d      	ldr	r3, [pc, #500]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4a7c      	ldr	r2, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80025dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
 80025e2:	4b7a      	ldr	r3, [pc, #488]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ee:	2301      	movs	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b77      	ldr	r3, [pc, #476]	; (80027d0 <HAL_RCC_OscConfig+0x474>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d118      	bne.n	8002630 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b74      	ldr	r3, [pc, #464]	; (80027d0 <HAL_RCC_OscConfig+0x474>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a73      	ldr	r2, [pc, #460]	; (80027d0 <HAL_RCC_OscConfig+0x474>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260a:	f7ff fa7f 	bl	8001b0c <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7ff fa7b 	bl	8001b0c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e10c      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b6a      	ldr	r3, [pc, #424]	; (80027d0 <HAL_RCC_OscConfig+0x474>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x2ea>
 8002638:	4b64      	ldr	r3, [pc, #400]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	4a63      	ldr	r2, [pc, #396]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6713      	str	r3, [r2, #112]	; 0x70
 8002644:	e01c      	b.n	8002680 <HAL_RCC_OscConfig+0x324>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x30c>
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	4a5e      	ldr	r2, [pc, #376]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6713      	str	r3, [r2, #112]	; 0x70
 800265a:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	4a5b      	ldr	r2, [pc, #364]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6713      	str	r3, [r2, #112]	; 0x70
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0x324>
 8002668:	4b58      	ldr	r3, [pc, #352]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	4a57      	ldr	r2, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	; 0x70
 8002674:	4b55      	ldr	r3, [pc, #340]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	4a54      	ldr	r2, [pc, #336]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 0304 	bic.w	r3, r3, #4
 800267e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d015      	beq.n	80026b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7ff fa40 	bl	8001b0c <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7ff fa3c 	bl	8001b0c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0cb      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a6:	4b49      	ldr	r3, [pc, #292]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0ee      	beq.n	8002690 <HAL_RCC_OscConfig+0x334>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7ff fa2a 	bl	8001b0c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7ff fa26 	bl	8001b0c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0b5      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d2:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ee      	bne.n	80026bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	4a38      	ldr	r2, [pc, #224]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a1 	beq.w	800283c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026fa:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b08      	cmp	r3, #8
 8002704:	d05c      	beq.n	80027c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d141      	bne.n	8002792 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_RCC_OscConfig+0x478>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff f9fa 	bl	8001b0c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271c:	f7ff f9f6 	bl	8001b0c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e087      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	019b      	lsls	r3, r3, #6
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	3b01      	subs	r3, #1
 8002754:	041b      	lsls	r3, r3, #16
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	491b      	ldr	r1, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x478>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7ff f9cf 	bl	8001b0c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002772:	f7ff f9cb 	bl	8001b0c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e05c      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x416>
 8002790:	e054      	b.n	800283c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_RCC_OscConfig+0x478>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff f9b8 	bl	8001b0c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff f9b4 	bl	8001b0c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e045      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_OscConfig+0x470>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x444>
 80027be:	e03d      	b.n	800283c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e038      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x4ec>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d028      	beq.n	8002838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d121      	bne.n	8002838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d11a      	bne.n	8002838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002808:	4013      	ands	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800280e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002810:	4293      	cmp	r3, r2
 8002812:	d111      	bne.n	8002838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	085b      	lsrs	r3, r3, #1
 8002820:	3b01      	subs	r3, #1
 8002822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d107      	bne.n	8002838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800

0800284c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0cc      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d90c      	bls.n	8002888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b65      	ldr	r3, [pc, #404]	; (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b63      	ldr	r3, [pc, #396]	; (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0b8      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a0:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b8:	4b53      	ldr	r3, [pc, #332]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a52      	ldr	r2, [pc, #328]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	494d      	ldr	r1, [pc, #308]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d044      	beq.n	800296c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d119      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d003      	beq.n	800290a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002906:	2b03      	cmp	r3, #3
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e06f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291a:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e067      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292a:	4b37      	ldr	r3, [pc, #220]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f023 0203 	bic.w	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4934      	ldr	r1, [pc, #208]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800293c:	f7ff f8e6 	bl	8001b0c <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	e00a      	b.n	800295a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002944:	f7ff f8e2 	bl	8001b0c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e04f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 020c 	and.w	r2, r3, #12
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	429a      	cmp	r2, r3
 800296a:	d1eb      	bne.n	8002944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d20c      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e032      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4916      	ldr	r1, [pc, #88]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	490e      	ldr	r1, [pc, #56]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029d2:	f000 f821 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	490a      	ldr	r1, [pc, #40]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x1c8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fd94 	bl	8001520 <HAL_InitTick>

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023c00 	.word	0x40023c00
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	0800a990 	.word	0x0800a990
 8002a10:	20000068 	.word	0x20000068
 8002a14:	2000006c 	.word	0x2000006c

08002a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a1c:	b090      	sub	sp, #64	; 0x40
 8002a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
 8002a24:	2300      	movs	r3, #0
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a28:	2300      	movs	r3, #0
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a30:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d00d      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x40>
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	f200 80a1 	bhi.w	8002b84 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x34>
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a4a:	e09b      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a50:	e09b      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a52:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a56:	e098      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a58:	4b4f      	ldr	r3, [pc, #316]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a62:	4b4d      	ldr	r3, [pc, #308]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d028      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	2200      	movs	r2, #0
 8002a76:	623b      	str	r3, [r7, #32]
 8002a78:	627a      	str	r2, [r7, #36]	; 0x24
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a80:	2100      	movs	r1, #0
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a84:	fb03 f201 	mul.w	r2, r3, r1
 8002a88:	2300      	movs	r3, #0
 8002a8a:	fb00 f303 	mul.w	r3, r0, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	4a43      	ldr	r2, [pc, #268]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a92:	fba0 1202 	umull	r1, r2, r0, r2
 8002a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a98:	460a      	mov	r2, r1
 8002a9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a9e:	4413      	add	r3, r2
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	61fa      	str	r2, [r7, #28]
 8002aaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ab2:	f7fd fbe5 	bl	8000280 <__aeabi_uldivmod>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4613      	mov	r3, r2
 8002abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002abe:	e053      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac0:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	617a      	str	r2, [r7, #20]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ad2:	f04f 0b00 	mov.w	fp, #0
 8002ad6:	4652      	mov	r2, sl
 8002ad8:	465b      	mov	r3, fp
 8002ada:	f04f 0000 	mov.w	r0, #0
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	0159      	lsls	r1, r3, #5
 8002ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae8:	0150      	lsls	r0, r2, #5
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	ebb2 080a 	subs.w	r8, r2, sl
 8002af2:	eb63 090b 	sbc.w	r9, r3, fp
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b0a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b0e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	00eb      	lsls	r3, r5, #3
 8002b1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b20:	00e2      	lsls	r2, r4, #3
 8002b22:	4614      	mov	r4, r2
 8002b24:	461d      	mov	r5, r3
 8002b26:	eb14 030a 	adds.w	r3, r4, sl
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	eb45 030b 	adc.w	r3, r5, fp
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b3e:	4629      	mov	r1, r5
 8002b40:	028b      	lsls	r3, r1, #10
 8002b42:	4621      	mov	r1, r4
 8002b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b48:	4621      	mov	r1, r4
 8002b4a:	028a      	lsls	r2, r1, #10
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b52:	2200      	movs	r2, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	60fa      	str	r2, [r7, #12]
 8002b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b5c:	f7fd fb90 	bl	8000280 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4613      	mov	r3, r2
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b82:	e002      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3740      	adds	r7, #64	; 0x40
 8002b90:	46bd      	mov	sp, r7
 8002b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	00f42400 	.word	0x00f42400
 8002ba0:	017d7840 	.word	0x017d7840

08002ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000068 	.word	0x20000068

08002bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc0:	f7ff fff0 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0a9b      	lsrs	r3, r3, #10
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	0800a9a0 	.word	0x0800a9a0

08002be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002be8:	f7ff ffdc 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	0b5b      	lsrs	r3, r3, #13
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4903      	ldr	r1, [pc, #12]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40023800 	.word	0x40023800
 8002c08:	0800a9a0 	.word	0x0800a9a0

08002c0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	220f      	movs	r2, #15
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_RCC_GetClockConfig+0x5c>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0203 	and.w	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <HAL_RCC_GetClockConfig+0x5c>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RCC_GetClockConfig+0x5c>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_GetClockConfig+0x5c>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	08db      	lsrs	r3, r3, #3
 8002c46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_RCC_GetClockConfig+0x60>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0207 	and.w	r2, r3, #7
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	601a      	str	r2, [r3, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40023c00 	.word	0x40023c00

08002c70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d038      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c9e:	f7fe ff35 	bl	8001b0c <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ca6:	f7fe ff31 	bl	8001b0c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0bd      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cb8:	4b61      	ldr	r3, [pc, #388]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f0      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	071b      	lsls	r3, r3, #28
 8002cd6:	495a      	ldr	r1, [pc, #360]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cde:	4b57      	ldr	r3, [pc, #348]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce4:	f7fe ff12 	bl	8001b0c <HAL_GetTick>
 8002ce8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cec:	f7fe ff0e 	bl	8001b0c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e09a      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cfe:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8083 	beq.w	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	4a47      	ldr	r2, [pc, #284]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d26:	6413      	str	r3, [r2, #64]	; 0x40
 8002d28:	4b45      	ldr	r3, [pc, #276]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d34:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a42      	ldr	r2, [pc, #264]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d40:	f7fe fee4 	bl	8001b0c <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d48:	f7fe fee0 	bl	8001b0c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e06c      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d5a:	4b3a      	ldr	r3, [pc, #232]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d02f      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d028      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d9a:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002da0:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d114      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe feae 	bl	8001b0c <HAL_GetTick>
 8002db0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	e00a      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe feaa 	bl	8001b0c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e034      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ee      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de2:	d10d      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df8:	4911      	ldr	r1, [pc, #68]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
 8002dfe:	e005      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e0a:	6093      	str	r3, [r2, #8]
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e18:	4909      	ldr	r1, [pc, #36]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7d1a      	ldrb	r2, [r3, #20]
 8002e2e:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002e30:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	42470068 	.word	0x42470068
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42470e40 	.word	0x42470e40
 8002e4c:	424711e0 	.word	0x424711e0

08002e50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e066      	b.n	8002f34 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7f5b      	ldrb	r3, [r3, #29]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd ff92 	bl	8000da0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	22ca      	movs	r2, #202	; 0xca
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2253      	movs	r2, #83	; 0x53
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f998 	bl	80031c8 <RTC_EnterInitMode>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d12c      	bne.n	8002efc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6899      	ldr	r1, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68d2      	ldr	r2, [r2, #12]
 8002edc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6919      	ldr	r1, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	041a      	lsls	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f99f 	bl	8003236 <RTC_ExitInitMode>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d113      	bne.n	8002f2a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699a      	ldr	r2, [r3, #24]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	22ff      	movs	r2, #255	; 0xff
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	7f1b      	ldrb	r3, [r3, #28]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_RTC_SetTime+0x1c>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e087      	b.n	8003068 <HAL_RTC_SetTime+0x12c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2202      	movs	r2, #2
 8002f62:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d126      	bne.n	8002fb8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f97c 	bl	8003280 <RTC_ByteToBcd2>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 f975 	bl	8003280 <RTC_ByteToBcd2>
 8002f96:	4603      	mov	r3, r0
 8002f98:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f9a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	789b      	ldrb	r3, [r3, #2]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f96d 	bl	8003280 <RTC_ByteToBcd2>
 8002fa6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fa8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	78db      	ldrb	r3, [r3, #3]
 8002fb0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e018      	b.n	8002fea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	785b      	ldrb	r3, [r3, #1]
 8002fd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fd8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fde:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	78db      	ldrb	r3, [r3, #3]
 8002fe4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	22ca      	movs	r2, #202	; 0xca
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2253      	movs	r2, #83	; 0x53
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f8e4 	bl	80031c8 <RTC_EnterInitMode>
 8003000:	4603      	mov	r3, r0
 8003002:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d120      	bne.n	800304c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003014:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003018:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003028:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6899      	ldr	r1, [r3, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	431a      	orrs	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f8f7 	bl	8003236 <RTC_ExitInitMode>
 8003048:	4603      	mov	r3, r0
 800304a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	22ff      	movs	r2, #255	; 0xff
 800305e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	771a      	strb	r2, [r3, #28]

  return status;
 8003066:	7cfb      	ldrb	r3, [r7, #19]
}
 8003068:	4618      	mov	r0, r3
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	bd90      	pop	{r4, r7, pc}

08003070 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	7f1b      	ldrb	r3, [r3, #28]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_RTC_SetDate+0x1c>
 8003088:	2302      	movs	r3, #2
 800308a:	e071      	b.n	8003170 <HAL_RTC_SetDate+0x100>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2202      	movs	r2, #2
 8003096:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10e      	bne.n	80030bc <HAL_RTC_SetDate+0x4c>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	f023 0310 	bic.w	r3, r3, #16
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	330a      	adds	r3, #10
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d11c      	bne.n	80030fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	78db      	ldrb	r3, [r3, #3]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f8da 	bl	8003280 <RTC_ByteToBcd2>
 80030cc:	4603      	mov	r3, r0
 80030ce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	785b      	ldrb	r3, [r3, #1]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f8d3 	bl	8003280 <RTC_ByteToBcd2>
 80030da:	4603      	mov	r3, r0
 80030dc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030de:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	789b      	ldrb	r3, [r3, #2]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f8cb 	bl	8003280 <RTC_ByteToBcd2>
 80030ea:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030ec:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e00e      	b.n	800311a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	78db      	ldrb	r3, [r3, #3]
 8003100:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	785b      	ldrb	r3, [r3, #1]
 8003106:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003108:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800310e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	22ca      	movs	r2, #202	; 0xca
 8003120:	625a      	str	r2, [r3, #36]	; 0x24
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2253      	movs	r2, #83	; 0x53
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f84c 	bl	80031c8 <RTC_EnterInitMode>
 8003130:	4603      	mov	r3, r0
 8003132:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10c      	bne.n	8003154 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003144:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003148:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f873 	bl	8003236 <RTC_ExitInitMode>
 8003150:	4603      	mov	r3, r0
 8003152:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	22ff      	movs	r2, #255	; 0xff
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	771a      	strb	r2, [r3, #28]

  return status;
 800316e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003170:	4618      	mov	r0, r3
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	bd90      	pop	{r4, r7, pc}

08003178 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003192:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003194:	f7fe fcba 	bl	8001b0c <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800319a:	e009      	b.n	80031b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800319c:	f7fe fcb6 	bl	8001b0c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031aa:	d901      	bls.n	80031b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e007      	b.n	80031c0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0ee      	beq.n	800319c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d122      	bne.n	800322c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031f6:	f7fe fc89 	bl	8001b0c <HAL_GetTick>
 80031fa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031fc:	e00c      	b.n	8003218 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031fe:	f7fe fc85 	bl	8001b0c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800320c:	d904      	bls.n	8003218 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2204      	movs	r2, #4
 8003212:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <RTC_EnterInitMode+0x64>
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d1e8      	bne.n	80031fe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003250:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff89 	bl	8003178 <HAL_RTC_WaitForSynchro>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2204      	movs	r2, #4
 8003270:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800328e:	e005      	b.n	800329c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	3301      	adds	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	3b0a      	subs	r3, #10
 800329a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	2b09      	cmp	r3, #9
 80032a0:	d8f6      	bhi.n	8003290 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	b2db      	uxtb	r3, r3
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e07b      	b.n	80033c4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d108      	bne.n	80032e6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032dc:	d009      	beq.n	80032f2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	61da      	str	r2, [r3, #28]
 80032e4:	e005      	b.n	80032f2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d106      	bne.n	8003312 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7fd fda9 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003328:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	ea42 0103 	orr.w	r1, r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	0c1b      	lsrs	r3, r3, #16
 8003390:	f003 0104 	and.w	r1, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0210 	and.w	r2, r3, #16
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_SPI_Transmit+0x22>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e126      	b.n	800363c <HAL_SPI_Transmit+0x270>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033f6:	f7fe fb89 	bl	8001b0c <HAL_GetTick>
 80033fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d002      	beq.n	8003412 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800340c:	2302      	movs	r3, #2
 800340e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003410:	e10b      	b.n	800362a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_SPI_Transmit+0x52>
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003422:	e102      	b.n	800362a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2203      	movs	r2, #3
 8003428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346a:	d10f      	bne.n	800348c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800348a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d007      	beq.n	80034aa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b2:	d14b      	bne.n	800354c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_SPI_Transmit+0xf6>
 80034bc:	8afb      	ldrh	r3, [r7, #22]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d13e      	bne.n	8003540 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	1c9a      	adds	r2, r3, #2
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034e6:	e02b      	b.n	8003540 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d112      	bne.n	800351c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	881a      	ldrh	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	1c9a      	adds	r2, r3, #2
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	86da      	strh	r2, [r3, #54]	; 0x36
 800351a:	e011      	b.n	8003540 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800351c:	f7fe faf6 	bl	8001b0c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d803      	bhi.n	8003534 <HAL_SPI_Transmit+0x168>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	d102      	bne.n	800353a <HAL_SPI_Transmit+0x16e>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800353e:	e074      	b.n	800362a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ce      	bne.n	80034e8 <HAL_SPI_Transmit+0x11c>
 800354a:	e04c      	b.n	80035e6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_SPI_Transmit+0x18e>
 8003554:	8afb      	ldrh	r3, [r7, #22]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d140      	bne.n	80035dc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003580:	e02c      	b.n	80035dc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b02      	cmp	r3, #2
 800358e:	d113      	bne.n	80035b8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	7812      	ldrb	r2, [r2, #0]
 800359c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80035b6:	e011      	b.n	80035dc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035b8:	f7fe faa8 	bl	8001b0c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d803      	bhi.n	80035d0 <HAL_SPI_Transmit+0x204>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d102      	bne.n	80035d6 <HAL_SPI_Transmit+0x20a>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035da:	e026      	b.n	800362a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1cd      	bne.n	8003582 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	6839      	ldr	r1, [r7, #0]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f8b2 	bl	8003754 <SPI_EndRxTxTransaction>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e000      	b.n	800362a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003628:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800363a:	7ffb      	ldrb	r3, [r7, #31]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003654:	f7fe fa5a 	bl	8001b0c <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	4413      	add	r3, r2
 8003662:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003664:	f7fe fa52 	bl	8001b0c <HAL_GetTick>
 8003668:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800366a:	4b39      	ldr	r3, [pc, #228]	; (8003750 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	015b      	lsls	r3, r3, #5
 8003670:	0d1b      	lsrs	r3, r3, #20
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	fb02 f303 	mul.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800367a:	e054      	b.n	8003726 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d050      	beq.n	8003726 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003684:	f7fe fa42 	bl	8001b0c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	429a      	cmp	r2, r3
 8003692:	d902      	bls.n	800369a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d13d      	bne.n	8003716 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b2:	d111      	bne.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036bc:	d004      	beq.n	80036c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c6:	d107      	bne.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e0:	d10f      	bne.n	8003702 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003700:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e017      	b.n	8003746 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	3b01      	subs	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	429a      	cmp	r2, r3
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	429a      	cmp	r2, r3
 8003742:	d19b      	bne.n	800367c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000068 	.word	0x20000068

08003754 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003760:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <SPI_EndRxTxTransaction+0x7c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <SPI_EndRxTxTransaction+0x80>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0d5b      	lsrs	r3, r3, #21
 800376c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003770:	fb02 f303 	mul.w	r3, r2, r3
 8003774:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800377e:	d112      	bne.n	80037a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2200      	movs	r2, #0
 8003788:	2180      	movs	r1, #128	; 0x80
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7ff ff5a 	bl	8003644 <SPI_WaitFlagStateUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e00f      	b.n	80037c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b80      	cmp	r3, #128	; 0x80
 80037be:	d0f2      	beq.n	80037a6 <SPI_EndRxTxTransaction+0x52>
 80037c0:	e000      	b.n	80037c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80037c2:	bf00      	nop
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000068 	.word	0x20000068
 80037d4:	165e9f81 	.word	0x165e9f81

080037d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e041      	b.n	800386e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f839 	bl	8003876 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f000 fc10 	bl	800403c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d001      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e044      	b.n	800392e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_TIM_Base_Start_IT+0xb0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d018      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x6c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ce:	d013      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x6c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1a      	ldr	r2, [pc, #104]	; (8003940 <HAL_TIM_Base_Start_IT+0xb4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x6c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a19      	ldr	r2, [pc, #100]	; (8003944 <HAL_TIM_Base_Start_IT+0xb8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d009      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x6c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a17      	ldr	r2, [pc, #92]	; (8003948 <HAL_TIM_Base_Start_IT+0xbc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x6c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a16      	ldr	r2, [pc, #88]	; (800394c <HAL_TIM_Base_Start_IT+0xc0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d111      	bne.n	800391c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b06      	cmp	r3, #6
 8003908:	d010      	beq.n	800392c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391a:	e007      	b.n	800392c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010000 	.word	0x40010000
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40014000 	.word	0x40014000

08003950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e041      	b.n	80039e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd ff9a 	bl	80018b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f000 fb54 	bl	800403c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e097      	b.n	8003b32 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd ff70 	bl	80018fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a32:	f023 0307 	bic.w	r3, r3, #7
 8003a36:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 fafa 	bl	800403c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a70:	f023 0303 	bic.w	r3, r3, #3
 8003a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	4313      	orrs	r3, r2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a8e:	f023 030c 	bic.w	r3, r3, #12
 8003a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	011a      	lsls	r2, r3, #4
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	031b      	lsls	r3, r3, #12
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003acc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003ad4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b4a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b5a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b62:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d110      	bne.n	8003b8c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d102      	bne.n	8003b76 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b70:	7b7b      	ldrb	r3, [r7, #13]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d001      	beq.n	8003b7a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e069      	b.n	8003c4e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b8a:	e031      	b.n	8003bf0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d110      	bne.n	8003bb4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b92:	7bbb      	ldrb	r3, [r7, #14]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d102      	bne.n	8003b9e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b98:	7b3b      	ldrb	r3, [r7, #12]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d001      	beq.n	8003ba2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e055      	b.n	8003c4e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bb2:	e01d      	b.n	8003bf0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d108      	bne.n	8003bcc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bba:	7bbb      	ldrb	r3, [r7, #14]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d105      	bne.n	8003bcc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bc0:	7b7b      	ldrb	r3, [r7, #13]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d102      	bne.n	8003bcc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bc6:	7b3b      	ldrb	r3, [r7, #12]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d001      	beq.n	8003bd0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e03e      	b.n	8003c4e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_Encoder_Start+0xc4>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d008      	beq.n	8003c0e <HAL_TIM_Encoder_Start+0xd4>
 8003bfc:	e00f      	b.n	8003c1e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2201      	movs	r2, #1
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fc24 	bl	8004454 <TIM_CCxChannelCmd>
      break;
 8003c0c:	e016      	b.n	8003c3c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2201      	movs	r2, #1
 8003c14:	2104      	movs	r1, #4
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fc1c 	bl	8004454 <TIM_CCxChannelCmd>
      break;
 8003c1c:	e00e      	b.n	8003c3c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2201      	movs	r2, #1
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fc14 	bl	8004454 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2201      	movs	r2, #1
 8003c32:	2104      	movs	r1, #4
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fc0d 	bl	8004454 <TIM_CCxChannelCmd>
      break;
 8003c3a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d122      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d11b      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f06f 0202 	mvn.w	r2, #2
 8003c82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f9b1 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003c9e:	e005      	b.n	8003cac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f9a3 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f9b4 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d122      	bne.n	8003d06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d11b      	bne.n	8003d06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f06f 0204 	mvn.w	r2, #4
 8003cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f987 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003cf2:	e005      	b.n	8003d00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f979 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f98a 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d122      	bne.n	8003d5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11b      	bne.n	8003d5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f06f 0208 	mvn.w	r2, #8
 8003d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f95d 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003d46:	e005      	b.n	8003d54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f94f 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f960 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d122      	bne.n	8003dae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d11b      	bne.n	8003dae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f06f 0210 	mvn.w	r2, #16
 8003d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2208      	movs	r2, #8
 8003d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f933 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003d9a:	e005      	b.n	8003da8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f925 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f936 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d10e      	bne.n	8003dda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d107      	bne.n	8003dda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f06f 0201 	mvn.w	r2, #1
 8003dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7fc ff71 	bl	8000cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b80      	cmp	r3, #128	; 0x80
 8003de6:	d10e      	bne.n	8003e06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b80      	cmp	r3, #128	; 0x80
 8003df4:	d107      	bne.n	8003e06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fbc5 	bl	8004590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d10e      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d107      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f8fb 	bl	8004028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d10e      	bne.n	8003e5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d107      	bne.n	8003e5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f06f 0220 	mvn.w	r2, #32
 8003e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fb8f 	bl	800457c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0ae      	b.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b0c      	cmp	r3, #12
 8003e92:	f200 809f 	bhi.w	8003fd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ed1 	.word	0x08003ed1
 8003ea0:	08003fd5 	.word	0x08003fd5
 8003ea4:	08003fd5 	.word	0x08003fd5
 8003ea8:	08003fd5 	.word	0x08003fd5
 8003eac:	08003f11 	.word	0x08003f11
 8003eb0:	08003fd5 	.word	0x08003fd5
 8003eb4:	08003fd5 	.word	0x08003fd5
 8003eb8:	08003fd5 	.word	0x08003fd5
 8003ebc:	08003f53 	.word	0x08003f53
 8003ec0:	08003fd5 	.word	0x08003fd5
 8003ec4:	08003fd5 	.word	0x08003fd5
 8003ec8:	08003fd5 	.word	0x08003fd5
 8003ecc:	08003f93 	.word	0x08003f93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f930 	bl	800413c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0208 	orr.w	r2, r2, #8
 8003eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0204 	bic.w	r2, r2, #4
 8003efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6999      	ldr	r1, [r3, #24]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	619a      	str	r2, [r3, #24]
      break;
 8003f0e:	e064      	b.n	8003fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f976 	bl	8004208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6999      	ldr	r1, [r3, #24]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	021a      	lsls	r2, r3, #8
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	619a      	str	r2, [r3, #24]
      break;
 8003f50:	e043      	b.n	8003fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f9c1 	bl	80042e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0208 	orr.w	r2, r2, #8
 8003f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0204 	bic.w	r2, r2, #4
 8003f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69d9      	ldr	r1, [r3, #28]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	61da      	str	r2, [r3, #28]
      break;
 8003f90:	e023      	b.n	8003fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fa0b 	bl	80043b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69d9      	ldr	r1, [r3, #28]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	021a      	lsls	r2, r3, #8
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	61da      	str	r2, [r3, #28]
      break;
 8003fd2:	e002      	b.n	8003fda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a34      	ldr	r2, [pc, #208]	; (8004120 <TIM_Base_SetConfig+0xe4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00f      	beq.n	8004074 <TIM_Base_SetConfig+0x38>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405a:	d00b      	beq.n	8004074 <TIM_Base_SetConfig+0x38>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a31      	ldr	r2, [pc, #196]	; (8004124 <TIM_Base_SetConfig+0xe8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d007      	beq.n	8004074 <TIM_Base_SetConfig+0x38>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a30      	ldr	r2, [pc, #192]	; (8004128 <TIM_Base_SetConfig+0xec>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_Base_SetConfig+0x38>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a2f      	ldr	r2, [pc, #188]	; (800412c <TIM_Base_SetConfig+0xf0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d108      	bne.n	8004086 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a25      	ldr	r2, [pc, #148]	; (8004120 <TIM_Base_SetConfig+0xe4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01b      	beq.n	80040c6 <TIM_Base_SetConfig+0x8a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004094:	d017      	beq.n	80040c6 <TIM_Base_SetConfig+0x8a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a22      	ldr	r2, [pc, #136]	; (8004124 <TIM_Base_SetConfig+0xe8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <TIM_Base_SetConfig+0x8a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a21      	ldr	r2, [pc, #132]	; (8004128 <TIM_Base_SetConfig+0xec>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00f      	beq.n	80040c6 <TIM_Base_SetConfig+0x8a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a20      	ldr	r2, [pc, #128]	; (800412c <TIM_Base_SetConfig+0xf0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00b      	beq.n	80040c6 <TIM_Base_SetConfig+0x8a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <TIM_Base_SetConfig+0xf4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d007      	beq.n	80040c6 <TIM_Base_SetConfig+0x8a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <TIM_Base_SetConfig+0xf8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d003      	beq.n	80040c6 <TIM_Base_SetConfig+0x8a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <TIM_Base_SetConfig+0xfc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d108      	bne.n	80040d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <TIM_Base_SetConfig+0xe4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d103      	bne.n	800410c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	615a      	str	r2, [r3, #20]
}
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40014000 	.word	0x40014000
 8004134:	40014400 	.word	0x40014400
 8004138:	40014800 	.word	0x40014800

0800413c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 0302 	bic.w	r3, r3, #2
 8004184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <TIM_OC1_SetConfig+0xc8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d10c      	bne.n	80041b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0308 	bic.w	r3, r3, #8
 800419e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 0304 	bic.w	r3, r3, #4
 80041b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a13      	ldr	r2, [pc, #76]	; (8004204 <TIM_OC1_SetConfig+0xc8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d111      	bne.n	80041de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40010000 	.word	0x40010000

08004208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f023 0210 	bic.w	r2, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f023 0320 	bic.w	r3, r3, #32
 8004252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <TIM_OC2_SetConfig+0xd4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10d      	bne.n	8004284 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800426e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <TIM_OC2_SetConfig+0xd4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d113      	bne.n	80042b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800429a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000

080042e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <TIM_OC3_SetConfig+0xd0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10d      	bne.n	800435a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <TIM_OC3_SetConfig+0xd0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d113      	bne.n	800438a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	621a      	str	r2, [r3, #32]
}
 80043a4:	bf00      	nop
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	40010000 	.word	0x40010000

080043b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	031b      	lsls	r3, r3, #12
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a10      	ldr	r2, [pc, #64]	; (8004450 <TIM_OC4_SetConfig+0x9c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d109      	bne.n	8004428 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800441a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	019b      	lsls	r3, r3, #6
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000

08004454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2201      	movs	r2, #1
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a1a      	ldr	r2, [r3, #32]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	43db      	mvns	r3, r3
 8004476:	401a      	ands	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	fa01 f303 	lsl.w	r3, r1, r3
 800448c:	431a      	orrs	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e050      	b.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d018      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004504:	d013      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a16      	ldr	r2, [pc, #88]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a15      	ldr	r2, [pc, #84]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10c      	bne.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	4313      	orrs	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40014000 	.word	0x40014000

0800457c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <__NVIC_SetPriority>:
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	6039      	str	r1, [r7, #0]
 80045ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	db0a      	blt.n	80045ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	490c      	ldr	r1, [pc, #48]	; (80045f0 <__NVIC_SetPriority+0x4c>)
 80045be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c2:	0112      	lsls	r2, r2, #4
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	440b      	add	r3, r1
 80045c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045cc:	e00a      	b.n	80045e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	4908      	ldr	r1, [pc, #32]	; (80045f4 <__NVIC_SetPriority+0x50>)
 80045d4:	79fb      	ldrb	r3, [r7, #7]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	3b04      	subs	r3, #4
 80045dc:	0112      	lsls	r2, r2, #4
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	440b      	add	r3, r1
 80045e2:	761a      	strb	r2, [r3, #24]
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	e000e100 	.word	0xe000e100
 80045f4:	e000ed00 	.word	0xe000ed00

080045f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <SysTick_Handler+0x1c>)
 80045fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004600:	f001 ff12 	bl	8006428 <xTaskGetSchedulerState>
 8004604:	4603      	mov	r3, r0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d001      	beq.n	800460e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800460a:	f002 fcfd 	bl	8007008 <xPortSysTickHandler>
  }
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	e000e010 	.word	0xe000e010

08004618 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800461c:	2100      	movs	r1, #0
 800461e:	f06f 0004 	mvn.w	r0, #4
 8004622:	f7ff ffbf 	bl	80045a4 <__NVIC_SetPriority>
#endif
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004632:	f3ef 8305 	mrs	r3, IPSR
 8004636:	603b      	str	r3, [r7, #0]
  return(result);
 8004638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800463e:	f06f 0305 	mvn.w	r3, #5
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	e00c      	b.n	8004660 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <osKernelInitialize+0x44>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <osKernelInitialize+0x44>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004654:	2300      	movs	r3, #0
 8004656:	607b      	str	r3, [r7, #4]
 8004658:	e002      	b.n	8004660 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800465a:	f04f 33ff 	mov.w	r3, #4294967295
 800465e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004660:	687b      	ldr	r3, [r7, #4]
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	200002cc 	.word	0x200002cc

08004674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800467a:	f3ef 8305 	mrs	r3, IPSR
 800467e:	603b      	str	r3, [r7, #0]
  return(result);
 8004680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004686:	f06f 0305 	mvn.w	r3, #5
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	e010      	b.n	80046b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <osKernelStart+0x48>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d109      	bne.n	80046aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004696:	f7ff ffbf 	bl	8004618 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <osKernelStart+0x48>)
 800469c:	2202      	movs	r2, #2
 800469e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046a0:	f001 fa66 	bl	8005b70 <vTaskStartScheduler>
      stat = osOK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	e002      	b.n	80046b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046b0:	687b      	ldr	r3, [r7, #4]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200002cc 	.word	0x200002cc

080046c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08e      	sub	sp, #56	; 0x38
 80046c4:	af04      	add	r7, sp, #16
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046d0:	f3ef 8305 	mrs	r3, IPSR
 80046d4:	617b      	str	r3, [r7, #20]
  return(result);
 80046d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d17e      	bne.n	80047da <osThreadNew+0x11a>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d07b      	beq.n	80047da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046e6:	2318      	movs	r3, #24
 80046e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295
 80046f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d045      	beq.n	8004786 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <osThreadNew+0x48>
        name = attr->name;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <osThreadNew+0x6e>
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b38      	cmp	r3, #56	; 0x38
 8004720:	d805      	bhi.n	800472e <osThreadNew+0x6e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <osThreadNew+0x72>
        return (NULL);
 800472e:	2300      	movs	r3, #0
 8004730:	e054      	b.n	80047dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00e      	beq.n	8004768 <osThreadNew+0xa8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2bbb      	cmp	r3, #187	; 0xbb
 8004750:	d90a      	bls.n	8004768 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <osThreadNew+0xa8>
        mem = 1;
 8004762:	2301      	movs	r3, #1
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e010      	b.n	800478a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10c      	bne.n	800478a <osThreadNew+0xca>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d108      	bne.n	800478a <osThreadNew+0xca>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <osThreadNew+0xca>
          mem = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	e001      	b.n	800478a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d110      	bne.n	80047b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004798:	9202      	str	r2, [sp, #8]
 800479a:	9301      	str	r3, [sp, #4]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6a3a      	ldr	r2, [r7, #32]
 80047a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fff6 	bl	8005798 <xTaskCreateStatic>
 80047ac:	4603      	mov	r3, r0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	e013      	b.n	80047da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d110      	bne.n	80047da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	f107 0310 	add.w	r3, r7, #16
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f001 f841 	bl	8005852 <xTaskCreate>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d001      	beq.n	80047da <osThreadNew+0x11a>
            hTask = NULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047da:	693b      	ldr	r3, [r7, #16]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3728      	adds	r7, #40	; 0x28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ec:	f3ef 8305 	mrs	r3, IPSR
 80047f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80047f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <osDelay+0x1c>
    stat = osErrorISR;
 80047f8:	f06f 0305 	mvn.w	r3, #5
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	e007      	b.n	8004810 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <osDelay+0x2c>
      vTaskDelay(ticks);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f001 f97c 	bl	8005b08 <vTaskDelay>
    }
  }

  return (stat);
 8004810:	68fb      	ldr	r3, [r7, #12]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800481a:	b580      	push	{r7, lr}
 800481c:	b08a      	sub	sp, #40	; 0x28
 800481e:	af02      	add	r7, sp, #8
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800482a:	f3ef 8305 	mrs	r3, IPSR
 800482e:	613b      	str	r3, [r7, #16]
  return(result);
 8004830:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004832:	2b00      	cmp	r3, #0
 8004834:	d15f      	bne.n	80048f6 <osMessageQueueNew+0xdc>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d05c      	beq.n	80048f6 <osMessageQueueNew+0xdc>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d059      	beq.n	80048f6 <osMessageQueueNew+0xdc>
    mem = -1;
 8004842:	f04f 33ff 	mov.w	r3, #4294967295
 8004846:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d029      	beq.n	80048a2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d012      	beq.n	800487c <osMessageQueueNew+0x62>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b4f      	cmp	r3, #79	; 0x4f
 800485c:	d90e      	bls.n	800487c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <osMessageQueueNew+0x62>
        mem = 1;
 8004876:	2301      	movs	r3, #1
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	e014      	b.n	80048a6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d110      	bne.n	80048a6 <osMessageQueueNew+0x8c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10c      	bne.n	80048a6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004890:	2b00      	cmp	r3, #0
 8004892:	d108      	bne.n	80048a6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <osMessageQueueNew+0x8c>
          mem = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	e001      	b.n	80048a6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d10b      	bne.n	80048c4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2100      	movs	r1, #0
 80048b6:	9100      	str	r1, [sp, #0]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fa2e 	bl	8004d1c <xQueueGenericCreateStatic>
 80048c0:	61f8      	str	r0, [r7, #28]
 80048c2:	e008      	b.n	80048d6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d105      	bne.n	80048d6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80048ca:	2200      	movs	r2, #0
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fa9c 	bl	8004e0c <xQueueGenericCreate>
 80048d4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00c      	beq.n	80048f6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <osMessageQueueNew+0xd0>
        name = attr->name;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e001      	b.n	80048ee <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80048ee:	6979      	ldr	r1, [r7, #20]
 80048f0:	69f8      	ldr	r0, [r7, #28]
 80048f2:	f000 fef3 	bl	80056dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80048f6:	69fb      	ldr	r3, [r7, #28]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004918:	f3ef 8305 	mrs	r3, IPSR
 800491c:	617b      	str	r3, [r7, #20]
  return(result);
 800491e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004920:	2b00      	cmp	r3, #0
 8004922:	d028      	beq.n	8004976 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <osMessageQueuePut+0x36>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <osMessageQueuePut+0x36>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004936:	f06f 0303 	mvn.w	r3, #3
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	e038      	b.n	80049b0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004942:	f107 0210 	add.w	r2, r7, #16
 8004946:	2300      	movs	r3, #0
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	69b8      	ldr	r0, [r7, #24]
 800494c:	f000 fbba 	bl	80050c4 <xQueueGenericSendFromISR>
 8004950:	4603      	mov	r3, r0
 8004952:	2b01      	cmp	r3, #1
 8004954:	d003      	beq.n	800495e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004956:	f06f 0302 	mvn.w	r3, #2
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e028      	b.n	80049b0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d025      	beq.n	80049b0 <osMessageQueuePut+0xb0>
 8004964:	4b15      	ldr	r3, [pc, #84]	; (80049bc <osMessageQueuePut+0xbc>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	e01c      	b.n	80049b0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <osMessageQueuePut+0x82>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004982:	f06f 0303 	mvn.w	r3, #3
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e012      	b.n	80049b0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800498a:	2300      	movs	r3, #0
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	69b8      	ldr	r0, [r7, #24]
 8004992:	f000 fa99 	bl	8004ec8 <xQueueGenericSend>
 8004996:	4603      	mov	r3, r0
 8004998:	2b01      	cmp	r3, #1
 800499a:	d009      	beq.n	80049b0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80049a2:	f06f 0301 	mvn.w	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e002      	b.n	80049b0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80049aa:	f06f 0302 	mvn.w	r3, #2
 80049ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80049b0:	69fb      	ldr	r3, [r7, #28]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d6:	f3ef 8305 	mrs	r3, IPSR
 80049da:	617b      	str	r3, [r7, #20]
  return(result);
 80049dc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d028      	beq.n	8004a34 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <osMessageQueueGet+0x34>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <osMessageQueueGet+0x34>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80049f4:	f06f 0303 	mvn.w	r3, #3
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e037      	b.n	8004a6c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	461a      	mov	r2, r3
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	69b8      	ldr	r0, [r7, #24]
 8004a0a:	f000 fcd7 	bl	80053bc <xQueueReceiveFromISR>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d003      	beq.n	8004a1c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004a14:	f06f 0302 	mvn.w	r3, #2
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	e027      	b.n	8004a6c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d024      	beq.n	8004a6c <osMessageQueueGet+0xac>
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <osMessageQueueGet+0xb8>)
 8004a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	e01b      	b.n	8004a6c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <osMessageQueueGet+0x80>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d103      	bne.n	8004a48 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004a40:	f06f 0303 	mvn.w	r3, #3
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	e011      	b.n	8004a6c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	69b8      	ldr	r0, [r7, #24]
 8004a4e:	f000 fbd5 	bl	80051fc <xQueueReceive>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d009      	beq.n	8004a6c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004a5e:	f06f 0301 	mvn.w	r3, #1
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	e002      	b.n	8004a6c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004a66:	f06f 0302 	mvn.w	r3, #2
 8004a6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004a6c:	69fb      	ldr	r3, [r7, #28]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a06      	ldr	r2, [pc, #24]	; (8004aac <vApplicationGetIdleTaskMemory+0x30>)
 8004a92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2280      	movs	r2, #128	; 0x80
 8004a98:	601a      	str	r2, [r3, #0]
}
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	200002d0 	.word	0x200002d0
 8004aac:	2000038c 	.word	0x2000038c

08004ab0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a07      	ldr	r2, [pc, #28]	; (8004adc <vApplicationGetTimerTaskMemory+0x2c>)
 8004ac0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <vApplicationGetTimerTaskMemory+0x30>)
 8004ac6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ace:	601a      	str	r2, [r3, #0]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	2000058c 	.word	0x2000058c
 8004ae0:	20000648 	.word	0x20000648

08004ae4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f103 0208 	add.w	r2, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f04f 32ff 	mov.w	r2, #4294967295
 8004afc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f103 0208 	add.w	r2, r3, #8
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f103 0208 	add.w	r2, r3, #8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d103      	bne.n	8004ba6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e00c      	b.n	8004bc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e002      	b.n	8004bb4 <vListInsert+0x2e>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d2f6      	bcs.n	8004bae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6892      	ldr	r2, [r2, #8]
 8004c0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6852      	ldr	r2, [r2, #4]
 8004c18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d103      	bne.n	8004c2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	1e5a      	subs	r2, r3, #1
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c76:	f002 f935 	bl	8006ee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	441a      	add	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	68f9      	ldr	r1, [r7, #12]
 8004caa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	22ff      	movs	r2, #255	; 0xff
 8004cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	22ff      	movs	r2, #255	; 0xff
 8004cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d114      	bne.n	8004cf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01a      	beq.n	8004d0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3310      	adds	r3, #16
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 f9e3 	bl	80060a4 <xTaskRemoveFromEventList>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <xQueueGenericReset+0xcc>)
 8004ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	e009      	b.n	8004d0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fef2 	bl	8004ae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3324      	adds	r3, #36	; 0x24
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff feed 	bl	8004ae4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d0a:	f002 f91b 	bl	8006f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d0e:	2301      	movs	r3, #1
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08e      	sub	sp, #56	; 0x38
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <xQueueGenericCreateStatic+0x52>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <xQueueGenericCreateStatic+0x56>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <xQueueGenericCreateStatic+0x58>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	623b      	str	r3, [r7, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <xQueueGenericCreateStatic+0x7e>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <xQueueGenericCreateStatic+0x82>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <xQueueGenericCreateStatic+0x84>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	61fb      	str	r3, [r7, #28]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004dba:	2350      	movs	r3, #80	; 0x50
 8004dbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b50      	cmp	r3, #80	; 0x50
 8004dc2:	d00a      	beq.n	8004dda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	61bb      	str	r3, [r7, #24]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004dda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	4613      	mov	r3, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f83f 	bl	8004e80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3730      	adds	r7, #48	; 0x30
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	613b      	str	r3, [r7, #16]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	3350      	adds	r3, #80	; 0x50
 8004e44:	4618      	mov	r0, r3
 8004e46:	f002 f96f 	bl	8007128 <pvPortMalloc>
 8004e4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d011      	beq.n	8004e76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	3350      	adds	r3, #80	; 0x50
 8004e5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e64:	79fa      	ldrb	r2, [r7, #7]
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f805 	bl	8004e80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e76:	69bb      	ldr	r3, [r7, #24]
	}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3720      	adds	r7, #32
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d103      	bne.n	8004e9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e002      	b.n	8004ea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eae:	2101      	movs	r1, #1
 8004eb0:	69b8      	ldr	r0, [r7, #24]
 8004eb2:	f7ff fecb 	bl	8004c4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	78fa      	ldrb	r2, [r7, #3]
 8004eba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08e      	sub	sp, #56	; 0x38
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <xQueueGenericSend+0x32>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <xQueueGenericSend+0x40>
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <xQueueGenericSend+0x44>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <xQueueGenericSend+0x46>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <xQueueGenericSend+0x60>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d103      	bne.n	8004f36 <xQueueGenericSend+0x6e>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <xQueueGenericSend+0x72>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <xQueueGenericSend+0x74>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <xQueueGenericSend+0x8e>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	623b      	str	r3, [r7, #32]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f56:	f001 fa67 	bl	8006428 <xTaskGetSchedulerState>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <xQueueGenericSend+0x9e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <xQueueGenericSend+0xa2>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <xQueueGenericSend+0xa4>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <xQueueGenericSend+0xbe>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	61fb      	str	r3, [r7, #28]
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f86:	f001 ffad 	bl	8006ee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d302      	bcc.n	8004f9c <xQueueGenericSend+0xd4>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d129      	bne.n	8004ff0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fa2:	f000 fa8b 	bl	80054bc <prvCopyDataToQueue>
 8004fa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d010      	beq.n	8004fd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	3324      	adds	r3, #36	; 0x24
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f001 f875 	bl	80060a4 <xTaskRemoveFromEventList>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d013      	beq.n	8004fe8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fc0:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <xQueueGenericSend+0x1f8>)
 8004fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	e00a      	b.n	8004fe8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fd8:	4b39      	ldr	r3, [pc, #228]	; (80050c0 <xQueueGenericSend+0x1f8>)
 8004fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fe8:	f001 ffac 	bl	8006f44 <vPortExitCritical>
				return pdPASS;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e063      	b.n	80050b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d103      	bne.n	8004ffe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ff6:	f001 ffa5 	bl	8006f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e05c      	b.n	80050b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005004:	f107 0314 	add.w	r3, r7, #20
 8005008:	4618      	mov	r0, r3
 800500a:	f001 f8af 	bl	800616c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800500e:	2301      	movs	r3, #1
 8005010:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005012:	f001 ff97 	bl	8006f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005016:	f000 fe1b 	bl	8005c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800501a:	f001 ff63 	bl	8006ee4 <vPortEnterCritical>
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005024:	b25b      	sxtb	r3, r3
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d103      	bne.n	8005034 <xQueueGenericSend+0x16c>
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800503a:	b25b      	sxtb	r3, r3
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d103      	bne.n	800504a <xQueueGenericSend+0x182>
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800504a:	f001 ff7b 	bl	8006f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800504e:	1d3a      	adds	r2, r7, #4
 8005050:	f107 0314 	add.w	r3, r7, #20
 8005054:	4611      	mov	r1, r2
 8005056:	4618      	mov	r0, r3
 8005058:	f001 f89e 	bl	8006198 <xTaskCheckForTimeOut>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d124      	bne.n	80050ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005064:	f000 fb22 	bl	80056ac <prvIsQueueFull>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d018      	beq.n	80050a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	3310      	adds	r3, #16
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4611      	mov	r1, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f000 ffc4 	bl	8006004 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800507c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800507e:	f000 faad 	bl	80055dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005082:	f000 fdf3 	bl	8005c6c <xTaskResumeAll>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	f47f af7c 	bne.w	8004f86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <xQueueGenericSend+0x1f8>)
 8005090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	e772      	b.n	8004f86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050a2:	f000 fa9b 	bl	80055dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050a6:	f000 fde1 	bl	8005c6c <xTaskResumeAll>
 80050aa:	e76c      	b.n	8004f86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ae:	f000 fa95 	bl	80055dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050b2:	f000 fddb 	bl	8005c6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3738      	adds	r7, #56	; 0x38
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b090      	sub	sp, #64	; 0x40
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d103      	bne.n	8005100 <xQueueGenericSendFromISR+0x3c>
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <xQueueGenericSendFromISR+0x40>
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <xQueueGenericSendFromISR+0x42>
 8005104:	2300      	movs	r3, #0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d103      	bne.n	800512e <xQueueGenericSendFromISR+0x6a>
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <xQueueGenericSendFromISR+0x6e>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <xQueueGenericSendFromISR+0x70>
 8005132:	2300      	movs	r3, #0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	623b      	str	r3, [r7, #32]
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800514e:	f001 ffab 	bl	80070a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005152:	f3ef 8211 	mrs	r2, BASEPRI
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	61fa      	str	r2, [r7, #28]
 8005168:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800516a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800516c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <xQueueGenericSendFromISR+0xbc>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d12f      	bne.n	80051e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005196:	f000 f991 	bl	80054bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800519a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a2:	d112      	bne.n	80051ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d016      	beq.n	80051da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	3324      	adds	r3, #36	; 0x24
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 ff77 	bl	80060a4 <xTaskRemoveFromEventList>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00e      	beq.n	80051da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00b      	beq.n	80051da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e007      	b.n	80051da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051ce:	3301      	adds	r3, #1
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	b25a      	sxtb	r2, r3
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051da:	2301      	movs	r3, #1
 80051dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80051de:	e001      	b.n	80051e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3740      	adds	r7, #64	; 0x40
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08c      	sub	sp, #48	; 0x30
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005208:	2300      	movs	r3, #0
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <xQueueReceive+0x30>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	623b      	str	r3, [r7, #32]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d103      	bne.n	800523a <xQueueReceive+0x3e>
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <xQueueReceive+0x42>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <xQueueReceive+0x44>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <xQueueReceive+0x5e>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	61fb      	str	r3, [r7, #28]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800525a:	f001 f8e5 	bl	8006428 <xTaskGetSchedulerState>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d102      	bne.n	800526a <xQueueReceive+0x6e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <xQueueReceive+0x72>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <xQueueReceive+0x74>
 800526e:	2300      	movs	r3, #0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <xQueueReceive+0x8e>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	61bb      	str	r3, [r7, #24]
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800528a:	f001 fe2b 	bl	8006ee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01f      	beq.n	80052da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529e:	f000 f977 	bl	8005590 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	1e5a      	subs	r2, r3, #1
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00f      	beq.n	80052d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	3310      	adds	r3, #16
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fef4 	bl	80060a4 <xTaskRemoveFromEventList>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d007      	beq.n	80052d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052c2:	4b3d      	ldr	r3, [pc, #244]	; (80053b8 <xQueueReceive+0x1bc>)
 80052c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052d2:	f001 fe37 	bl	8006f44 <vPortExitCritical>
				return pdPASS;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e069      	b.n	80053ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d103      	bne.n	80052e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052e0:	f001 fe30 	bl	8006f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e062      	b.n	80053ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ee:	f107 0310 	add.w	r3, r7, #16
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 ff3a 	bl	800616c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052fc:	f001 fe22 	bl	8006f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005300:	f000 fca6 	bl	8005c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005304:	f001 fdee 	bl	8006ee4 <vPortEnterCritical>
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530e:	b25b      	sxtb	r3, r3
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005314:	d103      	bne.n	800531e <xQueueReceive+0x122>
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005324:	b25b      	sxtb	r3, r3
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d103      	bne.n	8005334 <xQueueReceive+0x138>
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005334:	f001 fe06 	bl	8006f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005338:	1d3a      	adds	r2, r7, #4
 800533a:	f107 0310 	add.w	r3, r7, #16
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f000 ff29 	bl	8006198 <xTaskCheckForTimeOut>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d123      	bne.n	8005394 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800534c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534e:	f000 f997 	bl	8005680 <prvIsQueueEmpty>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d017      	beq.n	8005388 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	3324      	adds	r3, #36	; 0x24
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fe4f 	bl	8006004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005368:	f000 f938 	bl	80055dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800536c:	f000 fc7e 	bl	8005c6c <xTaskResumeAll>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d189      	bne.n	800528a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005376:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <xQueueReceive+0x1bc>)
 8005378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	e780      	b.n	800528a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800538a:	f000 f927 	bl	80055dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800538e:	f000 fc6d 	bl	8005c6c <xTaskResumeAll>
 8005392:	e77a      	b.n	800528a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005396:	f000 f921 	bl	80055dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800539a:	f000 fc67 	bl	8005c6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800539e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053a0:	f000 f96e 	bl	8005680 <prvIsQueueEmpty>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f43f af6f 	beq.w	800528a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3730      	adds	r7, #48	; 0x30
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08e      	sub	sp, #56	; 0x38
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	623b      	str	r3, [r7, #32]
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <xQueueReceiveFromISR+0x3a>
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <xQueueReceiveFromISR+0x3e>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <xQueueReceiveFromISR+0x40>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	61fb      	str	r3, [r7, #28]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005416:	f001 fe47 	bl	80070a8 <vPortValidateInterruptPriority>
	__asm volatile
 800541a:	f3ef 8211 	mrs	r2, BASEPRI
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	61ba      	str	r2, [r7, #24]
 8005430:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005432:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d02f      	beq.n	80054a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005450:	f000 f89e 	bl	8005590 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	1e5a      	subs	r2, r3, #1
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800545c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005464:	d112      	bne.n	800548c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d016      	beq.n	800549c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	3310      	adds	r3, #16
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fe16 	bl	80060a4 <xTaskRemoveFromEventList>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00e      	beq.n	800549c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00b      	beq.n	800549c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e007      	b.n	800549c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800548c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005490:	3301      	adds	r3, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	b25a      	sxtb	r2, r3
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800549c:	2301      	movs	r3, #1
 800549e:	637b      	str	r3, [r7, #52]	; 0x34
 80054a0:	e001      	b.n	80054a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f383 8811 	msr	BASEPRI, r3
}
 80054b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3738      	adds	r7, #56	; 0x38
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10d      	bne.n	80054f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d14d      	bne.n	800557e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 ffbc 	bl	8006464 <xTaskPriorityDisinherit>
 80054ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	e043      	b.n	800557e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d119      	bne.n	8005530 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6858      	ldr	r0, [r3, #4]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	461a      	mov	r2, r3
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	f002 f834 	bl	8007574 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	441a      	add	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	d32b      	bcc.n	800557e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	e026      	b.n	800557e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68d8      	ldr	r0, [r3, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	461a      	mov	r2, r3
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	f002 f81a 	bl	8007574 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	425b      	negs	r3, r3
 800554a:	441a      	add	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d207      	bcs.n	800556c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	425b      	negs	r3, r3
 8005566:	441a      	add	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d105      	bne.n	800557e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	3b01      	subs	r3, #1
 800557c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005586:	697b      	ldr	r3, [r7, #20]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d018      	beq.n	80055d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	441a      	add	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d303      	bcc.n	80055c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68d9      	ldr	r1, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	461a      	mov	r2, r3
 80055ce:	6838      	ldr	r0, [r7, #0]
 80055d0:	f001 ffd0 	bl	8007574 <memcpy>
	}
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055e4:	f001 fc7e 	bl	8006ee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055f0:	e011      	b.n	8005616 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d012      	beq.n	8005620 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3324      	adds	r3, #36	; 0x24
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fd50 	bl	80060a4 <xTaskRemoveFromEventList>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800560a:	f000 fe27 	bl	800625c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	3b01      	subs	r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	dce9      	bgt.n	80055f2 <prvUnlockQueue+0x16>
 800561e:	e000      	b.n	8005622 <prvUnlockQueue+0x46>
					break;
 8005620:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	22ff      	movs	r2, #255	; 0xff
 8005626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800562a:	f001 fc8b 	bl	8006f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800562e:	f001 fc59 	bl	8006ee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005638:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800563a:	e011      	b.n	8005660 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d012      	beq.n	800566a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3310      	adds	r3, #16
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fd2b 	bl	80060a4 <xTaskRemoveFromEventList>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005654:	f000 fe02 	bl	800625c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005658:	7bbb      	ldrb	r3, [r7, #14]
 800565a:	3b01      	subs	r3, #1
 800565c:	b2db      	uxtb	r3, r3
 800565e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005664:	2b00      	cmp	r3, #0
 8005666:	dce9      	bgt.n	800563c <prvUnlockQueue+0x60>
 8005668:	e000      	b.n	800566c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800566a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	22ff      	movs	r2, #255	; 0xff
 8005670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005674:	f001 fc66 	bl	8006f44 <vPortExitCritical>
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005688:	f001 fc2c 	bl	8006ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e001      	b.n	800569e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800569e:	f001 fc51 	bl	8006f44 <vPortExitCritical>

	return xReturn;
 80056a2:	68fb      	ldr	r3, [r7, #12]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056b4:	f001 fc16 	bl	8006ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d102      	bne.n	80056ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	e001      	b.n	80056ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056ce:	f001 fc39 	bl	8006f44 <vPortExitCritical>

	return xReturn;
 80056d2:	68fb      	ldr	r3, [r7, #12]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	e014      	b.n	8005716 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056ec:	4a0f      	ldr	r2, [pc, #60]	; (800572c <vQueueAddToRegistry+0x50>)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056f8:	490c      	ldr	r1, [pc, #48]	; (800572c <vQueueAddToRegistry+0x50>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005702:	4a0a      	ldr	r2, [pc, #40]	; (800572c <vQueueAddToRegistry+0x50>)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4413      	add	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800570e:	e006      	b.n	800571e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b07      	cmp	r3, #7
 800571a:	d9e7      	bls.n	80056ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000a48 	.word	0x20000a48

08005730 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005740:	f001 fbd0 	bl	8006ee4 <vPortEnterCritical>
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800574a:	b25b      	sxtb	r3, r3
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d103      	bne.n	800575a <vQueueWaitForMessageRestricted+0x2a>
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005760:	b25b      	sxtb	r3, r3
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d103      	bne.n	8005770 <vQueueWaitForMessageRestricted+0x40>
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005770:	f001 fbe8 	bl	8006f44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	3324      	adds	r3, #36	; 0x24
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fc61 	bl	800604c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800578a:	6978      	ldr	r0, [r7, #20]
 800578c:	f7ff ff26 	bl	80055dc <prvUnlockQueue>
	}
 8005790:	bf00      	nop
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08e      	sub	sp, #56	; 0x38
 800579c:	af04      	add	r7, sp, #16
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	623b      	str	r3, [r7, #32]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <xTaskCreateStatic+0x46>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	61fb      	str	r3, [r7, #28]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057de:	23bc      	movs	r3, #188	; 0xbc
 80057e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2bbc      	cmp	r3, #188	; 0xbc
 80057e6:	d00a      	beq.n	80057fe <xTaskCreateStatic+0x66>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	61bb      	str	r3, [r7, #24]
}
 80057fa:	bf00      	nop
 80057fc:	e7fe      	b.n	80057fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01e      	beq.n	8005844 <xTaskCreateStatic+0xac>
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01b      	beq.n	8005844 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005814:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	2202      	movs	r2, #2
 800581a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800581e:	2300      	movs	r3, #0
 8005820:	9303      	str	r3, [sp, #12]
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	9302      	str	r3, [sp, #8]
 8005826:	f107 0314 	add.w	r3, r7, #20
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f850 	bl	80058dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800583c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800583e:	f000 f8f3 	bl	8005a28 <prvAddNewTaskToReadyList>
 8005842:	e001      	b.n	8005848 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005848:	697b      	ldr	r3, [r7, #20]
	}
 800584a:	4618      	mov	r0, r3
 800584c:	3728      	adds	r7, #40	; 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005852:	b580      	push	{r7, lr}
 8005854:	b08c      	sub	sp, #48	; 0x30
 8005856:	af04      	add	r7, sp, #16
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	603b      	str	r3, [r7, #0]
 800585e:	4613      	mov	r3, r2
 8005860:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fc5e 	bl	8007128 <pvPortMalloc>
 800586c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00e      	beq.n	8005892 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005874:	20bc      	movs	r0, #188	; 0xbc
 8005876:	f001 fc57 	bl	8007128 <pvPortMalloc>
 800587a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
 8005888:	e005      	b.n	8005896 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f001 fd18 	bl	80072c0 <vPortFree>
 8005890:	e001      	b.n	8005896 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d017      	beq.n	80058cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058a4:	88fa      	ldrh	r2, [r7, #6]
 80058a6:	2300      	movs	r3, #0
 80058a8:	9303      	str	r3, [sp, #12]
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	9302      	str	r3, [sp, #8]
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f80e 	bl	80058dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058c0:	69f8      	ldr	r0, [r7, #28]
 80058c2:	f000 f8b1 	bl	8005a28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058c6:	2301      	movs	r3, #1
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e002      	b.n	80058d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058cc:	f04f 33ff 	mov.w	r3, #4294967295
 80058d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058d2:	69bb      	ldr	r3, [r7, #24]
	}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	461a      	mov	r2, r3
 80058f4:	21a5      	movs	r1, #165	; 0xa5
 80058f6:	f001 fe4b 	bl	8007590 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005904:	3b01      	subs	r3, #1
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f023 0307 	bic.w	r3, r3, #7
 8005912:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <prvInitialiseNewTask+0x58>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	617b      	str	r3, [r7, #20]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d01f      	beq.n	800597a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800593a:	2300      	movs	r3, #0
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	e012      	b.n	8005966 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	7819      	ldrb	r1, [r3, #0]
 8005948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	3334      	adds	r3, #52	; 0x34
 8005950:	460a      	mov	r2, r1
 8005952:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d006      	beq.n	800596e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	3301      	adds	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	2b0f      	cmp	r3, #15
 800596a:	d9e9      	bls.n	8005940 <prvInitialiseNewTask+0x64>
 800596c:	e000      	b.n	8005970 <prvInitialiseNewTask+0x94>
			{
				break;
 800596e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005978:	e003      	b.n	8005982 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	2b37      	cmp	r3, #55	; 0x37
 8005986:	d901      	bls.n	800598c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005988:	2337      	movs	r3, #55	; 0x37
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005990:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005996:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	2200      	movs	r2, #0
 800599c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	3304      	adds	r3, #4
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff f8be 	bl	8004b24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	3318      	adds	r3, #24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff f8b9 	bl	8004b24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	3354      	adds	r3, #84	; 0x54
 80059dc:	2260      	movs	r2, #96	; 0x60
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 fdd5 	bl	8007590 <memset>
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <prvInitialiseNewTask+0x140>)
 80059ea:	659a      	str	r2, [r3, #88]	; 0x58
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <prvInitialiseNewTask+0x144>)
 80059f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	4a0b      	ldr	r2, [pc, #44]	; (8005a24 <prvInitialiseNewTask+0x148>)
 80059f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	69b8      	ldr	r0, [r7, #24]
 80059fe:	f001 f941 	bl	8006c84 <pxPortInitialiseStack>
 8005a02:	4602      	mov	r2, r0
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a14:	bf00      	nop
 8005a16:	3720      	adds	r7, #32
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	0800a9c8 	.word	0x0800a9c8
 8005a20:	0800a9e8 	.word	0x0800a9e8
 8005a24:	0800a9a8 	.word	0x0800a9a8

08005a28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a30:	f001 fa58 	bl	8006ee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a34:	4b2d      	ldr	r3, [pc, #180]	; (8005aec <prvAddNewTaskToReadyList+0xc4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	4a2c      	ldr	r2, [pc, #176]	; (8005aec <prvAddNewTaskToReadyList+0xc4>)
 8005a3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a3e:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <prvAddNewTaskToReadyList+0xc8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a46:	4a2a      	ldr	r2, [pc, #168]	; (8005af0 <prvAddNewTaskToReadyList+0xc8>)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a4c:	4b27      	ldr	r3, [pc, #156]	; (8005aec <prvAddNewTaskToReadyList+0xc4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d110      	bne.n	8005a76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a54:	f000 fc26 	bl	80062a4 <prvInitialiseTaskLists>
 8005a58:	e00d      	b.n	8005a76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a5a:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <prvAddNewTaskToReadyList+0xcc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a62:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <prvAddNewTaskToReadyList+0xc8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d802      	bhi.n	8005a76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a70:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <prvAddNewTaskToReadyList+0xc8>)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a76:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <prvAddNewTaskToReadyList+0xd0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	4a1e      	ldr	r2, [pc, #120]	; (8005af8 <prvAddNewTaskToReadyList+0xd0>)
 8005a7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a80:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <prvAddNewTaskToReadyList+0xd0>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <prvAddNewTaskToReadyList+0xd4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d903      	bls.n	8005a9c <prvAddNewTaskToReadyList+0x74>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	4a18      	ldr	r2, [pc, #96]	; (8005afc <prvAddNewTaskToReadyList+0xd4>)
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <prvAddNewTaskToReadyList+0xd8>)
 8005aaa:	441a      	add	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f7ff f843 	bl	8004b3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ab8:	f001 fa44 	bl	8006f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005abc:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <prvAddNewTaskToReadyList+0xcc>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00e      	beq.n	8005ae2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <prvAddNewTaskToReadyList+0xc8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d207      	bcs.n	8005ae2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <prvAddNewTaskToReadyList+0xdc>)
 8005ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000f5c 	.word	0x20000f5c
 8005af0:	20000a88 	.word	0x20000a88
 8005af4:	20000f68 	.word	0x20000f68
 8005af8:	20000f78 	.word	0x20000f78
 8005afc:	20000f64 	.word	0x20000f64
 8005b00:	20000a8c 	.word	0x20000a8c
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d017      	beq.n	8005b4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b1a:	4b13      	ldr	r3, [pc, #76]	; (8005b68 <vTaskDelay+0x60>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <vTaskDelay+0x30>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	60bb      	str	r3, [r7, #8]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b38:	f000 f88a 	bl	8005c50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fcfe 	bl	8006540 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b44:	f000 f892 	bl	8005c6c <xTaskResumeAll>
 8005b48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d107      	bne.n	8005b60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <vTaskDelay+0x64>)
 8005b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000f84 	.word	0x20000f84
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b7e:	463a      	mov	r2, r7
 8005b80:	1d39      	adds	r1, r7, #4
 8005b82:	f107 0308 	add.w	r3, r7, #8
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe ff78 	bl	8004a7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	9202      	str	r2, [sp, #8]
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	2300      	movs	r3, #0
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	460a      	mov	r2, r1
 8005b9e:	4924      	ldr	r1, [pc, #144]	; (8005c30 <vTaskStartScheduler+0xc0>)
 8005ba0:	4824      	ldr	r0, [pc, #144]	; (8005c34 <vTaskStartScheduler+0xc4>)
 8005ba2:	f7ff fdf9 	bl	8005798 <xTaskCreateStatic>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	4a23      	ldr	r2, [pc, #140]	; (8005c38 <vTaskStartScheduler+0xc8>)
 8005baa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bac:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <vTaskStartScheduler+0xc8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	e001      	b.n	8005bbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d102      	bne.n	8005bca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005bc4:	f000 fd10 	bl	80065e8 <xTimerCreateTimerTask>
 8005bc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d11b      	bne.n	8005c08 <vTaskStartScheduler+0x98>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	613b      	str	r3, [r7, #16]
}
 8005be2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005be4:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <vTaskStartScheduler+0xcc>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3354      	adds	r3, #84	; 0x54
 8005bea:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <vTaskStartScheduler+0xd0>)
 8005bec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <vTaskStartScheduler+0xd4>)
 8005bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <vTaskStartScheduler+0xd8>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bfc:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <vTaskStartScheduler+0xdc>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c02:	f001 f8cd 	bl	8006da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c06:	e00e      	b.n	8005c26 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d10a      	bne.n	8005c26 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <vTaskStartScheduler+0xb4>
}
 8005c26:	bf00      	nop
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	08008050 	.word	0x08008050
 8005c34:	08006275 	.word	0x08006275
 8005c38:	20000f80 	.word	0x20000f80
 8005c3c:	20000a88 	.word	0x20000a88
 8005c40:	20000078 	.word	0x20000078
 8005c44:	20000f7c 	.word	0x20000f7c
 8005c48:	20000f68 	.word	0x20000f68
 8005c4c:	20000f60 	.word	0x20000f60

08005c50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c54:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <vTaskSuspendAll+0x18>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	4a03      	ldr	r2, [pc, #12]	; (8005c68 <vTaskSuspendAll+0x18>)
 8005c5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c5e:	bf00      	nop
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	20000f84 	.word	0x20000f84

08005c6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c7a:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <xTaskResumeAll+0x118>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	603b      	str	r3, [r7, #0]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c98:	f001 f924 	bl	8006ee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c9c:	4b39      	ldr	r3, [pc, #228]	; (8005d84 <xTaskResumeAll+0x118>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	4a38      	ldr	r2, [pc, #224]	; (8005d84 <xTaskResumeAll+0x118>)
 8005ca4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca6:	4b37      	ldr	r3, [pc, #220]	; (8005d84 <xTaskResumeAll+0x118>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d162      	bne.n	8005d74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cae:	4b36      	ldr	r3, [pc, #216]	; (8005d88 <xTaskResumeAll+0x11c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d05e      	beq.n	8005d74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cb6:	e02f      	b.n	8005d18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb8:	4b34      	ldr	r3, [pc, #208]	; (8005d8c <xTaskResumeAll+0x120>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe ff97 	bl	8004bf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe ff92 	bl	8004bf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	4b2d      	ldr	r3, [pc, #180]	; (8005d90 <xTaskResumeAll+0x124>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d903      	bls.n	8005ce8 <xTaskResumeAll+0x7c>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4a2a      	ldr	r2, [pc, #168]	; (8005d90 <xTaskResumeAll+0x124>)
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <xTaskResumeAll+0x128>)
 8005cf6:	441a      	add	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f7fe ff1d 	bl	8004b3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d08:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <xTaskResumeAll+0x12c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d302      	bcc.n	8005d18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d12:	4b22      	ldr	r3, [pc, #136]	; (8005d9c <xTaskResumeAll+0x130>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d18:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <xTaskResumeAll+0x120>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1cb      	bne.n	8005cb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d26:	f000 fb5f 	bl	80063e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d2a:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <xTaskResumeAll+0x134>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d010      	beq.n	8005d58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d36:	f000 f847 	bl	8005dc8 <xTaskIncrementTick>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d40:	4b16      	ldr	r3, [pc, #88]	; (8005d9c <xTaskResumeAll+0x130>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f1      	bne.n	8005d36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d52:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <xTaskResumeAll+0x134>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d58:	4b10      	ldr	r3, [pc, #64]	; (8005d9c <xTaskResumeAll+0x130>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d60:	2301      	movs	r3, #1
 8005d62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <xTaskResumeAll+0x138>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d74:	f001 f8e6 	bl	8006f44 <vPortExitCritical>

	return xAlreadyYielded;
 8005d78:	68bb      	ldr	r3, [r7, #8]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000f84 	.word	0x20000f84
 8005d88:	20000f5c 	.word	0x20000f5c
 8005d8c:	20000f1c 	.word	0x20000f1c
 8005d90:	20000f64 	.word	0x20000f64
 8005d94:	20000a8c 	.word	0x20000a8c
 8005d98:	20000a88 	.word	0x20000a88
 8005d9c:	20000f70 	.word	0x20000f70
 8005da0:	20000f6c 	.word	0x20000f6c
 8005da4:	e000ed04 	.word	0xe000ed04

08005da8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <xTaskGetTickCount+0x1c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005db4:	687b      	ldr	r3, [r7, #4]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000f60 	.word	0x20000f60

08005dc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd2:	4b4f      	ldr	r3, [pc, #316]	; (8005f10 <xTaskIncrementTick+0x148>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 808f 	bne.w	8005efa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ddc:	4b4d      	ldr	r3, [pc, #308]	; (8005f14 <xTaskIncrementTick+0x14c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3301      	adds	r3, #1
 8005de2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005de4:	4a4b      	ldr	r2, [pc, #300]	; (8005f14 <xTaskIncrementTick+0x14c>)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d120      	bne.n	8005e32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005df0:	4b49      	ldr	r3, [pc, #292]	; (8005f18 <xTaskIncrementTick+0x150>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <xTaskIncrementTick+0x48>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	603b      	str	r3, [r7, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	e7fe      	b.n	8005e0e <xTaskIncrementTick+0x46>
 8005e10:	4b41      	ldr	r3, [pc, #260]	; (8005f18 <xTaskIncrementTick+0x150>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	4b41      	ldr	r3, [pc, #260]	; (8005f1c <xTaskIncrementTick+0x154>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a3f      	ldr	r2, [pc, #252]	; (8005f18 <xTaskIncrementTick+0x150>)
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	4a3f      	ldr	r2, [pc, #252]	; (8005f1c <xTaskIncrementTick+0x154>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	4b3e      	ldr	r3, [pc, #248]	; (8005f20 <xTaskIncrementTick+0x158>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	4a3d      	ldr	r2, [pc, #244]	; (8005f20 <xTaskIncrementTick+0x158>)
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	f000 fadb 	bl	80063e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e32:	4b3c      	ldr	r3, [pc, #240]	; (8005f24 <xTaskIncrementTick+0x15c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d349      	bcc.n	8005ed0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e3c:	4b36      	ldr	r3, [pc, #216]	; (8005f18 <xTaskIncrementTick+0x150>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d104      	bne.n	8005e50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e46:	4b37      	ldr	r3, [pc, #220]	; (8005f24 <xTaskIncrementTick+0x15c>)
 8005e48:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4c:	601a      	str	r2, [r3, #0]
					break;
 8005e4e:	e03f      	b.n	8005ed0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e50:	4b31      	ldr	r3, [pc, #196]	; (8005f18 <xTaskIncrementTick+0x150>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d203      	bcs.n	8005e70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e68:	4a2e      	ldr	r2, [pc, #184]	; (8005f24 <xTaskIncrementTick+0x15c>)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e6e:	e02f      	b.n	8005ed0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe febf 	bl	8004bf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3318      	adds	r3, #24
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe feb6 	bl	8004bf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e90:	4b25      	ldr	r3, [pc, #148]	; (8005f28 <xTaskIncrementTick+0x160>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d903      	bls.n	8005ea0 <xTaskIncrementTick+0xd8>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	4a22      	ldr	r2, [pc, #136]	; (8005f28 <xTaskIncrementTick+0x160>)
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4a1f      	ldr	r2, [pc, #124]	; (8005f2c <xTaskIncrementTick+0x164>)
 8005eae:	441a      	add	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	f7fe fe41 	bl	8004b3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec0:	4b1b      	ldr	r3, [pc, #108]	; (8005f30 <xTaskIncrementTick+0x168>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d3b8      	bcc.n	8005e3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ece:	e7b5      	b.n	8005e3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ed0:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <xTaskIncrementTick+0x168>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed6:	4915      	ldr	r1, [pc, #84]	; (8005f2c <xTaskIncrementTick+0x164>)
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d901      	bls.n	8005eec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005eec:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <xTaskIncrementTick+0x16c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	e004      	b.n	8005f04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005efa:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <xTaskIncrementTick+0x170>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3301      	adds	r3, #1
 8005f00:	4a0d      	ldr	r2, [pc, #52]	; (8005f38 <xTaskIncrementTick+0x170>)
 8005f02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f04:	697b      	ldr	r3, [r7, #20]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000f84 	.word	0x20000f84
 8005f14:	20000f60 	.word	0x20000f60
 8005f18:	20000f14 	.word	0x20000f14
 8005f1c:	20000f18 	.word	0x20000f18
 8005f20:	20000f74 	.word	0x20000f74
 8005f24:	20000f7c 	.word	0x20000f7c
 8005f28:	20000f64 	.word	0x20000f64
 8005f2c:	20000a8c 	.word	0x20000a8c
 8005f30:	20000a88 	.word	0x20000a88
 8005f34:	20000f70 	.word	0x20000f70
 8005f38:	20000f6c 	.word	0x20000f6c

08005f3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f42:	4b2a      	ldr	r3, [pc, #168]	; (8005fec <vTaskSwitchContext+0xb0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f4a:	4b29      	ldr	r3, [pc, #164]	; (8005ff0 <vTaskSwitchContext+0xb4>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f50:	e046      	b.n	8005fe0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005f52:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <vTaskSwitchContext+0xb4>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f58:	4b26      	ldr	r3, [pc, #152]	; (8005ff4 <vTaskSwitchContext+0xb8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e010      	b.n	8005f82 <vTaskSwitchContext+0x46>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <vTaskSwitchContext+0x40>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	607b      	str	r3, [r7, #4]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <vTaskSwitchContext+0x3e>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	491d      	ldr	r1, [pc, #116]	; (8005ff8 <vTaskSwitchContext+0xbc>)
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0e4      	beq.n	8005f60 <vTaskSwitchContext+0x24>
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <vTaskSwitchContext+0xbc>)
 8005fa2:	4413      	add	r3, r2
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	605a      	str	r2, [r3, #4]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d104      	bne.n	8005fc6 <vTaskSwitchContext+0x8a>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	4a0b      	ldr	r2, [pc, #44]	; (8005ffc <vTaskSwitchContext+0xc0>)
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	4a08      	ldr	r2, [pc, #32]	; (8005ff4 <vTaskSwitchContext+0xb8>)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fd6:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <vTaskSwitchContext+0xc0>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3354      	adds	r3, #84	; 0x54
 8005fdc:	4a08      	ldr	r2, [pc, #32]	; (8006000 <vTaskSwitchContext+0xc4>)
 8005fde:	6013      	str	r3, [r2, #0]
}
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	20000f84 	.word	0x20000f84
 8005ff0:	20000f70 	.word	0x20000f70
 8005ff4:	20000f64 	.word	0x20000f64
 8005ff8:	20000a8c 	.word	0x20000a8c
 8005ffc:	20000a88 	.word	0x20000a88
 8006000:	20000078 	.word	0x20000078

08006004 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	60fb      	str	r3, [r7, #12]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <vTaskPlaceOnEventList+0x44>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3318      	adds	r3, #24
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fe fda7 	bl	8004b86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006038:	2101      	movs	r1, #1
 800603a:	6838      	ldr	r0, [r7, #0]
 800603c:	f000 fa80 	bl	8006540 <prvAddCurrentTaskToDelayedList>
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000a88 	.word	0x20000a88

0800604c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	617b      	str	r3, [r7, #20]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006074:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3318      	adds	r3, #24
 800607a:	4619      	mov	r1, r3
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7fe fd5e 	bl	8004b3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006088:	f04f 33ff 	mov.w	r3, #4294967295
 800608c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	68b8      	ldr	r0, [r7, #8]
 8006092:	f000 fa55 	bl	8006540 <prvAddCurrentTaskToDelayedList>
	}
 8006096:	bf00      	nop
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000a88 	.word	0x20000a88

080060a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	60fb      	str	r3, [r7, #12]
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3318      	adds	r3, #24
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe fd8f 	bl	8004bf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060da:	4b1e      	ldr	r3, [pc, #120]	; (8006154 <xTaskRemoveFromEventList+0xb0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d11d      	bne.n	800611e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe fd86 	bl	8004bf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	4b19      	ldr	r3, [pc, #100]	; (8006158 <xTaskRemoveFromEventList+0xb4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d903      	bls.n	8006100 <xTaskRemoveFromEventList+0x5c>
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	4a16      	ldr	r2, [pc, #88]	; (8006158 <xTaskRemoveFromEventList+0xb4>)
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4a13      	ldr	r2, [pc, #76]	; (800615c <xTaskRemoveFromEventList+0xb8>)
 800610e:	441a      	add	r2, r3
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	3304      	adds	r3, #4
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f7fe fd11 	bl	8004b3e <vListInsertEnd>
 800611c:	e005      	b.n	800612a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	3318      	adds	r3, #24
 8006122:	4619      	mov	r1, r3
 8006124:	480e      	ldr	r0, [pc, #56]	; (8006160 <xTaskRemoveFromEventList+0xbc>)
 8006126:	f7fe fd0a 	bl	8004b3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <xTaskRemoveFromEventList+0xc0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	429a      	cmp	r2, r3
 8006136:	d905      	bls.n	8006144 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <xTaskRemoveFromEventList+0xc4>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e001      	b.n	8006148 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006148:	697b      	ldr	r3, [r7, #20]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000f84 	.word	0x20000f84
 8006158:	20000f64 	.word	0x20000f64
 800615c:	20000a8c 	.word	0x20000a8c
 8006160:	20000f1c 	.word	0x20000f1c
 8006164:	20000a88 	.word	0x20000a88
 8006168:	20000f70 	.word	0x20000f70

0800616c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006174:	4b06      	ldr	r3, [pc, #24]	; (8006190 <vTaskInternalSetTimeOutState+0x24>)
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800617c:	4b05      	ldr	r3, [pc, #20]	; (8006194 <vTaskInternalSetTimeOutState+0x28>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	605a      	str	r2, [r3, #4]
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	20000f74 	.word	0x20000f74
 8006194:	20000f60 	.word	0x20000f60

08006198 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	613b      	str	r3, [r7, #16]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	60fb      	str	r3, [r7, #12]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80061da:	f000 fe83 	bl	8006ee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061de:	4b1d      	ldr	r3, [pc, #116]	; (8006254 <xTaskCheckForTimeOut+0xbc>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d102      	bne.n	80061fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	e023      	b.n	8006246 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b15      	ldr	r3, [pc, #84]	; (8006258 <xTaskCheckForTimeOut+0xc0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d007      	beq.n	800621a <xTaskCheckForTimeOut+0x82>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e015      	b.n	8006246 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	429a      	cmp	r2, r3
 8006222:	d20b      	bcs.n	800623c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ff9b 	bl	800616c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	e004      	b.n	8006246 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006242:	2301      	movs	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006246:	f000 fe7d 	bl	8006f44 <vPortExitCritical>

	return xReturn;
 800624a:	69fb      	ldr	r3, [r7, #28]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000f60 	.word	0x20000f60
 8006258:	20000f74 	.word	0x20000f74

0800625c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006260:	4b03      	ldr	r3, [pc, #12]	; (8006270 <vTaskMissedYield+0x14>)
 8006262:	2201      	movs	r2, #1
 8006264:	601a      	str	r2, [r3, #0]
}
 8006266:	bf00      	nop
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	20000f70 	.word	0x20000f70

08006274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800627c:	f000 f852 	bl	8006324 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <prvIdleTask+0x28>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d9f9      	bls.n	800627c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <prvIdleTask+0x2c>)
 800628a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006298:	e7f0      	b.n	800627c <prvIdleTask+0x8>
 800629a:	bf00      	nop
 800629c:	20000a8c 	.word	0x20000a8c
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062aa:	2300      	movs	r3, #0
 80062ac:	607b      	str	r3, [r7, #4]
 80062ae:	e00c      	b.n	80062ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4a12      	ldr	r2, [pc, #72]	; (8006304 <prvInitialiseTaskLists+0x60>)
 80062bc:	4413      	add	r3, r2
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe fc10 	bl	8004ae4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3301      	adds	r3, #1
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b37      	cmp	r3, #55	; 0x37
 80062ce:	d9ef      	bls.n	80062b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062d0:	480d      	ldr	r0, [pc, #52]	; (8006308 <prvInitialiseTaskLists+0x64>)
 80062d2:	f7fe fc07 	bl	8004ae4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062d6:	480d      	ldr	r0, [pc, #52]	; (800630c <prvInitialiseTaskLists+0x68>)
 80062d8:	f7fe fc04 	bl	8004ae4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062dc:	480c      	ldr	r0, [pc, #48]	; (8006310 <prvInitialiseTaskLists+0x6c>)
 80062de:	f7fe fc01 	bl	8004ae4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062e2:	480c      	ldr	r0, [pc, #48]	; (8006314 <prvInitialiseTaskLists+0x70>)
 80062e4:	f7fe fbfe 	bl	8004ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062e8:	480b      	ldr	r0, [pc, #44]	; (8006318 <prvInitialiseTaskLists+0x74>)
 80062ea:	f7fe fbfb 	bl	8004ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <prvInitialiseTaskLists+0x78>)
 80062f0:	4a05      	ldr	r2, [pc, #20]	; (8006308 <prvInitialiseTaskLists+0x64>)
 80062f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062f4:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <prvInitialiseTaskLists+0x7c>)
 80062f6:	4a05      	ldr	r2, [pc, #20]	; (800630c <prvInitialiseTaskLists+0x68>)
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000a8c 	.word	0x20000a8c
 8006308:	20000eec 	.word	0x20000eec
 800630c:	20000f00 	.word	0x20000f00
 8006310:	20000f1c 	.word	0x20000f1c
 8006314:	20000f30 	.word	0x20000f30
 8006318:	20000f48 	.word	0x20000f48
 800631c:	20000f14 	.word	0x20000f14
 8006320:	20000f18 	.word	0x20000f18

08006324 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800632a:	e019      	b.n	8006360 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800632c:	f000 fdda 	bl	8006ee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006330:	4b10      	ldr	r3, [pc, #64]	; (8006374 <prvCheckTasksWaitingTermination+0x50>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe fc5b 	bl	8004bf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006342:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <prvCheckTasksWaitingTermination+0x54>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3b01      	subs	r3, #1
 8006348:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <prvCheckTasksWaitingTermination+0x54>)
 800634a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <prvCheckTasksWaitingTermination+0x58>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3b01      	subs	r3, #1
 8006352:	4a0a      	ldr	r2, [pc, #40]	; (800637c <prvCheckTasksWaitingTermination+0x58>)
 8006354:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006356:	f000 fdf5 	bl	8006f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f810 	bl	8006380 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006360:	4b06      	ldr	r3, [pc, #24]	; (800637c <prvCheckTasksWaitingTermination+0x58>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e1      	bne.n	800632c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000f30 	.word	0x20000f30
 8006378:	20000f5c 	.word	0x20000f5c
 800637c:	20000f44 	.word	0x20000f44

08006380 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3354      	adds	r3, #84	; 0x54
 800638c:	4618      	mov	r0, r3
 800638e:	f001 f9f5 	bl	800777c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006398:	2b00      	cmp	r3, #0
 800639a:	d108      	bne.n	80063ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 ff8d 	bl	80072c0 <vPortFree>
				vPortFree( pxTCB );
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 ff8a 	bl	80072c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063ac:	e018      	b.n	80063e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d103      	bne.n	80063c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 ff81 	bl	80072c0 <vPortFree>
	}
 80063be:	e00f      	b.n	80063e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d00a      	beq.n	80063e0 <prvDeleteTCB+0x60>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	60fb      	str	r3, [r7, #12]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <prvDeleteTCB+0x5e>
	}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ee:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <prvResetNextTaskUnblockTime+0x38>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063f8:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <prvResetNextTaskUnblockTime+0x3c>)
 80063fa:	f04f 32ff 	mov.w	r2, #4294967295
 80063fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006400:	e008      	b.n	8006414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006402:	4b07      	ldr	r3, [pc, #28]	; (8006420 <prvResetNextTaskUnblockTime+0x38>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	4a04      	ldr	r2, [pc, #16]	; (8006424 <prvResetNextTaskUnblockTime+0x3c>)
 8006412:	6013      	str	r3, [r2, #0]
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	20000f14 	.word	0x20000f14
 8006424:	20000f7c 	.word	0x20000f7c

08006428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800642e:	4b0b      	ldr	r3, [pc, #44]	; (800645c <xTaskGetSchedulerState+0x34>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006436:	2301      	movs	r3, #1
 8006438:	607b      	str	r3, [r7, #4]
 800643a:	e008      	b.n	800644e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800643c:	4b08      	ldr	r3, [pc, #32]	; (8006460 <xTaskGetSchedulerState+0x38>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006444:	2302      	movs	r3, #2
 8006446:	607b      	str	r3, [r7, #4]
 8006448:	e001      	b.n	800644e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800644a:	2300      	movs	r3, #0
 800644c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800644e:	687b      	ldr	r3, [r7, #4]
	}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000f68 	.word	0x20000f68
 8006460:	20000f84 	.word	0x20000f84

08006464 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d056      	beq.n	8006528 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800647a:	4b2e      	ldr	r3, [pc, #184]	; (8006534 <xTaskPriorityDisinherit+0xd0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	429a      	cmp	r2, r3
 8006482:	d00a      	beq.n	800649a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	60fb      	str	r3, [r7, #12]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	60bb      	str	r3, [r7, #8]
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064bc:	1e5a      	subs	r2, r3, #1
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d02c      	beq.n	8006528 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d128      	bne.n	8006528 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	3304      	adds	r3, #4
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe fb8c 	bl	8004bf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	4b0f      	ldr	r3, [pc, #60]	; (8006538 <xTaskPriorityDisinherit+0xd4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d903      	bls.n	8006508 <xTaskPriorityDisinherit+0xa4>
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	4a0c      	ldr	r2, [pc, #48]	; (8006538 <xTaskPriorityDisinherit+0xd4>)
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650c:	4613      	mov	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4a09      	ldr	r2, [pc, #36]	; (800653c <xTaskPriorityDisinherit+0xd8>)
 8006516:	441a      	add	r2, r3
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f7fe fb0d 	bl	8004b3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006524:	2301      	movs	r3, #1
 8006526:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006528:	697b      	ldr	r3, [r7, #20]
	}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000a88 	.word	0x20000a88
 8006538:	20000f64 	.word	0x20000f64
 800653c:	20000a8c 	.word	0x20000a8c

08006540 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800654a:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006550:	4b20      	ldr	r3, [pc, #128]	; (80065d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3304      	adds	r3, #4
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe fb4e 	bl	8004bf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006562:	d10a      	bne.n	800657a <prvAddCurrentTaskToDelayedList+0x3a>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800656a:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3304      	adds	r3, #4
 8006570:	4619      	mov	r1, r3
 8006572:	4819      	ldr	r0, [pc, #100]	; (80065d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006574:	f7fe fae3 	bl	8004b3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006578:	e026      	b.n	80065c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006582:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	429a      	cmp	r2, r3
 8006590:	d209      	bcs.n	80065a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006592:	4b12      	ldr	r3, [pc, #72]	; (80065dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3304      	adds	r3, #4
 800659c:	4619      	mov	r1, r3
 800659e:	4610      	mov	r0, r2
 80065a0:	f7fe faf1 	bl	8004b86 <vListInsert>
}
 80065a4:	e010      	b.n	80065c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065a6:	4b0e      	ldr	r3, [pc, #56]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4619      	mov	r1, r3
 80065b2:	4610      	mov	r0, r2
 80065b4:	f7fe fae7 	bl	8004b86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d202      	bcs.n	80065c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065c2:	4a08      	ldr	r2, [pc, #32]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6013      	str	r3, [r2, #0]
}
 80065c8:	bf00      	nop
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20000f60 	.word	0x20000f60
 80065d4:	20000a88 	.word	0x20000a88
 80065d8:	20000f48 	.word	0x20000f48
 80065dc:	20000f18 	.word	0x20000f18
 80065e0:	20000f14 	.word	0x20000f14
 80065e4:	20000f7c 	.word	0x20000f7c

080065e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065f2:	f000 fb07 	bl	8006c04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065f6:	4b1c      	ldr	r3, [pc, #112]	; (8006668 <xTimerCreateTimerTask+0x80>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d021      	beq.n	8006642 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006602:	2300      	movs	r3, #0
 8006604:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006606:	1d3a      	adds	r2, r7, #4
 8006608:	f107 0108 	add.w	r1, r7, #8
 800660c:	f107 030c 	add.w	r3, r7, #12
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fa4d 	bl	8004ab0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	9202      	str	r2, [sp, #8]
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	2302      	movs	r3, #2
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	460a      	mov	r2, r1
 8006628:	4910      	ldr	r1, [pc, #64]	; (800666c <xTimerCreateTimerTask+0x84>)
 800662a:	4811      	ldr	r0, [pc, #68]	; (8006670 <xTimerCreateTimerTask+0x88>)
 800662c:	f7ff f8b4 	bl	8005798 <xTaskCreateStatic>
 8006630:	4603      	mov	r3, r0
 8006632:	4a10      	ldr	r2, [pc, #64]	; (8006674 <xTimerCreateTimerTask+0x8c>)
 8006634:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006636:	4b0f      	ldr	r3, [pc, #60]	; (8006674 <xTimerCreateTimerTask+0x8c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800663e:	2301      	movs	r3, #1
 8006640:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	613b      	str	r3, [r7, #16]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800665e:	697b      	ldr	r3, [r7, #20]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20000fb8 	.word	0x20000fb8
 800666c:	08008058 	.word	0x08008058
 8006670:	080067ad 	.word	0x080067ad
 8006674:	20000fbc 	.word	0x20000fbc

08006678 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006686:	2300      	movs	r3, #0
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	623b      	str	r3, [r7, #32]
}
 80066a2:	bf00      	nop
 80066a4:	e7fe      	b.n	80066a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066a6:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <xTimerGenericCommand+0x98>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d02a      	beq.n	8006704 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b05      	cmp	r3, #5
 80066be:	dc18      	bgt.n	80066f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066c0:	f7ff feb2 	bl	8006428 <xTaskGetSchedulerState>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d109      	bne.n	80066de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066ca:	4b11      	ldr	r3, [pc, #68]	; (8006710 <xTimerGenericCommand+0x98>)
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	f107 0110 	add.w	r1, r7, #16
 80066d2:	2300      	movs	r3, #0
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	f7fe fbf7 	bl	8004ec8 <xQueueGenericSend>
 80066da:	6278      	str	r0, [r7, #36]	; 0x24
 80066dc:	e012      	b.n	8006704 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066de:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <xTimerGenericCommand+0x98>)
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	f107 0110 	add.w	r1, r7, #16
 80066e6:	2300      	movs	r3, #0
 80066e8:	2200      	movs	r2, #0
 80066ea:	f7fe fbed 	bl	8004ec8 <xQueueGenericSend>
 80066ee:	6278      	str	r0, [r7, #36]	; 0x24
 80066f0:	e008      	b.n	8006704 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <xTimerGenericCommand+0x98>)
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	f107 0110 	add.w	r1, r7, #16
 80066fa:	2300      	movs	r3, #0
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	f7fe fce1 	bl	80050c4 <xQueueGenericSendFromISR>
 8006702:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006706:	4618      	mov	r0, r3
 8006708:	3728      	adds	r7, #40	; 0x28
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000fb8 	.word	0x20000fb8

08006714 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af02      	add	r7, sp, #8
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800671e:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <prvProcessExpiredTimer+0x94>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	3304      	adds	r3, #4
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe fa63 	bl	8004bf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d022      	beq.n	8006786 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	699a      	ldr	r2, [r3, #24]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	18d1      	adds	r1, r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	6978      	ldr	r0, [r7, #20]
 800674e:	f000 f8d1 	bl	80068f4 <prvInsertTimerInActiveList>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01f      	beq.n	8006798 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006758:	2300      	movs	r3, #0
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	2300      	movs	r3, #0
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	2100      	movs	r1, #0
 8006762:	6978      	ldr	r0, [r7, #20]
 8006764:	f7ff ff88 	bl	8006678 <xTimerGenericCommand>
 8006768:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d113      	bne.n	8006798 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	60fb      	str	r3, [r7, #12]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	b2da      	uxtb	r2, r3
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	6978      	ldr	r0, [r7, #20]
 800679e:	4798      	blx	r3
}
 80067a0:	bf00      	nop
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000fb0 	.word	0x20000fb0

080067ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067b4:	f107 0308 	add.w	r3, r7, #8
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 f857 	bl	800686c <prvGetNextExpireTime>
 80067be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f803 	bl	80067d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067ca:	f000 f8d5 	bl	8006978 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067ce:	e7f1      	b.n	80067b4 <prvTimerTask+0x8>

080067d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067da:	f7ff fa39 	bl	8005c50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067de:	f107 0308 	add.w	r3, r7, #8
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f866 	bl	80068b4 <prvSampleTimeNow>
 80067e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d130      	bne.n	8006852 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10a      	bne.n	800680c <prvProcessTimerOrBlockTask+0x3c>
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d806      	bhi.n	800680c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067fe:	f7ff fa35 	bl	8005c6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff85 	bl	8006714 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800680a:	e024      	b.n	8006856 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006812:	4b13      	ldr	r3, [pc, #76]	; (8006860 <prvProcessTimerOrBlockTask+0x90>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <prvProcessTimerOrBlockTask+0x50>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <prvProcessTimerOrBlockTask+0x52>
 8006820:	2300      	movs	r3, #0
 8006822:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <prvProcessTimerOrBlockTask+0x94>)
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	4619      	mov	r1, r3
 8006832:	f7fe ff7d 	bl	8005730 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006836:	f7ff fa19 	bl	8005c6c <xTaskResumeAll>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <prvProcessTimerOrBlockTask+0x98>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
}
 8006850:	e001      	b.n	8006856 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006852:	f7ff fa0b 	bl	8005c6c <xTaskResumeAll>
}
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000fb4 	.word	0x20000fb4
 8006864:	20000fb8 	.word	0x20000fb8
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <prvGetNextExpireTime+0x44>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <prvGetNextExpireTime+0x16>
 800687e:	2201      	movs	r2, #1
 8006880:	e000      	b.n	8006884 <prvGetNextExpireTime+0x18>
 8006882:	2200      	movs	r2, #0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <prvGetNextExpireTime+0x44>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	e001      	b.n	80068a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	20000fb0 	.word	0x20000fb0

080068b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068bc:	f7ff fa74 	bl	8005da8 <xTaskGetTickCount>
 80068c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068c2:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <prvSampleTimeNow+0x3c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d205      	bcs.n	80068d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068cc:	f000 f936 	bl	8006b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e002      	b.n	80068de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068de:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <prvSampleTimeNow+0x3c>)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068e4:	68fb      	ldr	r3, [r7, #12]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000fc0 	.word	0x20000fc0

080068f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d812      	bhi.n	8006940 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e01b      	b.n	8006966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800692e:	4b10      	ldr	r3, [pc, #64]	; (8006970 <prvInsertTimerInActiveList+0x7c>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fe f924 	bl	8004b86 <vListInsert>
 800693e:	e012      	b.n	8006966 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d206      	bcs.n	8006956 <prvInsertTimerInActiveList+0x62>
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d302      	bcc.n	8006956 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e007      	b.n	8006966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006956:	4b07      	ldr	r3, [pc, #28]	; (8006974 <prvInsertTimerInActiveList+0x80>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3304      	adds	r3, #4
 800695e:	4619      	mov	r1, r3
 8006960:	4610      	mov	r0, r2
 8006962:	f7fe f910 	bl	8004b86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006966:	697b      	ldr	r3, [r7, #20]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000fb4 	.word	0x20000fb4
 8006974:	20000fb0 	.word	0x20000fb0

08006978 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08e      	sub	sp, #56	; 0x38
 800697c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800697e:	e0ca      	b.n	8006b16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	da18      	bge.n	80069b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	3304      	adds	r3, #4
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	61fb      	str	r3, [r7, #28]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ae:	6850      	ldr	r0, [r2, #4]
 80069b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b2:	6892      	ldr	r2, [r2, #8]
 80069b4:	4611      	mov	r1, r2
 80069b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f2c0 80aa 	blt.w	8006b14 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	3304      	adds	r3, #4
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe f911 	bl	8004bf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069d6:	463b      	mov	r3, r7
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ff6b 	bl	80068b4 <prvSampleTimeNow>
 80069de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b09      	cmp	r3, #9
 80069e4:	f200 8097 	bhi.w	8006b16 <prvProcessReceivedCommands+0x19e>
 80069e8:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <prvProcessReceivedCommands+0x78>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a19 	.word	0x08006a19
 80069f4:	08006a19 	.word	0x08006a19
 80069f8:	08006a19 	.word	0x08006a19
 80069fc:	08006a8d 	.word	0x08006a8d
 8006a00:	08006aa1 	.word	0x08006aa1
 8006a04:	08006aeb 	.word	0x08006aeb
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a19 	.word	0x08006a19
 8006a10:	08006a8d 	.word	0x08006a8d
 8006a14:	08006aa1 	.word	0x08006aa1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a1e:	f043 0301 	orr.w	r3, r3, #1
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	18d1      	adds	r1, r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a38:	f7ff ff5c 	bl	80068f4 <prvInsertTimerInActiveList>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d069      	beq.n	8006b16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d05e      	beq.n	8006b16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	441a      	add	r2, r3
 8006a60:	2300      	movs	r3, #0
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	2300      	movs	r3, #0
 8006a66:	2100      	movs	r1, #0
 8006a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6a:	f7ff fe05 	bl	8006678 <xTimerGenericCommand>
 8006a6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d14f      	bne.n	8006b16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	61bb      	str	r3, [r7, #24]
}
 8006a88:	bf00      	nop
 8006a8a:	e7fe      	b.n	8006a8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a9e:	e03a      	b.n	8006b16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	617b      	str	r3, [r7, #20]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	18d1      	adds	r1, r2, r3
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae4:	f7ff ff06 	bl	80068f4 <prvInsertTimerInActiveList>
					break;
 8006ae8:	e015      	b.n	8006b16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d103      	bne.n	8006b00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006afa:	f000 fbe1 	bl	80072c0 <vPortFree>
 8006afe:	e00a      	b.n	8006b16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b12:	e000      	b.n	8006b16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b16:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <prvProcessReceivedCommands+0x1c0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	1d39      	adds	r1, r7, #4
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe fb6c 	bl	80051fc <xQueueReceive>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f47f af2a 	bne.w	8006980 <prvProcessReceivedCommands+0x8>
	}
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	3730      	adds	r7, #48	; 0x30
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000fb8 	.word	0x20000fb8

08006b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b42:	e048      	b.n	8006bd6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b44:	4b2d      	ldr	r3, [pc, #180]	; (8006bfc <prvSwitchTimerLists+0xc0>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b4e:	4b2b      	ldr	r3, [pc, #172]	; (8006bfc <prvSwitchTimerLists+0xc0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe f84b 	bl	8004bf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d02e      	beq.n	8006bd6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4413      	add	r3, r2
 8006b80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d90e      	bls.n	8006ba8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b96:	4b19      	ldr	r3, [pc, #100]	; (8006bfc <prvSwitchTimerLists+0xc0>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f7fd fff0 	bl	8004b86 <vListInsert>
 8006ba6:	e016      	b.n	8006bd6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ba8:	2300      	movs	r3, #0
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	2300      	movs	r3, #0
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff fd60 	bl	8006678 <xTimerGenericCommand>
 8006bb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	603b      	str	r3, [r7, #0]
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bd6:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <prvSwitchTimerLists+0xc0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1b1      	bne.n	8006b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006be0:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <prvSwitchTimerLists+0xc0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006be6:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <prvSwitchTimerLists+0xc4>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a04      	ldr	r2, [pc, #16]	; (8006bfc <prvSwitchTimerLists+0xc0>)
 8006bec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bee:	4a04      	ldr	r2, [pc, #16]	; (8006c00 <prvSwitchTimerLists+0xc4>)
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	6013      	str	r3, [r2, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20000fb0 	.word	0x20000fb0
 8006c00:	20000fb4 	.word	0x20000fb4

08006c04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c0a:	f000 f96b 	bl	8006ee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c0e:	4b15      	ldr	r3, [pc, #84]	; (8006c64 <prvCheckForValidListAndQueue+0x60>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d120      	bne.n	8006c58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c16:	4814      	ldr	r0, [pc, #80]	; (8006c68 <prvCheckForValidListAndQueue+0x64>)
 8006c18:	f7fd ff64 	bl	8004ae4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c1c:	4813      	ldr	r0, [pc, #76]	; (8006c6c <prvCheckForValidListAndQueue+0x68>)
 8006c1e:	f7fd ff61 	bl	8004ae4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c22:	4b13      	ldr	r3, [pc, #76]	; (8006c70 <prvCheckForValidListAndQueue+0x6c>)
 8006c24:	4a10      	ldr	r2, [pc, #64]	; (8006c68 <prvCheckForValidListAndQueue+0x64>)
 8006c26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c28:	4b12      	ldr	r3, [pc, #72]	; (8006c74 <prvCheckForValidListAndQueue+0x70>)
 8006c2a:	4a10      	ldr	r2, [pc, #64]	; (8006c6c <prvCheckForValidListAndQueue+0x68>)
 8006c2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c2e:	2300      	movs	r3, #0
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	4b11      	ldr	r3, [pc, #68]	; (8006c78 <prvCheckForValidListAndQueue+0x74>)
 8006c34:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <prvCheckForValidListAndQueue+0x78>)
 8006c36:	2110      	movs	r1, #16
 8006c38:	200a      	movs	r0, #10
 8006c3a:	f7fe f86f 	bl	8004d1c <xQueueGenericCreateStatic>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	4a08      	ldr	r2, [pc, #32]	; (8006c64 <prvCheckForValidListAndQueue+0x60>)
 8006c42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c44:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <prvCheckForValidListAndQueue+0x60>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <prvCheckForValidListAndQueue+0x60>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	490b      	ldr	r1, [pc, #44]	; (8006c80 <prvCheckForValidListAndQueue+0x7c>)
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe fd42 	bl	80056dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c58:	f000 f974 	bl	8006f44 <vPortExitCritical>
}
 8006c5c:	bf00      	nop
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000fb8 	.word	0x20000fb8
 8006c68:	20000f88 	.word	0x20000f88
 8006c6c:	20000f9c 	.word	0x20000f9c
 8006c70:	20000fb0 	.word	0x20000fb0
 8006c74:	20000fb4 	.word	0x20000fb4
 8006c78:	20001064 	.word	0x20001064
 8006c7c:	20000fc4 	.word	0x20000fc4
 8006c80:	08008060 	.word	0x08008060

08006c84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3b04      	subs	r3, #4
 8006c94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3b04      	subs	r3, #4
 8006ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f023 0201 	bic.w	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3b04      	subs	r3, #4
 8006cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cb4:	4a0c      	ldr	r2, [pc, #48]	; (8006ce8 <pxPortInitialiseStack+0x64>)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3b14      	subs	r3, #20
 8006cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3b04      	subs	r3, #4
 8006cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f06f 0202 	mvn.w	r2, #2
 8006cd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3b20      	subs	r3, #32
 8006cd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cda:	68fb      	ldr	r3, [r7, #12]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	08006ced 	.word	0x08006ced

08006cec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cf6:	4b12      	ldr	r3, [pc, #72]	; (8006d40 <prvTaskExitError+0x54>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfe:	d00a      	beq.n	8006d16 <prvTaskExitError+0x2a>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	60fb      	str	r3, [r7, #12]
}
 8006d12:	bf00      	nop
 8006d14:	e7fe      	b.n	8006d14 <prvTaskExitError+0x28>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	60bb      	str	r3, [r7, #8]
}
 8006d28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d2a:	bf00      	nop
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0fc      	beq.n	8006d2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	20000074 	.word	0x20000074
	...

08006d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d50:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <pxCurrentTCBConst2>)
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	6808      	ldr	r0, [r1, #0]
 8006d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5a:	f380 8809 	msr	PSP, r0
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f04f 0000 	mov.w	r0, #0
 8006d66:	f380 8811 	msr	BASEPRI, r0
 8006d6a:	4770      	bx	lr
 8006d6c:	f3af 8000 	nop.w

08006d70 <pxCurrentTCBConst2>:
 8006d70:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop

08006d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d78:	4808      	ldr	r0, [pc, #32]	; (8006d9c <prvPortStartFirstTask+0x24>)
 8006d7a:	6800      	ldr	r0, [r0, #0]
 8006d7c:	6800      	ldr	r0, [r0, #0]
 8006d7e:	f380 8808 	msr	MSP, r0
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8814 	msr	CONTROL, r0
 8006d8a:	b662      	cpsie	i
 8006d8c:	b661      	cpsie	f
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	df00      	svc	0
 8006d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d9a:	bf00      	nop
 8006d9c:	e000ed08 	.word	0xe000ed08

08006da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006da6:	4b46      	ldr	r3, [pc, #280]	; (8006ec0 <xPortStartScheduler+0x120>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a46      	ldr	r2, [pc, #280]	; (8006ec4 <xPortStartScheduler+0x124>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d10a      	bne.n	8006dc6 <xPortStartScheduler+0x26>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	613b      	str	r3, [r7, #16]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006dc6:	4b3e      	ldr	r3, [pc, #248]	; (8006ec0 <xPortStartScheduler+0x120>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a3f      	ldr	r2, [pc, #252]	; (8006ec8 <xPortStartScheduler+0x128>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d10a      	bne.n	8006de6 <xPortStartScheduler+0x46>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60fb      	str	r3, [r7, #12]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006de6:	4b39      	ldr	r3, [pc, #228]	; (8006ecc <xPortStartScheduler+0x12c>)
 8006de8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	22ff      	movs	r2, #255	; 0xff
 8006df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	4b31      	ldr	r3, [pc, #196]	; (8006ed0 <xPortStartScheduler+0x130>)
 8006e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e0e:	4b31      	ldr	r3, [pc, #196]	; (8006ed4 <xPortStartScheduler+0x134>)
 8006e10:	2207      	movs	r2, #7
 8006e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e14:	e009      	b.n	8006e2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e16:	4b2f      	ldr	r3, [pc, #188]	; (8006ed4 <xPortStartScheduler+0x134>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	4a2d      	ldr	r2, [pc, #180]	; (8006ed4 <xPortStartScheduler+0x134>)
 8006e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e32:	2b80      	cmp	r3, #128	; 0x80
 8006e34:	d0ef      	beq.n	8006e16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e36:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <xPortStartScheduler+0x134>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f1c3 0307 	rsb	r3, r3, #7
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d00a      	beq.n	8006e58 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	60bb      	str	r3, [r7, #8]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e58:	4b1e      	ldr	r3, [pc, #120]	; (8006ed4 <xPortStartScheduler+0x134>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <xPortStartScheduler+0x134>)
 8006e60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e62:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <xPortStartScheduler+0x134>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e6a:	4a1a      	ldr	r2, [pc, #104]	; (8006ed4 <xPortStartScheduler+0x134>)
 8006e6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e76:	4b18      	ldr	r3, [pc, #96]	; (8006ed8 <xPortStartScheduler+0x138>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <xPortStartScheduler+0x138>)
 8006e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e82:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <xPortStartScheduler+0x138>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <xPortStartScheduler+0x138>)
 8006e88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e8e:	f000 f8dd 	bl	800704c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e92:	4b12      	ldr	r3, [pc, #72]	; (8006edc <xPortStartScheduler+0x13c>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e98:	f000 f8fc 	bl	8007094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e9c:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <xPortStartScheduler+0x140>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a0f      	ldr	r2, [pc, #60]	; (8006ee0 <xPortStartScheduler+0x140>)
 8006ea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ea8:	f7ff ff66 	bl	8006d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006eac:	f7ff f846 	bl	8005f3c <vTaskSwitchContext>
	prvTaskExitError();
 8006eb0:	f7ff ff1c 	bl	8006cec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	e000ed00 	.word	0xe000ed00
 8006ec4:	410fc271 	.word	0x410fc271
 8006ec8:	410fc270 	.word	0x410fc270
 8006ecc:	e000e400 	.word	0xe000e400
 8006ed0:	200010b4 	.word	0x200010b4
 8006ed4:	200010b8 	.word	0x200010b8
 8006ed8:	e000ed20 	.word	0xe000ed20
 8006edc:	20000074 	.word	0x20000074
 8006ee0:	e000ef34 	.word	0xe000ef34

08006ee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	607b      	str	r3, [r7, #4]
}
 8006efc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006efe:	4b0f      	ldr	r3, [pc, #60]	; (8006f3c <vPortEnterCritical+0x58>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	4a0d      	ldr	r2, [pc, #52]	; (8006f3c <vPortEnterCritical+0x58>)
 8006f06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f08:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <vPortEnterCritical+0x58>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d10f      	bne.n	8006f30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <vPortEnterCritical+0x5c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	603b      	str	r3, [r7, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	e7fe      	b.n	8006f2e <vPortEnterCritical+0x4a>
	}
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000074 	.word	0x20000074
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f4a:	4b12      	ldr	r3, [pc, #72]	; (8006f94 <vPortExitCritical+0x50>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <vPortExitCritical+0x24>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	607b      	str	r3, [r7, #4]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f68:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <vPortExitCritical+0x50>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <vPortExitCritical+0x50>)
 8006f70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f72:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <vPortExitCritical+0x50>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d105      	bne.n	8006f86 <vPortExitCritical+0x42>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	f383 8811 	msr	BASEPRI, r3
}
 8006f84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000074 	.word	0x20000074
	...

08006fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fa0:	f3ef 8009 	mrs	r0, PSP
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	4b15      	ldr	r3, [pc, #84]	; (8007000 <pxCurrentTCBConst>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	f01e 0f10 	tst.w	lr, #16
 8006fb0:	bf08      	it	eq
 8006fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fba:	6010      	str	r0, [r2, #0]
 8006fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fc4:	f380 8811 	msr	BASEPRI, r0
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f7fe ffb4 	bl	8005f3c <vTaskSwitchContext>
 8006fd4:	f04f 0000 	mov.w	r0, #0
 8006fd8:	f380 8811 	msr	BASEPRI, r0
 8006fdc:	bc09      	pop	{r0, r3}
 8006fde:	6819      	ldr	r1, [r3, #0]
 8006fe0:	6808      	ldr	r0, [r1, #0]
 8006fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe6:	f01e 0f10 	tst.w	lr, #16
 8006fea:	bf08      	it	eq
 8006fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ff0:	f380 8809 	msr	PSP, r0
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	f3af 8000 	nop.w

08007000 <pxCurrentTCBConst>:
 8007000:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop

08007008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	607b      	str	r3, [r7, #4]
}
 8007020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007022:	f7fe fed1 	bl	8005dc8 <xTaskIncrementTick>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800702c:	4b06      	ldr	r3, [pc, #24]	; (8007048 <xPortSysTickHandler+0x40>)
 800702e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	2300      	movs	r3, #0
 8007036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f383 8811 	msr	BASEPRI, r3
}
 800703e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <vPortSetupTimerInterrupt+0x34>)
 8007052:	2200      	movs	r2, #0
 8007054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007056:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <vPortSetupTimerInterrupt+0x38>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800705c:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <vPortSetupTimerInterrupt+0x3c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a0a      	ldr	r2, [pc, #40]	; (800708c <vPortSetupTimerInterrupt+0x40>)
 8007062:	fba2 2303 	umull	r2, r3, r2, r3
 8007066:	099b      	lsrs	r3, r3, #6
 8007068:	4a09      	ldr	r2, [pc, #36]	; (8007090 <vPortSetupTimerInterrupt+0x44>)
 800706a:	3b01      	subs	r3, #1
 800706c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800706e:	4b04      	ldr	r3, [pc, #16]	; (8007080 <vPortSetupTimerInterrupt+0x34>)
 8007070:	2207      	movs	r2, #7
 8007072:	601a      	str	r2, [r3, #0]
}
 8007074:	bf00      	nop
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	e000e010 	.word	0xe000e010
 8007084:	e000e018 	.word	0xe000e018
 8007088:	20000068 	.word	0x20000068
 800708c:	10624dd3 	.word	0x10624dd3
 8007090:	e000e014 	.word	0xe000e014

08007094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070a4 <vPortEnableVFP+0x10>
 8007098:	6801      	ldr	r1, [r0, #0]
 800709a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800709e:	6001      	str	r1, [r0, #0]
 80070a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070a2:	bf00      	nop
 80070a4:	e000ed88 	.word	0xe000ed88

080070a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070ae:	f3ef 8305 	mrs	r3, IPSR
 80070b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b0f      	cmp	r3, #15
 80070b8:	d914      	bls.n	80070e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070ba:	4a17      	ldr	r2, [pc, #92]	; (8007118 <vPortValidateInterruptPriority+0x70>)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070c4:	4b15      	ldr	r3, [pc, #84]	; (800711c <vPortValidateInterruptPriority+0x74>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	7afa      	ldrb	r2, [r7, #11]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d20a      	bcs.n	80070e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	607b      	str	r3, [r7, #4]
}
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070e4:	4b0e      	ldr	r3, [pc, #56]	; (8007120 <vPortValidateInterruptPriority+0x78>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070ec:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <vPortValidateInterruptPriority+0x7c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d90a      	bls.n	800710a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	603b      	str	r3, [r7, #0]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <vPortValidateInterruptPriority+0x60>
	}
 800710a:	bf00      	nop
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	e000e3f0 	.word	0xe000e3f0
 800711c:	200010b4 	.word	0x200010b4
 8007120:	e000ed0c 	.word	0xe000ed0c
 8007124:	200010b8 	.word	0x200010b8

08007128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08a      	sub	sp, #40	; 0x28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007130:	2300      	movs	r3, #0
 8007132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007134:	f7fe fd8c 	bl	8005c50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007138:	4b5b      	ldr	r3, [pc, #364]	; (80072a8 <pvPortMalloc+0x180>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007140:	f000 f920 	bl	8007384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007144:	4b59      	ldr	r3, [pc, #356]	; (80072ac <pvPortMalloc+0x184>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4013      	ands	r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	f040 8093 	bne.w	8007278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01d      	beq.n	8007194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007158:	2208      	movs	r2, #8
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4413      	add	r3, r2
 800715e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	2b00      	cmp	r3, #0
 8007168:	d014      	beq.n	8007194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f023 0307 	bic.w	r3, r3, #7
 8007170:	3308      	adds	r3, #8
 8007172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f003 0307 	and.w	r3, r3, #7
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <pvPortMalloc+0x6c>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	617b      	str	r3, [r7, #20]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d06e      	beq.n	8007278 <pvPortMalloc+0x150>
 800719a:	4b45      	ldr	r3, [pc, #276]	; (80072b0 <pvPortMalloc+0x188>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d869      	bhi.n	8007278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071a4:	4b43      	ldr	r3, [pc, #268]	; (80072b4 <pvPortMalloc+0x18c>)
 80071a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071a8:	4b42      	ldr	r3, [pc, #264]	; (80072b4 <pvPortMalloc+0x18c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071ae:	e004      	b.n	80071ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d903      	bls.n	80071cc <pvPortMalloc+0xa4>
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1f1      	bne.n	80071b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071cc:	4b36      	ldr	r3, [pc, #216]	; (80072a8 <pvPortMalloc+0x180>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d050      	beq.n	8007278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2208      	movs	r2, #8
 80071dc:	4413      	add	r3, r2
 80071de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	1ad2      	subs	r2, r2, r3
 80071f0:	2308      	movs	r3, #8
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d91f      	bls.n	8007238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4413      	add	r3, r2
 80071fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <pvPortMalloc+0xf8>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	613b      	str	r3, [r7, #16]
}
 800721c:	bf00      	nop
 800721e:	e7fe      	b.n	800721e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	1ad2      	subs	r2, r2, r3
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007232:	69b8      	ldr	r0, [r7, #24]
 8007234:	f000 f908 	bl	8007448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007238:	4b1d      	ldr	r3, [pc, #116]	; (80072b0 <pvPortMalloc+0x188>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	4a1b      	ldr	r2, [pc, #108]	; (80072b0 <pvPortMalloc+0x188>)
 8007244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007246:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <pvPortMalloc+0x188>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <pvPortMalloc+0x190>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d203      	bcs.n	800725a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007252:	4b17      	ldr	r3, [pc, #92]	; (80072b0 <pvPortMalloc+0x188>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a18      	ldr	r2, [pc, #96]	; (80072b8 <pvPortMalloc+0x190>)
 8007258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	4b13      	ldr	r3, [pc, #76]	; (80072ac <pvPortMalloc+0x184>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	431a      	orrs	r2, r3
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800726e:	4b13      	ldr	r3, [pc, #76]	; (80072bc <pvPortMalloc+0x194>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3301      	adds	r3, #1
 8007274:	4a11      	ldr	r2, [pc, #68]	; (80072bc <pvPortMalloc+0x194>)
 8007276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007278:	f7fe fcf8 	bl	8005c6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <pvPortMalloc+0x174>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	60fb      	str	r3, [r7, #12]
}
 8007298:	bf00      	nop
 800729a:	e7fe      	b.n	800729a <pvPortMalloc+0x172>
	return pvReturn;
 800729c:	69fb      	ldr	r3, [r7, #28]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3728      	adds	r7, #40	; 0x28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20004cc4 	.word	0x20004cc4
 80072ac:	20004cd8 	.word	0x20004cd8
 80072b0:	20004cc8 	.word	0x20004cc8
 80072b4:	20004cbc 	.word	0x20004cbc
 80072b8:	20004ccc 	.word	0x20004ccc
 80072bc:	20004cd0 	.word	0x20004cd0

080072c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d04d      	beq.n	800736e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072d2:	2308      	movs	r3, #8
 80072d4:	425b      	negs	r3, r3
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4413      	add	r3, r2
 80072da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	4b24      	ldr	r3, [pc, #144]	; (8007378 <vPortFree+0xb8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4013      	ands	r3, r2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <vPortFree+0x44>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	60fb      	str	r3, [r7, #12]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <vPortFree+0x62>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	60bb      	str	r3, [r7, #8]
}
 800731e:	bf00      	nop
 8007320:	e7fe      	b.n	8007320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	4b14      	ldr	r3, [pc, #80]	; (8007378 <vPortFree+0xb8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01e      	beq.n	800736e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d11a      	bne.n	800736e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <vPortFree+0xb8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	43db      	mvns	r3, r3
 8007342:	401a      	ands	r2, r3
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007348:	f7fe fc82 	bl	8005c50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <vPortFree+0xbc>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4413      	add	r3, r2
 8007356:	4a09      	ldr	r2, [pc, #36]	; (800737c <vPortFree+0xbc>)
 8007358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800735a:	6938      	ldr	r0, [r7, #16]
 800735c:	f000 f874 	bl	8007448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <vPortFree+0xc0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3301      	adds	r3, #1
 8007366:	4a06      	ldr	r2, [pc, #24]	; (8007380 <vPortFree+0xc0>)
 8007368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800736a:	f7fe fc7f 	bl	8005c6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800736e:	bf00      	nop
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20004cd8 	.word	0x20004cd8
 800737c:	20004cc8 	.word	0x20004cc8
 8007380:	20004cd4 	.word	0x20004cd4

08007384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800738a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800738e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007390:	4b27      	ldr	r3, [pc, #156]	; (8007430 <prvHeapInit+0xac>)
 8007392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00c      	beq.n	80073b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3307      	adds	r3, #7
 80073a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0307 	bic.w	r3, r3, #7
 80073aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	4a1f      	ldr	r2, [pc, #124]	; (8007430 <prvHeapInit+0xac>)
 80073b4:	4413      	add	r3, r2
 80073b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073bc:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <prvHeapInit+0xb0>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073c2:	4b1c      	ldr	r3, [pc, #112]	; (8007434 <prvHeapInit+0xb0>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4413      	add	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073d0:	2208      	movs	r2, #8
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 0307 	bic.w	r3, r3, #7
 80073de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a15      	ldr	r2, [pc, #84]	; (8007438 <prvHeapInit+0xb4>)
 80073e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073e6:	4b14      	ldr	r3, [pc, #80]	; (8007438 <prvHeapInit+0xb4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2200      	movs	r2, #0
 80073ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073ee:	4b12      	ldr	r3, [pc, #72]	; (8007438 <prvHeapInit+0xb4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	1ad2      	subs	r2, r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007404:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <prvHeapInit+0xb4>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	4a0a      	ldr	r2, [pc, #40]	; (800743c <prvHeapInit+0xb8>)
 8007412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	4a09      	ldr	r2, [pc, #36]	; (8007440 <prvHeapInit+0xbc>)
 800741a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800741c:	4b09      	ldr	r3, [pc, #36]	; (8007444 <prvHeapInit+0xc0>)
 800741e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007422:	601a      	str	r2, [r3, #0]
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	200010bc 	.word	0x200010bc
 8007434:	20004cbc 	.word	0x20004cbc
 8007438:	20004cc4 	.word	0x20004cc4
 800743c:	20004ccc 	.word	0x20004ccc
 8007440:	20004cc8 	.word	0x20004cc8
 8007444:	20004cd8 	.word	0x20004cd8

08007448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007450:	4b28      	ldr	r3, [pc, #160]	; (80074f4 <prvInsertBlockIntoFreeList+0xac>)
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	e002      	b.n	800745c <prvInsertBlockIntoFreeList+0x14>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	429a      	cmp	r2, r3
 8007464:	d8f7      	bhi.n	8007456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4413      	add	r3, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	429a      	cmp	r2, r3
 8007476:	d108      	bne.n	800748a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	441a      	add	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	441a      	add	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d118      	bne.n	80074d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b15      	ldr	r3, [pc, #84]	; (80074f8 <prvInsertBlockIntoFreeList+0xb0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d00d      	beq.n	80074c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	441a      	add	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	e008      	b.n	80074d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvInsertBlockIntoFreeList+0xb0>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e003      	b.n	80074d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d002      	beq.n	80074e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20004cbc 	.word	0x20004cbc
 80074f8:	20004cc4 	.word	0x20004cc4

080074fc <__errno>:
 80074fc:	4b01      	ldr	r3, [pc, #4]	; (8007504 <__errno+0x8>)
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000078 	.word	0x20000078

08007508 <__libc_init_array>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	4d0d      	ldr	r5, [pc, #52]	; (8007540 <__libc_init_array+0x38>)
 800750c:	4c0d      	ldr	r4, [pc, #52]	; (8007544 <__libc_init_array+0x3c>)
 800750e:	1b64      	subs	r4, r4, r5
 8007510:	10a4      	asrs	r4, r4, #2
 8007512:	2600      	movs	r6, #0
 8007514:	42a6      	cmp	r6, r4
 8007516:	d109      	bne.n	800752c <__libc_init_array+0x24>
 8007518:	4d0b      	ldr	r5, [pc, #44]	; (8007548 <__libc_init_array+0x40>)
 800751a:	4c0c      	ldr	r4, [pc, #48]	; (800754c <__libc_init_array+0x44>)
 800751c:	f000 fd1c 	bl	8007f58 <_init>
 8007520:	1b64      	subs	r4, r4, r5
 8007522:	10a4      	asrs	r4, r4, #2
 8007524:	2600      	movs	r6, #0
 8007526:	42a6      	cmp	r6, r4
 8007528:	d105      	bne.n	8007536 <__libc_init_array+0x2e>
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007530:	4798      	blx	r3
 8007532:	3601      	adds	r6, #1
 8007534:	e7ee      	b.n	8007514 <__libc_init_array+0xc>
 8007536:	f855 3b04 	ldr.w	r3, [r5], #4
 800753a:	4798      	blx	r3
 800753c:	3601      	adds	r6, #1
 800753e:	e7f2      	b.n	8007526 <__libc_init_array+0x1e>
 8007540:	0800aa44 	.word	0x0800aa44
 8007544:	0800aa44 	.word	0x0800aa44
 8007548:	0800aa44 	.word	0x0800aa44
 800754c:	0800aa48 	.word	0x0800aa48

08007550 <__retarget_lock_acquire_recursive>:
 8007550:	4770      	bx	lr

08007552 <__retarget_lock_release_recursive>:
 8007552:	4770      	bx	lr

08007554 <malloc>:
 8007554:	4b02      	ldr	r3, [pc, #8]	; (8007560 <malloc+0xc>)
 8007556:	4601      	mov	r1, r0
 8007558:	6818      	ldr	r0, [r3, #0]
 800755a:	f000 b88d 	b.w	8007678 <_malloc_r>
 800755e:	bf00      	nop
 8007560:	20000078 	.word	0x20000078

08007564 <free>:
 8007564:	4b02      	ldr	r3, [pc, #8]	; (8007570 <free+0xc>)
 8007566:	4601      	mov	r1, r0
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	f000 b819 	b.w	80075a0 <_free_r>
 800756e:	bf00      	nop
 8007570:	20000078 	.word	0x20000078

08007574 <memcpy>:
 8007574:	440a      	add	r2, r1
 8007576:	4291      	cmp	r1, r2
 8007578:	f100 33ff 	add.w	r3, r0, #4294967295
 800757c:	d100      	bne.n	8007580 <memcpy+0xc>
 800757e:	4770      	bx	lr
 8007580:	b510      	push	{r4, lr}
 8007582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800758a:	4291      	cmp	r1, r2
 800758c:	d1f9      	bne.n	8007582 <memcpy+0xe>
 800758e:	bd10      	pop	{r4, pc}

08007590 <memset>:
 8007590:	4402      	add	r2, r0
 8007592:	4603      	mov	r3, r0
 8007594:	4293      	cmp	r3, r2
 8007596:	d100      	bne.n	800759a <memset+0xa>
 8007598:	4770      	bx	lr
 800759a:	f803 1b01 	strb.w	r1, [r3], #1
 800759e:	e7f9      	b.n	8007594 <memset+0x4>

080075a0 <_free_r>:
 80075a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a2:	2900      	cmp	r1, #0
 80075a4:	d044      	beq.n	8007630 <_free_r+0x90>
 80075a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075aa:	9001      	str	r0, [sp, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f1a1 0404 	sub.w	r4, r1, #4
 80075b2:	bfb8      	it	lt
 80075b4:	18e4      	addlt	r4, r4, r3
 80075b6:	f000 f981 	bl	80078bc <__malloc_lock>
 80075ba:	4a1e      	ldr	r2, [pc, #120]	; (8007634 <_free_r+0x94>)
 80075bc:	9801      	ldr	r0, [sp, #4]
 80075be:	6813      	ldr	r3, [r2, #0]
 80075c0:	b933      	cbnz	r3, 80075d0 <_free_r+0x30>
 80075c2:	6063      	str	r3, [r4, #4]
 80075c4:	6014      	str	r4, [r2, #0]
 80075c6:	b003      	add	sp, #12
 80075c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075cc:	f000 b97c 	b.w	80078c8 <__malloc_unlock>
 80075d0:	42a3      	cmp	r3, r4
 80075d2:	d908      	bls.n	80075e6 <_free_r+0x46>
 80075d4:	6825      	ldr	r5, [r4, #0]
 80075d6:	1961      	adds	r1, r4, r5
 80075d8:	428b      	cmp	r3, r1
 80075da:	bf01      	itttt	eq
 80075dc:	6819      	ldreq	r1, [r3, #0]
 80075de:	685b      	ldreq	r3, [r3, #4]
 80075e0:	1949      	addeq	r1, r1, r5
 80075e2:	6021      	streq	r1, [r4, #0]
 80075e4:	e7ed      	b.n	80075c2 <_free_r+0x22>
 80075e6:	461a      	mov	r2, r3
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	b10b      	cbz	r3, 80075f0 <_free_r+0x50>
 80075ec:	42a3      	cmp	r3, r4
 80075ee:	d9fa      	bls.n	80075e6 <_free_r+0x46>
 80075f0:	6811      	ldr	r1, [r2, #0]
 80075f2:	1855      	adds	r5, r2, r1
 80075f4:	42a5      	cmp	r5, r4
 80075f6:	d10b      	bne.n	8007610 <_free_r+0x70>
 80075f8:	6824      	ldr	r4, [r4, #0]
 80075fa:	4421      	add	r1, r4
 80075fc:	1854      	adds	r4, r2, r1
 80075fe:	42a3      	cmp	r3, r4
 8007600:	6011      	str	r1, [r2, #0]
 8007602:	d1e0      	bne.n	80075c6 <_free_r+0x26>
 8007604:	681c      	ldr	r4, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	6053      	str	r3, [r2, #4]
 800760a:	4421      	add	r1, r4
 800760c:	6011      	str	r1, [r2, #0]
 800760e:	e7da      	b.n	80075c6 <_free_r+0x26>
 8007610:	d902      	bls.n	8007618 <_free_r+0x78>
 8007612:	230c      	movs	r3, #12
 8007614:	6003      	str	r3, [r0, #0]
 8007616:	e7d6      	b.n	80075c6 <_free_r+0x26>
 8007618:	6825      	ldr	r5, [r4, #0]
 800761a:	1961      	adds	r1, r4, r5
 800761c:	428b      	cmp	r3, r1
 800761e:	bf04      	itt	eq
 8007620:	6819      	ldreq	r1, [r3, #0]
 8007622:	685b      	ldreq	r3, [r3, #4]
 8007624:	6063      	str	r3, [r4, #4]
 8007626:	bf04      	itt	eq
 8007628:	1949      	addeq	r1, r1, r5
 800762a:	6021      	streq	r1, [r4, #0]
 800762c:	6054      	str	r4, [r2, #4]
 800762e:	e7ca      	b.n	80075c6 <_free_r+0x26>
 8007630:	b003      	add	sp, #12
 8007632:	bd30      	pop	{r4, r5, pc}
 8007634:	20004ce0 	.word	0x20004ce0

08007638 <sbrk_aligned>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	4e0e      	ldr	r6, [pc, #56]	; (8007674 <sbrk_aligned+0x3c>)
 800763c:	460c      	mov	r4, r1
 800763e:	6831      	ldr	r1, [r6, #0]
 8007640:	4605      	mov	r5, r0
 8007642:	b911      	cbnz	r1, 800764a <sbrk_aligned+0x12>
 8007644:	f000 f8f6 	bl	8007834 <_sbrk_r>
 8007648:	6030      	str	r0, [r6, #0]
 800764a:	4621      	mov	r1, r4
 800764c:	4628      	mov	r0, r5
 800764e:	f000 f8f1 	bl	8007834 <_sbrk_r>
 8007652:	1c43      	adds	r3, r0, #1
 8007654:	d00a      	beq.n	800766c <sbrk_aligned+0x34>
 8007656:	1cc4      	adds	r4, r0, #3
 8007658:	f024 0403 	bic.w	r4, r4, #3
 800765c:	42a0      	cmp	r0, r4
 800765e:	d007      	beq.n	8007670 <sbrk_aligned+0x38>
 8007660:	1a21      	subs	r1, r4, r0
 8007662:	4628      	mov	r0, r5
 8007664:	f000 f8e6 	bl	8007834 <_sbrk_r>
 8007668:	3001      	adds	r0, #1
 800766a:	d101      	bne.n	8007670 <sbrk_aligned+0x38>
 800766c:	f04f 34ff 	mov.w	r4, #4294967295
 8007670:	4620      	mov	r0, r4
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	20004ce4 	.word	0x20004ce4

08007678 <_malloc_r>:
 8007678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767c:	1ccd      	adds	r5, r1, #3
 800767e:	f025 0503 	bic.w	r5, r5, #3
 8007682:	3508      	adds	r5, #8
 8007684:	2d0c      	cmp	r5, #12
 8007686:	bf38      	it	cc
 8007688:	250c      	movcc	r5, #12
 800768a:	2d00      	cmp	r5, #0
 800768c:	4607      	mov	r7, r0
 800768e:	db01      	blt.n	8007694 <_malloc_r+0x1c>
 8007690:	42a9      	cmp	r1, r5
 8007692:	d905      	bls.n	80076a0 <_malloc_r+0x28>
 8007694:	230c      	movs	r3, #12
 8007696:	603b      	str	r3, [r7, #0]
 8007698:	2600      	movs	r6, #0
 800769a:	4630      	mov	r0, r6
 800769c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a0:	4e2e      	ldr	r6, [pc, #184]	; (800775c <_malloc_r+0xe4>)
 80076a2:	f000 f90b 	bl	80078bc <__malloc_lock>
 80076a6:	6833      	ldr	r3, [r6, #0]
 80076a8:	461c      	mov	r4, r3
 80076aa:	bb34      	cbnz	r4, 80076fa <_malloc_r+0x82>
 80076ac:	4629      	mov	r1, r5
 80076ae:	4638      	mov	r0, r7
 80076b0:	f7ff ffc2 	bl	8007638 <sbrk_aligned>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	4604      	mov	r4, r0
 80076b8:	d14d      	bne.n	8007756 <_malloc_r+0xde>
 80076ba:	6834      	ldr	r4, [r6, #0]
 80076bc:	4626      	mov	r6, r4
 80076be:	2e00      	cmp	r6, #0
 80076c0:	d140      	bne.n	8007744 <_malloc_r+0xcc>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	4631      	mov	r1, r6
 80076c6:	4638      	mov	r0, r7
 80076c8:	eb04 0803 	add.w	r8, r4, r3
 80076cc:	f000 f8b2 	bl	8007834 <_sbrk_r>
 80076d0:	4580      	cmp	r8, r0
 80076d2:	d13a      	bne.n	800774a <_malloc_r+0xd2>
 80076d4:	6821      	ldr	r1, [r4, #0]
 80076d6:	3503      	adds	r5, #3
 80076d8:	1a6d      	subs	r5, r5, r1
 80076da:	f025 0503 	bic.w	r5, r5, #3
 80076de:	3508      	adds	r5, #8
 80076e0:	2d0c      	cmp	r5, #12
 80076e2:	bf38      	it	cc
 80076e4:	250c      	movcc	r5, #12
 80076e6:	4629      	mov	r1, r5
 80076e8:	4638      	mov	r0, r7
 80076ea:	f7ff ffa5 	bl	8007638 <sbrk_aligned>
 80076ee:	3001      	adds	r0, #1
 80076f0:	d02b      	beq.n	800774a <_malloc_r+0xd2>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	442b      	add	r3, r5
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	e00e      	b.n	8007718 <_malloc_r+0xa0>
 80076fa:	6822      	ldr	r2, [r4, #0]
 80076fc:	1b52      	subs	r2, r2, r5
 80076fe:	d41e      	bmi.n	800773e <_malloc_r+0xc6>
 8007700:	2a0b      	cmp	r2, #11
 8007702:	d916      	bls.n	8007732 <_malloc_r+0xba>
 8007704:	1961      	adds	r1, r4, r5
 8007706:	42a3      	cmp	r3, r4
 8007708:	6025      	str	r5, [r4, #0]
 800770a:	bf18      	it	ne
 800770c:	6059      	strne	r1, [r3, #4]
 800770e:	6863      	ldr	r3, [r4, #4]
 8007710:	bf08      	it	eq
 8007712:	6031      	streq	r1, [r6, #0]
 8007714:	5162      	str	r2, [r4, r5]
 8007716:	604b      	str	r3, [r1, #4]
 8007718:	4638      	mov	r0, r7
 800771a:	f104 060b 	add.w	r6, r4, #11
 800771e:	f000 f8d3 	bl	80078c8 <__malloc_unlock>
 8007722:	f026 0607 	bic.w	r6, r6, #7
 8007726:	1d23      	adds	r3, r4, #4
 8007728:	1af2      	subs	r2, r6, r3
 800772a:	d0b6      	beq.n	800769a <_malloc_r+0x22>
 800772c:	1b9b      	subs	r3, r3, r6
 800772e:	50a3      	str	r3, [r4, r2]
 8007730:	e7b3      	b.n	800769a <_malloc_r+0x22>
 8007732:	6862      	ldr	r2, [r4, #4]
 8007734:	42a3      	cmp	r3, r4
 8007736:	bf0c      	ite	eq
 8007738:	6032      	streq	r2, [r6, #0]
 800773a:	605a      	strne	r2, [r3, #4]
 800773c:	e7ec      	b.n	8007718 <_malloc_r+0xa0>
 800773e:	4623      	mov	r3, r4
 8007740:	6864      	ldr	r4, [r4, #4]
 8007742:	e7b2      	b.n	80076aa <_malloc_r+0x32>
 8007744:	4634      	mov	r4, r6
 8007746:	6876      	ldr	r6, [r6, #4]
 8007748:	e7b9      	b.n	80076be <_malloc_r+0x46>
 800774a:	230c      	movs	r3, #12
 800774c:	603b      	str	r3, [r7, #0]
 800774e:	4638      	mov	r0, r7
 8007750:	f000 f8ba 	bl	80078c8 <__malloc_unlock>
 8007754:	e7a1      	b.n	800769a <_malloc_r+0x22>
 8007756:	6025      	str	r5, [r4, #0]
 8007758:	e7de      	b.n	8007718 <_malloc_r+0xa0>
 800775a:	bf00      	nop
 800775c:	20004ce0 	.word	0x20004ce0

08007760 <cleanup_glue>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	460c      	mov	r4, r1
 8007764:	6809      	ldr	r1, [r1, #0]
 8007766:	4605      	mov	r5, r0
 8007768:	b109      	cbz	r1, 800776e <cleanup_glue+0xe>
 800776a:	f7ff fff9 	bl	8007760 <cleanup_glue>
 800776e:	4621      	mov	r1, r4
 8007770:	4628      	mov	r0, r5
 8007772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007776:	f7ff bf13 	b.w	80075a0 <_free_r>
	...

0800777c <_reclaim_reent>:
 800777c:	4b2c      	ldr	r3, [pc, #176]	; (8007830 <_reclaim_reent+0xb4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4283      	cmp	r3, r0
 8007782:	b570      	push	{r4, r5, r6, lr}
 8007784:	4604      	mov	r4, r0
 8007786:	d051      	beq.n	800782c <_reclaim_reent+0xb0>
 8007788:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800778a:	b143      	cbz	r3, 800779e <_reclaim_reent+0x22>
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d14a      	bne.n	8007828 <_reclaim_reent+0xac>
 8007792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007794:	6819      	ldr	r1, [r3, #0]
 8007796:	b111      	cbz	r1, 800779e <_reclaim_reent+0x22>
 8007798:	4620      	mov	r0, r4
 800779a:	f7ff ff01 	bl	80075a0 <_free_r>
 800779e:	6961      	ldr	r1, [r4, #20]
 80077a0:	b111      	cbz	r1, 80077a8 <_reclaim_reent+0x2c>
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7ff fefc 	bl	80075a0 <_free_r>
 80077a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80077aa:	b111      	cbz	r1, 80077b2 <_reclaim_reent+0x36>
 80077ac:	4620      	mov	r0, r4
 80077ae:	f7ff fef7 	bl	80075a0 <_free_r>
 80077b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80077b4:	b111      	cbz	r1, 80077bc <_reclaim_reent+0x40>
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7ff fef2 	bl	80075a0 <_free_r>
 80077bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80077be:	b111      	cbz	r1, 80077c6 <_reclaim_reent+0x4a>
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7ff feed 	bl	80075a0 <_free_r>
 80077c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077c8:	b111      	cbz	r1, 80077d0 <_reclaim_reent+0x54>
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7ff fee8 	bl	80075a0 <_free_r>
 80077d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80077d2:	b111      	cbz	r1, 80077da <_reclaim_reent+0x5e>
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7ff fee3 	bl	80075a0 <_free_r>
 80077da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80077dc:	b111      	cbz	r1, 80077e4 <_reclaim_reent+0x68>
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff fede 	bl	80075a0 <_free_r>
 80077e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077e6:	b111      	cbz	r1, 80077ee <_reclaim_reent+0x72>
 80077e8:	4620      	mov	r0, r4
 80077ea:	f7ff fed9 	bl	80075a0 <_free_r>
 80077ee:	69a3      	ldr	r3, [r4, #24]
 80077f0:	b1e3      	cbz	r3, 800782c <_reclaim_reent+0xb0>
 80077f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077f4:	4620      	mov	r0, r4
 80077f6:	4798      	blx	r3
 80077f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80077fa:	b1b9      	cbz	r1, 800782c <_reclaim_reent+0xb0>
 80077fc:	4620      	mov	r0, r4
 80077fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007802:	f7ff bfad 	b.w	8007760 <cleanup_glue>
 8007806:	5949      	ldr	r1, [r1, r5]
 8007808:	b941      	cbnz	r1, 800781c <_reclaim_reent+0xa0>
 800780a:	3504      	adds	r5, #4
 800780c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800780e:	2d80      	cmp	r5, #128	; 0x80
 8007810:	68d9      	ldr	r1, [r3, #12]
 8007812:	d1f8      	bne.n	8007806 <_reclaim_reent+0x8a>
 8007814:	4620      	mov	r0, r4
 8007816:	f7ff fec3 	bl	80075a0 <_free_r>
 800781a:	e7ba      	b.n	8007792 <_reclaim_reent+0x16>
 800781c:	680e      	ldr	r6, [r1, #0]
 800781e:	4620      	mov	r0, r4
 8007820:	f7ff febe 	bl	80075a0 <_free_r>
 8007824:	4631      	mov	r1, r6
 8007826:	e7ef      	b.n	8007808 <_reclaim_reent+0x8c>
 8007828:	2500      	movs	r5, #0
 800782a:	e7ef      	b.n	800780c <_reclaim_reent+0x90>
 800782c:	bd70      	pop	{r4, r5, r6, pc}
 800782e:	bf00      	nop
 8007830:	20000078 	.word	0x20000078

08007834 <_sbrk_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d06      	ldr	r5, [pc, #24]	; (8007850 <_sbrk_r+0x1c>)
 8007838:	2300      	movs	r3, #0
 800783a:	4604      	mov	r4, r0
 800783c:	4608      	mov	r0, r1
 800783e:	602b      	str	r3, [r5, #0]
 8007840:	f7f9 ff42 	bl	80016c8 <_sbrk>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_sbrk_r+0x1a>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	b103      	cbz	r3, 800784e <_sbrk_r+0x1a>
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	20004ce8 	.word	0x20004ce8

08007854 <sniprintf>:
 8007854:	b40c      	push	{r2, r3}
 8007856:	b530      	push	{r4, r5, lr}
 8007858:	4b17      	ldr	r3, [pc, #92]	; (80078b8 <sniprintf+0x64>)
 800785a:	1e0c      	subs	r4, r1, #0
 800785c:	681d      	ldr	r5, [r3, #0]
 800785e:	b09d      	sub	sp, #116	; 0x74
 8007860:	da08      	bge.n	8007874 <sniprintf+0x20>
 8007862:	238b      	movs	r3, #139	; 0x8b
 8007864:	602b      	str	r3, [r5, #0]
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	b01d      	add	sp, #116	; 0x74
 800786c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007870:	b002      	add	sp, #8
 8007872:	4770      	bx	lr
 8007874:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007878:	f8ad 3014 	strh.w	r3, [sp, #20]
 800787c:	bf14      	ite	ne
 800787e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007882:	4623      	moveq	r3, r4
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	9307      	str	r3, [sp, #28]
 8007888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800788c:	9002      	str	r0, [sp, #8]
 800788e:	9006      	str	r0, [sp, #24]
 8007890:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007894:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007896:	ab21      	add	r3, sp, #132	; 0x84
 8007898:	a902      	add	r1, sp, #8
 800789a:	4628      	mov	r0, r5
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	f000 f875 	bl	800798c <_svfiprintf_r>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	bfbc      	itt	lt
 80078a6:	238b      	movlt	r3, #139	; 0x8b
 80078a8:	602b      	strlt	r3, [r5, #0]
 80078aa:	2c00      	cmp	r4, #0
 80078ac:	d0dd      	beq.n	800786a <sniprintf+0x16>
 80078ae:	9b02      	ldr	r3, [sp, #8]
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	e7d9      	b.n	800786a <sniprintf+0x16>
 80078b6:	bf00      	nop
 80078b8:	20000078 	.word	0x20000078

080078bc <__malloc_lock>:
 80078bc:	4801      	ldr	r0, [pc, #4]	; (80078c4 <__malloc_lock+0x8>)
 80078be:	f7ff be47 	b.w	8007550 <__retarget_lock_acquire_recursive>
 80078c2:	bf00      	nop
 80078c4:	20004cdc 	.word	0x20004cdc

080078c8 <__malloc_unlock>:
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <__malloc_unlock+0x8>)
 80078ca:	f7ff be42 	b.w	8007552 <__retarget_lock_release_recursive>
 80078ce:	bf00      	nop
 80078d0:	20004cdc 	.word	0x20004cdc

080078d4 <__ssputs_r>:
 80078d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d8:	688e      	ldr	r6, [r1, #8]
 80078da:	429e      	cmp	r6, r3
 80078dc:	4682      	mov	sl, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	4690      	mov	r8, r2
 80078e2:	461f      	mov	r7, r3
 80078e4:	d838      	bhi.n	8007958 <__ssputs_r+0x84>
 80078e6:	898a      	ldrh	r2, [r1, #12]
 80078e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078ec:	d032      	beq.n	8007954 <__ssputs_r+0x80>
 80078ee:	6825      	ldr	r5, [r4, #0]
 80078f0:	6909      	ldr	r1, [r1, #16]
 80078f2:	eba5 0901 	sub.w	r9, r5, r1
 80078f6:	6965      	ldr	r5, [r4, #20]
 80078f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007900:	3301      	adds	r3, #1
 8007902:	444b      	add	r3, r9
 8007904:	106d      	asrs	r5, r5, #1
 8007906:	429d      	cmp	r5, r3
 8007908:	bf38      	it	cc
 800790a:	461d      	movcc	r5, r3
 800790c:	0553      	lsls	r3, r2, #21
 800790e:	d531      	bpl.n	8007974 <__ssputs_r+0xa0>
 8007910:	4629      	mov	r1, r5
 8007912:	f7ff feb1 	bl	8007678 <_malloc_r>
 8007916:	4606      	mov	r6, r0
 8007918:	b950      	cbnz	r0, 8007930 <__ssputs_r+0x5c>
 800791a:	230c      	movs	r3, #12
 800791c:	f8ca 3000 	str.w	r3, [sl]
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007926:	81a3      	strh	r3, [r4, #12]
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007930:	6921      	ldr	r1, [r4, #16]
 8007932:	464a      	mov	r2, r9
 8007934:	f7ff fe1e 	bl	8007574 <memcpy>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800793e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007942:	81a3      	strh	r3, [r4, #12]
 8007944:	6126      	str	r6, [r4, #16]
 8007946:	6165      	str	r5, [r4, #20]
 8007948:	444e      	add	r6, r9
 800794a:	eba5 0509 	sub.w	r5, r5, r9
 800794e:	6026      	str	r6, [r4, #0]
 8007950:	60a5      	str	r5, [r4, #8]
 8007952:	463e      	mov	r6, r7
 8007954:	42be      	cmp	r6, r7
 8007956:	d900      	bls.n	800795a <__ssputs_r+0x86>
 8007958:	463e      	mov	r6, r7
 800795a:	6820      	ldr	r0, [r4, #0]
 800795c:	4632      	mov	r2, r6
 800795e:	4641      	mov	r1, r8
 8007960:	f000 faa8 	bl	8007eb4 <memmove>
 8007964:	68a3      	ldr	r3, [r4, #8]
 8007966:	1b9b      	subs	r3, r3, r6
 8007968:	60a3      	str	r3, [r4, #8]
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	4433      	add	r3, r6
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	2000      	movs	r0, #0
 8007972:	e7db      	b.n	800792c <__ssputs_r+0x58>
 8007974:	462a      	mov	r2, r5
 8007976:	f000 fab7 	bl	8007ee8 <_realloc_r>
 800797a:	4606      	mov	r6, r0
 800797c:	2800      	cmp	r0, #0
 800797e:	d1e1      	bne.n	8007944 <__ssputs_r+0x70>
 8007980:	6921      	ldr	r1, [r4, #16]
 8007982:	4650      	mov	r0, sl
 8007984:	f7ff fe0c 	bl	80075a0 <_free_r>
 8007988:	e7c7      	b.n	800791a <__ssputs_r+0x46>
	...

0800798c <_svfiprintf_r>:
 800798c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	4698      	mov	r8, r3
 8007992:	898b      	ldrh	r3, [r1, #12]
 8007994:	061b      	lsls	r3, r3, #24
 8007996:	b09d      	sub	sp, #116	; 0x74
 8007998:	4607      	mov	r7, r0
 800799a:	460d      	mov	r5, r1
 800799c:	4614      	mov	r4, r2
 800799e:	d50e      	bpl.n	80079be <_svfiprintf_r+0x32>
 80079a0:	690b      	ldr	r3, [r1, #16]
 80079a2:	b963      	cbnz	r3, 80079be <_svfiprintf_r+0x32>
 80079a4:	2140      	movs	r1, #64	; 0x40
 80079a6:	f7ff fe67 	bl	8007678 <_malloc_r>
 80079aa:	6028      	str	r0, [r5, #0]
 80079ac:	6128      	str	r0, [r5, #16]
 80079ae:	b920      	cbnz	r0, 80079ba <_svfiprintf_r+0x2e>
 80079b0:	230c      	movs	r3, #12
 80079b2:	603b      	str	r3, [r7, #0]
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	e0d1      	b.n	8007b5e <_svfiprintf_r+0x1d2>
 80079ba:	2340      	movs	r3, #64	; 0x40
 80079bc:	616b      	str	r3, [r5, #20]
 80079be:	2300      	movs	r3, #0
 80079c0:	9309      	str	r3, [sp, #36]	; 0x24
 80079c2:	2320      	movs	r3, #32
 80079c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80079cc:	2330      	movs	r3, #48	; 0x30
 80079ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b78 <_svfiprintf_r+0x1ec>
 80079d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079d6:	f04f 0901 	mov.w	r9, #1
 80079da:	4623      	mov	r3, r4
 80079dc:	469a      	mov	sl, r3
 80079de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079e2:	b10a      	cbz	r2, 80079e8 <_svfiprintf_r+0x5c>
 80079e4:	2a25      	cmp	r2, #37	; 0x25
 80079e6:	d1f9      	bne.n	80079dc <_svfiprintf_r+0x50>
 80079e8:	ebba 0b04 	subs.w	fp, sl, r4
 80079ec:	d00b      	beq.n	8007a06 <_svfiprintf_r+0x7a>
 80079ee:	465b      	mov	r3, fp
 80079f0:	4622      	mov	r2, r4
 80079f2:	4629      	mov	r1, r5
 80079f4:	4638      	mov	r0, r7
 80079f6:	f7ff ff6d 	bl	80078d4 <__ssputs_r>
 80079fa:	3001      	adds	r0, #1
 80079fc:	f000 80aa 	beq.w	8007b54 <_svfiprintf_r+0x1c8>
 8007a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a02:	445a      	add	r2, fp
 8007a04:	9209      	str	r2, [sp, #36]	; 0x24
 8007a06:	f89a 3000 	ldrb.w	r3, [sl]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80a2 	beq.w	8007b54 <_svfiprintf_r+0x1c8>
 8007a10:	2300      	movs	r3, #0
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a1a:	f10a 0a01 	add.w	sl, sl, #1
 8007a1e:	9304      	str	r3, [sp, #16]
 8007a20:	9307      	str	r3, [sp, #28]
 8007a22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a26:	931a      	str	r3, [sp, #104]	; 0x68
 8007a28:	4654      	mov	r4, sl
 8007a2a:	2205      	movs	r2, #5
 8007a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a30:	4851      	ldr	r0, [pc, #324]	; (8007b78 <_svfiprintf_r+0x1ec>)
 8007a32:	f7f8 fbd5 	bl	80001e0 <memchr>
 8007a36:	9a04      	ldr	r2, [sp, #16]
 8007a38:	b9d8      	cbnz	r0, 8007a72 <_svfiprintf_r+0xe6>
 8007a3a:	06d0      	lsls	r0, r2, #27
 8007a3c:	bf44      	itt	mi
 8007a3e:	2320      	movmi	r3, #32
 8007a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a44:	0711      	lsls	r1, r2, #28
 8007a46:	bf44      	itt	mi
 8007a48:	232b      	movmi	r3, #43	; 0x2b
 8007a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a52:	2b2a      	cmp	r3, #42	; 0x2a
 8007a54:	d015      	beq.n	8007a82 <_svfiprintf_r+0xf6>
 8007a56:	9a07      	ldr	r2, [sp, #28]
 8007a58:	4654      	mov	r4, sl
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	f04f 0c0a 	mov.w	ip, #10
 8007a60:	4621      	mov	r1, r4
 8007a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a66:	3b30      	subs	r3, #48	; 0x30
 8007a68:	2b09      	cmp	r3, #9
 8007a6a:	d94e      	bls.n	8007b0a <_svfiprintf_r+0x17e>
 8007a6c:	b1b0      	cbz	r0, 8007a9c <_svfiprintf_r+0x110>
 8007a6e:	9207      	str	r2, [sp, #28]
 8007a70:	e014      	b.n	8007a9c <_svfiprintf_r+0x110>
 8007a72:	eba0 0308 	sub.w	r3, r0, r8
 8007a76:	fa09 f303 	lsl.w	r3, r9, r3
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	46a2      	mov	sl, r4
 8007a80:	e7d2      	b.n	8007a28 <_svfiprintf_r+0x9c>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	1d19      	adds	r1, r3, #4
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	9103      	str	r1, [sp, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bfbb      	ittet	lt
 8007a8e:	425b      	neglt	r3, r3
 8007a90:	f042 0202 	orrlt.w	r2, r2, #2
 8007a94:	9307      	strge	r3, [sp, #28]
 8007a96:	9307      	strlt	r3, [sp, #28]
 8007a98:	bfb8      	it	lt
 8007a9a:	9204      	strlt	r2, [sp, #16]
 8007a9c:	7823      	ldrb	r3, [r4, #0]
 8007a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8007aa0:	d10c      	bne.n	8007abc <_svfiprintf_r+0x130>
 8007aa2:	7863      	ldrb	r3, [r4, #1]
 8007aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa6:	d135      	bne.n	8007b14 <_svfiprintf_r+0x188>
 8007aa8:	9b03      	ldr	r3, [sp, #12]
 8007aaa:	1d1a      	adds	r2, r3, #4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	9203      	str	r2, [sp, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bfb8      	it	lt
 8007ab4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ab8:	3402      	adds	r4, #2
 8007aba:	9305      	str	r3, [sp, #20]
 8007abc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b88 <_svfiprintf_r+0x1fc>
 8007ac0:	7821      	ldrb	r1, [r4, #0]
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	4650      	mov	r0, sl
 8007ac6:	f7f8 fb8b 	bl	80001e0 <memchr>
 8007aca:	b140      	cbz	r0, 8007ade <_svfiprintf_r+0x152>
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	eba0 000a 	sub.w	r0, r0, sl
 8007ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ad6:	9b04      	ldr	r3, [sp, #16]
 8007ad8:	4303      	orrs	r3, r0
 8007ada:	3401      	adds	r4, #1
 8007adc:	9304      	str	r3, [sp, #16]
 8007ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae2:	4826      	ldr	r0, [pc, #152]	; (8007b7c <_svfiprintf_r+0x1f0>)
 8007ae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ae8:	2206      	movs	r2, #6
 8007aea:	f7f8 fb79 	bl	80001e0 <memchr>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d038      	beq.n	8007b64 <_svfiprintf_r+0x1d8>
 8007af2:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <_svfiprintf_r+0x1f4>)
 8007af4:	bb1b      	cbnz	r3, 8007b3e <_svfiprintf_r+0x1b2>
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	3307      	adds	r3, #7
 8007afa:	f023 0307 	bic.w	r3, r3, #7
 8007afe:	3308      	adds	r3, #8
 8007b00:	9303      	str	r3, [sp, #12]
 8007b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b04:	4433      	add	r3, r6
 8007b06:	9309      	str	r3, [sp, #36]	; 0x24
 8007b08:	e767      	b.n	80079da <_svfiprintf_r+0x4e>
 8007b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b0e:	460c      	mov	r4, r1
 8007b10:	2001      	movs	r0, #1
 8007b12:	e7a5      	b.n	8007a60 <_svfiprintf_r+0xd4>
 8007b14:	2300      	movs	r3, #0
 8007b16:	3401      	adds	r4, #1
 8007b18:	9305      	str	r3, [sp, #20]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	f04f 0c0a 	mov.w	ip, #10
 8007b20:	4620      	mov	r0, r4
 8007b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b26:	3a30      	subs	r2, #48	; 0x30
 8007b28:	2a09      	cmp	r2, #9
 8007b2a:	d903      	bls.n	8007b34 <_svfiprintf_r+0x1a8>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0c5      	beq.n	8007abc <_svfiprintf_r+0x130>
 8007b30:	9105      	str	r1, [sp, #20]
 8007b32:	e7c3      	b.n	8007abc <_svfiprintf_r+0x130>
 8007b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b38:	4604      	mov	r4, r0
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e7f0      	b.n	8007b20 <_svfiprintf_r+0x194>
 8007b3e:	ab03      	add	r3, sp, #12
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	462a      	mov	r2, r5
 8007b44:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <_svfiprintf_r+0x1f8>)
 8007b46:	a904      	add	r1, sp, #16
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f3af 8000 	nop.w
 8007b4e:	1c42      	adds	r2, r0, #1
 8007b50:	4606      	mov	r6, r0
 8007b52:	d1d6      	bne.n	8007b02 <_svfiprintf_r+0x176>
 8007b54:	89ab      	ldrh	r3, [r5, #12]
 8007b56:	065b      	lsls	r3, r3, #25
 8007b58:	f53f af2c 	bmi.w	80079b4 <_svfiprintf_r+0x28>
 8007b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b5e:	b01d      	add	sp, #116	; 0x74
 8007b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	ab03      	add	r3, sp, #12
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	462a      	mov	r2, r5
 8007b6a:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <_svfiprintf_r+0x1f8>)
 8007b6c:	a904      	add	r1, sp, #16
 8007b6e:	4638      	mov	r0, r7
 8007b70:	f000 f87a 	bl	8007c68 <_printf_i>
 8007b74:	e7eb      	b.n	8007b4e <_svfiprintf_r+0x1c2>
 8007b76:	bf00      	nop
 8007b78:	0800aa08 	.word	0x0800aa08
 8007b7c:	0800aa12 	.word	0x0800aa12
 8007b80:	00000000 	.word	0x00000000
 8007b84:	080078d5 	.word	0x080078d5
 8007b88:	0800aa0e 	.word	0x0800aa0e

08007b8c <_printf_common>:
 8007b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	4616      	mov	r6, r2
 8007b92:	4699      	mov	r9, r3
 8007b94:	688a      	ldr	r2, [r1, #8]
 8007b96:	690b      	ldr	r3, [r1, #16]
 8007b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	bfb8      	it	lt
 8007ba0:	4613      	movlt	r3, r2
 8007ba2:	6033      	str	r3, [r6, #0]
 8007ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ba8:	4607      	mov	r7, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	b10a      	cbz	r2, 8007bb2 <_printf_common+0x26>
 8007bae:	3301      	adds	r3, #1
 8007bb0:	6033      	str	r3, [r6, #0]
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	0699      	lsls	r1, r3, #26
 8007bb6:	bf42      	ittt	mi
 8007bb8:	6833      	ldrmi	r3, [r6, #0]
 8007bba:	3302      	addmi	r3, #2
 8007bbc:	6033      	strmi	r3, [r6, #0]
 8007bbe:	6825      	ldr	r5, [r4, #0]
 8007bc0:	f015 0506 	ands.w	r5, r5, #6
 8007bc4:	d106      	bne.n	8007bd4 <_printf_common+0x48>
 8007bc6:	f104 0a19 	add.w	sl, r4, #25
 8007bca:	68e3      	ldr	r3, [r4, #12]
 8007bcc:	6832      	ldr	r2, [r6, #0]
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	42ab      	cmp	r3, r5
 8007bd2:	dc26      	bgt.n	8007c22 <_printf_common+0x96>
 8007bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bd8:	1e13      	subs	r3, r2, #0
 8007bda:	6822      	ldr	r2, [r4, #0]
 8007bdc:	bf18      	it	ne
 8007bde:	2301      	movne	r3, #1
 8007be0:	0692      	lsls	r2, r2, #26
 8007be2:	d42b      	bmi.n	8007c3c <_printf_common+0xb0>
 8007be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007be8:	4649      	mov	r1, r9
 8007bea:	4638      	mov	r0, r7
 8007bec:	47c0      	blx	r8
 8007bee:	3001      	adds	r0, #1
 8007bf0:	d01e      	beq.n	8007c30 <_printf_common+0xa4>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	68e5      	ldr	r5, [r4, #12]
 8007bf6:	6832      	ldr	r2, [r6, #0]
 8007bf8:	f003 0306 	and.w	r3, r3, #6
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	bf08      	it	eq
 8007c00:	1aad      	subeq	r5, r5, r2
 8007c02:	68a3      	ldr	r3, [r4, #8]
 8007c04:	6922      	ldr	r2, [r4, #16]
 8007c06:	bf0c      	ite	eq
 8007c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c0c:	2500      	movne	r5, #0
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	bfc4      	itt	gt
 8007c12:	1a9b      	subgt	r3, r3, r2
 8007c14:	18ed      	addgt	r5, r5, r3
 8007c16:	2600      	movs	r6, #0
 8007c18:	341a      	adds	r4, #26
 8007c1a:	42b5      	cmp	r5, r6
 8007c1c:	d11a      	bne.n	8007c54 <_printf_common+0xc8>
 8007c1e:	2000      	movs	r0, #0
 8007c20:	e008      	b.n	8007c34 <_printf_common+0xa8>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4652      	mov	r2, sl
 8007c26:	4649      	mov	r1, r9
 8007c28:	4638      	mov	r0, r7
 8007c2a:	47c0      	blx	r8
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d103      	bne.n	8007c38 <_printf_common+0xac>
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
 8007c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c38:	3501      	adds	r5, #1
 8007c3a:	e7c6      	b.n	8007bca <_printf_common+0x3e>
 8007c3c:	18e1      	adds	r1, r4, r3
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	2030      	movs	r0, #48	; 0x30
 8007c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c46:	4422      	add	r2, r4
 8007c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c50:	3302      	adds	r3, #2
 8007c52:	e7c7      	b.n	8007be4 <_printf_common+0x58>
 8007c54:	2301      	movs	r3, #1
 8007c56:	4622      	mov	r2, r4
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	47c0      	blx	r8
 8007c5e:	3001      	adds	r0, #1
 8007c60:	d0e6      	beq.n	8007c30 <_printf_common+0xa4>
 8007c62:	3601      	adds	r6, #1
 8007c64:	e7d9      	b.n	8007c1a <_printf_common+0x8e>
	...

08007c68 <_printf_i>:
 8007c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	7e0f      	ldrb	r7, [r1, #24]
 8007c6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c70:	2f78      	cmp	r7, #120	; 0x78
 8007c72:	4691      	mov	r9, r2
 8007c74:	4680      	mov	r8, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	469a      	mov	sl, r3
 8007c7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c7e:	d807      	bhi.n	8007c90 <_printf_i+0x28>
 8007c80:	2f62      	cmp	r7, #98	; 0x62
 8007c82:	d80a      	bhi.n	8007c9a <_printf_i+0x32>
 8007c84:	2f00      	cmp	r7, #0
 8007c86:	f000 80d8 	beq.w	8007e3a <_printf_i+0x1d2>
 8007c8a:	2f58      	cmp	r7, #88	; 0x58
 8007c8c:	f000 80a3 	beq.w	8007dd6 <_printf_i+0x16e>
 8007c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c98:	e03a      	b.n	8007d10 <_printf_i+0xa8>
 8007c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c9e:	2b15      	cmp	r3, #21
 8007ca0:	d8f6      	bhi.n	8007c90 <_printf_i+0x28>
 8007ca2:	a101      	add	r1, pc, #4	; (adr r1, 8007ca8 <_printf_i+0x40>)
 8007ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ca8:	08007d01 	.word	0x08007d01
 8007cac:	08007d15 	.word	0x08007d15
 8007cb0:	08007c91 	.word	0x08007c91
 8007cb4:	08007c91 	.word	0x08007c91
 8007cb8:	08007c91 	.word	0x08007c91
 8007cbc:	08007c91 	.word	0x08007c91
 8007cc0:	08007d15 	.word	0x08007d15
 8007cc4:	08007c91 	.word	0x08007c91
 8007cc8:	08007c91 	.word	0x08007c91
 8007ccc:	08007c91 	.word	0x08007c91
 8007cd0:	08007c91 	.word	0x08007c91
 8007cd4:	08007e21 	.word	0x08007e21
 8007cd8:	08007d45 	.word	0x08007d45
 8007cdc:	08007e03 	.word	0x08007e03
 8007ce0:	08007c91 	.word	0x08007c91
 8007ce4:	08007c91 	.word	0x08007c91
 8007ce8:	08007e43 	.word	0x08007e43
 8007cec:	08007c91 	.word	0x08007c91
 8007cf0:	08007d45 	.word	0x08007d45
 8007cf4:	08007c91 	.word	0x08007c91
 8007cf8:	08007c91 	.word	0x08007c91
 8007cfc:	08007e0b 	.word	0x08007e0b
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	1d1a      	adds	r2, r3, #4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	602a      	str	r2, [r5, #0]
 8007d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d10:	2301      	movs	r3, #1
 8007d12:	e0a3      	b.n	8007e5c <_printf_i+0x1f4>
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	6829      	ldr	r1, [r5, #0]
 8007d18:	0606      	lsls	r6, r0, #24
 8007d1a:	f101 0304 	add.w	r3, r1, #4
 8007d1e:	d50a      	bpl.n	8007d36 <_printf_i+0xce>
 8007d20:	680e      	ldr	r6, [r1, #0]
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	2e00      	cmp	r6, #0
 8007d26:	da03      	bge.n	8007d30 <_printf_i+0xc8>
 8007d28:	232d      	movs	r3, #45	; 0x2d
 8007d2a:	4276      	negs	r6, r6
 8007d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d30:	485e      	ldr	r0, [pc, #376]	; (8007eac <_printf_i+0x244>)
 8007d32:	230a      	movs	r3, #10
 8007d34:	e019      	b.n	8007d6a <_printf_i+0x102>
 8007d36:	680e      	ldr	r6, [r1, #0]
 8007d38:	602b      	str	r3, [r5, #0]
 8007d3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d3e:	bf18      	it	ne
 8007d40:	b236      	sxthne	r6, r6
 8007d42:	e7ef      	b.n	8007d24 <_printf_i+0xbc>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	6820      	ldr	r0, [r4, #0]
 8007d48:	1d19      	adds	r1, r3, #4
 8007d4a:	6029      	str	r1, [r5, #0]
 8007d4c:	0601      	lsls	r1, r0, #24
 8007d4e:	d501      	bpl.n	8007d54 <_printf_i+0xec>
 8007d50:	681e      	ldr	r6, [r3, #0]
 8007d52:	e002      	b.n	8007d5a <_printf_i+0xf2>
 8007d54:	0646      	lsls	r6, r0, #25
 8007d56:	d5fb      	bpl.n	8007d50 <_printf_i+0xe8>
 8007d58:	881e      	ldrh	r6, [r3, #0]
 8007d5a:	4854      	ldr	r0, [pc, #336]	; (8007eac <_printf_i+0x244>)
 8007d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d5e:	bf0c      	ite	eq
 8007d60:	2308      	moveq	r3, #8
 8007d62:	230a      	movne	r3, #10
 8007d64:	2100      	movs	r1, #0
 8007d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d6a:	6865      	ldr	r5, [r4, #4]
 8007d6c:	60a5      	str	r5, [r4, #8]
 8007d6e:	2d00      	cmp	r5, #0
 8007d70:	bfa2      	ittt	ge
 8007d72:	6821      	ldrge	r1, [r4, #0]
 8007d74:	f021 0104 	bicge.w	r1, r1, #4
 8007d78:	6021      	strge	r1, [r4, #0]
 8007d7a:	b90e      	cbnz	r6, 8007d80 <_printf_i+0x118>
 8007d7c:	2d00      	cmp	r5, #0
 8007d7e:	d04d      	beq.n	8007e1c <_printf_i+0x1b4>
 8007d80:	4615      	mov	r5, r2
 8007d82:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d86:	fb03 6711 	mls	r7, r3, r1, r6
 8007d8a:	5dc7      	ldrb	r7, [r0, r7]
 8007d8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d90:	4637      	mov	r7, r6
 8007d92:	42bb      	cmp	r3, r7
 8007d94:	460e      	mov	r6, r1
 8007d96:	d9f4      	bls.n	8007d82 <_printf_i+0x11a>
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d10b      	bne.n	8007db4 <_printf_i+0x14c>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	07de      	lsls	r6, r3, #31
 8007da0:	d508      	bpl.n	8007db4 <_printf_i+0x14c>
 8007da2:	6923      	ldr	r3, [r4, #16]
 8007da4:	6861      	ldr	r1, [r4, #4]
 8007da6:	4299      	cmp	r1, r3
 8007da8:	bfde      	ittt	le
 8007daa:	2330      	movle	r3, #48	; 0x30
 8007dac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007db0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007db4:	1b52      	subs	r2, r2, r5
 8007db6:	6122      	str	r2, [r4, #16]
 8007db8:	f8cd a000 	str.w	sl, [sp]
 8007dbc:	464b      	mov	r3, r9
 8007dbe:	aa03      	add	r2, sp, #12
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	f7ff fee2 	bl	8007b8c <_printf_common>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d14c      	bne.n	8007e66 <_printf_i+0x1fe>
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	b004      	add	sp, #16
 8007dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd6:	4835      	ldr	r0, [pc, #212]	; (8007eac <_printf_i+0x244>)
 8007dd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ddc:	6829      	ldr	r1, [r5, #0]
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007de4:	6029      	str	r1, [r5, #0]
 8007de6:	061d      	lsls	r5, r3, #24
 8007de8:	d514      	bpl.n	8007e14 <_printf_i+0x1ac>
 8007dea:	07df      	lsls	r7, r3, #31
 8007dec:	bf44      	itt	mi
 8007dee:	f043 0320 	orrmi.w	r3, r3, #32
 8007df2:	6023      	strmi	r3, [r4, #0]
 8007df4:	b91e      	cbnz	r6, 8007dfe <_printf_i+0x196>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	f023 0320 	bic.w	r3, r3, #32
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	2310      	movs	r3, #16
 8007e00:	e7b0      	b.n	8007d64 <_printf_i+0xfc>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	f043 0320 	orr.w	r3, r3, #32
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	2378      	movs	r3, #120	; 0x78
 8007e0c:	4828      	ldr	r0, [pc, #160]	; (8007eb0 <_printf_i+0x248>)
 8007e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e12:	e7e3      	b.n	8007ddc <_printf_i+0x174>
 8007e14:	0659      	lsls	r1, r3, #25
 8007e16:	bf48      	it	mi
 8007e18:	b2b6      	uxthmi	r6, r6
 8007e1a:	e7e6      	b.n	8007dea <_printf_i+0x182>
 8007e1c:	4615      	mov	r5, r2
 8007e1e:	e7bb      	b.n	8007d98 <_printf_i+0x130>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	6826      	ldr	r6, [r4, #0]
 8007e24:	6961      	ldr	r1, [r4, #20]
 8007e26:	1d18      	adds	r0, r3, #4
 8007e28:	6028      	str	r0, [r5, #0]
 8007e2a:	0635      	lsls	r5, r6, #24
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	d501      	bpl.n	8007e34 <_printf_i+0x1cc>
 8007e30:	6019      	str	r1, [r3, #0]
 8007e32:	e002      	b.n	8007e3a <_printf_i+0x1d2>
 8007e34:	0670      	lsls	r0, r6, #25
 8007e36:	d5fb      	bpl.n	8007e30 <_printf_i+0x1c8>
 8007e38:	8019      	strh	r1, [r3, #0]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	4615      	mov	r5, r2
 8007e40:	e7ba      	b.n	8007db8 <_printf_i+0x150>
 8007e42:	682b      	ldr	r3, [r5, #0]
 8007e44:	1d1a      	adds	r2, r3, #4
 8007e46:	602a      	str	r2, [r5, #0]
 8007e48:	681d      	ldr	r5, [r3, #0]
 8007e4a:	6862      	ldr	r2, [r4, #4]
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f7f8 f9c6 	bl	80001e0 <memchr>
 8007e54:	b108      	cbz	r0, 8007e5a <_printf_i+0x1f2>
 8007e56:	1b40      	subs	r0, r0, r5
 8007e58:	6060      	str	r0, [r4, #4]
 8007e5a:	6863      	ldr	r3, [r4, #4]
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e64:	e7a8      	b.n	8007db8 <_printf_i+0x150>
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	462a      	mov	r2, r5
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	47d0      	blx	sl
 8007e70:	3001      	adds	r0, #1
 8007e72:	d0ab      	beq.n	8007dcc <_printf_i+0x164>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	079b      	lsls	r3, r3, #30
 8007e78:	d413      	bmi.n	8007ea2 <_printf_i+0x23a>
 8007e7a:	68e0      	ldr	r0, [r4, #12]
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	4298      	cmp	r0, r3
 8007e80:	bfb8      	it	lt
 8007e82:	4618      	movlt	r0, r3
 8007e84:	e7a4      	b.n	8007dd0 <_printf_i+0x168>
 8007e86:	2301      	movs	r3, #1
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	47d0      	blx	sl
 8007e90:	3001      	adds	r0, #1
 8007e92:	d09b      	beq.n	8007dcc <_printf_i+0x164>
 8007e94:	3501      	adds	r5, #1
 8007e96:	68e3      	ldr	r3, [r4, #12]
 8007e98:	9903      	ldr	r1, [sp, #12]
 8007e9a:	1a5b      	subs	r3, r3, r1
 8007e9c:	42ab      	cmp	r3, r5
 8007e9e:	dcf2      	bgt.n	8007e86 <_printf_i+0x21e>
 8007ea0:	e7eb      	b.n	8007e7a <_printf_i+0x212>
 8007ea2:	2500      	movs	r5, #0
 8007ea4:	f104 0619 	add.w	r6, r4, #25
 8007ea8:	e7f5      	b.n	8007e96 <_printf_i+0x22e>
 8007eaa:	bf00      	nop
 8007eac:	0800aa19 	.word	0x0800aa19
 8007eb0:	0800aa2a 	.word	0x0800aa2a

08007eb4 <memmove>:
 8007eb4:	4288      	cmp	r0, r1
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	eb01 0402 	add.w	r4, r1, r2
 8007ebc:	d902      	bls.n	8007ec4 <memmove+0x10>
 8007ebe:	4284      	cmp	r4, r0
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	d807      	bhi.n	8007ed4 <memmove+0x20>
 8007ec4:	1e43      	subs	r3, r0, #1
 8007ec6:	42a1      	cmp	r1, r4
 8007ec8:	d008      	beq.n	8007edc <memmove+0x28>
 8007eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ed2:	e7f8      	b.n	8007ec6 <memmove+0x12>
 8007ed4:	4402      	add	r2, r0
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	428a      	cmp	r2, r1
 8007eda:	d100      	bne.n	8007ede <memmove+0x2a>
 8007edc:	bd10      	pop	{r4, pc}
 8007ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ee6:	e7f7      	b.n	8007ed8 <memmove+0x24>

08007ee8 <_realloc_r>:
 8007ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eec:	4680      	mov	r8, r0
 8007eee:	4614      	mov	r4, r2
 8007ef0:	460e      	mov	r6, r1
 8007ef2:	b921      	cbnz	r1, 8007efe <_realloc_r+0x16>
 8007ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef8:	4611      	mov	r1, r2
 8007efa:	f7ff bbbd 	b.w	8007678 <_malloc_r>
 8007efe:	b92a      	cbnz	r2, 8007f0c <_realloc_r+0x24>
 8007f00:	f7ff fb4e 	bl	80075a0 <_free_r>
 8007f04:	4625      	mov	r5, r4
 8007f06:	4628      	mov	r0, r5
 8007f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f0c:	f000 f81b 	bl	8007f46 <_malloc_usable_size_r>
 8007f10:	4284      	cmp	r4, r0
 8007f12:	4607      	mov	r7, r0
 8007f14:	d802      	bhi.n	8007f1c <_realloc_r+0x34>
 8007f16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f1a:	d812      	bhi.n	8007f42 <_realloc_r+0x5a>
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f7ff fbaa 	bl	8007678 <_malloc_r>
 8007f24:	4605      	mov	r5, r0
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d0ed      	beq.n	8007f06 <_realloc_r+0x1e>
 8007f2a:	42bc      	cmp	r4, r7
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4631      	mov	r1, r6
 8007f30:	bf28      	it	cs
 8007f32:	463a      	movcs	r2, r7
 8007f34:	f7ff fb1e 	bl	8007574 <memcpy>
 8007f38:	4631      	mov	r1, r6
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	f7ff fb30 	bl	80075a0 <_free_r>
 8007f40:	e7e1      	b.n	8007f06 <_realloc_r+0x1e>
 8007f42:	4635      	mov	r5, r6
 8007f44:	e7df      	b.n	8007f06 <_realloc_r+0x1e>

08007f46 <_malloc_usable_size_r>:
 8007f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f4a:	1f18      	subs	r0, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bfbc      	itt	lt
 8007f50:	580b      	ldrlt	r3, [r1, r0]
 8007f52:	18c0      	addlt	r0, r0, r3
 8007f54:	4770      	bx	lr
	...

08007f58 <_init>:
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	bf00      	nop
 8007f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5e:	bc08      	pop	{r3}
 8007f60:	469e      	mov	lr, r3
 8007f62:	4770      	bx	lr

08007f64 <_fini>:
 8007f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f66:	bf00      	nop
 8007f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f6a:	bc08      	pop	{r3}
 8007f6c:	469e      	mov	lr, r3
 8007f6e:	4770      	bx	lr

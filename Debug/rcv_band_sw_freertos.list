
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011264  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002648  08011404  08011404  00021404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a4c  08013a4c  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08013a4c  08013a4c  00023a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a54  08013a54  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a54  08013a54  00023a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a58  08013a58  00023a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08013a5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001cd68  200001f0  08013c4c  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2001cf58  08013c4c  0003cf58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028ef1  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000672e  00000000  00000000  00059111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002040  00000000  00000000  0005f840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d78  00000000  00000000  00061880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f490  00000000  00000000  000635f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b7cb  00000000  00000000  00082a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a54e5  00000000  00000000  000ae253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089d8  00000000  00000000  00153788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080113ec 	.word	0x080113ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	080113ec 	.word	0x080113ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <ARGB_Init>:
/**
 * @brief Init timer & prescalers
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8000ba6:	f005 fa6b 	bl	8006080 <HAL_RCC_GetPCLK2Freq>
 8000baa:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <ARGB_Init+0xd8>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <ARGB_Init+0x1c>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <ARGB_Init+0x1e>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	4a2b      	ldr	r2, [pc, #172]	; (8000c7c <ARGB_Init+0xdc>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	607b      	str	r3, [r7, #4]
#endif

    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <ARGB_Init+0xe0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <ARGB_Init+0xe0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <ARGB_Init+0xe0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fdb7 	bl	8000768 <__aeabi_ui2d>
 8000bfa:	a31b      	add	r3, pc, #108	; (adr r3, 8000c68 <ARGB_Init+0xc8>)
 8000bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c00:	f7ff fb46 	bl	8000290 <__aeabi_dmul>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fe26 	bl	800085c <__aeabi_d2uiz>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	3b01      	subs	r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <ARGB_Init+0xe4>)
 8000c1a:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fda3 	bl	8000768 <__aeabi_ui2d>
 8000c22:	a313      	add	r3, pc, #76	; (adr r3, 8000c70 <ARGB_Init+0xd0>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fb32 	bl	8000290 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff fe12 	bl	800085c <__aeabi_d2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <ARGB_Init+0xe8>)
 8000c42:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <ARGB_Init+0xec>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <ARGB_Init+0xe0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2108      	movs	r1, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f008 f9f6 	bl	8009044 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f002 f89f 	bl	8002d9c <HAL_Delay>
    return ARGB_OK;
 8000c5e:	2302      	movs	r3, #2
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	1eb851ec 	.word	0x1eb851ec
 8000c6c:	3fe1eb85 	.word	0x3fe1eb85
 8000c70:	1eb851ec 	.word	0x1eb851ec
 8000c74:	3fd1eb85 	.word	0x3fd1eb85
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	014f8b59 	.word	0x014f8b59
 8000c80:	20001468 	.word	0x20001468
 8000c84:	2000020c 	.word	0x2000020c
 8000c88:	2000020d 	.word	0x2000020d
 8000c8c:	200002d6 	.word	0x200002d6

08000c90 <ARGB_Clear>:
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Clear(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 f885 	bl	8000da8 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
    return ARGB_OK;
 8000c9e:	2302      	movs	r3, #2
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <ARGB_SetBrightness>:
/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetBrightness(u8_t br) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <ARGB_SetBrightness+0x20>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	7013      	strb	r3, [r2, #0]
    return ARGB_OK;
 8000cb4:	2302      	movs	r3, #2
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <ARGB_SetRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4623      	mov	r3, r4
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	4603      	mov	r3, r0
 8000cdc:	717b      	strb	r3, [r7, #5]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	713b      	strb	r3, [r7, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <ARGB_SetRGB+0x30>
        u16_t _i = i / NUM_PIXELS;
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	80fb      	strh	r3, [r7, #6]
    }

    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <ARGB_SetRGB+0xd8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d04:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d08:	797a      	ldrb	r2, [r7, #5]
 8000d0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d0e:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <ARGB_SetRGB+0xd8>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	3301      	adds	r3, #1
 8000d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d20:	793a      	ldrb	r2, [r7, #4]
 8000d22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d26:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <ARGB_SetRGB+0xd8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d3e:	70fb      	strb	r3, [r7, #3]

#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000d40:	793b      	ldrb	r3, [r7, #4]
 8000d42:	21b0      	movs	r1, #176	; 0xb0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f9cb 	bl	80010e0 <scale8>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	21f0      	movs	r1, #240	; 0xf0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9c4 	bl	80010e0 <scale8>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8000d5c:	793b      	ldrb	r3, [r7, #4]
 8000d5e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000d60:	797b      	ldrb	r3, [r7, #5]
 8000d62:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000d68:	88fa      	ldrh	r2, [r7, #6]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <ARGB_SetRGB+0xdc>)
 8000d72:	7b7a      	ldrb	r2, [r7, #13]
 8000d74:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000d76:	88fa      	ldrh	r2, [r7, #6]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4908      	ldr	r1, [pc, #32]	; (8000da4 <ARGB_SetRGB+0xdc>)
 8000d82:	7b3a      	ldrb	r2, [r7, #12]
 8000d84:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	4904      	ldr	r1, [pc, #16]	; (8000da4 <ARGB_SetRGB+0xdc>)
 8000d92:	7afa      	ldrb	r2, [r7, #11]
 8000d94:	54ca      	strb	r2, [r1, r3]
#endif
    return ARGB_OK;
 8000d96:	2302      	movs	r3, #2
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000210 	.word	0x20000210

08000da8 <ARGB_FillRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	460b      	mov	r3, r1
 8000db4:	71bb      	strb	r3, [r7, #6]
 8000db6:	4613      	mov	r3, r2
 8000db8:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	81fb      	strh	r3, [r7, #14]
 8000dbe:	e00b      	b.n	8000dd8 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	797b      	ldrb	r3, [r7, #5]
 8000dc6:	79ba      	ldrb	r2, [r7, #6]
 8000dc8:	79f9      	ldrb	r1, [r7, #7]
 8000dca:	f7ff ff7d 	bl	8000cc8 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	81fb      	strh	r3, [r7, #14]
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0ef      	beq.n	8000dc0 <ARGB_FillRGB+0x18>
    return ARGB_OK;
 8000de0:	2302      	movs	r3, #2
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8000df2:	4b9d      	ldr	r3, [pc, #628]	; (8001068 <ARGB_Show+0x27c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8000df8:	4b9c      	ldr	r3, [pc, #624]	; (800106c <ARGB_Show+0x280>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d105      	bne.n	8000e0e <ARGB_Show+0x22>
 8000e02:	4b9b      	ldr	r3, [pc, #620]	; (8001070 <ARGB_Show+0x284>)
 8000e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d001      	beq.n	8000e12 <ARGB_Show+0x26>
        return ARGB_BUSY;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e15e      	b.n	80010d0 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	e0a6      	b.n	8000f66 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e18:	4b96      	ldr	r3, [pc, #600]	; (8001074 <ARGB_Show+0x288>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dd04      	ble.n	8000e3a <ARGB_Show+0x4e>
 8000e30:	4b91      	ldr	r3, [pc, #580]	; (8001078 <ARGB_Show+0x28c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	e003      	b.n	8000e42 <ARGB_Show+0x56>
 8000e3a:	4b90      	ldr	r3, [pc, #576]	; (800107c <ARGB_Show+0x290>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	4b8d      	ldr	r3, [pc, #564]	; (8001080 <ARGB_Show+0x294>)
 8000e4a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e4e:	4b89      	ldr	r3, [pc, #548]	; (8001074 <ARGB_Show+0x288>)
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dd04      	ble.n	8000e70 <ARGB_Show+0x84>
 8000e66:	4b84      	ldr	r3, [pc, #528]	; (8001078 <ARGB_Show+0x28c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	e003      	b.n	8000e78 <ARGB_Show+0x8c>
 8000e70:	4b82      	ldr	r3, [pc, #520]	; (800107c <ARGB_Show+0x290>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4619      	mov	r1, r3
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	4a80      	ldr	r2, [pc, #512]	; (8001080 <ARGB_Show+0x294>)
 8000e80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e84:	4b7b      	ldr	r3, [pc, #492]	; (8001074 <ARGB_Show+0x288>)
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dd04      	ble.n	8000ea6 <ARGB_Show+0xba>
 8000e9c:	4b76      	ldr	r3, [pc, #472]	; (8001078 <ARGB_Show+0x28c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	e003      	b.n	8000eae <ARGB_Show+0xc2>
 8000ea6:	4b75      	ldr	r3, [pc, #468]	; (800107c <ARGB_Show+0x290>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4619      	mov	r1, r3
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3310      	adds	r3, #16
 8000eb4:	4a72      	ldr	r2, [pc, #456]	; (8001080 <ARGB_Show+0x294>)
 8000eb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000eba:	4b6e      	ldr	r3, [pc, #440]	; (8001074 <ARGB_Show+0x288>)
 8000ebc:	78db      	ldrb	r3, [r3, #3]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	dd04      	ble.n	8000edc <ARGB_Show+0xf0>
 8000ed2:	4b69      	ldr	r3, [pc, #420]	; (8001078 <ARGB_Show+0x28c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	e003      	b.n	8000ee4 <ARGB_Show+0xf8>
 8000edc:	4b67      	ldr	r3, [pc, #412]	; (800107c <ARGB_Show+0x290>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	3318      	adds	r3, #24
 8000eea:	4a65      	ldr	r2, [pc, #404]	; (8001080 <ARGB_Show+0x294>)
 8000eec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ef0:	4b60      	ldr	r3, [pc, #384]	; (8001074 <ARGB_Show+0x288>)
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd04      	ble.n	8000f12 <ARGB_Show+0x126>
 8000f08:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <ARGB_Show+0x28c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	e003      	b.n	8000f1a <ARGB_Show+0x12e>
 8000f12:	4b5a      	ldr	r3, [pc, #360]	; (800107c <ARGB_Show+0x290>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3320      	adds	r3, #32
 8000f20:	4a57      	ldr	r2, [pc, #348]	; (8001080 <ARGB_Show+0x294>)
 8000f22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f26:	4b53      	ldr	r3, [pc, #332]	; (8001074 <ARGB_Show+0x288>)
 8000f28:	795b      	ldrb	r3, [r3, #5]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	dd04      	ble.n	8000f48 <ARGB_Show+0x15c>
 8000f3e:	4b4e      	ldr	r3, [pc, #312]	; (8001078 <ARGB_Show+0x28c>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4619      	mov	r1, r3
 8000f46:	e003      	b.n	8000f50 <ARGB_Show+0x164>
 8000f48:	4b4c      	ldr	r3, [pc, #304]	; (800107c <ARGB_Show+0x290>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3328      	adds	r3, #40	; 0x28
 8000f56:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <ARGB_Show+0x294>)
 8000f58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	f67f af54 	bls.w	8000e18 <ARGB_Show+0x2c>
#endif
        }

        //HAL_TIM_DMABurst_WriteStart(&TIM_HANDLE, TIM_DMABASE_ARR)

        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000f74:	e0a4      	b.n	80010c0 <ARGB_Show+0x2d4>

            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000f76:	4b43      	ldr	r3, [pc, #268]	; (8001084 <ARGB_Show+0x298>)
 8000f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d102      	bne.n	8000f88 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8000f82:	2302      	movs	r3, #2
 8000f84:	73fb      	strb	r3, [r7, #15]
                continue;
 8000f86:	e09b      	b.n	80010c0 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000f88:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <ARGB_Show+0x298>)
 8000f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d11d      	bne.n	8000fd0 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000f94:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <ARGB_Show+0x298>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <ARGB_Show+0x298>)
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	4a39      	ldr	r2, [pc, #228]	; (8001088 <ARGB_Show+0x29c>)
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000fa4:	4b37      	ldr	r3, [pc, #220]	; (8001084 <ARGB_Show+0x298>)
 8000fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa8:	4a38      	ldr	r2, [pc, #224]	; (800108c <ARGB_Show+0x2a0>)
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <ARGB_Show+0x298>)
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	4a37      	ldr	r2, [pc, #220]	; (8001090 <ARGB_Show+0x2a4>)
 8000fb2:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <ARGB_Show+0x298>)
 8000fb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000fb8:	4931      	ldr	r1, [pc, #196]	; (8001080 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <ARGB_Show+0x298>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2330      	movs	r3, #48	; 0x30
 8000fc4:	f002 fa3a 	bl	800343c <HAL_DMA_Start_IT>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <ARGB_Show+0x1f0>
 8000fce:	e002      	b.n	8000fd6 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fd4:	e074      	b.n	80010c0 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fda:	e071      	b.n	80010c0 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <ARGB_Show+0x298>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <ARGB_Show+0x298>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fea:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <ARGB_Show+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a28      	ldr	r2, [pc, #160]	; (8001094 <ARGB_Show+0x2a8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d107      	bne.n	8001006 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <ARGB_Show+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <ARGB_Show+0x298>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001004:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <ARGB_Show+0x298>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <ARGB_Show+0x2a8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d018      	beq.n	8001042 <ARGB_Show+0x256>
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <ARGB_Show+0x298>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d013      	beq.n	8001042 <ARGB_Show+0x256>
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <ARGB_Show+0x298>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <ARGB_Show+0x2ac>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00e      	beq.n	8001042 <ARGB_Show+0x256>
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <ARGB_Show+0x298>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <ARGB_Show+0x2b0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d009      	beq.n	8001042 <ARGB_Show+0x256>
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <ARGB_Show+0x298>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <ARGB_Show+0x2b4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d004      	beq.n	8001042 <ARGB_Show+0x256>
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <ARGB_Show+0x298>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <ARGB_Show+0x2b8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d132      	bne.n	80010a8 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <ARGB_Show+0x298>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b06      	cmp	r3, #6
 8001052:	d032      	beq.n	80010ba <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <ARGB_Show+0x298>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <ARGB_Show+0x298>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0201 	orr.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001064:	e029      	b.n	80010ba <ARGB_Show+0x2ce>
 8001066:	bf00      	nop
 8001068:	200002d6 	.word	0x200002d6
 800106c:	200002d4 	.word	0x200002d4
 8001070:	200014b0 	.word	0x200014b0
 8001074:	20000210 	.word	0x20000210
 8001078:	2000020c 	.word	0x2000020c
 800107c:	2000020d 	.word	0x2000020d
 8001080:	20000214 	.word	0x20000214
 8001084:	20001468 	.word	0x20001468
 8001088:	08001109 	.word	0x08001109
 800108c:	08001389 	.word	0x08001389
 8001090:	08008951 	.word	0x08008951
 8001094:	40010000 	.word	0x40010000
 8001098:	40000400 	.word	0x40000400
 800109c:	40000800 	.word	0x40000800
 80010a0:	40000c00 	.word	0x40000c00
 80010a4:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <ARGB_Show+0x2ec>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <ARGB_Show+0x2ec>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e000      	b.n	80010bc <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80010ba:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f47f af57 	bne.w	8000f76 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <ARGB_Show+0x2f0>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	801a      	strh	r2, [r3, #0]

        return ARGB_OK;
 80010ce:	2302      	movs	r3, #2
    }
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20001468 	.word	0x20001468
 80010dc:	200002d4 	.word	0x200002d4

080010e0 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	79ba      	ldrb	r2, [r7, #6]
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	121b      	asrs	r3, r3, #8
 80010fa:	b2db      	uxtb	r3, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001114:	60fb      	str	r3, [r7, #12]

    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	d10b      	bne.n	8001138 <ARGB_TIM_DMADelayPulseCplt+0x30>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2201      	movs	r2, #1
 8001124:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d136      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001136:	e031      	b.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d10b      	bne.n	800115a <ARGB_TIM_DMADelayPulseCplt+0x52>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2202      	movs	r2, #2
 8001146:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d125      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001158:	e020      	b.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d10b      	bne.n	800117c <ARGB_TIM_DMADelayPulseCplt+0x74>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2204      	movs	r2, #4
 8001168:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d114      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800117a:	e00f      	b.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d10a      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2208      	movs	r2, #8
 800118a:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 800119c:	4b72      	ldr	r3, [pc, #456]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d17b      	bne.n	800129e <ARGB_TIM_DMADelayPulseCplt+0x196>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	72fb      	strb	r3, [r7, #11]
 80011aa:	e06c      	b.n	8001286 <ARGB_TIM_DMADelayPulseCplt+0x17e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011ac:	4b6e      	ldr	r3, [pc, #440]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	4a6c      	ldr	r2, [pc, #432]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd04      	ble.n	80011dc <ARGB_TIM_DMADelayPulseCplt+0xd4>
 80011d2:	4b67      	ldr	r3, [pc, #412]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	e003      	b.n	80011e4 <ARGB_TIM_DMADelayPulseCplt+0xdc>
 80011dc:	4b65      	ldr	r3, [pc, #404]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3318      	adds	r3, #24
 80011ea:	4a63      	ldr	r2, [pc, #396]	; (8001378 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 80011ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011f0:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	3301      	adds	r3, #1
 8001200:	4a5a      	ldr	r2, [pc, #360]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	7afb      	ldrb	r3, [r7, #11]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001214:	2b00      	cmp	r3, #0
 8001216:	dd04      	ble.n	8001222 <ARGB_TIM_DMADelayPulseCplt+0x11a>
 8001218:	4b55      	ldr	r3, [pc, #340]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4619      	mov	r1, r3
 8001220:	e003      	b.n	800122a <ARGB_TIM_DMADelayPulseCplt+0x122>
 8001222:	4b54      	ldr	r3, [pc, #336]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3320      	adds	r3, #32
 8001230:	4a51      	ldr	r2, [pc, #324]	; (8001378 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001236:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	3302      	adds	r3, #2
 8001246:	4a49      	ldr	r2, [pc, #292]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	2b00      	cmp	r3, #0
 800125c:	dd04      	ble.n	8001268 <ARGB_TIM_DMADelayPulseCplt+0x160>
 800125e:	4b44      	ldr	r3, [pc, #272]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4619      	mov	r1, r3
 8001266:	e003      	b.n	8001270 <ARGB_TIM_DMADelayPulseCplt+0x168>
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4619      	mov	r1, r3
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	3328      	adds	r3, #40	; 0x28
 8001276:	4a40      	ldr	r2, [pc, #256]	; (8001378 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	72fb      	strb	r3, [r7, #11]
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b07      	cmp	r3, #7
 800128c:	d98e      	bls.n	80011ac <ARGB_TIM_DMADelayPulseCplt+0xa4>
#endif
        }
        BUF_COUNTER++;
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	3301      	adds	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e05d      	b.n	800135a <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d80c      	bhi.n	80012c2 <ARGB_TIM_DMADelayPulseCplt+0x1ba>
        memset((u32_t *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // second part
 80012a8:	2260      	movs	r2, #96	; 0x60
 80012aa:	2100      	movs	r1, #0
 80012ac:	4833      	ldr	r0, [pc, #204]	; (800137c <ARGB_TIM_DMADelayPulseCplt+0x274>)
 80012ae:	f00f fbc5 	bl	8010a3c <memset>
        BUF_COUNTER++;
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3301      	adds	r3, #1
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012be:	801a      	strh	r2, [r3, #0]
 80012c0:	e04b      	b.n	800135a <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d6:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 f913 	bl	8003508 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <ARGB_TIM_DMADelayPulseCplt+0x278>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d117      	bne.n	800131c <ARGB_TIM_DMADelayPulseCplt+0x214>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10f      	bne.n	800131c <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	f240 4344 	movw	r3, #1092	; 0x444
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d107      	bne.n	800131c <ARGB_TIM_DMADelayPulseCplt+0x214>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800131a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a1a      	ldr	r2, [r3, #32]
 8001322:	f241 1311 	movw	r3, #4369	; 0x1111
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10f      	bne.n	800134c <ARGB_TIM_DMADelayPulseCplt+0x244>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	f240 4344 	movw	r3, #1092	; 0x444
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d107      	bne.n	800134c <ARGB_TIM_DMADelayPulseCplt+0x244>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]

        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST = ARGB_READY;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <ARGB_TIM_DMADelayPulseCplt+0x27c>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
    }

    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	771a      	strb	r2, [r3, #28]
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002d4 	.word	0x200002d4
 800136c:	20000210 	.word	0x20000210
 8001370:	2000020c 	.word	0x2000020c
 8001374:	2000020d 	.word	0x2000020d
 8001378:	20000214 	.word	0x20000214
 800137c:	20000274 	.word	0x20000274
 8001380:	40010000 	.word	0x40010000
 8001384:	200002d6 	.word	0x200002d6

08001388 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001394:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4f      	ldr	r2, [pc, #316]	; (80014d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x150>)
 800139a:	4293      	cmp	r3, r2
 800139c:	f040 8098 	bne.w	80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <ARGB_TIM_DMADelayPulseHalfCplt+0x154>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	f040 8093 	bne.w	80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>

    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 80013aa:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d17b      	bne.n	80014ac <ARGB_TIM_DMADelayPulseHalfCplt+0x124>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	72fb      	strb	r3, [r7, #11]
 80013b8:	e06c      	b.n	8001494 <ARGB_TIM_DMADelayPulseHalfCplt+0x10c>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	4a46      	ldr	r2, [pc, #280]	; (80014e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013dc:	2b00      	cmp	r3, #0
 80013de:	dd04      	ble.n	80013ea <ARGB_TIM_DMADelayPulseHalfCplt+0x62>
 80013e0:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	e003      	b.n	80013f2 <ARGB_TIM_DMADelayPulseHalfCplt+0x6a>
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	3301      	adds	r3, #1
 800140e:	4a35      	ldr	r2, [pc, #212]	; (80014e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001422:	2b00      	cmp	r3, #0
 8001424:	dd04      	ble.n	8001430 <ARGB_TIM_DMADelayPulseHalfCplt+0xa8>
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4619      	mov	r1, r3
 800142e:	e003      	b.n	8001438 <ARGB_TIM_DMADelayPulseHalfCplt+0xb0>
 8001430:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3308      	adds	r3, #8
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	3302      	adds	r3, #2
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001468:	2b00      	cmp	r3, #0
 800146a:	dd04      	ble.n	8001476 <ARGB_TIM_DMADelayPulseHalfCplt+0xee>
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4619      	mov	r1, r3
 8001474:	e003      	b.n	800147e <ARGB_TIM_DMADelayPulseHalfCplt+0xf6>
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4619      	mov	r1, r3
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	3310      	adds	r3, #16
 8001484:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001486:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800148a:	7afb      	ldrb	r3, [r7, #11]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3301      	adds	r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	72fb      	strb	r3, [r7, #11]
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b07      	cmp	r3, #7
 800149a:	d98e      	bls.n	80013ba <ARGB_TIM_DMADelayPulseHalfCplt+0x32>
#endif
        }
        BUF_COUNTER++;
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014a8:	801a      	strh	r2, [r3, #0]
 80014aa:	e012      	b.n	80014d2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d80d      	bhi.n	80014d2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
        memset((u32_t*) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // first part
 80014b6:	2260      	movs	r2, #96	; 0x60
 80014b8:	2100      	movs	r1, #0
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014bc:	f00f fabe 	bl	8010a3c <memset>
        BUF_COUNTER++;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	e000      	b.n	80014d2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80014d0:	bf00      	nop
    }
}
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200014b0 	.word	0x200014b0
 80014dc:	20001468 	.word	0x20001468
 80014e0:	200002d4 	.word	0x200002d4
 80014e4:	20000210 	.word	0x20000210
 80014e8:	2000020c 	.word	0x2000020c
 80014ec:	2000020d 	.word	0x2000020d
 80014f0:	20000214 	.word	0x20000214

080014f4 <displayBand>:
int currentBand = 0;                          // First band. For this case, AM is the current band.
char buff[20];
uint32_t ticks;

void displayBand(int band_index)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af04      	add	r7, sp, #16
 80014fa:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 80014fc:	2304      	movs	r3, #4
 80014fe:	3301      	adds	r3, #1
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	d07d      	beq.n	8001602 <displayBand+0x10e>
    {
        ST7735_FillRectangleFast(0,0,160,80,ST7735_COLOR565(10, 10, 10));
 8001506:	f640 0341 	movw	r3, #2113	; 0x841
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2350      	movs	r3, #80	; 0x50
 800150e:	22a0      	movs	r2, #160	; 0xa0
 8001510:	2100      	movs	r1, #0
 8001512:	2000      	movs	r0, #0
 8001514:	f000 ff32 	bl	800237c <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,64,160,16,ST7735_COLOR565(50, 50, 50));
 8001518:	f243 1386 	movw	r3, #12678	; 0x3186
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2310      	movs	r3, #16
 8001520:	22a0      	movs	r2, #160	; 0xa0
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	2000      	movs	r0, #0
 8001526:	f000 ff29 	bl	800237c <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,0,160,26,ST7735_COLOR565(50, 50, 50));
 800152a:	f243 1386 	movw	r3, #12678	; 0x3186
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	231a      	movs	r3, #26
 8001532:	22a0      	movs	r2, #160	; 0xa0
 8001534:	2100      	movs	r1, #0
 8001536:	2000      	movs	r0, #0
 8001538:	f000 ff20 	bl	800237c <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 2, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(50, 50, 50));
 800153c:	4933      	ldr	r1, [pc, #204]	; (800160c <displayBand+0x118>)
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	6819      	ldr	r1, [r3, #0]
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <displayBand+0x11c>)
 800154e:	f243 1286 	movw	r2, #12678	; 0x3186
 8001552:	9202      	str	r2, [sp, #8]
 8001554:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8001558:	9201      	str	r2, [sp, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	9200      	str	r2, [sp, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	460a      	mov	r2, r1
 8001562:	2102      	movs	r1, #2
 8001564:	2001      	movs	r0, #1
 8001566:	f000 fe4c 	bl	8002202 <ST7735_WriteString>
        // freq
       	sprintf(buff, "%s - %s", band[band_index].WminFreq, band[band_index].WmaxFreq);
 800156a:	4928      	ldr	r1, [pc, #160]	; (800160c <displayBand+0x118>)
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3304      	adds	r3, #4
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	4823      	ldr	r0, [pc, #140]	; (800160c <displayBand+0x118>)
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4403      	add	r3, r0
 800158a:	3308      	adds	r3, #8
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	460a      	mov	r2, r1
 8001590:	4920      	ldr	r1, [pc, #128]	; (8001614 <displayBand+0x120>)
 8001592:	4821      	ldr	r0, [pc, #132]	; (8001618 <displayBand+0x124>)
 8001594:	f00f fbb4 	bl	8010d00 <siprintf>
       	ST7735_WriteString(0, 29, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <displayBand+0x128>)
 800159a:	f640 0241 	movw	r2, #2113	; 0x841
 800159e:	9202      	str	r2, [sp, #8]
 80015a0:	f244 52df 	movw	r2, #17887	; 0x45df
 80015a4:	9201      	str	r2, [sp, #4]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	9200      	str	r2, [sp, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <displayBand+0x124>)
 80015ae:	211d      	movs	r1, #29
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 fe26 	bl	8002202 <ST7735_WriteString>
       	sprintf(buff, "%s - %s", band[band_index].NminFreq, band[band_index].NmaxFreq);
 80015b6:	4915      	ldr	r1, [pc, #84]	; (800160c <displayBand+0x118>)
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	330c      	adds	r3, #12
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	4810      	ldr	r0, [pc, #64]	; (800160c <displayBand+0x118>)
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4403      	add	r3, r0
 80015d6:	3310      	adds	r3, #16
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	460a      	mov	r2, r1
 80015dc:	490d      	ldr	r1, [pc, #52]	; (8001614 <displayBand+0x120>)
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <displayBand+0x124>)
 80015e0:	f00f fb8e 	bl	8010d00 <siprintf>
       	ST7735_WriteString(0, 46, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <displayBand+0x128>)
 80015e6:	f640 0241 	movw	r2, #2113	; 0x841
 80015ea:	9202      	str	r2, [sp, #8]
 80015ec:	f244 52df 	movw	r2, #17887	; 0x45df
 80015f0:	9201      	str	r2, [sp, #4]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	9200      	str	r2, [sp, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <displayBand+0x124>)
 80015fa:	212e      	movs	r1, #46	; 0x2e
 80015fc:	2000      	movs	r0, #0
 80015fe:	f000 fe00 	bl	8002202 <ST7735_WriteString>
    }

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000004 	.word	0x20000004
 8001610:	20000084 	.word	0x20000084
 8001614:	080114a8 	.word	0x080114a8
 8001618:	200002d8 	.word	0x200002d8
 800161c:	2000007c 	.word	0x2000007c

08001620 <setBand>:
    HAL_GPIO_WritePin(GPIOB, CHIP, GPIO_PIN_SET); // HIGH
	delay_us(300);
}

void setBand(int band_index)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af04      	add	r7, sp, #16
 8001626:	6078      	str	r0, [r7, #4]
	ticks = band[band_index].ticks; //- START_RESISTANCE_KOM;
 8001628:	4912      	ldr	r1, [pc, #72]	; (8001674 <setBand+0x54>)
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3314      	adds	r3, #20
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <setBand+0x58>)
 800163c:	6013      	str	r3, [r2, #0]
	sprintf(buff, "R:%ld", ticks);
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <setBand+0x58>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	490d      	ldr	r1, [pc, #52]	; (800167c <setBand+0x5c>)
 8001646:	480e      	ldr	r0, [pc, #56]	; (8001680 <setBand+0x60>)
 8001648:	f00f fb5a 	bl	8010d00 <siprintf>
	ST7735_WriteString(0, 64, buff, Font_11x18, ST7735_COLOR565(165, 214, 2), ST7735_COLOR565(50, 50, 50));
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <setBand+0x64>)
 800164e:	f243 1286 	movw	r2, #12678	; 0x3186
 8001652:	9202      	str	r2, [sp, #8]
 8001654:	f24a 62a0 	movw	r2, #42656	; 0xa6a0
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	9200      	str	r2, [sp, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <setBand+0x60>)
 8001662:	2140      	movs	r1, #64	; 0x40
 8001664:	2000      	movs	r0, #0
 8001666:	f000 fdcc 	bl	8002202 <ST7735_WriteString>
	//setResistanceUP(CS_PIN, ticks, false);
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000004 	.word	0x20000004
 8001678:	200002ec 	.word	0x200002ec
 800167c:	080114b0 	.word	0x080114b0
 8001680:	200002d8 	.word	0x200002d8
 8001684:	2000007c 	.word	0x2000007c

08001688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_DMA_Init+0x3c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <MX_DMA_Init+0x3c>)
 8001698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_DMA_Init+0x3c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2105      	movs	r1, #5
 80016ae:	202f      	movs	r0, #47	; 0x2f
 80016b0:	f001 fc66 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80016b4:	202f      	movs	r0, #47	; 0x2f
 80016b6:	f001 fc8f 	bl	8002fd8 <HAL_NVIC_EnableIRQ>

}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <getRunTimeCounterValue+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20001304 	.word	0x20001304

080016f0 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	vTaskList(taskListStatus);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <vApplicationIdleHook+0x10>)
 80016f6:	f00d fbdb 	bl	800eeb0 <vTaskList>
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200002f0 	.word	0x200002f0

08001704 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &EncoderQueue_attributes);
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <MX_FREERTOS_Init+0x58>)
 800170a:	2102      	movs	r1, #2
 800170c:	2001      	movs	r0, #1
 800170e:	f00b fb28 	bl	800cd62 <osMessageQueueNew>
 8001712:	4603      	mov	r3, r0
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_FREERTOS_Init+0x5c>)
 8001716:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &ButtonQueue_attributes);
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_FREERTOS_Init+0x60>)
 800171a:	2102      	movs	r1, #2
 800171c:	2001      	movs	r0, #1
 800171e:	f00b fb20 	bl	800cd62 <osMessageQueueNew>
 8001722:	4603      	mov	r3, r0
 8001724:	4a10      	ldr	r2, [pc, #64]	; (8001768 <MX_FREERTOS_Init+0x64>)
 8001726:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001728:	4a10      	ldr	r2, [pc, #64]	; (800176c <MX_FREERTOS_Init+0x68>)
 800172a:	2100      	movs	r1, #0
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <MX_FREERTOS_Init+0x6c>)
 800172e:	f00b fa6b 	bl	800cc08 <osThreadNew>
 8001732:	4603      	mov	r3, r0
 8001734:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <MX_FREERTOS_Init+0x70>)
 8001736:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <MX_FREERTOS_Init+0x74>)
 800173a:	2100      	movs	r1, #0
 800173c:	480f      	ldr	r0, [pc, #60]	; (800177c <MX_FREERTOS_Init+0x78>)
 800173e:	f00b fa63 	bl	800cc08 <osThreadNew>
 8001742:	4603      	mov	r3, r0
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <MX_FREERTOS_Init+0x7c>)
 8001746:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <MX_FREERTOS_Init+0x80>)
 800174a:	2100      	movs	r1, #0
 800174c:	480e      	ldr	r0, [pc, #56]	; (8001788 <MX_FREERTOS_Init+0x84>)
 800174e:	f00b fa5b 	bl	800cc08 <osThreadNew>
 8001752:	4603      	mov	r3, r0
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <MX_FREERTOS_Init+0x88>)
 8001756:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	080138f0 	.word	0x080138f0
 8001760:	200012fc 	.word	0x200012fc
 8001764:	08013908 	.word	0x08013908
 8001768:	20001300 	.word	0x20001300
 800176c:	08013884 	.word	0x08013884
 8001770:	08001791 	.word	0x08001791
 8001774:	200012f0 	.word	0x200012f0
 8001778:	080138a8 	.word	0x080138a8
 800177c:	080017cd 	.word	0x080017cd
 8001780:	200012f4 	.word	0x200012f4
 8001784:	080138cc 	.word	0x080138cc
 8001788:	08001895 	.word	0x08001895
 800178c:	200012f8 	.word	0x200012f8

08001790 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001798:	f00e fbf8 	bl	800ff8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
  char buff[10];
	for (;;) {
		//CDC_Transmit_FS(taskListStatus, sizeof(taskListStatus));
		sprintf(buff, "%lu", ulHighFrequencyTimerTicks);
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <StartDefaultTask+0x34>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4908      	ldr	r1, [pc, #32]	; (80017c8 <StartDefaultTask+0x38>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00f faaa 	bl	8010d00 <siprintf>
		CDC_Transmit_FS(buff, sizeof(buff));
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	210a      	movs	r1, #10
 80017b2:	4618      	mov	r0, r3
 80017b4:	f00e fca8 	bl	8010108 <CDC_Transmit_FS>
		osDelay(5000);
 80017b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80017bc:	f00b fab6 	bl	800cd2c <osDelay>
		sprintf(buff, "%lu", ulHighFrequencyTimerTicks);
 80017c0:	e7ec      	b.n	800179c <StartDefaultTask+0xc>
 80017c2:	bf00      	nop
 80017c4:	20001304 	.word	0x20001304
 80017c8:	080114f8 	.word	0x080114f8

080017cc <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	osStatus_t taskMessageHandler;
	int32_t counter = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
	int16_t button = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	81fb      	strh	r3, [r7, #14]
	int32_t last_counter = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
	int16_t max_index = 5;
 80017e0:	2305      	movs	r3, #5
 80017e2:	837b      	strh	r3, [r7, #26]
	ST7735_FillScreenFast(ST7735_BLACK);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f000 fe5e 	bl	80024a6 <ST7735_FillScreenFast>
	displayBand(last_counter);
 80017ea:	69f8      	ldr	r0, [r7, #28]
 80017ec:	f7ff fe82 	bl	80014f4 <displayBand>
	setBand(last_counter);
 80017f0:	69f8      	ldr	r0, [r7, #28]
 80017f2:	f7ff ff15 	bl	8001620 <setBand>
	for (;;) {
		//Encoder Rotate
		taskMessageHandler = osMessageQueueGet(EncoderQueueHandle, &counter, 0,
 80017f6:	4b25      	ldr	r3, [pc, #148]	; (800188c <StartDisplayTask+0xc0>)
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	f107 0110 	add.w	r1, r7, #16
 80017fe:	2300      	movs	r3, #0
 8001800:	2200      	movs	r2, #0
 8001802:	f00b fb81 	bl	800cf08 <osMessageQueueGet>
 8001806:	6178      	str	r0, [r7, #20]
				0);
		if (taskMessageHandler == osOK)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d131      	bne.n	8001872 <StartDisplayTask+0xa6>
		{
			if (counter == 2) {
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d116      	bne.n	8001842 <StartDisplayTask+0x76>
				if (last_counter != max_index - 1) {
 8001814:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001818:	3b01      	subs	r3, #1
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	429a      	cmp	r2, r3
 800181e:	d005      	beq.n	800182c <StartDisplayTask+0x60>
					last_counter += 1;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	3301      	adds	r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
					counter = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	e003      	b.n	8001834 <StartDisplayTask+0x68>
				} else {
					last_counter = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
					counter = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
				}
				displayBand(last_counter);
 8001834:	69f8      	ldr	r0, [r7, #28]
 8001836:	f7ff fe5d 	bl	80014f4 <displayBand>
				setBand(last_counter);
 800183a:	69f8      	ldr	r0, [r7, #28]
 800183c:	f7ff fef0 	bl	8001620 <setBand>
 8001840:	e017      	b.n	8001872 <StartDisplayTask+0xa6>
			} else if (counter == 1) {
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d114      	bne.n	8001872 <StartDisplayTask+0xa6>
				if (last_counter != 0) {
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <StartDisplayTask+0x8e>
					last_counter -= 1;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b01      	subs	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
					counter = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	e005      	b.n	8001866 <StartDisplayTask+0x9a>
				} else {
					last_counter = max_index - 1;
 800185a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800185e:	3b01      	subs	r3, #1
 8001860:	61fb      	str	r3, [r7, #28]
					counter = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
				}
				displayBand(last_counter);
 8001866:	69f8      	ldr	r0, [r7, #28]
 8001868:	f7ff fe44 	bl	80014f4 <displayBand>
				setBand(last_counter);
 800186c:	69f8      	ldr	r0, [r7, #28]
 800186e:	f7ff fed7 	bl	8001620 <setBand>
			} else {

			}
		}
		//Button click
		osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <StartDisplayTask+0xc4>)
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	f107 010e 	add.w	r1, r7, #14
 800187a:	2300      	movs	r3, #0
 800187c:	2200      	movs	r2, #0
 800187e:	f00b fb43 	bl	800cf08 <osMessageQueueGet>
		if (button) {

		}
		osDelay(1000);
 8001882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001886:	f00b fa51 	bl	800cd2c <osDelay>
		taskMessageHandler = osMessageQueueGet(EncoderQueueHandle, &counter, 0,
 800188a:	e7b4      	b.n	80017f6 <StartDisplayTask+0x2a>
 800188c:	200012fc 	.word	0x200012fc
 8001890:	20001300 	.word	0x20001300

08001894 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	76fb      	strb	r3, [r7, #27]
	uint8_t buttonSend = 1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <StartEncoderTask+0xac>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	617b      	str	r3, [r7, #20]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	0fda      	lsrs	r2, r3, #31
 80018bc:	4413      	add	r3, r2
 80018be:	105b      	asrs	r3, r3, #1
 80018c0:	425b      	negs	r3, r3
 80018c2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80018c6:	337f      	adds	r3, #127	; 0x7f
 80018c8:	617b      	str	r3, [r7, #20]
		if (currCounter != prevCounter) {
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d01e      	beq.n	8001910 <StartEncoderTask+0x7c>
			if (currCounter > prevCounter) {
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dd0a      	ble.n	80018f0 <StartEncoderTask+0x5c>
				counter = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <StartEncoderTask+0xb0>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	f107 0110 	add.w	r1, r7, #16
 80018e6:	2300      	movs	r3, #0
 80018e8:	2200      	movs	r2, #0
 80018ea:	f00b faad 	bl	800ce48 <osMessageQueuePut>
 80018ee:	e00d      	b.n	800190c <StartEncoderTask+0x78>
			} else if (currCounter < prevCounter) {
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	da09      	bge.n	800190c <StartEncoderTask+0x78>
				counter = 2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <StartEncoderTask+0xb0>)
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	f107 0110 	add.w	r1, r7, #16
 8001904:	2300      	movs	r3, #0
 8001906:	2200      	movs	r2, #0
 8001908:	f00b fa9e 	bl	800ce48 <osMessageQueuePut>
			} else {

			}
			prevCounter = currCounter;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if (buttonPressed[buttonNumber]) {
 8001910:	7efb      	ldrb	r3, [r7, #27]
 8001912:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <StartEncoderTask+0xb4>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <StartEncoderTask+0xa0>
			buttonPressed[buttonNumber] = 0;
 800191c:	7efb      	ldrb	r3, [r7, #27]
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <StartEncoderTask+0xb4>)
 8001920:	2100      	movs	r1, #0
 8001922:	54d1      	strb	r1, [r2, r3]
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <StartEncoderTask+0xb8>)
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	f107 010f 	add.w	r1, r7, #15
 800192c:	2300      	movs	r3, #0
 800192e:	2200      	movs	r2, #0
 8001930:	f00b fa8a 	bl	800ce48 <osMessageQueuePut>
		}
		osDelay(500);
 8001934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001938:	f00b f9f8 	bl	800cd2c <osDelay>
	for (;;) {
 800193c:	e7b6      	b.n	80018ac <StartEncoderTask+0x18>
 800193e:	bf00      	nop
 8001940:	20001420 	.word	0x20001420
 8001944:	200012fc 	.word	0x200012fc
 8001948:	200013c8 	.word	0x200013c8
 800194c:	20001300 	.word	0x20001300

08001950 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b4f      	ldr	r3, [pc, #316]	; (8001aa8 <MX_GPIO_Init+0x158>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a4e      	ldr	r2, [pc, #312]	; (8001aa8 <MX_GPIO_Init+0x158>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <MX_GPIO_Init+0x158>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b48      	ldr	r3, [pc, #288]	; (8001aa8 <MX_GPIO_Init+0x158>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a47      	ldr	r2, [pc, #284]	; (8001aa8 <MX_GPIO_Init+0x158>)
 800198c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <MX_GPIO_Init+0x158>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <MX_GPIO_Init+0x158>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a40      	ldr	r2, [pc, #256]	; (8001aa8 <MX_GPIO_Init+0x158>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b3e      	ldr	r3, [pc, #248]	; (8001aa8 <MX_GPIO_Init+0x158>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <MX_GPIO_Init+0x158>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a39      	ldr	r2, [pc, #228]	; (8001aa8 <MX_GPIO_Init+0x158>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <MX_GPIO_Init+0x158>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019dc:	4833      	ldr	r0, [pc, #204]	; (8001aac <MX_GPIO_Init+0x15c>)
 80019de:	f002 fab9 	bl	8003f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	2102      	movs	r1, #2
 80019e6:	4832      	ldr	r0, [pc, #200]	; (8001ab0 <MX_GPIO_Init+0x160>)
 80019e8:	f002 fab4 	bl	8003f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	211c      	movs	r1, #28
 80019f0:	482f      	ldr	r0, [pc, #188]	; (8001ab0 <MX_GPIO_Init+0x160>)
 80019f2:	f002 faaf 	bl	8003f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_INC_Pin|DP_UD_Pin|DP_CS_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80019fc:	482d      	ldr	r0, [pc, #180]	; (8001ab4 <MX_GPIO_Init+0x164>)
 80019fe:	f002 faa9 	bl	8003f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4824      	ldr	r0, [pc, #144]	; (8001aac <MX_GPIO_Init+0x15c>)
 8001a1c:	f002 f800 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001a20:	2301      	movs	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	481e      	ldr	r0, [pc, #120]	; (8001ab0 <MX_GPIO_Init+0x160>)
 8001a36:	f001 fff3 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLK_Pin;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <MX_GPIO_Init+0x160>)
 8001a52:	f001 ffe5 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8001a56:	231c      	movs	r3, #28
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4810      	ldr	r0, [pc, #64]	; (8001ab0 <MX_GPIO_Init+0x160>)
 8001a6e:	f001 ffd7 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DP_INC_Pin|DP_UD_Pin|DP_CS_Pin;
 8001a72:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480a      	ldr	r0, [pc, #40]	; (8001ab4 <MX_GPIO_Init+0x164>)
 8001a8c:	f001 ffc8 	bl	8003a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2105      	movs	r1, #5
 8001a94:	2006      	movs	r0, #6
 8001a96:	f001 fa73 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a9a:	2006      	movs	r0, #6
 8001a9c:	f001 fa9c 	bl	8002fd8 <HAL_NVIC_EnableIRQ>

}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400

08001ab8 <pixel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pixel(void){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    ARGB_Init();  // Initialization
 8001abc:	f7ff f870 	bl	8000ba0 <ARGB_Init>

    ARGB_Clear(); // Clear stirp
 8001ac0:	f7ff f8e6 	bl	8000c90 <ARGB_Clear>
    while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001ac4:	bf00      	nop
 8001ac6:	f7ff f991 	bl	8000dec <ARGB_Show>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d1fa      	bne.n	8001ac6 <pixel+0xe>

    ARGB_SetBrightness(50);  // Set global brightness to 40%
 8001ad0:	2032      	movs	r0, #50	; 0x32
 8001ad2:	f7ff f8e7 	bl	8000ca4 <ARGB_SetBrightness>

    ARGB_FillRGB(25, 0, 100); // Fill all the strip with Red
 8001ad6:	2264      	movs	r2, #100	; 0x64
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2019      	movs	r0, #25
 8001adc:	f7ff f964 	bl	8000da8 <ARGB_FillRGB>
    while (!ARGB_Show());
 8001ae0:	bf00      	nop
 8001ae2:	f7ff f983 	bl	8000dec <ARGB_Show>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0fa      	beq.n	8001ae2 <pixel+0x2a>
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <Display_Init>:

void Display_Init() {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af04      	add	r7, sp, #16
    ST7735_Init();
 8001afa:	f000 faf1 	bl	80020e0 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 fcc0 	bl	8002484 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <Display_Init+0x58>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	9202      	str	r2, [sp, #8]
 8001b0a:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8001b0e:	9201      	str	r2, [sp, #4]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	9200      	str	r2, [sp, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <Display_Init+0x5c>)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	200f      	movs	r0, #15
 8001b1c:	f000 fb71 	bl	8002202 <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <Display_Init+0x60>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	9202      	str	r2, [sp, #8]
 8001b26:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8001b2a:	9201      	str	r2, [sp, #4]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	9200      	str	r2, [sp, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <Display_Init+0x64>)
 8001b34:	2119      	movs	r1, #25
 8001b36:	2022      	movs	r0, #34	; 0x22
 8001b38:	f000 fb63 	bl	8002202 <ST7735_WriteString>
    HAL_Delay(2000);
 8001b3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b40:	f001 f92c 	bl	8002d9c <HAL_Delay>
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000084 	.word	0x20000084
 8001b50:	080114fc 	.word	0x080114fc
 8001b54:	2000007c 	.word	0x2000007c
 8001b58:	08011508 	.word	0x08011508

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b60:	f001 f8da 	bl	8002d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b64:	f000 f830 	bl	8001bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b68:	f7ff fef2 	bl	8001950 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b6c:	f000 f954 	bl	8001e18 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001b70:	f000 fe46 	bl	8002800 <MX_TIM3_Init>
  MX_DMA_Init();
 8001b74:	f7ff fd88 	bl	8001688 <MX_DMA_Init>
  MX_RTC_Init();
 8001b78:	f000 f8c8 	bl	8001d0c <MX_RTC_Init>
  MX_TIM4_Init();
 8001b7c:	f000 fe94 	bl	80028a8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001b80:	f000 fdee 	bl	8002760 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001b84:	f00e fa02 	bl	800ff8c <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b88:	213c      	movs	r1, #60	; 0x3c
 8001b8a:	480c      	ldr	r0, [pc, #48]	; (8001bbc <main+0x60>)
 8001b8c:	f006 f832 	bl	8007bf4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Init(&htim1);
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <main+0x64>)
 8001b92:	f005 fc6d 	bl	8007470 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <main+0x64>)
 8001b98:	f005 fd30 	bl	80075fc <HAL_TIM_Base_Start_IT>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba0:	4808      	ldr	r0, [pc, #32]	; (8001bc4 <main+0x68>)
 8001ba2:	f002 fa09 	bl	8003fb8 <HAL_GPIO_TogglePin>
  //HAL_TIM_Base_Start(&htim11);
  pixel();
 8001ba6:	f7ff ff87 	bl	8001ab8 <pixel>
  Display_Init();
 8001baa:	f7ff ffa3 	bl	8001af4 <Display_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001bae:	f00a ffe1 	bl	800cb74 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001bb2:	f7ff fda7 	bl	8001704 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bb6:	f00b f801 	bl	800cbbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <main+0x5e>
 8001bbc:	20001420 	.word	0x20001420
 8001bc0:	200013d8 	.word	0x200013d8
 8001bc4:	40020800 	.word	0x40020800

08001bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b094      	sub	sp, #80	; 0x50
 8001bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bce:	f107 0320 	add.w	r3, r7, #32
 8001bd2:	2230      	movs	r2, #48	; 0x30
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f00e ff30 	bl	8010a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <SystemClock_Config+0xcc>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <SystemClock_Config+0xcc>)
 8001bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfc:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <SystemClock_Config+0xcc>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <SystemClock_Config+0xd0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <SystemClock_Config+0xd0>)
 8001c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <SystemClock_Config+0xd0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001c24:	2305      	movs	r3, #5
 8001c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c32:	2302      	movs	r3, #2
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c3c:	2319      	movs	r3, #25
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c40:	23c0      	movs	r3, #192	; 0xc0
 8001c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4c:	f107 0320 	add.w	r3, r7, #32
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 fc79 	bl	8005548 <HAL_RCC_OscConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c5c:	f000 f846 	bl	8001cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c60:	230f      	movs	r3, #15
 8001c62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c64:	2302      	movs	r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 ff8c 	bl	8005b98 <HAL_RCC_ClockConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c86:	f000 f831 	bl	8001cec <Error_Handler>
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3750      	adds	r7, #80	; 0x50
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40007000 	.word	0x40007000

08001c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d10b      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  ulHighFrequencyTimerTicks++;
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001cb6:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cbc:	4809      	ldr	r0, [pc, #36]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001cbe:	f002 f97b 	bl	8003fb8 <HAL_GPIO_TogglePin>
	  HAL_IncTick();
 8001cc2:	f001 f84b 	bl	8002d5c <HAL_IncTick>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x38>
    HAL_IncTick();
 8001cd0:	f001 f844 	bl	8002d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	20001304 	.word	0x20001304
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	40000c00 	.word	0x40000c00

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>

08001cf6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d20:	2300      	movs	r3, #0
 8001d22:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <MX_RTC_Init+0xac>)
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <MX_RTC_Init+0xb0>)
 8001d28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <MX_RTC_Init+0xac>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <MX_RTC_Init+0xac>)
 8001d32:	227f      	movs	r2, #127	; 0x7f
 8001d34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <MX_RTC_Init+0xac>)
 8001d38:	22ff      	movs	r2, #255	; 0xff
 8001d3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <MX_RTC_Init+0xac>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <MX_RTC_Init+0xac>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <MX_RTC_Init+0xac>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d4e:	481a      	ldr	r0, [pc, #104]	; (8001db8 <MX_RTC_Init+0xac>)
 8001d50:	f004 fbf2 	bl	8006538 <HAL_RTC_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001d5a:	f7ff ffc7 	bl	8001cec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2200      	movs	r2, #0
 8001d76:	4619      	mov	r1, r3
 8001d78:	480f      	ldr	r0, [pc, #60]	; (8001db8 <MX_RTC_Init+0xac>)
 8001d7a:	f004 fcb5 	bl	80066e8 <HAL_RTC_SetTime>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001d84:	f7ff ffb2 	bl	8001cec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001d88:	2305      	movs	r3, #5
 8001d8a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001d90:	2307      	movs	r3, #7
 8001d92:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8001d94:	2316      	movs	r3, #22
 8001d96:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d98:	463b      	mov	r3, r7
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <MX_RTC_Init+0xac>)
 8001da0:	f004 fdea 	bl	8006978 <HAL_RTC_SetDate>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001daa:	f7ff ff9f 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20001308 	.word	0x20001308
 8001dbc:	40002800 	.word	0x40002800

08001dc0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
 8001dd8:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <HAL_RTC_MspInit+0x50>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d111      	bne.n	8001e08 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001de4:	2302      	movs	r3, #2
 8001de6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dec:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 f98a 	bl	800610c <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001dfe:	f7ff ff75 	bl	8001cec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_RTC_MspInit+0x54>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40002800 	.word	0x40002800
 8001e14:	42470e3c 	.word	0x42470e3c

08001e18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <MX_SPI1_Init+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e64:	220a      	movs	r2, #10
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_SPI1_Init+0x64>)
 8001e6a:	f004 ff4f 	bl	8006d0c <HAL_SPI_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e74:	f7ff ff3a 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20001328 	.word	0x20001328
 8001e80:	40013000 	.word	0x40013000

08001e84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_SPI_MspInit+0x84>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12b      	bne.n	8001efe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001eb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ede:	23a0      	movs	r3, #160	; 0xa0
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eee:	2305      	movs	r3, #5
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <HAL_SPI_MspInit+0x8c>)
 8001efa:	f001 fd91 	bl	8003a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001efe:	bf00      	nop
 8001f00:	3728      	adds	r7, #40	; 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40013000 	.word	0x40013000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000

08001f14 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2110      	movs	r1, #16
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <ST7735_Select+0x14>)
 8001f1e:	f002 f819 	bl	8003f54 <HAL_GPIO_WritePin>
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40020000 	.word	0x40020000

08001f2c <ST7735_Unselect>:

void ST7735_Unselect() {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2110      	movs	r1, #16
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <ST7735_Unselect+0x14>)
 8001f36:	f002 f80d 	bl	8003f54 <HAL_GPIO_WritePin>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40020000 	.word	0x40020000

08001f44 <ST7735_Reset>:

static void ST7735_Reset() {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	4806      	ldr	r0, [pc, #24]	; (8001f68 <ST7735_Reset+0x24>)
 8001f4e:	f002 f801 	bl	8003f54 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001f52:	2005      	movs	r0, #5
 8001f54:	f000 ff22 	bl	8002d9c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2108      	movs	r1, #8
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <ST7735_Reset+0x24>)
 8001f5e:	f001 fff9 	bl	8003f54 <HAL_GPIO_WritePin>
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40020000 	.word	0x40020000

08001f6c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2104      	movs	r1, #4
 8001f7a:	4807      	ldr	r0, [pc, #28]	; (8001f98 <ST7735_WriteCommand+0x2c>)
 8001f7c:	f001 ffea 	bl	8003f54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001f80:	1df9      	adds	r1, r7, #7
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	2201      	movs	r2, #1
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <ST7735_WriteCommand+0x30>)
 8001f8a:	f005 f85b 	bl	8007044 <HAL_SPI_Transmit>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	20001328 	.word	0x20001328

08001fa0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	2104      	movs	r1, #4
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <ST7735_WriteData+0x2c>)
 8001fb0:	f001 ffd0 	bl	8003f54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <ST7735_WriteData+0x30>)
 8001fc0:	f005 f840 	bl	8007044 <HAL_SPI_Transmit>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	20001328 	.word	0x20001328

08001fd4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001fe6:	e034      	b.n	8002052 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ffb9 	bl	8001f6c <ST7735_WriteCommand>

        numArgs = *addr++;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002004:	7abb      	ldrb	r3, [r7, #10]
 8002006:	b29b      	uxth	r3, r3
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800200e:	7abb      	ldrb	r3, [r7, #10]
 8002010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002014:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002016:	7abb      	ldrb	r3, [r7, #10]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800201c:	7abb      	ldrb	r3, [r7, #10]
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ffbd 	bl	8001fa0 <ST7735_WriteData>
            addr += numArgs;
 8002026:	7abb      	ldrb	r3, [r7, #10]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800202e:	89bb      	ldrh	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00e      	beq.n	8002052 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800203e:	89bb      	ldrh	r3, [r7, #12]
 8002040:	2bff      	cmp	r3, #255	; 0xff
 8002042:	d102      	bne.n	800204a <ST7735_ExecuteCommandList+0x76>
 8002044:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002048:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800204a:	89bb      	ldrh	r3, [r7, #12]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fea5 	bl	8002d9c <HAL_Delay>
    while(numCommands--) {
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	1e5a      	subs	r2, r3, #1
 8002056:	73fa      	strb	r2, [r7, #15]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1c5      	bne.n	8001fe8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002066:	b590      	push	{r4, r7, lr}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	4604      	mov	r4, r0
 800206e:	4608      	mov	r0, r1
 8002070:	4611      	mov	r1, r2
 8002072:	461a      	mov	r2, r3
 8002074:	4623      	mov	r3, r4
 8002076:	71fb      	strb	r3, [r7, #7]
 8002078:	4603      	mov	r3, r0
 800207a:	71bb      	strb	r3, [r7, #6]
 800207c:	460b      	mov	r3, r1
 800207e:	717b      	strb	r3, [r7, #5]
 8002080:	4613      	mov	r3, r2
 8002082:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002084:	202a      	movs	r0, #42	; 0x2a
 8002086:	f7ff ff71 	bl	8001f6c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800208a:	2300      	movs	r3, #0
 800208c:	733b      	strb	r3, [r7, #12]
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	3301      	adds	r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	737b      	strb	r3, [r7, #13]
 8002096:	2300      	movs	r3, #0
 8002098:	73bb      	strb	r3, [r7, #14]
 800209a:	797b      	ldrb	r3, [r7, #5]
 800209c:	3301      	adds	r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	2104      	movs	r1, #4
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff79 	bl	8001fa0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80020ae:	202b      	movs	r0, #43	; 0x2b
 80020b0:	f7ff ff5c 	bl	8001f6c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	331a      	adds	r3, #26
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80020bc:	793b      	ldrb	r3, [r7, #4]
 80020be:	331a      	adds	r3, #26
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	2104      	movs	r1, #4
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff68 	bl	8001fa0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80020d0:	202c      	movs	r0, #44	; 0x2c
 80020d2:	f7ff ff4b 	bl	8001f6c <ST7735_WriteCommand>
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}
	...

080020e0 <ST7735_Init>:

void ST7735_Init() {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
    ST7735_Select();
 80020e4:	f7ff ff16 	bl	8001f14 <ST7735_Select>
    ST7735_Reset();
 80020e8:	f7ff ff2c 	bl	8001f44 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80020ec:	4806      	ldr	r0, [pc, #24]	; (8002108 <ST7735_Init+0x28>)
 80020ee:	f7ff ff71 	bl	8001fd4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <ST7735_Init+0x2c>)
 80020f4:	f7ff ff6e 	bl	8001fd4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <ST7735_Init+0x30>)
 80020fa:	f7ff ff6b 	bl	8001fd4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80020fe:	f7ff ff15 	bl	8001f2c <ST7735_Unselect>
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	08013920 	.word	0x08013920
 800210c:	0801395c 	.word	0x0801395c
 8002110:	0801396c 	.word	0x0801396c

08002114 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002114:	b082      	sub	sp, #8
 8002116:	b590      	push	{r4, r7, lr}
 8002118:	b089      	sub	sp, #36	; 0x24
 800211a:	af00      	add	r7, sp, #0
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
 8002122:	460b      	mov	r3, r1
 8002124:	80bb      	strh	r3, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	b2d8      	uxtb	r0, r3
 800212e:	88bb      	ldrh	r3, [r7, #4]
 8002130:	b2d9      	uxtb	r1, r3
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800213a:	4413      	add	r3, r2
 800213c:	b2db      	uxtb	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b2dc      	uxtb	r4, r3
 8002142:	88bb      	ldrh	r3, [r7, #4]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800214a:	4413      	add	r3, r2
 800214c:	b2db      	uxtb	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4622      	mov	r2, r4
 8002154:	f7ff ff87 	bl	8002066 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	e043      	b.n	80021e6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800215e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	3b20      	subs	r3, #32
 8002164:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4619      	mov	r1, r3
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	440b      	add	r3, r1
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	e029      	b.n	80021d4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00e      	beq.n	80021ae <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002190:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b29b      	uxth	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	743b      	strb	r3, [r7, #16]
 800219a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800219c:	b2db      	uxtb	r3, r3
 800219e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	2102      	movs	r1, #2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fefa 	bl	8001fa0 <ST7735_WriteData>
 80021ac:	e00f      	b.n	80021ce <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80021ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	733b      	strb	r3, [r7, #12]
 80021ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	2102      	movs	r1, #2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fee9 	bl	8001fa0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021d8:	461a      	mov	r2, r3
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4293      	cmp	r3, r2
 80021de:	d3cf      	bcc.n	8002180 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	3301      	adds	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021ea:	461a      	mov	r2, r3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d3b5      	bcc.n	800215e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	3724      	adds	r7, #36	; 0x24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021fe:	b002      	add	sp, #8
 8002200:	4770      	bx	lr

08002202 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002202:	b082      	sub	sp, #8
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af04      	add	r7, sp, #16
 800220a:	603a      	str	r2, [r7, #0]
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
 8002212:	460b      	mov	r3, r1
 8002214:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002216:	f7ff fe7d 	bl	8001f14 <ST7735_Select>

    while(*str) {
 800221a:	e02d      	b.n	8002278 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	7d3a      	ldrb	r2, [r7, #20]
 8002220:	4413      	add	r3, r2
 8002222:	2b9f      	cmp	r3, #159	; 0x9f
 8002224:	dd13      	ble.n	800224e <ST7735_WriteString+0x4c>
            x = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800222a:	7d7b      	ldrb	r3, [r7, #21]
 800222c:	b29a      	uxth	r2, r3
 800222e:	88bb      	ldrh	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	7d7a      	ldrb	r2, [r7, #21]
 8002238:	4413      	add	r3, r2
 800223a:	2b4f      	cmp	r3, #79	; 0x4f
 800223c:	dc21      	bgt.n	8002282 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b20      	cmp	r3, #32
 8002244:	d103      	bne.n	800224e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	603b      	str	r3, [r7, #0]
                continue;
 800224c:	e014      	b.n	8002278 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	88b9      	ldrh	r1, [r7, #4]
 8002254:	88f8      	ldrh	r0, [r7, #6]
 8002256:	8c3b      	ldrh	r3, [r7, #32]
 8002258:	9302      	str	r3, [sp, #8]
 800225a:	8bbb      	ldrh	r3, [r7, #28]
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f7ff ff56 	bl	8002114 <ST7735_WriteChar>
        x += font.width;
 8002268:	7d3b      	ldrb	r3, [r7, #20]
 800226a:	b29a      	uxth	r2, r3
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	4413      	add	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
        str++;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1cd      	bne.n	800221c <ST7735_WriteString+0x1a>
 8002280:	e000      	b.n	8002284 <ST7735_WriteString+0x82>
                break;
 8002282:	bf00      	nop
    }

    ST7735_Unselect();
 8002284:	f7ff fe52 	bl	8001f2c <ST7735_Unselect>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002292:	b002      	add	sp, #8
 8002294:	4770      	bx	lr
	...

08002298 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	4604      	mov	r4, r0
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4623      	mov	r3, r4
 80022a8:	80fb      	strh	r3, [r7, #6]
 80022aa:	4603      	mov	r3, r0
 80022ac:	80bb      	strh	r3, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]
 80022b2:	4613      	mov	r3, r2
 80022b4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	2b9f      	cmp	r3, #159	; 0x9f
 80022ba:	d857      	bhi.n	800236c <ST7735_FillRectangle+0xd4>
 80022bc:	88bb      	ldrh	r3, [r7, #4]
 80022be:	2b4f      	cmp	r3, #79	; 0x4f
 80022c0:	d854      	bhi.n	800236c <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80022c2:	88fa      	ldrh	r2, [r7, #6]
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	4413      	add	r3, r2
 80022c8:	2ba0      	cmp	r3, #160	; 0xa0
 80022ca:	dd03      	ble.n	80022d4 <ST7735_FillRectangle+0x3c>
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80022d2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80022d4:	88ba      	ldrh	r2, [r7, #4]
 80022d6:	883b      	ldrh	r3, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	2b50      	cmp	r3, #80	; 0x50
 80022dc:	dd03      	ble.n	80022e6 <ST7735_FillRectangle+0x4e>
 80022de:	88bb      	ldrh	r3, [r7, #4]
 80022e0:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80022e4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80022e6:	f7ff fe15 	bl	8001f14 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	b2d8      	uxtb	r0, r3
 80022ee:	88bb      	ldrh	r3, [r7, #4]
 80022f0:	b2d9      	uxtb	r1, r3
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	887b      	ldrh	r3, [r7, #2]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b2dc      	uxtb	r4, r3
 8002302:	88bb      	ldrh	r3, [r7, #4]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	883b      	ldrh	r3, [r7, #0]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4413      	add	r3, r2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	4622      	mov	r2, r4
 8002314:	f7ff fea7 	bl	8002066 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002318:	8c3b      	ldrh	r3, [r7, #32]
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	b29b      	uxth	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	733b      	strb	r3, [r7, #12]
 8002322:	8c3b      	ldrh	r3, [r7, #32]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002328:	2201      	movs	r2, #1
 800232a:	2104      	movs	r1, #4
 800232c:	4811      	ldr	r0, [pc, #68]	; (8002374 <ST7735_FillRectangle+0xdc>)
 800232e:	f001 fe11 	bl	8003f54 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002332:	883b      	ldrh	r3, [r7, #0]
 8002334:	80bb      	strh	r3, [r7, #4]
 8002336:	e013      	b.n	8002360 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	80fb      	strh	r3, [r7, #6]
 800233c:	e00a      	b.n	8002354 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800233e:	f107 010c 	add.w	r1, r7, #12
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	2202      	movs	r2, #2
 8002348:	480b      	ldr	r0, [pc, #44]	; (8002378 <ST7735_FillRectangle+0xe0>)
 800234a:	f004 fe7b 	bl	8007044 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	3b01      	subs	r3, #1
 8002352:	80fb      	strh	r3, [r7, #6]
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f1      	bne.n	800233e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800235a:	88bb      	ldrh	r3, [r7, #4]
 800235c:	3b01      	subs	r3, #1
 800235e:	80bb      	strh	r3, [r7, #4]
 8002360:	88bb      	ldrh	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1e8      	bne.n	8002338 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8002366:	f7ff fde1 	bl	8001f2c <ST7735_Unselect>
 800236a:	e000      	b.n	800236e <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800236c:	bf00      	nop
}
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bd90      	pop	{r4, r7, pc}
 8002374:	40020000 	.word	0x40020000
 8002378:	20001328 	.word	0x20001328

0800237c <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	4604      	mov	r4, r0
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4623      	mov	r3, r4
 800238c:	80fb      	strh	r3, [r7, #6]
 800238e:	4603      	mov	r3, r0
 8002390:	80bb      	strh	r3, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	807b      	strh	r3, [r7, #2]
 8002396:	4613      	mov	r3, r2
 8002398:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	2b9f      	cmp	r3, #159	; 0x9f
 800239e:	d869      	bhi.n	8002474 <ST7735_FillRectangleFast+0xf8>
 80023a0:	88bb      	ldrh	r3, [r7, #4]
 80023a2:	2b4f      	cmp	r3, #79	; 0x4f
 80023a4:	d866      	bhi.n	8002474 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	4413      	add	r3, r2
 80023ac:	2ba0      	cmp	r3, #160	; 0xa0
 80023ae:	dd03      	ble.n	80023b8 <ST7735_FillRectangleFast+0x3c>
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80023b6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80023b8:	88ba      	ldrh	r2, [r7, #4]
 80023ba:	883b      	ldrh	r3, [r7, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	2b50      	cmp	r3, #80	; 0x50
 80023c0:	dd03      	ble.n	80023ca <ST7735_FillRectangleFast+0x4e>
 80023c2:	88bb      	ldrh	r3, [r7, #4]
 80023c4:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80023c8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80023ca:	f7ff fda3 	bl	8001f14 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	b2d8      	uxtb	r0, r3
 80023d2:	88bb      	ldrh	r3, [r7, #4]
 80023d4:	b2d9      	uxtb	r1, r3
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4413      	add	r3, r2
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b2dc      	uxtb	r4, r3
 80023e6:	88bb      	ldrh	r3, [r7, #4]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	883b      	ldrh	r3, [r7, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4622      	mov	r2, r4
 80023f8:	f7ff fe35 	bl	8002066 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80023fc:	8c3b      	ldrh	r3, [r7, #32]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	b29b      	uxth	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	723b      	strb	r3, [r7, #8]
 8002406:	8c3b      	ldrh	r3, [r7, #32]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f00e faf5 	bl	8010a00 <malloc>
 8002416:	4603      	mov	r3, r0
 8002418:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800241a:	2300      	movs	r3, #0
 800241c:	80fb      	strh	r3, [r7, #6]
 800241e:	e008      	b.n	8002432 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	893a      	ldrh	r2, [r7, #8]
 800242a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	3301      	adds	r3, #1
 8002430:	80fb      	strh	r3, [r7, #6]
 8002432:	88fa      	ldrh	r2, [r7, #6]
 8002434:	887b      	ldrh	r3, [r7, #2]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3f2      	bcc.n	8002420 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800243a:	2201      	movs	r2, #1
 800243c:	2104      	movs	r1, #4
 800243e:	480f      	ldr	r0, [pc, #60]	; (800247c <ST7735_FillRectangleFast+0x100>)
 8002440:	f001 fd88 	bl	8003f54 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8002444:	883b      	ldrh	r3, [r7, #0]
 8002446:	80bb      	strh	r3, [r7, #4]
 8002448:	e00b      	b.n	8002462 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
 8002454:	68f9      	ldr	r1, [r7, #12]
 8002456:	480a      	ldr	r0, [pc, #40]	; (8002480 <ST7735_FillRectangleFast+0x104>)
 8002458:	f004 fdf4 	bl	8007044 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 800245c:	88bb      	ldrh	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	80bb      	strh	r3, [r7, #4]
 8002462:	88bb      	ldrh	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f0      	bne.n	800244a <ST7735_FillRectangleFast+0xce>

    free(line);
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f00e fad1 	bl	8010a10 <free>
    ST7735_Unselect();
 800246e:	f7ff fd5d 	bl	8001f2c <ST7735_Unselect>
 8002472:	e000      	b.n	8002476 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002474:	bf00      	nop
}
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	40020000 	.word	0x40020000
 8002480:	20001328 	.word	0x20001328

08002484 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af02      	add	r7, sp, #8
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2350      	movs	r3, #80	; 0x50
 8002494:	22a0      	movs	r2, #160	; 0xa0
 8002496:	2100      	movs	r1, #0
 8002498:	2000      	movs	r0, #0
 800249a:	f7ff fefd 	bl	8002298 <ST7735_FillRectangle>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af02      	add	r7, sp, #8
 80024ac:	4603      	mov	r3, r0
 80024ae:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2350      	movs	r3, #80	; 0x50
 80024b6:	22a0      	movs	r2, #160	; 0xa0
 80024b8:	2100      	movs	r1, #0
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff ff5e 	bl	800237c <ST7735_FillRectangleFast>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_MspInit+0x54>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a11      	ldr	r2, [pc, #68]	; (800251c <HAL_MspInit+0x54>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_MspInit+0x54>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_MspInit+0x54>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_MspInit+0x54>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_MspInit+0x54>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	210f      	movs	r1, #15
 800250a:	f06f 0001 	mvn.w	r0, #1
 800250e:	f000 fd37 	bl	8002f80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	2032      	movs	r0, #50	; 0x32
 8002536:	f000 fd23 	bl	8002f80 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800253a:	2032      	movs	r0, #50	; 0x32
 800253c:	f000 fd4c 	bl	8002fd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <HAL_InitTick+0xa0>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <HAL_InitTick+0xa0>)
 800254a:	f043 0308 	orr.w	r3, r3, #8
 800254e:	6413      	str	r3, [r2, #64]	; 0x40
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_InitTick+0xa0>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800255c:	f107 0210 	add.w	r2, r7, #16
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fd9e 	bl	80060a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800256c:	f003 fd74 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8002570:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_InitTick+0xa4>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9b      	lsrs	r3, r3, #18
 800257c:	3b01      	subs	r3, #1
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_InitTick+0xa8>)
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <HAL_InitTick+0xac>)
 8002584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_InitTick+0xa8>)
 8002588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800258c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_InitTick+0xa8>)
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_InitTick+0xa8>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_InitTick+0xa8>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80025a0:	4809      	ldr	r0, [pc, #36]	; (80025c8 <HAL_InitTick+0xa8>)
 80025a2:	f004 ff65 	bl	8007470 <HAL_TIM_Base_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d104      	bne.n	80025b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80025ac:	4806      	ldr	r0, [pc, #24]	; (80025c8 <HAL_InitTick+0xa8>)
 80025ae:	f005 f825 	bl	80075fc <HAL_TIM_Base_Start_IT>
 80025b2:	4603      	mov	r3, r0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3730      	adds	r7, #48	; 0x30
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	431bde83 	.word	0x431bde83
 80025c8:	20001380 	.word	0x20001380
 80025cc:	40000c00 	.word	0x40000c00

080025d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <NMI_Handler+0x4>

080025d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025da:	e7fe      	b.n	80025da <HardFault_Handler+0x4>

080025dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <MemManage_Handler+0x4>

080025e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <BusFault_Handler+0x4>

080025e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <UsageFault_Handler+0x4>

080025ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8002600:	2001      	movs	r0, #1
 8002602:	f001 fd01 	bl	8004008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002610:	4808      	ldr	r0, [pc, #32]	; (8002634 <TIM3_IRQHandler+0x28>)
 8002612:	f005 fbad 	bl	8007d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <TIM3_IRQHandler+0x2c>)
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <TIM3_IRQHandler+0x2c>)
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <TIM3_IRQHandler+0x2c>)
 8002628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800262c:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20001420 	.word	0x20001420
 8002638:	40000400 	.word	0x40000400

0800263c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <DMA1_Stream7_IRQHandler+0x10>)
 8002642:	f000 ff83 	bl	800354c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200014b0 	.word	0x200014b0

08002650 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <TIM5_IRQHandler+0x10>)
 8002656:	f005 fb8b 	bl	8007d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20001380 	.word	0x20001380

08002664 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <OTG_FS_IRQHandler+0x10>)
 800266a:	f001 fe40 	bl	80042ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2001c820 	.word	0x2001c820

08002678 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 8002682:	23ff      	movs	r3, #255	; 0xff
 8002684:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 8002690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	db11      	blt.n	80026bc <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8002698:	f000 fb74 	bl	8002d84 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x50>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b63      	cmp	r3, #99	; 0x63
 80026a8:	d90a      	bls.n	80026c0 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 80026aa:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x50>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 80026b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b4:	4a05      	ldr	r2, [pc, #20]	; (80026cc <HAL_GPIO_EXTI_Callback+0x54>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	54d1      	strb	r1, [r2, r3]
 80026ba:	e002      	b.n	80026c2 <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 80026bc:	bf00      	nop
 80026be:	e000      	b.n	80026c2 <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 80026c0:	bf00      	nop
}
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200013d0 	.word	0x200013d0
 80026cc:	200013c8 	.word	0x200013c8

080026d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <_sbrk+0x5c>)
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <_sbrk+0x60>)
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <_sbrk+0x64>)
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <_sbrk+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d207      	bcs.n	8002710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002700:	f00e f954 	bl	80109ac <__errno>
 8002704:	4603      	mov	r3, r0
 8002706:	220c      	movs	r2, #12
 8002708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	e009      	b.n	8002724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <_sbrk+0x64>)
 8002720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20020000 	.word	0x20020000
 8002730:	00000800 	.word	0x00000800
 8002734:	200013d4 	.word	0x200013d4
 8002738:	2001cf58 	.word	0x2001cf58

0800273c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <SystemInit+0x20>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <SystemInit+0x20>)
 8002748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800274c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002774:	463b      	mov	r3, r7
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800277c:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <MX_TIM1_Init+0x98>)
 800277e:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <MX_TIM1_Init+0x9c>)
 8002780:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <MX_TIM1_Init+0x98>)
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <MX_TIM1_Init+0x98>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800278e:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <MX_TIM1_Init+0x98>)
 8002790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002794:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <MX_TIM1_Init+0x98>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 100;
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <MX_TIM1_Init+0x98>)
 800279e:	2264      	movs	r2, #100	; 0x64
 80027a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <MX_TIM1_Init+0x98>)
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027a8:	4813      	ldr	r0, [pc, #76]	; (80027f8 <MX_TIM1_Init+0x98>)
 80027aa:	f004 fe61 	bl	8007470 <HAL_TIM_Base_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80027b4:	f7ff fa9a 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	4619      	mov	r1, r3
 80027c4:	480c      	ldr	r0, [pc, #48]	; (80027f8 <MX_TIM1_Init+0x98>)
 80027c6:	f005 fd81 	bl	80082cc <HAL_TIM_ConfigClockSource>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80027d0:	f7ff fa8c 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d4:	2300      	movs	r3, #0
 80027d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027dc:	463b      	mov	r3, r7
 80027de:	4619      	mov	r1, r3
 80027e0:	4805      	ldr	r0, [pc, #20]	; (80027f8 <MX_TIM1_Init+0x98>)
 80027e2:	f006 fc9b 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80027ec:	f7ff fa7e 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027f0:	bf00      	nop
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200013d8 	.word	0x200013d8
 80027fc:	40010000 	.word	0x40010000

08002800 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	; 0x30
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002806:	f107 030c 	add.w	r3, r7, #12
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f00e f914 	bl	8010a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800281c:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <MX_TIM3_Init+0xa0>)
 800281e:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <MX_TIM3_Init+0xa4>)
 8002820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <MX_TIM3_Init+0xa0>)
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <MX_TIM3_Init+0xa0>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800282e:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <MX_TIM3_Init+0xa0>)
 8002830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002834:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <MX_TIM3_Init+0xa0>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <MX_TIM3_Init+0xa0>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002842:	2301      	movs	r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800284a:	2301      	movs	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8002852:	2306      	movs	r3, #6
 8002854:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800285a:	2301      	movs	r3, #1
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800285e:	2300      	movs	r3, #0
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8002862:	2306      	movs	r3, #6
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	4619      	mov	r1, r3
 800286c:	480c      	ldr	r0, [pc, #48]	; (80028a0 <MX_TIM3_Init+0xa0>)
 800286e:	f005 f827 	bl	80078c0 <HAL_TIM_Encoder_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002878:	f7ff fa38 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	4619      	mov	r1, r3
 8002888:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_TIM3_Init+0xa0>)
 800288a:	f006 fc47 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002894:	f7ff fa2a 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	3730      	adds	r7, #48	; 0x30
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20001420 	.word	0x20001420
 80028a4:	40000400 	.word	0x40000400

080028a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08e      	sub	sp, #56	; 0x38
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028bc:	f107 0320 	add.w	r3, r7, #32
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
 80028d4:	615a      	str	r2, [r3, #20]
 80028d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028d8:	4b2c      	ldr	r3, [pc, #176]	; (800298c <MX_TIM4_Init+0xe4>)
 80028da:	4a2d      	ldr	r2, [pc, #180]	; (8002990 <MX_TIM4_Init+0xe8>)
 80028dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <MX_TIM4_Init+0xe4>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <MX_TIM4_Init+0xe4>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <MX_TIM4_Init+0xe4>)
 80028ec:	223c      	movs	r2, #60	; 0x3c
 80028ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80028f0:	4b26      	ldr	r3, [pc, #152]	; (800298c <MX_TIM4_Init+0xe4>)
 80028f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f8:	4b24      	ldr	r3, [pc, #144]	; (800298c <MX_TIM4_Init+0xe4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028fe:	4823      	ldr	r0, [pc, #140]	; (800298c <MX_TIM4_Init+0xe4>)
 8002900:	f004 fdb6 	bl	8007470 <HAL_TIM_Base_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800290a:	f7ff f9ef 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800290e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002918:	4619      	mov	r1, r3
 800291a:	481c      	ldr	r0, [pc, #112]	; (800298c <MX_TIM4_Init+0xe4>)
 800291c:	f005 fcd6 	bl	80082cc <HAL_TIM_ConfigClockSource>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002926:	f7ff f9e1 	bl	8001cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800292a:	4818      	ldr	r0, [pc, #96]	; (800298c <MX_TIM4_Init+0xe4>)
 800292c:	f004 fef8 	bl	8007720 <HAL_TIM_PWM_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002936:	f7ff f9d9 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002942:	f107 0320 	add.w	r3, r7, #32
 8002946:	4619      	mov	r1, r3
 8002948:	4810      	ldr	r0, [pc, #64]	; (800298c <MX_TIM4_Init+0xe4>)
 800294a:	f006 fbe7 	bl	800911c <HAL_TIMEx_MasterConfigSynchronization>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002954:	f7ff f9ca 	bl	8001cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002958:	2360      	movs	r3, #96	; 0x60
 800295a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	2208      	movs	r2, #8
 800296c:	4619      	mov	r1, r3
 800296e:	4807      	ldr	r0, [pc, #28]	; (800298c <MX_TIM4_Init+0xe4>)
 8002970:	f005 fb06 	bl	8007f80 <HAL_TIM_PWM_ConfigChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800297a:	f7ff f9b7 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800297e:	4803      	ldr	r0, [pc, #12]	; (800298c <MX_TIM4_Init+0xe4>)
 8002980:	f000 f8e4 	bl	8002b4c <HAL_TIM_MspPostInit>

}
 8002984:	bf00      	nop
 8002986:	3738      	adds	r7, #56	; 0x38
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20001468 	.word	0x20001468
 8002990:	40000800 	.word	0x40000800

08002994 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a2d      	ldr	r2, [pc, #180]	; (8002a58 <HAL_TIM_Base_MspInit+0xc4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d10e      	bne.n	80029c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <HAL_TIM_Base_MspInit+0xc8>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a2b      	ldr	r2, [pc, #172]	; (8002a5c <HAL_TIM_Base_MspInit+0xc8>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_TIM_Base_MspInit+0xc8>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80029c2:	e044      	b.n	8002a4e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM4)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a25      	ldr	r2, [pc, #148]	; (8002a60 <HAL_TIM_Base_MspInit+0xcc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d13f      	bne.n	8002a4e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_TIM_Base_MspInit+0xc8>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <HAL_TIM_Base_MspInit+0xc8>)
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <HAL_TIM_Base_MspInit+0xc8>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 80029ec:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <HAL_TIM_Base_MspInit+0xd4>)
 80029ee:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 80029f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029f6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 80029fa:	2240      	movs	r2, #64	; 0x40
 80029fc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fe:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002a04:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 8002a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 8002a0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a12:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 8002a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a1a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 8002a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a22:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 8002a26:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a2a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002a32:	480c      	ldr	r0, [pc, #48]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 8002a34:	f000 fae8 	bl	8003008 <HAL_DMA_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_TIM_Base_MspInit+0xae>
      Error_Handler();
 8002a3e:	f7ff f955 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a48:	4a06      	ldr	r2, [pc, #24]	; (8002a64 <HAL_TIM_Base_MspInit+0xd0>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40000800 	.word	0x40000800
 8002a64:	200014b0 	.word	0x200014b0
 8002a68:	400260b8 	.word	0x400260b8

08002a6c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2c      	ldr	r2, [pc, #176]	; (8002b3c <HAL_TIM_Encoder_MspInit+0xd0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d151      	bne.n	8002b32 <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a2a      	ldr	r2, [pc, #168]	; (8002b40 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8002ae2:	2340      	movs	r3, #64	; 0x40
 8002ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aea:	2301      	movs	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002af2:	2302      	movs	r3, #2
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	4619      	mov	r1, r3
 8002afc:	4811      	ldr	r0, [pc, #68]	; (8002b44 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002afe:	f000 ff8f 	bl	8003a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8002b02:	2320      	movs	r3, #32
 8002b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b12:	2302      	movs	r3, #2
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	480a      	ldr	r0, [pc, #40]	; (8002b48 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002b1e:	f000 ff7f 	bl	8003a20 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2105      	movs	r1, #5
 8002b26:	201d      	movs	r0, #29
 8002b28:	f000 fa2a 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b2c:	201d      	movs	r0, #29
 8002b2e:	f000 fa53 	bl	8002fd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b32:	bf00      	nop
 8002b34:	3728      	adds	r7, #40	; 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400

08002b4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_TIM_MspPostInit+0x68>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d11e      	bne.n	8002bac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_TIM_MspPostInit+0x6c>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <HAL_TIM_MspPostInit+0x6c>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_TIM_MspPostInit+0x6c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4805      	ldr	r0, [pc, #20]	; (8002bbc <HAL_TIM_MspPostInit+0x70>)
 8002ba8:	f000 ff3a 	bl	8003a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bac:	bf00      	nop
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40000800 	.word	0x40000800
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40020400 	.word	0x40020400

08002bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc4:	480d      	ldr	r0, [pc, #52]	; (8002bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bc6:	490e      	ldr	r1, [pc, #56]	; (8002c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bc8:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bcc:	e002      	b.n	8002bd4 <LoopCopyDataInit>

08002bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd2:	3304      	adds	r3, #4

08002bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd8:	d3f9      	bcc.n	8002bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bda:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bdc:	4c0b      	ldr	r4, [pc, #44]	; (8002c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be0:	e001      	b.n	8002be6 <LoopFillZerobss>

08002be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be4:	3204      	adds	r2, #4

08002be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be8:	d3fb      	bcc.n	8002be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bea:	f7ff fda7 	bl	800273c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bee:	f00d fee3 	bl	80109b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf2:	f7fe ffb3 	bl	8001b5c <main>
  bx  lr    
 8002bf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c00:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002c04:	08013a5c 	.word	0x08013a5c
  ldr r2, =_sbss
 8002c08:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c0c:	2001cf58 	.word	0x2001cf58

08002c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c10:	e7fe      	b.n	8002c10 <ADC_IRQHandler>

08002c12 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c20:	b672      	cpsid	i
}
 8002c22:	bf00      	nop
 8002c24:	f7ff f862 	bl	8001cec <Error_Handler>
 8002c28:	e7fe      	b.n	8002c28 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7a1b      	ldrb	r3, [r3, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d904      	bls.n	8002c3c <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c32:	b672      	cpsid	i
}
 8002c34:	bf00      	nop
 8002c36:	f7ff f859 	bl	8001cec <Error_Handler>
 8002c3a:	e7fe      	b.n	8002c3a <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7a1b      	ldrb	r3, [r3, #8]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	b2d1      	uxtb	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	7211      	strb	r1, [r2, #8]
 8002c48:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c4a:	f3ef 8211 	mrs	r2, BASEPRI
 8002c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	60fa      	str	r2, [r7, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
}
 8002c82:	bf00      	nop
 8002c84:	f7ff f832 	bl	8001cec <Error_Handler>
 8002c88:	e7fe      	b.n	8002c88 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7a1b      	ldrb	r3, [r3, #8]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7a1b      	ldrb	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d904      	bls.n	8002ca8 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9e:	b672      	cpsid	i
}
 8002ca0:	bf00      	nop
 8002ca2:	f7ff f823 	bl	8001cec <Error_Handler>
 8002ca6:	e7fe      	b.n	8002ca6 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7a1b      	ldrb	r3, [r3, #8]
 8002cac:	461a      	mov	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cbc:	bf00      	nop
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d104      	bne.n	8002cde <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd4:	b672      	cpsid	i
}
 8002cd6:	bf00      	nop
 8002cd8:	f7ff f808 	bl	8001cec <Error_Handler>
 8002cdc:	e7fe      	b.n	8002cdc <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff96 	bl	8002c12 <stm32_lock_acquire>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d104      	bne.n	8002d06 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfc:	b672      	cpsid	i
}
 8002cfe:	bf00      	nop
 8002d00:	f7fe fff4 	bl	8001cec <Error_Handler>
 8002d04:	e7fe      	b.n	8002d04 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ffb2 	bl	8002c72 <stm32_lock_release>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_Init+0x40>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <HAL_Init+0x40>)
 8002d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_Init+0x40>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <HAL_Init+0x40>)
 8002d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_Init+0x40>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_Init+0x40>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d40:	2003      	movs	r0, #3
 8002d42:	f000 f8fd 	bl	8002f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d46:	200f      	movs	r0, #15
 8002d48:	f7ff fbea 	bl	8002520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d4c:	f7ff fbbc 	bl	80024c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40023c00 	.word	0x40023c00

08002d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x20>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_IncTick+0x24>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_IncTick+0x24>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000094 	.word	0x20000094
 8002d80:	2000151c 	.word	0x2000151c

08002d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return uwTick;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_GetTick+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	2000151c 	.word	0x2000151c

08002d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff ffee 	bl	8002d84 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d005      	beq.n	8002dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_Delay+0x44>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc2:	bf00      	nop
 8002dc4:	f7ff ffde 	bl	8002d84 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d8f7      	bhi.n	8002dc4 <HAL_Delay+0x28>
  {
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000094 	.word	0x20000094

08002de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e16:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	60d3      	str	r3, [r2, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <__NVIC_GetPriorityGrouping+0x18>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	f003 0307 	and.w	r3, r3, #7
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db0b      	blt.n	8002e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4907      	ldr	r1, [pc, #28]	; (8002e80 <__NVIC_EnableIRQ+0x38>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2001      	movs	r0, #1
 8002e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	; (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
         );
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b07      	cmp	r3, #7
 8002f4c:	d00f      	beq.n	8002f6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b06      	cmp	r3, #6
 8002f52:	d00c      	beq.n	8002f6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d009      	beq.n	8002f6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d006      	beq.n	8002f6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d003      	beq.n	8002f6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f66:	2190      	movs	r1, #144	; 0x90
 8002f68:	4804      	ldr	r0, [pc, #16]	; (8002f7c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002f6a:	f7fe fec4 	bl	8001cf6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ff38 	bl	8002de4 <__NVIC_SetPriorityGrouping>
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	08011514 	.word	0x08011514

08002f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d903      	bls.n	8002fa0 <HAL_NVIC_SetPriority+0x20>
 8002f98:	21a8      	movs	r1, #168	; 0xa8
 8002f9a:	480e      	ldr	r0, [pc, #56]	; (8002fd4 <HAL_NVIC_SetPriority+0x54>)
 8002f9c:	f7fe feab 	bl	8001cf6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	d903      	bls.n	8002fae <HAL_NVIC_SetPriority+0x2e>
 8002fa6:	21a9      	movs	r1, #169	; 0xa9
 8002fa8:	480a      	ldr	r0, [pc, #40]	; (8002fd4 <HAL_NVIC_SetPriority+0x54>)
 8002faa:	f7fe fea4 	bl	8001cf6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fae:	f7ff ff3d 	bl	8002e2c <__NVIC_GetPriorityGrouping>
 8002fb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	6978      	ldr	r0, [r7, #20]
 8002fba:	f7ff ff8d 	bl	8002ed8 <NVIC_EncodePriority>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff5c 	bl	8002e84 <__NVIC_SetPriority>
}
 8002fcc:	bf00      	nop
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	08011514 	.word	0x08011514

08002fd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da03      	bge.n	8002ff2 <HAL_NVIC_EnableIRQ+0x1a>
 8002fea:	21bc      	movs	r1, #188	; 0xbc
 8002fec:	4805      	ldr	r0, [pc, #20]	; (8003004 <HAL_NVIC_EnableIRQ+0x2c>)
 8002fee:	f7fe fe82 	bl	8001cf6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff26 	bl	8002e48 <__NVIC_EnableIRQ>
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	08011514 	.word	0x08011514

08003008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003014:	f7ff feb6 	bl	8002d84 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e203      	b.n	800342c <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a8b      	ldr	r2, [pc, #556]	; (8003258 <HAL_DMA_Init+0x250>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d04e      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a8a      	ldr	r2, [pc, #552]	; (800325c <HAL_DMA_Init+0x254>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d049      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a88      	ldr	r2, [pc, #544]	; (8003260 <HAL_DMA_Init+0x258>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d044      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a87      	ldr	r2, [pc, #540]	; (8003264 <HAL_DMA_Init+0x25c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d03f      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a85      	ldr	r2, [pc, #532]	; (8003268 <HAL_DMA_Init+0x260>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d03a      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a84      	ldr	r2, [pc, #528]	; (800326c <HAL_DMA_Init+0x264>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d035      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a82      	ldr	r2, [pc, #520]	; (8003270 <HAL_DMA_Init+0x268>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d030      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a81      	ldr	r2, [pc, #516]	; (8003274 <HAL_DMA_Init+0x26c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d02b      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a7f      	ldr	r2, [pc, #508]	; (8003278 <HAL_DMA_Init+0x270>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d026      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7e      	ldr	r2, [pc, #504]	; (800327c <HAL_DMA_Init+0x274>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d021      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a7c      	ldr	r2, [pc, #496]	; (8003280 <HAL_DMA_Init+0x278>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01c      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7b      	ldr	r2, [pc, #492]	; (8003284 <HAL_DMA_Init+0x27c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d017      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a79      	ldr	r2, [pc, #484]	; (8003288 <HAL_DMA_Init+0x280>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d012      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a78      	ldr	r2, [pc, #480]	; (800328c <HAL_DMA_Init+0x284>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00d      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a76      	ldr	r2, [pc, #472]	; (8003290 <HAL_DMA_Init+0x288>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d008      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a75      	ldr	r2, [pc, #468]	; (8003294 <HAL_DMA_Init+0x28c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <HAL_DMA_Init+0xc4>
 80030c4:	21b7      	movs	r1, #183	; 0xb7
 80030c6:	4874      	ldr	r0, [pc, #464]	; (8003298 <HAL_DMA_Init+0x290>)
 80030c8:	f7fe fe15 	bl	8001cf6 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d026      	beq.n	8003122 <HAL_DMA_Init+0x11a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030dc:	d021      	beq.n	8003122 <HAL_DMA_Init+0x11a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030e6:	d01c      	beq.n	8003122 <HAL_DMA_Init+0x11a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80030f0:	d017      	beq.n	8003122 <HAL_DMA_Init+0x11a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fa:	d012      	beq.n	8003122 <HAL_DMA_Init+0x11a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003104:	d00d      	beq.n	8003122 <HAL_DMA_Init+0x11a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800310e:	d008      	beq.n	8003122 <HAL_DMA_Init+0x11a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003118:	d003      	beq.n	8003122 <HAL_DMA_Init+0x11a>
 800311a:	21b8      	movs	r1, #184	; 0xb8
 800311c:	485e      	ldr	r0, [pc, #376]	; (8003298 <HAL_DMA_Init+0x290>)
 800311e:	f7fe fdea 	bl	8001cf6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_DMA_Init+0x13a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d007      	beq.n	8003142 <HAL_DMA_Init+0x13a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d003      	beq.n	8003142 <HAL_DMA_Init+0x13a>
 800313a:	21b9      	movs	r1, #185	; 0xb9
 800313c:	4856      	ldr	r0, [pc, #344]	; (8003298 <HAL_DMA_Init+0x290>)
 800313e:	f7fe fdda 	bl	8001cf6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314a:	d007      	beq.n	800315c <HAL_DMA_Init+0x154>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_DMA_Init+0x154>
 8003154:	21ba      	movs	r1, #186	; 0xba
 8003156:	4850      	ldr	r0, [pc, #320]	; (8003298 <HAL_DMA_Init+0x290>)
 8003158:	f7fe fdcd 	bl	8001cf6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003164:	d007      	beq.n	8003176 <HAL_DMA_Init+0x16e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_DMA_Init+0x16e>
 800316e:	21bb      	movs	r1, #187	; 0xbb
 8003170:	4849      	ldr	r0, [pc, #292]	; (8003298 <HAL_DMA_Init+0x290>)
 8003172:	f7fe fdc0 	bl	8001cf6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <HAL_DMA_Init+0x192>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003186:	d008      	beq.n	800319a <HAL_DMA_Init+0x192>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003190:	d003      	beq.n	800319a <HAL_DMA_Init+0x192>
 8003192:	21bc      	movs	r1, #188	; 0xbc
 8003194:	4840      	ldr	r0, [pc, #256]	; (8003298 <HAL_DMA_Init+0x290>)
 8003196:	f7fe fdae 	bl	8001cf6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <HAL_DMA_Init+0x1b6>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031aa:	d008      	beq.n	80031be <HAL_DMA_Init+0x1b6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b4:	d003      	beq.n	80031be <HAL_DMA_Init+0x1b6>
 80031b6:	21bd      	movs	r1, #189	; 0xbd
 80031b8:	4837      	ldr	r0, [pc, #220]	; (8003298 <HAL_DMA_Init+0x290>)
 80031ba:	f7fe fd9c 	bl	8001cf6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_DMA_Init+0x1d8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ce:	d007      	beq.n	80031e0 <HAL_DMA_Init+0x1d8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d003      	beq.n	80031e0 <HAL_DMA_Init+0x1d8>
 80031d8:	21be      	movs	r1, #190	; 0xbe
 80031da:	482f      	ldr	r0, [pc, #188]	; (8003298 <HAL_DMA_Init+0x290>)
 80031dc:	f7fe fd8b 	bl	8001cf6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_DMA_Init+0x206>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f0:	d00d      	beq.n	800320e <HAL_DMA_Init+0x206>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031fa:	d008      	beq.n	800320e <HAL_DMA_Init+0x206>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003204:	d003      	beq.n	800320e <HAL_DMA_Init+0x206>
 8003206:	21bf      	movs	r1, #191	; 0xbf
 8003208:	4823      	ldr	r0, [pc, #140]	; (8003298 <HAL_DMA_Init+0x290>)
 800320a:	f7fe fd74 	bl	8001cf6 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_DMA_Init+0x21e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2b04      	cmp	r3, #4
 800321c:	d003      	beq.n	8003226 <HAL_DMA_Init+0x21e>
 800321e:	21c0      	movs	r1, #192	; 0xc0
 8003220:	481d      	ldr	r0, [pc, #116]	; (8003298 <HAL_DMA_Init+0x290>)
 8003222:	f7fe fd68 	bl	8001cf6 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2b00      	cmp	r3, #0
 800322c:	d064      	beq.n	80032f8 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	d032      	beq.n	800329c <HAL_DMA_Init+0x294>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	2b01      	cmp	r3, #1
 800323c:	d02e      	beq.n	800329c <HAL_DMA_Init+0x294>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	2b02      	cmp	r3, #2
 8003244:	d02a      	beq.n	800329c <HAL_DMA_Init+0x294>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	2b03      	cmp	r3, #3
 800324c:	d026      	beq.n	800329c <HAL_DMA_Init+0x294>
 800324e:	21c5      	movs	r1, #197	; 0xc5
 8003250:	4811      	ldr	r0, [pc, #68]	; (8003298 <HAL_DMA_Init+0x290>)
 8003252:	f7fe fd50 	bl	8001cf6 <assert_failed>
 8003256:	e021      	b.n	800329c <HAL_DMA_Init+0x294>
 8003258:	40026010 	.word	0x40026010
 800325c:	40026028 	.word	0x40026028
 8003260:	40026040 	.word	0x40026040
 8003264:	40026058 	.word	0x40026058
 8003268:	40026070 	.word	0x40026070
 800326c:	40026088 	.word	0x40026088
 8003270:	400260a0 	.word	0x400260a0
 8003274:	400260b8 	.word	0x400260b8
 8003278:	40026410 	.word	0x40026410
 800327c:	40026428 	.word	0x40026428
 8003280:	40026440 	.word	0x40026440
 8003284:	40026458 	.word	0x40026458
 8003288:	40026470 	.word	0x40026470
 800328c:	40026488 	.word	0x40026488
 8003290:	400264a0 	.word	0x400264a0
 8003294:	400264b8 	.word	0x400264b8
 8003298:	08011550 	.word	0x08011550
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <HAL_DMA_Init+0x2c2>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ac:	d00d      	beq.n	80032ca <HAL_DMA_Init+0x2c2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b6:	d008      	beq.n	80032ca <HAL_DMA_Init+0x2c2>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032c0:	d003      	beq.n	80032ca <HAL_DMA_Init+0x2c2>
 80032c2:	21c6      	movs	r1, #198	; 0xc6
 80032c4:	485b      	ldr	r0, [pc, #364]	; (8003434 <HAL_DMA_Init+0x42c>)
 80032c6:	f7fe fd16 	bl	8001cf6 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d012      	beq.n	80032f8 <HAL_DMA_Init+0x2f0>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032da:	d00d      	beq.n	80032f8 <HAL_DMA_Init+0x2f0>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e4:	d008      	beq.n	80032f8 <HAL_DMA_Init+0x2f0>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032ee:	d003      	beq.n	80032f8 <HAL_DMA_Init+0x2f0>
 80032f0:	21c7      	movs	r1, #199	; 0xc7
 80032f2:	4850      	ldr	r0, [pc, #320]	; (8003434 <HAL_DMA_Init+0x42c>)
 80032f4:	f7fe fcff 	bl	8001cf6 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003318:	e00f      	b.n	800333a <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800331a:	f7ff fd33 	bl	8002d84 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b05      	cmp	r3, #5
 8003326:	d908      	bls.n	800333a <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2203      	movs	r2, #3
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e078      	b.n	800342c <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e8      	bne.n	800331a <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4b39      	ldr	r3, [pc, #228]	; (8003438 <HAL_DMA_Init+0x430>)
 8003354:	4013      	ands	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003366:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	2b04      	cmp	r3, #4
 8003392:	d107      	bne.n	80033a4 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	4313      	orrs	r3, r2
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0307 	bic.w	r3, r3, #7
 80033ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d117      	bne.n	80033fe <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00e      	beq.n	80033fe <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 faa1 	bl	8003928 <DMA_CheckFifoParam>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033fa:	2301      	movs	r3, #1
 80033fc:	e016      	b.n	800342c <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fa58 	bl	80038bc <DMA_CalcBaseAndBitshift>
 800340c:	4603      	mov	r3, r0
 800340e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	223f      	movs	r2, #63	; 0x3f
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	08011550 	.word	0x08011550
 8003438:	f010803f 	.word	0xf010803f

0800343c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_DMA_Start_IT+0x26>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003460:	d304      	bcc.n	800346c <HAL_DMA_Start_IT+0x30>
 8003462:	f240 11cb 	movw	r1, #459	; 0x1cb
 8003466:	4827      	ldr	r0, [pc, #156]	; (8003504 <HAL_DMA_Start_IT+0xc8>)
 8003468:	f7fe fc45 	bl	8001cf6 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_DMA_Start_IT+0x3e>
 8003476:	2302      	movs	r3, #2
 8003478:	e040      	b.n	80034fc <HAL_DMA_Start_IT+0xc0>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d12f      	bne.n	80034ee <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f9dc 	bl	8003860 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	223f      	movs	r2, #63	; 0x3f
 80034ae:	409a      	lsls	r2, r3
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0216 	orr.w	r2, r2, #22
 80034c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0208 	orr.w	r2, r2, #8
 80034da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e005      	b.n	80034fa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	08011550 	.word	0x08011550

08003508 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d004      	beq.n	8003526 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2280      	movs	r2, #128	; 0x80
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e00c      	b.n	8003540 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2205      	movs	r2, #5
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003558:	4b8e      	ldr	r3, [pc, #568]	; (8003794 <HAL_DMA_IRQHandler+0x248>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a8e      	ldr	r2, [pc, #568]	; (8003798 <HAL_DMA_IRQHandler+0x24c>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0a9b      	lsrs	r3, r3, #10
 8003564:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	2208      	movs	r2, #8
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01a      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0204 	bic.w	r2, r2, #4
 800359e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	2208      	movs	r2, #8
 80035a6:	409a      	lsls	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	2201      	movs	r2, #1
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d012      	beq.n	80035ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035da:	2201      	movs	r2, #1
 80035dc:	409a      	lsls	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f043 0202 	orr.w	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f2:	2204      	movs	r2, #4
 80035f4:	409a      	lsls	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d012      	beq.n	8003624 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00b      	beq.n	8003624 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	2204      	movs	r2, #4
 8003612:	409a      	lsls	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	f043 0204 	orr.w	r2, r3, #4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	2210      	movs	r2, #16
 800362a:	409a      	lsls	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d043      	beq.n	80036bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d03c      	beq.n	80036bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	2210      	movs	r2, #16
 8003648:	409a      	lsls	r2, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d018      	beq.n	800368e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d108      	bne.n	800367c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d024      	beq.n	80036bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
 800367a:	e01f      	b.n	80036bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01b      	beq.n	80036bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
 800368c:	e016      	b.n	80036bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0208 	bic.w	r2, r2, #8
 80036aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	2220      	movs	r2, #32
 80036c2:	409a      	lsls	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 808f 	beq.w	80037ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8087 	beq.w	80037ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	2220      	movs	r2, #32
 80036e4:	409a      	lsls	r2, r3
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b05      	cmp	r3, #5
 80036f4:	d136      	bne.n	8003764 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0216 	bic.w	r2, r2, #22
 8003704:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003714:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <HAL_DMA_IRQHandler+0x1da>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003722:	2b00      	cmp	r3, #0
 8003724:	d007      	beq.n	8003736 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0208 	bic.w	r2, r2, #8
 8003734:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	223f      	movs	r2, #63	; 0x3f
 800373c:	409a      	lsls	r2, r3
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	2b00      	cmp	r3, #0
 8003758:	d07e      	beq.n	8003858 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
        }
        return;
 8003762:	e079      	b.n	8003858 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01d      	beq.n	80037ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10d      	bne.n	800379c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	2b00      	cmp	r3, #0
 8003786:	d031      	beq.n	80037ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
 8003790:	e02c      	b.n	80037ec <HAL_DMA_IRQHandler+0x2a0>
 8003792:	bf00      	nop
 8003794:	2000008c 	.word	0x2000008c
 8003798:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d023      	beq.n	80037ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
 80037ac:	e01e      	b.n	80037ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10f      	bne.n	80037dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0210 	bic.w	r2, r2, #16
 80037ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d032      	beq.n	800385a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d022      	beq.n	8003846 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2205      	movs	r2, #5
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	3301      	adds	r3, #1
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	429a      	cmp	r2, r3
 8003822:	d307      	bcc.n	8003834 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f2      	bne.n	8003818 <HAL_DMA_IRQHandler+0x2cc>
 8003832:	e000      	b.n	8003836 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003834:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4798      	blx	r3
 8003856:	e000      	b.n	800385a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003858:	bf00      	nop
    }
  }
}
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800387c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d108      	bne.n	80038a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800389e:	e007      	b.n	80038b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	3b10      	subs	r3, #16
 80038cc:	4a14      	ldr	r2, [pc, #80]	; (8003920 <DMA_CalcBaseAndBitshift+0x64>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038d6:	4a13      	ldr	r2, [pc, #76]	; (8003924 <DMA_CalcBaseAndBitshift+0x68>)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d909      	bls.n	80038fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	1d1a      	adds	r2, r3, #4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	659a      	str	r2, [r3, #88]	; 0x58
 80038fc:	e007      	b.n	800390e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	aaaaaaab 	.word	0xaaaaaaab
 8003924:	080139b0 	.word	0x080139b0

08003928 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11f      	bne.n	8003982 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d856      	bhi.n	80039f6 <DMA_CheckFifoParam+0xce>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <DMA_CheckFifoParam+0x28>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003961 	.word	0x08003961
 8003954:	08003973 	.word	0x08003973
 8003958:	08003961 	.word	0x08003961
 800395c:	080039f7 	.word	0x080039f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d046      	beq.n	80039fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e043      	b.n	80039fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800397a:	d140      	bne.n	80039fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003980:	e03d      	b.n	80039fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398a:	d121      	bne.n	80039d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d837      	bhi.n	8003a02 <DMA_CheckFifoParam+0xda>
 8003992:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <DMA_CheckFifoParam+0x70>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039a9 	.word	0x080039a9
 800399c:	080039af 	.word	0x080039af
 80039a0:	080039a9 	.word	0x080039a9
 80039a4:	080039c1 	.word	0x080039c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      break;
 80039ac:	e030      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d025      	beq.n	8003a06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039be:	e022      	b.n	8003a06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039c8:	d11f      	bne.n	8003a0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ce:	e01c      	b.n	8003a0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d903      	bls.n	80039de <DMA_CheckFifoParam+0xb6>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d003      	beq.n	80039e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039dc:	e018      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
      break;
 80039e2:	e015      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00e      	beq.n	8003a0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	e00b      	b.n	8003a0e <DMA_CheckFifoParam+0xe6>
      break;
 80039f6:	bf00      	nop
 80039f8:	e00a      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 80039fa:	bf00      	nop
 80039fc:	e008      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 80039fe:	bf00      	nop
 8003a00:	e006      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 8003a02:	bf00      	nop
 8003a04:	e004      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 8003a06:	bf00      	nop
 8003a08:	e002      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <DMA_CheckFifoParam+0xe8>
      break;
 8003a0e:	bf00      	nop
    }
  } 
  
  return status; 
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop

08003a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a33      	ldr	r2, [pc, #204]	; (8003b08 <HAL_GPIO_Init+0xe8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d017      	beq.n	8003a6e <HAL_GPIO_Init+0x4e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a32      	ldr	r2, [pc, #200]	; (8003b0c <HAL_GPIO_Init+0xec>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_GPIO_Init+0x4e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a31      	ldr	r2, [pc, #196]	; (8003b10 <HAL_GPIO_Init+0xf0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00f      	beq.n	8003a6e <HAL_GPIO_Init+0x4e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a30      	ldr	r2, [pc, #192]	; (8003b14 <HAL_GPIO_Init+0xf4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00b      	beq.n	8003a6e <HAL_GPIO_Init+0x4e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2f      	ldr	r2, [pc, #188]	; (8003b18 <HAL_GPIO_Init+0xf8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x4e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a2e      	ldr	r2, [pc, #184]	; (8003b1c <HAL_GPIO_Init+0xfc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x4e>
 8003a66:	21ac      	movs	r1, #172	; 0xac
 8003a68:	482d      	ldr	r0, [pc, #180]	; (8003b20 <HAL_GPIO_Init+0x100>)
 8003a6a:	f7fe f944 	bl	8001cf6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_GPIO_Init+0x64>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	041b      	lsls	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x6c>
 8003a84:	21ad      	movs	r1, #173	; 0xad
 8003a86:	4826      	ldr	r0, [pc, #152]	; (8003b20 <HAL_GPIO_Init+0x100>)
 8003a88:	f7fe f935 	bl	8001cf6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d035      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d031      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b11      	cmp	r3, #17
 8003aa2:	d02d      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d029      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b12      	cmp	r3, #18
 8003ab2:	d025      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003abc:	d020      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003ac6:	d01b      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003ad0:	d016      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003ada:	d011      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003ae4:	d00c      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003aee:	d007      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0xe0>
 8003af8:	21ae      	movs	r1, #174	; 0xae
 8003afa:	4809      	ldr	r0, [pc, #36]	; (8003b20 <HAL_GPIO_Init+0x100>)
 8003afc:	f7fe f8fb 	bl	8001cf6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	e20c      	b.n	8003f20 <HAL_GPIO_Init+0x500>
 8003b06:	bf00      	nop
 8003b08:	40020000 	.word	0x40020000
 8003b0c:	40020400 	.word	0x40020400
 8003b10:	40020800 	.word	0x40020800
 8003b14:	40020c00 	.word	0x40020c00
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40021c00 	.word	0x40021c00
 8003b20:	08011588 	.word	0x08011588
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b24:	2201      	movs	r2, #1
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4013      	ands	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	f040 81ec 	bne.w	8003f1a <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d005      	beq.n	8003b5a <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d144      	bne.n	8003be4 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00f      	beq.n	8003b82 <HAL_GPIO_Init+0x162>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d00b      	beq.n	8003b82 <HAL_GPIO_Init+0x162>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d007      	beq.n	8003b82 <HAL_GPIO_Init+0x162>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x162>
 8003b7a:	21c0      	movs	r1, #192	; 0xc0
 8003b7c:	4884      	ldr	r0, [pc, #528]	; (8003d90 <HAL_GPIO_Init+0x370>)
 8003b7e:	f7fe f8ba 	bl	8001cf6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bb8:	2201      	movs	r2, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 0201 	and.w	r2, r3, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d027      	beq.n	8003c40 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00b      	beq.n	8003c10 <HAL_GPIO_Init+0x1f0>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d007      	beq.n	8003c10 <HAL_GPIO_Init+0x1f0>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d003      	beq.n	8003c10 <HAL_GPIO_Init+0x1f0>
 8003c08:	21d1      	movs	r1, #209	; 0xd1
 8003c0a:	4861      	ldr	r0, [pc, #388]	; (8003d90 <HAL_GPIO_Init+0x370>)
 8003c0c:	f7fe f873 	bl	8001cf6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	f040 80a3 	bne.w	8003d94 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d077      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b09      	cmp	r3, #9
 8003c5c:	d073      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d06f      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d06b      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d067      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d063      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d05f      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d05b      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d057      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d053      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d04f      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d04b      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d047      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d043      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d03f      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d03b      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d037      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d033      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d02f      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d02b      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b06      	cmp	r3, #6
 8003cf4:	d027      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b07      	cmp	r3, #7
 8003cfc:	d023      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b07      	cmp	r3, #7
 8003d04:	d01f      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b07      	cmp	r3, #7
 8003d0c:	d01b      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d017      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b0a      	cmp	r3, #10
 8003d1c:	d013      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b09      	cmp	r3, #9
 8003d24:	d00f      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b09      	cmp	r3, #9
 8003d2c:	d00b      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d007      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x326>
 8003d3e:	21de      	movs	r1, #222	; 0xde
 8003d40:	4813      	ldr	r0, [pc, #76]	; (8003d90 <HAL_GPIO_Init+0x370>)
 8003d42:	f7fd ffd8 	bl	8001cf6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	08da      	lsrs	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3208      	adds	r2, #8
 8003d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	220f      	movs	r2, #15
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	08da      	lsrs	r2, r3, #3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3208      	adds	r2, #8
 8003d88:	69b9      	ldr	r1, [r7, #24]
 8003d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003d8e:	e001      	b.n	8003d94 <HAL_GPIO_Init+0x374>
 8003d90:	08011588 	.word	0x08011588
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0203 	and.w	r2, r3, #3
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80a2 	beq.w	8003f1a <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	4b56      	ldr	r3, [pc, #344]	; (8003f34 <HAL_GPIO_Init+0x514>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	4a55      	ldr	r2, [pc, #340]	; (8003f34 <HAL_GPIO_Init+0x514>)
 8003de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003de4:	6453      	str	r3, [r2, #68]	; 0x44
 8003de6:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <HAL_GPIO_Init+0x514>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003df2:	4a51      	ldr	r2, [pc, #324]	; (8003f38 <HAL_GPIO_Init+0x518>)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	089b      	lsrs	r3, r3, #2
 8003df8:	3302      	adds	r3, #2
 8003dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	220f      	movs	r2, #15
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a48      	ldr	r2, [pc, #288]	; (8003f3c <HAL_GPIO_Init+0x51c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d019      	beq.n	8003e52 <HAL_GPIO_Init+0x432>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a47      	ldr	r2, [pc, #284]	; (8003f40 <HAL_GPIO_Init+0x520>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <HAL_GPIO_Init+0x42e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a46      	ldr	r2, [pc, #280]	; (8003f44 <HAL_GPIO_Init+0x524>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00d      	beq.n	8003e4a <HAL_GPIO_Init+0x42a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a45      	ldr	r2, [pc, #276]	; (8003f48 <HAL_GPIO_Init+0x528>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <HAL_GPIO_Init+0x426>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a44      	ldr	r2, [pc, #272]	; (8003f4c <HAL_GPIO_Init+0x52c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d101      	bne.n	8003e42 <HAL_GPIO_Init+0x422>
 8003e3e:	2304      	movs	r3, #4
 8003e40:	e008      	b.n	8003e54 <HAL_GPIO_Init+0x434>
 8003e42:	2307      	movs	r3, #7
 8003e44:	e006      	b.n	8003e54 <HAL_GPIO_Init+0x434>
 8003e46:	2303      	movs	r3, #3
 8003e48:	e004      	b.n	8003e54 <HAL_GPIO_Init+0x434>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e002      	b.n	8003e54 <HAL_GPIO_Init+0x434>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <HAL_GPIO_Init+0x434>
 8003e52:	2300      	movs	r3, #0
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	f002 0203 	and.w	r2, r2, #3
 8003e5a:	0092      	lsls	r2, r2, #2
 8003e5c:	4093      	lsls	r3, r2
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e64:	4934      	ldr	r1, [pc, #208]	; (8003f38 <HAL_GPIO_Init+0x518>)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e72:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <HAL_GPIO_Init+0x530>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e96:	4a2e      	ldr	r2, [pc, #184]	; (8003f50 <HAL_GPIO_Init+0x530>)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e9c:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <HAL_GPIO_Init+0x530>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec0:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <HAL_GPIO_Init+0x530>)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ec6:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_GPIO_Init+0x530>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eea:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_GPIO_Init+0x530>)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_GPIO_Init+0x530>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f14:	4a0e      	ldr	r2, [pc, #56]	; (8003f50 <HAL_GPIO_Init+0x530>)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2b0f      	cmp	r3, #15
 8003f24:	f67f adfe 	bls.w	8003b24 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	40020000 	.word	0x40020000
 8003f40:	40020400 	.word	0x40020400
 8003f44:	40020800 	.word	0x40020800
 8003f48:	40020c00 	.word	0x40020c00
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40013c00 	.word	0x40013c00

08003f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	807b      	strh	r3, [r7, #2]
 8003f60:	4613      	mov	r3, r2
 8003f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003f64:	887b      	ldrh	r3, [r7, #2]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <HAL_GPIO_WritePin+0x20>
 8003f6a:	887b      	ldrh	r3, [r7, #2]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <HAL_GPIO_WritePin+0x2a>
 8003f74:	f240 119d 	movw	r1, #413	; 0x19d
 8003f78:	480e      	ldr	r0, [pc, #56]	; (8003fb4 <HAL_GPIO_WritePin+0x60>)
 8003f7a:	f7fd febc 	bl	8001cf6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003f7e:	787b      	ldrb	r3, [r7, #1]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <HAL_GPIO_WritePin+0x40>
 8003f84:	787b      	ldrb	r3, [r7, #1]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d004      	beq.n	8003f94 <HAL_GPIO_WritePin+0x40>
 8003f8a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003f8e:	4809      	ldr	r0, [pc, #36]	; (8003fb4 <HAL_GPIO_WritePin+0x60>)
 8003f90:	f7fd feb1 	bl	8001cf6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003f94:	787b      	ldrb	r3, [r7, #1]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fa0:	e003      	b.n	8003faa <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	041a      	lsls	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	619a      	str	r2, [r3, #24]
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	08011588 	.word	0x08011588

08003fb8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <HAL_GPIO_TogglePin+0x1c>
 8003fca:	887b      	ldrh	r3, [r7, #2]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	041b      	lsls	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_GPIO_TogglePin+0x26>
 8003fd4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8003fd8:	480a      	ldr	r0, [pc, #40]	; (8004004 <HAL_GPIO_TogglePin+0x4c>)
 8003fda:	f7fd fe8c 	bl	8001cf6 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fe4:	887a      	ldrh	r2, [r7, #2]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	041a      	lsls	r2, r3, #16
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	43d9      	mvns	r1, r3
 8003ff0:	887b      	ldrh	r3, [r7, #2]
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	619a      	str	r2, [r3, #24]
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	08011588 	.word	0x08011588

08004008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004012:	4b08      	ldr	r3, [pc, #32]	; (8004034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800401e:	4a05      	ldr	r2, [pc, #20]	; (8004034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fb26 	bl	8002678 <HAL_GPIO_EXTI_Callback>
  }
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40013c00 	.word	0x40013c00

08004038 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	b08f      	sub	sp, #60	; 0x3c
 800403c:	af0a      	add	r7, sp, #40	; 0x28
 800403e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e118      	b.n	800427c <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004052:	d003      	beq.n	800405c <HAL_PCD_Init+0x24>
 8004054:	2187      	movs	r1, #135	; 0x87
 8004056:	488b      	ldr	r0, [pc, #556]	; (8004284 <HAL_PCD_Init+0x24c>)
 8004058:	f7fd fe4d 	bl	8001cf6 <assert_failed>

  USBx = hpcd->Instance;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f00c f98e 	bl	8010398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2203      	movs	r2, #3
 8004080:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f005 fa25 	bl	80094ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	687e      	ldr	r6, [r7, #4]
 80040a8:	466d      	mov	r5, sp
 80040aa:	f106 0410 	add.w	r4, r6, #16
 80040ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80040be:	1d33      	adds	r3, r6, #4
 80040c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c2:	6838      	ldr	r0, [r7, #0]
 80040c4:	f005 f8fc 	bl	80092c0 <USB_CoreInit>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0d0      	b.n	800427c <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f005 fa13 	bl	800950c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
 80040ea:	e04a      	b.n	8004182 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	333d      	adds	r3, #61	; 0x3d
 80040fc:	2201      	movs	r2, #1
 80040fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	333c      	adds	r3, #60	; 0x3c
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	b298      	uxth	r0, r3
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3344      	adds	r3, #68	; 0x44
 8004128:	4602      	mov	r2, r0
 800412a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3340      	adds	r3, #64	; 0x40
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3348      	adds	r3, #72	; 0x48
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	334c      	adds	r3, #76	; 0x4c
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3354      	adds	r3, #84	; 0x54
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	3301      	adds	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d3af      	bcc.n	80040ec <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e044      	b.n	800421c <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	3301      	adds	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d3b5      	bcc.n	8004192 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	687e      	ldr	r6, [r7, #4]
 800422e:	466d      	mov	r5, sp
 8004230:	f106 0410 	add.w	r4, r6, #16
 8004234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800423a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800423c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004240:	e885 0003 	stmia.w	r5, {r0, r1}
 8004244:	1d33      	adds	r3, r6, #4
 8004246:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004248:	6838      	ldr	r0, [r7, #0]
 800424a:	f005 f9ab 	bl	80095a4 <USB_DevInit>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e00d      	b.n	800427c <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f006 fafa 	bl	800a86e <USB_DevDisconnect>

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004284:	080115c4 	.word	0x080115c4

08004288 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_PCD_Start+0x1c>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e020      	b.n	80042e6 <HAL_PCD_Start+0x5e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d109      	bne.n	80042c8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d005      	beq.n	80042c8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f005 f8fb 	bl	80094c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f006 faa8 	bl	800a82c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042ee:	b590      	push	{r4, r7, lr}
 80042f0:	b08d      	sub	sp, #52	; 0x34
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f006 fb66 	bl	800a9d6 <USB_GetMode>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 848a 	bne.w	8004c26 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f006 faca 	bl	800a8b0 <USB_ReadInterrupts>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8480 	beq.w	8004c24 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f006 fab7 	bl	800a8b0 <USB_ReadInterrupts>
 8004342:	4603      	mov	r3, r0
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b02      	cmp	r3, #2
 800434a:	d107      	bne.n	800435c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f002 0202 	and.w	r2, r2, #2
 800435a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f006 faa5 	bl	800a8b0 <USB_ReadInterrupts>
 8004366:	4603      	mov	r3, r0
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b10      	cmp	r3, #16
 800436e:	d161      	bne.n	8004434 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0210 	bic.w	r2, r2, #16
 800437e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4413      	add	r3, r2
 800439c:	3304      	adds	r3, #4
 800439e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	0c5b      	lsrs	r3, r3, #17
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d124      	bne.n	80043f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d035      	beq.n	8004424 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	461a      	mov	r2, r3
 80043ca:	6a38      	ldr	r0, [r7, #32]
 80043cc:	f006 f8dc 	bl	800a588 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043dc:	441a      	add	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	6a1a      	ldr	r2, [r3, #32]
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ee:	441a      	add	r2, r3
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	621a      	str	r2, [r3, #32]
 80043f4:	e016      	b.n	8004424 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	0c5b      	lsrs	r3, r3, #17
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	2b06      	cmp	r3, #6
 8004400:	d110      	bne.n	8004424 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004408:	2208      	movs	r2, #8
 800440a:	4619      	mov	r1, r3
 800440c:	6a38      	ldr	r0, [r7, #32]
 800440e:	f006 f8bb 	bl	800a588 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	6a1a      	ldr	r2, [r3, #32]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800441e:	441a      	add	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0210 	orr.w	r2, r2, #16
 8004432:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f006 fa39 	bl	800a8b0 <USB_ReadInterrupts>
 800443e:	4603      	mov	r3, r0
 8004440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004444:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004448:	f040 80a7 	bne.w	800459a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f006 fa3e 	bl	800a8d6 <USB_ReadDevAllOutEpInterrupt>
 800445a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800445c:	e099      	b.n	8004592 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 808e 	beq.w	8004586 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	4611      	mov	r1, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f006 fa62 	bl	800a93e <USB_ReadDevOutEPInterrupt>
 800447a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00c      	beq.n	80044a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004492:	461a      	mov	r2, r3
 8004494:	2301      	movs	r3, #1
 8004496:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fec2 	bl	8005224 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b6:	461a      	mov	r2, r3
 80044b8:	2308      	movs	r3, #8
 80044ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 ff98 	bl	80053f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	2310      	movs	r3, #16
 80044de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d030      	beq.n	800454c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b80      	cmp	r3, #128	; 0x80
 80044f4:	d109      	bne.n	800450a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004508:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800450a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450c:	4613      	mov	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	4413      	add	r3, r2
 800451c:	3304      	adds	r3, #4
 800451e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	78db      	ldrb	r3, [r3, #3]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d108      	bne.n	800453a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2200      	movs	r2, #0
 800452c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	b2db      	uxtb	r3, r3
 8004532:	4619      	mov	r1, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f00c f82b 	bl	8010590 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	461a      	mov	r2, r3
 8004548:	2302      	movs	r3, #2
 800454a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004562:	461a      	mov	r2, r3
 8004564:	2320      	movs	r3, #32
 8004566:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	461a      	mov	r2, r3
 8004580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004584:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	3301      	adds	r3, #1
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	f47f af62 	bne.w	800445e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f006 f986 	bl	800a8b0 <USB_ReadInterrupts>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045ae:	f040 80db 	bne.w	8004768 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f006 f9a7 	bl	800a90a <USB_ReadDevAllInEpInterrupt>
 80045bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80045c2:	e0cd      	b.n	8004760 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80c2 	beq.w	8004754 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f006 f9cd 	bl	800a97a <USB_ReadDevInEPInterrupt>
 80045e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d057      	beq.n	800469c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	2201      	movs	r2, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	43db      	mvns	r3, r3
 8004606:	69f9      	ldr	r1, [r7, #28]
 8004608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800460c:	4013      	ands	r3, r2
 800460e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	461a      	mov	r2, r3
 800461e:	2301      	movs	r3, #1
 8004620:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d132      	bne.n	8004690 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	334c      	adds	r3, #76	; 0x4c
 800463a:	6819      	ldr	r1, [r3, #0]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4403      	add	r3, r0
 800464a:	3348      	adds	r3, #72	; 0x48
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4419      	add	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4403      	add	r3, r0
 800465e:	334c      	adds	r3, #76	; 0x4c
 8004660:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	2b00      	cmp	r3, #0
 8004666:	d113      	bne.n	8004690 <HAL_PCD_IRQHandler+0x3a2>
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3354      	adds	r3, #84	; 0x54
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d108      	bne.n	8004690 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004688:	461a      	mov	r2, r3
 800468a:	2101      	movs	r1, #1
 800468c:	f006 f9d4 	bl	800aa38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	b2db      	uxtb	r3, r3
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f00b feff 	bl	801049a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b2:	461a      	mov	r2, r3
 80046b4:	2308      	movs	r3, #8
 80046b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ce:	461a      	mov	r2, r3
 80046d0:	2310      	movs	r3, #16
 80046d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	461a      	mov	r2, r3
 80046ec:	2340      	movs	r3, #64	; 0x40
 80046ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d023      	beq.n	8004742 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046fc:	6a38      	ldr	r0, [r7, #32]
 80046fe:	f005 f8b5 	bl	800986c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	3338      	adds	r3, #56	; 0x38
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4413      	add	r3, r2
 8004712:	3304      	adds	r3, #4
 8004714:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	78db      	ldrb	r3, [r3, #3]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d108      	bne.n	8004730 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	b2db      	uxtb	r3, r3
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f00b ff42 	bl	80105b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473c:	461a      	mov	r2, r3
 800473e:	2302      	movs	r3, #2
 8004740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800474c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fcdb 	bl	800510a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	3301      	adds	r3, #1
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	f47f af2e 	bne.w	80045c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f006 f89f 	bl	800a8b0 <USB_ReadInterrupts>
 8004772:	4603      	mov	r3, r0
 8004774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800477c:	d122      	bne.n	80047c4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004798:	2b01      	cmp	r3, #1
 800479a:	d108      	bne.n	80047ae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047a4:	2100      	movs	r1, #0
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fec2 	bl	8005530 <HAL_PCDEx_LPM_Callback>
 80047ac:	e002      	b.n	80047b4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f00b fee0 	bl	8010574 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80047c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f006 f871 	bl	800a8b0 <USB_ReadInterrupts>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d8:	d112      	bne.n	8004800 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d102      	bne.n	80047f0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f00b fe9c 	bl	8010528 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047fe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f006 f853 	bl	800a8b0 <USB_ReadInterrupts>
 800480a:	4603      	mov	r3, r0
 800480c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004814:	f040 80b7 	bne.w	8004986 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2110      	movs	r1, #16
 8004832:	4618      	mov	r0, r3
 8004834:	f005 f81a 	bl	800986c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004838:	2300      	movs	r3, #0
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483c:	e046      	b.n	80048cc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	461a      	mov	r2, r3
 800484c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004850:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004870:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	461a      	mov	r2, r3
 8004880:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004884:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b6:	0151      	lsls	r1, r2, #5
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	440a      	add	r2, r1
 80048bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	3301      	adds	r3, #1
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d3b3      	bcc.n	800483e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80048e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004902:	f043 030b 	orr.w	r3, r3, #11
 8004906:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004918:	f043 030b 	orr.w	r3, r3, #11
 800491c:	6453      	str	r3, [r2, #68]	; 0x44
 800491e:	e015      	b.n	800494c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800492e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004932:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004936:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004946:	f043 030b 	orr.w	r3, r3, #11
 800494a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800495a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800495e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004970:	461a      	mov	r2, r3
 8004972:	f006 f861 	bl	800aa38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f005 ff90 	bl	800a8b0 <USB_ReadInterrupts>
 8004990:	4603      	mov	r3, r0
 8004992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499a:	d124      	bne.n	80049e6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f006 f826 	bl	800a9f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f004 ffdb 	bl	8009966 <USB_GetDevSpeed>
 80049b0:	4603      	mov	r3, r0
 80049b2:	461a      	mov	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681c      	ldr	r4, [r3, #0]
 80049bc:	f001 fb40 	bl	8006040 <HAL_RCC_GetHCLKFreq>
 80049c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	4620      	mov	r0, r4
 80049cc:	f004 fcda 	bl	8009384 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f00b fd8a 	bl	80104ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695a      	ldr	r2, [r3, #20]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80049e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f005 ff60 	bl	800a8b0 <USB_ReadInterrupts>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d10a      	bne.n	8004a10 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f00b fd67 	bl	80104ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f002 0208 	and.w	r2, r2, #8
 8004a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f005 ff4b 	bl	800a8b0 <USB_ReadInterrupts>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a20:	2b80      	cmp	r3, #128	; 0x80
 8004a22:	d122      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a30:	2301      	movs	r3, #1
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
 8004a34:	e014      	b.n	8004a60 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d105      	bne.n	8004a5a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fb27 	bl	80050a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3e5      	bcc.n	8004a36 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f005 ff1e 	bl	800a8b0 <USB_ReadInterrupts>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7e:	d13b      	bne.n	8004af8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a80:	2301      	movs	r3, #1
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
 8004a84:	e02b      	b.n	8004ade <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3340      	adds	r3, #64	; 0x40
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d115      	bne.n	8004ad8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004aac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da12      	bge.n	8004ad8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	333f      	adds	r3, #63	; 0x3f
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fae8 	bl	80050a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	3301      	adds	r3, #1
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d3ce      	bcc.n	8004a86 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f005 fed7 	bl	800a8b0 <USB_ReadInterrupts>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b0c:	d155      	bne.n	8004bba <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b0e:	2301      	movs	r3, #1
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	e045      	b.n	8004ba0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d12e      	bne.n	8004b9a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	da2b      	bge.n	8004b9a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004b4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d121      	bne.n	8004b9a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b96:	6053      	str	r3, [r2, #4]
            break;
 8004b98:	e007      	b.n	8004baa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3b4      	bcc.n	8004b14 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f005 fe76 	bl	800a8b0 <USB_ReadInterrupts>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bce:	d10a      	bne.n	8004be6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f00b fd01 	bl	80105d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f005 fe60 	bl	800a8b0 <USB_ReadInterrupts>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d115      	bne.n	8004c26 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f00b fcf1 	bl	80105f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6859      	ldr	r1, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	e000      	b.n	8004c26 <HAL_PCD_IRQHandler+0x938>
      return;
 8004c24:	bf00      	nop
    }
  }
}
 8004c26:	3734      	adds	r7, #52	; 0x34
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd90      	pop	{r4, r7, pc}

08004c2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_PCD_SetAddress+0x1a>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e013      	b.n	8004c6e <HAL_PCD_SetAddress+0x42>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f005 fdbe 	bl	800a7e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	4608      	mov	r0, r1
 8004c80:	4611      	mov	r1, r2
 8004c82:	461a      	mov	r2, r3
 8004c84:	4603      	mov	r3, r0
 8004c86:	70fb      	strb	r3, [r7, #3]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	803b      	strh	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	da0f      	bge.n	8004cbc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	f003 020f 	and.w	r2, r3, #15
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	3338      	adds	r3, #56	; 0x38
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	4413      	add	r3, r2
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	705a      	strb	r2, [r3, #1]
 8004cba:	e00f      	b.n	8004cdc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	f003 020f 	and.w	r2, r3, #15
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ce8:	883a      	ldrh	r2, [r7, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	78ba      	ldrb	r2, [r7, #2]
 8004cf2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d06:	78bb      	ldrb	r3, [r7, #2]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d102      	bne.n	8004d12 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_PCD_EP_Open+0xaa>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e00e      	b.n	8004d3e <HAL_PCD_EP_Open+0xc8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68f9      	ldr	r1, [r7, #12]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f004 fe3e 	bl	80099b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004d3c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da0f      	bge.n	8004d7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	3338      	adds	r3, #56	; 0x38
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3304      	adds	r3, #4
 8004d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	705a      	strb	r2, [r3, #1]
 8004d78:	e00f      	b.n	8004d9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	f003 020f 	and.w	r2, r3, #15
 8004d80:	4613      	mov	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	4413      	add	r3, r2
 8004d90:	3304      	adds	r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_PCD_EP_Close+0x6e>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e00e      	b.n	8004dd2 <HAL_PCD_EP_Close+0x8c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68f9      	ldr	r1, [r7, #12]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f004 fe7c 	bl	8009ac0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	460b      	mov	r3, r1
 8004de8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dea:	7afb      	ldrb	r3, [r7, #11]
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	3304      	adds	r3, #4
 8004e02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e1c:	7afb      	ldrb	r3, [r7, #11]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d102      	bne.n	8004e36 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e36:	7afb      	ldrb	r3, [r7, #11]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6818      	ldr	r0, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6979      	ldr	r1, [r7, #20]
 8004e4e:	f005 f95b 	bl	800a108 <USB_EP0StartXfer>
 8004e52:	e008      	b.n	8004e66 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	6979      	ldr	r1, [r7, #20]
 8004e62:	f004 ff09 	bl	8009c78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	f003 020f 	and.w	r2, r3, #15
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	607a      	str	r2, [r7, #4]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	460b      	mov	r3, r1
 8004eae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eb0:	7afb      	ldrb	r3, [r7, #11]
 8004eb2:	f003 020f 	and.w	r2, r3, #15
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	3338      	adds	r3, #56	; 0x38
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2201      	movs	r2, #1
 8004ede:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ee0:	7afb      	ldrb	r3, [r7, #11]
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d102      	bne.n	8004efa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004efa:	7afb      	ldrb	r3, [r7, #11]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	f005 f8f9 	bl	800a108 <USB_EP0StartXfer>
 8004f16:	e008      	b.n	8004f2a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	f004 fea7 	bl	8009c78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	f003 020f 	and.w	r2, r3, #15
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d901      	bls.n	8004f52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e050      	b.n	8004ff4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	da0f      	bge.n	8004f7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	f003 020f 	and.w	r2, r3, #15
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	3338      	adds	r3, #56	; 0x38
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3304      	adds	r3, #4
 8004f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	705a      	strb	r2, [r3, #1]
 8004f78:	e00d      	b.n	8004f96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_PCD_EP_SetStall+0x82>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e01e      	b.n	8004ff4 <HAL_PCD_EP_SetStall+0xc0>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f005 fb37 	bl	800a638 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	b2d9      	uxtb	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f005 fd27 	bl	800aa38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	f003 020f 	and.w	r2, r3, #15
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d901      	bls.n	800501a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e042      	b.n	80050a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800501a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800501e:	2b00      	cmp	r3, #0
 8005020:	da0f      	bge.n	8005042 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	f003 020f 	and.w	r2, r3, #15
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	3338      	adds	r3, #56	; 0x38
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	3304      	adds	r3, #4
 8005038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	705a      	strb	r2, [r3, #1]
 8005040:	e00f      	b.n	8005062 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	f003 020f 	and.w	r2, r3, #15
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	4413      	add	r3, r2
 8005058:	3304      	adds	r3, #4
 800505a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	b2da      	uxtb	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_PCD_EP_ClrStall+0x86>
 800507e:	2302      	movs	r3, #2
 8005080:	e00e      	b.n	80050a0 <HAL_PCD_EP_ClrStall+0xa4>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	4618      	mov	r0, r3
 8005092:	f005 fb3f 	bl	800a714 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80050b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	da0c      	bge.n	80050d6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	f003 020f 	and.w	r2, r3, #15
 80050c2:	4613      	mov	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	3338      	adds	r3, #56	; 0x38
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	4413      	add	r3, r2
 80050d0:	3304      	adds	r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e00c      	b.n	80050f0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	f003 020f 	and.w	r2, r3, #15
 80050dc:	4613      	mov	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	4413      	add	r3, r2
 80050ec:	3304      	adds	r3, #4
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68f9      	ldr	r1, [r7, #12]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f005 f95e 	bl	800a3b8 <USB_EPStopXfer>
 80050fc:	4603      	mov	r3, r0
 80050fe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005100:	7afb      	ldrb	r3, [r7, #11]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b08a      	sub	sp, #40	; 0x28
 800510e:	af02      	add	r7, sp, #8
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	3338      	adds	r3, #56	; 0x38
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	3304      	adds	r3, #4
 8005130:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1a      	ldr	r2, [r3, #32]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	429a      	cmp	r2, r3
 800513c:	d901      	bls.n	8005142 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e06c      	b.n	800521c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	429a      	cmp	r2, r3
 8005156:	d902      	bls.n	800515e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3303      	adds	r3, #3
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005166:	e02b      	b.n	80051c0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	429a      	cmp	r2, r3
 800517c:	d902      	bls.n	8005184 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	3303      	adds	r3, #3
 8005188:	089b      	lsrs	r3, r3, #2
 800518a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6919      	ldr	r1, [r3, #16]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	b2da      	uxtb	r2, r3
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800519c:	b2db      	uxtb	r3, r3
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4603      	mov	r3, r0
 80051a2:	6978      	ldr	r0, [r7, #20]
 80051a4:	f005 f9b2 	bl	800a50c <USB_WritePacket>

    ep->xfer_buff  += len;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	441a      	add	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	441a      	add	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d809      	bhi.n	80051ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1a      	ldr	r2, [r3, #32]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051de:	429a      	cmp	r2, r3
 80051e0:	d203      	bcs.n	80051ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1be      	bne.n	8005168 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d811      	bhi.n	800521a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	2201      	movs	r2, #1
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	43db      	mvns	r3, r3
 8005210:	6939      	ldr	r1, [r7, #16]
 8005212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005216:	4013      	ands	r3, r2
 8005218:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3720      	adds	r7, #32
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	333c      	adds	r3, #60	; 0x3c
 800523c:	3304      	adds	r3, #4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d17b      	bne.n	8005352 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4a61      	ldr	r2, [pc, #388]	; (80053ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	f240 80b9 	bls.w	80053e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80b3 	beq.w	80053e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	461a      	mov	r2, r3
 8005288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528c:	6093      	str	r3, [r2, #8]
 800528e:	e0a7      	b.n	80053e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a6:	461a      	mov	r2, r3
 80052a8:	2320      	movs	r3, #32
 80052aa:	6093      	str	r3, [r2, #8]
 80052ac:	e098      	b.n	80053e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f040 8093 	bne.w	80053e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	4a4b      	ldr	r2, [pc, #300]	; (80053ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d90f      	bls.n	80052e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	461a      	mov	r2, r3
 80052da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052de:	6093      	str	r3, [r2, #8]
 80052e0:	e07e      	b.n	80053e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	4413      	add	r3, r2
 80052f4:	3304      	adds	r3, #4
 80052f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	0159      	lsls	r1, r3, #5
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	440b      	add	r3, r1
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800530e:	1ad2      	subs	r2, r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d114      	bne.n	8005344 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800532c:	461a      	mov	r2, r3
 800532e:	2101      	movs	r1, #1
 8005330:	f005 fb82 	bl	800aa38 <USB_EP0_OutStart>
 8005334:	e006      	b.n	8005344 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	441a      	add	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f00b f88a 	bl	8010464 <HAL_PCD_DataOutStageCallback>
 8005350:	e046      	b.n	80053e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4a26      	ldr	r2, [pc, #152]	; (80053f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d124      	bne.n	80053a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005370:	461a      	mov	r2, r3
 8005372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005376:	6093      	str	r3, [r2, #8]
 8005378:	e032      	b.n	80053e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	461a      	mov	r2, r3
 8005392:	2320      	movs	r3, #32
 8005394:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	4619      	mov	r1, r3
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f00b f861 	bl	8010464 <HAL_PCD_DataOutStageCallback>
 80053a2:	e01d      	b.n	80053e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d114      	bne.n	80053d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	4613      	mov	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d108      	bne.n	80053d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053cc:	461a      	mov	r2, r3
 80053ce:	2100      	movs	r1, #0
 80053d0:	f005 fb32 	bl	800aa38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f00b f842 	bl	8010464 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	4f54300a 	.word	0x4f54300a
 80053f0:	4f54310a 	.word	0x4f54310a

080053f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	333c      	adds	r3, #60	; 0x3c
 800540c:	3304      	adds	r3, #4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a15      	ldr	r2, [pc, #84]	; (800547c <PCD_EP_OutSetupPacket_int+0x88>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d90e      	bls.n	8005448 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	461a      	mov	r2, r3
 8005442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005446:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f00a fff9 	bl	8010440 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <PCD_EP_OutSetupPacket_int+0x88>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d90c      	bls.n	8005470 <PCD_EP_OutSetupPacket_int+0x7c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d108      	bne.n	8005470 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005468:	461a      	mov	r2, r3
 800546a:	2101      	movs	r1, #1
 800546c:	f005 fae4 	bl	800aa38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	4f54300a 	.word	0x4f54300a

08005480 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	70fb      	strb	r3, [r7, #3]
 800548c:	4613      	mov	r3, r2
 800548e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d107      	bne.n	80054ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800549e:	883b      	ldrh	r3, [r7, #0]
 80054a0:	0419      	lsls	r1, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28
 80054ac:	e028      	b.n	8005500 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	0c1b      	lsrs	r3, r3, #16
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	4413      	add	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054bc:	2300      	movs	r3, #0
 80054be:	73fb      	strb	r3, [r7, #15]
 80054c0:	e00d      	b.n	80054de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	3340      	adds	r3, #64	; 0x40
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4413      	add	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	3301      	adds	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
 80054de:	7bfa      	ldrb	r2, [r7, #15]
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d3ec      	bcc.n	80054c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80054e8:	883b      	ldrh	r3, [r7, #0]
 80054ea:	0418      	lsls	r0, r3, #16
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6819      	ldr	r1, [r3, #0]
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	4302      	orrs	r2, r0
 80054f8:	3340      	adds	r3, #64	; 0x40
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	887a      	ldrh	r2, [r7, #2]
 8005520:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e314      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b0f      	cmp	r3, #15
 8005560:	d903      	bls.n	800556a <HAL_RCC_OscConfig+0x22>
 8005562:	21e6      	movs	r1, #230	; 0xe6
 8005564:	4897      	ldr	r0, [pc, #604]	; (80057c4 <HAL_RCC_OscConfig+0x27c>)
 8005566:	f7fc fbc6 	bl	8001cf6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8088 	beq.w	8005688 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00d      	beq.n	800559c <HAL_RCC_OscConfig+0x54>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d008      	beq.n	800559c <HAL_RCC_OscConfig+0x54>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005592:	d003      	beq.n	800559c <HAL_RCC_OscConfig+0x54>
 8005594:	21eb      	movs	r1, #235	; 0xeb
 8005596:	488b      	ldr	r0, [pc, #556]	; (80057c4 <HAL_RCC_OscConfig+0x27c>)
 8005598:	f7fc fbad 	bl	8001cf6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800559c:	4b8a      	ldr	r3, [pc, #552]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 030c 	and.w	r3, r3, #12
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d00c      	beq.n	80055c2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055a8:	4b87      	ldr	r3, [pc, #540]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d112      	bne.n	80055da <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055b4:	4b84      	ldr	r3, [pc, #528]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c0:	d10b      	bne.n	80055da <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c2:	4b81      	ldr	r3, [pc, #516]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d05b      	beq.n	8005686 <HAL_RCC_OscConfig+0x13e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d157      	bne.n	8005686 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e2d4      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e2:	d106      	bne.n	80055f2 <HAL_RCC_OscConfig+0xaa>
 80055e4:	4b78      	ldr	r3, [pc, #480]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a77      	ldr	r2, [pc, #476]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e01d      	b.n	800562e <HAL_RCC_OscConfig+0xe6>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055fa:	d10c      	bne.n	8005616 <HAL_RCC_OscConfig+0xce>
 80055fc:	4b72      	ldr	r3, [pc, #456]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a71      	ldr	r2, [pc, #452]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	4b6f      	ldr	r3, [pc, #444]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a6e      	ldr	r2, [pc, #440]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800560e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	e00b      	b.n	800562e <HAL_RCC_OscConfig+0xe6>
 8005616:	4b6c      	ldr	r3, [pc, #432]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a6b      	ldr	r2, [pc, #428]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800561c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	4b69      	ldr	r3, [pc, #420]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a68      	ldr	r2, [pc, #416]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d013      	beq.n	800565e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005636:	f7fd fba5 	bl	8002d84 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800563e:	f7fd fba1 	bl	8002d84 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b64      	cmp	r3, #100	; 0x64
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e299      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005650:	4b5d      	ldr	r3, [pc, #372]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0xf6>
 800565c:	e014      	b.n	8005688 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565e:	f7fd fb91 	bl	8002d84 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005666:	f7fd fb8d 	bl	8002d84 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b64      	cmp	r3, #100	; 0x64
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e285      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005678:	4b53      	ldr	r3, [pc, #332]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f0      	bne.n	8005666 <HAL_RCC_OscConfig+0x11e>
 8005684:	e000      	b.n	8005688 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005686:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d079      	beq.n	8005788 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_RCC_OscConfig+0x166>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d004      	beq.n	80056ae <HAL_RCC_OscConfig+0x166>
 80056a4:	f240 111d 	movw	r1, #285	; 0x11d
 80056a8:	4846      	ldr	r0, [pc, #280]	; (80057c4 <HAL_RCC_OscConfig+0x27c>)
 80056aa:	f7fc fb24 	bl	8001cf6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b1f      	cmp	r3, #31
 80056b4:	d904      	bls.n	80056c0 <HAL_RCC_OscConfig+0x178>
 80056b6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80056ba:	4842      	ldr	r0, [pc, #264]	; (80057c4 <HAL_RCC_OscConfig+0x27c>)
 80056bc:	f7fc fb1b 	bl	8001cf6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056c0:	4b41      	ldr	r3, [pc, #260]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 030c 	and.w	r3, r3, #12
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056cc:	4b3e      	ldr	r3, [pc, #248]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d11c      	bne.n	8005712 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056d8:	4b3b      	ldr	r3, [pc, #236]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d116      	bne.n	8005712 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e4:	4b38      	ldr	r3, [pc, #224]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_OscConfig+0x1b4>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d001      	beq.n	80056fc <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e243      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fc:	4b32      	ldr	r3, [pc, #200]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	492f      	ldr	r1, [pc, #188]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800570c:	4313      	orrs	r3, r2
 800570e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005710:	e03a      	b.n	8005788 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d020      	beq.n	800575c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800571a:	4b2c      	ldr	r3, [pc, #176]	; (80057cc <HAL_RCC_OscConfig+0x284>)
 800571c:	2201      	movs	r2, #1
 800571e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7fd fb30 	bl	8002d84 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005728:	f7fd fb2c 	bl	8002d84 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e224      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800573a:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005746:	4b20      	ldr	r3, [pc, #128]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	491c      	ldr	r1, [pc, #112]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 8005756:	4313      	orrs	r3, r2
 8005758:	600b      	str	r3, [r1, #0]
 800575a:	e015      	b.n	8005788 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800575c:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <HAL_RCC_OscConfig+0x284>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fd fb0f 	bl	8002d84 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800576a:	f7fd fb0b 	bl	8002d84 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e203      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577c:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <HAL_RCC_OscConfig+0x280>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f0      	bne.n	800576a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d045      	beq.n	8005820 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_RCC_OscConfig+0x266>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d004      	beq.n	80057ae <HAL_RCC_OscConfig+0x266>
 80057a4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80057a8:	4806      	ldr	r0, [pc, #24]	; (80057c4 <HAL_RCC_OscConfig+0x27c>)
 80057aa:	f7fc faa4 	bl	8001cf6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01e      	beq.n	80057f4 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <HAL_RCC_OscConfig+0x288>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fd fae2 	bl	8002d84 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c2:	e010      	b.n	80057e6 <HAL_RCC_OscConfig+0x29e>
 80057c4:	080115fc 	.word	0x080115fc
 80057c8:	40023800 	.word	0x40023800
 80057cc:	42470000 	.word	0x42470000
 80057d0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057d4:	f7fd fad6 	bl	8002d84 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e1ce      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e6:	4b5e      	ldr	r3, [pc, #376]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 80057e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0x28c>
 80057f2:	e015      	b.n	8005820 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057f4:	4b5b      	ldr	r3, [pc, #364]	; (8005964 <HAL_RCC_OscConfig+0x41c>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057fa:	f7fd fac3 	bl	8002d84 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005802:	f7fd fabf 	bl	8002d84 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e1b7      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005814:	4b52      	ldr	r3, [pc, #328]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 8005816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f0      	bne.n	8005802 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 80b0 	beq.w	800598e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00c      	beq.n	8005854 <HAL_RCC_OscConfig+0x30c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d008      	beq.n	8005854 <HAL_RCC_OscConfig+0x30c>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b05      	cmp	r3, #5
 8005848:	d004      	beq.n	8005854 <HAL_RCC_OscConfig+0x30c>
 800584a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800584e:	4846      	ldr	r0, [pc, #280]	; (8005968 <HAL_RCC_OscConfig+0x420>)
 8005850:	f7fc fa51 	bl	8001cf6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005854:	4b42      	ldr	r3, [pc, #264]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10f      	bne.n	8005880 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005860:	2300      	movs	r3, #0
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	4a3d      	ldr	r2, [pc, #244]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586e:	6413      	str	r3, [r2, #64]	; 0x40
 8005870:	4b3b      	ldr	r3, [pc, #236]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800587c:	2301      	movs	r3, #1
 800587e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005880:	4b3a      	ldr	r3, [pc, #232]	; (800596c <HAL_RCC_OscConfig+0x424>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d118      	bne.n	80058be <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800588c:	4b37      	ldr	r3, [pc, #220]	; (800596c <HAL_RCC_OscConfig+0x424>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a36      	ldr	r2, [pc, #216]	; (800596c <HAL_RCC_OscConfig+0x424>)
 8005892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005896:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005898:	f7fd fa74 	bl	8002d84 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a0:	f7fd fa70 	bl	8002d84 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e168      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b2:	4b2e      	ldr	r3, [pc, #184]	; (800596c <HAL_RCC_OscConfig+0x424>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f0      	beq.n	80058a0 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d106      	bne.n	80058d4 <HAL_RCC_OscConfig+0x38c>
 80058c6:	4b26      	ldr	r3, [pc, #152]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ca:	4a25      	ldr	r2, [pc, #148]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	6713      	str	r3, [r2, #112]	; 0x70
 80058d2:	e01c      	b.n	800590e <HAL_RCC_OscConfig+0x3c6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b05      	cmp	r3, #5
 80058da:	d10c      	bne.n	80058f6 <HAL_RCC_OscConfig+0x3ae>
 80058dc:	4b20      	ldr	r3, [pc, #128]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 80058e2:	f043 0304 	orr.w	r3, r3, #4
 80058e6:	6713      	str	r3, [r2, #112]	; 0x70
 80058e8:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 80058ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ec:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	6713      	str	r3, [r2, #112]	; 0x70
 80058f4:	e00b      	b.n	800590e <HAL_RCC_OscConfig+0x3c6>
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	4a19      	ldr	r2, [pc, #100]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	6713      	str	r3, [r2, #112]	; 0x70
 8005902:	4b17      	ldr	r3, [pc, #92]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	4a16      	ldr	r2, [pc, #88]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 8005908:	f023 0304 	bic.w	r3, r3, #4
 800590c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d015      	beq.n	8005942 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005916:	f7fd fa35 	bl	8002d84 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591c:	e00a      	b.n	8005934 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800591e:	f7fd fa31 	bl	8002d84 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f241 3288 	movw	r2, #5000	; 0x1388
 800592c:	4293      	cmp	r3, r2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e127      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <HAL_RCC_OscConfig+0x418>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0ee      	beq.n	800591e <HAL_RCC_OscConfig+0x3d6>
 8005940:	e01c      	b.n	800597c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005942:	f7fd fa1f 	bl	8002d84 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005948:	e012      	b.n	8005970 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800594a:	f7fd fa1b 	bl	8002d84 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f241 3288 	movw	r2, #5000	; 0x1388
 8005958:	4293      	cmp	r3, r2
 800595a:	d909      	bls.n	8005970 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e111      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
 8005960:	40023800 	.word	0x40023800
 8005964:	42470e80 	.word	0x42470e80
 8005968:	080115fc 	.word	0x080115fc
 800596c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005970:	4b86      	ldr	r3, [pc, #536]	; (8005b8c <HAL_RCC_OscConfig+0x644>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d105      	bne.n	800598e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005982:	4b82      	ldr	r3, [pc, #520]	; (8005b8c <HAL_RCC_OscConfig+0x644>)
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	4a81      	ldr	r2, [pc, #516]	; (8005b8c <HAL_RCC_OscConfig+0x644>)
 8005988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800598c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_RCC_OscConfig+0x468>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d008      	beq.n	80059b0 <HAL_RCC_OscConfig+0x468>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d004      	beq.n	80059b0 <HAL_RCC_OscConfig+0x468>
 80059a6:	f240 11cd 	movw	r1, #461	; 0x1cd
 80059aa:	4879      	ldr	r0, [pc, #484]	; (8005b90 <HAL_RCC_OscConfig+0x648>)
 80059ac:	f7fc f9a3 	bl	8001cf6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80e4 	beq.w	8005b82 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ba:	4b74      	ldr	r3, [pc, #464]	; (8005b8c <HAL_RCC_OscConfig+0x644>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	f000 80a5 	beq.w	8005b12 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	f040 8089 	bne.w	8005ae4 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <HAL_RCC_OscConfig+0x4a6>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e2:	d004      	beq.n	80059ee <HAL_RCC_OscConfig+0x4a6>
 80059e4:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80059e8:	4869      	ldr	r0, [pc, #420]	; (8005b90 <HAL_RCC_OscConfig+0x648>)
 80059ea:	f7fc f984 	bl	8001cf6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	2b3f      	cmp	r3, #63	; 0x3f
 80059f4:	d904      	bls.n	8005a00 <HAL_RCC_OscConfig+0x4b8>
 80059f6:	f240 11d7 	movw	r1, #471	; 0x1d7
 80059fa:	4865      	ldr	r0, [pc, #404]	; (8005b90 <HAL_RCC_OscConfig+0x648>)
 80059fc:	f7fc f97b 	bl	8001cf6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b31      	cmp	r3, #49	; 0x31
 8005a06:	d904      	bls.n	8005a12 <HAL_RCC_OscConfig+0x4ca>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005a10:	d904      	bls.n	8005a1c <HAL_RCC_OscConfig+0x4d4>
 8005a12:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005a16:	485e      	ldr	r0, [pc, #376]	; (8005b90 <HAL_RCC_OscConfig+0x648>)
 8005a18:	f7fc f96d 	bl	8001cf6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d010      	beq.n	8005a46 <HAL_RCC_OscConfig+0x4fe>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d00c      	beq.n	8005a46 <HAL_RCC_OscConfig+0x4fe>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	2b06      	cmp	r3, #6
 8005a32:	d008      	beq.n	8005a46 <HAL_RCC_OscConfig+0x4fe>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d004      	beq.n	8005a46 <HAL_RCC_OscConfig+0x4fe>
 8005a3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a40:	4853      	ldr	r0, [pc, #332]	; (8005b90 <HAL_RCC_OscConfig+0x648>)
 8005a42:	f7fc f958 	bl	8001cf6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d903      	bls.n	8005a56 <HAL_RCC_OscConfig+0x50e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	2b0f      	cmp	r3, #15
 8005a54:	d904      	bls.n	8005a60 <HAL_RCC_OscConfig+0x518>
 8005a56:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005a5a:	484d      	ldr	r0, [pc, #308]	; (8005b90 <HAL_RCC_OscConfig+0x648>)
 8005a5c:	f7fc f94b 	bl	8001cf6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a60:	4b4c      	ldr	r3, [pc, #304]	; (8005b94 <HAL_RCC_OscConfig+0x64c>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a66:	f7fd f98d 	bl	8002d84 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fd f989 	bl	8002d84 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e081      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a80:	4b42      	ldr	r3, [pc, #264]	; (8005b8c <HAL_RCC_OscConfig+0x644>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f0      	bne.n	8005a6e <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	019b      	lsls	r3, r3, #6
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	085b      	lsrs	r3, r3, #1
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	061b      	lsls	r3, r3, #24
 8005ab0:	4936      	ldr	r1, [pc, #216]	; (8005b8c <HAL_RCC_OscConfig+0x644>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab6:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <HAL_RCC_OscConfig+0x64c>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abc:	f7fd f962 	bl	8002d84 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fd f95e 	bl	8002d84 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e056      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad6:	4b2d      	ldr	r3, [pc, #180]	; (8005b8c <HAL_RCC_OscConfig+0x644>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x57c>
 8005ae2:	e04e      	b.n	8005b82 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <HAL_RCC_OscConfig+0x64c>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aea:	f7fd f94b 	bl	8002d84 <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af2:	f7fd f947 	bl	8002d84 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e03f      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b04:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <HAL_RCC_OscConfig+0x644>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f0      	bne.n	8005af2 <HAL_RCC_OscConfig+0x5aa>
 8005b10:	e037      	b.n	8005b82 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e032      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b1e:	4b1b      	ldr	r3, [pc, #108]	; (8005b8c <HAL_RCC_OscConfig+0x644>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d028      	beq.n	8005b7e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d121      	bne.n	8005b7e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d11a      	bne.n	8005b7e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b4e:	4013      	ands	r3, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d111      	bne.n	8005b7e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	3b01      	subs	r3, #1
 8005b68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d107      	bne.n	8005b7e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d001      	beq.n	8005b82 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	080115fc 	.word	0x080115fc
 8005b94:	42470060 	.word	0x42470060

08005b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e174      	b.n	8005e96 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x24>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b0f      	cmp	r3, #15
 8005bba:	d904      	bls.n	8005bc6 <HAL_RCC_ClockConfig+0x2e>
 8005bbc:	f240 215a 	movw	r1, #602	; 0x25a
 8005bc0:	487b      	ldr	r0, [pc, #492]	; (8005db0 <HAL_RCC_ClockConfig+0x218>)
 8005bc2:	f7fc f898 	bl	8001cf6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d019      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x68>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d016      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x68>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d013      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x68>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d010      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x68>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d00d      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x68>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b05      	cmp	r3, #5
 8005be8:	d00a      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x68>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b06      	cmp	r3, #6
 8005bee:	d007      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x68>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b07      	cmp	r3, #7
 8005bf4:	d004      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x68>
 8005bf6:	f240 215b 	movw	r1, #603	; 0x25b
 8005bfa:	486d      	ldr	r0, [pc, #436]	; (8005db0 <HAL_RCC_ClockConfig+0x218>)
 8005bfc:	f7fc f87b 	bl	8001cf6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c00:	4b6c      	ldr	r3, [pc, #432]	; (8005db4 <HAL_RCC_ClockConfig+0x21c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d90c      	bls.n	8005c28 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b69      	ldr	r3, [pc, #420]	; (8005db4 <HAL_RCC_ClockConfig+0x21c>)
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c16:	4b67      	ldr	r3, [pc, #412]	; (8005db4 <HAL_RCC_ClockConfig+0x21c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e136      	b.n	8005e96 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d049      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c40:	4b5d      	ldr	r3, [pc, #372]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	4a5c      	ldr	r2, [pc, #368]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c58:	4b57      	ldr	r3, [pc, #348]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	4a56      	ldr	r2, [pc, #344]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d024      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x11e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b80      	cmp	r3, #128	; 0x80
 8005c72:	d020      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x11e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2b90      	cmp	r3, #144	; 0x90
 8005c7a:	d01c      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x11e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2ba0      	cmp	r3, #160	; 0xa0
 8005c82:	d018      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x11e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2bb0      	cmp	r3, #176	; 0xb0
 8005c8a:	d014      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x11e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2bc0      	cmp	r3, #192	; 0xc0
 8005c92:	d010      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x11e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2bd0      	cmp	r3, #208	; 0xd0
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x11e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2be0      	cmp	r3, #224	; 0xe0
 8005ca2:	d008      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x11e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2bf0      	cmp	r3, #240	; 0xf0
 8005caa:	d004      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x11e>
 8005cac:	f240 217e 	movw	r1, #638	; 0x27e
 8005cb0:	483f      	ldr	r0, [pc, #252]	; (8005db0 <HAL_RCC_ClockConfig+0x218>)
 8005cb2:	f7fc f820 	bl	8001cf6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb6:	4b40      	ldr	r3, [pc, #256]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	493d      	ldr	r1, [pc, #244]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d059      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d010      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x166>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d00c      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x166>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d008      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x166>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d004      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x166>
 8005cf4:	f240 2185 	movw	r1, #645	; 0x285
 8005cf8:	482d      	ldr	r0, [pc, #180]	; (8005db0 <HAL_RCC_ClockConfig+0x218>)
 8005cfa:	f7fb fffc 	bl	8001cf6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d107      	bne.n	8005d16 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d06:	4b2c      	ldr	r3, [pc, #176]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d119      	bne.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e0bf      	b.n	8005e96 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d107      	bne.n	8005d36 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d26:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e0af      	b.n	8005e96 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d36:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e0a7      	b.n	8005e96 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	4b1c      	ldr	r3, [pc, #112]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4919      	ldr	r1, [pc, #100]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d58:	f7fd f814 	bl	8002d84 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d60:	f7fd f810 	bl	8002d84 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e08f      	b.n	8005e96 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d76:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <HAL_RCC_ClockConfig+0x220>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 020c 	and.w	r2, r3, #12
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1eb      	bne.n	8005d60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d88:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <HAL_RCC_ClockConfig+0x21c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d212      	bcs.n	8005dbc <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <HAL_RCC_ClockConfig+0x21c>)
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCC_ClockConfig+0x21c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d007      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e072      	b.n	8005e96 <HAL_RCC_ClockConfig+0x2fe>
 8005db0:	080115fc 	.word	0x080115fc
 8005db4:	40023c00 	.word	0x40023c00
 8005db8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d025      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d018      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x26a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd8:	d013      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x26a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005de2:	d00e      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x26a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005dec:	d009      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x26a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005df6:	d004      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x26a>
 8005df8:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005dfc:	4828      	ldr	r0, [pc, #160]	; (8005ea0 <HAL_RCC_ClockConfig+0x308>)
 8005dfe:	f7fb ff7a 	bl	8001cf6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e02:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <HAL_RCC_ClockConfig+0x30c>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	4925      	ldr	r1, [pc, #148]	; (8005ea4 <HAL_RCC_ClockConfig+0x30c>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d026      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d018      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x2c2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e30:	d013      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x2c2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e3a:	d00e      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x2c2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005e44:	d009      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x2c2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005e4e:	d004      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x2c2>
 8005e50:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005e54:	4812      	ldr	r0, [pc, #72]	; (8005ea0 <HAL_RCC_ClockConfig+0x308>)
 8005e56:	f7fb ff4e 	bl	8001cf6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e5a:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <HAL_RCC_ClockConfig+0x30c>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	490e      	ldr	r1, [pc, #56]	; (8005ea4 <HAL_RCC_ClockConfig+0x30c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e6e:	f000 f821 	bl	8005eb4 <HAL_RCC_GetSysClockFreq>
 8005e72:	4602      	mov	r2, r0
 8005e74:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCC_ClockConfig+0x30c>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	091b      	lsrs	r3, r3, #4
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	490a      	ldr	r1, [pc, #40]	; (8005ea8 <HAL_RCC_ClockConfig+0x310>)
 8005e80:	5ccb      	ldrb	r3, [r1, r3]
 8005e82:	fa22 f303 	lsr.w	r3, r2, r3
 8005e86:	4a09      	ldr	r2, [pc, #36]	; (8005eac <HAL_RCC_ClockConfig+0x314>)
 8005e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <HAL_RCC_ClockConfig+0x318>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fc fb46 	bl	8002520 <HAL_InitTick>

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	080115fc 	.word	0x080115fc
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	08013998 	.word	0x08013998
 8005eac:	2000008c 	.word	0x2000008c
 8005eb0:	20000090 	.word	0x20000090

08005eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb8:	b090      	sub	sp, #64	; 0x40
 8005eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ecc:	4b59      	ldr	r3, [pc, #356]	; (8006034 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 030c 	and.w	r3, r3, #12
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d00d      	beq.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	f200 80a1 	bhi.w	8006020 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d003      	beq.n	8005eee <HAL_RCC_GetSysClockFreq+0x3a>
 8005ee6:	e09b      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ee8:	4b53      	ldr	r3, [pc, #332]	; (8006038 <HAL_RCC_GetSysClockFreq+0x184>)
 8005eea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005eec:	e09b      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eee:	4b53      	ldr	r3, [pc, #332]	; (800603c <HAL_RCC_GetSysClockFreq+0x188>)
 8005ef0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ef2:	e098      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ef4:	4b4f      	ldr	r3, [pc, #316]	; (8006034 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005efe:	4b4d      	ldr	r3, [pc, #308]	; (8006034 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d028      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f0a:	4b4a      	ldr	r3, [pc, #296]	; (8006034 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	099b      	lsrs	r3, r3, #6
 8005f10:	2200      	movs	r2, #0
 8005f12:	623b      	str	r3, [r7, #32]
 8005f14:	627a      	str	r2, [r7, #36]	; 0x24
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4b47      	ldr	r3, [pc, #284]	; (800603c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f20:	fb03 f201 	mul.w	r2, r3, r1
 8005f24:	2300      	movs	r3, #0
 8005f26:	fb00 f303 	mul.w	r3, r0, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	4a43      	ldr	r2, [pc, #268]	; (800603c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f2e:	fba0 1202 	umull	r1, r2, r0, r2
 8005f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f34:	460a      	mov	r2, r1
 8005f36:	62ba      	str	r2, [r7, #40]	; 0x28
 8005f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f3a:	4413      	add	r3, r2
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f40:	2200      	movs	r2, #0
 8005f42:	61bb      	str	r3, [r7, #24]
 8005f44:	61fa      	str	r2, [r7, #28]
 8005f46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005f4e:	f7fa fca5 	bl	800089c <__aeabi_uldivmod>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4613      	mov	r3, r2
 8005f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5a:	e053      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5c:	4b35      	ldr	r3, [pc, #212]	; (8006034 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	099b      	lsrs	r3, r3, #6
 8005f62:	2200      	movs	r2, #0
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	617a      	str	r2, [r7, #20]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005f6e:	f04f 0b00 	mov.w	fp, #0
 8005f72:	4652      	mov	r2, sl
 8005f74:	465b      	mov	r3, fp
 8005f76:	f04f 0000 	mov.w	r0, #0
 8005f7a:	f04f 0100 	mov.w	r1, #0
 8005f7e:	0159      	lsls	r1, r3, #5
 8005f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f84:	0150      	lsls	r0, r2, #5
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	ebb2 080a 	subs.w	r8, r2, sl
 8005f8e:	eb63 090b 	sbc.w	r9, r3, fp
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005fa2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005fa6:	ebb2 0408 	subs.w	r4, r2, r8
 8005faa:	eb63 0509 	sbc.w	r5, r3, r9
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	00eb      	lsls	r3, r5, #3
 8005fb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fbc:	00e2      	lsls	r2, r4, #3
 8005fbe:	4614      	mov	r4, r2
 8005fc0:	461d      	mov	r5, r3
 8005fc2:	eb14 030a 	adds.w	r3, r4, sl
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	eb45 030b 	adc.w	r3, r5, fp
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fda:	4629      	mov	r1, r5
 8005fdc:	028b      	lsls	r3, r1, #10
 8005fde:	4621      	mov	r1, r4
 8005fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	028a      	lsls	r2, r1, #10
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4619      	mov	r1, r3
 8005fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fee:	2200      	movs	r2, #0
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	60fa      	str	r2, [r7, #12]
 8005ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ff8:	f7fa fc50 	bl	800089c <__aeabi_uldivmod>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4613      	mov	r3, r2
 8006002:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <HAL_RCC_GetSysClockFreq+0x180>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	3301      	adds	r3, #1
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800601e:	e002      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_GetSysClockFreq+0x184>)
 8006022:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006028:	4618      	mov	r0, r3
 800602a:	3740      	adds	r7, #64	; 0x40
 800602c:	46bd      	mov	sp, r7
 800602e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006032:	bf00      	nop
 8006034:	40023800 	.word	0x40023800
 8006038:	00f42400 	.word	0x00f42400
 800603c:	017d7840 	.word	0x017d7840

08006040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006044:	4b03      	ldr	r3, [pc, #12]	; (8006054 <HAL_RCC_GetHCLKFreq+0x14>)
 8006046:	681b      	ldr	r3, [r3, #0]
}
 8006048:	4618      	mov	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	2000008c 	.word	0x2000008c

08006058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800605c:	f7ff fff0 	bl	8006040 <HAL_RCC_GetHCLKFreq>
 8006060:	4602      	mov	r2, r0
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	0a9b      	lsrs	r3, r3, #10
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	4903      	ldr	r1, [pc, #12]	; (800607c <HAL_RCC_GetPCLK1Freq+0x24>)
 800606e:	5ccb      	ldrb	r3, [r1, r3]
 8006070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006074:	4618      	mov	r0, r3
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40023800 	.word	0x40023800
 800607c:	080139a8 	.word	0x080139a8

08006080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006084:	f7ff ffdc 	bl	8006040 <HAL_RCC_GetHCLKFreq>
 8006088:	4602      	mov	r2, r0
 800608a:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	0b5b      	lsrs	r3, r3, #13
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	4903      	ldr	r1, [pc, #12]	; (80060a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006096:	5ccb      	ldrb	r3, [r1, r3]
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40023800 	.word	0x40023800
 80060a4:	080139a8 	.word	0x080139a8

080060a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	220f      	movs	r2, #15
 80060b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060b8:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_RCC_GetClockConfig+0x5c>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0203 	and.w	r2, r3, #3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80060c4:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <HAL_RCC_GetClockConfig+0x5c>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <HAL_RCC_GetClockConfig+0x5c>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <HAL_RCC_GetClockConfig+0x5c>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	08db      	lsrs	r3, r3, #3
 80060e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060ea:	4b07      	ldr	r3, [pc, #28]	; (8006108 <HAL_RCC_GetClockConfig+0x60>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0207 	and.w	r2, r3, #7
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	601a      	str	r2, [r3, #0]
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40023800 	.word	0x40023800
 8006108:	40023c00 	.word	0x40023c00

0800610c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b0f      	cmp	r3, #15
 800612a:	d904      	bls.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800612c:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8006130:	4834      	ldr	r0, [pc, #208]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006132:	f7fb fde0 	bl	8001cf6 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d105      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800614a:	2b00      	cmp	r3, #0
 800614c:	d066      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d903      	bls.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2b07      	cmp	r3, #7
 800615c:	d904      	bls.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800615e:	f640 11de 	movw	r1, #2526	; 0x9de
 8006162:	4828      	ldr	r0, [pc, #160]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006164:	f7fb fdc7 	bl	8001cf6 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b31      	cmp	r3, #49	; 0x31
 800616e:	d904      	bls.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006178:	d904      	bls.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800617a:	f640 11df 	movw	r1, #2527	; 0x9df
 800617e:	4821      	ldr	r0, [pc, #132]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006180:	f7fb fdb9 	bl	8001cf6 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d903      	bls.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b3f      	cmp	r3, #63	; 0x3f
 8006192:	d904      	bls.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006194:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8006198:	481a      	ldr	r0, [pc, #104]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800619a:	f7fb fdac 	bl	8001cf6 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800619e:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061a4:	f7fc fdee 	bl	8002d84 <HAL_GetTick>
 80061a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061ac:	f7fc fdea 	bl	8002d84 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e1b3      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	019b      	lsls	r3, r3, #6
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	071b      	lsls	r3, r3, #28
 80061dc:	490b      	ldr	r1, [pc, #44]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061e4:	4b08      	ldr	r3, [pc, #32]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061ea:	f7fc fdcb 	bl	8002d84 <HAL_GetTick>
 80061ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061f0:	e00e      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061f2:	f7fc fdc7 	bl	8002d84 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d907      	bls.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e190      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006204:	08011634 	.word	0x08011634
 8006208:	42470068 	.word	0x42470068
 800620c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006210:	4b88      	ldr	r3, [pc, #544]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0ea      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8173 	beq.w	8006510 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006232:	f000 80a6 	beq.w	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623e:	f000 80a0 	beq.w	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	4a7c      	ldr	r2, [pc, #496]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	f000 809a 	beq.w	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	4a7a      	ldr	r2, [pc, #488]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006254:	4293      	cmp	r3, r2
 8006256:	f000 8094 	beq.w	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	4a78      	ldr	r2, [pc, #480]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006260:	4293      	cmp	r3, r2
 8006262:	f000 808e 	beq.w	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	4a76      	ldr	r2, [pc, #472]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800626c:	4293      	cmp	r3, r2
 800626e:	f000 8088 	beq.w	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	4a74      	ldr	r2, [pc, #464]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	f000 8082 	beq.w	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	4a72      	ldr	r2, [pc, #456]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d07c      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	4a70      	ldr	r2, [pc, #448]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d077      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	4a6f      	ldr	r2, [pc, #444]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d072      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	4a6d      	ldr	r2, [pc, #436]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d06d      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	4a6c      	ldr	r2, [pc, #432]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d068      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	4a6a      	ldr	r2, [pc, #424]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d063      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	4a69      	ldr	r2, [pc, #420]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d05e      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	4a67      	ldr	r2, [pc, #412]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d059      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	4a66      	ldr	r2, [pc, #408]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d054      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	4a64      	ldr	r2, [pc, #400]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d04f      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	4a63      	ldr	r2, [pc, #396]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d04a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	4a61      	ldr	r2, [pc, #388]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d045      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	4a60      	ldr	r2, [pc, #384]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d040      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	4a5e      	ldr	r2, [pc, #376]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d03b      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	4a5d      	ldr	r2, [pc, #372]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d036      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	4a5b      	ldr	r2, [pc, #364]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d031      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	4a5a      	ldr	r2, [pc, #360]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d02c      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	4a58      	ldr	r2, [pc, #352]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d027      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	4a57      	ldr	r2, [pc, #348]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d022      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	4a55      	ldr	r2, [pc, #340]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01d      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	4a54      	ldr	r2, [pc, #336]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d018      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	4a52      	ldr	r2, [pc, #328]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	4a51      	ldr	r2, [pc, #324]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	4a4f      	ldr	r2, [pc, #316]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d009      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	4a4e      	ldr	r2, [pc, #312]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006378:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 800637c:	484c      	ldr	r0, [pc, #304]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800637e:	f7fb fcba 	bl	8001cf6 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	4b2b      	ldr	r3, [pc, #172]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	4a2a      	ldr	r2, [pc, #168]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800638c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006390:	6413      	str	r3, [r2, #64]	; 0x40
 8006392:	4b28      	ldr	r3, [pc, #160]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800639e:	4b45      	ldr	r3, [pc, #276]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a44      	ldr	r2, [pc, #272]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80063a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063aa:	f7fc fceb 	bl	8002d84 <HAL_GetTick>
 80063ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063b0:	e008      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063b2:	f7fc fce7 	bl	8002d84 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e0b0      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063c4:	4b3b      	ldr	r3, [pc, #236]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f0      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063d0:	4b18      	ldr	r3, [pc, #96]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d073      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d06c      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063ee:	4b11      	ldr	r3, [pc, #68]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063f8:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80063fa:	2201      	movs	r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063fe:	4b2e      	ldr	r3, [pc, #184]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006404:	4a0b      	ldr	r2, [pc, #44]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800640a:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800640c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b01      	cmp	r3, #1
 8006414:	d158      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006416:	f7fc fcb5 	bl	8002d84 <HAL_GetTick>
 800641a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800641c:	e04e      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800641e:	f7fc fcb1 	bl	8002d84 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	f241 3288 	movw	r2, #5000	; 0x1388
 800642c:	4293      	cmp	r3, r2
 800642e:	d945      	bls.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e078      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006434:	40023800 	.word	0x40023800
 8006438:	00020300 	.word	0x00020300
 800643c:	00030300 	.word	0x00030300
 8006440:	00040300 	.word	0x00040300
 8006444:	00050300 	.word	0x00050300
 8006448:	00060300 	.word	0x00060300
 800644c:	00070300 	.word	0x00070300
 8006450:	00080300 	.word	0x00080300
 8006454:	00090300 	.word	0x00090300
 8006458:	000a0300 	.word	0x000a0300
 800645c:	000b0300 	.word	0x000b0300
 8006460:	000c0300 	.word	0x000c0300
 8006464:	000d0300 	.word	0x000d0300
 8006468:	000e0300 	.word	0x000e0300
 800646c:	000f0300 	.word	0x000f0300
 8006470:	00100300 	.word	0x00100300
 8006474:	00110300 	.word	0x00110300
 8006478:	00120300 	.word	0x00120300
 800647c:	00130300 	.word	0x00130300
 8006480:	00140300 	.word	0x00140300
 8006484:	00150300 	.word	0x00150300
 8006488:	00160300 	.word	0x00160300
 800648c:	00170300 	.word	0x00170300
 8006490:	00180300 	.word	0x00180300
 8006494:	00190300 	.word	0x00190300
 8006498:	001a0300 	.word	0x001a0300
 800649c:	001b0300 	.word	0x001b0300
 80064a0:	001c0300 	.word	0x001c0300
 80064a4:	001d0300 	.word	0x001d0300
 80064a8:	001e0300 	.word	0x001e0300
 80064ac:	001f0300 	.word	0x001f0300
 80064b0:	08011634 	.word	0x08011634
 80064b4:	40007000 	.word	0x40007000
 80064b8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064bc:	4b1c      	ldr	r3, [pc, #112]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0aa      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d4:	d10d      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80064d6:	4b16      	ldr	r3, [pc, #88]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ea:	4911      	ldr	r1, [pc, #68]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	608b      	str	r3, [r1, #8]
 80064f0:	e005      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80064f2:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	4a0e      	ldr	r2, [pc, #56]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80064fc:	6093      	str	r3, [r2, #8]
 80064fe:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800650a:	4909      	ldr	r1, [pc, #36]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800650c:	4313      	orrs	r3, r2
 800650e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	7d1a      	ldrb	r2, [r3, #20]
 8006520:	4b04      	ldr	r3, [pc, #16]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006522:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40023800 	.word	0x40023800
 8006534:	424711e0 	.word	0x424711e0

08006538 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e0c4      	b.n	80066d8 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a63      	ldr	r2, [pc, #396]	; (80066e0 <HAL_RTC_Init+0x1a8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <HAL_RTC_Init+0x2a>
 8006558:	f44f 7182 	mov.w	r1, #260	; 0x104
 800655c:	4861      	ldr	r0, [pc, #388]	; (80066e4 <HAL_RTC_Init+0x1ac>)
 800655e:	f7fb fbca 	bl	8001cf6 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b40      	cmp	r3, #64	; 0x40
 8006568:	d008      	beq.n	800657c <HAL_RTC_Init+0x44>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <HAL_RTC_Init+0x44>
 8006572:	f240 1105 	movw	r1, #261	; 0x105
 8006576:	485b      	ldr	r0, [pc, #364]	; (80066e4 <HAL_RTC_Init+0x1ac>)
 8006578:	f7fb fbbd 	bl	8001cf6 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	2b7f      	cmp	r3, #127	; 0x7f
 8006582:	d904      	bls.n	800658e <HAL_RTC_Init+0x56>
 8006584:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006588:	4856      	ldr	r0, [pc, #344]	; (80066e4 <HAL_RTC_Init+0x1ac>)
 800658a:	f7fb fbb4 	bl	8001cf6 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006596:	d304      	bcc.n	80065a2 <HAL_RTC_Init+0x6a>
 8006598:	f240 1107 	movw	r1, #263	; 0x107
 800659c:	4851      	ldr	r0, [pc, #324]	; (80066e4 <HAL_RTC_Init+0x1ac>)
 800659e:	f7fb fbaa 	bl	8001cf6 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d013      	beq.n	80065d2 <HAL_RTC_Init+0x9a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065b2:	d00e      	beq.n	80065d2 <HAL_RTC_Init+0x9a>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065bc:	d009      	beq.n	80065d2 <HAL_RTC_Init+0x9a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065c6:	d004      	beq.n	80065d2 <HAL_RTC_Init+0x9a>
 80065c8:	f44f 7184 	mov.w	r1, #264	; 0x108
 80065cc:	4845      	ldr	r0, [pc, #276]	; (80066e4 <HAL_RTC_Init+0x1ac>)
 80065ce:	f7fb fb92 	bl	8001cf6 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <HAL_RTC_Init+0xb6>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e2:	d004      	beq.n	80065ee <HAL_RTC_Init+0xb6>
 80065e4:	f240 1109 	movw	r1, #265	; 0x109
 80065e8:	483e      	ldr	r0, [pc, #248]	; (80066e4 <HAL_RTC_Init+0x1ac>)
 80065ea:	f7fb fb84 	bl	8001cf6 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <HAL_RTC_Init+0xd2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065fe:	d004      	beq.n	800660a <HAL_RTC_Init+0xd2>
 8006600:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006604:	4837      	ldr	r0, [pc, #220]	; (80066e4 <HAL_RTC_Init+0x1ac>)
 8006606:	f7fb fb76 	bl	8001cf6 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7f5b      	ldrb	r3, [r3, #29]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb fbd0 	bl	8001dc0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	22ca      	movs	r2, #202	; 0xca
 800662c:	625a      	str	r2, [r3, #36]	; 0x24
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2253      	movs	r2, #83	; 0x53
 8006634:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fad2 	bl	8006be0 <RTC_EnterInitMode>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d12c      	bne.n	80066a0 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006658:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6899      	ldr	r1, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68d2      	ldr	r2, [r2, #12]
 8006680:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6919      	ldr	r1, [r3, #16]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	041a      	lsls	r2, r3, #16
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fad9 	bl	8006c4e <RTC_ExitInitMode>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d113      	bne.n	80066ce <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	22ff      	movs	r2, #255	; 0xff
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40002800 	.word	0x40002800
 80066e4:	08011670 	.word	0x08011670

080066e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <HAL_RTC_SetTime+0x26>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d004      	beq.n	800670e <HAL_RTC_SetTime+0x26>
 8006704:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8006708:	489a      	ldr	r0, [pc, #616]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 800670a:	f7fb faf4 	bl	8001cf6 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006716:	d00d      	beq.n	8006734 <HAL_RTC_SetTime+0x4c>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006720:	d008      	beq.n	8006734 <HAL_RTC_SetTime+0x4c>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d004      	beq.n	8006734 <HAL_RTC_SetTime+0x4c>
 800672a:	f240 21b5 	movw	r1, #693	; 0x2b5
 800672e:	4891      	ldr	r0, [pc, #580]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 8006730:	f7fb fae1 	bl	8001cf6 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <HAL_RTC_SetTime+0x68>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006744:	d004      	beq.n	8006750 <HAL_RTC_SetTime+0x68>
 8006746:	f240 21b6 	movw	r1, #694	; 0x2b6
 800674a:	488a      	ldr	r0, [pc, #552]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 800674c:	f7fb fad3 	bl	8001cf6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	7f1b      	ldrb	r3, [r3, #28]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_RTC_SetTime+0x74>
 8006758:	2302      	movs	r3, #2
 800675a:	e107      	b.n	800696c <HAL_RTC_SetTime+0x284>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2202      	movs	r2, #2
 8006766:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d15c      	bne.n	8006828 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d01a      	beq.n	80067b2 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_RTC_SetTime+0xa4>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b0c      	cmp	r3, #12
 800678a:	d904      	bls.n	8006796 <HAL_RTC_SetTime+0xae>
 800678c:	f240 21c1 	movw	r1, #705	; 0x2c1
 8006790:	4878      	ldr	r0, [pc, #480]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 8006792:	f7fb fab0 	bl	8001cf6 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	78db      	ldrb	r3, [r3, #3]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d015      	beq.n	80067ca <HAL_RTC_SetTime+0xe2>
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	78db      	ldrb	r3, [r3, #3]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d011      	beq.n	80067ca <HAL_RTC_SetTime+0xe2>
 80067a6:	f240 21c2 	movw	r1, #706	; 0x2c2
 80067aa:	4872      	ldr	r0, [pc, #456]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 80067ac:	f7fb faa3 	bl	8001cf6 <assert_failed>
 80067b0:	e00b      	b.n	80067ca <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b17      	cmp	r3, #23
 80067be:	d904      	bls.n	80067ca <HAL_RTC_SetTime+0xe2>
 80067c0:	f240 21c7 	movw	r1, #711	; 0x2c7
 80067c4:	486b      	ldr	r0, [pc, #428]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 80067c6:	f7fb fa96 	bl	8001cf6 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	2b3b      	cmp	r3, #59	; 0x3b
 80067d0:	d904      	bls.n	80067dc <HAL_RTC_SetTime+0xf4>
 80067d2:	f240 21c9 	movw	r1, #713	; 0x2c9
 80067d6:	4867      	ldr	r0, [pc, #412]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 80067d8:	f7fb fa8d 	bl	8001cf6 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	789b      	ldrb	r3, [r3, #2]
 80067e0:	2b3b      	cmp	r3, #59	; 0x3b
 80067e2:	d904      	bls.n	80067ee <HAL_RTC_SetTime+0x106>
 80067e4:	f240 21ca 	movw	r1, #714	; 0x2ca
 80067e8:	4862      	ldr	r0, [pc, #392]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 80067ea:	f7fb fa84 	bl	8001cf6 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fa50 	bl	8006c98 <RTC_ByteToBcd2>
 80067f8:	4603      	mov	r3, r0
 80067fa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fa49 	bl	8006c98 <RTC_ByteToBcd2>
 8006806:	4603      	mov	r3, r0
 8006808:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800680a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	789b      	ldrb	r3, [r3, #2]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fa41 	bl	8006c98 <RTC_ByteToBcd2>
 8006816:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006818:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	78db      	ldrb	r3, [r3, #3]
 8006820:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	e062      	b.n	80068ee <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d022      	beq.n	800687c <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fa49 	bl	8006cd2 <RTC_Bcd2ToByte>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_RTC_SetTime+0x16e>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fa41 	bl	8006cd2 <RTC_Bcd2ToByte>
 8006850:	4603      	mov	r3, r0
 8006852:	2b0c      	cmp	r3, #12
 8006854:	d904      	bls.n	8006860 <HAL_RTC_SetTime+0x178>
 8006856:	f240 21d5 	movw	r1, #725	; 0x2d5
 800685a:	4846      	ldr	r0, [pc, #280]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 800685c:	f7fb fa4b 	bl	8001cf6 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	78db      	ldrb	r3, [r3, #3]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d019      	beq.n	800689c <HAL_RTC_SetTime+0x1b4>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	78db      	ldrb	r3, [r3, #3]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d015      	beq.n	800689c <HAL_RTC_SetTime+0x1b4>
 8006870:	f240 21d6 	movw	r1, #726	; 0x2d6
 8006874:	483f      	ldr	r0, [pc, #252]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 8006876:	f7fb fa3e 	bl	8001cf6 <assert_failed>
 800687a:	e00f      	b.n	800689c <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2200      	movs	r2, #0
 8006880:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fa23 	bl	8006cd2 <RTC_Bcd2ToByte>
 800688c:	4603      	mov	r3, r0
 800688e:	2b17      	cmp	r3, #23
 8006890:	d904      	bls.n	800689c <HAL_RTC_SetTime+0x1b4>
 8006892:	f240 21db 	movw	r1, #731	; 0x2db
 8006896:	4837      	ldr	r0, [pc, #220]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 8006898:	f7fb fa2d 	bl	8001cf6 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	785b      	ldrb	r3, [r3, #1]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fa16 	bl	8006cd2 <RTC_Bcd2ToByte>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b3b      	cmp	r3, #59	; 0x3b
 80068aa:	d904      	bls.n	80068b6 <HAL_RTC_SetTime+0x1ce>
 80068ac:	f240 21dd 	movw	r1, #733	; 0x2dd
 80068b0:	4830      	ldr	r0, [pc, #192]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 80068b2:	f7fb fa20 	bl	8001cf6 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	789b      	ldrb	r3, [r3, #2]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fa09 	bl	8006cd2 <RTC_Bcd2ToByte>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b3b      	cmp	r3, #59	; 0x3b
 80068c4:	d904      	bls.n	80068d0 <HAL_RTC_SetTime+0x1e8>
 80068c6:	f240 21de 	movw	r1, #734	; 0x2de
 80068ca:	482a      	ldr	r0, [pc, #168]	; (8006974 <HAL_RTC_SetTime+0x28c>)
 80068cc:	f7fb fa13 	bl	8001cf6 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068dc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068e2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	78db      	ldrb	r3, [r3, #3]
 80068e8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	22ca      	movs	r2, #202	; 0xca
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2253      	movs	r2, #83	; 0x53
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f96e 	bl	8006be0 <RTC_EnterInitMode>
 8006904:	4603      	mov	r3, r0
 8006906:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006908:	7cfb      	ldrb	r3, [r7, #19]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d120      	bne.n	8006950 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006918:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800691c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800692c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6899      	ldr	r1, [r3, #8]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	431a      	orrs	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f981 	bl	8006c4e <RTC_ExitInitMode>
 800694c:	4603      	mov	r3, r0
 800694e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006950:	7cfb      	ldrb	r3, [r7, #19]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d102      	bne.n	800695c <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	771a      	strb	r2, [r3, #28]

  return status;
 800696a:	7cfb      	ldrb	r3, [r7, #19]
}
 800696c:	4618      	mov	r0, r3
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	bd90      	pop	{r4, r7, pc}
 8006974:	08011670 	.word	0x08011670

08006978 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <HAL_RTC_SetDate+0x26>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d004      	beq.n	800699e <HAL_RTC_SetDate+0x26>
 8006994:	f240 3153 	movw	r1, #851	; 0x353
 8006998:	487c      	ldr	r0, [pc, #496]	; (8006b8c <HAL_RTC_SetDate+0x214>)
 800699a:	f7fb f9ac 	bl	8001cf6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	7f1b      	ldrb	r3, [r3, #28]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_RTC_SetDate+0x32>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e0ec      	b.n	8006b84 <HAL_RTC_SetDate+0x20c>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2202      	movs	r2, #2
 80069b4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10e      	bne.n	80069da <HAL_RTC_SetDate+0x62>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	785b      	ldrb	r3, [r3, #1]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	f023 0310 	bic.w	r3, r3, #16
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	330a      	adds	r3, #10
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d01c      	beq.n	8006a1c <HAL_RTC_SetDate+0xa4>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d018      	beq.n	8006a1c <HAL_RTC_SetDate+0xa4>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d014      	beq.n	8006a1c <HAL_RTC_SetDate+0xa4>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d010      	beq.n	8006a1c <HAL_RTC_SetDate+0xa4>
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b05      	cmp	r3, #5
 8006a00:	d00c      	beq.n	8006a1c <HAL_RTC_SetDate+0xa4>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b06      	cmp	r3, #6
 8006a08:	d008      	beq.n	8006a1c <HAL_RTC_SetDate+0xa4>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b07      	cmp	r3, #7
 8006a10:	d004      	beq.n	8006a1c <HAL_RTC_SetDate+0xa4>
 8006a12:	f240 315f 	movw	r1, #863	; 0x35f
 8006a16:	485d      	ldr	r0, [pc, #372]	; (8006b8c <HAL_RTC_SetDate+0x214>)
 8006a18:	f7fb f96d 	bl	8001cf6 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d13f      	bne.n	8006aa2 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	78db      	ldrb	r3, [r3, #3]
 8006a26:	2b63      	cmp	r3, #99	; 0x63
 8006a28:	d904      	bls.n	8006a34 <HAL_RTC_SetDate+0xbc>
 8006a2a:	f240 3163 	movw	r1, #867	; 0x363
 8006a2e:	4857      	ldr	r0, [pc, #348]	; (8006b8c <HAL_RTC_SetDate+0x214>)
 8006a30:	f7fb f961 	bl	8001cf6 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <HAL_RTC_SetDate+0xcc>
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b0c      	cmp	r3, #12
 8006a42:	d904      	bls.n	8006a4e <HAL_RTC_SetDate+0xd6>
 8006a44:	f44f 7159 	mov.w	r1, #868	; 0x364
 8006a48:	4850      	ldr	r0, [pc, #320]	; (8006b8c <HAL_RTC_SetDate+0x214>)
 8006a4a:	f7fb f954 	bl	8001cf6 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	789b      	ldrb	r3, [r3, #2]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_RTC_SetDate+0xe6>
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	789b      	ldrb	r3, [r3, #2]
 8006a5a:	2b1f      	cmp	r3, #31
 8006a5c:	d904      	bls.n	8006a68 <HAL_RTC_SetDate+0xf0>
 8006a5e:	f240 3165 	movw	r1, #869	; 0x365
 8006a62:	484a      	ldr	r0, [pc, #296]	; (8006b8c <HAL_RTC_SetDate+0x214>)
 8006a64:	f7fb f947 	bl	8001cf6 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	78db      	ldrb	r3, [r3, #3]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 f913 	bl	8006c98 <RTC_ByteToBcd2>
 8006a72:	4603      	mov	r3, r0
 8006a74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 f90c 	bl	8006c98 <RTC_ByteToBcd2>
 8006a80:	4603      	mov	r3, r0
 8006a82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	789b      	ldrb	r3, [r3, #2]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f904 	bl	8006c98 <RTC_ByteToBcd2>
 8006a90:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a92:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e045      	b.n	8006b2e <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	78db      	ldrb	r3, [r3, #3]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 f913 	bl	8006cd2 <RTC_Bcd2ToByte>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b63      	cmp	r3, #99	; 0x63
 8006ab0:	d904      	bls.n	8006abc <HAL_RTC_SetDate+0x144>
 8006ab2:	f240 316e 	movw	r1, #878	; 0x36e
 8006ab6:	4835      	ldr	r0, [pc, #212]	; (8006b8c <HAL_RTC_SetDate+0x214>)
 8006ab8:	f7fb f91d 	bl	8001cf6 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 f906 	bl	8006cd2 <RTC_Bcd2ToByte>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d007      	beq.n	8006adc <HAL_RTC_SetDate+0x164>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 f8fe 	bl	8006cd2 <RTC_Bcd2ToByte>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b0c      	cmp	r3, #12
 8006ada:	d904      	bls.n	8006ae6 <HAL_RTC_SetDate+0x16e>
 8006adc:	f240 316f 	movw	r1, #879	; 0x36f
 8006ae0:	482a      	ldr	r0, [pc, #168]	; (8006b8c <HAL_RTC_SetDate+0x214>)
 8006ae2:	f7fb f908 	bl	8001cf6 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	789b      	ldrb	r3, [r3, #2]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 f8f1 	bl	8006cd2 <RTC_Bcd2ToByte>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d007      	beq.n	8006b06 <HAL_RTC_SetDate+0x18e>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	789b      	ldrb	r3, [r3, #2]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f8e9 	bl	8006cd2 <RTC_Bcd2ToByte>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b1f      	cmp	r3, #31
 8006b04:	d904      	bls.n	8006b10 <HAL_RTC_SetDate+0x198>
 8006b06:	f44f 715c 	mov.w	r1, #880	; 0x370
 8006b0a:	4820      	ldr	r0, [pc, #128]	; (8006b8c <HAL_RTC_SetDate+0x214>)
 8006b0c:	f7fb f8f3 	bl	8001cf6 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	78db      	ldrb	r3, [r3, #3]
 8006b14:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	785b      	ldrb	r3, [r3, #1]
 8006b1a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006b1c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006b22:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	22ca      	movs	r2, #202	; 0xca
 8006b34:	625a      	str	r2, [r3, #36]	; 0x24
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2253      	movs	r2, #83	; 0x53
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f84e 	bl	8006be0 <RTC_EnterInitMode>
 8006b44:	4603      	mov	r3, r0
 8006b46:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006b48:	7cfb      	ldrb	r3, [r7, #19]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10c      	bne.n	8006b68 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f875 	bl	8006c4e <RTC_ExitInitMode>
 8006b64:	4603      	mov	r3, r0
 8006b66:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b68:	7cfb      	ldrb	r3, [r7, #19]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	22ff      	movs	r2, #255	; 0xff
 8006b7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	771a      	strb	r2, [r3, #28]

  return status;
 8006b82:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd90      	pop	{r4, r7, pc}
 8006b8c:	08011670 	.word	0x08011670

08006b90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006baa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bac:	f7fc f8ea 	bl	8002d84 <HAL_GetTick>
 8006bb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006bb2:	e009      	b.n	8006bc8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006bb4:	f7fc f8e6 	bl	8002d84 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e007      	b.n	8006bd8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0ee      	beq.n	8006bb4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d122      	bne.n	8006c44 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c0e:	f7fc f8b9 	bl	8002d84 <HAL_GetTick>
 8006c12:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c14:	e00c      	b.n	8006c30 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c16:	f7fc f8b5 	bl	8002d84 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c24:	d904      	bls.n	8006c30 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2204      	movs	r2, #4
 8006c2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d102      	bne.n	8006c44 <RTC_EnterInitMode+0x64>
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d1e8      	bne.n	8006c16 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c68:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0320 	and.w	r3, r3, #32
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff ff89 	bl	8006b90 <HAL_RTC_WaitForSynchro>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2204      	movs	r2, #4
 8006c88:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006ca6:	e005      	b.n	8006cb4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	3301      	adds	r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	3b0a      	subs	r3, #10
 8006cb2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	d8f6      	bhi.n	8006ca8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	b2db      	uxtb	r3, r3
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	4603      	mov	r3, r0
 8006cda:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	091b      	lsrs	r3, r3, #4
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	0092      	lsls	r2, r2, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	b2db      	uxtb	r3, r3
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e18c      	b.n	8007038 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a75      	ldr	r2, [pc, #468]	; (8006ef8 <HAL_SPI_Init+0x1ec>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_SPI_Init+0x4e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a73      	ldr	r2, [pc, #460]	; (8006efc <HAL_SPI_Init+0x1f0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_SPI_Init+0x4e>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a72      	ldr	r2, [pc, #456]	; (8006f00 <HAL_SPI_Init+0x1f4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_SPI_Init+0x4e>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a70      	ldr	r2, [pc, #448]	; (8006f04 <HAL_SPI_Init+0x1f8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_SPI_Init+0x4e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a6f      	ldr	r2, [pc, #444]	; (8006f08 <HAL_SPI_Init+0x1fc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_SPI_Init+0x4e>
 8006d50:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d54:	486d      	ldr	r0, [pc, #436]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006d56:	f7fa ffce 	bl	8001cf6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <HAL_SPI_Init+0x6a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d6a:	d004      	beq.n	8006d76 <HAL_SPI_Init+0x6a>
 8006d6c:	f240 1141 	movw	r1, #321	; 0x141
 8006d70:	4866      	ldr	r0, [pc, #408]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006d72:	f7fa ffc0 	bl	8001cf6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00e      	beq.n	8006d9c <HAL_SPI_Init+0x90>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d86:	d009      	beq.n	8006d9c <HAL_SPI_Init+0x90>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d90:	d004      	beq.n	8006d9c <HAL_SPI_Init+0x90>
 8006d92:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006d96:	485d      	ldr	r0, [pc, #372]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006d98:	f7fa ffad 	bl	8001cf6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da4:	d008      	beq.n	8006db8 <HAL_SPI_Init+0xac>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <HAL_SPI_Init+0xac>
 8006dae:	f240 1143 	movw	r1, #323	; 0x143
 8006db2:	4856      	ldr	r0, [pc, #344]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006db4:	f7fa ff9f 	bl	8001cf6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc0:	d00d      	beq.n	8006dde <HAL_SPI_Init+0xd2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <HAL_SPI_Init+0xd2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dd2:	d004      	beq.n	8006dde <HAL_SPI_Init+0xd2>
 8006dd4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006dd8:	484c      	ldr	r0, [pc, #304]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006dda:	f7fa ff8c 	bl	8001cf6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d020      	beq.n	8006e28 <HAL_SPI_Init+0x11c>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d01c      	beq.n	8006e28 <HAL_SPI_Init+0x11c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	2b10      	cmp	r3, #16
 8006df4:	d018      	beq.n	8006e28 <HAL_SPI_Init+0x11c>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	2b18      	cmp	r3, #24
 8006dfc:	d014      	beq.n	8006e28 <HAL_SPI_Init+0x11c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d010      	beq.n	8006e28 <HAL_SPI_Init+0x11c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	2b28      	cmp	r3, #40	; 0x28
 8006e0c:	d00c      	beq.n	8006e28 <HAL_SPI_Init+0x11c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	2b30      	cmp	r3, #48	; 0x30
 8006e14:	d008      	beq.n	8006e28 <HAL_SPI_Init+0x11c>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	2b38      	cmp	r3, #56	; 0x38
 8006e1c:	d004      	beq.n	8006e28 <HAL_SPI_Init+0x11c>
 8006e1e:	f240 1145 	movw	r1, #325	; 0x145
 8006e22:	483a      	ldr	r0, [pc, #232]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006e24:	f7fa ff67 	bl	8001cf6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_SPI_Init+0x136>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	2b80      	cmp	r3, #128	; 0x80
 8006e36:	d004      	beq.n	8006e42 <HAL_SPI_Init+0x136>
 8006e38:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006e3c:	4833      	ldr	r0, [pc, #204]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006e3e:	f7fa ff5a 	bl	8001cf6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <HAL_SPI_Init+0x150>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	2b10      	cmp	r3, #16
 8006e50:	d004      	beq.n	8006e5c <HAL_SPI_Init+0x150>
 8006e52:	f240 1147 	movw	r1, #327	; 0x147
 8006e56:	482d      	ldr	r0, [pc, #180]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006e58:	f7fa ff4d 	bl	8001cf6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d155      	bne.n	8006f10 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d008      	beq.n	8006e7e <HAL_SPI_Init+0x172>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d004      	beq.n	8006e7e <HAL_SPI_Init+0x172>
 8006e74:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006e78:	4824      	ldr	r0, [pc, #144]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006e7a:	f7fa ff3c 	bl	8001cf6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d008      	beq.n	8006e98 <HAL_SPI_Init+0x18c>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d004      	beq.n	8006e98 <HAL_SPI_Init+0x18c>
 8006e8e:	f240 114b 	movw	r1, #331	; 0x14b
 8006e92:	481e      	ldr	r0, [pc, #120]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006e94:	f7fa ff2f 	bl	8001cf6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ea0:	d125      	bne.n	8006eee <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d05d      	beq.n	8006f66 <HAL_SPI_Init+0x25a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	2b08      	cmp	r3, #8
 8006eb0:	d059      	beq.n	8006f66 <HAL_SPI_Init+0x25a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d055      	beq.n	8006f66 <HAL_SPI_Init+0x25a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	2b18      	cmp	r3, #24
 8006ec0:	d051      	beq.n	8006f66 <HAL_SPI_Init+0x25a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d04d      	beq.n	8006f66 <HAL_SPI_Init+0x25a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	2b28      	cmp	r3, #40	; 0x28
 8006ed0:	d049      	beq.n	8006f66 <HAL_SPI_Init+0x25a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	2b30      	cmp	r3, #48	; 0x30
 8006ed8:	d045      	beq.n	8006f66 <HAL_SPI_Init+0x25a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	2b38      	cmp	r3, #56	; 0x38
 8006ee0:	d041      	beq.n	8006f66 <HAL_SPI_Init+0x25a>
 8006ee2:	f240 114f 	movw	r1, #335	; 0x14f
 8006ee6:	4809      	ldr	r0, [pc, #36]	; (8006f0c <HAL_SPI_Init+0x200>)
 8006ee8:	f7fa ff05 	bl	8001cf6 <assert_failed>
 8006eec:	e03b      	b.n	8006f66 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	61da      	str	r2, [r3, #28]
 8006ef4:	e037      	b.n	8006f66 <HAL_SPI_Init+0x25a>
 8006ef6:	bf00      	nop
 8006ef8:	40013000 	.word	0x40013000
 8006efc:	40003800 	.word	0x40003800
 8006f00:	40003c00 	.word	0x40003c00
 8006f04:	40013400 	.word	0x40013400
 8006f08:	40015000 	.word	0x40015000
 8006f0c:	080116a8 	.word	0x080116a8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d020      	beq.n	8006f5a <HAL_SPI_Init+0x24e>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d01c      	beq.n	8006f5a <HAL_SPI_Init+0x24e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d018      	beq.n	8006f5a <HAL_SPI_Init+0x24e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	2b18      	cmp	r3, #24
 8006f2e:	d014      	beq.n	8006f5a <HAL_SPI_Init+0x24e>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d010      	beq.n	8006f5a <HAL_SPI_Init+0x24e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	2b28      	cmp	r3, #40	; 0x28
 8006f3e:	d00c      	beq.n	8006f5a <HAL_SPI_Init+0x24e>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	2b30      	cmp	r3, #48	; 0x30
 8006f46:	d008      	beq.n	8006f5a <HAL_SPI_Init+0x24e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	2b38      	cmp	r3, #56	; 0x38
 8006f4e:	d004      	beq.n	8006f5a <HAL_SPI_Init+0x24e>
 8006f50:	f240 1159 	movw	r1, #345	; 0x159
 8006f54:	483a      	ldr	r0, [pc, #232]	; (8007040 <HAL_SPI_Init+0x334>)
 8006f56:	f7fa fece 	bl	8001cf6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d106      	bne.n	8006f86 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7fa ff7f 	bl	8001e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fea:	ea42 0103 	orr.w	r1, r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	0c1b      	lsrs	r3, r3, #16
 8007004:	f003 0104 	and.w	r1, r3, #4
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	f003 0210 	and.w	r2, r3, #16
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69da      	ldr	r2, [r3, #28]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007026:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	080116a8 	.word	0x080116a8

08007044 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	4613      	mov	r3, r2
 8007052:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <HAL_SPI_Transmit+0x30>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007068:	d004      	beq.n	8007074 <HAL_SPI_Transmit+0x30>
 800706a:	f44f 7142 	mov.w	r1, #776	; 0x308
 800706e:	4880      	ldr	r0, [pc, #512]	; (8007270 <HAL_SPI_Transmit+0x22c>)
 8007070:	f7fa fe41 	bl	8001cf6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_SPI_Transmit+0x3e>
 800707e:	2302      	movs	r3, #2
 8007080:	e128      	b.n	80072d4 <HAL_SPI_Transmit+0x290>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800708a:	f7fb fe7b 	bl	8002d84 <HAL_GetTick>
 800708e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007090:	88fb      	ldrh	r3, [r7, #6]
 8007092:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b01      	cmp	r3, #1
 800709e:	d002      	beq.n	80070a6 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80070a0:	2302      	movs	r3, #2
 80070a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070a4:	e10d      	b.n	80072c2 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <HAL_SPI_Transmit+0x6e>
 80070ac:	88fb      	ldrh	r3, [r7, #6]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070b6:	e104      	b.n	80072c2 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2203      	movs	r2, #3
 80070bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	88fa      	ldrh	r2, [r7, #6]
 80070d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	88fa      	ldrh	r2, [r7, #6]
 80070d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070fe:	d10f      	bne.n	8007120 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800710e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800711e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d007      	beq.n	800713e <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800713c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007146:	d14b      	bne.n	80071e0 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <HAL_SPI_Transmit+0x112>
 8007150:	8afb      	ldrh	r3, [r7, #22]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d13e      	bne.n	80071d4 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	881a      	ldrh	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	1c9a      	adds	r2, r3, #2
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800717a:	e02b      	b.n	80071d4 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b02      	cmp	r3, #2
 8007188:	d112      	bne.n	80071b0 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	881a      	ldrh	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	1c9a      	adds	r2, r3, #2
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80071ae:	e011      	b.n	80071d4 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071b0:	f7fb fde8 	bl	8002d84 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d803      	bhi.n	80071c8 <HAL_SPI_Transmit+0x184>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c6:	d102      	bne.n	80071ce <HAL_SPI_Transmit+0x18a>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d102      	bne.n	80071d4 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071d2:	e076      	b.n	80072c2 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1ce      	bne.n	800717c <HAL_SPI_Transmit+0x138>
 80071de:	e04e      	b.n	800727e <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <HAL_SPI_Transmit+0x1aa>
 80071e8:	8afb      	ldrh	r3, [r7, #22]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d142      	bne.n	8007274 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	330c      	adds	r3, #12
 80071f8:	7812      	ldrb	r2, [r2, #0]
 80071fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800720a:	b29b      	uxth	r3, r3
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007214:	e02e      	b.n	8007274 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b02      	cmp	r3, #2
 8007222:	d113      	bne.n	800724c <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	7812      	ldrb	r2, [r2, #0]
 8007230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	86da      	strh	r2, [r3, #54]	; 0x36
 800724a:	e013      	b.n	8007274 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800724c:	f7fb fd9a 	bl	8002d84 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d803      	bhi.n	8007264 <HAL_SPI_Transmit+0x220>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d102      	bne.n	800726a <HAL_SPI_Transmit+0x226>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d104      	bne.n	8007274 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800726e:	e028      	b.n	80072c2 <HAL_SPI_Transmit+0x27e>
 8007270:	080116a8 	.word	0x080116a8
    while (hspi->TxXferCount > 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007278:	b29b      	uxth	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1cb      	bne.n	8007216 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 f8b2 	bl	80073ec <SPI_EndRxTxTransaction>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2220      	movs	r2, #32
 8007292:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800729c:	2300      	movs	r3, #0
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	613b      	str	r3, [r7, #16]
 80072b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	77fb      	strb	r3, [r7, #31]
 80072be:	e000      	b.n	80072c2 <HAL_SPI_Transmit+0x27e>
  }

error:
 80072c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3720      	adds	r7, #32
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b088      	sub	sp, #32
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	603b      	str	r3, [r7, #0]
 80072e8:	4613      	mov	r3, r2
 80072ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072ec:	f7fb fd4a 	bl	8002d84 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	4413      	add	r3, r2
 80072fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072fc:	f7fb fd42 	bl	8002d84 <HAL_GetTick>
 8007300:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007302:	4b39      	ldr	r3, [pc, #228]	; (80073e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	015b      	lsls	r3, r3, #5
 8007308:	0d1b      	lsrs	r3, r3, #20
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	fb02 f303 	mul.w	r3, r2, r3
 8007310:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007312:	e054      	b.n	80073be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d050      	beq.n	80073be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800731c:	f7fb fd32 	bl	8002d84 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	429a      	cmp	r2, r3
 800732a:	d902      	bls.n	8007332 <SPI_WaitFlagStateUntilTimeout+0x56>
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d13d      	bne.n	80073ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007340:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800734a:	d111      	bne.n	8007370 <SPI_WaitFlagStateUntilTimeout+0x94>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007354:	d004      	beq.n	8007360 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800735e:	d107      	bne.n	8007370 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800736e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007378:	d10f      	bne.n	800739a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007398:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e017      	b.n	80073de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	4013      	ands	r3, r2
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	bf0c      	ite	eq
 80073ce:	2301      	moveq	r3, #1
 80073d0:	2300      	movne	r3, #0
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	461a      	mov	r2, r3
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d19b      	bne.n	8007314 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3720      	adds	r7, #32
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	2000008c 	.word	0x2000008c

080073ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073f8:	4b1b      	ldr	r3, [pc, #108]	; (8007468 <SPI_EndRxTxTransaction+0x7c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a1b      	ldr	r2, [pc, #108]	; (800746c <SPI_EndRxTxTransaction+0x80>)
 80073fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007402:	0d5b      	lsrs	r3, r3, #21
 8007404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007408:	fb02 f303 	mul.w	r3, r2, r3
 800740c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007416:	d112      	bne.n	800743e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2200      	movs	r2, #0
 8007420:	2180      	movs	r1, #128	; 0x80
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff ff5a 	bl	80072dc <SPI_WaitFlagStateUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d016      	beq.n	800745c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	f043 0220 	orr.w	r2, r3, #32
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e00f      	b.n	800745e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	3b01      	subs	r3, #1
 8007448:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007454:	2b80      	cmp	r3, #128	; 0x80
 8007456:	d0f2      	beq.n	800743e <SPI_EndRxTxTransaction+0x52>
 8007458:	e000      	b.n	800745c <SPI_EndRxTxTransaction+0x70>
        break;
 800745a:	bf00      	nop
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	2000008c 	.word	0x2000008c
 800746c:	165e9f81 	.word	0x165e9f81

08007470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e0a7      	b.n	80075d2 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a55      	ldr	r2, [pc, #340]	; (80075dc <HAL_TIM_Base_Init+0x16c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d027      	beq.n	80074dc <HAL_TIM_Base_Init+0x6c>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007494:	d022      	beq.n	80074dc <HAL_TIM_Base_Init+0x6c>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a51      	ldr	r2, [pc, #324]	; (80075e0 <HAL_TIM_Base_Init+0x170>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d01d      	beq.n	80074dc <HAL_TIM_Base_Init+0x6c>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a4f      	ldr	r2, [pc, #316]	; (80075e4 <HAL_TIM_Base_Init+0x174>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d018      	beq.n	80074dc <HAL_TIM_Base_Init+0x6c>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a4e      	ldr	r2, [pc, #312]	; (80075e8 <HAL_TIM_Base_Init+0x178>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d013      	beq.n	80074dc <HAL_TIM_Base_Init+0x6c>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a4c      	ldr	r2, [pc, #304]	; (80075ec <HAL_TIM_Base_Init+0x17c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00e      	beq.n	80074dc <HAL_TIM_Base_Init+0x6c>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a4b      	ldr	r2, [pc, #300]	; (80075f0 <HAL_TIM_Base_Init+0x180>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d009      	beq.n	80074dc <HAL_TIM_Base_Init+0x6c>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a49      	ldr	r2, [pc, #292]	; (80075f4 <HAL_TIM_Base_Init+0x184>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <HAL_TIM_Base_Init+0x6c>
 80074d2:	f240 1113 	movw	r1, #275	; 0x113
 80074d6:	4848      	ldr	r0, [pc, #288]	; (80075f8 <HAL_TIM_Base_Init+0x188>)
 80074d8:	f7fa fc0d 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d014      	beq.n	800750e <HAL_TIM_Base_Init+0x9e>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d010      	beq.n	800750e <HAL_TIM_Base_Init+0x9e>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d00c      	beq.n	800750e <HAL_TIM_Base_Init+0x9e>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	2b40      	cmp	r3, #64	; 0x40
 80074fa:	d008      	beq.n	800750e <HAL_TIM_Base_Init+0x9e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2b60      	cmp	r3, #96	; 0x60
 8007502:	d004      	beq.n	800750e <HAL_TIM_Base_Init+0x9e>
 8007504:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007508:	483b      	ldr	r0, [pc, #236]	; (80075f8 <HAL_TIM_Base_Init+0x188>)
 800750a:	f7fa fbf4 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00e      	beq.n	8007534 <HAL_TIM_Base_Init+0xc4>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751e:	d009      	beq.n	8007534 <HAL_TIM_Base_Init+0xc4>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007528:	d004      	beq.n	8007534 <HAL_TIM_Base_Init+0xc4>
 800752a:	f240 1115 	movw	r1, #277	; 0x115
 800752e:	4832      	ldr	r0, [pc, #200]	; (80075f8 <HAL_TIM_Base_Init+0x188>)
 8007530:	f7fa fbe1 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_TIM_Base_Init+0xde>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b80      	cmp	r3, #128	; 0x80
 8007542:	d004      	beq.n	800754e <HAL_TIM_Base_Init+0xde>
 8007544:	f44f 718b 	mov.w	r1, #278	; 0x116
 8007548:	482b      	ldr	r0, [pc, #172]	; (80075f8 <HAL_TIM_Base_Init+0x188>)
 800754a:	f7fa fbd4 	bl	8001cf6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7fb fa16 	bl	8002994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4610      	mov	r0, r2
 800757c:	f001 fa32 	bl	80089e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	40014000 	.word	0x40014000
 80075f0:	40014400 	.word	0x40014400
 80075f4:	40014800 	.word	0x40014800
 80075f8:	080116e0 	.word	0x080116e0

080075fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a3d      	ldr	r2, [pc, #244]	; (8007700 <HAL_TIM_Base_Start_IT+0x104>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d027      	beq.n	800765e <HAL_TIM_Base_Start_IT+0x62>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007616:	d022      	beq.n	800765e <HAL_TIM_Base_Start_IT+0x62>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a39      	ldr	r2, [pc, #228]	; (8007704 <HAL_TIM_Base_Start_IT+0x108>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01d      	beq.n	800765e <HAL_TIM_Base_Start_IT+0x62>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a38      	ldr	r2, [pc, #224]	; (8007708 <HAL_TIM_Base_Start_IT+0x10c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <HAL_TIM_Base_Start_IT+0x62>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a36      	ldr	r2, [pc, #216]	; (800770c <HAL_TIM_Base_Start_IT+0x110>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <HAL_TIM_Base_Start_IT+0x62>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a35      	ldr	r2, [pc, #212]	; (8007710 <HAL_TIM_Base_Start_IT+0x114>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_TIM_Base_Start_IT+0x62>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a33      	ldr	r2, [pc, #204]	; (8007714 <HAL_TIM_Base_Start_IT+0x118>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_TIM_Base_Start_IT+0x62>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a32      	ldr	r2, [pc, #200]	; (8007718 <HAL_TIM_Base_Start_IT+0x11c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_TIM_Base_Start_IT+0x62>
 8007654:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007658:	4830      	ldr	r0, [pc, #192]	; (800771c <HAL_TIM_Base_Start_IT+0x120>)
 800765a:	f7fa fb4c 	bl	8001cf6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b01      	cmp	r3, #1
 8007668:	d001      	beq.n	800766e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e044      	b.n	80076f8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0201 	orr.w	r2, r2, #1
 8007684:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a1d      	ldr	r2, [pc, #116]	; (8007700 <HAL_TIM_Base_Start_IT+0x104>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d018      	beq.n	80076c2 <HAL_TIM_Base_Start_IT+0xc6>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007698:	d013      	beq.n	80076c2 <HAL_TIM_Base_Start_IT+0xc6>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a19      	ldr	r2, [pc, #100]	; (8007704 <HAL_TIM_Base_Start_IT+0x108>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00e      	beq.n	80076c2 <HAL_TIM_Base_Start_IT+0xc6>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a17      	ldr	r2, [pc, #92]	; (8007708 <HAL_TIM_Base_Start_IT+0x10c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d009      	beq.n	80076c2 <HAL_TIM_Base_Start_IT+0xc6>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a16      	ldr	r2, [pc, #88]	; (800770c <HAL_TIM_Base_Start_IT+0x110>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d004      	beq.n	80076c2 <HAL_TIM_Base_Start_IT+0xc6>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a14      	ldr	r2, [pc, #80]	; (8007710 <HAL_TIM_Base_Start_IT+0x114>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d111      	bne.n	80076e6 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b06      	cmp	r3, #6
 80076d2:	d010      	beq.n	80076f6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0201 	orr.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e4:	e007      	b.n	80076f6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f042 0201 	orr.w	r2, r2, #1
 80076f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	40010000 	.word	0x40010000
 8007704:	40000400 	.word	0x40000400
 8007708:	40000800 	.word	0x40000800
 800770c:	40000c00 	.word	0x40000c00
 8007710:	40014000 	.word	0x40014000
 8007714:	40014400 	.word	0x40014400
 8007718:	40014800 	.word	0x40014800
 800771c:	080116e0 	.word	0x080116e0

08007720 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e0a7      	b.n	8007882 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a55      	ldr	r2, [pc, #340]	; (800788c <HAL_TIM_PWM_Init+0x16c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d027      	beq.n	800778c <HAL_TIM_PWM_Init+0x6c>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007744:	d022      	beq.n	800778c <HAL_TIM_PWM_Init+0x6c>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a51      	ldr	r2, [pc, #324]	; (8007890 <HAL_TIM_PWM_Init+0x170>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d01d      	beq.n	800778c <HAL_TIM_PWM_Init+0x6c>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a4f      	ldr	r2, [pc, #316]	; (8007894 <HAL_TIM_PWM_Init+0x174>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d018      	beq.n	800778c <HAL_TIM_PWM_Init+0x6c>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a4e      	ldr	r2, [pc, #312]	; (8007898 <HAL_TIM_PWM_Init+0x178>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <HAL_TIM_PWM_Init+0x6c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a4c      	ldr	r2, [pc, #304]	; (800789c <HAL_TIM_PWM_Init+0x17c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00e      	beq.n	800778c <HAL_TIM_PWM_Init+0x6c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a4b      	ldr	r2, [pc, #300]	; (80078a0 <HAL_TIM_PWM_Init+0x180>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d009      	beq.n	800778c <HAL_TIM_PWM_Init+0x6c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a49      	ldr	r2, [pc, #292]	; (80078a4 <HAL_TIM_PWM_Init+0x184>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIM_PWM_Init+0x6c>
 8007782:	f240 5129 	movw	r1, #1321	; 0x529
 8007786:	4848      	ldr	r0, [pc, #288]	; (80078a8 <HAL_TIM_PWM_Init+0x188>)
 8007788:	f7fa fab5 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d014      	beq.n	80077be <HAL_TIM_PWM_Init+0x9e>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b10      	cmp	r3, #16
 800779a:	d010      	beq.n	80077be <HAL_TIM_PWM_Init+0x9e>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	d00c      	beq.n	80077be <HAL_TIM_PWM_Init+0x9e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d008      	beq.n	80077be <HAL_TIM_PWM_Init+0x9e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b60      	cmp	r3, #96	; 0x60
 80077b2:	d004      	beq.n	80077be <HAL_TIM_PWM_Init+0x9e>
 80077b4:	f240 512a 	movw	r1, #1322	; 0x52a
 80077b8:	483b      	ldr	r0, [pc, #236]	; (80078a8 <HAL_TIM_PWM_Init+0x188>)
 80077ba:	f7fa fa9c 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00e      	beq.n	80077e4 <HAL_TIM_PWM_Init+0xc4>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ce:	d009      	beq.n	80077e4 <HAL_TIM_PWM_Init+0xc4>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d8:	d004      	beq.n	80077e4 <HAL_TIM_PWM_Init+0xc4>
 80077da:	f240 512b 	movw	r1, #1323	; 0x52b
 80077de:	4832      	ldr	r0, [pc, #200]	; (80078a8 <HAL_TIM_PWM_Init+0x188>)
 80077e0:	f7fa fa89 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d008      	beq.n	80077fe <HAL_TIM_PWM_Init+0xde>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	2b80      	cmp	r3, #128	; 0x80
 80077f2:	d004      	beq.n	80077fe <HAL_TIM_PWM_Init+0xde>
 80077f4:	f240 512c 	movw	r1, #1324	; 0x52c
 80077f8:	482b      	ldr	r0, [pc, #172]	; (80078a8 <HAL_TIM_PWM_Init+0x188>)
 80077fa:	f7fa fa7c 	bl	8001cf6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f84a 	bl	80078ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3304      	adds	r3, #4
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f001 f8da 	bl	80089e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	40010000 	.word	0x40010000
 8007890:	40000400 	.word	0x40000400
 8007894:	40000800 	.word	0x40000800
 8007898:	40000c00 	.word	0x40000c00
 800789c:	40014000 	.word	0x40014000
 80078a0:	40014400 	.word	0x40014400
 80078a4:	40014800 	.word	0x40014800
 80078a8:	080116e0 	.word	0x080116e0

080078ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e18a      	b.n	8007bea <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a78      	ldr	r2, [pc, #480]	; (8007abc <HAL_TIM_Encoder_Init+0x1fc>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d01d      	beq.n	800791a <HAL_TIM_Encoder_Init+0x5a>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e6:	d018      	beq.n	800791a <HAL_TIM_Encoder_Init+0x5a>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a74      	ldr	r2, [pc, #464]	; (8007ac0 <HAL_TIM_Encoder_Init+0x200>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d013      	beq.n	800791a <HAL_TIM_Encoder_Init+0x5a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a73      	ldr	r2, [pc, #460]	; (8007ac4 <HAL_TIM_Encoder_Init+0x204>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d00e      	beq.n	800791a <HAL_TIM_Encoder_Init+0x5a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a71      	ldr	r2, [pc, #452]	; (8007ac8 <HAL_TIM_Encoder_Init+0x208>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d009      	beq.n	800791a <HAL_TIM_Encoder_Init+0x5a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a70      	ldr	r2, [pc, #448]	; (8007acc <HAL_TIM_Encoder_Init+0x20c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d004      	beq.n	800791a <HAL_TIM_Encoder_Init+0x5a>
 8007910:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8007914:	486e      	ldr	r0, [pc, #440]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 8007916:	f7fa f9ee 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d014      	beq.n	800794c <HAL_TIM_Encoder_Init+0x8c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	2b10      	cmp	r3, #16
 8007928:	d010      	beq.n	800794c <HAL_TIM_Encoder_Init+0x8c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	2b20      	cmp	r3, #32
 8007930:	d00c      	beq.n	800794c <HAL_TIM_Encoder_Init+0x8c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d008      	beq.n	800794c <HAL_TIM_Encoder_Init+0x8c>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	2b60      	cmp	r3, #96	; 0x60
 8007940:	d004      	beq.n	800794c <HAL_TIM_Encoder_Init+0x8c>
 8007942:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8007946:	4862      	ldr	r0, [pc, #392]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 8007948:	f7fa f9d5 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <HAL_TIM_Encoder_Init+0xb2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795c:	d009      	beq.n	8007972 <HAL_TIM_Encoder_Init+0xb2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007966:	d004      	beq.n	8007972 <HAL_TIM_Encoder_Init+0xb2>
 8007968:	f640 31d3 	movw	r1, #3027	; 0xbd3
 800796c:	4858      	ldr	r0, [pc, #352]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 800796e:	f7fa f9c2 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d008      	beq.n	800798c <HAL_TIM_Encoder_Init+0xcc>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	2b80      	cmp	r3, #128	; 0x80
 8007980:	d004      	beq.n	800798c <HAL_TIM_Encoder_Init+0xcc>
 8007982:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8007986:	4852      	ldr	r0, [pc, #328]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 8007988:	f7fa f9b5 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d00c      	beq.n	80079ae <HAL_TIM_Encoder_Init+0xee>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d008      	beq.n	80079ae <HAL_TIM_Encoder_Init+0xee>
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d004      	beq.n	80079ae <HAL_TIM_Encoder_Init+0xee>
 80079a4:	f640 31d5 	movw	r1, #3029	; 0xbd5
 80079a8:	4849      	ldr	r0, [pc, #292]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 80079aa:	f7fa f9a4 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d00c      	beq.n	80079d0 <HAL_TIM_Encoder_Init+0x110>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d008      	beq.n	80079d0 <HAL_TIM_Encoder_Init+0x110>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d004      	beq.n	80079d0 <HAL_TIM_Encoder_Init+0x110>
 80079c6:	f640 31d6 	movw	r1, #3030	; 0xbd6
 80079ca:	4841      	ldr	r0, [pc, #260]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 80079cc:	f7fa f993 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d00c      	beq.n	80079f2 <HAL_TIM_Encoder_Init+0x132>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d008      	beq.n	80079f2 <HAL_TIM_Encoder_Init+0x132>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d004      	beq.n	80079f2 <HAL_TIM_Encoder_Init+0x132>
 80079e8:	f640 31d7 	movw	r1, #3031	; 0xbd7
 80079ec:	4838      	ldr	r0, [pc, #224]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 80079ee:	f7fa f982 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d008      	beq.n	8007a0c <HAL_TIM_Encoder_Init+0x14c>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d004      	beq.n	8007a0c <HAL_TIM_Encoder_Init+0x14c>
 8007a02:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8007a06:	4832      	ldr	r0, [pc, #200]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 8007a08:	f7fa f975 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d008      	beq.n	8007a26 <HAL_TIM_Encoder_Init+0x166>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d004      	beq.n	8007a26 <HAL_TIM_Encoder_Init+0x166>
 8007a1c:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8007a20:	482b      	ldr	r0, [pc, #172]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 8007a22:	f7fa f968 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d010      	beq.n	8007a50 <HAL_TIM_Encoder_Init+0x190>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d00c      	beq.n	8007a50 <HAL_TIM_Encoder_Init+0x190>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d008      	beq.n	8007a50 <HAL_TIM_Encoder_Init+0x190>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	2b0c      	cmp	r3, #12
 8007a44:	d004      	beq.n	8007a50 <HAL_TIM_Encoder_Init+0x190>
 8007a46:	f640 31da 	movw	r1, #3034	; 0xbda
 8007a4a:	4821      	ldr	r0, [pc, #132]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 8007a4c:	f7fa f953 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d010      	beq.n	8007a7a <HAL_TIM_Encoder_Init+0x1ba>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d00c      	beq.n	8007a7a <HAL_TIM_Encoder_Init+0x1ba>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d008      	beq.n	8007a7a <HAL_TIM_Encoder_Init+0x1ba>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	2b0c      	cmp	r3, #12
 8007a6e:	d004      	beq.n	8007a7a <HAL_TIM_Encoder_Init+0x1ba>
 8007a70:	f640 31db 	movw	r1, #3035	; 0xbdb
 8007a74:	4816      	ldr	r0, [pc, #88]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 8007a76:	f7fa f93e 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b0f      	cmp	r3, #15
 8007a80:	d904      	bls.n	8007a8c <HAL_TIM_Encoder_Init+0x1cc>
 8007a82:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8007a86:	4812      	ldr	r0, [pc, #72]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 8007a88:	f7fa f935 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	2b0f      	cmp	r3, #15
 8007a92:	d904      	bls.n	8007a9e <HAL_TIM_Encoder_Init+0x1de>
 8007a94:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8007a98:	480d      	ldr	r0, [pc, #52]	; (8007ad0 <HAL_TIM_Encoder_Init+0x210>)
 8007a9a:	f7fa f92c 	bl	8001cf6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d114      	bne.n	8007ad4 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fa ffda 	bl	8002a6c <HAL_TIM_Encoder_MspInit>
 8007ab8:	e00c      	b.n	8007ad4 <HAL_TIM_Encoder_Init+0x214>
 8007aba:	bf00      	nop
 8007abc:	40010000 	.word	0x40010000
 8007ac0:	40000400 	.word	0x40000400
 8007ac4:	40000800 	.word	0x40000800
 8007ac8:	40000c00 	.word	0x40000c00
 8007acc:	40014000 	.word	0x40014000
 8007ad0:	080116e0 	.word	0x080116e0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6812      	ldr	r2, [r2, #0]
 8007ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4619      	mov	r1, r3
 8007afa:	4610      	mov	r0, r2
 8007afc:	f000 ff72 	bl	80089e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b28:	f023 0303 	bic.w	r3, r3, #3
 8007b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	689a      	ldr	r2, [r3, #8]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007b46:	f023 030c 	bic.w	r3, r3, #12
 8007b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	4313      	orrs	r3, r2
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	011a      	lsls	r2, r3, #4
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	031b      	lsls	r3, r3, #12
 8007b76:	4313      	orrs	r3, r2
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007b84:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007b8c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop

08007bf4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a4d      	ldr	r2, [pc, #308]	; (8007d58 <HAL_TIM_Encoder_Start+0x164>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d01d      	beq.n	8007c64 <HAL_TIM_Encoder_Start+0x70>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c30:	d018      	beq.n	8007c64 <HAL_TIM_Encoder_Start+0x70>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a49      	ldr	r2, [pc, #292]	; (8007d5c <HAL_TIM_Encoder_Start+0x168>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d013      	beq.n	8007c64 <HAL_TIM_Encoder_Start+0x70>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a47      	ldr	r2, [pc, #284]	; (8007d60 <HAL_TIM_Encoder_Start+0x16c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00e      	beq.n	8007c64 <HAL_TIM_Encoder_Start+0x70>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a46      	ldr	r2, [pc, #280]	; (8007d64 <HAL_TIM_Encoder_Start+0x170>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d009      	beq.n	8007c64 <HAL_TIM_Encoder_Start+0x70>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a44      	ldr	r2, [pc, #272]	; (8007d68 <HAL_TIM_Encoder_Start+0x174>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d004      	beq.n	8007c64 <HAL_TIM_Encoder_Start+0x70>
 8007c5a:	f640 418e 	movw	r1, #3214	; 0xc8e
 8007c5e:	4843      	ldr	r0, [pc, #268]	; (8007d6c <HAL_TIM_Encoder_Start+0x178>)
 8007c60:	f7fa f849 	bl	8001cf6 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d110      	bne.n	8007c8c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d102      	bne.n	8007c76 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c70:	7b7b      	ldrb	r3, [r7, #13]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d001      	beq.n	8007c7a <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e069      	b.n	8007d4e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2202      	movs	r2, #2
 8007c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c8a:	e031      	b.n	8007cf0 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d110      	bne.n	8007cb4 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d102      	bne.n	8007c9e <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c98:	7b3b      	ldrb	r3, [r7, #12]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d001      	beq.n	8007ca2 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e055      	b.n	8007d4e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cb2:	e01d      	b.n	8007cf0 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d108      	bne.n	8007ccc <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d105      	bne.n	8007ccc <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cc0:	7b7b      	ldrb	r3, [r7, #13]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d102      	bne.n	8007ccc <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cc6:	7b3b      	ldrb	r3, [r7, #12]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d001      	beq.n	8007cd0 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e03e      	b.n	8007d4e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_TIM_Encoder_Start+0x10a>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d008      	beq.n	8007d0e <HAL_TIM_Encoder_Start+0x11a>
 8007cfc:	e00f      	b.n	8007d1e <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2201      	movs	r2, #1
 8007d04:	2100      	movs	r1, #0
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 f99c 	bl	8009044 <TIM_CCxChannelCmd>
      break;
 8007d0c:	e016      	b.n	8007d3c <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2201      	movs	r2, #1
 8007d14:	2104      	movs	r1, #4
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 f994 	bl	8009044 <TIM_CCxChannelCmd>
      break;
 8007d1c:	e00e      	b.n	8007d3c <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2201      	movs	r2, #1
 8007d24:	2100      	movs	r1, #0
 8007d26:	4618      	mov	r0, r3
 8007d28:	f001 f98c 	bl	8009044 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2201      	movs	r2, #1
 8007d32:	2104      	movs	r1, #4
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 f985 	bl	8009044 <TIM_CCxChannelCmd>
      break;
 8007d3a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0201 	orr.w	r2, r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	40010000 	.word	0x40010000
 8007d5c:	40000400 	.word	0x40000400
 8007d60:	40000800 	.word	0x40000800
 8007d64:	40000c00 	.word	0x40000c00
 8007d68:	40014000 	.word	0x40014000
 8007d6c:	080116e0 	.word	0x080116e0

08007d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d122      	bne.n	8007dcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d11b      	bne.n	8007dcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0202 	mvn.w	r2, #2
 8007d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fda4 	bl	8008900 <HAL_TIM_IC_CaptureCallback>
 8007db8:	e005      	b.n	8007dc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fd96 	bl	80088ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fda7 	bl	8008914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0304 	and.w	r3, r3, #4
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d122      	bne.n	8007e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d11b      	bne.n	8007e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f06f 0204 	mvn.w	r2, #4
 8007df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2202      	movs	r2, #2
 8007df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fd7a 	bl	8008900 <HAL_TIM_IC_CaptureCallback>
 8007e0c:	e005      	b.n	8007e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fd6c 	bl	80088ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fd7d 	bl	8008914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	2b08      	cmp	r3, #8
 8007e2c:	d122      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d11b      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0208 	mvn.w	r2, #8
 8007e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2204      	movs	r2, #4
 8007e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fd50 	bl	8008900 <HAL_TIM_IC_CaptureCallback>
 8007e60:	e005      	b.n	8007e6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fd42 	bl	80088ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fd53 	bl	8008914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0310 	and.w	r3, r3, #16
 8007e7e:	2b10      	cmp	r3, #16
 8007e80:	d122      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0310 	and.w	r3, r3, #16
 8007e8c:	2b10      	cmp	r3, #16
 8007e8e:	d11b      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0210 	mvn.w	r2, #16
 8007e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2208      	movs	r2, #8
 8007e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fd26 	bl	8008900 <HAL_TIM_IC_CaptureCallback>
 8007eb4:	e005      	b.n	8007ec2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fd18 	bl	80088ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fd29 	bl	8008914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d10e      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d107      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f06f 0201 	mvn.w	r2, #1
 8007eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7f9 fed4 	bl	8001c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efe:	2b80      	cmp	r3, #128	; 0x80
 8007f00:	d10e      	bne.n	8007f20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0c:	2b80      	cmp	r3, #128	; 0x80
 8007f0e:	d107      	bne.n	8007f20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 f9c6 	bl	80092ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2a:	2b40      	cmp	r3, #64	; 0x40
 8007f2c:	d10e      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f38:	2b40      	cmp	r3, #64	; 0x40
 8007f3a:	d107      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fcee 	bl	8008928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d10e      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f003 0320 	and.w	r3, r3, #32
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	d107      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0220 	mvn.w	r2, #32
 8007f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 f990 	bl	8009298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d010      	beq.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d00d      	beq.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d00a      	beq.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b0c      	cmp	r3, #12
 8007fa6:	d007      	beq.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b3c      	cmp	r3, #60	; 0x3c
 8007fac:	d004      	beq.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007fae:	f241 0177 	movw	r1, #4215	; 0x1077
 8007fb2:	4893      	ldr	r0, [pc, #588]	; (8008200 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007fb4:	f7f9 fe9f 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b60      	cmp	r3, #96	; 0x60
 8007fbe:	d008      	beq.n	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x52>
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b70      	cmp	r3, #112	; 0x70
 8007fc6:	d004      	beq.n	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x52>
 8007fc8:	f241 0178 	movw	r1, #4216	; 0x1078
 8007fcc:	488c      	ldr	r0, [pc, #560]	; (8008200 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007fce:	f7f9 fe92 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d008      	beq.n	8007fec <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d004      	beq.n	8007fec <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007fe2:	f241 0179 	movw	r1, #4217	; 0x1079
 8007fe6:	4886      	ldr	r0, [pc, #536]	; (8008200 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007fe8:	f7f9 fe85 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d008      	beq.n	8008006 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d004      	beq.n	8008006 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007ffc:	f241 017a 	movw	r1, #4218	; 0x107a
 8008000:	487f      	ldr	r0, [pc, #508]	; (8008200 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008002:	f7f9 fe78 	bl	8001cf6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008010:	2302      	movs	r3, #2
 8008012:	e14c      	b.n	80082ae <HAL_TIM_PWM_ConfigChannel+0x32e>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b0c      	cmp	r3, #12
 8008020:	f200 813d 	bhi.w	800829e <HAL_TIM_PWM_ConfigChannel+0x31e>
 8008024:	a201      	add	r2, pc, #4	; (adr r2, 800802c <HAL_TIM_PWM_ConfigChannel+0xac>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	08008061 	.word	0x08008061
 8008030:	0800829f 	.word	0x0800829f
 8008034:	0800829f 	.word	0x0800829f
 8008038:	0800829f 	.word	0x0800829f
 800803c:	080080fb 	.word	0x080080fb
 8008040:	0800829f 	.word	0x0800829f
 8008044:	0800829f 	.word	0x0800829f
 8008048:	0800829f 	.word	0x0800829f
 800804c:	08008183 	.word	0x08008183
 8008050:	0800829f 	.word	0x0800829f
 8008054:	0800829f 	.word	0x0800829f
 8008058:	0800829f 	.word	0x0800829f
 800805c:	08008221 	.word	0x08008221
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a67      	ldr	r2, [pc, #412]	; (8008204 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d027      	beq.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x13a>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008072:	d022      	beq.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a63      	ldr	r2, [pc, #396]	; (8008208 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d01d      	beq.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x13a>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a62      	ldr	r2, [pc, #392]	; (800820c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d018      	beq.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a60      	ldr	r2, [pc, #384]	; (8008210 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d013      	beq.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a5f      	ldr	r2, [pc, #380]	; (8008214 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00e      	beq.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x13a>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a5d      	ldr	r2, [pc, #372]	; (8008218 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d009      	beq.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x13a>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a5c      	ldr	r2, [pc, #368]	; (800821c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d004      	beq.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x13a>
 80080b0:	f241 0184 	movw	r1, #4228	; 0x1084
 80080b4:	4852      	ldr	r0, [pc, #328]	; (8008200 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80080b6:	f7f9 fe1e 	bl	8001cf6 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fd0f 	bl	8008ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699a      	ldr	r2, [r3, #24]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f042 0208 	orr.w	r2, r2, #8
 80080d4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0204 	bic.w	r2, r2, #4
 80080e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6999      	ldr	r1, [r3, #24]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	619a      	str	r2, [r3, #24]
      break;
 80080f8:	e0d4      	b.n	80082a4 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a41      	ldr	r2, [pc, #260]	; (8008204 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d01d      	beq.n	8008140 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800810c:	d018      	beq.n	8008140 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a3d      	ldr	r2, [pc, #244]	; (8008208 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d013      	beq.n	8008140 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a3b      	ldr	r2, [pc, #236]	; (800820c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00e      	beq.n	8008140 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a3a      	ldr	r2, [pc, #232]	; (8008210 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d009      	beq.n	8008140 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a38      	ldr	r2, [pc, #224]	; (8008214 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d004      	beq.n	8008140 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008136:	f241 0195 	movw	r1, #4245	; 0x1095
 800813a:	4831      	ldr	r0, [pc, #196]	; (8008200 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800813c:	f7f9 fddb 	bl	8001cf6 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fd5c 	bl	8008c04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800815a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800816a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6999      	ldr	r1, [r3, #24]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	021a      	lsls	r2, r3, #8
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	619a      	str	r2, [r3, #24]
      break;
 8008180:	e090      	b.n	80082a4 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1f      	ldr	r2, [pc, #124]	; (8008204 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d018      	beq.n	80081be <HAL_TIM_PWM_ConfigChannel+0x23e>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008194:	d013      	beq.n	80081be <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1b      	ldr	r2, [pc, #108]	; (8008208 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00e      	beq.n	80081be <HAL_TIM_PWM_ConfigChannel+0x23e>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a19      	ldr	r2, [pc, #100]	; (800820c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d009      	beq.n	80081be <HAL_TIM_PWM_ConfigChannel+0x23e>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a18      	ldr	r2, [pc, #96]	; (8008210 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d004      	beq.n	80081be <HAL_TIM_PWM_ConfigChannel+0x23e>
 80081b4:	f241 01a6 	movw	r1, #4262	; 0x10a6
 80081b8:	4811      	ldr	r0, [pc, #68]	; (8008200 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80081ba:	f7f9 fd9c 	bl	8001cf6 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fdb1 	bl	8008d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69da      	ldr	r2, [r3, #28]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f042 0208 	orr.w	r2, r2, #8
 80081d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69da      	ldr	r2, [r3, #28]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 0204 	bic.w	r2, r2, #4
 80081e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69d9      	ldr	r1, [r3, #28]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	61da      	str	r2, [r3, #28]
      break;
 80081fc:	e052      	b.n	80082a4 <HAL_TIM_PWM_ConfigChannel+0x324>
 80081fe:	bf00      	nop
 8008200:	080116e0 	.word	0x080116e0
 8008204:	40010000 	.word	0x40010000
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	40000c00 	.word	0x40000c00
 8008214:	40014000 	.word	0x40014000
 8008218:	40014400 	.word	0x40014400
 800821c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a24      	ldr	r2, [pc, #144]	; (80082b8 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d018      	beq.n	800825c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008232:	d013      	beq.n	800825c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a20      	ldr	r2, [pc, #128]	; (80082bc <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00e      	beq.n	800825c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a1f      	ldr	r2, [pc, #124]	; (80082c0 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d009      	beq.n	800825c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <HAL_TIM_PWM_ConfigChannel+0x344>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008252:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8008256:	481c      	ldr	r0, [pc, #112]	; (80082c8 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8008258:	f7f9 fd4d 	bl	8001cf6 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68b9      	ldr	r1, [r7, #8]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 fdf6 	bl	8008e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69da      	ldr	r2, [r3, #28]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008276:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	69da      	ldr	r2, [r3, #28]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008286:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69d9      	ldr	r1, [r3, #28]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	021a      	lsls	r2, r3, #8
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	61da      	str	r2, [r3, #28]
      break;
 800829c:	e002      	b.n	80082a4 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	75fb      	strb	r3, [r7, #23]
      break;
 80082a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	40010000 	.word	0x40010000
 80082bc:	40000400 	.word	0x40000400
 80082c0:	40000800 	.word	0x40000800
 80082c4:	40000c00 	.word	0x40000c00
 80082c8:	080116e0 	.word	0x080116e0

080082cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e2f0      	b.n	80088ca <HAL_TIM_ConfigClockSource+0x5fe>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008300:	d029      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x8a>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b70      	cmp	r3, #112	; 0x70
 8008308:	d025      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x8a>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008312:	d020      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x8a>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b40      	cmp	r3, #64	; 0x40
 800831a:	d01c      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x8a>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b50      	cmp	r3, #80	; 0x50
 8008322:	d018      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x8a>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b60      	cmp	r3, #96	; 0x60
 800832a:	d014      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x8a>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d010      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x8a>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b10      	cmp	r3, #16
 800833a:	d00c      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x8a>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b20      	cmp	r3, #32
 8008342:	d008      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x8a>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b30      	cmp	r3, #48	; 0x30
 800834a:	d004      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0x8a>
 800834c:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8008350:	487c      	ldr	r0, [pc, #496]	; (8008544 <HAL_TIM_ConfigClockSource+0x278>)
 8008352:	f7f9 fcd0 	bl	8001cf6 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008364:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800836c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800837e:	f000 80f1 	beq.w	8008564 <HAL_TIM_ConfigClockSource+0x298>
 8008382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008386:	f200 8293 	bhi.w	80088b0 <HAL_TIM_ConfigClockSource+0x5e4>
 800838a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838e:	d02d      	beq.n	80083ec <HAL_TIM_ConfigClockSource+0x120>
 8008390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008394:	f200 828c 	bhi.w	80088b0 <HAL_TIM_ConfigClockSource+0x5e4>
 8008398:	2b70      	cmp	r3, #112	; 0x70
 800839a:	d05d      	beq.n	8008458 <HAL_TIM_ConfigClockSource+0x18c>
 800839c:	2b70      	cmp	r3, #112	; 0x70
 800839e:	f200 8287 	bhi.w	80088b0 <HAL_TIM_ConfigClockSource+0x5e4>
 80083a2:	2b60      	cmp	r3, #96	; 0x60
 80083a4:	f000 81a0 	beq.w	80086e8 <HAL_TIM_ConfigClockSource+0x41c>
 80083a8:	2b60      	cmp	r3, #96	; 0x60
 80083aa:	f200 8281 	bhi.w	80088b0 <HAL_TIM_ConfigClockSource+0x5e4>
 80083ae:	2b50      	cmp	r3, #80	; 0x50
 80083b0:	f000 8144 	beq.w	800863c <HAL_TIM_ConfigClockSource+0x370>
 80083b4:	2b50      	cmp	r3, #80	; 0x50
 80083b6:	f200 827b 	bhi.w	80088b0 <HAL_TIM_ConfigClockSource+0x5e4>
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	f000 81f6 	beq.w	80087ac <HAL_TIM_ConfigClockSource+0x4e0>
 80083c0:	2b40      	cmp	r3, #64	; 0x40
 80083c2:	f200 8275 	bhi.w	80088b0 <HAL_TIM_ConfigClockSource+0x5e4>
 80083c6:	2b30      	cmp	r3, #48	; 0x30
 80083c8:	f000 8246 	beq.w	8008858 <HAL_TIM_ConfigClockSource+0x58c>
 80083cc:	2b30      	cmp	r3, #48	; 0x30
 80083ce:	f200 826f 	bhi.w	80088b0 <HAL_TIM_ConfigClockSource+0x5e4>
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	f000 8240 	beq.w	8008858 <HAL_TIM_ConfigClockSource+0x58c>
 80083d8:	2b20      	cmp	r3, #32
 80083da:	f200 8269 	bhi.w	80088b0 <HAL_TIM_ConfigClockSource+0x5e4>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 823a 	beq.w	8008858 <HAL_TIM_ConfigClockSource+0x58c>
 80083e4:	2b10      	cmp	r3, #16
 80083e6:	f000 8237 	beq.w	8008858 <HAL_TIM_ConfigClockSource+0x58c>
 80083ea:	e261      	b.n	80088b0 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a55      	ldr	r2, [pc, #340]	; (8008548 <HAL_TIM_ConfigClockSource+0x27c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	f000 825f 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x5ea>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008400:	f000 8259 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a50      	ldr	r2, [pc, #320]	; (800854c <HAL_TIM_ConfigClockSource+0x280>)
 800840a:	4293      	cmp	r3, r2
 800840c:	f000 8253 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a4e      	ldr	r2, [pc, #312]	; (8008550 <HAL_TIM_ConfigClockSource+0x284>)
 8008416:	4293      	cmp	r3, r2
 8008418:	f000 824d 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x5ea>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a4c      	ldr	r2, [pc, #304]	; (8008554 <HAL_TIM_ConfigClockSource+0x288>)
 8008422:	4293      	cmp	r3, r2
 8008424:	f000 8247 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a4a      	ldr	r2, [pc, #296]	; (8008558 <HAL_TIM_ConfigClockSource+0x28c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	f000 8241 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a48      	ldr	r2, [pc, #288]	; (800855c <HAL_TIM_ConfigClockSource+0x290>)
 800843a:	4293      	cmp	r3, r2
 800843c:	f000 823b 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x5ea>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a46      	ldr	r2, [pc, #280]	; (8008560 <HAL_TIM_ConfigClockSource+0x294>)
 8008446:	4293      	cmp	r3, r2
 8008448:	f000 8235 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x5ea>
 800844c:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8008450:	483c      	ldr	r0, [pc, #240]	; (8008544 <HAL_TIM_ConfigClockSource+0x278>)
 8008452:	f7f9 fc50 	bl	8001cf6 <assert_failed>
      break;
 8008456:	e22e      	b.n	80088b6 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a3a      	ldr	r2, [pc, #232]	; (8008548 <HAL_TIM_ConfigClockSource+0x27c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d01d      	beq.n	800849e <HAL_TIM_ConfigClockSource+0x1d2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846a:	d018      	beq.n	800849e <HAL_TIM_ConfigClockSource+0x1d2>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a36      	ldr	r2, [pc, #216]	; (800854c <HAL_TIM_ConfigClockSource+0x280>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d013      	beq.n	800849e <HAL_TIM_ConfigClockSource+0x1d2>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a35      	ldr	r2, [pc, #212]	; (8008550 <HAL_TIM_ConfigClockSource+0x284>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00e      	beq.n	800849e <HAL_TIM_ConfigClockSource+0x1d2>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a33      	ldr	r2, [pc, #204]	; (8008554 <HAL_TIM_ConfigClockSource+0x288>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d009      	beq.n	800849e <HAL_TIM_ConfigClockSource+0x1d2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a32      	ldr	r2, [pc, #200]	; (8008558 <HAL_TIM_ConfigClockSource+0x28c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d004      	beq.n	800849e <HAL_TIM_ConfigClockSource+0x1d2>
 8008494:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8008498:	482a      	ldr	r0, [pc, #168]	; (8008544 <HAL_TIM_ConfigClockSource+0x278>)
 800849a:	f7f9 fc2c 	bl	8001cf6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d013      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x202>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ae:	d00e      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x202>
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084b8:	d009      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x202>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084c2:	d004      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x202>
 80084c4:	f241 41cd 	movw	r1, #5325	; 0x14cd
 80084c8:	481e      	ldr	r0, [pc, #120]	; (8008544 <HAL_TIM_ConfigClockSource+0x278>)
 80084ca:	f7f9 fc14 	bl	8001cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d6:	d014      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0x236>
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d010      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0x236>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00c      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0x236>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d008      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0x236>
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b0a      	cmp	r3, #10
 80084f6:	d004      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0x236>
 80084f8:	f241 41ce 	movw	r1, #5326	; 0x14ce
 80084fc:	4811      	ldr	r0, [pc, #68]	; (8008544 <HAL_TIM_ConfigClockSource+0x278>)
 80084fe:	f7f9 fbfa 	bl	8001cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	2b0f      	cmp	r3, #15
 8008508:	d904      	bls.n	8008514 <HAL_TIM_ConfigClockSource+0x248>
 800850a:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800850e:	480d      	ldr	r0, [pc, #52]	; (8008544 <HAL_TIM_ConfigClockSource+0x278>)
 8008510:	f7f9 fbf1 	bl	8001cf6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	6899      	ldr	r1, [r3, #8]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f000 fd6e 	bl	8009004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008536:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	609a      	str	r2, [r3, #8]
      break;
 8008540:	e1ba      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x5ec>
 8008542:	bf00      	nop
 8008544:	080116e0 	.word	0x080116e0
 8008548:	40010000 	.word	0x40010000
 800854c:	40000400 	.word	0x40000400
 8008550:	40000800 	.word	0x40000800
 8008554:	40000c00 	.word	0x40000c00
 8008558:	40014000 	.word	0x40014000
 800855c:	40014400 	.word	0x40014400
 8008560:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a8a      	ldr	r2, [pc, #552]	; (8008794 <HAL_TIM_ConfigClockSource+0x4c8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d018      	beq.n	80085a0 <HAL_TIM_ConfigClockSource+0x2d4>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008576:	d013      	beq.n	80085a0 <HAL_TIM_ConfigClockSource+0x2d4>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a86      	ldr	r2, [pc, #536]	; (8008798 <HAL_TIM_ConfigClockSource+0x4cc>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00e      	beq.n	80085a0 <HAL_TIM_ConfigClockSource+0x2d4>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a85      	ldr	r2, [pc, #532]	; (800879c <HAL_TIM_ConfigClockSource+0x4d0>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d009      	beq.n	80085a0 <HAL_TIM_ConfigClockSource+0x2d4>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a83      	ldr	r2, [pc, #524]	; (80087a0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d004      	beq.n	80085a0 <HAL_TIM_ConfigClockSource+0x2d4>
 8008596:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800859a:	4882      	ldr	r0, [pc, #520]	; (80087a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800859c:	f7f9 fbab 	bl	8001cf6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d013      	beq.n	80085d0 <HAL_TIM_ConfigClockSource+0x304>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b0:	d00e      	beq.n	80085d0 <HAL_TIM_ConfigClockSource+0x304>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ba:	d009      	beq.n	80085d0 <HAL_TIM_ConfigClockSource+0x304>
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085c4:	d004      	beq.n	80085d0 <HAL_TIM_ConfigClockSource+0x304>
 80085c6:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80085ca:	4876      	ldr	r0, [pc, #472]	; (80087a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 80085cc:	f7f9 fb93 	bl	8001cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d8:	d014      	beq.n	8008604 <HAL_TIM_ConfigClockSource+0x338>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d010      	beq.n	8008604 <HAL_TIM_ConfigClockSource+0x338>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00c      	beq.n	8008604 <HAL_TIM_ConfigClockSource+0x338>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d008      	beq.n	8008604 <HAL_TIM_ConfigClockSource+0x338>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2b0a      	cmp	r3, #10
 80085f8:	d004      	beq.n	8008604 <HAL_TIM_ConfigClockSource+0x338>
 80085fa:	f241 41e6 	movw	r1, #5350	; 0x14e6
 80085fe:	4869      	ldr	r0, [pc, #420]	; (80087a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008600:	f7f9 fb79 	bl	8001cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	2b0f      	cmp	r3, #15
 800860a:	d904      	bls.n	8008616 <HAL_TIM_ConfigClockSource+0x34a>
 800860c:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8008610:	4864      	ldr	r0, [pc, #400]	; (80087a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008612:	f7f9 fb70 	bl	8001cf6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6818      	ldr	r0, [r3, #0]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	6899      	ldr	r1, [r3, #8]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f000 fced 	bl	8009004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008638:	609a      	str	r2, [r3, #8]
      break;
 800863a:	e13d      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a54      	ldr	r2, [pc, #336]	; (8008794 <HAL_TIM_ConfigClockSource+0x4c8>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d01d      	beq.n	8008682 <HAL_TIM_ConfigClockSource+0x3b6>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864e:	d018      	beq.n	8008682 <HAL_TIM_ConfigClockSource+0x3b6>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a50      	ldr	r2, [pc, #320]	; (8008798 <HAL_TIM_ConfigClockSource+0x4cc>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d013      	beq.n	8008682 <HAL_TIM_ConfigClockSource+0x3b6>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a4f      	ldr	r2, [pc, #316]	; (800879c <HAL_TIM_ConfigClockSource+0x4d0>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d00e      	beq.n	8008682 <HAL_TIM_ConfigClockSource+0x3b6>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a4d      	ldr	r2, [pc, #308]	; (80087a0 <HAL_TIM_ConfigClockSource+0x4d4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d009      	beq.n	8008682 <HAL_TIM_ConfigClockSource+0x3b6>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a4d      	ldr	r2, [pc, #308]	; (80087a8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d004      	beq.n	8008682 <HAL_TIM_ConfigClockSource+0x3b6>
 8008678:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800867c:	4849      	ldr	r0, [pc, #292]	; (80087a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800867e:	f7f9 fb3a 	bl	8001cf6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800868a:	d014      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0x3ea>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d010      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0x3ea>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00c      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0x3ea>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d008      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0x3ea>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	2b0a      	cmp	r3, #10
 80086aa:	d004      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0x3ea>
 80086ac:	f241 41f9 	movw	r1, #5369	; 0x14f9
 80086b0:	483c      	ldr	r0, [pc, #240]	; (80087a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 80086b2:	f7f9 fb20 	bl	8001cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	2b0f      	cmp	r3, #15
 80086bc:	d904      	bls.n	80086c8 <HAL_TIM_ConfigClockSource+0x3fc>
 80086be:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80086c2:	4838      	ldr	r0, [pc, #224]	; (80087a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 80086c4:	f7f9 fb17 	bl	8001cf6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	6859      	ldr	r1, [r3, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	461a      	mov	r2, r3
 80086d6:	f000 fc1b 	bl	8008f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2150      	movs	r1, #80	; 0x50
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fc74 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 80086e6:	e0e7      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a29      	ldr	r2, [pc, #164]	; (8008794 <HAL_TIM_ConfigClockSource+0x4c8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d01d      	beq.n	800872e <HAL_TIM_ConfigClockSource+0x462>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fa:	d018      	beq.n	800872e <HAL_TIM_ConfigClockSource+0x462>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a25      	ldr	r2, [pc, #148]	; (8008798 <HAL_TIM_ConfigClockSource+0x4cc>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d013      	beq.n	800872e <HAL_TIM_ConfigClockSource+0x462>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a24      	ldr	r2, [pc, #144]	; (800879c <HAL_TIM_ConfigClockSource+0x4d0>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d00e      	beq.n	800872e <HAL_TIM_ConfigClockSource+0x462>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a22      	ldr	r2, [pc, #136]	; (80087a0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d009      	beq.n	800872e <HAL_TIM_ConfigClockSource+0x462>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a22      	ldr	r2, [pc, #136]	; (80087a8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d004      	beq.n	800872e <HAL_TIM_ConfigClockSource+0x462>
 8008724:	f241 5106 	movw	r1, #5382	; 0x1506
 8008728:	481e      	ldr	r0, [pc, #120]	; (80087a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800872a:	f7f9 fae4 	bl	8001cf6 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008736:	d014      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x496>
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d010      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x496>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00c      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x496>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d008      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x496>
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	2b0a      	cmp	r3, #10
 8008756:	d004      	beq.n	8008762 <HAL_TIM_ConfigClockSource+0x496>
 8008758:	f241 5109 	movw	r1, #5385	; 0x1509
 800875c:	4811      	ldr	r0, [pc, #68]	; (80087a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800875e:	f7f9 faca 	bl	8001cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	2b0f      	cmp	r3, #15
 8008768:	d904      	bls.n	8008774 <HAL_TIM_ConfigClockSource+0x4a8>
 800876a:	f241 510a 	movw	r1, #5386	; 0x150a
 800876e:	480d      	ldr	r0, [pc, #52]	; (80087a4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008770:	f7f9 fac1 	bl	8001cf6 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	6859      	ldr	r1, [r3, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	461a      	mov	r2, r3
 8008782:	f000 fbf4 	bl	8008f6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2160      	movs	r1, #96	; 0x60
 800878c:	4618      	mov	r0, r3
 800878e:	f000 fc1e 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 8008792:	e091      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x5ec>
 8008794:	40010000 	.word	0x40010000
 8008798:	40000400 	.word	0x40000400
 800879c:	40000800 	.word	0x40000800
 80087a0:	40000c00 	.word	0x40000c00
 80087a4:	080116e0 	.word	0x080116e0
 80087a8:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a48      	ldr	r2, [pc, #288]	; (80088d4 <HAL_TIM_ConfigClockSource+0x608>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d01d      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x526>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087be:	d018      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x526>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a44      	ldr	r2, [pc, #272]	; (80088d8 <HAL_TIM_ConfigClockSource+0x60c>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d013      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x526>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a43      	ldr	r2, [pc, #268]	; (80088dc <HAL_TIM_ConfigClockSource+0x610>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d00e      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x526>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a41      	ldr	r2, [pc, #260]	; (80088e0 <HAL_TIM_ConfigClockSource+0x614>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d009      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x526>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a40      	ldr	r2, [pc, #256]	; (80088e4 <HAL_TIM_ConfigClockSource+0x618>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d004      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x526>
 80087e8:	f241 5116 	movw	r1, #5398	; 0x1516
 80087ec:	483e      	ldr	r0, [pc, #248]	; (80088e8 <HAL_TIM_ConfigClockSource+0x61c>)
 80087ee:	f7f9 fa82 	bl	8001cf6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087fa:	d014      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x55a>
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d010      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x55a>
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00c      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x55a>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d008      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x55a>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	2b0a      	cmp	r3, #10
 800881a:	d004      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x55a>
 800881c:	f241 5119 	movw	r1, #5401	; 0x1519
 8008820:	4831      	ldr	r0, [pc, #196]	; (80088e8 <HAL_TIM_ConfigClockSource+0x61c>)
 8008822:	f7f9 fa68 	bl	8001cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	2b0f      	cmp	r3, #15
 800882c:	d904      	bls.n	8008838 <HAL_TIM_ConfigClockSource+0x56c>
 800882e:	f241 511a 	movw	r1, #5402	; 0x151a
 8008832:	482d      	ldr	r0, [pc, #180]	; (80088e8 <HAL_TIM_ConfigClockSource+0x61c>)
 8008834:	f7f9 fa5f 	bl	8001cf6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	6859      	ldr	r1, [r3, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	461a      	mov	r2, r3
 8008846:	f000 fb63 	bl	8008f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2140      	movs	r1, #64	; 0x40
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fbbc 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 8008856:	e02f      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <HAL_TIM_ConfigClockSource+0x608>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d01d      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x5d2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886a:	d018      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x5d2>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a19      	ldr	r2, [pc, #100]	; (80088d8 <HAL_TIM_ConfigClockSource+0x60c>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d013      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x5d2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a18      	ldr	r2, [pc, #96]	; (80088dc <HAL_TIM_ConfigClockSource+0x610>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d00e      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x5d2>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a16      	ldr	r2, [pc, #88]	; (80088e0 <HAL_TIM_ConfigClockSource+0x614>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d009      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x5d2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a15      	ldr	r2, [pc, #84]	; (80088e4 <HAL_TIM_ConfigClockSource+0x618>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d004      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x5d2>
 8008894:	f241 5129 	movw	r1, #5417	; 0x1529
 8008898:	4813      	ldr	r0, [pc, #76]	; (80088e8 <HAL_TIM_ConfigClockSource+0x61c>)
 800889a:	f7f9 fa2c 	bl	8001cf6 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f000 fb90 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 80088ae:	e003      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
      break;
 80088b4:	e000      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80088b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	40010000 	.word	0x40010000
 80088d8:	40000400 	.word	0x40000400
 80088dc:	40000800 	.word	0x40000800
 80088e0:	40000c00 	.word	0x40000c00
 80088e4:	40014000 	.word	0x40014000
 80088e8:	080116e0 	.word	0x080116e0

080088ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	429a      	cmp	r2, r3
 8008966:	d107      	bne.n	8008978 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2201      	movs	r2, #1
 800896c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008976:	e02a      	b.n	80089ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	429a      	cmp	r2, r3
 8008980:	d107      	bne.n	8008992 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2202      	movs	r2, #2
 8008986:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008990:	e01d      	b.n	80089ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	429a      	cmp	r2, r3
 800899a:	d107      	bne.n	80089ac <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2204      	movs	r2, #4
 80089a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089aa:	e010      	b.n	80089ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d107      	bne.n	80089c6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2208      	movs	r2, #8
 80089ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089c4:	e003      	b.n	80089ce <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7ff ffb4 	bl	800893c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	771a      	strb	r2, [r3, #28]
}
 80089da:	bf00      	nop
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a34      	ldr	r2, [pc, #208]	; (8008ac8 <TIM_Base_SetConfig+0xe4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00f      	beq.n	8008a1c <TIM_Base_SetConfig+0x38>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a02:	d00b      	beq.n	8008a1c <TIM_Base_SetConfig+0x38>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a31      	ldr	r2, [pc, #196]	; (8008acc <TIM_Base_SetConfig+0xe8>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d007      	beq.n	8008a1c <TIM_Base_SetConfig+0x38>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a30      	ldr	r2, [pc, #192]	; (8008ad0 <TIM_Base_SetConfig+0xec>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d003      	beq.n	8008a1c <TIM_Base_SetConfig+0x38>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a2f      	ldr	r2, [pc, #188]	; (8008ad4 <TIM_Base_SetConfig+0xf0>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d108      	bne.n	8008a2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a25      	ldr	r2, [pc, #148]	; (8008ac8 <TIM_Base_SetConfig+0xe4>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d01b      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a3c:	d017      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a22      	ldr	r2, [pc, #136]	; (8008acc <TIM_Base_SetConfig+0xe8>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d013      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a21      	ldr	r2, [pc, #132]	; (8008ad0 <TIM_Base_SetConfig+0xec>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00f      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a20      	ldr	r2, [pc, #128]	; (8008ad4 <TIM_Base_SetConfig+0xf0>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d00b      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a1f      	ldr	r2, [pc, #124]	; (8008ad8 <TIM_Base_SetConfig+0xf4>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d007      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <TIM_Base_SetConfig+0xf8>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d003      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a1d      	ldr	r2, [pc, #116]	; (8008ae0 <TIM_Base_SetConfig+0xfc>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d108      	bne.n	8008a80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a08      	ldr	r2, [pc, #32]	; (8008ac8 <TIM_Base_SetConfig+0xe4>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d103      	bne.n	8008ab4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	691a      	ldr	r2, [r3, #16]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	615a      	str	r2, [r3, #20]
}
 8008aba:	bf00      	nop
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	40010000 	.word	0x40010000
 8008acc:	40000400 	.word	0x40000400
 8008ad0:	40000800 	.word	0x40000800
 8008ad4:	40000c00 	.word	0x40000c00
 8008ad8:	40014000 	.word	0x40014000
 8008adc:	40014400 	.word	0x40014400
 8008ae0:	40014800 	.word	0x40014800

08008ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	f023 0201 	bic.w	r2, r3, #1
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 0303 	bic.w	r3, r3, #3
 8008b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f023 0302 	bic.w	r3, r3, #2
 8008b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a30      	ldr	r2, [pc, #192]	; (8008bfc <TIM_OC1_SetConfig+0x118>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d119      	bne.n	8008b74 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d008      	beq.n	8008b5a <TIM_OC1_SetConfig+0x76>
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	2b08      	cmp	r3, #8
 8008b4e:	d004      	beq.n	8008b5a <TIM_OC1_SetConfig+0x76>
 8008b50:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 8008b54:	482a      	ldr	r0, [pc, #168]	; (8008c00 <TIM_OC1_SetConfig+0x11c>)
 8008b56:	f7f9 f8ce 	bl	8001cf6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f023 0308 	bic.w	r3, r3, #8
 8008b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f023 0304 	bic.w	r3, r3, #4
 8008b72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a21      	ldr	r2, [pc, #132]	; (8008bfc <TIM_OC1_SetConfig+0x118>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d12d      	bne.n	8008bd8 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b84:	d008      	beq.n	8008b98 <TIM_OC1_SetConfig+0xb4>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <TIM_OC1_SetConfig+0xb4>
 8008b8e:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8008b92:	481b      	ldr	r0, [pc, #108]	; (8008c00 <TIM_OC1_SetConfig+0x11c>)
 8008b94:	f7f9 f8af 	bl	8001cf6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ba0:	d008      	beq.n	8008bb4 <TIM_OC1_SetConfig+0xd0>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d004      	beq.n	8008bb4 <TIM_OC1_SetConfig+0xd0>
 8008baa:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 8008bae:	4814      	ldr	r0, [pc, #80]	; (8008c00 <TIM_OC1_SetConfig+0x11c>)
 8008bb0:	f7f9 f8a1 	bl	8001cf6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	621a      	str	r2, [r3, #32]
}
 8008bf2:	bf00      	nop
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	080116e0 	.word	0x080116e0

08008c04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	f023 0210 	bic.w	r2, r3, #16
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f023 0320 	bic.w	r3, r3, #32
 8008c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	011b      	lsls	r3, r3, #4
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a31      	ldr	r2, [pc, #196]	; (8008d24 <TIM_OC2_SetConfig+0x120>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d11a      	bne.n	8008c9a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d008      	beq.n	8008c7e <TIM_OC2_SetConfig+0x7a>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d004      	beq.n	8008c7e <TIM_OC2_SetConfig+0x7a>
 8008c74:	f641 3112 	movw	r1, #6930	; 0x1b12
 8008c78:	482b      	ldr	r0, [pc, #172]	; (8008d28 <TIM_OC2_SetConfig+0x124>)
 8008c7a:	f7f9 f83c 	bl	8001cf6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c98:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a21      	ldr	r2, [pc, #132]	; (8008d24 <TIM_OC2_SetConfig+0x120>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d12f      	bne.n	8008d02 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008caa:	d008      	beq.n	8008cbe <TIM_OC2_SetConfig+0xba>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <TIM_OC2_SetConfig+0xba>
 8008cb4:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8008cb8:	481b      	ldr	r0, [pc, #108]	; (8008d28 <TIM_OC2_SetConfig+0x124>)
 8008cba:	f7f9 f81c 	bl	8001cf6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc6:	d008      	beq.n	8008cda <TIM_OC2_SetConfig+0xd6>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d004      	beq.n	8008cda <TIM_OC2_SetConfig+0xd6>
 8008cd0:	f641 3121 	movw	r1, #6945	; 0x1b21
 8008cd4:	4814      	ldr	r0, [pc, #80]	; (8008d28 <TIM_OC2_SetConfig+0x124>)
 8008cd6:	f7f9 f80e 	bl	8001cf6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	621a      	str	r2, [r3, #32]
}
 8008d1c:	bf00      	nop
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	40010000 	.word	0x40010000
 8008d28:	080116e0 	.word	0x080116e0

08008d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 0303 	bic.w	r3, r3, #3
 8008d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a31      	ldr	r2, [pc, #196]	; (8008e4c <TIM_OC3_SetConfig+0x120>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d11a      	bne.n	8008dc0 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d008      	beq.n	8008da4 <TIM_OC3_SetConfig+0x78>
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d004      	beq.n	8008da4 <TIM_OC3_SetConfig+0x78>
 8008d9a:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8008d9e:	482c      	ldr	r0, [pc, #176]	; (8008e50 <TIM_OC3_SetConfig+0x124>)
 8008da0:	f7f8 ffa9 	bl	8001cf6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a22      	ldr	r2, [pc, #136]	; (8008e4c <TIM_OC3_SetConfig+0x120>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d12f      	bne.n	8008e28 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dd0:	d008      	beq.n	8008de4 <TIM_OC3_SetConfig+0xb8>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d004      	beq.n	8008de4 <TIM_OC3_SetConfig+0xb8>
 8008dda:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8008dde:	481c      	ldr	r0, [pc, #112]	; (8008e50 <TIM_OC3_SetConfig+0x124>)
 8008de0:	f7f8 ff89 	bl	8001cf6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dec:	d008      	beq.n	8008e00 <TIM_OC3_SetConfig+0xd4>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <TIM_OC3_SetConfig+0xd4>
 8008df6:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8008dfa:	4815      	ldr	r0, [pc, #84]	; (8008e50 <TIM_OC3_SetConfig+0x124>)
 8008dfc:	f7f8 ff7b 	bl	8001cf6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	621a      	str	r2, [r3, #32]
}
 8008e42:	bf00      	nop
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	40010000 	.word	0x40010000
 8008e50:	080116e0 	.word	0x080116e0

08008e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	031b      	lsls	r3, r3, #12
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a16      	ldr	r2, [pc, #88]	; (8008f08 <TIM_OC4_SetConfig+0xb4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d117      	bne.n	8008ee4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ebc:	d008      	beq.n	8008ed0 <TIM_OC4_SetConfig+0x7c>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d004      	beq.n	8008ed0 <TIM_OC4_SetConfig+0x7c>
 8008ec6:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8008eca:	4810      	ldr	r0, [pc, #64]	; (8008f0c <TIM_OC4_SetConfig+0xb8>)
 8008ecc:	f7f8 ff13 	bl	8001cf6 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	019b      	lsls	r3, r3, #6
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	621a      	str	r2, [r3, #32]
}
 8008efe:	bf00      	nop
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	40010000 	.word	0x40010000
 8008f0c:	080116e0 	.word	0x080116e0

08008f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f023 0201 	bic.w	r2, r3, #1
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f023 030a 	bic.w	r3, r3, #10
 8008f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	621a      	str	r2, [r3, #32]
}
 8008f62:	bf00      	nop
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b087      	sub	sp, #28
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	f023 0210 	bic.w	r2, r3, #16
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	031b      	lsls	r3, r3, #12
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008faa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	621a      	str	r2, [r3, #32]
}
 8008fc2:	bf00      	nop
 8008fc4:	371c      	adds	r7, #28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	f043 0307 	orr.w	r3, r3, #7
 8008ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	609a      	str	r2, [r3, #8]
}
 8008ff8:	bf00      	nop
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800901e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	021a      	lsls	r2, r3, #8
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	431a      	orrs	r2, r3
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	4313      	orrs	r3, r2
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	4313      	orrs	r3, r2
 8009030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	609a      	str	r2, [r3, #8]
}
 8009038:	bf00      	nop
 800903a:	371c      	adds	r7, #28
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4a2a      	ldr	r2, [pc, #168]	; (80090fc <TIM_CCxChannelCmd+0xb8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d020      	beq.n	800909a <TIM_CCxChannelCmd+0x56>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800905e:	d01c      	beq.n	800909a <TIM_CCxChannelCmd+0x56>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4a27      	ldr	r2, [pc, #156]	; (8009100 <TIM_CCxChannelCmd+0xbc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d018      	beq.n	800909a <TIM_CCxChannelCmd+0x56>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4a26      	ldr	r2, [pc, #152]	; (8009104 <TIM_CCxChannelCmd+0xc0>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d014      	beq.n	800909a <TIM_CCxChannelCmd+0x56>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4a25      	ldr	r2, [pc, #148]	; (8009108 <TIM_CCxChannelCmd+0xc4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d010      	beq.n	800909a <TIM_CCxChannelCmd+0x56>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4a24      	ldr	r2, [pc, #144]	; (800910c <TIM_CCxChannelCmd+0xc8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d00c      	beq.n	800909a <TIM_CCxChannelCmd+0x56>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4a23      	ldr	r2, [pc, #140]	; (8009110 <TIM_CCxChannelCmd+0xcc>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d008      	beq.n	800909a <TIM_CCxChannelCmd+0x56>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4a22      	ldr	r2, [pc, #136]	; (8009114 <TIM_CCxChannelCmd+0xd0>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d004      	beq.n	800909a <TIM_CCxChannelCmd+0x56>
 8009090:	f641 5194 	movw	r1, #7572	; 0x1d94
 8009094:	4820      	ldr	r0, [pc, #128]	; (8009118 <TIM_CCxChannelCmd+0xd4>)
 8009096:	f7f8 fe2e 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d010      	beq.n	80090c2 <TIM_CCxChannelCmd+0x7e>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d00d      	beq.n	80090c2 <TIM_CCxChannelCmd+0x7e>
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d00a      	beq.n	80090c2 <TIM_CCxChannelCmd+0x7e>
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2b0c      	cmp	r3, #12
 80090b0:	d007      	beq.n	80090c2 <TIM_CCxChannelCmd+0x7e>
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2b3c      	cmp	r3, #60	; 0x3c
 80090b6:	d004      	beq.n	80090c2 <TIM_CCxChannelCmd+0x7e>
 80090b8:	f641 5195 	movw	r1, #7573	; 0x1d95
 80090bc:	4816      	ldr	r0, [pc, #88]	; (8009118 <TIM_CCxChannelCmd+0xd4>)
 80090be:	f7f8 fe1a 	bl	8001cf6 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f003 031f 	and.w	r3, r3, #31
 80090c8:	2201      	movs	r2, #1
 80090ca:	fa02 f303 	lsl.w	r3, r2, r3
 80090ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a1a      	ldr	r2, [r3, #32]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	43db      	mvns	r3, r3
 80090d8:	401a      	ands	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a1a      	ldr	r2, [r3, #32]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f003 031f 	and.w	r3, r3, #31
 80090e8:	6879      	ldr	r1, [r7, #4]
 80090ea:	fa01 f303 	lsl.w	r3, r1, r3
 80090ee:	431a      	orrs	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	621a      	str	r2, [r3, #32]
}
 80090f4:	bf00      	nop
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	40010000 	.word	0x40010000
 8009100:	40000400 	.word	0x40000400
 8009104:	40000800 	.word	0x40000800
 8009108:	40000c00 	.word	0x40000c00
 800910c:	40014000 	.word	0x40014000
 8009110:	40014400 	.word	0x40014400
 8009114:	40014800 	.word	0x40014800
 8009118:	080116e0 	.word	0x080116e0

0800911c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a55      	ldr	r2, [pc, #340]	; (8009280 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d018      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009138:	d013      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a51      	ldr	r2, [pc, #324]	; (8009284 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00e      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a4f      	ldr	r2, [pc, #316]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d009      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a4e      	ldr	r2, [pc, #312]	; (800928c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d004      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009158:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800915c:	484c      	ldr	r0, [pc, #304]	; (8009290 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800915e:	f7f8 fdca 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d020      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b10      	cmp	r3, #16
 8009170:	d01c      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b20      	cmp	r3, #32
 8009178:	d018      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b30      	cmp	r3, #48	; 0x30
 8009180:	d014      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b40      	cmp	r3, #64	; 0x40
 8009188:	d010      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b50      	cmp	r3, #80	; 0x50
 8009190:	d00c      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b60      	cmp	r3, #96	; 0x60
 8009198:	d008      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b70      	cmp	r3, #112	; 0x70
 80091a0:	d004      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80091a2:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80091a6:	483a      	ldr	r0, [pc, #232]	; (8009290 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80091a8:	f7f8 fda5 	bl	8001cf6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	2b80      	cmp	r3, #128	; 0x80
 80091b2:	d008      	beq.n	80091c6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d004      	beq.n	80091c6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80091bc:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80091c0:	4833      	ldr	r0, [pc, #204]	; (8009290 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80091c2:	f7f8 fd98 	bl	8001cf6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e050      	b.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a1b      	ldr	r2, [pc, #108]	; (8009280 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d018      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009220:	d013      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a17      	ldr	r2, [pc, #92]	; (8009284 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00e      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a15      	ldr	r2, [pc, #84]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d009      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a14      	ldr	r2, [pc, #80]	; (800928c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d004      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a13      	ldr	r2, [pc, #76]	; (8009294 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d10c      	bne.n	8009264 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	4313      	orrs	r3, r2
 800925a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	40010000 	.word	0x40010000
 8009284:	40000400 	.word	0x40000400
 8009288:	40000800 	.word	0x40000800
 800928c:	40000c00 	.word	0x40000c00
 8009290:	08011718 	.word	0x08011718
 8009294:	40014000 	.word	0x40014000

08009298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092c0:	b084      	sub	sp, #16
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	f107 001c 	add.w	r0, r7, #28
 80092ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d122      	bne.n	800931e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80092ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009302:	2b01      	cmp	r3, #1
 8009304:	d105      	bne.n	8009312 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 fbee 	bl	800aaf4 <USB_CoreReset>
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]
 800931c:	e01a      	b.n	8009354 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 fbe2 	bl	800aaf4 <USB_CoreReset>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d106      	bne.n	8009348 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	639a      	str	r2, [r3, #56]	; 0x38
 8009346:	e005      	b.n	8009354 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	2b01      	cmp	r3, #1
 8009358:	d10b      	bne.n	8009372 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f043 0206 	orr.w	r2, r3, #6
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f043 0220 	orr.w	r2, r3, #32
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800937e:	b004      	add	sp, #16
 8009380:	4770      	bx	lr
	...

08009384 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4613      	mov	r3, r2
 8009390:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009392:	79fb      	ldrb	r3, [r7, #7]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d165      	bne.n	8009464 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	4a41      	ldr	r2, [pc, #260]	; (80094a0 <USB_SetTurnaroundTime+0x11c>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d906      	bls.n	80093ae <USB_SetTurnaroundTime+0x2a>
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4a40      	ldr	r2, [pc, #256]	; (80094a4 <USB_SetTurnaroundTime+0x120>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d202      	bcs.n	80093ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80093a8:	230f      	movs	r3, #15
 80093aa:	617b      	str	r3, [r7, #20]
 80093ac:	e062      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	4a3c      	ldr	r2, [pc, #240]	; (80094a4 <USB_SetTurnaroundTime+0x120>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d306      	bcc.n	80093c4 <USB_SetTurnaroundTime+0x40>
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	4a3b      	ldr	r2, [pc, #236]	; (80094a8 <USB_SetTurnaroundTime+0x124>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d202      	bcs.n	80093c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80093be:	230e      	movs	r3, #14
 80093c0:	617b      	str	r3, [r7, #20]
 80093c2:	e057      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	4a38      	ldr	r2, [pc, #224]	; (80094a8 <USB_SetTurnaroundTime+0x124>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d306      	bcc.n	80093da <USB_SetTurnaroundTime+0x56>
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	4a37      	ldr	r2, [pc, #220]	; (80094ac <USB_SetTurnaroundTime+0x128>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d202      	bcs.n	80093da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80093d4:	230d      	movs	r3, #13
 80093d6:	617b      	str	r3, [r7, #20]
 80093d8:	e04c      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	4a33      	ldr	r2, [pc, #204]	; (80094ac <USB_SetTurnaroundTime+0x128>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d306      	bcc.n	80093f0 <USB_SetTurnaroundTime+0x6c>
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	4a32      	ldr	r2, [pc, #200]	; (80094b0 <USB_SetTurnaroundTime+0x12c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d802      	bhi.n	80093f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80093ea:	230c      	movs	r3, #12
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	e041      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	4a2f      	ldr	r2, [pc, #188]	; (80094b0 <USB_SetTurnaroundTime+0x12c>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d906      	bls.n	8009406 <USB_SetTurnaroundTime+0x82>
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	4a2e      	ldr	r2, [pc, #184]	; (80094b4 <USB_SetTurnaroundTime+0x130>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d802      	bhi.n	8009406 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009400:	230b      	movs	r3, #11
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	e036      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	4a2a      	ldr	r2, [pc, #168]	; (80094b4 <USB_SetTurnaroundTime+0x130>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d906      	bls.n	800941c <USB_SetTurnaroundTime+0x98>
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	4a29      	ldr	r2, [pc, #164]	; (80094b8 <USB_SetTurnaroundTime+0x134>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d802      	bhi.n	800941c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009416:	230a      	movs	r3, #10
 8009418:	617b      	str	r3, [r7, #20]
 800941a:	e02b      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4a26      	ldr	r2, [pc, #152]	; (80094b8 <USB_SetTurnaroundTime+0x134>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d906      	bls.n	8009432 <USB_SetTurnaroundTime+0xae>
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	4a25      	ldr	r2, [pc, #148]	; (80094bc <USB_SetTurnaroundTime+0x138>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d202      	bcs.n	8009432 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800942c:	2309      	movs	r3, #9
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	e020      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	4a21      	ldr	r2, [pc, #132]	; (80094bc <USB_SetTurnaroundTime+0x138>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d306      	bcc.n	8009448 <USB_SetTurnaroundTime+0xc4>
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	4a20      	ldr	r2, [pc, #128]	; (80094c0 <USB_SetTurnaroundTime+0x13c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d802      	bhi.n	8009448 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009442:	2308      	movs	r3, #8
 8009444:	617b      	str	r3, [r7, #20]
 8009446:	e015      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	4a1d      	ldr	r2, [pc, #116]	; (80094c0 <USB_SetTurnaroundTime+0x13c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d906      	bls.n	800945e <USB_SetTurnaroundTime+0xda>
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	4a1c      	ldr	r2, [pc, #112]	; (80094c4 <USB_SetTurnaroundTime+0x140>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d202      	bcs.n	800945e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009458:	2307      	movs	r3, #7
 800945a:	617b      	str	r3, [r7, #20]
 800945c:	e00a      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800945e:	2306      	movs	r3, #6
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	e007      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d102      	bne.n	8009470 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800946a:	2309      	movs	r3, #9
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	e001      	b.n	8009474 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009470:	2309      	movs	r3, #9
 8009472:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	029b      	lsls	r3, r3, #10
 8009488:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800948c:	431a      	orrs	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	00d8acbf 	.word	0x00d8acbf
 80094a4:	00e4e1c0 	.word	0x00e4e1c0
 80094a8:	00f42400 	.word	0x00f42400
 80094ac:	01067380 	.word	0x01067380
 80094b0:	011a499f 	.word	0x011a499f
 80094b4:	01312cff 	.word	0x01312cff
 80094b8:	014ca43f 	.word	0x014ca43f
 80094bc:	016e3600 	.word	0x016e3600
 80094c0:	01a6ab1f 	.word	0x01a6ab1f
 80094c4:	01e84800 	.word	0x01e84800

080094c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f043 0201 	orr.w	r2, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f023 0201 	bic.w	r2, r3, #1
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	460b      	mov	r3, r1
 8009516:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009528:	78fb      	ldrb	r3, [r7, #3]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d115      	bne.n	800955a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800953a:	2001      	movs	r0, #1
 800953c:	f7f9 fc2e 	bl	8002d9c <HAL_Delay>
      ms++;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3301      	adds	r3, #1
 8009544:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 fa45 	bl	800a9d6 <USB_GetMode>
 800954c:	4603      	mov	r3, r0
 800954e:	2b01      	cmp	r3, #1
 8009550:	d01e      	beq.n	8009590 <USB_SetCurrentMode+0x84>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b31      	cmp	r3, #49	; 0x31
 8009556:	d9f0      	bls.n	800953a <USB_SetCurrentMode+0x2e>
 8009558:	e01a      	b.n	8009590 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d115      	bne.n	800958c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800956c:	2001      	movs	r0, #1
 800956e:	f7f9 fc15 	bl	8002d9c <HAL_Delay>
      ms++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 fa2c 	bl	800a9d6 <USB_GetMode>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d005      	beq.n	8009590 <USB_SetCurrentMode+0x84>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b31      	cmp	r3, #49	; 0x31
 8009588:	d9f0      	bls.n	800956c <USB_SetCurrentMode+0x60>
 800958a:	e001      	b.n	8009590 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e005      	b.n	800959c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b32      	cmp	r3, #50	; 0x32
 8009594:	d101      	bne.n	800959a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e000      	b.n	800959c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095a4:	b084      	sub	sp, #16
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b086      	sub	sp, #24
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095be:	2300      	movs	r3, #0
 80095c0:	613b      	str	r3, [r7, #16]
 80095c2:	e009      	b.n	80095d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	3340      	adds	r3, #64	; 0x40
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	2200      	movs	r2, #0
 80095d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	3301      	adds	r3, #1
 80095d6:	613b      	str	r3, [r7, #16]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	2b0e      	cmp	r3, #14
 80095dc:	d9f2      	bls.n	80095c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d11c      	bne.n	800961e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095f2:	f043 0302 	orr.w	r3, r3, #2
 80095f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009608:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009614:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	639a      	str	r2, [r3, #56]	; 0x38
 800961c:	e00b      	b.n	8009636 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009622:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800963c:	461a      	mov	r2, r3
 800963e:	2300      	movs	r3, #0
 8009640:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009648:	4619      	mov	r1, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009650:	461a      	mov	r2, r3
 8009652:	680b      	ldr	r3, [r1, #0]
 8009654:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009658:	2b01      	cmp	r3, #1
 800965a:	d10c      	bne.n	8009676 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965e:	2b00      	cmp	r3, #0
 8009660:	d104      	bne.n	800966c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009662:	2100      	movs	r1, #0
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f965 	bl	8009934 <USB_SetDevSpeed>
 800966a:	e008      	b.n	800967e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800966c:	2101      	movs	r1, #1
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f960 	bl	8009934 <USB_SetDevSpeed>
 8009674:	e003      	b.n	800967e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009676:	2103      	movs	r1, #3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f95b 	bl	8009934 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800967e:	2110      	movs	r1, #16
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f8f3 	bl	800986c <USB_FlushTxFifo>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f91f 	bl	80098d4 <USB_FlushRxFifo>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a6:	461a      	mov	r2, r3
 80096a8:	2300      	movs	r3, #0
 80096aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b2:	461a      	mov	r2, r3
 80096b4:	2300      	movs	r3, #0
 80096b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096be:	461a      	mov	r2, r3
 80096c0:	2300      	movs	r3, #0
 80096c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096c4:	2300      	movs	r3, #0
 80096c6:	613b      	str	r3, [r7, #16]
 80096c8:	e043      	b.n	8009752 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096e0:	d118      	bne.n	8009714 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f4:	461a      	mov	r2, r3
 80096f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	e013      	b.n	8009726 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970a:	461a      	mov	r2, r3
 800970c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009710:	6013      	str	r3, [r2, #0]
 8009712:	e008      	b.n	8009726 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009720:	461a      	mov	r2, r3
 8009722:	2300      	movs	r3, #0
 8009724:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009732:	461a      	mov	r2, r3
 8009734:	2300      	movs	r3, #0
 8009736:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009744:	461a      	mov	r2, r3
 8009746:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800974a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	3301      	adds	r3, #1
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	429a      	cmp	r2, r3
 8009758:	d3b7      	bcc.n	80096ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800975a:	2300      	movs	r3, #0
 800975c:	613b      	str	r3, [r7, #16]
 800975e:	e043      	b.n	80097e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009776:	d118      	bne.n	80097aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10a      	bne.n	8009794 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978a:	461a      	mov	r2, r3
 800978c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	e013      	b.n	80097bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a0:	461a      	mov	r2, r3
 80097a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097a6:	6013      	str	r3, [r2, #0]
 80097a8:	e008      	b.n	80097bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	015a      	lsls	r2, r3, #5
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b6:	461a      	mov	r2, r3
 80097b8:	2300      	movs	r3, #0
 80097ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c8:	461a      	mov	r2, r3
 80097ca:	2300      	movs	r3, #0
 80097cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	461a      	mov	r2, r3
 80097dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	3301      	adds	r3, #1
 80097e6:	613b      	str	r3, [r7, #16]
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d3b7      	bcc.n	8009760 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009802:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009810:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	f043 0210 	orr.w	r2, r3, #16
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	699a      	ldr	r2, [r3, #24]
 8009828:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <USB_DevInit+0x2c4>)
 800982a:	4313      	orrs	r3, r2
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009832:	2b00      	cmp	r3, #0
 8009834:	d005      	beq.n	8009842 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	f043 0208 	orr.w	r2, r3, #8
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009844:	2b01      	cmp	r3, #1
 8009846:	d107      	bne.n	8009858 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009850:	f043 0304 	orr.w	r3, r3, #4
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009864:	b004      	add	sp, #16
 8009866:	4770      	bx	lr
 8009868:	803c3800 	.word	0x803c3800

0800986c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3301      	adds	r3, #1
 800987e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4a13      	ldr	r2, [pc, #76]	; (80098d0 <USB_FlushTxFifo+0x64>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d901      	bls.n	800988c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e01b      	b.n	80098c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	daf2      	bge.n	800987a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	019b      	lsls	r3, r3, #6
 800989c:	f043 0220 	orr.w	r2, r3, #32
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3301      	adds	r3, #1
 80098a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4a08      	ldr	r2, [pc, #32]	; (80098d0 <USB_FlushTxFifo+0x64>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d901      	bls.n	80098b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	e006      	b.n	80098c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	f003 0320 	and.w	r3, r3, #32
 80098be:	2b20      	cmp	r3, #32
 80098c0:	d0f0      	beq.n	80098a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	00030d40 	.word	0x00030d40

080098d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	3301      	adds	r3, #1
 80098e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	4a11      	ldr	r2, [pc, #68]	; (8009930 <USB_FlushRxFifo+0x5c>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d901      	bls.n	80098f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e018      	b.n	8009924 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	daf2      	bge.n	80098e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80098fa:	2300      	movs	r3, #0
 80098fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2210      	movs	r2, #16
 8009902:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	3301      	adds	r3, #1
 8009908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4a08      	ldr	r2, [pc, #32]	; (8009930 <USB_FlushRxFifo+0x5c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d901      	bls.n	8009916 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e006      	b.n	8009924 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	f003 0310 	and.w	r3, r3, #16
 800991e:	2b10      	cmp	r3, #16
 8009920:	d0f0      	beq.n	8009904 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	00030d40 	.word	0x00030d40

08009934 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009954:	4313      	orrs	r3, r2
 8009956:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009966:	b480      	push	{r7}
 8009968:	b087      	sub	sp, #28
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f003 0306 	and.w	r3, r3, #6
 800997e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d102      	bne.n	800998c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009986:	2300      	movs	r3, #0
 8009988:	75fb      	strb	r3, [r7, #23]
 800998a:	e00a      	b.n	80099a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b02      	cmp	r3, #2
 8009990:	d002      	beq.n	8009998 <USB_GetDevSpeed+0x32>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b06      	cmp	r3, #6
 8009996:	d102      	bne.n	800999e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009998:	2302      	movs	r3, #2
 800999a:	75fb      	strb	r3, [r7, #23]
 800999c:	e001      	b.n	80099a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800999e:	230f      	movs	r3, #15
 80099a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	371c      	adds	r7, #28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d13a      	bne.n	8009a42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d2:	69da      	ldr	r2, [r3, #28]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	f003 030f 	and.w	r3, r3, #15
 80099dc:	2101      	movs	r1, #1
 80099de:	fa01 f303 	lsl.w	r3, r1, r3
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	68f9      	ldr	r1, [r7, #12]
 80099e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099ea:	4313      	orrs	r3, r2
 80099ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d155      	bne.n	8009ab0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	791b      	ldrb	r3, [r3, #4]
 8009a1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	059b      	lsls	r3, r3, #22
 8009a26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	0151      	lsls	r1, r2, #5
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	440a      	add	r2, r1
 8009a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	e036      	b.n	8009ab0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a48:	69da      	ldr	r2, [r3, #28]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	f003 030f 	and.w	r3, r3, #15
 8009a52:	2101      	movs	r1, #1
 8009a54:	fa01 f303 	lsl.w	r3, r1, r3
 8009a58:	041b      	lsls	r3, r3, #16
 8009a5a:	68f9      	ldr	r1, [r7, #12]
 8009a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a60:	4313      	orrs	r3, r2
 8009a62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d11a      	bne.n	8009ab0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	791b      	ldrb	r3, [r3, #4]
 8009a94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a96:	430b      	orrs	r3, r1
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	0151      	lsls	r1, r2, #5
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	440a      	add	r2, r1
 8009aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
	...

08009ac0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	785b      	ldrb	r3, [r3, #1]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d161      	bne.n	8009ba0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009af2:	d11f      	bne.n	8009b34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	0151      	lsls	r1, r2, #5
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	440a      	add	r2, r1
 8009b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	0151      	lsls	r1, r2, #5
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	440a      	add	r2, r1
 8009b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	f003 030f 	and.w	r3, r3, #15
 8009b44:	2101      	movs	r1, #1
 8009b46:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	43db      	mvns	r3, r3
 8009b4e:	68f9      	ldr	r1, [r7, #12]
 8009b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b54:	4013      	ands	r3, r2
 8009b56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5e:	69da      	ldr	r2, [r3, #28]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	f003 030f 	and.w	r3, r3, #15
 8009b68:	2101      	movs	r1, #1
 8009b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	43db      	mvns	r3, r3
 8009b72:	68f9      	ldr	r1, [r7, #12]
 8009b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b78:	4013      	ands	r3, r2
 8009b7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	0159      	lsls	r1, r3, #5
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	440b      	add	r3, r1
 8009b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b96:	4619      	mov	r1, r3
 8009b98:	4b35      	ldr	r3, [pc, #212]	; (8009c70 <USB_DeactivateEndpoint+0x1b0>)
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	600b      	str	r3, [r1, #0]
 8009b9e:	e060      	b.n	8009c62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bb6:	d11f      	bne.n	8009bf8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	0151      	lsls	r1, r2, #5
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	440a      	add	r2, r1
 8009bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	f003 030f 	and.w	r3, r3, #15
 8009c08:	2101      	movs	r1, #1
 8009c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c0e:	041b      	lsls	r3, r3, #16
 8009c10:	43db      	mvns	r3, r3
 8009c12:	68f9      	ldr	r1, [r7, #12]
 8009c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c18:	4013      	ands	r3, r2
 8009c1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c22:	69da      	ldr	r2, [r3, #28]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	f003 030f 	and.w	r3, r3, #15
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c32:	041b      	lsls	r3, r3, #16
 8009c34:	43db      	mvns	r3, r3
 8009c36:	68f9      	ldr	r1, [r7, #12]
 8009c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	0159      	lsls	r1, r3, #5
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	440b      	add	r3, r1
 8009c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <USB_DeactivateEndpoint+0x1b4>)
 8009c5e:	4013      	ands	r3, r2
 8009c60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	ec337800 	.word	0xec337800
 8009c74:	eff37800 	.word	0xeff37800

08009c78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	; 0x28
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	785b      	ldrb	r3, [r3, #1]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	f040 815c 	bne.w	8009f52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d132      	bne.n	8009d08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	0151      	lsls	r1, r2, #5
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	440a      	add	r2, r1
 8009cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	69ba      	ldr	r2, [r7, #24]
 8009cd6:	0151      	lsls	r1, r2, #5
 8009cd8:	69fa      	ldr	r2, [r7, #28]
 8009cda:	440a      	add	r2, r1
 8009cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ce4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	69ba      	ldr	r2, [r7, #24]
 8009cf6:	0151      	lsls	r1, r2, #5
 8009cf8:	69fa      	ldr	r2, [r7, #28]
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d00:	0cdb      	lsrs	r3, r3, #19
 8009d02:	04db      	lsls	r3, r3, #19
 8009d04:	6113      	str	r3, [r2, #16]
 8009d06:	e074      	b.n	8009df2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	69fa      	ldr	r2, [r7, #28]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d22:	0cdb      	lsrs	r3, r3, #19
 8009d24:	04db      	lsls	r3, r3, #19
 8009d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	0151      	lsls	r1, r2, #5
 8009d3a:	69fa      	ldr	r2, [r7, #28]
 8009d3c:	440a      	add	r2, r1
 8009d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d58:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6999      	ldr	r1, [r3, #24]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	440b      	add	r3, r1
 8009d64:	1e59      	subs	r1, r3, #1
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d6e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009d70:	4b9d      	ldr	r3, [pc, #628]	; (8009fe8 <USB_EPStartXfer+0x370>)
 8009d72:	400b      	ands	r3, r1
 8009d74:	69b9      	ldr	r1, [r7, #24]
 8009d76:	0148      	lsls	r0, r1, #5
 8009d78:	69f9      	ldr	r1, [r7, #28]
 8009d7a:	4401      	add	r1, r0
 8009d7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d80:	4313      	orrs	r3, r2
 8009d82:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d90:	691a      	ldr	r2, [r3, #16]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d9a:	69b9      	ldr	r1, [r7, #24]
 8009d9c:	0148      	lsls	r0, r1, #5
 8009d9e:	69f9      	ldr	r1, [r7, #28]
 8009da0:	4401      	add	r1, r0
 8009da2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009da6:	4313      	orrs	r3, r2
 8009da8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	791b      	ldrb	r3, [r3, #4]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d11f      	bne.n	8009df2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	69ba      	ldr	r2, [r7, #24]
 8009dc2:	0151      	lsls	r1, r2, #5
 8009dc4:	69fa      	ldr	r2, [r7, #28]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dcc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009dd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	69ba      	ldr	r2, [r7, #24]
 8009de2:	0151      	lsls	r1, r2, #5
 8009de4:	69fa      	ldr	r2, [r7, #28]
 8009de6:	440a      	add	r2, r1
 8009de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009df0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d14b      	bne.n	8009e90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d009      	beq.n	8009e14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	791b      	ldrb	r3, [r3, #4]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d128      	bne.n	8009e6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d110      	bne.n	8009e4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	0151      	lsls	r1, r2, #5
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	440a      	add	r2, r1
 8009e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e4a:	6013      	str	r3, [r2, #0]
 8009e4c:	e00f      	b.n	8009e6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	0151      	lsls	r1, r2, #5
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	440a      	add	r2, r1
 8009e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	0151      	lsls	r1, r2, #5
 8009e80:	69fa      	ldr	r2, [r7, #28]
 8009e82:	440a      	add	r2, r1
 8009e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e8c:	6013      	str	r3, [r2, #0]
 8009e8e:	e133      	b.n	800a0f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	0151      	lsls	r1, r2, #5
 8009ea2:	69fa      	ldr	r2, [r7, #28]
 8009ea4:	440a      	add	r2, r1
 8009ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009eae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	791b      	ldrb	r3, [r3, #4]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d015      	beq.n	8009ee4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 811b 	beq.w	800a0f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	f003 030f 	and.w	r3, r3, #15
 8009ed2:	2101      	movs	r1, #1
 8009ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed8:	69f9      	ldr	r1, [r7, #28]
 8009eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	634b      	str	r3, [r1, #52]	; 0x34
 8009ee2:	e109      	b.n	800a0f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d110      	bne.n	8009f16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	69ba      	ldr	r2, [r7, #24]
 8009f04:	0151      	lsls	r1, r2, #5
 8009f06:	69fa      	ldr	r2, [r7, #28]
 8009f08:	440a      	add	r2, r1
 8009f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	e00f      	b.n	8009f36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	0151      	lsls	r1, r2, #5
 8009f28:	69fa      	ldr	r2, [r7, #28]
 8009f2a:	440a      	add	r2, r1
 8009f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	6919      	ldr	r1, [r3, #16]
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	781a      	ldrb	r2, [r3, #0]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	b298      	uxth	r0, r3
 8009f44:	79fb      	ldrb	r3, [r7, #7]
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	4603      	mov	r3, r0
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 fade 	bl	800a50c <USB_WritePacket>
 8009f50:	e0d2      	b.n	800a0f8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	0151      	lsls	r1, r2, #5
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	440a      	add	r2, r1
 8009f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f6c:	0cdb      	lsrs	r3, r3, #19
 8009f6e:	04db      	lsls	r3, r3, #19
 8009f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	0151      	lsls	r1, r2, #5
 8009f84:	69fa      	ldr	r2, [r7, #28]
 8009f86:	440a      	add	r2, r1
 8009f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d126      	bne.n	8009fec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fb4:	69b9      	ldr	r1, [r7, #24]
 8009fb6:	0148      	lsls	r0, r1, #5
 8009fb8:	69f9      	ldr	r1, [r7, #28]
 8009fba:	4401      	add	r1, r0
 8009fbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	0151      	lsls	r1, r2, #5
 8009fd6:	69fa      	ldr	r2, [r7, #28]
 8009fd8:	440a      	add	r2, r1
 8009fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fe2:	6113      	str	r3, [r2, #16]
 8009fe4:	e03a      	b.n	800a05c <USB_EPStartXfer+0x3e4>
 8009fe6:	bf00      	nop
 8009fe8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	699a      	ldr	r2, [r3, #24]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	1e5a      	subs	r2, r3, #1
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a000:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	8afa      	ldrh	r2, [r7, #22]
 800a008:	fb03 f202 	mul.w	r2, r3, r2
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	4413      	add	r3, r2
 800a018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	8afb      	ldrh	r3, [r7, #22]
 800a020:	04d9      	lsls	r1, r3, #19
 800a022:	4b38      	ldr	r3, [pc, #224]	; (800a104 <USB_EPStartXfer+0x48c>)
 800a024:	400b      	ands	r3, r1
 800a026:	69b9      	ldr	r1, [r7, #24]
 800a028:	0148      	lsls	r0, r1, #5
 800a02a:	69f9      	ldr	r1, [r7, #28]
 800a02c:	4401      	add	r1, r0
 800a02e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a032:	4313      	orrs	r3, r2
 800a034:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	015a      	lsls	r2, r3, #5
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	4413      	add	r3, r2
 800a03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a042:	691a      	ldr	r2, [r3, #16]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a04c:	69b9      	ldr	r1, [r7, #24]
 800a04e:	0148      	lsls	r0, r1, #5
 800a050:	69f9      	ldr	r1, [r7, #28]
 800a052:	4401      	add	r1, r0
 800a054:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a058:	4313      	orrs	r3, r2
 800a05a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d10d      	bne.n	800a07e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d009      	beq.n	800a07e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6919      	ldr	r1, [r3, #16]
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	4413      	add	r3, r2
 800a076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a07a:	460a      	mov	r2, r1
 800a07c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	791b      	ldrb	r3, [r3, #4]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d128      	bne.n	800a0d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a092:	2b00      	cmp	r3, #0
 800a094:	d110      	bne.n	800a0b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	0151      	lsls	r1, r2, #5
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	440a      	add	r2, r1
 800a0ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0b4:	6013      	str	r3, [r2, #0]
 800a0b6:	e00f      	b.n	800a0d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	0151      	lsls	r1, r2, #5
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	440a      	add	r2, r1
 800a0ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	69ba      	ldr	r2, [r7, #24]
 800a0e8:	0151      	lsls	r1, r2, #5
 800a0ea:	69fa      	ldr	r2, [r7, #28]
 800a0ec:	440a      	add	r2, r1
 800a0ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3720      	adds	r7, #32
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	1ff80000 	.word	0x1ff80000

0800a108 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	4613      	mov	r3, r2
 800a114:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	785b      	ldrb	r3, [r3, #1]
 800a124:	2b01      	cmp	r3, #1
 800a126:	f040 80ce 	bne.w	800a2c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d132      	bne.n	800a198 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	0151      	lsls	r1, r2, #5
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	440a      	add	r2, r1
 800a148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a150:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a154:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	0151      	lsls	r1, r2, #5
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	440a      	add	r2, r1
 800a16c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	0151      	lsls	r1, r2, #5
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	440a      	add	r2, r1
 800a18c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a190:	0cdb      	lsrs	r3, r3, #19
 800a192:	04db      	lsls	r3, r3, #19
 800a194:	6113      	str	r3, [r2, #16]
 800a196:	e04e      	b.n	800a236 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	0151      	lsls	r1, r2, #5
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	440a      	add	r2, r1
 800a1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1b2:	0cdb      	lsrs	r3, r3, #19
 800a1b4:	04db      	lsls	r3, r3, #19
 800a1b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	0151      	lsls	r1, r2, #5
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	440a      	add	r2, r1
 800a1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	699a      	ldr	r2, [r3, #24]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d903      	bls.n	800a1f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	0151      	lsls	r1, r2, #5
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	440a      	add	r2, r1
 800a206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a20a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a20e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	015a      	lsls	r2, r3, #5
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a21c:	691a      	ldr	r2, [r3, #16]
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a226:	6939      	ldr	r1, [r7, #16]
 800a228:	0148      	lsls	r0, r1, #5
 800a22a:	6979      	ldr	r1, [r7, #20]
 800a22c:	4401      	add	r1, r0
 800a22e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a232:	4313      	orrs	r3, r2
 800a234:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a236:	79fb      	ldrb	r3, [r7, #7]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d11e      	bne.n	800a27a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d009      	beq.n	800a258 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a250:	461a      	mov	r2, r3
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	0151      	lsls	r1, r2, #5
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	440a      	add	r2, r1
 800a26e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a272:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	e097      	b.n	800a3aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	015a      	lsls	r2, r3, #5
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	4413      	add	r3, r2
 800a282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	0151      	lsls	r1, r2, #5
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	440a      	add	r2, r1
 800a290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a294:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a298:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f000 8083 	beq.w	800a3aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	f003 030f 	and.w	r3, r3, #15
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ba:	6979      	ldr	r1, [r7, #20]
 800a2bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	634b      	str	r3, [r1, #52]	; 0x34
 800a2c4:	e071      	b.n	800a3aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e0:	0cdb      	lsrs	r3, r3, #19
 800a2e2:	04db      	lsls	r3, r3, #19
 800a2e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	0151      	lsls	r1, r2, #5
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	440a      	add	r2, r1
 800a2fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a300:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a304:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a308:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	68da      	ldr	r2, [r3, #12]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	0151      	lsls	r1, r2, #5
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	440a      	add	r2, r1
 800a338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a33c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	015a      	lsls	r2, r3, #5
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	4413      	add	r3, r2
 800a34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a34e:	691a      	ldr	r2, [r3, #16]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a358:	6939      	ldr	r1, [r7, #16]
 800a35a:	0148      	lsls	r0, r1, #5
 800a35c:	6979      	ldr	r1, [r7, #20]
 800a35e:	4401      	add	r1, r0
 800a360:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a364:	4313      	orrs	r3, r2
 800a366:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a368:	79fb      	ldrb	r3, [r7, #7]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d10d      	bne.n	800a38a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d009      	beq.n	800a38a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	6919      	ldr	r1, [r3, #16]
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	4413      	add	r3, r2
 800a382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a386:	460a      	mov	r2, r1
 800a388:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	4413      	add	r3, r2
 800a392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	0151      	lsls	r1, r2, #5
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	440a      	add	r2, r1
 800a3a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	371c      	adds	r7, #28
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	785b      	ldrb	r3, [r3, #1]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d14a      	bne.n	800a46c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	015a      	lsls	r2, r3, #5
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	4413      	add	r3, r2
 800a3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3ee:	f040 8086 	bne.w	800a4fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	7812      	ldrb	r2, [r2, #0]
 800a406:	0151      	lsls	r1, r2, #5
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	440a      	add	r2, r1
 800a40c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a410:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a414:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	015a      	lsls	r2, r3, #5
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	4413      	add	r3, r2
 800a420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	7812      	ldrb	r2, [r2, #0]
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a438:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	3301      	adds	r3, #1
 800a43e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f242 7210 	movw	r2, #10000	; 0x2710
 800a446:	4293      	cmp	r3, r2
 800a448:	d902      	bls.n	800a450 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	75fb      	strb	r3, [r7, #23]
          break;
 800a44e:	e056      	b.n	800a4fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a468:	d0e7      	beq.n	800a43a <USB_EPStopXfer+0x82>
 800a46a:	e048      	b.n	800a4fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	4413      	add	r3, r2
 800a476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a484:	d13b      	bne.n	800a4fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	7812      	ldrb	r2, [r2, #0]
 800a49a:	0151      	lsls	r1, r2, #5
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	440a      	add	r2, r1
 800a4a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	7812      	ldrb	r2, [r2, #0]
 800a4be:	0151      	lsls	r1, r2, #5
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	440a      	add	r2, r1
 800a4c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d902      	bls.n	800a4e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4e2:	e00c      	b.n	800a4fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4fc:	d0e7      	beq.n	800a4ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a500:	4618      	mov	r0, r3
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b089      	sub	sp, #36	; 0x24
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	4611      	mov	r1, r2
 800a518:	461a      	mov	r2, r3
 800a51a:	460b      	mov	r3, r1
 800a51c:	71fb      	strb	r3, [r7, #7]
 800a51e:	4613      	mov	r3, r2
 800a520:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a52a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d123      	bne.n	800a57a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a532:	88bb      	ldrh	r3, [r7, #4]
 800a534:	3303      	adds	r3, #3
 800a536:	089b      	lsrs	r3, r3, #2
 800a538:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a53a:	2300      	movs	r3, #0
 800a53c:	61bb      	str	r3, [r7, #24]
 800a53e:	e018      	b.n	800a572 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	031a      	lsls	r2, r3, #12
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	4413      	add	r3, r2
 800a548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a54c:	461a      	mov	r2, r3
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	3301      	adds	r3, #1
 800a558:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	3301      	adds	r3, #1
 800a55e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	3301      	adds	r3, #1
 800a564:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	3301      	adds	r3, #1
 800a56a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	3301      	adds	r3, #1
 800a570:	61bb      	str	r3, [r7, #24]
 800a572:	69ba      	ldr	r2, [r7, #24]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	429a      	cmp	r2, r3
 800a578:	d3e2      	bcc.n	800a540 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3724      	adds	r7, #36	; 0x24
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a588:	b480      	push	{r7}
 800a58a:	b08b      	sub	sp, #44	; 0x2c
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	4613      	mov	r3, r2
 800a594:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a59e:	88fb      	ldrh	r3, [r7, #6]
 800a5a0:	089b      	lsrs	r3, r3, #2
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a5a6:	88fb      	ldrh	r3, [r7, #6]
 800a5a8:	f003 0303 	and.w	r3, r3, #3
 800a5ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	623b      	str	r3, [r7, #32]
 800a5b2:	e014      	b.n	800a5de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	623b      	str	r3, [r7, #32]
 800a5de:	6a3a      	ldr	r2, [r7, #32]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d3e6      	bcc.n	800a5b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a5e6:	8bfb      	ldrh	r3, [r7, #30]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d01e      	beq.n	800a62a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f107 0310 	add.w	r3, r7, #16
 800a5fc:	6812      	ldr	r2, [r2, #0]
 800a5fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	b2db      	uxtb	r3, r3
 800a606:	00db      	lsls	r3, r3, #3
 800a608:	fa22 f303 	lsr.w	r3, r2, r3
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	701a      	strb	r2, [r3, #0]
      i++;
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	3301      	adds	r3, #1
 800a616:	623b      	str	r3, [r7, #32]
      pDest++;
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	3301      	adds	r3, #1
 800a61c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a61e:	8bfb      	ldrh	r3, [r7, #30]
 800a620:	3b01      	subs	r3, #1
 800a622:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a624:	8bfb      	ldrh	r3, [r7, #30]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1ea      	bne.n	800a600 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	372c      	adds	r7, #44	; 0x2c
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	785b      	ldrb	r3, [r3, #1]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d12c      	bne.n	800a6ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	015a      	lsls	r2, r3, #5
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	db12      	blt.n	800a68c <USB_EPSetStall+0x54>
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00f      	beq.n	800a68c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4413      	add	r3, r2
 800a674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	0151      	lsls	r1, r2, #5
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	440a      	add	r2, r1
 800a682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a686:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a68a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	0151      	lsls	r1, r2, #5
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	e02b      	b.n	800a706 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	db12      	blt.n	800a6e6 <USB_EPSetStall+0xae>
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00f      	beq.n	800a6e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	0151      	lsls	r1, r2, #5
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	440a      	add	r2, r1
 800a6dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	0151      	lsls	r1, r2, #5
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	440a      	add	r2, r1
 800a6fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a704:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	785b      	ldrb	r3, [r3, #1]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d128      	bne.n	800a782 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	0151      	lsls	r1, r2, #5
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	440a      	add	r2, r1
 800a746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a74a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a74e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	791b      	ldrb	r3, [r3, #4]
 800a754:	2b03      	cmp	r3, #3
 800a756:	d003      	beq.n	800a760 <USB_EPClearStall+0x4c>
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	791b      	ldrb	r3, [r3, #4]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d138      	bne.n	800a7d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4413      	add	r3, r2
 800a768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	0151      	lsls	r1, r2, #5
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	440a      	add	r2, r1
 800a776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a77a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	e027      	b.n	800a7d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	0151      	lsls	r1, r2, #5
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	440a      	add	r2, r1
 800a798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a79c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	791b      	ldrb	r3, [r3, #4]
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d003      	beq.n	800a7b2 <USB_EPClearStall+0x9e>
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	791b      	ldrb	r3, [r3, #4]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d10f      	bne.n	800a7d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	015a      	lsls	r2, r3, #5
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	0151      	lsls	r1, r2, #5
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	440a      	add	r2, r1
 800a7c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a802:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	011b      	lsls	r3, r3, #4
 800a810:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a814:	68f9      	ldr	r1, [r7, #12]
 800a816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a81a:	4313      	orrs	r3, r2
 800a81c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a846:	f023 0303 	bic.w	r3, r3, #3
 800a84a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a85a:	f023 0302 	bic.w	r3, r3, #2
 800a85e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a86e:	b480      	push	{r7}
 800a870:	b085      	sub	sp, #20
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a888:	f023 0303 	bic.w	r3, r3, #3
 800a88c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a89c:	f043 0302 	orr.w	r3, r3, #2
 800a8a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	695b      	ldr	r3, [r3, #20]
 800a8bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8f2:	69db      	ldr	r3, [r3, #28]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	0c1b      	lsrs	r3, r3, #16
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b085      	sub	sp, #20
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	4013      	ands	r3, r2
 800a92c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	b29b      	uxth	r3, r3
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a93e:	b480      	push	{r7}
 800a940:	b085      	sub	sp, #20
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	460b      	mov	r3, r1
 800a948:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a94e:	78fb      	ldrb	r3, [r7, #3]
 800a950:	015a      	lsls	r2, r3, #5
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	4413      	add	r3, r2
 800a956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a964:	695b      	ldr	r3, [r3, #20]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	4013      	ands	r3, r2
 800a96a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a96c:	68bb      	ldr	r3, [r7, #8]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a97a:	b480      	push	{r7}
 800a97c:	b087      	sub	sp, #28
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a99e:	78fb      	ldrb	r3, [r7, #3]
 800a9a0:	f003 030f 	and.w	r3, r3, #15
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9aa:	01db      	lsls	r3, r3, #7
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9b4:	78fb      	ldrb	r3, [r7, #3]
 800a9b6:	015a      	lsls	r2, r3, #5
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b083      	sub	sp, #12
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	f003 0301 	and.w	r3, r3, #1
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b085      	sub	sp, #20
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aa10:	f023 0307 	bic.w	r3, r3, #7
 800aa14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	460b      	mov	r3, r1
 800aa42:	607a      	str	r2, [r7, #4]
 800aa44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	333c      	adds	r3, #60	; 0x3c
 800aa4e:	3304      	adds	r3, #4
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	4a26      	ldr	r2, [pc, #152]	; (800aaf0 <USB_EP0_OutStart+0xb8>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d90a      	bls.n	800aa72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa6c:	d101      	bne.n	800aa72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	e037      	b.n	800aae2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa78:	461a      	mov	r2, r3
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaa0:	f043 0318 	orr.w	r3, r3, #24
 800aaa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aab4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aab8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aaba:	7afb      	ldrb	r3, [r7, #11]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d10f      	bne.n	800aae0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac6:	461a      	mov	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aada:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800aade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	371c      	adds	r7, #28
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	4f54300a 	.word	0x4f54300a

0800aaf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3301      	adds	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4a13      	ldr	r2, [pc, #76]	; (800ab58 <USB_CoreReset+0x64>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d901      	bls.n	800ab12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e01b      	b.n	800ab4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	daf2      	bge.n	800ab00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f043 0201 	orr.w	r2, r3, #1
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4a09      	ldr	r2, [pc, #36]	; (800ab58 <USB_CoreReset+0x64>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d901      	bls.n	800ab3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e006      	b.n	800ab4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d0f0      	beq.n	800ab2a <USB_CoreReset+0x36>

  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	00030d40 	.word	0x00030d40

0800ab5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ab6c:	f005 feda 	bl	8010924 <USBD_static_malloc>
 800ab70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d109      	bne.n	800ab8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	32b0      	adds	r2, #176	; 0xb0
 800ab82:	2100      	movs	r1, #0
 800ab84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ab88:	2302      	movs	r3, #2
 800ab8a:	e0d4      	b.n	800ad36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ab8c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ab90:	2100      	movs	r1, #0
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f005 ff52 	bl	8010a3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	32b0      	adds	r2, #176	; 0xb0
 800aba2:	68f9      	ldr	r1, [r7, #12]
 800aba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	32b0      	adds	r2, #176	; 0xb0
 800abb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	7c1b      	ldrb	r3, [r3, #16]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d138      	bne.n	800ac36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abc4:	4b5e      	ldr	r3, [pc, #376]	; (800ad40 <USBD_CDC_Init+0x1e4>)
 800abc6:	7819      	ldrb	r1, [r3, #0]
 800abc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abcc:	2202      	movs	r2, #2
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f005 fd85 	bl	80106de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abd4:	4b5a      	ldr	r3, [pc, #360]	; (800ad40 <USBD_CDC_Init+0x1e4>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	f003 020f 	and.w	r2, r3, #15
 800abdc:	6879      	ldr	r1, [r7, #4]
 800abde:	4613      	mov	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	440b      	add	r3, r1
 800abe8:	3324      	adds	r3, #36	; 0x24
 800abea:	2201      	movs	r2, #1
 800abec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800abee:	4b55      	ldr	r3, [pc, #340]	; (800ad44 <USBD_CDC_Init+0x1e8>)
 800abf0:	7819      	ldrb	r1, [r3, #0]
 800abf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abf6:	2202      	movs	r2, #2
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f005 fd70 	bl	80106de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800abfe:	4b51      	ldr	r3, [pc, #324]	; (800ad44 <USBD_CDC_Init+0x1e8>)
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	f003 020f 	and.w	r2, r3, #15
 800ac06:	6879      	ldr	r1, [r7, #4]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	440b      	add	r3, r1
 800ac12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac16:	2201      	movs	r2, #1
 800ac18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac1a:	4b4b      	ldr	r3, [pc, #300]	; (800ad48 <USBD_CDC_Init+0x1ec>)
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	f003 020f 	and.w	r2, r3, #15
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	4613      	mov	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	440b      	add	r3, r1
 800ac2e:	3326      	adds	r3, #38	; 0x26
 800ac30:	2210      	movs	r2, #16
 800ac32:	801a      	strh	r2, [r3, #0]
 800ac34:	e035      	b.n	800aca2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac36:	4b42      	ldr	r3, [pc, #264]	; (800ad40 <USBD_CDC_Init+0x1e4>)
 800ac38:	7819      	ldrb	r1, [r3, #0]
 800ac3a:	2340      	movs	r3, #64	; 0x40
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f005 fd4d 	bl	80106de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac44:	4b3e      	ldr	r3, [pc, #248]	; (800ad40 <USBD_CDC_Init+0x1e4>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	f003 020f 	and.w	r2, r3, #15
 800ac4c:	6879      	ldr	r1, [r7, #4]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	440b      	add	r3, r1
 800ac58:	3324      	adds	r3, #36	; 0x24
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac5e:	4b39      	ldr	r3, [pc, #228]	; (800ad44 <USBD_CDC_Init+0x1e8>)
 800ac60:	7819      	ldrb	r1, [r3, #0]
 800ac62:	2340      	movs	r3, #64	; 0x40
 800ac64:	2202      	movs	r2, #2
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f005 fd39 	bl	80106de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac6c:	4b35      	ldr	r3, [pc, #212]	; (800ad44 <USBD_CDC_Init+0x1e8>)
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	f003 020f 	and.w	r2, r3, #15
 800ac74:	6879      	ldr	r1, [r7, #4]
 800ac76:	4613      	mov	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	440b      	add	r3, r1
 800ac80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac84:	2201      	movs	r2, #1
 800ac86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ac88:	4b2f      	ldr	r3, [pc, #188]	; (800ad48 <USBD_CDC_Init+0x1ec>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 020f 	and.w	r2, r3, #15
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	440b      	add	r3, r1
 800ac9c:	3326      	adds	r3, #38	; 0x26
 800ac9e:	2210      	movs	r2, #16
 800aca0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aca2:	4b29      	ldr	r3, [pc, #164]	; (800ad48 <USBD_CDC_Init+0x1ec>)
 800aca4:	7819      	ldrb	r1, [r3, #0]
 800aca6:	2308      	movs	r3, #8
 800aca8:	2203      	movs	r2, #3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f005 fd17 	bl	80106de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800acb0:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <USBD_CDC_Init+0x1ec>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	f003 020f 	and.w	r2, r3, #15
 800acb8:	6879      	ldr	r1, [r7, #4]
 800acba:	4613      	mov	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	440b      	add	r3, r1
 800acc4:	3324      	adds	r3, #36	; 0x24
 800acc6:	2201      	movs	r2, #1
 800acc8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	33b0      	adds	r3, #176	; 0xb0
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d101      	bne.n	800ad04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad00:	2302      	movs	r3, #2
 800ad02:	e018      	b.n	800ad36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	7c1b      	ldrb	r3, [r3, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10a      	bne.n	800ad22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad0c:	4b0d      	ldr	r3, [pc, #52]	; (800ad44 <USBD_CDC_Init+0x1e8>)
 800ad0e:	7819      	ldrb	r1, [r3, #0]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f005 fdce 	bl	80108bc <USBD_LL_PrepareReceive>
 800ad20:	e008      	b.n	800ad34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad22:	4b08      	ldr	r3, [pc, #32]	; (800ad44 <USBD_CDC_Init+0x1e8>)
 800ad24:	7819      	ldrb	r1, [r3, #0]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad2c:	2340      	movs	r3, #64	; 0x40
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f005 fdc4 	bl	80108bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	2000011f 	.word	0x2000011f
 800ad44:	20000120 	.word	0x20000120
 800ad48:	20000121 	.word	0x20000121

0800ad4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	460b      	mov	r3, r1
 800ad56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad58:	4b3a      	ldr	r3, [pc, #232]	; (800ae44 <USBD_CDC_DeInit+0xf8>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f005 fce3 	bl	801072a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad64:	4b37      	ldr	r3, [pc, #220]	; (800ae44 <USBD_CDC_DeInit+0xf8>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f003 020f 	and.w	r2, r3, #15
 800ad6c:	6879      	ldr	r1, [r7, #4]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	440b      	add	r3, r1
 800ad78:	3324      	adds	r3, #36	; 0x24
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ad7e:	4b32      	ldr	r3, [pc, #200]	; (800ae48 <USBD_CDC_DeInit+0xfc>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f005 fcd0 	bl	801072a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ad8a:	4b2f      	ldr	r3, [pc, #188]	; (800ae48 <USBD_CDC_DeInit+0xfc>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	f003 020f 	and.w	r2, r3, #15
 800ad92:	6879      	ldr	r1, [r7, #4]
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ada2:	2200      	movs	r2, #0
 800ada4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ada6:	4b29      	ldr	r3, [pc, #164]	; (800ae4c <USBD_CDC_DeInit+0x100>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f005 fcbc 	bl	801072a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800adb2:	4b26      	ldr	r3, [pc, #152]	; (800ae4c <USBD_CDC_DeInit+0x100>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	f003 020f 	and.w	r2, r3, #15
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	4613      	mov	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	440b      	add	r3, r1
 800adc6:	3324      	adds	r3, #36	; 0x24
 800adc8:	2200      	movs	r2, #0
 800adca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800adcc:	4b1f      	ldr	r3, [pc, #124]	; (800ae4c <USBD_CDC_DeInit+0x100>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	f003 020f 	and.w	r2, r3, #15
 800add4:	6879      	ldr	r1, [r7, #4]
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	440b      	add	r3, r1
 800ade0:	3326      	adds	r3, #38	; 0x26
 800ade2:	2200      	movs	r2, #0
 800ade4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	32b0      	adds	r2, #176	; 0xb0
 800adf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d01f      	beq.n	800ae38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	33b0      	adds	r3, #176	; 0xb0
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4413      	add	r3, r2
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	32b0      	adds	r2, #176	; 0xb0
 800ae16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f005 fd90 	bl	8010940 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	32b0      	adds	r2, #176	; 0xb0
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	2000011f 	.word	0x2000011f
 800ae48:	20000120 	.word	0x20000120
 800ae4c:	20000121 	.word	0x20000121

0800ae50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	32b0      	adds	r2, #176	; 0xb0
 800ae64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e0bf      	b.n	800b000 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d050      	beq.n	800af2e <USBD_CDC_Setup+0xde>
 800ae8c:	2b20      	cmp	r3, #32
 800ae8e:	f040 80af 	bne.w	800aff0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	88db      	ldrh	r3, [r3, #6]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d03a      	beq.n	800af10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	b25b      	sxtb	r3, r3
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	da1b      	bge.n	800aedc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	33b0      	adds	r3, #176	; 0xb0
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aeba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	88d2      	ldrh	r2, [r2, #6]
 800aec0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	88db      	ldrh	r3, [r3, #6]
 800aec6:	2b07      	cmp	r3, #7
 800aec8:	bf28      	it	cs
 800aeca:	2307      	movcs	r3, #7
 800aecc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	89fa      	ldrh	r2, [r7, #14]
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 fd89 	bl	800c9ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aeda:	e090      	b.n	800affe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	785a      	ldrb	r2, [r3, #1]
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	88db      	ldrh	r3, [r3, #6]
 800aeea:	2b3f      	cmp	r3, #63	; 0x3f
 800aeec:	d803      	bhi.n	800aef6 <USBD_CDC_Setup+0xa6>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	88db      	ldrh	r3, [r3, #6]
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	e000      	b.n	800aef8 <USBD_CDC_Setup+0xa8>
 800aef6:	2240      	movs	r2, #64	; 0x40
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aefe:	6939      	ldr	r1, [r7, #16]
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800af06:	461a      	mov	r2, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f001 fd9b 	bl	800ca44 <USBD_CtlPrepareRx>
      break;
 800af0e:	e076      	b.n	800affe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	33b0      	adds	r3, #176	; 0xb0
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	7850      	ldrb	r0, [r2, #1]
 800af26:	2200      	movs	r2, #0
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	4798      	blx	r3
      break;
 800af2c:	e067      	b.n	800affe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	785b      	ldrb	r3, [r3, #1]
 800af32:	2b0b      	cmp	r3, #11
 800af34:	d851      	bhi.n	800afda <USBD_CDC_Setup+0x18a>
 800af36:	a201      	add	r2, pc, #4	; (adr r2, 800af3c <USBD_CDC_Setup+0xec>)
 800af38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3c:	0800af6d 	.word	0x0800af6d
 800af40:	0800afe9 	.word	0x0800afe9
 800af44:	0800afdb 	.word	0x0800afdb
 800af48:	0800afdb 	.word	0x0800afdb
 800af4c:	0800afdb 	.word	0x0800afdb
 800af50:	0800afdb 	.word	0x0800afdb
 800af54:	0800afdb 	.word	0x0800afdb
 800af58:	0800afdb 	.word	0x0800afdb
 800af5c:	0800afdb 	.word	0x0800afdb
 800af60:	0800afdb 	.word	0x0800afdb
 800af64:	0800af97 	.word	0x0800af97
 800af68:	0800afc1 	.word	0x0800afc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b03      	cmp	r3, #3
 800af76:	d107      	bne.n	800af88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af78:	f107 030a 	add.w	r3, r7, #10
 800af7c:	2202      	movs	r2, #2
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 fd33 	bl	800c9ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af86:	e032      	b.n	800afee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 fcbd 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 800af90:	2303      	movs	r3, #3
 800af92:	75fb      	strb	r3, [r7, #23]
          break;
 800af94:	e02b      	b.n	800afee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2b03      	cmp	r3, #3
 800afa0:	d107      	bne.n	800afb2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afa2:	f107 030d 	add.w	r3, r7, #13
 800afa6:	2201      	movs	r2, #1
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f001 fd1e 	bl	800c9ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afb0:	e01d      	b.n	800afee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f001 fca8 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 800afba:	2303      	movs	r3, #3
 800afbc:	75fb      	strb	r3, [r7, #23]
          break;
 800afbe:	e016      	b.n	800afee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d00f      	beq.n	800afec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f001 fc9b 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 800afd4:	2303      	movs	r3, #3
 800afd6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800afd8:	e008      	b.n	800afec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 fc94 	bl	800c90a <USBD_CtlError>
          ret = USBD_FAIL;
 800afe2:	2303      	movs	r3, #3
 800afe4:	75fb      	strb	r3, [r7, #23]
          break;
 800afe6:	e002      	b.n	800afee <USBD_CDC_Setup+0x19e>
          break;
 800afe8:	bf00      	nop
 800afea:	e008      	b.n	800affe <USBD_CDC_Setup+0x1ae>
          break;
 800afec:	bf00      	nop
      }
      break;
 800afee:	e006      	b.n	800affe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f001 fc89 	bl	800c90a <USBD_CtlError>
      ret = USBD_FAIL;
 800aff8:	2303      	movs	r3, #3
 800affa:	75fb      	strb	r3, [r7, #23]
      break;
 800affc:	bf00      	nop
  }

  return (uint8_t)ret;
 800affe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b01a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	32b0      	adds	r2, #176	; 0xb0
 800b026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b02e:	2303      	movs	r3, #3
 800b030:	e065      	b.n	800b0fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	32b0      	adds	r2, #176	; 0xb0
 800b03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b040:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b042:	78fb      	ldrb	r3, [r7, #3]
 800b044:	f003 020f 	and.w	r2, r3, #15
 800b048:	6879      	ldr	r1, [r7, #4]
 800b04a:	4613      	mov	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4413      	add	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	440b      	add	r3, r1
 800b054:	3318      	adds	r3, #24
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d02f      	beq.n	800b0bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b05c:	78fb      	ldrb	r3, [r7, #3]
 800b05e:	f003 020f 	and.w	r2, r3, #15
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	4613      	mov	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	440b      	add	r3, r1
 800b06e:	3318      	adds	r3, #24
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	78fb      	ldrb	r3, [r7, #3]
 800b074:	f003 010f 	and.w	r1, r3, #15
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	460b      	mov	r3, r1
 800b07c:	00db      	lsls	r3, r3, #3
 800b07e:	440b      	add	r3, r1
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4403      	add	r3, r0
 800b084:	3348      	adds	r3, #72	; 0x48
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	fbb2 f1f3 	udiv	r1, r2, r3
 800b08c:	fb01 f303 	mul.w	r3, r1, r3
 800b090:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b092:	2b00      	cmp	r3, #0
 800b094:	d112      	bne.n	800b0bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b096:	78fb      	ldrb	r3, [r7, #3]
 800b098:	f003 020f 	and.w	r2, r3, #15
 800b09c:	6879      	ldr	r1, [r7, #4]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	440b      	add	r3, r1
 800b0a8:	3318      	adds	r3, #24
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0ae:	78f9      	ldrb	r1, [r7, #3]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f005 fbe0 	bl	801087a <USBD_LL_Transmit>
 800b0ba:	e01f      	b.n	800b0fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	33b0      	adds	r3, #176	; 0xb0
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d010      	beq.n	800b0fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	33b0      	adds	r3, #176	; 0xb0
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b0f8:	78fa      	ldrb	r2, [r7, #3]
 800b0fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b084      	sub	sp, #16
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	460b      	mov	r3, r1
 800b110:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	32b0      	adds	r2, #176	; 0xb0
 800b11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b120:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	32b0      	adds	r2, #176	; 0xb0
 800b12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b134:	2303      	movs	r3, #3
 800b136:	e01a      	b.n	800b16e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b138:	78fb      	ldrb	r3, [r7, #3]
 800b13a:	4619      	mov	r1, r3
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f005 fbde 	bl	80108fe <USBD_LL_GetRxDataSize>
 800b142:	4602      	mov	r2, r0
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	33b0      	adds	r3, #176	; 0xb0
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b168:	4611      	mov	r1, r2
 800b16a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	32b0      	adds	r2, #176	; 0xb0
 800b188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b194:	2303      	movs	r3, #3
 800b196:	e025      	b.n	800b1e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	33b0      	adds	r3, #176	; 0xb0
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4413      	add	r3, r2
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01a      	beq.n	800b1e2 <USBD_CDC_EP0_RxReady+0x6c>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b1b2:	2bff      	cmp	r3, #255	; 0xff
 800b1b4:	d015      	beq.n	800b1e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	33b0      	adds	r3, #176	; 0xb0
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b1ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1d6:	b292      	uxth	r2, r2
 800b1d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	22ff      	movs	r2, #255	; 0xff
 800b1de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1f4:	2182      	movs	r1, #130	; 0x82
 800b1f6:	4818      	ldr	r0, [pc, #96]	; (800b258 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1f8:	f000 fd4f 	bl	800bc9a <USBD_GetEpDesc>
 800b1fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1fe:	2101      	movs	r1, #1
 800b200:	4815      	ldr	r0, [pc, #84]	; (800b258 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b202:	f000 fd4a 	bl	800bc9a <USBD_GetEpDesc>
 800b206:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b208:	2181      	movs	r1, #129	; 0x81
 800b20a:	4813      	ldr	r0, [pc, #76]	; (800b258 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b20c:	f000 fd45 	bl	800bc9a <USBD_GetEpDesc>
 800b210:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	2210      	movs	r2, #16
 800b21c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d006      	beq.n	800b232 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	2200      	movs	r2, #0
 800b228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b22c:	711a      	strb	r2, [r3, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d006      	beq.n	800b246 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b240:	711a      	strb	r2, [r3, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2243      	movs	r2, #67	; 0x43
 800b24a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b24c:	4b02      	ldr	r3, [pc, #8]	; (800b258 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	200000dc 	.word	0x200000dc

0800b25c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b264:	2182      	movs	r1, #130	; 0x82
 800b266:	4818      	ldr	r0, [pc, #96]	; (800b2c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b268:	f000 fd17 	bl	800bc9a <USBD_GetEpDesc>
 800b26c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b26e:	2101      	movs	r1, #1
 800b270:	4815      	ldr	r0, [pc, #84]	; (800b2c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b272:	f000 fd12 	bl	800bc9a <USBD_GetEpDesc>
 800b276:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b278:	2181      	movs	r1, #129	; 0x81
 800b27a:	4813      	ldr	r0, [pc, #76]	; (800b2c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b27c:	f000 fd0d 	bl	800bc9a <USBD_GetEpDesc>
 800b280:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2210      	movs	r2, #16
 800b28c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d006      	beq.n	800b2a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	2200      	movs	r2, #0
 800b298:	711a      	strb	r2, [r3, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f042 0202 	orr.w	r2, r2, #2
 800b2a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d006      	beq.n	800b2b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	711a      	strb	r2, [r3, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f042 0202 	orr.w	r2, r2, #2
 800b2b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2243      	movs	r2, #67	; 0x43
 800b2ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2bc:	4b02      	ldr	r3, [pc, #8]	; (800b2c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3718      	adds	r7, #24
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200000dc 	.word	0x200000dc

0800b2cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b086      	sub	sp, #24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2d4:	2182      	movs	r1, #130	; 0x82
 800b2d6:	4818      	ldr	r0, [pc, #96]	; (800b338 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2d8:	f000 fcdf 	bl	800bc9a <USBD_GetEpDesc>
 800b2dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2de:	2101      	movs	r1, #1
 800b2e0:	4815      	ldr	r0, [pc, #84]	; (800b338 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2e2:	f000 fcda 	bl	800bc9a <USBD_GetEpDesc>
 800b2e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2e8:	2181      	movs	r1, #129	; 0x81
 800b2ea:	4813      	ldr	r0, [pc, #76]	; (800b338 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2ec:	f000 fcd5 	bl	800bc9a <USBD_GetEpDesc>
 800b2f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	2210      	movs	r2, #16
 800b2fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	2200      	movs	r2, #0
 800b308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b30c:	711a      	strb	r2, [r3, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d006      	beq.n	800b326 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b320:	711a      	strb	r2, [r3, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2243      	movs	r2, #67	; 0x43
 800b32a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b32c:	4b02      	ldr	r3, [pc, #8]	; (800b338 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3718      	adds	r7, #24
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	200000dc 	.word	0x200000dc

0800b33c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	220a      	movs	r2, #10
 800b348:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b34a:	4b03      	ldr	r3, [pc, #12]	; (800b358 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	20000098 	.word	0x20000098

0800b35c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d101      	bne.n	800b370 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b36c:	2303      	movs	r3, #3
 800b36e:	e009      	b.n	800b384 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	33b0      	adds	r3, #176	; 0xb0
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4413      	add	r3, r2
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	32b0      	adds	r2, #176	; 0xb0
 800b3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3aa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e008      	b.n	800b3c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	371c      	adds	r7, #28
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	32b0      	adds	r2, #176	; 0xb0
 800b3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e004      	b.n	800b402 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
	...

0800b410 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	32b0      	adds	r2, #176	; 0xb0
 800b422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b426:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b428:	2301      	movs	r3, #1
 800b42a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	32b0      	adds	r2, #176	; 0xb0
 800b436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b43e:	2303      	movs	r3, #3
 800b440:	e025      	b.n	800b48e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d11f      	bne.n	800b48c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2201      	movs	r2, #1
 800b450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b454:	4b10      	ldr	r3, [pc, #64]	; (800b498 <USBD_CDC_TransmitPacket+0x88>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	f003 020f 	and.w	r2, r3, #15
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4403      	add	r3, r0
 800b46e:	3318      	adds	r3, #24
 800b470:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b472:	4b09      	ldr	r3, [pc, #36]	; (800b498 <USBD_CDC_TransmitPacket+0x88>)
 800b474:	7819      	ldrb	r1, [r3, #0]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f005 f9f9 	bl	801087a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	2000011f 	.word	0x2000011f

0800b49c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	32b0      	adds	r2, #176	; 0xb0
 800b4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	32b0      	adds	r2, #176	; 0xb0
 800b4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	e018      	b.n	800b4fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	7c1b      	ldrb	r3, [r3, #16]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10a      	bne.n	800b4e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4d2:	4b0c      	ldr	r3, [pc, #48]	; (800b504 <USBD_CDC_ReceivePacket+0x68>)
 800b4d4:	7819      	ldrb	r1, [r3, #0]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f005 f9eb 	bl	80108bc <USBD_LL_PrepareReceive>
 800b4e6:	e008      	b.n	800b4fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4e8:	4b06      	ldr	r3, [pc, #24]	; (800b504 <USBD_CDC_ReceivePacket+0x68>)
 800b4ea:	7819      	ldrb	r1, [r3, #0]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4f2:	2340      	movs	r3, #64	; 0x40
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f005 f9e1 	bl	80108bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	20000120 	.word	0x20000120

0800b508 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	4613      	mov	r3, r2
 800b514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d101      	bne.n	800b520 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e01f      	b.n	800b560 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	79fa      	ldrb	r2, [r7, #7]
 800b552:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f005 f85b 	bl	8010610 <USBD_LL_Init>
 800b55a:	4603      	mov	r3, r0
 800b55c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b55e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b572:	2300      	movs	r3, #0
 800b574:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e025      	b.n	800b5cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	32ae      	adds	r2, #174	; 0xae
 800b592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00f      	beq.n	800b5bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	32ae      	adds	r2, #174	; 0xae
 800b5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ac:	f107 020e 	add.w	r2, r7, #14
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	4798      	blx	r3
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f005 f863 	bl	80106a8 <USBD_LL_Start>
 800b5e2:	4603      	mov	r3, r0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	460b      	mov	r3, r1
 800b60c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d009      	beq.n	800b630 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	78fa      	ldrb	r2, [r7, #3]
 800b626:	4611      	mov	r1, r2
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	4798      	blx	r3
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b630:	7bfb      	ldrb	r3, [r7, #15]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b084      	sub	sp, #16
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	460b      	mov	r3, r1
 800b644:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	78fa      	ldrb	r2, [r7, #3]
 800b654:	4611      	mov	r1, r2
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	4798      	blx	r3
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b660:	2303      	movs	r3, #3
 800b662:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b664:	7bfb      	ldrb	r3, [r7, #15]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	4618      	mov	r0, r3
 800b682:	f001 f908 	bl	800c896 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2201      	movs	r2, #1
 800b68a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b694:	461a      	mov	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6a2:	f003 031f 	and.w	r3, r3, #31
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d01a      	beq.n	800b6e0 <USBD_LL_SetupStage+0x72>
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d822      	bhi.n	800b6f4 <USBD_LL_SetupStage+0x86>
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d002      	beq.n	800b6b8 <USBD_LL_SetupStage+0x4a>
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d00a      	beq.n	800b6cc <USBD_LL_SetupStage+0x5e>
 800b6b6:	e01d      	b.n	800b6f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 fb5f 	bl	800bd84 <USBD_StdDevReq>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ca:	e020      	b.n	800b70e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fbc7 	bl	800be68 <USBD_StdItfReq>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6de:	e016      	b.n	800b70e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fc29 	bl	800bf40 <USBD_StdEPReq>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6f2:	e00c      	b.n	800b70e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	4619      	mov	r1, r3
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f005 f830 	bl	8010768 <USBD_LL_StallEP>
 800b708:	4603      	mov	r3, r0
 800b70a:	73fb      	strb	r3, [r7, #15]
      break;
 800b70c:	bf00      	nop
  }

  return ret;
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	460b      	mov	r3, r1
 800b722:	607a      	str	r2, [r7, #4]
 800b724:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b72a:	7afb      	ldrb	r3, [r7, #11]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d16e      	bne.n	800b80e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b736:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b73e:	2b03      	cmp	r3, #3
 800b740:	f040 8098 	bne.w	800b874 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	689a      	ldr	r2, [r3, #8]
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d913      	bls.n	800b778 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	689a      	ldr	r2, [r3, #8]
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	1ad2      	subs	r2, r2, r3
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	68da      	ldr	r2, [r3, #12]
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	4293      	cmp	r3, r2
 800b768:	bf28      	it	cs
 800b76a:	4613      	movcs	r3, r2
 800b76c:	461a      	mov	r2, r3
 800b76e:	6879      	ldr	r1, [r7, #4]
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f001 f984 	bl	800ca7e <USBD_CtlContinueRx>
 800b776:	e07d      	b.n	800b874 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b77e:	f003 031f 	and.w	r3, r3, #31
 800b782:	2b02      	cmp	r3, #2
 800b784:	d014      	beq.n	800b7b0 <USBD_LL_DataOutStage+0x98>
 800b786:	2b02      	cmp	r3, #2
 800b788:	d81d      	bhi.n	800b7c6 <USBD_LL_DataOutStage+0xae>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <USBD_LL_DataOutStage+0x7c>
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d003      	beq.n	800b79a <USBD_LL_DataOutStage+0x82>
 800b792:	e018      	b.n	800b7c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b794:	2300      	movs	r3, #0
 800b796:	75bb      	strb	r3, [r7, #22]
            break;
 800b798:	e018      	b.n	800b7cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f000 fa5e 	bl	800bc66 <USBD_CoreFindIF>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75bb      	strb	r3, [r7, #22]
            break;
 800b7ae:	e00d      	b.n	800b7cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f000 fa60 	bl	800bc80 <USBD_CoreFindEP>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	75bb      	strb	r3, [r7, #22]
            break;
 800b7c4:	e002      	b.n	800b7cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	75bb      	strb	r3, [r7, #22]
            break;
 800b7ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b7cc:	7dbb      	ldrb	r3, [r7, #22]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d119      	bne.n	800b806 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	d113      	bne.n	800b806 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b7de:	7dba      	ldrb	r2, [r7, #22]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	32ae      	adds	r2, #174	; 0xae
 800b7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00b      	beq.n	800b806 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b7ee:	7dba      	ldrb	r2, [r7, #22]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b7f6:	7dba      	ldrb	r2, [r7, #22]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	32ae      	adds	r2, #174	; 0xae
 800b7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f001 f94a 	bl	800caa0 <USBD_CtlSendStatus>
 800b80c:	e032      	b.n	800b874 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b80e:	7afb      	ldrb	r3, [r7, #11]
 800b810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b814:	b2db      	uxtb	r3, r3
 800b816:	4619      	mov	r1, r3
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f000 fa31 	bl	800bc80 <USBD_CoreFindEP>
 800b81e:	4603      	mov	r3, r0
 800b820:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b822:	7dbb      	ldrb	r3, [r7, #22]
 800b824:	2bff      	cmp	r3, #255	; 0xff
 800b826:	d025      	beq.n	800b874 <USBD_LL_DataOutStage+0x15c>
 800b828:	7dbb      	ldrb	r3, [r7, #22]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d122      	bne.n	800b874 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b03      	cmp	r3, #3
 800b838:	d117      	bne.n	800b86a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b83a:	7dba      	ldrb	r2, [r7, #22]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	32ae      	adds	r2, #174	; 0xae
 800b840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b844:	699b      	ldr	r3, [r3, #24]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00f      	beq.n	800b86a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b84a:	7dba      	ldrb	r2, [r7, #22]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b852:	7dba      	ldrb	r2, [r7, #22]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	32ae      	adds	r2, #174	; 0xae
 800b858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	7afa      	ldrb	r2, [r7, #11]
 800b860:	4611      	mov	r1, r2
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	4798      	blx	r3
 800b866:	4603      	mov	r3, r0
 800b868:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b870:	7dfb      	ldrb	r3, [r7, #23]
 800b872:	e000      	b.n	800b876 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3718      	adds	r7, #24
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b086      	sub	sp, #24
 800b882:	af00      	add	r7, sp, #0
 800b884:	60f8      	str	r0, [r7, #12]
 800b886:	460b      	mov	r3, r1
 800b888:	607a      	str	r2, [r7, #4]
 800b88a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b88c:	7afb      	ldrb	r3, [r7, #11]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d16f      	bne.n	800b972 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3314      	adds	r3, #20
 800b896:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d15a      	bne.n	800b958 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	689a      	ldr	r2, [r3, #8]
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d914      	bls.n	800b8d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	689a      	ldr	r2, [r3, #8]
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	1ad2      	subs	r2, r2, r3
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	6879      	ldr	r1, [r7, #4]
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f001 f8ac 	bl	800ca22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f004 fff3 	bl	80108bc <USBD_LL_PrepareReceive>
 800b8d6:	e03f      	b.n	800b958 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	68da      	ldr	r2, [r3, #12]
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d11c      	bne.n	800b91e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	685a      	ldr	r2, [r3, #4]
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d316      	bcc.n	800b91e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d20f      	bcs.n	800b91e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b8fe:	2200      	movs	r2, #0
 800b900:	2100      	movs	r1, #0
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f001 f88d 	bl	800ca22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b910:	2300      	movs	r3, #0
 800b912:	2200      	movs	r2, #0
 800b914:	2100      	movs	r1, #0
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f004 ffd0 	bl	80108bc <USBD_LL_PrepareReceive>
 800b91c:	e01c      	b.n	800b958 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b03      	cmp	r3, #3
 800b928:	d10f      	bne.n	800b94a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d009      	beq.n	800b94a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b94a:	2180      	movs	r1, #128	; 0x80
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f004 ff0b 	bl	8010768 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f001 f8b7 	bl	800cac6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d03a      	beq.n	800b9d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7ff fe42 	bl	800b5ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b970:	e032      	b.n	800b9d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b972:	7afb      	ldrb	r3, [r7, #11]
 800b974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	4619      	mov	r1, r3
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f000 f97f 	bl	800bc80 <USBD_CoreFindEP>
 800b982:	4603      	mov	r3, r0
 800b984:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	2bff      	cmp	r3, #255	; 0xff
 800b98a:	d025      	beq.n	800b9d8 <USBD_LL_DataInStage+0x15a>
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d122      	bne.n	800b9d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d11c      	bne.n	800b9d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b99e:	7dfa      	ldrb	r2, [r7, #23]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	32ae      	adds	r2, #174	; 0xae
 800b9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a8:	695b      	ldr	r3, [r3, #20]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d014      	beq.n	800b9d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9ae:	7dfa      	ldrb	r2, [r7, #23]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9b6:	7dfa      	ldrb	r2, [r7, #23]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	32ae      	adds	r2, #174	; 0xae
 800b9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	7afa      	ldrb	r2, [r7, #11]
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	4798      	blx	r3
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b9ce:	7dbb      	ldrb	r3, [r7, #22]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b9d4:	7dbb      	ldrb	r3, [r7, #22]
 800b9d6:	e000      	b.n	800b9da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d014      	beq.n	800ba48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00e      	beq.n	800ba48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	6852      	ldr	r2, [r2, #4]
 800ba36:	b2d2      	uxtb	r2, r2
 800ba38:	4611      	mov	r1, r2
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	4798      	blx	r3
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba44:	2303      	movs	r3, #3
 800ba46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba48:	2340      	movs	r3, #64	; 0x40
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f004 fe45 	bl	80106de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2240      	movs	r2, #64	; 0x40
 800ba60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba64:	2340      	movs	r3, #64	; 0x40
 800ba66:	2200      	movs	r2, #0
 800ba68:	2180      	movs	r1, #128	; 0x80
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f004 fe37 	bl	80106de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2240      	movs	r2, #64	; 0x40
 800ba7a:	621a      	str	r2, [r3, #32]

  return ret;
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba86:	b480      	push	{r7}
 800ba88:	b083      	sub	sp, #12
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	78fa      	ldrb	r2, [r7, #3]
 800ba96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800baa6:	b480      	push	{r7}
 800baa8:	b083      	sub	sp, #12
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2204      	movs	r2, #4
 800bac0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bad2:	b480      	push	{r7}
 800bad4:	b083      	sub	sp, #12
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	d106      	bne.n	800baf4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800baec:	b2da      	uxtb	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d110      	bne.n	800bb38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00b      	beq.n	800bb38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb26:	69db      	ldr	r3, [r3, #28]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d005      	beq.n	800bb38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b082      	sub	sp, #8
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	32ae      	adds	r2, #174	; 0xae
 800bb58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb60:	2303      	movs	r3, #3
 800bb62:	e01c      	b.n	800bb9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d115      	bne.n	800bb9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	32ae      	adds	r2, #174	; 0xae
 800bb7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00b      	beq.n	800bb9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	32ae      	adds	r2, #174	; 0xae
 800bb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	78fa      	ldrb	r2, [r7, #3]
 800bb96:	4611      	mov	r1, r2
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b082      	sub	sp, #8
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	460b      	mov	r3, r1
 800bbb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	32ae      	adds	r2, #174	; 0xae
 800bbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d101      	bne.n	800bbc8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	e01c      	b.n	800bc02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b03      	cmp	r3, #3
 800bbd2:	d115      	bne.n	800bc00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	32ae      	adds	r2, #174	; 0xae
 800bbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00b      	beq.n	800bc00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	32ae      	adds	r2, #174	; 0xae
 800bbf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf8:	78fa      	ldrb	r2, [r7, #3]
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b083      	sub	sp, #12
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00e      	beq.n	800bc5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	6852      	ldr	r2, [r2, #4]
 800bc4a:	b2d2      	uxtb	r2, r2
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	4798      	blx	r3
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d001      	beq.n	800bc5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	460b      	mov	r3, r1
 800bc70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b086      	sub	sp, #24
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
 800bca2:	460b      	mov	r3, r1
 800bca4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	885b      	ldrh	r3, [r3, #2]
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d920      	bls.n	800bd04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bcca:	e013      	b.n	800bcf4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bccc:	f107 030a 	add.w	r3, r7, #10
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6978      	ldr	r0, [r7, #20]
 800bcd4:	f000 f81b 	bl	800bd0e <USBD_GetNextDesc>
 800bcd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	785b      	ldrb	r3, [r3, #1]
 800bcde:	2b05      	cmp	r3, #5
 800bce0:	d108      	bne.n	800bcf4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	789b      	ldrb	r3, [r3, #2]
 800bcea:	78fa      	ldrb	r2, [r7, #3]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d008      	beq.n	800bd02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	885b      	ldrh	r3, [r3, #2]
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	897b      	ldrh	r3, [r7, #10]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d8e5      	bhi.n	800bccc <USBD_GetEpDesc+0x32>
 800bd00:	e000      	b.n	800bd04 <USBD_GetEpDesc+0x6a>
          break;
 800bd02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd04:	693b      	ldr	r3, [r7, #16]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3718      	adds	r7, #24
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b085      	sub	sp, #20
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	881a      	ldrh	r2, [r3, #0]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	4413      	add	r3, r2
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	461a      	mov	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4413      	add	r3, r2
 800bd38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd66:	8a3b      	ldrh	r3, [r7, #16]
 800bd68:	021b      	lsls	r3, r3, #8
 800bd6a:	b21a      	sxth	r2, r3
 800bd6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	b21b      	sxth	r3, r3
 800bd74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd76:	89fb      	ldrh	r3, [r7, #14]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	371c      	adds	r7, #28
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd9a:	2b40      	cmp	r3, #64	; 0x40
 800bd9c:	d005      	beq.n	800bdaa <USBD_StdDevReq+0x26>
 800bd9e:	2b40      	cmp	r3, #64	; 0x40
 800bda0:	d857      	bhi.n	800be52 <USBD_StdDevReq+0xce>
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00f      	beq.n	800bdc6 <USBD_StdDevReq+0x42>
 800bda6:	2b20      	cmp	r3, #32
 800bda8:	d153      	bne.n	800be52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	32ae      	adds	r2, #174	; 0xae
 800bdb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	4798      	blx	r3
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc4:	e04a      	b.n	800be5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	785b      	ldrb	r3, [r3, #1]
 800bdca:	2b09      	cmp	r3, #9
 800bdcc:	d83b      	bhi.n	800be46 <USBD_StdDevReq+0xc2>
 800bdce:	a201      	add	r2, pc, #4	; (adr r2, 800bdd4 <USBD_StdDevReq+0x50>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800be29 	.word	0x0800be29
 800bdd8:	0800be3d 	.word	0x0800be3d
 800bddc:	0800be47 	.word	0x0800be47
 800bde0:	0800be33 	.word	0x0800be33
 800bde4:	0800be47 	.word	0x0800be47
 800bde8:	0800be07 	.word	0x0800be07
 800bdec:	0800bdfd 	.word	0x0800bdfd
 800bdf0:	0800be47 	.word	0x0800be47
 800bdf4:	0800be1f 	.word	0x0800be1f
 800bdf8:	0800be11 	.word	0x0800be11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fa3c 	bl	800c27c <USBD_GetDescriptor>
          break;
 800be04:	e024      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fba1 	bl	800c550 <USBD_SetAddress>
          break;
 800be0e:	e01f      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fbe0 	bl	800c5d8 <USBD_SetConfig>
 800be18:	4603      	mov	r3, r0
 800be1a:	73fb      	strb	r3, [r7, #15]
          break;
 800be1c:	e018      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fc83 	bl	800c72c <USBD_GetConfig>
          break;
 800be26:	e013      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fcb4 	bl	800c798 <USBD_GetStatus>
          break;
 800be30:	e00e      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fce3 	bl	800c800 <USBD_SetFeature>
          break;
 800be3a:	e009      	b.n	800be50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fd07 	bl	800c852 <USBD_ClrFeature>
          break;
 800be44:	e004      	b.n	800be50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fd5e 	bl	800c90a <USBD_CtlError>
          break;
 800be4e:	bf00      	nop
      }
      break;
 800be50:	e004      	b.n	800be5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fd58 	bl	800c90a <USBD_CtlError>
      break;
 800be5a:	bf00      	nop
  }

  return ret;
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop

0800be68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be72:	2300      	movs	r3, #0
 800be74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be7e:	2b40      	cmp	r3, #64	; 0x40
 800be80:	d005      	beq.n	800be8e <USBD_StdItfReq+0x26>
 800be82:	2b40      	cmp	r3, #64	; 0x40
 800be84:	d852      	bhi.n	800bf2c <USBD_StdItfReq+0xc4>
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <USBD_StdItfReq+0x26>
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	d14e      	bne.n	800bf2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be94:	b2db      	uxtb	r3, r3
 800be96:	3b01      	subs	r3, #1
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d840      	bhi.n	800bf1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	889b      	ldrh	r3, [r3, #4]
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d836      	bhi.n	800bf14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	889b      	ldrh	r3, [r3, #4]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	4619      	mov	r1, r3
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f7ff fed9 	bl	800bc66 <USBD_CoreFindIF>
 800beb4:	4603      	mov	r3, r0
 800beb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
 800beba:	2bff      	cmp	r3, #255	; 0xff
 800bebc:	d01d      	beq.n	800befa <USBD_StdItfReq+0x92>
 800bebe:	7bbb      	ldrb	r3, [r7, #14]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d11a      	bne.n	800befa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bec4:	7bba      	ldrb	r2, [r7, #14]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	32ae      	adds	r2, #174	; 0xae
 800beca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00f      	beq.n	800bef4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bed4:	7bba      	ldrb	r2, [r7, #14]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bedc:	7bba      	ldrb	r2, [r7, #14]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	32ae      	adds	r2, #174	; 0xae
 800bee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	4798      	blx	r3
 800beee:	4603      	mov	r3, r0
 800bef0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bef2:	e004      	b.n	800befe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bef4:	2303      	movs	r3, #3
 800bef6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bef8:	e001      	b.n	800befe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800befa:	2303      	movs	r3, #3
 800befc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	88db      	ldrh	r3, [r3, #6]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d110      	bne.n	800bf28 <USBD_StdItfReq+0xc0>
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10d      	bne.n	800bf28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fdc7 	bl	800caa0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf12:	e009      	b.n	800bf28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fcf7 	bl	800c90a <USBD_CtlError>
          break;
 800bf1c:	e004      	b.n	800bf28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fcf2 	bl	800c90a <USBD_CtlError>
          break;
 800bf26:	e000      	b.n	800bf2a <USBD_StdItfReq+0xc2>
          break;
 800bf28:	bf00      	nop
      }
      break;
 800bf2a:	e004      	b.n	800bf36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fceb 	bl	800c90a <USBD_CtlError>
      break;
 800bf34:	bf00      	nop
  }

  return ret;
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	889b      	ldrh	r3, [r3, #4]
 800bf52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf5c:	2b40      	cmp	r3, #64	; 0x40
 800bf5e:	d007      	beq.n	800bf70 <USBD_StdEPReq+0x30>
 800bf60:	2b40      	cmp	r3, #64	; 0x40
 800bf62:	f200 817f 	bhi.w	800c264 <USBD_StdEPReq+0x324>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d02a      	beq.n	800bfc0 <USBD_StdEPReq+0x80>
 800bf6a:	2b20      	cmp	r3, #32
 800bf6c:	f040 817a 	bne.w	800c264 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf70:	7bbb      	ldrb	r3, [r7, #14]
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff fe83 	bl	800bc80 <USBD_CoreFindEP>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf7e:	7b7b      	ldrb	r3, [r7, #13]
 800bf80:	2bff      	cmp	r3, #255	; 0xff
 800bf82:	f000 8174 	beq.w	800c26e <USBD_StdEPReq+0x32e>
 800bf86:	7b7b      	ldrb	r3, [r7, #13]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f040 8170 	bne.w	800c26e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bf8e:	7b7a      	ldrb	r2, [r7, #13]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bf96:	7b7a      	ldrb	r2, [r7, #13]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	32ae      	adds	r2, #174	; 0xae
 800bf9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f000 8163 	beq.w	800c26e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfa8:	7b7a      	ldrb	r2, [r7, #13]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	32ae      	adds	r2, #174	; 0xae
 800bfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	4798      	blx	r3
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bfbe:	e156      	b.n	800c26e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	785b      	ldrb	r3, [r3, #1]
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d008      	beq.n	800bfda <USBD_StdEPReq+0x9a>
 800bfc8:	2b03      	cmp	r3, #3
 800bfca:	f300 8145 	bgt.w	800c258 <USBD_StdEPReq+0x318>
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f000 809b 	beq.w	800c10a <USBD_StdEPReq+0x1ca>
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d03c      	beq.n	800c052 <USBD_StdEPReq+0x112>
 800bfd8:	e13e      	b.n	800c258 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d002      	beq.n	800bfec <USBD_StdEPReq+0xac>
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d016      	beq.n	800c018 <USBD_StdEPReq+0xd8>
 800bfea:	e02c      	b.n	800c046 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00d      	beq.n	800c00e <USBD_StdEPReq+0xce>
 800bff2:	7bbb      	ldrb	r3, [r7, #14]
 800bff4:	2b80      	cmp	r3, #128	; 0x80
 800bff6:	d00a      	beq.n	800c00e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bff8:	7bbb      	ldrb	r3, [r7, #14]
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f004 fbb3 	bl	8010768 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c002:	2180      	movs	r1, #128	; 0x80
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f004 fbaf 	bl	8010768 <USBD_LL_StallEP>
 800c00a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c00c:	e020      	b.n	800c050 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fc7a 	bl	800c90a <USBD_CtlError>
              break;
 800c016:	e01b      	b.n	800c050 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	885b      	ldrh	r3, [r3, #2]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10e      	bne.n	800c03e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00b      	beq.n	800c03e <USBD_StdEPReq+0xfe>
 800c026:	7bbb      	ldrb	r3, [r7, #14]
 800c028:	2b80      	cmp	r3, #128	; 0x80
 800c02a:	d008      	beq.n	800c03e <USBD_StdEPReq+0xfe>
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	88db      	ldrh	r3, [r3, #6]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d104      	bne.n	800c03e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f004 fb95 	bl	8010768 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fd2e 	bl	800caa0 <USBD_CtlSendStatus>

              break;
 800c044:	e004      	b.n	800c050 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fc5e 	bl	800c90a <USBD_CtlError>
              break;
 800c04e:	bf00      	nop
          }
          break;
 800c050:	e107      	b.n	800c262 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	d002      	beq.n	800c064 <USBD_StdEPReq+0x124>
 800c05e:	2b03      	cmp	r3, #3
 800c060:	d016      	beq.n	800c090 <USBD_StdEPReq+0x150>
 800c062:	e04b      	b.n	800c0fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c064:	7bbb      	ldrb	r3, [r7, #14]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00d      	beq.n	800c086 <USBD_StdEPReq+0x146>
 800c06a:	7bbb      	ldrb	r3, [r7, #14]
 800c06c:	2b80      	cmp	r3, #128	; 0x80
 800c06e:	d00a      	beq.n	800c086 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c070:	7bbb      	ldrb	r3, [r7, #14]
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f004 fb77 	bl	8010768 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c07a:	2180      	movs	r1, #128	; 0x80
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f004 fb73 	bl	8010768 <USBD_LL_StallEP>
 800c082:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c084:	e040      	b.n	800c108 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fc3e 	bl	800c90a <USBD_CtlError>
              break;
 800c08e:	e03b      	b.n	800c108 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	885b      	ldrh	r3, [r3, #2]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d136      	bne.n	800c106 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c098:	7bbb      	ldrb	r3, [r7, #14]
 800c09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d004      	beq.n	800c0ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0a2:	7bbb      	ldrb	r3, [r7, #14]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f004 fb7d 	bl	80107a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fcf7 	bl	800caa0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7ff fde2 	bl	800bc80 <USBD_CoreFindEP>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0c0:	7b7b      	ldrb	r3, [r7, #13]
 800c0c2:	2bff      	cmp	r3, #255	; 0xff
 800c0c4:	d01f      	beq.n	800c106 <USBD_StdEPReq+0x1c6>
 800c0c6:	7b7b      	ldrb	r3, [r7, #13]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d11c      	bne.n	800c106 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c0cc:	7b7a      	ldrb	r2, [r7, #13]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c0d4:	7b7a      	ldrb	r2, [r7, #13]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	32ae      	adds	r2, #174	; 0xae
 800c0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d010      	beq.n	800c106 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0e4:	7b7a      	ldrb	r2, [r7, #13]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	32ae      	adds	r2, #174	; 0xae
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	4798      	blx	r3
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c0fa:	e004      	b.n	800c106 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fc03 	bl	800c90a <USBD_CtlError>
              break;
 800c104:	e000      	b.n	800c108 <USBD_StdEPReq+0x1c8>
              break;
 800c106:	bf00      	nop
          }
          break;
 800c108:	e0ab      	b.n	800c262 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b02      	cmp	r3, #2
 800c114:	d002      	beq.n	800c11c <USBD_StdEPReq+0x1dc>
 800c116:	2b03      	cmp	r3, #3
 800c118:	d032      	beq.n	800c180 <USBD_StdEPReq+0x240>
 800c11a:	e097      	b.n	800c24c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c11c:	7bbb      	ldrb	r3, [r7, #14]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d007      	beq.n	800c132 <USBD_StdEPReq+0x1f2>
 800c122:	7bbb      	ldrb	r3, [r7, #14]
 800c124:	2b80      	cmp	r3, #128	; 0x80
 800c126:	d004      	beq.n	800c132 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fbed 	bl	800c90a <USBD_CtlError>
                break;
 800c130:	e091      	b.n	800c256 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c136:	2b00      	cmp	r3, #0
 800c138:	da0b      	bge.n	800c152 <USBD_StdEPReq+0x212>
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c140:	4613      	mov	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	3310      	adds	r3, #16
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	4413      	add	r3, r2
 800c14e:	3304      	adds	r3, #4
 800c150:	e00b      	b.n	800c16a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c152:	7bbb      	ldrb	r3, [r7, #14]
 800c154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	4413      	add	r3, r2
 800c168:	3304      	adds	r3, #4
 800c16a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2202      	movs	r2, #2
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fc37 	bl	800c9ec <USBD_CtlSendData>
              break;
 800c17e:	e06a      	b.n	800c256 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c184:	2b00      	cmp	r3, #0
 800c186:	da11      	bge.n	800c1ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c188:	7bbb      	ldrb	r3, [r7, #14]
 800c18a:	f003 020f 	and.w	r2, r3, #15
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	4613      	mov	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4413      	add	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	440b      	add	r3, r1
 800c19a:	3324      	adds	r3, #36	; 0x24
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d117      	bne.n	800c1d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fbb0 	bl	800c90a <USBD_CtlError>
                  break;
 800c1aa:	e054      	b.n	800c256 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	f003 020f 	and.w	r2, r3, #15
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4413      	add	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	440b      	add	r3, r1
 800c1be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d104      	bne.n	800c1d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fb9d 	bl	800c90a <USBD_CtlError>
                  break;
 800c1d0:	e041      	b.n	800c256 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	da0b      	bge.n	800c1f2 <USBD_StdEPReq+0x2b2>
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
 800c1dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	3310      	adds	r3, #16
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	e00b      	b.n	800c20a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	4413      	add	r3, r2
 800c208:	3304      	adds	r3, #4
 800c20a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c20c:	7bbb      	ldrb	r3, [r7, #14]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d002      	beq.n	800c218 <USBD_StdEPReq+0x2d8>
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	2b80      	cmp	r3, #128	; 0x80
 800c216:	d103      	bne.n	800c220 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2200      	movs	r2, #0
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	e00e      	b.n	800c23e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f004 fadd 	bl	80107e4 <USBD_LL_IsStallEP>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d003      	beq.n	800c238 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2201      	movs	r2, #1
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	e002      	b.n	800c23e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2200      	movs	r2, #0
 800c23c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2202      	movs	r2, #2
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fbd1 	bl	800c9ec <USBD_CtlSendData>
              break;
 800c24a:	e004      	b.n	800c256 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fb5b 	bl	800c90a <USBD_CtlError>
              break;
 800c254:	bf00      	nop
          }
          break;
 800c256:	e004      	b.n	800c262 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c258:	6839      	ldr	r1, [r7, #0]
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fb55 	bl	800c90a <USBD_CtlError>
          break;
 800c260:	bf00      	nop
      }
      break;
 800c262:	e005      	b.n	800c270 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fb4f 	bl	800c90a <USBD_CtlError>
      break;
 800c26c:	e000      	b.n	800c270 <USBD_StdEPReq+0x330>
      break;
 800c26e:	bf00      	nop
  }

  return ret;
 800c270:	7bfb      	ldrb	r3, [r7, #15]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
	...

0800c27c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c28a:	2300      	movs	r3, #0
 800c28c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c28e:	2300      	movs	r3, #0
 800c290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	885b      	ldrh	r3, [r3, #2]
 800c296:	0a1b      	lsrs	r3, r3, #8
 800c298:	b29b      	uxth	r3, r3
 800c29a:	3b01      	subs	r3, #1
 800c29c:	2b06      	cmp	r3, #6
 800c29e:	f200 8128 	bhi.w	800c4f2 <USBD_GetDescriptor+0x276>
 800c2a2:	a201      	add	r2, pc, #4	; (adr r2, 800c2a8 <USBD_GetDescriptor+0x2c>)
 800c2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a8:	0800c2c5 	.word	0x0800c2c5
 800c2ac:	0800c2dd 	.word	0x0800c2dd
 800c2b0:	0800c31d 	.word	0x0800c31d
 800c2b4:	0800c4f3 	.word	0x0800c4f3
 800c2b8:	0800c4f3 	.word	0x0800c4f3
 800c2bc:	0800c493 	.word	0x0800c493
 800c2c0:	0800c4bf 	.word	0x0800c4bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	7c12      	ldrb	r2, [r2, #16]
 800c2d0:	f107 0108 	add.w	r1, r7, #8
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	4798      	blx	r3
 800c2d8:	60f8      	str	r0, [r7, #12]
      break;
 800c2da:	e112      	b.n	800c502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	7c1b      	ldrb	r3, [r3, #16]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10d      	bne.n	800c300 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ec:	f107 0208 	add.w	r2, r7, #8
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4798      	blx	r3
 800c2f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c2fe:	e100      	b.n	800c502 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c308:	f107 0208 	add.w	r2, r7, #8
 800c30c:	4610      	mov	r0, r2
 800c30e:	4798      	blx	r3
 800c310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3301      	adds	r3, #1
 800c316:	2202      	movs	r2, #2
 800c318:	701a      	strb	r2, [r3, #0]
      break;
 800c31a:	e0f2      	b.n	800c502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	885b      	ldrh	r3, [r3, #2]
 800c320:	b2db      	uxtb	r3, r3
 800c322:	2b05      	cmp	r3, #5
 800c324:	f200 80ac 	bhi.w	800c480 <USBD_GetDescriptor+0x204>
 800c328:	a201      	add	r2, pc, #4	; (adr r2, 800c330 <USBD_GetDescriptor+0xb4>)
 800c32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32e:	bf00      	nop
 800c330:	0800c349 	.word	0x0800c349
 800c334:	0800c37d 	.word	0x0800c37d
 800c338:	0800c3b1 	.word	0x0800c3b1
 800c33c:	0800c3e5 	.word	0x0800c3e5
 800c340:	0800c419 	.word	0x0800c419
 800c344:	0800c44d 	.word	0x0800c44d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00b      	beq.n	800c36c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	7c12      	ldrb	r2, [r2, #16]
 800c360:	f107 0108 	add.w	r1, r7, #8
 800c364:	4610      	mov	r0, r2
 800c366:	4798      	blx	r3
 800c368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c36a:	e091      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 facb 	bl	800c90a <USBD_CtlError>
            err++;
 800c374:	7afb      	ldrb	r3, [r7, #11]
 800c376:	3301      	adds	r3, #1
 800c378:	72fb      	strb	r3, [r7, #11]
          break;
 800c37a:	e089      	b.n	800c490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00b      	beq.n	800c3a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	7c12      	ldrb	r2, [r2, #16]
 800c394:	f107 0108 	add.w	r1, r7, #8
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
 800c39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c39e:	e077      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fab1 	bl	800c90a <USBD_CtlError>
            err++;
 800c3a8:	7afb      	ldrb	r3, [r7, #11]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ae:	e06f      	b.n	800c490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00b      	beq.n	800c3d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	7c12      	ldrb	r2, [r2, #16]
 800c3c8:	f107 0108 	add.w	r1, r7, #8
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4798      	blx	r3
 800c3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3d2:	e05d      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fa97 	bl	800c90a <USBD_CtlError>
            err++;
 800c3dc:	7afb      	ldrb	r3, [r7, #11]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3e2:	e055      	b.n	800c490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00b      	beq.n	800c408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	7c12      	ldrb	r2, [r2, #16]
 800c3fc:	f107 0108 	add.w	r1, r7, #8
 800c400:	4610      	mov	r0, r2
 800c402:	4798      	blx	r3
 800c404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c406:	e043      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fa7d 	bl	800c90a <USBD_CtlError>
            err++;
 800c410:	7afb      	ldrb	r3, [r7, #11]
 800c412:	3301      	adds	r3, #1
 800c414:	72fb      	strb	r3, [r7, #11]
          break;
 800c416:	e03b      	b.n	800c490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00b      	beq.n	800c43c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	7c12      	ldrb	r2, [r2, #16]
 800c430:	f107 0108 	add.w	r1, r7, #8
 800c434:	4610      	mov	r0, r2
 800c436:	4798      	blx	r3
 800c438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c43a:	e029      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fa63 	bl	800c90a <USBD_CtlError>
            err++;
 800c444:	7afb      	ldrb	r3, [r7, #11]
 800c446:	3301      	adds	r3, #1
 800c448:	72fb      	strb	r3, [r7, #11]
          break;
 800c44a:	e021      	b.n	800c490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00b      	beq.n	800c470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	7c12      	ldrb	r2, [r2, #16]
 800c464:	f107 0108 	add.w	r1, r7, #8
 800c468:	4610      	mov	r0, r2
 800c46a:	4798      	blx	r3
 800c46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46e:	e00f      	b.n	800c490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fa49 	bl	800c90a <USBD_CtlError>
            err++;
 800c478:	7afb      	ldrb	r3, [r7, #11]
 800c47a:	3301      	adds	r3, #1
 800c47c:	72fb      	strb	r3, [r7, #11]
          break;
 800c47e:	e007      	b.n	800c490 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa41 	bl	800c90a <USBD_CtlError>
          err++;
 800c488:	7afb      	ldrb	r3, [r7, #11]
 800c48a:	3301      	adds	r3, #1
 800c48c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c48e:	bf00      	nop
      }
      break;
 800c490:	e037      	b.n	800c502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7c1b      	ldrb	r3, [r3, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d109      	bne.n	800c4ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4a2:	f107 0208 	add.w	r2, r7, #8
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	4798      	blx	r3
 800c4aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4ac:	e029      	b.n	800c502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fa2a 	bl	800c90a <USBD_CtlError>
        err++;
 800c4b6:	7afb      	ldrb	r3, [r7, #11]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	72fb      	strb	r3, [r7, #11]
      break;
 800c4bc:	e021      	b.n	800c502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	7c1b      	ldrb	r3, [r3, #16]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10d      	bne.n	800c4e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ce:	f107 0208 	add.w	r2, r7, #8
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	4798      	blx	r3
 800c4d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	2207      	movs	r2, #7
 800c4de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4e0:	e00f      	b.n	800c502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 fa10 	bl	800c90a <USBD_CtlError>
        err++;
 800c4ea:	7afb      	ldrb	r3, [r7, #11]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	72fb      	strb	r3, [r7, #11]
      break;
 800c4f0:	e007      	b.n	800c502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c4f2:	6839      	ldr	r1, [r7, #0]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fa08 	bl	800c90a <USBD_CtlError>
      err++;
 800c4fa:	7afb      	ldrb	r3, [r7, #11]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	72fb      	strb	r3, [r7, #11]
      break;
 800c500:	bf00      	nop
  }

  if (err != 0U)
 800c502:	7afb      	ldrb	r3, [r7, #11]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d11e      	bne.n	800c546 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	88db      	ldrh	r3, [r3, #6]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d016      	beq.n	800c53e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c510:	893b      	ldrh	r3, [r7, #8]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00e      	beq.n	800c534 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	88da      	ldrh	r2, [r3, #6]
 800c51a:	893b      	ldrh	r3, [r7, #8]
 800c51c:	4293      	cmp	r3, r2
 800c51e:	bf28      	it	cs
 800c520:	4613      	movcs	r3, r2
 800c522:	b29b      	uxth	r3, r3
 800c524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c526:	893b      	ldrh	r3, [r7, #8]
 800c528:	461a      	mov	r2, r3
 800c52a:	68f9      	ldr	r1, [r7, #12]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fa5d 	bl	800c9ec <USBD_CtlSendData>
 800c532:	e009      	b.n	800c548 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f9e7 	bl	800c90a <USBD_CtlError>
 800c53c:	e004      	b.n	800c548 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 faae 	bl	800caa0 <USBD_CtlSendStatus>
 800c544:	e000      	b.n	800c548 <USBD_GetDescriptor+0x2cc>
    return;
 800c546:	bf00      	nop
  }
}
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop

0800c550 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	889b      	ldrh	r3, [r3, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d131      	bne.n	800c5c6 <USBD_SetAddress+0x76>
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	88db      	ldrh	r3, [r3, #6]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d12d      	bne.n	800c5c6 <USBD_SetAddress+0x76>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	885b      	ldrh	r3, [r3, #2]
 800c56e:	2b7f      	cmp	r3, #127	; 0x7f
 800c570:	d829      	bhi.n	800c5c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	885b      	ldrh	r3, [r3, #2]
 800c576:	b2db      	uxtb	r3, r3
 800c578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c57c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b03      	cmp	r3, #3
 800c588:	d104      	bne.n	800c594 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f9bc 	bl	800c90a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c592:	e01d      	b.n	800c5d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	7bfa      	ldrb	r2, [r7, #15]
 800c598:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f004 f94b 	bl	801083c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 fa7a 	bl	800caa0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d004      	beq.n	800c5bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2202      	movs	r2, #2
 800c5b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ba:	e009      	b.n	800c5d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5c4:	e004      	b.n	800c5d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c5c6:	6839      	ldr	r1, [r7, #0]
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 f99e 	bl	800c90a <USBD_CtlError>
  }
}
 800c5ce:	bf00      	nop
 800c5d0:	bf00      	nop
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	885b      	ldrh	r3, [r3, #2]
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	4b4e      	ldr	r3, [pc, #312]	; (800c728 <USBD_SetConfig+0x150>)
 800c5ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c5f0:	4b4d      	ldr	r3, [pc, #308]	; (800c728 <USBD_SetConfig+0x150>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d905      	bls.n	800c604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f985 	bl	800c90a <USBD_CtlError>
    return USBD_FAIL;
 800c600:	2303      	movs	r3, #3
 800c602:	e08c      	b.n	800c71e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d002      	beq.n	800c616 <USBD_SetConfig+0x3e>
 800c610:	2b03      	cmp	r3, #3
 800c612:	d029      	beq.n	800c668 <USBD_SetConfig+0x90>
 800c614:	e075      	b.n	800c702 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c616:	4b44      	ldr	r3, [pc, #272]	; (800c728 <USBD_SetConfig+0x150>)
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d020      	beq.n	800c660 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c61e:	4b42      	ldr	r3, [pc, #264]	; (800c728 <USBD_SetConfig+0x150>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c628:	4b3f      	ldr	r3, [pc, #252]	; (800c728 <USBD_SetConfig+0x150>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7fe ffe7 	bl	800b602 <USBD_SetClassConfig>
 800c634:	4603      	mov	r3, r0
 800c636:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d008      	beq.n	800c650 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f962 	bl	800c90a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2202      	movs	r2, #2
 800c64a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c64e:	e065      	b.n	800c71c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 fa25 	bl	800caa0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2203      	movs	r2, #3
 800c65a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c65e:	e05d      	b.n	800c71c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fa1d 	bl	800caa0 <USBD_CtlSendStatus>
      break;
 800c666:	e059      	b.n	800c71c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c668:	4b2f      	ldr	r3, [pc, #188]	; (800c728 <USBD_SetConfig+0x150>)
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d112      	bne.n	800c696 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2202      	movs	r2, #2
 800c674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c678:	4b2b      	ldr	r3, [pc, #172]	; (800c728 <USBD_SetConfig+0x150>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	461a      	mov	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c682:	4b29      	ldr	r3, [pc, #164]	; (800c728 <USBD_SetConfig+0x150>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7fe ffd6 	bl	800b63a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fa06 	bl	800caa0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c694:	e042      	b.n	800c71c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c696:	4b24      	ldr	r3, [pc, #144]	; (800c728 <USBD_SetConfig+0x150>)
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	461a      	mov	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d02a      	beq.n	800c6fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7fe ffc4 	bl	800b63a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c6b2:	4b1d      	ldr	r3, [pc, #116]	; (800c728 <USBD_SetConfig+0x150>)
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6bc:	4b1a      	ldr	r3, [pc, #104]	; (800c728 <USBD_SetConfig+0x150>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7fe ff9d 	bl	800b602 <USBD_SetClassConfig>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00f      	beq.n	800c6f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f918 	bl	800c90a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7fe ffa9 	bl	800b63a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6f0:	e014      	b.n	800c71c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f9d4 	bl	800caa0 <USBD_CtlSendStatus>
      break;
 800c6f8:	e010      	b.n	800c71c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f9d0 	bl	800caa0 <USBD_CtlSendStatus>
      break;
 800c700:	e00c      	b.n	800c71c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f900 	bl	800c90a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c70a:	4b07      	ldr	r3, [pc, #28]	; (800c728 <USBD_SetConfig+0x150>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7fe ff92 	bl	800b63a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c716:	2303      	movs	r3, #3
 800c718:	73fb      	strb	r3, [r7, #15]
      break;
 800c71a:	bf00      	nop
  }

  return ret;
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	20001520 	.word	0x20001520

0800c72c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	88db      	ldrh	r3, [r3, #6]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d004      	beq.n	800c748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f8e2 	bl	800c90a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c746:	e023      	b.n	800c790 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b02      	cmp	r3, #2
 800c752:	dc02      	bgt.n	800c75a <USBD_GetConfig+0x2e>
 800c754:	2b00      	cmp	r3, #0
 800c756:	dc03      	bgt.n	800c760 <USBD_GetConfig+0x34>
 800c758:	e015      	b.n	800c786 <USBD_GetConfig+0x5a>
 800c75a:	2b03      	cmp	r3, #3
 800c75c:	d00b      	beq.n	800c776 <USBD_GetConfig+0x4a>
 800c75e:	e012      	b.n	800c786 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	3308      	adds	r3, #8
 800c76a:	2201      	movs	r2, #1
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f93c 	bl	800c9ec <USBD_CtlSendData>
        break;
 800c774:	e00c      	b.n	800c790 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3304      	adds	r3, #4
 800c77a:	2201      	movs	r2, #1
 800c77c:	4619      	mov	r1, r3
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f934 	bl	800c9ec <USBD_CtlSendData>
        break;
 800c784:	e004      	b.n	800c790 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f8be 	bl	800c90a <USBD_CtlError>
        break;
 800c78e:	bf00      	nop
}
 800c790:	bf00      	nop
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d81e      	bhi.n	800c7ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	88db      	ldrh	r3, [r3, #6]
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	d004      	beq.n	800c7c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c7b8:	6839      	ldr	r1, [r7, #0]
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 f8a5 	bl	800c90a <USBD_CtlError>
        break;
 800c7c0:	e01a      	b.n	800c7f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d005      	beq.n	800c7de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f043 0202 	orr.w	r2, r3, #2
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	330c      	adds	r3, #12
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f900 	bl	800c9ec <USBD_CtlSendData>
      break;
 800c7ec:	e004      	b.n	800c7f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f88a 	bl	800c90a <USBD_CtlError>
      break;
 800c7f6:	bf00      	nop
  }
}
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	885b      	ldrh	r3, [r3, #2]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d107      	bne.n	800c822 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2201      	movs	r2, #1
 800c816:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f940 	bl	800caa0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c820:	e013      	b.n	800c84a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	885b      	ldrh	r3, [r3, #2]
 800c826:	2b02      	cmp	r3, #2
 800c828:	d10b      	bne.n	800c842 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	889b      	ldrh	r3, [r3, #4]
 800c82e:	0a1b      	lsrs	r3, r3, #8
 800c830:	b29b      	uxth	r3, r3
 800c832:	b2da      	uxtb	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 f930 	bl	800caa0 <USBD_CtlSendStatus>
}
 800c840:	e003      	b.n	800c84a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f860 	bl	800c90a <USBD_CtlError>
}
 800c84a:	bf00      	nop
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b082      	sub	sp, #8
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c862:	b2db      	uxtb	r3, r3
 800c864:	3b01      	subs	r3, #1
 800c866:	2b02      	cmp	r3, #2
 800c868:	d80b      	bhi.n	800c882 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	885b      	ldrh	r3, [r3, #2]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d10c      	bne.n	800c88c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f910 	bl	800caa0 <USBD_CtlSendStatus>
      }
      break;
 800c880:	e004      	b.n	800c88c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f840 	bl	800c90a <USBD_CtlError>
      break;
 800c88a:	e000      	b.n	800c88e <USBD_ClrFeature+0x3c>
      break;
 800c88c:	bf00      	nop
  }
}
 800c88e:	bf00      	nop
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b084      	sub	sp, #16
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	781a      	ldrb	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	781a      	ldrb	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f7ff fa41 	bl	800bd48 <SWAPBYTE>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f7ff fa34 	bl	800bd48 <SWAPBYTE>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f7ff fa27 	bl	800bd48 <SWAPBYTE>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	80da      	strh	r2, [r3, #6]
}
 800c902:	bf00      	nop
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c914:	2180      	movs	r1, #128	; 0x80
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f003 ff26 	bl	8010768 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c91c:	2100      	movs	r1, #0
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f003 ff22 	bl	8010768 <USBD_LL_StallEP>
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c938:	2300      	movs	r3, #0
 800c93a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d036      	beq.n	800c9b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c946:	6938      	ldr	r0, [r7, #16]
 800c948:	f000 f836 	bl	800c9b8 <USBD_GetLen>
 800c94c:	4603      	mov	r3, r0
 800c94e:	3301      	adds	r3, #1
 800c950:	b29b      	uxth	r3, r3
 800c952:	005b      	lsls	r3, r3, #1
 800c954:	b29a      	uxth	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	4413      	add	r3, r2
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	7812      	ldrb	r2, [r2, #0]
 800c964:	701a      	strb	r2, [r3, #0]
  idx++;
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	3301      	adds	r3, #1
 800c96a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c96c:	7dfb      	ldrb	r3, [r7, #23]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	4413      	add	r3, r2
 800c972:	2203      	movs	r2, #3
 800c974:	701a      	strb	r2, [r3, #0]
  idx++;
 800c976:	7dfb      	ldrb	r3, [r7, #23]
 800c978:	3301      	adds	r3, #1
 800c97a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c97c:	e013      	b.n	800c9a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	4413      	add	r3, r2
 800c984:	693a      	ldr	r2, [r7, #16]
 800c986:	7812      	ldrb	r2, [r2, #0]
 800c988:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	3301      	adds	r3, #1
 800c98e:	613b      	str	r3, [r7, #16]
    idx++;
 800c990:	7dfb      	ldrb	r3, [r7, #23]
 800c992:	3301      	adds	r3, #1
 800c994:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	4413      	add	r3, r2
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c9a0:	7dfb      	ldrb	r3, [r7, #23]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1e7      	bne.n	800c97e <USBD_GetString+0x52>
 800c9ae:	e000      	b.n	800c9b2 <USBD_GetString+0x86>
    return;
 800c9b0:	bf00      	nop
  }
}
 800c9b2:	3718      	adds	r7, #24
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c9c8:	e005      	b.n	800c9d6 <USBD_GetLen+0x1e>
  {
    len++;
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1f5      	bne.n	800c9ca <USBD_GetLen+0x12>
  }

  return len;
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	2100      	movs	r1, #0
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f003 ff31 	bl	801087a <USBD_LL_Transmit>

  return USBD_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b084      	sub	sp, #16
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	60f8      	str	r0, [r7, #12]
 800ca2a:	60b9      	str	r1, [r7, #8]
 800ca2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	2100      	movs	r1, #0
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f003 ff20 	bl	801087a <USBD_LL_Transmit>

  return USBD_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2203      	movs	r2, #3
 800ca54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f003 ff24 	bl	80108bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	60f8      	str	r0, [r7, #12]
 800ca86:	60b9      	str	r1, [r7, #8]
 800ca88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	2100      	movs	r1, #0
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f003 ff13 	bl	80108bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca96:	2300      	movs	r3, #0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2204      	movs	r2, #4
 800caac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cab0:	2300      	movs	r3, #0
 800cab2:	2200      	movs	r2, #0
 800cab4:	2100      	movs	r1, #0
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f003 fedf 	bl	801087a <USBD_LL_Transmit>

  return USBD_OK;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b082      	sub	sp, #8
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2205      	movs	r2, #5
 800cad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cad6:	2300      	movs	r3, #0
 800cad8:	2200      	movs	r2, #0
 800cada:	2100      	movs	r1, #0
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f003 feed 	bl	80108bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <__NVIC_SetPriority>:
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	4603      	mov	r3, r0
 800caf4:	6039      	str	r1, [r7, #0]
 800caf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800caf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	db0a      	blt.n	800cb16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	490c      	ldr	r1, [pc, #48]	; (800cb38 <__NVIC_SetPriority+0x4c>)
 800cb06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb0a:	0112      	lsls	r2, r2, #4
 800cb0c:	b2d2      	uxtb	r2, r2
 800cb0e:	440b      	add	r3, r1
 800cb10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cb14:	e00a      	b.n	800cb2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	4908      	ldr	r1, [pc, #32]	; (800cb3c <__NVIC_SetPriority+0x50>)
 800cb1c:	79fb      	ldrb	r3, [r7, #7]
 800cb1e:	f003 030f 	and.w	r3, r3, #15
 800cb22:	3b04      	subs	r3, #4
 800cb24:	0112      	lsls	r2, r2, #4
 800cb26:	b2d2      	uxtb	r2, r2
 800cb28:	440b      	add	r3, r1
 800cb2a:	761a      	strb	r2, [r3, #24]
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	e000e100 	.word	0xe000e100
 800cb3c:	e000ed00 	.word	0xe000ed00

0800cb40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cb44:	4b05      	ldr	r3, [pc, #20]	; (800cb5c <SysTick_Handler+0x1c>)
 800cb46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cb48:	f002 f900 	bl	800ed4c <xTaskGetSchedulerState>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d001      	beq.n	800cb56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cb52:	f002 ffa1 	bl	800fa98 <xPortSysTickHandler>
  }
}
 800cb56:	bf00      	nop
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	e000e010 	.word	0xe000e010

0800cb60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb60:	b580      	push	{r7, lr}
 800cb62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cb64:	2100      	movs	r1, #0
 800cb66:	f06f 0004 	mvn.w	r0, #4
 800cb6a:	f7ff ffbf 	bl	800caec <__NVIC_SetPriority>
#endif
}
 800cb6e:	bf00      	nop
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb7a:	f3ef 8305 	mrs	r3, IPSR
 800cb7e:	603b      	str	r3, [r7, #0]
  return(result);
 800cb80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d003      	beq.n	800cb8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cb86:	f06f 0305 	mvn.w	r3, #5
 800cb8a:	607b      	str	r3, [r7, #4]
 800cb8c:	e00c      	b.n	800cba8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cb8e:	4b0a      	ldr	r3, [pc, #40]	; (800cbb8 <osKernelInitialize+0x44>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d105      	bne.n	800cba2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cb96:	4b08      	ldr	r3, [pc, #32]	; (800cbb8 <osKernelInitialize+0x44>)
 800cb98:	2201      	movs	r2, #1
 800cb9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	607b      	str	r3, [r7, #4]
 800cba0:	e002      	b.n	800cba8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cba2:	f04f 33ff 	mov.w	r3, #4294967295
 800cba6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cba8:	687b      	ldr	r3, [r7, #4]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	20001524 	.word	0x20001524

0800cbbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbc2:	f3ef 8305 	mrs	r3, IPSR
 800cbc6:	603b      	str	r3, [r7, #0]
  return(result);
 800cbc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cbce:	f06f 0305 	mvn.w	r3, #5
 800cbd2:	607b      	str	r3, [r7, #4]
 800cbd4:	e010      	b.n	800cbf8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cbd6:	4b0b      	ldr	r3, [pc, #44]	; (800cc04 <osKernelStart+0x48>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d109      	bne.n	800cbf2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cbde:	f7ff ffbf 	bl	800cb60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cbe2:	4b08      	ldr	r3, [pc, #32]	; (800cc04 <osKernelStart+0x48>)
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cbe8:	f001 fad0 	bl	800e18c <vTaskStartScheduler>
      stat = osOK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	607b      	str	r3, [r7, #4]
 800cbf0:	e002      	b.n	800cbf8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cbf2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cbf8:	687b      	ldr	r3, [r7, #4]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	20001524 	.word	0x20001524

0800cc08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b08e      	sub	sp, #56	; 0x38
 800cc0c:	af04      	add	r7, sp, #16
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc14:	2300      	movs	r3, #0
 800cc16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc18:	f3ef 8305 	mrs	r3, IPSR
 800cc1c:	617b      	str	r3, [r7, #20]
  return(result);
 800cc1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d17e      	bne.n	800cd22 <osThreadNew+0x11a>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d07b      	beq.n	800cd22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cc2a:	2380      	movs	r3, #128	; 0x80
 800cc2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cc2e:	2318      	movs	r3, #24
 800cc30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cc36:	f04f 33ff 	mov.w	r3, #4294967295
 800cc3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d045      	beq.n	800ccce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <osThreadNew+0x48>
        name = attr->name;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	699b      	ldr	r3, [r3, #24]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	699b      	ldr	r3, [r3, #24]
 800cc5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d008      	beq.n	800cc76 <osThreadNew+0x6e>
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	2b38      	cmp	r3, #56	; 0x38
 800cc68:	d805      	bhi.n	800cc76 <osThreadNew+0x6e>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	f003 0301 	and.w	r3, r3, #1
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <osThreadNew+0x72>
        return (NULL);
 800cc76:	2300      	movs	r3, #0
 800cc78:	e054      	b.n	800cd24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d003      	beq.n	800cc8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	089b      	lsrs	r3, r3, #2
 800cc88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00e      	beq.n	800ccb0 <osThreadNew+0xa8>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	2bbf      	cmp	r3, #191	; 0xbf
 800cc98:	d90a      	bls.n	800ccb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d006      	beq.n	800ccb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <osThreadNew+0xa8>
        mem = 1;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	61bb      	str	r3, [r7, #24]
 800ccae:	e010      	b.n	800ccd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d10c      	bne.n	800ccd2 <osThreadNew+0xca>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d108      	bne.n	800ccd2 <osThreadNew+0xca>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d104      	bne.n	800ccd2 <osThreadNew+0xca>
          mem = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	61bb      	str	r3, [r7, #24]
 800cccc:	e001      	b.n	800ccd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d110      	bne.n	800ccfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cce0:	9202      	str	r2, [sp, #8]
 800cce2:	9301      	str	r3, [sp, #4]
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	6a3a      	ldr	r2, [r7, #32]
 800ccec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f000 fff6 	bl	800dce0 <xTaskCreateStatic>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	613b      	str	r3, [r7, #16]
 800ccf8:	e013      	b.n	800cd22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d110      	bne.n	800cd22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	f107 0310 	add.w	r3, r7, #16
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f001 f841 	bl	800dd9a <xTaskCreate>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d001      	beq.n	800cd22 <osThreadNew+0x11a>
            hTask = NULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd22:	693b      	ldr	r3, [r7, #16]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3728      	adds	r7, #40	; 0x28
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd34:	f3ef 8305 	mrs	r3, IPSR
 800cd38:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d003      	beq.n	800cd48 <osDelay+0x1c>
    stat = osErrorISR;
 800cd40:	f06f 0305 	mvn.w	r3, #5
 800cd44:	60fb      	str	r3, [r7, #12]
 800cd46:	e007      	b.n	800cd58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d002      	beq.n	800cd58 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f001 f980 	bl	800e058 <vTaskDelay>
    }
  }

  return (stat);
 800cd58:	68fb      	ldr	r3, [r7, #12]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b08a      	sub	sp, #40	; 0x28
 800cd66:	af02      	add	r7, sp, #8
 800cd68:	60f8      	str	r0, [r7, #12]
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd72:	f3ef 8305 	mrs	r3, IPSR
 800cd76:	613b      	str	r3, [r7, #16]
  return(result);
 800cd78:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d15f      	bne.n	800ce3e <osMessageQueueNew+0xdc>
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d05c      	beq.n	800ce3e <osMessageQueueNew+0xdc>
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d059      	beq.n	800ce3e <osMessageQueueNew+0xdc>
    mem = -1;
 800cd8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d029      	beq.n	800cdea <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d012      	beq.n	800cdc4 <osMessageQueueNew+0x62>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	2b4f      	cmp	r3, #79	; 0x4f
 800cda4:	d90e      	bls.n	800cdc4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00a      	beq.n	800cdc4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	695a      	ldr	r2, [r3, #20]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	68b9      	ldr	r1, [r7, #8]
 800cdb6:	fb01 f303 	mul.w	r3, r1, r3
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d302      	bcc.n	800cdc4 <osMessageQueueNew+0x62>
        mem = 1;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	61bb      	str	r3, [r7, #24]
 800cdc2:	e014      	b.n	800cdee <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d110      	bne.n	800cdee <osMessageQueueNew+0x8c>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10c      	bne.n	800cdee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d108      	bne.n	800cdee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	695b      	ldr	r3, [r3, #20]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d104      	bne.n	800cdee <osMessageQueueNew+0x8c>
          mem = 0;
 800cde4:	2300      	movs	r3, #0
 800cde6:	61bb      	str	r3, [r7, #24]
 800cde8:	e001      	b.n	800cdee <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d10b      	bne.n	800ce0c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	691a      	ldr	r2, [r3, #16]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	9100      	str	r1, [sp, #0]
 800ce00:	68b9      	ldr	r1, [r7, #8]
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f000 fa2e 	bl	800d264 <xQueueGenericCreateStatic>
 800ce08:	61f8      	str	r0, [r7, #28]
 800ce0a:	e008      	b.n	800ce1e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d105      	bne.n	800ce1e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ce12:	2200      	movs	r2, #0
 800ce14:	68b9      	ldr	r1, [r7, #8]
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f000 fa9c 	bl	800d354 <xQueueGenericCreate>
 800ce1c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00c      	beq.n	800ce3e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d003      	beq.n	800ce32 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	617b      	str	r3, [r7, #20]
 800ce30:	e001      	b.n	800ce36 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ce32:	2300      	movs	r3, #0
 800ce34:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ce36:	6979      	ldr	r1, [r7, #20]
 800ce38:	69f8      	ldr	r0, [r7, #28]
 800ce3a:	f000 fef3 	bl	800dc24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ce3e:	69fb      	ldr	r3, [r7, #28]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3720      	adds	r7, #32
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	603b      	str	r3, [r7, #0]
 800ce54:	4613      	mov	r3, r2
 800ce56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce60:	f3ef 8305 	mrs	r3, IPSR
 800ce64:	617b      	str	r3, [r7, #20]
  return(result);
 800ce66:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d028      	beq.n	800cebe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d005      	beq.n	800ce7e <osMessageQueuePut+0x36>
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <osMessageQueuePut+0x36>
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ce7e:	f06f 0303 	mvn.w	r3, #3
 800ce82:	61fb      	str	r3, [r7, #28]
 800ce84:	e038      	b.n	800cef8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ce86:	2300      	movs	r3, #0
 800ce88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ce8a:	f107 0210 	add.w	r2, r7, #16
 800ce8e:	2300      	movs	r3, #0
 800ce90:	68b9      	ldr	r1, [r7, #8]
 800ce92:	69b8      	ldr	r0, [r7, #24]
 800ce94:	f000 fbba 	bl	800d60c <xQueueGenericSendFromISR>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d003      	beq.n	800cea6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ce9e:	f06f 0302 	mvn.w	r3, #2
 800cea2:	61fb      	str	r3, [r7, #28]
 800cea4:	e028      	b.n	800cef8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d025      	beq.n	800cef8 <osMessageQueuePut+0xb0>
 800ceac:	4b15      	ldr	r3, [pc, #84]	; (800cf04 <osMessageQueuePut+0xbc>)
 800ceae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	e01c      	b.n	800cef8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <osMessageQueuePut+0x82>
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d103      	bne.n	800ced2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ceca:	f06f 0303 	mvn.w	r3, #3
 800cece:	61fb      	str	r3, [r7, #28]
 800ced0:	e012      	b.n	800cef8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ced2:	2300      	movs	r3, #0
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	68b9      	ldr	r1, [r7, #8]
 800ced8:	69b8      	ldr	r0, [r7, #24]
 800ceda:	f000 fa99 	bl	800d410 <xQueueGenericSend>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d009      	beq.n	800cef8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d003      	beq.n	800cef2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ceea:	f06f 0301 	mvn.w	r3, #1
 800ceee:	61fb      	str	r3, [r7, #28]
 800cef0:	e002      	b.n	800cef8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cef2:	f06f 0302 	mvn.w	r3, #2
 800cef6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cef8:	69fb      	ldr	r3, [r7, #28]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3720      	adds	r7, #32
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	e000ed04 	.word	0xe000ed04

0800cf08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b088      	sub	sp, #32
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
 800cf14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf1e:	f3ef 8305 	mrs	r3, IPSR
 800cf22:	617b      	str	r3, [r7, #20]
  return(result);
 800cf24:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d028      	beq.n	800cf7c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d005      	beq.n	800cf3c <osMessageQueueGet+0x34>
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d002      	beq.n	800cf3c <osMessageQueueGet+0x34>
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d003      	beq.n	800cf44 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cf3c:	f06f 0303 	mvn.w	r3, #3
 800cf40:	61fb      	str	r3, [r7, #28]
 800cf42:	e037      	b.n	800cfb4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cf44:	2300      	movs	r3, #0
 800cf46:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cf48:	f107 0310 	add.w	r3, r7, #16
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	68b9      	ldr	r1, [r7, #8]
 800cf50:	69b8      	ldr	r0, [r7, #24]
 800cf52:	f000 fcd7 	bl	800d904 <xQueueReceiveFromISR>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d003      	beq.n	800cf64 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cf5c:	f06f 0302 	mvn.w	r3, #2
 800cf60:	61fb      	str	r3, [r7, #28]
 800cf62:	e027      	b.n	800cfb4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d024      	beq.n	800cfb4 <osMessageQueueGet+0xac>
 800cf6a:	4b15      	ldr	r3, [pc, #84]	; (800cfc0 <osMessageQueueGet+0xb8>)
 800cf6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf70:	601a      	str	r2, [r3, #0]
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	e01b      	b.n	800cfb4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d002      	beq.n	800cf88 <osMessageQueueGet+0x80>
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d103      	bne.n	800cf90 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cf88:	f06f 0303 	mvn.w	r3, #3
 800cf8c:	61fb      	str	r3, [r7, #28]
 800cf8e:	e011      	b.n	800cfb4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cf90:	683a      	ldr	r2, [r7, #0]
 800cf92:	68b9      	ldr	r1, [r7, #8]
 800cf94:	69b8      	ldr	r0, [r7, #24]
 800cf96:	f000 fbd5 	bl	800d744 <xQueueReceive>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d009      	beq.n	800cfb4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d003      	beq.n	800cfae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cfa6:	f06f 0301 	mvn.w	r3, #1
 800cfaa:	61fb      	str	r3, [r7, #28]
 800cfac:	e002      	b.n	800cfb4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cfae:	f06f 0302 	mvn.w	r3, #2
 800cfb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cfb4:	69fb      	ldr	r3, [r7, #28]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3720      	adds	r7, #32
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	e000ed04 	.word	0xe000ed04

0800cfc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	4a07      	ldr	r2, [pc, #28]	; (800cff0 <vApplicationGetIdleTaskMemory+0x2c>)
 800cfd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	4a06      	ldr	r2, [pc, #24]	; (800cff4 <vApplicationGetIdleTaskMemory+0x30>)
 800cfda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2280      	movs	r2, #128	; 0x80
 800cfe0:	601a      	str	r2, [r3, #0]
}
 800cfe2:	bf00      	nop
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	20001528 	.word	0x20001528
 800cff4:	200015e8 	.word	0x200015e8

0800cff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4a07      	ldr	r2, [pc, #28]	; (800d024 <vApplicationGetTimerTaskMemory+0x2c>)
 800d008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	4a06      	ldr	r2, [pc, #24]	; (800d028 <vApplicationGetTimerTaskMemory+0x30>)
 800d00e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d016:	601a      	str	r2, [r3, #0]
}
 800d018:	bf00      	nop
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr
 800d024:	200017e8 	.word	0x200017e8
 800d028:	200018a8 	.word	0x200018a8

0800d02c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f103 0208 	add.w	r2, r3, #8
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f04f 32ff 	mov.w	r2, #4294967295
 800d044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f103 0208 	add.w	r2, r3, #8
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f103 0208 	add.w	r2, r3, #8
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d07a:	bf00      	nop
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d086:	b480      	push	{r7}
 800d088:	b085      	sub	sp, #20
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	689a      	ldr	r2, [r3, #8]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	1c5a      	adds	r2, r3, #1
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	601a      	str	r2, [r3, #0]
}
 800d0c2:	bf00      	nop
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b085      	sub	sp, #20
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e4:	d103      	bne.n	800d0ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	60fb      	str	r3, [r7, #12]
 800d0ec:	e00c      	b.n	800d108 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	60fb      	str	r3, [r7, #12]
 800d0f4:	e002      	b.n	800d0fc <vListInsert+0x2e>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	429a      	cmp	r2, r3
 800d106:	d2f6      	bcs.n	800d0f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	685a      	ldr	r2, [r3, #4]
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	683a      	ldr	r2, [r7, #0]
 800d122:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	601a      	str	r2, [r3, #0]
}
 800d134:	bf00      	nop
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	6892      	ldr	r2, [r2, #8]
 800d156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	6852      	ldr	r2, [r2, #4]
 800d160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d103      	bne.n	800d174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	689a      	ldr	r2, [r3, #8]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	1e5a      	subs	r2, r3, #1
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3714      	adds	r7, #20
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10a      	bne.n	800d1be <xQueueGenericReset+0x2a>
	__asm volatile
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	f383 8811 	msr	BASEPRI, r3
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	60bb      	str	r3, [r7, #8]
}
 800d1ba:	bf00      	nop
 800d1bc:	e7fe      	b.n	800d1bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d1be:	f002 fbd9 	bl	800f974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ca:	68f9      	ldr	r1, [r7, #12]
 800d1cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1ce:	fb01 f303 	mul.w	r3, r1, r3
 800d1d2:	441a      	add	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	68f9      	ldr	r1, [r7, #12]
 800d1f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1f4:	fb01 f303 	mul.w	r3, r1, r3
 800d1f8:	441a      	add	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	22ff      	movs	r2, #255	; 0xff
 800d202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	22ff      	movs	r2, #255	; 0xff
 800d20a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d114      	bne.n	800d23e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	691b      	ldr	r3, [r3, #16]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d01a      	beq.n	800d252 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	3310      	adds	r3, #16
 800d220:	4618      	mov	r0, r3
 800d222:	f001 fafb 	bl	800e81c <xTaskRemoveFromEventList>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d012      	beq.n	800d252 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d22c:	4b0c      	ldr	r3, [pc, #48]	; (800d260 <xQueueGenericReset+0xcc>)
 800d22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d232:	601a      	str	r2, [r3, #0]
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	e009      	b.n	800d252 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3310      	adds	r3, #16
 800d242:	4618      	mov	r0, r3
 800d244:	f7ff fef2 	bl	800d02c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	3324      	adds	r3, #36	; 0x24
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7ff feed 	bl	800d02c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d252:	f002 fbbf 	bl	800f9d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d256:	2301      	movs	r3, #1
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	e000ed04 	.word	0xe000ed04

0800d264 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d264:	b580      	push	{r7, lr}
 800d266:	b08e      	sub	sp, #56	; 0x38
 800d268:	af02      	add	r7, sp, #8
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10a      	bne.n	800d28e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27c:	f383 8811 	msr	BASEPRI, r3
 800d280:	f3bf 8f6f 	isb	sy
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d28a:	bf00      	nop
 800d28c:	e7fe      	b.n	800d28c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d10a      	bne.n	800d2aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d298:	f383 8811 	msr	BASEPRI, r3
 800d29c:	f3bf 8f6f 	isb	sy
 800d2a0:	f3bf 8f4f 	dsb	sy
 800d2a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2a6:	bf00      	nop
 800d2a8:	e7fe      	b.n	800d2a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <xQueueGenericCreateStatic+0x52>
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d001      	beq.n	800d2ba <xQueueGenericCreateStatic+0x56>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e000      	b.n	800d2bc <xQueueGenericCreateStatic+0x58>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10a      	bne.n	800d2d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c4:	f383 8811 	msr	BASEPRI, r3
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	623b      	str	r3, [r7, #32]
}
 800d2d2:	bf00      	nop
 800d2d4:	e7fe      	b.n	800d2d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d102      	bne.n	800d2e2 <xQueueGenericCreateStatic+0x7e>
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <xQueueGenericCreateStatic+0x82>
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e000      	b.n	800d2e8 <xQueueGenericCreateStatic+0x84>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d10a      	bne.n	800d302 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	61fb      	str	r3, [r7, #28]
}
 800d2fe:	bf00      	nop
 800d300:	e7fe      	b.n	800d300 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d302:	2350      	movs	r3, #80	; 0x50
 800d304:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	2b50      	cmp	r3, #80	; 0x50
 800d30a:	d00a      	beq.n	800d322 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	61bb      	str	r3, [r7, #24]
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d322:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00d      	beq.n	800d34a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	2201      	movs	r2, #1
 800d332:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d336:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	4613      	mov	r3, r2
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	68b9      	ldr	r1, [r7, #8]
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f000 f83f 	bl	800d3c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3730      	adds	r7, #48	; 0x30
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d354:	b580      	push	{r7, lr}
 800d356:	b08a      	sub	sp, #40	; 0x28
 800d358:	af02      	add	r7, sp, #8
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	4613      	mov	r3, r2
 800d360:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10a      	bne.n	800d37e <xQueueGenericCreate+0x2a>
	__asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36c:	f383 8811 	msr	BASEPRI, r3
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	613b      	str	r3, [r7, #16]
}
 800d37a:	bf00      	nop
 800d37c:	e7fe      	b.n	800d37c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	fb02 f303 	mul.w	r3, r2, r3
 800d386:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	3350      	adds	r3, #80	; 0x50
 800d38c:	4618      	mov	r0, r3
 800d38e:	f002 fc13 	bl	800fbb8 <pvPortMalloc>
 800d392:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d011      	beq.n	800d3be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	3350      	adds	r3, #80	; 0x50
 800d3a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d3ac:	79fa      	ldrb	r2, [r7, #7]
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	697a      	ldr	r2, [r7, #20]
 800d3b6:	68b9      	ldr	r1, [r7, #8]
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f000 f805 	bl	800d3c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d3be:	69bb      	ldr	r3, [r7, #24]
	}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3720      	adds	r7, #32
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d103      	bne.n	800d3e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d3dc:	69bb      	ldr	r3, [r7, #24]
 800d3de:	69ba      	ldr	r2, [r7, #24]
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	e002      	b.n	800d3ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d3f6:	2101      	movs	r1, #1
 800d3f8:	69b8      	ldr	r0, [r7, #24]
 800d3fa:	f7ff fecb 	bl	800d194 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	78fa      	ldrb	r2, [r7, #3]
 800d402:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d406:	bf00      	nop
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
	...

0800d410 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b08e      	sub	sp, #56	; 0x38
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]
 800d41c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d41e:	2300      	movs	r3, #0
 800d420:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10a      	bne.n	800d442 <xQueueGenericSend+0x32>
	__asm volatile
 800d42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d430:	f383 8811 	msr	BASEPRI, r3
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d43e:	bf00      	nop
 800d440:	e7fe      	b.n	800d440 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d103      	bne.n	800d450 <xQueueGenericSend+0x40>
 800d448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d101      	bne.n	800d454 <xQueueGenericSend+0x44>
 800d450:	2301      	movs	r3, #1
 800d452:	e000      	b.n	800d456 <xQueueGenericSend+0x46>
 800d454:	2300      	movs	r3, #0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10a      	bne.n	800d470 <xQueueGenericSend+0x60>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d46c:	bf00      	nop
 800d46e:	e7fe      	b.n	800d46e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	2b02      	cmp	r3, #2
 800d474:	d103      	bne.n	800d47e <xQueueGenericSend+0x6e>
 800d476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d101      	bne.n	800d482 <xQueueGenericSend+0x72>
 800d47e:	2301      	movs	r3, #1
 800d480:	e000      	b.n	800d484 <xQueueGenericSend+0x74>
 800d482:	2300      	movs	r3, #0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10a      	bne.n	800d49e <xQueueGenericSend+0x8e>
	__asm volatile
 800d488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	623b      	str	r3, [r7, #32]
}
 800d49a:	bf00      	nop
 800d49c:	e7fe      	b.n	800d49c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d49e:	f001 fc55 	bl	800ed4c <xTaskGetSchedulerState>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d102      	bne.n	800d4ae <xQueueGenericSend+0x9e>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <xQueueGenericSend+0xa2>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e000      	b.n	800d4b4 <xQueueGenericSend+0xa4>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10a      	bne.n	800d4ce <xQueueGenericSend+0xbe>
	__asm volatile
 800d4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4bc:	f383 8811 	msr	BASEPRI, r3
 800d4c0:	f3bf 8f6f 	isb	sy
 800d4c4:	f3bf 8f4f 	dsb	sy
 800d4c8:	61fb      	str	r3, [r7, #28]
}
 800d4ca:	bf00      	nop
 800d4cc:	e7fe      	b.n	800d4cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4ce:	f002 fa51 	bl	800f974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d302      	bcc.n	800d4e4 <xQueueGenericSend+0xd4>
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d129      	bne.n	800d538 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	68b9      	ldr	r1, [r7, #8]
 800d4e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4ea:	f000 fa8b 	bl	800da04 <prvCopyDataToQueue>
 800d4ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d010      	beq.n	800d51a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fa:	3324      	adds	r3, #36	; 0x24
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f001 f98d 	bl	800e81c <xTaskRemoveFromEventList>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d013      	beq.n	800d530 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d508:	4b3f      	ldr	r3, [pc, #252]	; (800d608 <xQueueGenericSend+0x1f8>)
 800d50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d50e:	601a      	str	r2, [r3, #0]
 800d510:	f3bf 8f4f 	dsb	sy
 800d514:	f3bf 8f6f 	isb	sy
 800d518:	e00a      	b.n	800d530 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d007      	beq.n	800d530 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d520:	4b39      	ldr	r3, [pc, #228]	; (800d608 <xQueueGenericSend+0x1f8>)
 800d522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d526:	601a      	str	r2, [r3, #0]
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d530:	f002 fa50 	bl	800f9d4 <vPortExitCritical>
				return pdPASS;
 800d534:	2301      	movs	r3, #1
 800d536:	e063      	b.n	800d600 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d103      	bne.n	800d546 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d53e:	f002 fa49 	bl	800f9d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d542:	2300      	movs	r3, #0
 800d544:	e05c      	b.n	800d600 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d106      	bne.n	800d55a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d54c:	f107 0314 	add.w	r3, r7, #20
 800d550:	4618      	mov	r0, r3
 800d552:	f001 f9c7 	bl	800e8e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d556:	2301      	movs	r3, #1
 800d558:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d55a:	f002 fa3b 	bl	800f9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d55e:	f000 fe87 	bl	800e270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d562:	f002 fa07 	bl	800f974 <vPortEnterCritical>
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d56c:	b25b      	sxtb	r3, r3
 800d56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d572:	d103      	bne.n	800d57c <xQueueGenericSend+0x16c>
 800d574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d576:	2200      	movs	r2, #0
 800d578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d582:	b25b      	sxtb	r3, r3
 800d584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d588:	d103      	bne.n	800d592 <xQueueGenericSend+0x182>
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d592:	f002 fa1f 	bl	800f9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d596:	1d3a      	adds	r2, r7, #4
 800d598:	f107 0314 	add.w	r3, r7, #20
 800d59c:	4611      	mov	r1, r2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f001 f9b6 	bl	800e910 <xTaskCheckForTimeOut>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d124      	bne.n	800d5f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d5aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ac:	f000 fb22 	bl	800dbf4 <prvIsQueueFull>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d018      	beq.n	800d5e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	3310      	adds	r3, #16
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f001 f8dc 	bl	800e77c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d5c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5c6:	f000 faad 	bl	800db24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d5ca:	f000 fe5f 	bl	800e28c <xTaskResumeAll>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f47f af7c 	bne.w	800d4ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d5d6:	4b0c      	ldr	r3, [pc, #48]	; (800d608 <xQueueGenericSend+0x1f8>)
 800d5d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	e772      	b.n	800d4ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d5e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ea:	f000 fa9b 	bl	800db24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5ee:	f000 fe4d 	bl	800e28c <xTaskResumeAll>
 800d5f2:	e76c      	b.n	800d4ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d5f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5f6:	f000 fa95 	bl	800db24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5fa:	f000 fe47 	bl	800e28c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d5fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d600:	4618      	mov	r0, r3
 800d602:	3738      	adds	r7, #56	; 0x38
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	e000ed04 	.word	0xe000ed04

0800d60c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b090      	sub	sp, #64	; 0x40
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
 800d618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10a      	bne.n	800d63a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d636:	bf00      	nop
 800d638:	e7fe      	b.n	800d638 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d103      	bne.n	800d648 <xQueueGenericSendFromISR+0x3c>
 800d640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d644:	2b00      	cmp	r3, #0
 800d646:	d101      	bne.n	800d64c <xQueueGenericSendFromISR+0x40>
 800d648:	2301      	movs	r3, #1
 800d64a:	e000      	b.n	800d64e <xQueueGenericSendFromISR+0x42>
 800d64c:	2300      	movs	r3, #0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d10a      	bne.n	800d668 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d656:	f383 8811 	msr	BASEPRI, r3
 800d65a:	f3bf 8f6f 	isb	sy
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d664:	bf00      	nop
 800d666:	e7fe      	b.n	800d666 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d103      	bne.n	800d676 <xQueueGenericSendFromISR+0x6a>
 800d66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d672:	2b01      	cmp	r3, #1
 800d674:	d101      	bne.n	800d67a <xQueueGenericSendFromISR+0x6e>
 800d676:	2301      	movs	r3, #1
 800d678:	e000      	b.n	800d67c <xQueueGenericSendFromISR+0x70>
 800d67a:	2300      	movs	r3, #0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10a      	bne.n	800d696 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	623b      	str	r3, [r7, #32]
}
 800d692:	bf00      	nop
 800d694:	e7fe      	b.n	800d694 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d696:	f002 fa4f 	bl	800fb38 <vPortValidateInterruptPriority>
	__asm volatile
 800d69a:	f3ef 8211 	mrs	r2, BASEPRI
 800d69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	61fa      	str	r2, [r7, #28]
 800d6b0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d6b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d302      	bcc.n	800d6c8 <xQueueGenericSendFromISR+0xbc>
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d12f      	bne.n	800d728 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	68b9      	ldr	r1, [r7, #8]
 800d6dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6de:	f000 f991 	bl	800da04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d6e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ea:	d112      	bne.n	800d712 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d016      	beq.n	800d722 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f6:	3324      	adds	r3, #36	; 0x24
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f001 f88f 	bl	800e81c <xTaskRemoveFromEventList>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00e      	beq.n	800d722 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00b      	beq.n	800d722 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	601a      	str	r2, [r3, #0]
 800d710:	e007      	b.n	800d722 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d716:	3301      	adds	r3, #1
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	b25a      	sxtb	r2, r3
 800d71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d722:	2301      	movs	r3, #1
 800d724:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d726:	e001      	b.n	800d72c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d728:	2300      	movs	r3, #0
 800d72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d72e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	f383 8811 	msr	BASEPRI, r3
}
 800d736:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3740      	adds	r7, #64	; 0x40
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
	...

0800d744 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08c      	sub	sp, #48	; 0x30
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d750:	2300      	movs	r3, #0
 800d752:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d10a      	bne.n	800d774 <xQueueReceive+0x30>
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	623b      	str	r3, [r7, #32]
}
 800d770:	bf00      	nop
 800d772:	e7fe      	b.n	800d772 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d103      	bne.n	800d782 <xQueueReceive+0x3e>
 800d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d101      	bne.n	800d786 <xQueueReceive+0x42>
 800d782:	2301      	movs	r3, #1
 800d784:	e000      	b.n	800d788 <xQueueReceive+0x44>
 800d786:	2300      	movs	r3, #0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d10a      	bne.n	800d7a2 <xQueueReceive+0x5e>
	__asm volatile
 800d78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	61fb      	str	r3, [r7, #28]
}
 800d79e:	bf00      	nop
 800d7a0:	e7fe      	b.n	800d7a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7a2:	f001 fad3 	bl	800ed4c <xTaskGetSchedulerState>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d102      	bne.n	800d7b2 <xQueueReceive+0x6e>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d101      	bne.n	800d7b6 <xQueueReceive+0x72>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e000      	b.n	800d7b8 <xQueueReceive+0x74>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d10a      	bne.n	800d7d2 <xQueueReceive+0x8e>
	__asm volatile
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	61bb      	str	r3, [r7, #24]
}
 800d7ce:	bf00      	nop
 800d7d0:	e7fe      	b.n	800d7d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7d2:	f002 f8cf 	bl	800f974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d01f      	beq.n	800d822 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d7e2:	68b9      	ldr	r1, [r7, #8]
 800d7e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7e6:	f000 f977 	bl	800dad8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ec:	1e5a      	subs	r2, r3, #1
 800d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00f      	beq.n	800d81a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	3310      	adds	r3, #16
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 f80c 	bl	800e81c <xTaskRemoveFromEventList>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d007      	beq.n	800d81a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d80a:	4b3d      	ldr	r3, [pc, #244]	; (800d900 <xQueueReceive+0x1bc>)
 800d80c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d810:	601a      	str	r2, [r3, #0]
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d81a:	f002 f8db 	bl	800f9d4 <vPortExitCritical>
				return pdPASS;
 800d81e:	2301      	movs	r3, #1
 800d820:	e069      	b.n	800d8f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d103      	bne.n	800d830 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d828:	f002 f8d4 	bl	800f9d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d82c:	2300      	movs	r3, #0
 800d82e:	e062      	b.n	800d8f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	2b00      	cmp	r3, #0
 800d834:	d106      	bne.n	800d844 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d836:	f107 0310 	add.w	r3, r7, #16
 800d83a:	4618      	mov	r0, r3
 800d83c:	f001 f852 	bl	800e8e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d840:	2301      	movs	r3, #1
 800d842:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d844:	f002 f8c6 	bl	800f9d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d848:	f000 fd12 	bl	800e270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d84c:	f002 f892 	bl	800f974 <vPortEnterCritical>
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d856:	b25b      	sxtb	r3, r3
 800d858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d85c:	d103      	bne.n	800d866 <xQueueReceive+0x122>
 800d85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d860:	2200      	movs	r2, #0
 800d862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d86c:	b25b      	sxtb	r3, r3
 800d86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d872:	d103      	bne.n	800d87c <xQueueReceive+0x138>
 800d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d876:	2200      	movs	r2, #0
 800d878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d87c:	f002 f8aa 	bl	800f9d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d880:	1d3a      	adds	r2, r7, #4
 800d882:	f107 0310 	add.w	r3, r7, #16
 800d886:	4611      	mov	r1, r2
 800d888:	4618      	mov	r0, r3
 800d88a:	f001 f841 	bl	800e910 <xTaskCheckForTimeOut>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d123      	bne.n	800d8dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d896:	f000 f997 	bl	800dbc8 <prvIsQueueEmpty>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d017      	beq.n	800d8d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a2:	3324      	adds	r3, #36	; 0x24
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	4611      	mov	r1, r2
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f000 ff67 	bl	800e77c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8b0:	f000 f938 	bl	800db24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8b4:	f000 fcea 	bl	800e28c <xTaskResumeAll>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d189      	bne.n	800d7d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d8be:	4b10      	ldr	r3, [pc, #64]	; (800d900 <xQueueReceive+0x1bc>)
 800d8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8c4:	601a      	str	r2, [r3, #0]
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	e780      	b.n	800d7d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8d2:	f000 f927 	bl	800db24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8d6:	f000 fcd9 	bl	800e28c <xTaskResumeAll>
 800d8da:	e77a      	b.n	800d7d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d8dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8de:	f000 f921 	bl	800db24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8e2:	f000 fcd3 	bl	800e28c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8e8:	f000 f96e 	bl	800dbc8 <prvIsQueueEmpty>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f43f af6f 	beq.w	800d7d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d8f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3730      	adds	r7, #48	; 0x30
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	e000ed04 	.word	0xe000ed04

0800d904 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b08e      	sub	sp, #56	; 0x38
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	2b00      	cmp	r3, #0
 800d918:	d10a      	bne.n	800d930 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	623b      	str	r3, [r7, #32]
}
 800d92c:	bf00      	nop
 800d92e:	e7fe      	b.n	800d92e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d103      	bne.n	800d93e <xQueueReceiveFromISR+0x3a>
 800d936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d101      	bne.n	800d942 <xQueueReceiveFromISR+0x3e>
 800d93e:	2301      	movs	r3, #1
 800d940:	e000      	b.n	800d944 <xQueueReceiveFromISR+0x40>
 800d942:	2300      	movs	r3, #0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10a      	bne.n	800d95e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94c:	f383 8811 	msr	BASEPRI, r3
 800d950:	f3bf 8f6f 	isb	sy
 800d954:	f3bf 8f4f 	dsb	sy
 800d958:	61fb      	str	r3, [r7, #28]
}
 800d95a:	bf00      	nop
 800d95c:	e7fe      	b.n	800d95c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d95e:	f002 f8eb 	bl	800fb38 <vPortValidateInterruptPriority>
	__asm volatile
 800d962:	f3ef 8211 	mrs	r2, BASEPRI
 800d966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96a:	f383 8811 	msr	BASEPRI, r3
 800d96e:	f3bf 8f6f 	isb	sy
 800d972:	f3bf 8f4f 	dsb	sy
 800d976:	61ba      	str	r2, [r7, #24]
 800d978:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d97a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d97c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d982:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d986:	2b00      	cmp	r3, #0
 800d988:	d02f      	beq.n	800d9ea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d994:	68b9      	ldr	r1, [r7, #8]
 800d996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d998:	f000 f89e 	bl	800dad8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99e:	1e5a      	subs	r2, r3, #1
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d9a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ac:	d112      	bne.n	800d9d4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d016      	beq.n	800d9e4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b8:	3310      	adds	r3, #16
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 ff2e 	bl	800e81c <xTaskRemoveFromEventList>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00e      	beq.n	800d9e4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00b      	beq.n	800d9e4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	e007      	b.n	800d9e4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9d8:	3301      	adds	r3, #1
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	b25a      	sxtb	r2, r3
 800d9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800d9e8:	e001      	b.n	800d9ee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800d9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	f383 8811 	msr	BASEPRI, r3
}
 800d9f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3738      	adds	r7, #56	; 0x38
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da10:	2300      	movs	r3, #0
 800da12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10d      	bne.n	800da3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d14d      	bne.n	800dac6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	4618      	mov	r0, r3
 800da30:	f001 f9aa 	bl	800ed88 <xTaskPriorityDisinherit>
 800da34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2200      	movs	r2, #0
 800da3a:	609a      	str	r2, [r3, #8]
 800da3c:	e043      	b.n	800dac6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d119      	bne.n	800da78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6858      	ldr	r0, [r3, #4]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da4c:	461a      	mov	r2, r3
 800da4e:	68b9      	ldr	r1, [r7, #8]
 800da50:	f002 ffe6 	bl	8010a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	685a      	ldr	r2, [r3, #4]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da5c:	441a      	add	r2, r3
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	685a      	ldr	r2, [r3, #4]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d32b      	bcc.n	800dac6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	605a      	str	r2, [r3, #4]
 800da76:	e026      	b.n	800dac6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	68d8      	ldr	r0, [r3, #12]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da80:	461a      	mov	r2, r3
 800da82:	68b9      	ldr	r1, [r7, #8]
 800da84:	f002 ffcc 	bl	8010a20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	68da      	ldr	r2, [r3, #12]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da90:	425b      	negs	r3, r3
 800da92:	441a      	add	r2, r3
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	68da      	ldr	r2, [r3, #12]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d207      	bcs.n	800dab4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	689a      	ldr	r2, [r3, #8]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daac:	425b      	negs	r3, r3
 800daae:	441a      	add	r2, r3
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b02      	cmp	r3, #2
 800dab8:	d105      	bne.n	800dac6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d002      	beq.n	800dac6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	3b01      	subs	r3, #1
 800dac4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	1c5a      	adds	r2, r3, #1
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dace:	697b      	ldr	r3, [r7, #20]
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3718      	adds	r7, #24
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d018      	beq.n	800db1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	68da      	ldr	r2, [r3, #12]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daf2:	441a      	add	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	68da      	ldr	r2, [r3, #12]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	429a      	cmp	r2, r3
 800db02:	d303      	bcc.n	800db0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68d9      	ldr	r1, [r3, #12]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db14:	461a      	mov	r2, r3
 800db16:	6838      	ldr	r0, [r7, #0]
 800db18:	f002 ff82 	bl	8010a20 <memcpy>
	}
}
 800db1c:	bf00      	nop
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800db2c:	f001 ff22 	bl	800f974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db38:	e011      	b.n	800db5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d012      	beq.n	800db68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	3324      	adds	r3, #36	; 0x24
 800db46:	4618      	mov	r0, r3
 800db48:	f000 fe68 	bl	800e81c <xTaskRemoveFromEventList>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d001      	beq.n	800db56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800db52:	f000 ff3f 	bl	800e9d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db56:	7bfb      	ldrb	r3, [r7, #15]
 800db58:	3b01      	subs	r3, #1
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db62:	2b00      	cmp	r3, #0
 800db64:	dce9      	bgt.n	800db3a <prvUnlockQueue+0x16>
 800db66:	e000      	b.n	800db6a <prvUnlockQueue+0x46>
					break;
 800db68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	22ff      	movs	r2, #255	; 0xff
 800db6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800db72:	f001 ff2f 	bl	800f9d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db76:	f001 fefd 	bl	800f974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db82:	e011      	b.n	800dba8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	691b      	ldr	r3, [r3, #16]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d012      	beq.n	800dbb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	3310      	adds	r3, #16
 800db90:	4618      	mov	r0, r3
 800db92:	f000 fe43 	bl	800e81c <xTaskRemoveFromEventList>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db9c:	f000 ff1a 	bl	800e9d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dba0:	7bbb      	ldrb	r3, [r7, #14]
 800dba2:	3b01      	subs	r3, #1
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	dce9      	bgt.n	800db84 <prvUnlockQueue+0x60>
 800dbb0:	e000      	b.n	800dbb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dbb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	22ff      	movs	r2, #255	; 0xff
 800dbb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dbbc:	f001 ff0a 	bl	800f9d4 <vPortExitCritical>
}
 800dbc0:	bf00      	nop
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dbd0:	f001 fed0 	bl	800f974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d102      	bne.n	800dbe2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	e001      	b.n	800dbe6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbe6:	f001 fef5 	bl	800f9d4 <vPortExitCritical>

	return xReturn;
 800dbea:	68fb      	ldr	r3, [r7, #12]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dbfc:	f001 feba 	bl	800f974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d102      	bne.n	800dc12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	60fb      	str	r3, [r7, #12]
 800dc10:	e001      	b.n	800dc16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dc12:	2300      	movs	r3, #0
 800dc14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc16:	f001 fedd 	bl	800f9d4 <vPortExitCritical>

	return xReturn;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc2e:	2300      	movs	r3, #0
 800dc30:	60fb      	str	r3, [r7, #12]
 800dc32:	e014      	b.n	800dc5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc34:	4a0f      	ldr	r2, [pc, #60]	; (800dc74 <vQueueAddToRegistry+0x50>)
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10b      	bne.n	800dc58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc40:	490c      	ldr	r1, [pc, #48]	; (800dc74 <vQueueAddToRegistry+0x50>)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	683a      	ldr	r2, [r7, #0]
 800dc46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc4a:	4a0a      	ldr	r2, [pc, #40]	; (800dc74 <vQueueAddToRegistry+0x50>)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	00db      	lsls	r3, r3, #3
 800dc50:	4413      	add	r3, r2
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc56:	e006      	b.n	800dc66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	60fb      	str	r3, [r7, #12]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2b07      	cmp	r3, #7
 800dc62:	d9e7      	bls.n	800dc34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dc64:	bf00      	nop
 800dc66:	bf00      	nop
 800dc68:	3714      	adds	r7, #20
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	20001ca8 	.word	0x20001ca8

0800dc78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dc88:	f001 fe74 	bl	800f974 <vPortEnterCritical>
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc92:	b25b      	sxtb	r3, r3
 800dc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc98:	d103      	bne.n	800dca2 <vQueueWaitForMessageRestricted+0x2a>
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dca8:	b25b      	sxtb	r3, r3
 800dcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcae:	d103      	bne.n	800dcb8 <vQueueWaitForMessageRestricted+0x40>
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dcb8:	f001 fe8c 	bl	800f9d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d106      	bne.n	800dcd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	3324      	adds	r3, #36	; 0x24
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	68b9      	ldr	r1, [r7, #8]
 800dccc:	4618      	mov	r0, r3
 800dcce:	f000 fd79 	bl	800e7c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dcd2:	6978      	ldr	r0, [r7, #20]
 800dcd4:	f7ff ff26 	bl	800db24 <prvUnlockQueue>
	}
 800dcd8:	bf00      	nop
 800dcda:	3718      	adds	r7, #24
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b08e      	sub	sp, #56	; 0x38
 800dce4:	af04      	add	r7, sp, #16
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	607a      	str	r2, [r7, #4]
 800dcec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d10a      	bne.n	800dd0a <xTaskCreateStatic+0x2a>
	__asm volatile
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	623b      	str	r3, [r7, #32]
}
 800dd06:	bf00      	nop
 800dd08:	e7fe      	b.n	800dd08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10a      	bne.n	800dd26 <xTaskCreateStatic+0x46>
	__asm volatile
 800dd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd14:	f383 8811 	msr	BASEPRI, r3
 800dd18:	f3bf 8f6f 	isb	sy
 800dd1c:	f3bf 8f4f 	dsb	sy
 800dd20:	61fb      	str	r3, [r7, #28]
}
 800dd22:	bf00      	nop
 800dd24:	e7fe      	b.n	800dd24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dd26:	23c0      	movs	r3, #192	; 0xc0
 800dd28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	2bc0      	cmp	r3, #192	; 0xc0
 800dd2e:	d00a      	beq.n	800dd46 <xTaskCreateStatic+0x66>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	61bb      	str	r3, [r7, #24]
}
 800dd42:	bf00      	nop
 800dd44:	e7fe      	b.n	800dd44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dd46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d01e      	beq.n	800dd8c <xTaskCreateStatic+0xac>
 800dd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d01b      	beq.n	800dd8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd60:	2202      	movs	r2, #2
 800dd62:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dd66:	2300      	movs	r3, #0
 800dd68:	9303      	str	r3, [sp, #12]
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6c:	9302      	str	r3, [sp, #8]
 800dd6e:	f107 0314 	add.w	r3, r7, #20
 800dd72:	9301      	str	r3, [sp, #4]
 800dd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	68b9      	ldr	r1, [r7, #8]
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f000 f850 	bl	800de24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd86:	f000 f8f7 	bl	800df78 <prvAddNewTaskToReadyList>
 800dd8a:	e001      	b.n	800dd90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd90:	697b      	ldr	r3, [r7, #20]
	}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3728      	adds	r7, #40	; 0x28
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b08c      	sub	sp, #48	; 0x30
 800dd9e:	af04      	add	r7, sp, #16
 800dda0:	60f8      	str	r0, [r7, #12]
 800dda2:	60b9      	str	r1, [r7, #8]
 800dda4:	603b      	str	r3, [r7, #0]
 800dda6:	4613      	mov	r3, r2
 800dda8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ddaa:	88fb      	ldrh	r3, [r7, #6]
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f001 ff02 	bl	800fbb8 <pvPortMalloc>
 800ddb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00e      	beq.n	800ddda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ddbc:	20c0      	movs	r0, #192	; 0xc0
 800ddbe:	f001 fefb 	bl	800fbb8 <pvPortMalloc>
 800ddc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d003      	beq.n	800ddd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ddca:	69fb      	ldr	r3, [r7, #28]
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	631a      	str	r2, [r3, #48]	; 0x30
 800ddd0:	e005      	b.n	800ddde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ddd2:	6978      	ldr	r0, [r7, #20]
 800ddd4:	f001 ffbc 	bl	800fd50 <vPortFree>
 800ddd8:	e001      	b.n	800ddde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ddda:	2300      	movs	r3, #0
 800dddc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d017      	beq.n	800de14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ddec:	88fa      	ldrh	r2, [r7, #6]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	9303      	str	r3, [sp, #12]
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	9302      	str	r3, [sp, #8]
 800ddf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf8:	9301      	str	r3, [sp, #4]
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	68b9      	ldr	r1, [r7, #8]
 800de02:	68f8      	ldr	r0, [r7, #12]
 800de04:	f000 f80e 	bl	800de24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de08:	69f8      	ldr	r0, [r7, #28]
 800de0a:	f000 f8b5 	bl	800df78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800de0e:	2301      	movs	r3, #1
 800de10:	61bb      	str	r3, [r7, #24]
 800de12:	e002      	b.n	800de1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800de14:	f04f 33ff 	mov.w	r3, #4294967295
 800de18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800de1a:	69bb      	ldr	r3, [r7, #24]
	}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3720      	adds	r7, #32
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
 800de30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800de32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	461a      	mov	r2, r3
 800de3c:	21a5      	movs	r1, #165	; 0xa5
 800de3e:	f002 fdfd 	bl	8010a3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800de42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800de4c:	3b01      	subs	r3, #1
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	f023 0307 	bic.w	r3, r3, #7
 800de5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	f003 0307 	and.w	r3, r3, #7
 800de62:	2b00      	cmp	r3, #0
 800de64:	d00a      	beq.n	800de7c <prvInitialiseNewTask+0x58>
	__asm volatile
 800de66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	617b      	str	r3, [r7, #20]
}
 800de78:	bf00      	nop
 800de7a:	e7fe      	b.n	800de7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d01f      	beq.n	800dec2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de82:	2300      	movs	r3, #0
 800de84:	61fb      	str	r3, [r7, #28]
 800de86:	e012      	b.n	800deae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	4413      	add	r3, r2
 800de8e:	7819      	ldrb	r1, [r3, #0]
 800de90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	4413      	add	r3, r2
 800de96:	3334      	adds	r3, #52	; 0x34
 800de98:	460a      	mov	r2, r1
 800de9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	4413      	add	r3, r2
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d006      	beq.n	800deb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	3301      	adds	r3, #1
 800deac:	61fb      	str	r3, [r7, #28]
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	2b0f      	cmp	r3, #15
 800deb2:	d9e9      	bls.n	800de88 <prvInitialiseNewTask+0x64>
 800deb4:	e000      	b.n	800deb8 <prvInitialiseNewTask+0x94>
			{
				break;
 800deb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800deb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deba:	2200      	movs	r2, #0
 800debc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dec0:	e003      	b.n	800deca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800deca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800decc:	2b37      	cmp	r3, #55	; 0x37
 800dece:	d901      	bls.n	800ded4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ded0:	2337      	movs	r3, #55	; 0x37
 800ded2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ded8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800deda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dedc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dede:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee2:	2200      	movs	r2, #0
 800dee4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee8:	3304      	adds	r3, #4
 800deea:	4618      	mov	r0, r3
 800deec:	f7ff f8be 	bl	800d06c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800def0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def2:	3318      	adds	r3, #24
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff f8b9 	bl	800d06c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800defa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800defe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800df10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df12:	2200      	movs	r2, #0
 800df14:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	2200      	movs	r2, #0
 800df1a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df20:	2200      	movs	r2, #0
 800df22:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	3358      	adds	r3, #88	; 0x58
 800df2a:	2260      	movs	r2, #96	; 0x60
 800df2c:	2100      	movs	r1, #0
 800df2e:	4618      	mov	r0, r3
 800df30:	f002 fd84 	bl	8010a3c <memset>
 800df34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df36:	4a0d      	ldr	r2, [pc, #52]	; (800df6c <prvInitialiseNewTask+0x148>)
 800df38:	65da      	str	r2, [r3, #92]	; 0x5c
 800df3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3c:	4a0c      	ldr	r2, [pc, #48]	; (800df70 <prvInitialiseNewTask+0x14c>)
 800df3e:	661a      	str	r2, [r3, #96]	; 0x60
 800df40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df42:	4a0c      	ldr	r2, [pc, #48]	; (800df74 <prvInitialiseNewTask+0x150>)
 800df44:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	68f9      	ldr	r1, [r7, #12]
 800df4a:	69b8      	ldr	r0, [r7, #24]
 800df4c:	f001 fbe8 	bl	800f720 <pxPortInitialiseStack>
 800df50:	4602      	mov	r2, r0
 800df52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800df56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d002      	beq.n	800df62 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df62:	bf00      	nop
 800df64:	3720      	adds	r7, #32
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	080139d8 	.word	0x080139d8
 800df70:	080139f8 	.word	0x080139f8
 800df74:	080139b8 	.word	0x080139b8

0800df78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df80:	f001 fcf8 	bl	800f974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df84:	4b2d      	ldr	r3, [pc, #180]	; (800e03c <prvAddNewTaskToReadyList+0xc4>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	3301      	adds	r3, #1
 800df8a:	4a2c      	ldr	r2, [pc, #176]	; (800e03c <prvAddNewTaskToReadyList+0xc4>)
 800df8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df8e:	4b2c      	ldr	r3, [pc, #176]	; (800e040 <prvAddNewTaskToReadyList+0xc8>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d109      	bne.n	800dfaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df96:	4a2a      	ldr	r2, [pc, #168]	; (800e040 <prvAddNewTaskToReadyList+0xc8>)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df9c:	4b27      	ldr	r3, [pc, #156]	; (800e03c <prvAddNewTaskToReadyList+0xc4>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d110      	bne.n	800dfc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dfa4:	f000 fd3c 	bl	800ea20 <prvInitialiseTaskLists>
 800dfa8:	e00d      	b.n	800dfc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dfaa:	4b26      	ldr	r3, [pc, #152]	; (800e044 <prvAddNewTaskToReadyList+0xcc>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d109      	bne.n	800dfc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dfb2:	4b23      	ldr	r3, [pc, #140]	; (800e040 <prvAddNewTaskToReadyList+0xc8>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d802      	bhi.n	800dfc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dfc0:	4a1f      	ldr	r2, [pc, #124]	; (800e040 <prvAddNewTaskToReadyList+0xc8>)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dfc6:	4b20      	ldr	r3, [pc, #128]	; (800e048 <prvAddNewTaskToReadyList+0xd0>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	4a1e      	ldr	r2, [pc, #120]	; (800e048 <prvAddNewTaskToReadyList+0xd0>)
 800dfce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dfd0:	4b1d      	ldr	r3, [pc, #116]	; (800e048 <prvAddNewTaskToReadyList+0xd0>)
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfdc:	4b1b      	ldr	r3, [pc, #108]	; (800e04c <prvAddNewTaskToReadyList+0xd4>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d903      	bls.n	800dfec <prvAddNewTaskToReadyList+0x74>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe8:	4a18      	ldr	r2, [pc, #96]	; (800e04c <prvAddNewTaskToReadyList+0xd4>)
 800dfea:	6013      	str	r3, [r2, #0]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff0:	4613      	mov	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4413      	add	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4a15      	ldr	r2, [pc, #84]	; (800e050 <prvAddNewTaskToReadyList+0xd8>)
 800dffa:	441a      	add	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	3304      	adds	r3, #4
 800e000:	4619      	mov	r1, r3
 800e002:	4610      	mov	r0, r2
 800e004:	f7ff f83f 	bl	800d086 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e008:	f001 fce4 	bl	800f9d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e00c:	4b0d      	ldr	r3, [pc, #52]	; (800e044 <prvAddNewTaskToReadyList+0xcc>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00e      	beq.n	800e032 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e014:	4b0a      	ldr	r3, [pc, #40]	; (800e040 <prvAddNewTaskToReadyList+0xc8>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01e:	429a      	cmp	r2, r3
 800e020:	d207      	bcs.n	800e032 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e022:	4b0c      	ldr	r3, [pc, #48]	; (800e054 <prvAddNewTaskToReadyList+0xdc>)
 800e024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e028:	601a      	str	r2, [r3, #0]
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e032:	bf00      	nop
 800e034:	3708      	adds	r7, #8
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	200021bc 	.word	0x200021bc
 800e040:	20001ce8 	.word	0x20001ce8
 800e044:	200021c8 	.word	0x200021c8
 800e048:	200021d8 	.word	0x200021d8
 800e04c:	200021c4 	.word	0x200021c4
 800e050:	20001cec 	.word	0x20001cec
 800e054:	e000ed04 	.word	0xe000ed04

0800e058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e060:	2300      	movs	r3, #0
 800e062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d017      	beq.n	800e09a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e06a:	4b13      	ldr	r3, [pc, #76]	; (800e0b8 <vTaskDelay+0x60>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00a      	beq.n	800e088 <vTaskDelay+0x30>
	__asm volatile
 800e072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e076:	f383 8811 	msr	BASEPRI, r3
 800e07a:	f3bf 8f6f 	isb	sy
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	60bb      	str	r3, [r7, #8]
}
 800e084:	bf00      	nop
 800e086:	e7fe      	b.n	800e086 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e088:	f000 f8f2 	bl	800e270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e08c:	2100      	movs	r1, #0
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 ffa4 	bl	800efdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e094:	f000 f8fa 	bl	800e28c <xTaskResumeAll>
 800e098:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d107      	bne.n	800e0b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e0a0:	4b06      	ldr	r3, [pc, #24]	; (800e0bc <vTaskDelay+0x64>)
 800e0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0a6:	601a      	str	r2, [r3, #0]
 800e0a8:	f3bf 8f4f 	dsb	sy
 800e0ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0b0:	bf00      	nop
 800e0b2:	3710      	adds	r7, #16
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	200021e4 	.word	0x200021e4
 800e0bc:	e000ed04 	.word	0xe000ed04

0800e0c0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b088      	sub	sp, #32
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d10a      	bne.n	800e0e8 <eTaskGetState+0x28>
	__asm volatile
 800e0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d6:	f383 8811 	msr	BASEPRI, r3
 800e0da:	f3bf 8f6f 	isb	sy
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	60bb      	str	r3, [r7, #8]
}
 800e0e4:	bf00      	nop
 800e0e6:	e7fe      	b.n	800e0e6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800e0e8:	4b23      	ldr	r3, [pc, #140]	; (800e178 <eTaskGetState+0xb8>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	69ba      	ldr	r2, [r7, #24]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d102      	bne.n	800e0f8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	77fb      	strb	r3, [r7, #31]
 800e0f6:	e03a      	b.n	800e16e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800e0f8:	f001 fc3c 	bl	800f974 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	695b      	ldr	r3, [r3, #20]
 800e100:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800e102:	4b1e      	ldr	r3, [pc, #120]	; (800e17c <eTaskGetState+0xbc>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800e108:	4b1d      	ldr	r3, [pc, #116]	; (800e180 <eTaskGetState+0xc0>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800e10e:	f001 fc61 	bl	800f9d4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800e112:	697a      	ldr	r2, [r7, #20]
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	429a      	cmp	r2, r3
 800e118:	d003      	beq.n	800e122 <eTaskGetState+0x62>
 800e11a:	697a      	ldr	r2, [r7, #20]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d102      	bne.n	800e128 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800e122:	2302      	movs	r3, #2
 800e124:	77fb      	strb	r3, [r7, #31]
 800e126:	e022      	b.n	800e16e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	4a16      	ldr	r2, [pc, #88]	; (800e184 <eTaskGetState+0xc4>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d112      	bne.n	800e156 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10b      	bne.n	800e150 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e138:	69bb      	ldr	r3, [r7, #24]
 800e13a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	2b01      	cmp	r3, #1
 800e142:	d102      	bne.n	800e14a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800e144:	2302      	movs	r3, #2
 800e146:	77fb      	strb	r3, [r7, #31]
 800e148:	e011      	b.n	800e16e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800e14a:	2303      	movs	r3, #3
 800e14c:	77fb      	strb	r3, [r7, #31]
 800e14e:	e00e      	b.n	800e16e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800e150:	2302      	movs	r3, #2
 800e152:	77fb      	strb	r3, [r7, #31]
 800e154:	e00b      	b.n	800e16e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	4a0b      	ldr	r2, [pc, #44]	; (800e188 <eTaskGetState+0xc8>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d002      	beq.n	800e164 <eTaskGetState+0xa4>
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d102      	bne.n	800e16a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800e164:	2304      	movs	r3, #4
 800e166:	77fb      	strb	r3, [r7, #31]
 800e168:	e001      	b.n	800e16e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800e16a:	2301      	movs	r3, #1
 800e16c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800e16e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e170:	4618      	mov	r0, r3
 800e172:	3720      	adds	r7, #32
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20001ce8 	.word	0x20001ce8
 800e17c:	20002174 	.word	0x20002174
 800e180:	20002178 	.word	0x20002178
 800e184:	200021a8 	.word	0x200021a8
 800e188:	20002190 	.word	0x20002190

0800e18c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08a      	sub	sp, #40	; 0x28
 800e190:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e192:	2300      	movs	r3, #0
 800e194:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e196:	2300      	movs	r3, #0
 800e198:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e19a:	463a      	mov	r2, r7
 800e19c:	1d39      	adds	r1, r7, #4
 800e19e:	f107 0308 	add.w	r3, r7, #8
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe ff0e 	bl	800cfc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1a8:	6839      	ldr	r1, [r7, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	9202      	str	r2, [sp, #8]
 800e1b0:	9301      	str	r3, [sp, #4]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	460a      	mov	r2, r1
 800e1ba:	4925      	ldr	r1, [pc, #148]	; (800e250 <vTaskStartScheduler+0xc4>)
 800e1bc:	4825      	ldr	r0, [pc, #148]	; (800e254 <vTaskStartScheduler+0xc8>)
 800e1be:	f7ff fd8f 	bl	800dce0 <xTaskCreateStatic>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	4a24      	ldr	r2, [pc, #144]	; (800e258 <vTaskStartScheduler+0xcc>)
 800e1c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e1c8:	4b23      	ldr	r3, [pc, #140]	; (800e258 <vTaskStartScheduler+0xcc>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d002      	beq.n	800e1d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	617b      	str	r3, [r7, #20]
 800e1d4:	e001      	b.n	800e1da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d102      	bne.n	800e1e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1e0:	f000 ff50 	bl	800f084 <xTimerCreateTimerTask>
 800e1e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d11d      	bne.n	800e228 <vTaskStartScheduler+0x9c>
	__asm volatile
 800e1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f0:	f383 8811 	msr	BASEPRI, r3
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	613b      	str	r3, [r7, #16]
}
 800e1fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e200:	4b16      	ldr	r3, [pc, #88]	; (800e25c <vTaskStartScheduler+0xd0>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	3358      	adds	r3, #88	; 0x58
 800e206:	4a16      	ldr	r2, [pc, #88]	; (800e260 <vTaskStartScheduler+0xd4>)
 800e208:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e20a:	4b16      	ldr	r3, [pc, #88]	; (800e264 <vTaskStartScheduler+0xd8>)
 800e20c:	f04f 32ff 	mov.w	r2, #4294967295
 800e210:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e212:	4b15      	ldr	r3, [pc, #84]	; (800e268 <vTaskStartScheduler+0xdc>)
 800e214:	2201      	movs	r2, #1
 800e216:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e218:	4b14      	ldr	r3, [pc, #80]	; (800e26c <vTaskStartScheduler+0xe0>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e21e:	f7f3 fa53 	bl	80016c8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e222:	f001 fb05 	bl	800f830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e226:	e00e      	b.n	800e246 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22e:	d10a      	bne.n	800e246 <vTaskStartScheduler+0xba>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	60fb      	str	r3, [r7, #12]
}
 800e242:	bf00      	nop
 800e244:	e7fe      	b.n	800e244 <vTaskStartScheduler+0xb8>
}
 800e246:	bf00      	nop
 800e248:	3718      	adds	r7, #24
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	08011754 	.word	0x08011754
 800e254:	0800e9ed 	.word	0x0800e9ed
 800e258:	200021e0 	.word	0x200021e0
 800e25c:	20001ce8 	.word	0x20001ce8
 800e260:	2000018c 	.word	0x2000018c
 800e264:	200021dc 	.word	0x200021dc
 800e268:	200021c8 	.word	0x200021c8
 800e26c:	200021c0 	.word	0x200021c0

0800e270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e270:	b480      	push	{r7}
 800e272:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e274:	4b04      	ldr	r3, [pc, #16]	; (800e288 <vTaskSuspendAll+0x18>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	3301      	adds	r3, #1
 800e27a:	4a03      	ldr	r2, [pc, #12]	; (800e288 <vTaskSuspendAll+0x18>)
 800e27c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e27e:	bf00      	nop
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	200021e4 	.word	0x200021e4

0800e28c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e292:	2300      	movs	r3, #0
 800e294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e296:	2300      	movs	r3, #0
 800e298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e29a:	4b42      	ldr	r3, [pc, #264]	; (800e3a4 <xTaskResumeAll+0x118>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d10a      	bne.n	800e2b8 <xTaskResumeAll+0x2c>
	__asm volatile
 800e2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	603b      	str	r3, [r7, #0]
}
 800e2b4:	bf00      	nop
 800e2b6:	e7fe      	b.n	800e2b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e2b8:	f001 fb5c 	bl	800f974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e2bc:	4b39      	ldr	r3, [pc, #228]	; (800e3a4 <xTaskResumeAll+0x118>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	4a38      	ldr	r2, [pc, #224]	; (800e3a4 <xTaskResumeAll+0x118>)
 800e2c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2c6:	4b37      	ldr	r3, [pc, #220]	; (800e3a4 <xTaskResumeAll+0x118>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d162      	bne.n	800e394 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2ce:	4b36      	ldr	r3, [pc, #216]	; (800e3a8 <xTaskResumeAll+0x11c>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d05e      	beq.n	800e394 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2d6:	e02f      	b.n	800e338 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2d8:	4b34      	ldr	r3, [pc, #208]	; (800e3ac <xTaskResumeAll+0x120>)
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	3318      	adds	r3, #24
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7fe ff2b 	bl	800d140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fe ff26 	bl	800d140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f8:	4b2d      	ldr	r3, [pc, #180]	; (800e3b0 <xTaskResumeAll+0x124>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d903      	bls.n	800e308 <xTaskResumeAll+0x7c>
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e304:	4a2a      	ldr	r2, [pc, #168]	; (800e3b0 <xTaskResumeAll+0x124>)
 800e306:	6013      	str	r3, [r2, #0]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e30c:	4613      	mov	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4a27      	ldr	r2, [pc, #156]	; (800e3b4 <xTaskResumeAll+0x128>)
 800e316:	441a      	add	r2, r3
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	3304      	adds	r3, #4
 800e31c:	4619      	mov	r1, r3
 800e31e:	4610      	mov	r0, r2
 800e320:	f7fe feb1 	bl	800d086 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e328:	4b23      	ldr	r3, [pc, #140]	; (800e3b8 <xTaskResumeAll+0x12c>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e32e:	429a      	cmp	r2, r3
 800e330:	d302      	bcc.n	800e338 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e332:	4b22      	ldr	r3, [pc, #136]	; (800e3bc <xTaskResumeAll+0x130>)
 800e334:	2201      	movs	r2, #1
 800e336:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e338:	4b1c      	ldr	r3, [pc, #112]	; (800e3ac <xTaskResumeAll+0x120>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d1cb      	bne.n	800e2d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d001      	beq.n	800e34a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e346:	f000 fce1 	bl	800ed0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e34a:	4b1d      	ldr	r3, [pc, #116]	; (800e3c0 <xTaskResumeAll+0x134>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d010      	beq.n	800e378 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e356:	f000 f8d7 	bl	800e508 <xTaskIncrementTick>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d002      	beq.n	800e366 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e360:	4b16      	ldr	r3, [pc, #88]	; (800e3bc <xTaskResumeAll+0x130>)
 800e362:	2201      	movs	r2, #1
 800e364:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	3b01      	subs	r3, #1
 800e36a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1f1      	bne.n	800e356 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e372:	4b13      	ldr	r3, [pc, #76]	; (800e3c0 <xTaskResumeAll+0x134>)
 800e374:	2200      	movs	r2, #0
 800e376:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e378:	4b10      	ldr	r3, [pc, #64]	; (800e3bc <xTaskResumeAll+0x130>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d009      	beq.n	800e394 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e380:	2301      	movs	r3, #1
 800e382:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e384:	4b0f      	ldr	r3, [pc, #60]	; (800e3c4 <xTaskResumeAll+0x138>)
 800e386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e38a:	601a      	str	r2, [r3, #0]
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e394:	f001 fb1e 	bl	800f9d4 <vPortExitCritical>

	return xAlreadyYielded;
 800e398:	68bb      	ldr	r3, [r7, #8]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	200021e4 	.word	0x200021e4
 800e3a8:	200021bc 	.word	0x200021bc
 800e3ac:	2000217c 	.word	0x2000217c
 800e3b0:	200021c4 	.word	0x200021c4
 800e3b4:	20001cec 	.word	0x20001cec
 800e3b8:	20001ce8 	.word	0x20001ce8
 800e3bc:	200021d0 	.word	0x200021d0
 800e3c0:	200021cc 	.word	0x200021cc
 800e3c4:	e000ed04 	.word	0xe000ed04

0800e3c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e3ce:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <xTaskGetTickCount+0x1c>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e3d4:	687b      	ldr	r3, [r7, #4]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	370c      	adds	r7, #12
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop
 800e3e4:	200021c0 	.word	0x200021c0

0800e3e8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b086      	sub	sp, #24
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	617b      	str	r3, [r7, #20]
 800e3f8:	2338      	movs	r3, #56	; 0x38
 800e3fa:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800e3fc:	f7ff ff38 	bl	800e270 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e400:	4b3b      	ldr	r3, [pc, #236]	; (800e4f0 <uxTaskGetSystemState+0x108>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	429a      	cmp	r2, r3
 800e408:	d36a      	bcc.n	800e4e0 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	3b01      	subs	r3, #1
 800e40e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e410:	697a      	ldr	r2, [r7, #20]
 800e412:	4613      	mov	r3, r2
 800e414:	00db      	lsls	r3, r3, #3
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	461a      	mov	r2, r3
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	1898      	adds	r0, r3, r2
 800e420:	693a      	ldr	r2, [r7, #16]
 800e422:	4613      	mov	r3, r2
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4413      	add	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4a32      	ldr	r2, [pc, #200]	; (800e4f4 <uxTaskGetSystemState+0x10c>)
 800e42c:	4413      	add	r3, r2
 800e42e:	2201      	movs	r2, #1
 800e430:	4619      	mov	r1, r3
 800e432:	f000 fbc9 	bl	800ebc8 <prvListTasksWithinSingleList>
 800e436:	4602      	mov	r2, r0
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	4413      	add	r3, r2
 800e43c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1e2      	bne.n	800e40a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e444:	697a      	ldr	r2, [r7, #20]
 800e446:	4613      	mov	r3, r2
 800e448:	00db      	lsls	r3, r3, #3
 800e44a:	4413      	add	r3, r2
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	461a      	mov	r2, r3
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	4413      	add	r3, r2
 800e454:	4a28      	ldr	r2, [pc, #160]	; (800e4f8 <uxTaskGetSystemState+0x110>)
 800e456:	6811      	ldr	r1, [r2, #0]
 800e458:	2202      	movs	r2, #2
 800e45a:	4618      	mov	r0, r3
 800e45c:	f000 fbb4 	bl	800ebc8 <prvListTasksWithinSingleList>
 800e460:	4602      	mov	r2, r0
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	4413      	add	r3, r2
 800e466:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e468:	697a      	ldr	r2, [r7, #20]
 800e46a:	4613      	mov	r3, r2
 800e46c:	00db      	lsls	r3, r3, #3
 800e46e:	4413      	add	r3, r2
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	461a      	mov	r2, r3
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	4413      	add	r3, r2
 800e478:	4a20      	ldr	r2, [pc, #128]	; (800e4fc <uxTaskGetSystemState+0x114>)
 800e47a:	6811      	ldr	r1, [r2, #0]
 800e47c:	2202      	movs	r2, #2
 800e47e:	4618      	mov	r0, r3
 800e480:	f000 fba2 	bl	800ebc8 <prvListTasksWithinSingleList>
 800e484:	4602      	mov	r2, r0
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	4413      	add	r3, r2
 800e48a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e48c:	697a      	ldr	r2, [r7, #20]
 800e48e:	4613      	mov	r3, r2
 800e490:	00db      	lsls	r3, r3, #3
 800e492:	4413      	add	r3, r2
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	461a      	mov	r2, r3
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	4413      	add	r3, r2
 800e49c:	2204      	movs	r2, #4
 800e49e:	4918      	ldr	r1, [pc, #96]	; (800e500 <uxTaskGetSystemState+0x118>)
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f000 fb91 	bl	800ebc8 <prvListTasksWithinSingleList>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e4ae:	697a      	ldr	r2, [r7, #20]
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	00db      	lsls	r3, r3, #3
 800e4b4:	4413      	add	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	4413      	add	r3, r2
 800e4be:	2203      	movs	r2, #3
 800e4c0:	4910      	ldr	r1, [pc, #64]	; (800e504 <uxTaskGetSystemState+0x11c>)
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f000 fb80 	bl	800ebc8 <prvListTasksWithinSingleList>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d004      	beq.n	800e4e0 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e4d6:	f7f3 f8ff 	bl	80016d8 <getRunTimeCounterValue>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800e4e0:	f7ff fed4 	bl	800e28c <xTaskResumeAll>

		return uxTask;
 800e4e4:	697b      	ldr	r3, [r7, #20]
	}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3718      	adds	r7, #24
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	200021bc 	.word	0x200021bc
 800e4f4:	20001cec 	.word	0x20001cec
 800e4f8:	20002174 	.word	0x20002174
 800e4fc:	20002178 	.word	0x20002178
 800e500:	20002190 	.word	0x20002190
 800e504:	200021a8 	.word	0x200021a8

0800e508 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e50e:	2300      	movs	r3, #0
 800e510:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e512:	4b4f      	ldr	r3, [pc, #316]	; (800e650 <xTaskIncrementTick+0x148>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	f040 808f 	bne.w	800e63a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e51c:	4b4d      	ldr	r3, [pc, #308]	; (800e654 <xTaskIncrementTick+0x14c>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	3301      	adds	r3, #1
 800e522:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e524:	4a4b      	ldr	r2, [pc, #300]	; (800e654 <xTaskIncrementTick+0x14c>)
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d120      	bne.n	800e572 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e530:	4b49      	ldr	r3, [pc, #292]	; (800e658 <xTaskIncrementTick+0x150>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00a      	beq.n	800e550 <xTaskIncrementTick+0x48>
	__asm volatile
 800e53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53e:	f383 8811 	msr	BASEPRI, r3
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	f3bf 8f4f 	dsb	sy
 800e54a:	603b      	str	r3, [r7, #0]
}
 800e54c:	bf00      	nop
 800e54e:	e7fe      	b.n	800e54e <xTaskIncrementTick+0x46>
 800e550:	4b41      	ldr	r3, [pc, #260]	; (800e658 <xTaskIncrementTick+0x150>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	4b41      	ldr	r3, [pc, #260]	; (800e65c <xTaskIncrementTick+0x154>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a3f      	ldr	r2, [pc, #252]	; (800e658 <xTaskIncrementTick+0x150>)
 800e55c:	6013      	str	r3, [r2, #0]
 800e55e:	4a3f      	ldr	r2, [pc, #252]	; (800e65c <xTaskIncrementTick+0x154>)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	6013      	str	r3, [r2, #0]
 800e564:	4b3e      	ldr	r3, [pc, #248]	; (800e660 <xTaskIncrementTick+0x158>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	3301      	adds	r3, #1
 800e56a:	4a3d      	ldr	r2, [pc, #244]	; (800e660 <xTaskIncrementTick+0x158>)
 800e56c:	6013      	str	r3, [r2, #0]
 800e56e:	f000 fbcd 	bl	800ed0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e572:	4b3c      	ldr	r3, [pc, #240]	; (800e664 <xTaskIncrementTick+0x15c>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	693a      	ldr	r2, [r7, #16]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d349      	bcc.n	800e610 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e57c:	4b36      	ldr	r3, [pc, #216]	; (800e658 <xTaskIncrementTick+0x150>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d104      	bne.n	800e590 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e586:	4b37      	ldr	r3, [pc, #220]	; (800e664 <xTaskIncrementTick+0x15c>)
 800e588:	f04f 32ff 	mov.w	r2, #4294967295
 800e58c:	601a      	str	r2, [r3, #0]
					break;
 800e58e:	e03f      	b.n	800e610 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e590:	4b31      	ldr	r3, [pc, #196]	; (800e658 <xTaskIncrementTick+0x150>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5a0:	693a      	ldr	r2, [r7, #16]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d203      	bcs.n	800e5b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5a8:	4a2e      	ldr	r2, [pc, #184]	; (800e664 <xTaskIncrementTick+0x15c>)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5ae:	e02f      	b.n	800e610 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7fe fdc3 	bl	800d140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d004      	beq.n	800e5cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	3318      	adds	r3, #24
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7fe fdba 	bl	800d140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5d0:	4b25      	ldr	r3, [pc, #148]	; (800e668 <xTaskIncrementTick+0x160>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d903      	bls.n	800e5e0 <xTaskIncrementTick+0xd8>
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5dc:	4a22      	ldr	r2, [pc, #136]	; (800e668 <xTaskIncrementTick+0x160>)
 800e5de:	6013      	str	r3, [r2, #0]
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	4413      	add	r3, r2
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	4a1f      	ldr	r2, [pc, #124]	; (800e66c <xTaskIncrementTick+0x164>)
 800e5ee:	441a      	add	r2, r3
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	3304      	adds	r3, #4
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	f7fe fd45 	bl	800d086 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e600:	4b1b      	ldr	r3, [pc, #108]	; (800e670 <xTaskIncrementTick+0x168>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e606:	429a      	cmp	r2, r3
 800e608:	d3b8      	bcc.n	800e57c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e60a:	2301      	movs	r3, #1
 800e60c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e60e:	e7b5      	b.n	800e57c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e610:	4b17      	ldr	r3, [pc, #92]	; (800e670 <xTaskIncrementTick+0x168>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e616:	4915      	ldr	r1, [pc, #84]	; (800e66c <xTaskIncrementTick+0x164>)
 800e618:	4613      	mov	r3, r2
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	4413      	add	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	440b      	add	r3, r1
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2b01      	cmp	r3, #1
 800e626:	d901      	bls.n	800e62c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e628:	2301      	movs	r3, #1
 800e62a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e62c:	4b11      	ldr	r3, [pc, #68]	; (800e674 <xTaskIncrementTick+0x16c>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d007      	beq.n	800e644 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e634:	2301      	movs	r3, #1
 800e636:	617b      	str	r3, [r7, #20]
 800e638:	e004      	b.n	800e644 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e63a:	4b0f      	ldr	r3, [pc, #60]	; (800e678 <xTaskIncrementTick+0x170>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	3301      	adds	r3, #1
 800e640:	4a0d      	ldr	r2, [pc, #52]	; (800e678 <xTaskIncrementTick+0x170>)
 800e642:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e644:	697b      	ldr	r3, [r7, #20]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3718      	adds	r7, #24
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	200021e4 	.word	0x200021e4
 800e654:	200021c0 	.word	0x200021c0
 800e658:	20002174 	.word	0x20002174
 800e65c:	20002178 	.word	0x20002178
 800e660:	200021d4 	.word	0x200021d4
 800e664:	200021dc 	.word	0x200021dc
 800e668:	200021c4 	.word	0x200021c4
 800e66c:	20001cec 	.word	0x20001cec
 800e670:	20001ce8 	.word	0x20001ce8
 800e674:	200021d0 	.word	0x200021d0
 800e678:	200021cc 	.word	0x200021cc

0800e67c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e682:	4b36      	ldr	r3, [pc, #216]	; (800e75c <vTaskSwitchContext+0xe0>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d003      	beq.n	800e692 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e68a:	4b35      	ldr	r3, [pc, #212]	; (800e760 <vTaskSwitchContext+0xe4>)
 800e68c:	2201      	movs	r2, #1
 800e68e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e690:	e05f      	b.n	800e752 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800e692:	4b33      	ldr	r3, [pc, #204]	; (800e760 <vTaskSwitchContext+0xe4>)
 800e694:	2200      	movs	r2, #0
 800e696:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e698:	f7f3 f81e 	bl	80016d8 <getRunTimeCounterValue>
 800e69c:	4603      	mov	r3, r0
 800e69e:	4a31      	ldr	r2, [pc, #196]	; (800e764 <vTaskSwitchContext+0xe8>)
 800e6a0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e6a2:	4b30      	ldr	r3, [pc, #192]	; (800e764 <vTaskSwitchContext+0xe8>)
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	4b30      	ldr	r3, [pc, #192]	; (800e768 <vTaskSwitchContext+0xec>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d909      	bls.n	800e6c2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e6ae:	4b2f      	ldr	r3, [pc, #188]	; (800e76c <vTaskSwitchContext+0xf0>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e6b4:	4a2b      	ldr	r2, [pc, #172]	; (800e764 <vTaskSwitchContext+0xe8>)
 800e6b6:	6810      	ldr	r0, [r2, #0]
 800e6b8:	4a2b      	ldr	r2, [pc, #172]	; (800e768 <vTaskSwitchContext+0xec>)
 800e6ba:	6812      	ldr	r2, [r2, #0]
 800e6bc:	1a82      	subs	r2, r0, r2
 800e6be:	440a      	add	r2, r1
 800e6c0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e6c2:	4b28      	ldr	r3, [pc, #160]	; (800e764 <vTaskSwitchContext+0xe8>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a28      	ldr	r2, [pc, #160]	; (800e768 <vTaskSwitchContext+0xec>)
 800e6c8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6ca:	4b29      	ldr	r3, [pc, #164]	; (800e770 <vTaskSwitchContext+0xf4>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	60fb      	str	r3, [r7, #12]
 800e6d0:	e010      	b.n	800e6f4 <vTaskSwitchContext+0x78>
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10a      	bne.n	800e6ee <vTaskSwitchContext+0x72>
	__asm volatile
 800e6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6dc:	f383 8811 	msr	BASEPRI, r3
 800e6e0:	f3bf 8f6f 	isb	sy
 800e6e4:	f3bf 8f4f 	dsb	sy
 800e6e8:	607b      	str	r3, [r7, #4]
}
 800e6ea:	bf00      	nop
 800e6ec:	e7fe      	b.n	800e6ec <vTaskSwitchContext+0x70>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	491f      	ldr	r1, [pc, #124]	; (800e774 <vTaskSwitchContext+0xf8>)
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4413      	add	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	440b      	add	r3, r1
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d0e4      	beq.n	800e6d2 <vTaskSwitchContext+0x56>
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	4613      	mov	r3, r2
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	4413      	add	r3, r2
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	4a18      	ldr	r2, [pc, #96]	; (800e774 <vTaskSwitchContext+0xf8>)
 800e714:	4413      	add	r3, r2
 800e716:	60bb      	str	r3, [r7, #8]
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	685a      	ldr	r2, [r3, #4]
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	605a      	str	r2, [r3, #4]
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	685a      	ldr	r2, [r3, #4]
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	3308      	adds	r3, #8
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d104      	bne.n	800e738 <vTaskSwitchContext+0xbc>
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	685a      	ldr	r2, [r3, #4]
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	605a      	str	r2, [r3, #4]
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	4a0b      	ldr	r2, [pc, #44]	; (800e76c <vTaskSwitchContext+0xf0>)
 800e740:	6013      	str	r3, [r2, #0]
 800e742:	4a0b      	ldr	r2, [pc, #44]	; (800e770 <vTaskSwitchContext+0xf4>)
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e748:	4b08      	ldr	r3, [pc, #32]	; (800e76c <vTaskSwitchContext+0xf0>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3358      	adds	r3, #88	; 0x58
 800e74e:	4a0a      	ldr	r2, [pc, #40]	; (800e778 <vTaskSwitchContext+0xfc>)
 800e750:	6013      	str	r3, [r2, #0]
}
 800e752:	bf00      	nop
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	200021e4 	.word	0x200021e4
 800e760:	200021d0 	.word	0x200021d0
 800e764:	200021ec 	.word	0x200021ec
 800e768:	200021e8 	.word	0x200021e8
 800e76c:	20001ce8 	.word	0x20001ce8
 800e770:	200021c4 	.word	0x200021c4
 800e774:	20001cec 	.word	0x20001cec
 800e778:	2000018c 	.word	0x2000018c

0800e77c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d10a      	bne.n	800e7a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e790:	f383 8811 	msr	BASEPRI, r3
 800e794:	f3bf 8f6f 	isb	sy
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	60fb      	str	r3, [r7, #12]
}
 800e79e:	bf00      	nop
 800e7a0:	e7fe      	b.n	800e7a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7a2:	4b07      	ldr	r3, [pc, #28]	; (800e7c0 <vTaskPlaceOnEventList+0x44>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	3318      	adds	r3, #24
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f7fe fc8f 	bl	800d0ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7b0:	2101      	movs	r1, #1
 800e7b2:	6838      	ldr	r0, [r7, #0]
 800e7b4:	f000 fc12 	bl	800efdc <prvAddCurrentTaskToDelayedList>
}
 800e7b8:	bf00      	nop
 800e7ba:	3710      	adds	r7, #16
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	20001ce8 	.word	0x20001ce8

0800e7c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10a      	bne.n	800e7ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	617b      	str	r3, [r7, #20]
}
 800e7e8:	bf00      	nop
 800e7ea:	e7fe      	b.n	800e7ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7ec:	4b0a      	ldr	r3, [pc, #40]	; (800e818 <vTaskPlaceOnEventListRestricted+0x54>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	3318      	adds	r3, #24
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f7fe fc46 	bl	800d086 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e800:	f04f 33ff 	mov.w	r3, #4294967295
 800e804:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e806:	6879      	ldr	r1, [r7, #4]
 800e808:	68b8      	ldr	r0, [r7, #8]
 800e80a:	f000 fbe7 	bl	800efdc <prvAddCurrentTaskToDelayedList>
	}
 800e80e:	bf00      	nop
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	20001ce8 	.word	0x20001ce8

0800e81c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b086      	sub	sp, #24
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d10a      	bne.n	800e848 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e836:	f383 8811 	msr	BASEPRI, r3
 800e83a:	f3bf 8f6f 	isb	sy
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	60fb      	str	r3, [r7, #12]
}
 800e844:	bf00      	nop
 800e846:	e7fe      	b.n	800e846 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	3318      	adds	r3, #24
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7fe fc77 	bl	800d140 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e852:	4b1e      	ldr	r3, [pc, #120]	; (800e8cc <xTaskRemoveFromEventList+0xb0>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d11d      	bne.n	800e896 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	3304      	adds	r3, #4
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fe fc6e 	bl	800d140 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e868:	4b19      	ldr	r3, [pc, #100]	; (800e8d0 <xTaskRemoveFromEventList+0xb4>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d903      	bls.n	800e878 <xTaskRemoveFromEventList+0x5c>
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e874:	4a16      	ldr	r2, [pc, #88]	; (800e8d0 <xTaskRemoveFromEventList+0xb4>)
 800e876:	6013      	str	r3, [r2, #0]
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e87c:	4613      	mov	r3, r2
 800e87e:	009b      	lsls	r3, r3, #2
 800e880:	4413      	add	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4a13      	ldr	r2, [pc, #76]	; (800e8d4 <xTaskRemoveFromEventList+0xb8>)
 800e886:	441a      	add	r2, r3
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	3304      	adds	r3, #4
 800e88c:	4619      	mov	r1, r3
 800e88e:	4610      	mov	r0, r2
 800e890:	f7fe fbf9 	bl	800d086 <vListInsertEnd>
 800e894:	e005      	b.n	800e8a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	3318      	adds	r3, #24
 800e89a:	4619      	mov	r1, r3
 800e89c:	480e      	ldr	r0, [pc, #56]	; (800e8d8 <xTaskRemoveFromEventList+0xbc>)
 800e89e:	f7fe fbf2 	bl	800d086 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8a6:	4b0d      	ldr	r3, [pc, #52]	; (800e8dc <xTaskRemoveFromEventList+0xc0>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d905      	bls.n	800e8bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e8b4:	4b0a      	ldr	r3, [pc, #40]	; (800e8e0 <xTaskRemoveFromEventList+0xc4>)
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	601a      	str	r2, [r3, #0]
 800e8ba:	e001      	b.n	800e8c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e8c0:	697b      	ldr	r3, [r7, #20]
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3718      	adds	r7, #24
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	200021e4 	.word	0x200021e4
 800e8d0:	200021c4 	.word	0x200021c4
 800e8d4:	20001cec 	.word	0x20001cec
 800e8d8:	2000217c 	.word	0x2000217c
 800e8dc:	20001ce8 	.word	0x20001ce8
 800e8e0:	200021d0 	.word	0x200021d0

0800e8e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8ec:	4b06      	ldr	r3, [pc, #24]	; (800e908 <vTaskInternalSetTimeOutState+0x24>)
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8f4:	4b05      	ldr	r3, [pc, #20]	; (800e90c <vTaskInternalSetTimeOutState+0x28>)
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	605a      	str	r2, [r3, #4]
}
 800e8fc:	bf00      	nop
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr
 800e908:	200021d4 	.word	0x200021d4
 800e90c:	200021c0 	.word	0x200021c0

0800e910 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b088      	sub	sp, #32
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d10a      	bne.n	800e936 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e924:	f383 8811 	msr	BASEPRI, r3
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	613b      	str	r3, [r7, #16]
}
 800e932:	bf00      	nop
 800e934:	e7fe      	b.n	800e934 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d10a      	bne.n	800e952 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e940:	f383 8811 	msr	BASEPRI, r3
 800e944:	f3bf 8f6f 	isb	sy
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	60fb      	str	r3, [r7, #12]
}
 800e94e:	bf00      	nop
 800e950:	e7fe      	b.n	800e950 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e952:	f001 f80f 	bl	800f974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e956:	4b1d      	ldr	r3, [pc, #116]	; (800e9cc <xTaskCheckForTimeOut+0xbc>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	69ba      	ldr	r2, [r7, #24]
 800e962:	1ad3      	subs	r3, r2, r3
 800e964:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96e:	d102      	bne.n	800e976 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e970:	2300      	movs	r3, #0
 800e972:	61fb      	str	r3, [r7, #28]
 800e974:	e023      	b.n	800e9be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	4b15      	ldr	r3, [pc, #84]	; (800e9d0 <xTaskCheckForTimeOut+0xc0>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d007      	beq.n	800e992 <xTaskCheckForTimeOut+0x82>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	69ba      	ldr	r2, [r7, #24]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d302      	bcc.n	800e992 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e98c:	2301      	movs	r3, #1
 800e98e:	61fb      	str	r3, [r7, #28]
 800e990:	e015      	b.n	800e9be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	697a      	ldr	r2, [r7, #20]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d20b      	bcs.n	800e9b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	1ad2      	subs	r2, r2, r3
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f7ff ff9b 	bl	800e8e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	61fb      	str	r3, [r7, #28]
 800e9b2:	e004      	b.n	800e9be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e9be:	f001 f809 	bl	800f9d4 <vPortExitCritical>

	return xReturn;
 800e9c2:	69fb      	ldr	r3, [r7, #28]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3720      	adds	r7, #32
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	200021c0 	.word	0x200021c0
 800e9d0:	200021d4 	.word	0x200021d4

0800e9d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e9d8:	4b03      	ldr	r3, [pc, #12]	; (800e9e8 <vTaskMissedYield+0x14>)
 800e9da:	2201      	movs	r2, #1
 800e9dc:	601a      	str	r2, [r3, #0]
}
 800e9de:	bf00      	nop
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr
 800e9e8:	200021d0 	.word	0x200021d0

0800e9ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e9f4:	f000 f854 	bl	800eaa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9f8:	4b07      	ldr	r3, [pc, #28]	; (800ea18 <prvIdleTask+0x2c>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d907      	bls.n	800ea10 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ea00:	4b06      	ldr	r3, [pc, #24]	; (800ea1c <prvIdleTask+0x30>)
 800ea02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea06:	601a      	str	r2, [r3, #0]
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ea10:	f7f2 fe6e 	bl	80016f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ea14:	e7ee      	b.n	800e9f4 <prvIdleTask+0x8>
 800ea16:	bf00      	nop
 800ea18:	20001cec 	.word	0x20001cec
 800ea1c:	e000ed04 	.word	0xe000ed04

0800ea20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea26:	2300      	movs	r3, #0
 800ea28:	607b      	str	r3, [r7, #4]
 800ea2a:	e00c      	b.n	800ea46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4a12      	ldr	r2, [pc, #72]	; (800ea80 <prvInitialiseTaskLists+0x60>)
 800ea38:	4413      	add	r3, r2
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7fe faf6 	bl	800d02c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	3301      	adds	r3, #1
 800ea44:	607b      	str	r3, [r7, #4]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2b37      	cmp	r3, #55	; 0x37
 800ea4a:	d9ef      	bls.n	800ea2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea4c:	480d      	ldr	r0, [pc, #52]	; (800ea84 <prvInitialiseTaskLists+0x64>)
 800ea4e:	f7fe faed 	bl	800d02c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea52:	480d      	ldr	r0, [pc, #52]	; (800ea88 <prvInitialiseTaskLists+0x68>)
 800ea54:	f7fe faea 	bl	800d02c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea58:	480c      	ldr	r0, [pc, #48]	; (800ea8c <prvInitialiseTaskLists+0x6c>)
 800ea5a:	f7fe fae7 	bl	800d02c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea5e:	480c      	ldr	r0, [pc, #48]	; (800ea90 <prvInitialiseTaskLists+0x70>)
 800ea60:	f7fe fae4 	bl	800d02c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea64:	480b      	ldr	r0, [pc, #44]	; (800ea94 <prvInitialiseTaskLists+0x74>)
 800ea66:	f7fe fae1 	bl	800d02c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea6a:	4b0b      	ldr	r3, [pc, #44]	; (800ea98 <prvInitialiseTaskLists+0x78>)
 800ea6c:	4a05      	ldr	r2, [pc, #20]	; (800ea84 <prvInitialiseTaskLists+0x64>)
 800ea6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea70:	4b0a      	ldr	r3, [pc, #40]	; (800ea9c <prvInitialiseTaskLists+0x7c>)
 800ea72:	4a05      	ldr	r2, [pc, #20]	; (800ea88 <prvInitialiseTaskLists+0x68>)
 800ea74:	601a      	str	r2, [r3, #0]
}
 800ea76:	bf00      	nop
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	20001cec 	.word	0x20001cec
 800ea84:	2000214c 	.word	0x2000214c
 800ea88:	20002160 	.word	0x20002160
 800ea8c:	2000217c 	.word	0x2000217c
 800ea90:	20002190 	.word	0x20002190
 800ea94:	200021a8 	.word	0x200021a8
 800ea98:	20002174 	.word	0x20002174
 800ea9c:	20002178 	.word	0x20002178

0800eaa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eaa6:	e019      	b.n	800eadc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eaa8:	f000 ff64 	bl	800f974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaac:	4b10      	ldr	r3, [pc, #64]	; (800eaf0 <prvCheckTasksWaitingTermination+0x50>)
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	3304      	adds	r3, #4
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fe fb41 	bl	800d140 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eabe:	4b0d      	ldr	r3, [pc, #52]	; (800eaf4 <prvCheckTasksWaitingTermination+0x54>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	3b01      	subs	r3, #1
 800eac4:	4a0b      	ldr	r2, [pc, #44]	; (800eaf4 <prvCheckTasksWaitingTermination+0x54>)
 800eac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eac8:	4b0b      	ldr	r3, [pc, #44]	; (800eaf8 <prvCheckTasksWaitingTermination+0x58>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3b01      	subs	r3, #1
 800eace:	4a0a      	ldr	r2, [pc, #40]	; (800eaf8 <prvCheckTasksWaitingTermination+0x58>)
 800ead0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ead2:	f000 ff7f 	bl	800f9d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 f8e4 	bl	800eca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eadc:	4b06      	ldr	r3, [pc, #24]	; (800eaf8 <prvCheckTasksWaitingTermination+0x58>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1e1      	bne.n	800eaa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eae4:	bf00      	nop
 800eae6:	bf00      	nop
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	20002190 	.word	0x20002190
 800eaf4:	200021bc 	.word	0x200021bc
 800eaf8:	200021a4 	.word	0x200021a4

0800eafc <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b086      	sub	sp, #24
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]
 800eb08:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d102      	bne.n	800eb16 <vTaskGetInfo+0x1a>
 800eb10:	4b2c      	ldr	r3, [pc, #176]	; (800ebc4 <vTaskGetInfo+0xc8>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	e000      	b.n	800eb18 <vTaskGetInfo+0x1c>
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	697a      	ldr	r2, [r7, #20]
 800eb1e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800eb52:	78fb      	ldrb	r3, [r7, #3]
 800eb54:	2b05      	cmp	r3, #5
 800eb56:	d01a      	beq.n	800eb8e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800eb58:	4b1a      	ldr	r3, [pc, #104]	; (800ebc4 <vTaskGetInfo+0xc8>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	697a      	ldr	r2, [r7, #20]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d103      	bne.n	800eb6a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	2200      	movs	r2, #0
 800eb66:	731a      	strb	r2, [r3, #12]
 800eb68:	e018      	b.n	800eb9c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	78fa      	ldrb	r2, [r7, #3]
 800eb6e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800eb70:	78fb      	ldrb	r3, [r7, #3]
 800eb72:	2b03      	cmp	r3, #3
 800eb74:	d112      	bne.n	800eb9c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800eb76:	f7ff fb7b 	bl	800e270 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d002      	beq.n	800eb88 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	2202      	movs	r2, #2
 800eb86:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800eb88:	f7ff fb80 	bl	800e28c <xTaskResumeAll>
 800eb8c:	e006      	b.n	800eb9c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800eb8e:	6978      	ldr	r0, [r7, #20]
 800eb90:	f7ff fa96 	bl	800e0c0 <eTaskGetState>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461a      	mov	r2, r3
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d009      	beq.n	800ebb6 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba6:	4618      	mov	r0, r3
 800eba8:	f000 f860 	bl	800ec6c <prvTaskCheckFreeStackSpace>
 800ebac:	4603      	mov	r3, r0
 800ebae:	461a      	mov	r2, r3
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800ebb4:	e002      	b.n	800ebbc <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	841a      	strh	r2, [r3, #32]
	}
 800ebbc:	bf00      	nop
 800ebbe:	3718      	adds	r7, #24
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	20001ce8 	.word	0x20001ce8

0800ebc8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b08a      	sub	sp, #40	; 0x28
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d03f      	beq.n	800ec62 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	623b      	str	r3, [r7, #32]
 800ebe6:	6a3b      	ldr	r3, [r7, #32]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	685a      	ldr	r2, [r3, #4]
 800ebec:	6a3b      	ldr	r3, [r7, #32]
 800ebee:	605a      	str	r2, [r3, #4]
 800ebf0:	6a3b      	ldr	r3, [r7, #32]
 800ebf2:	685a      	ldr	r2, [r3, #4]
 800ebf4:	6a3b      	ldr	r3, [r7, #32]
 800ebf6:	3308      	adds	r3, #8
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d104      	bne.n	800ec06 <prvListTasksWithinSingleList+0x3e>
 800ebfc:	6a3b      	ldr	r3, [r7, #32]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	685a      	ldr	r2, [r3, #4]
 800ec02:	6a3b      	ldr	r3, [r7, #32]
 800ec04:	605a      	str	r2, [r3, #4]
 800ec06:	6a3b      	ldr	r3, [r7, #32]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	61bb      	str	r3, [r7, #24]
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	685a      	ldr	r2, [r3, #4]
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	605a      	str	r2, [r3, #4]
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	685a      	ldr	r2, [r3, #4]
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	3308      	adds	r3, #8
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d104      	bne.n	800ec32 <prvListTasksWithinSingleList+0x6a>
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	685a      	ldr	r2, [r3, #4]
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	605a      	str	r2, [r3, #4]
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800ec3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec3c:	4613      	mov	r3, r2
 800ec3e:	00db      	lsls	r3, r3, #3
 800ec40:	4413      	add	r3, r2
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	461a      	mov	r2, r3
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	1899      	adds	r1, r3, r2
 800ec4a:	79fb      	ldrb	r3, [r7, #7]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	6978      	ldr	r0, [r7, #20]
 800ec50:	f7ff ff54 	bl	800eafc <vTaskGetInfo>
				uxTask++;
 800ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec56:	3301      	adds	r3, #1
 800ec58:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d1d5      	bne.n	800ec0e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800ec62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3728      	adds	r7, #40	; 0x28
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800ec74:	2300      	movs	r3, #0
 800ec76:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ec78:	e005      	b.n	800ec86 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	3301      	adds	r3, #1
 800ec84:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	2ba5      	cmp	r3, #165	; 0xa5
 800ec8c:	d0f5      	beq.n	800ec7a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	089b      	lsrs	r3, r3, #2
 800ec92:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	b29b      	uxth	r3, r3
	}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3714      	adds	r7, #20
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	3358      	adds	r3, #88	; 0x58
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f001 ffb9 	bl	8010c28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d108      	bne.n	800ecd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f001 f843 	bl	800fd50 <vPortFree>
				vPortFree( pxTCB );
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f001 f840 	bl	800fd50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ecd0:	e018      	b.n	800ed04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d103      	bne.n	800ece4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f001 f837 	bl	800fd50 <vPortFree>
	}
 800ece2:	e00f      	b.n	800ed04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	d00a      	beq.n	800ed04 <prvDeleteTCB+0x60>
	__asm volatile
 800ecee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf2:	f383 8811 	msr	BASEPRI, r3
 800ecf6:	f3bf 8f6f 	isb	sy
 800ecfa:	f3bf 8f4f 	dsb	sy
 800ecfe:	60fb      	str	r3, [r7, #12]
}
 800ed00:	bf00      	nop
 800ed02:	e7fe      	b.n	800ed02 <prvDeleteTCB+0x5e>
	}
 800ed04:	bf00      	nop
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed12:	4b0c      	ldr	r3, [pc, #48]	; (800ed44 <prvResetNextTaskUnblockTime+0x38>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d104      	bne.n	800ed26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed1c:	4b0a      	ldr	r3, [pc, #40]	; (800ed48 <prvResetNextTaskUnblockTime+0x3c>)
 800ed1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed24:	e008      	b.n	800ed38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed26:	4b07      	ldr	r3, [pc, #28]	; (800ed44 <prvResetNextTaskUnblockTime+0x38>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	4a04      	ldr	r2, [pc, #16]	; (800ed48 <prvResetNextTaskUnblockTime+0x3c>)
 800ed36:	6013      	str	r3, [r2, #0]
}
 800ed38:	bf00      	nop
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr
 800ed44:	20002174 	.word	0x20002174
 800ed48:	200021dc 	.word	0x200021dc

0800ed4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed52:	4b0b      	ldr	r3, [pc, #44]	; (800ed80 <xTaskGetSchedulerState+0x34>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d102      	bne.n	800ed60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	607b      	str	r3, [r7, #4]
 800ed5e:	e008      	b.n	800ed72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed60:	4b08      	ldr	r3, [pc, #32]	; (800ed84 <xTaskGetSchedulerState+0x38>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d102      	bne.n	800ed6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ed68:	2302      	movs	r3, #2
 800ed6a:	607b      	str	r3, [r7, #4]
 800ed6c:	e001      	b.n	800ed72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed72:	687b      	ldr	r3, [r7, #4]
	}
 800ed74:	4618      	mov	r0, r3
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	200021c8 	.word	0x200021c8
 800ed84:	200021e4 	.word	0x200021e4

0800ed88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b086      	sub	sp, #24
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed94:	2300      	movs	r3, #0
 800ed96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d056      	beq.n	800ee4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed9e:	4b2e      	ldr	r3, [pc, #184]	; (800ee58 <xTaskPriorityDisinherit+0xd0>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	693a      	ldr	r2, [r7, #16]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d00a      	beq.n	800edbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edac:	f383 8811 	msr	BASEPRI, r3
 800edb0:	f3bf 8f6f 	isb	sy
 800edb4:	f3bf 8f4f 	dsb	sy
 800edb8:	60fb      	str	r3, [r7, #12]
}
 800edba:	bf00      	nop
 800edbc:	e7fe      	b.n	800edbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d10a      	bne.n	800eddc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800edc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edca:	f383 8811 	msr	BASEPRI, r3
 800edce:	f3bf 8f6f 	isb	sy
 800edd2:	f3bf 8f4f 	dsb	sy
 800edd6:	60bb      	str	r3, [r7, #8]
}
 800edd8:	bf00      	nop
 800edda:	e7fe      	b.n	800edda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ede0:	1e5a      	subs	r2, r3, #1
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edee:	429a      	cmp	r2, r3
 800edf0:	d02c      	beq.n	800ee4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d128      	bne.n	800ee4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	3304      	adds	r3, #4
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fe f99e 	bl	800d140 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee1c:	4b0f      	ldr	r3, [pc, #60]	; (800ee5c <xTaskPriorityDisinherit+0xd4>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d903      	bls.n	800ee2c <xTaskPriorityDisinherit+0xa4>
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee28:	4a0c      	ldr	r2, [pc, #48]	; (800ee5c <xTaskPriorityDisinherit+0xd4>)
 800ee2a:	6013      	str	r3, [r2, #0]
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee30:	4613      	mov	r3, r2
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	4413      	add	r3, r2
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4a09      	ldr	r2, [pc, #36]	; (800ee60 <xTaskPriorityDisinherit+0xd8>)
 800ee3a:	441a      	add	r2, r3
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	3304      	adds	r3, #4
 800ee40:	4619      	mov	r1, r3
 800ee42:	4610      	mov	r0, r2
 800ee44:	f7fe f91f 	bl	800d086 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee4c:	697b      	ldr	r3, [r7, #20]
	}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	20001ce8 	.word	0x20001ce8
 800ee5c:	200021c4 	.word	0x200021c4
 800ee60:	20001cec 	.word	0x20001cec

0800ee64 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ee6e:	6839      	ldr	r1, [r7, #0]
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f001 ff65 	bl	8010d40 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7f1 f9b2 	bl	80001e0 <strlen>
 800ee7c:	60f8      	str	r0, [r7, #12]
 800ee7e:	e007      	b.n	800ee90 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	4413      	add	r3, r2
 800ee86:	2220      	movs	r2, #32
 800ee88:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	60fb      	str	r3, [r7, #12]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2b0e      	cmp	r3, #14
 800ee94:	d9f4      	bls.n	800ee80 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	4413      	add	r3, r2
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	4413      	add	r3, r2
	}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800eeb0:	b590      	push	{r4, r7, lr}
 800eeb2:	b089      	sub	sp, #36	; 0x24
 800eeb4:	af02      	add	r7, sp, #8
 800eeb6:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2200      	movs	r2, #0
 800eebc:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800eebe:	4b45      	ldr	r3, [pc, #276]	; (800efd4 <vTaskList+0x124>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800eec4:	4b43      	ldr	r3, [pc, #268]	; (800efd4 <vTaskList+0x124>)
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	4613      	mov	r3, r2
 800eeca:	00db      	lsls	r3, r3, #3
 800eecc:	4413      	add	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4618      	mov	r0, r3
 800eed2:	f000 fe71 	bl	800fbb8 <pvPortMalloc>
 800eed6:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d076      	beq.n	800efcc <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800eede:	2200      	movs	r2, #0
 800eee0:	68f9      	ldr	r1, [r7, #12]
 800eee2:	68b8      	ldr	r0, [r7, #8]
 800eee4:	f7ff fa80 	bl	800e3e8 <uxTaskGetSystemState>
 800eee8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800eeea:	2300      	movs	r3, #0
 800eeec:	617b      	str	r3, [r7, #20]
 800eeee:	e066      	b.n	800efbe <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800eef0:	697a      	ldr	r2, [r7, #20]
 800eef2:	4613      	mov	r3, r2
 800eef4:	00db      	lsls	r3, r3, #3
 800eef6:	4413      	add	r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	461a      	mov	r2, r3
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	4413      	add	r3, r2
 800ef00:	7b1b      	ldrb	r3, [r3, #12]
 800ef02:	2b04      	cmp	r3, #4
 800ef04:	d81b      	bhi.n	800ef3e <vTaskList+0x8e>
 800ef06:	a201      	add	r2, pc, #4	; (adr r2, 800ef0c <vTaskList+0x5c>)
 800ef08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef0c:	0800ef21 	.word	0x0800ef21
 800ef10:	0800ef27 	.word	0x0800ef27
 800ef14:	0800ef2d 	.word	0x0800ef2d
 800ef18:	0800ef33 	.word	0x0800ef33
 800ef1c:	0800ef39 	.word	0x0800ef39
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800ef20:	2358      	movs	r3, #88	; 0x58
 800ef22:	74fb      	strb	r3, [r7, #19]
										break;
 800ef24:	e00e      	b.n	800ef44 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800ef26:	2352      	movs	r3, #82	; 0x52
 800ef28:	74fb      	strb	r3, [r7, #19]
										break;
 800ef2a:	e00b      	b.n	800ef44 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ef2c:	2342      	movs	r3, #66	; 0x42
 800ef2e:	74fb      	strb	r3, [r7, #19]
										break;
 800ef30:	e008      	b.n	800ef44 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ef32:	2353      	movs	r3, #83	; 0x53
 800ef34:	74fb      	strb	r3, [r7, #19]
										break;
 800ef36:	e005      	b.n	800ef44 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ef38:	2344      	movs	r3, #68	; 0x44
 800ef3a:	74fb      	strb	r3, [r7, #19]
										break;
 800ef3c:	e002      	b.n	800ef44 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	74fb      	strb	r3, [r7, #19]
										break;
 800ef42:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ef44:	697a      	ldr	r2, [r7, #20]
 800ef46:	4613      	mov	r3, r2
 800ef48:	00db      	lsls	r3, r3, #3
 800ef4a:	4413      	add	r3, r2
 800ef4c:	009b      	lsls	r3, r3, #2
 800ef4e:	461a      	mov	r2, r3
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	4413      	add	r3, r2
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	4619      	mov	r1, r3
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f7ff ff83 	bl	800ee64 <prvWriteNameToBuffer>
 800ef5e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ef60:	7cf9      	ldrb	r1, [r7, #19]
 800ef62:	697a      	ldr	r2, [r7, #20]
 800ef64:	4613      	mov	r3, r2
 800ef66:	00db      	lsls	r3, r3, #3
 800ef68:	4413      	add	r3, r2
 800ef6a:	009b      	lsls	r3, r3, #2
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	4413      	add	r3, r2
 800ef72:	6918      	ldr	r0, [r3, #16]
 800ef74:	697a      	ldr	r2, [r7, #20]
 800ef76:	4613      	mov	r3, r2
 800ef78:	00db      	lsls	r3, r3, #3
 800ef7a:	4413      	add	r3, r2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	461a      	mov	r2, r3
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	4413      	add	r3, r2
 800ef84:	8c1b      	ldrh	r3, [r3, #32]
 800ef86:	461c      	mov	r4, r3
 800ef88:	697a      	ldr	r2, [r7, #20]
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	00db      	lsls	r3, r3, #3
 800ef8e:	4413      	add	r3, r2
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	461a      	mov	r2, r3
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	4413      	add	r3, r2
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	9301      	str	r3, [sp, #4]
 800ef9c:	9400      	str	r4, [sp, #0]
 800ef9e:	4603      	mov	r3, r0
 800efa0:	460a      	mov	r2, r1
 800efa2:	490d      	ldr	r1, [pc, #52]	; (800efd8 <vTaskList+0x128>)
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f001 feab 	bl	8010d00 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7f1 f918 	bl	80001e0 <strlen>
 800efb0:	4602      	mov	r2, r0
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4413      	add	r3, r2
 800efb6:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	3301      	adds	r3, #1
 800efbc:	617b      	str	r3, [r7, #20]
 800efbe:	697a      	ldr	r2, [r7, #20]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d394      	bcc.n	800eef0 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800efc6:	68b8      	ldr	r0, [r7, #8]
 800efc8:	f000 fec2 	bl	800fd50 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efcc:	bf00      	nop
 800efce:	371c      	adds	r7, #28
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd90      	pop	{r4, r7, pc}
 800efd4:	200021bc 	.word	0x200021bc
 800efd8:	0801175c 	.word	0x0801175c

0800efdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efe6:	4b21      	ldr	r3, [pc, #132]	; (800f06c <prvAddCurrentTaskToDelayedList+0x90>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efec:	4b20      	ldr	r3, [pc, #128]	; (800f070 <prvAddCurrentTaskToDelayedList+0x94>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	3304      	adds	r3, #4
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fe f8a4 	bl	800d140 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effe:	d10a      	bne.n	800f016 <prvAddCurrentTaskToDelayedList+0x3a>
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d007      	beq.n	800f016 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f006:	4b1a      	ldr	r3, [pc, #104]	; (800f070 <prvAddCurrentTaskToDelayedList+0x94>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	3304      	adds	r3, #4
 800f00c:	4619      	mov	r1, r3
 800f00e:	4819      	ldr	r0, [pc, #100]	; (800f074 <prvAddCurrentTaskToDelayedList+0x98>)
 800f010:	f7fe f839 	bl	800d086 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f014:	e026      	b.n	800f064 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4413      	add	r3, r2
 800f01c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f01e:	4b14      	ldr	r3, [pc, #80]	; (800f070 <prvAddCurrentTaskToDelayedList+0x94>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f026:	68ba      	ldr	r2, [r7, #8]
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d209      	bcs.n	800f042 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f02e:	4b12      	ldr	r3, [pc, #72]	; (800f078 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	4b0f      	ldr	r3, [pc, #60]	; (800f070 <prvAddCurrentTaskToDelayedList+0x94>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	3304      	adds	r3, #4
 800f038:	4619      	mov	r1, r3
 800f03a:	4610      	mov	r0, r2
 800f03c:	f7fe f847 	bl	800d0ce <vListInsert>
}
 800f040:	e010      	b.n	800f064 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f042:	4b0e      	ldr	r3, [pc, #56]	; (800f07c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	4b0a      	ldr	r3, [pc, #40]	; (800f070 <prvAddCurrentTaskToDelayedList+0x94>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	3304      	adds	r3, #4
 800f04c:	4619      	mov	r1, r3
 800f04e:	4610      	mov	r0, r2
 800f050:	f7fe f83d 	bl	800d0ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f054:	4b0a      	ldr	r3, [pc, #40]	; (800f080 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	68ba      	ldr	r2, [r7, #8]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d202      	bcs.n	800f064 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f05e:	4a08      	ldr	r2, [pc, #32]	; (800f080 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	6013      	str	r3, [r2, #0]
}
 800f064:	bf00      	nop
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	200021c0 	.word	0x200021c0
 800f070:	20001ce8 	.word	0x20001ce8
 800f074:	200021a8 	.word	0x200021a8
 800f078:	20002178 	.word	0x20002178
 800f07c:	20002174 	.word	0x20002174
 800f080:	200021dc 	.word	0x200021dc

0800f084 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b08a      	sub	sp, #40	; 0x28
 800f088:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f08a:	2300      	movs	r3, #0
 800f08c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f08e:	f000 fb07 	bl	800f6a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f092:	4b1c      	ldr	r3, [pc, #112]	; (800f104 <xTimerCreateTimerTask+0x80>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d021      	beq.n	800f0de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f09a:	2300      	movs	r3, #0
 800f09c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f0a2:	1d3a      	adds	r2, r7, #4
 800f0a4:	f107 0108 	add.w	r1, r7, #8
 800f0a8:	f107 030c 	add.w	r3, r7, #12
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fd ffa3 	bl	800cff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0b2:	6879      	ldr	r1, [r7, #4]
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	9202      	str	r2, [sp, #8]
 800f0ba:	9301      	str	r3, [sp, #4]
 800f0bc:	2302      	movs	r3, #2
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	460a      	mov	r2, r1
 800f0c4:	4910      	ldr	r1, [pc, #64]	; (800f108 <xTimerCreateTimerTask+0x84>)
 800f0c6:	4811      	ldr	r0, [pc, #68]	; (800f10c <xTimerCreateTimerTask+0x88>)
 800f0c8:	f7fe fe0a 	bl	800dce0 <xTaskCreateStatic>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	4a10      	ldr	r2, [pc, #64]	; (800f110 <xTimerCreateTimerTask+0x8c>)
 800f0d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f0d2:	4b0f      	ldr	r3, [pc, #60]	; (800f110 <xTimerCreateTimerTask+0x8c>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d001      	beq.n	800f0de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f0da:	2301      	movs	r3, #1
 800f0dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d10a      	bne.n	800f0fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e8:	f383 8811 	msr	BASEPRI, r3
 800f0ec:	f3bf 8f6f 	isb	sy
 800f0f0:	f3bf 8f4f 	dsb	sy
 800f0f4:	613b      	str	r3, [r7, #16]
}
 800f0f6:	bf00      	nop
 800f0f8:	e7fe      	b.n	800f0f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f0fa:	697b      	ldr	r3, [r7, #20]
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3718      	adds	r7, #24
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	20002220 	.word	0x20002220
 800f108:	08011784 	.word	0x08011784
 800f10c:	0800f249 	.word	0x0800f249
 800f110:	20002224 	.word	0x20002224

0800f114 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b08a      	sub	sp, #40	; 0x28
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f122:	2300      	movs	r3, #0
 800f124:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d10a      	bne.n	800f142 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f130:	f383 8811 	msr	BASEPRI, r3
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	f3bf 8f4f 	dsb	sy
 800f13c:	623b      	str	r3, [r7, #32]
}
 800f13e:	bf00      	nop
 800f140:	e7fe      	b.n	800f140 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f142:	4b1a      	ldr	r3, [pc, #104]	; (800f1ac <xTimerGenericCommand+0x98>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d02a      	beq.n	800f1a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	2b05      	cmp	r3, #5
 800f15a:	dc18      	bgt.n	800f18e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f15c:	f7ff fdf6 	bl	800ed4c <xTaskGetSchedulerState>
 800f160:	4603      	mov	r3, r0
 800f162:	2b02      	cmp	r3, #2
 800f164:	d109      	bne.n	800f17a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f166:	4b11      	ldr	r3, [pc, #68]	; (800f1ac <xTimerGenericCommand+0x98>)
 800f168:	6818      	ldr	r0, [r3, #0]
 800f16a:	f107 0110 	add.w	r1, r7, #16
 800f16e:	2300      	movs	r3, #0
 800f170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f172:	f7fe f94d 	bl	800d410 <xQueueGenericSend>
 800f176:	6278      	str	r0, [r7, #36]	; 0x24
 800f178:	e012      	b.n	800f1a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f17a:	4b0c      	ldr	r3, [pc, #48]	; (800f1ac <xTimerGenericCommand+0x98>)
 800f17c:	6818      	ldr	r0, [r3, #0]
 800f17e:	f107 0110 	add.w	r1, r7, #16
 800f182:	2300      	movs	r3, #0
 800f184:	2200      	movs	r2, #0
 800f186:	f7fe f943 	bl	800d410 <xQueueGenericSend>
 800f18a:	6278      	str	r0, [r7, #36]	; 0x24
 800f18c:	e008      	b.n	800f1a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f18e:	4b07      	ldr	r3, [pc, #28]	; (800f1ac <xTimerGenericCommand+0x98>)
 800f190:	6818      	ldr	r0, [r3, #0]
 800f192:	f107 0110 	add.w	r1, r7, #16
 800f196:	2300      	movs	r3, #0
 800f198:	683a      	ldr	r2, [r7, #0]
 800f19a:	f7fe fa37 	bl	800d60c <xQueueGenericSendFromISR>
 800f19e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3728      	adds	r7, #40	; 0x28
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	20002220 	.word	0x20002220

0800f1b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1ba:	4b22      	ldr	r3, [pc, #136]	; (800f244 <prvProcessExpiredTimer+0x94>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	3304      	adds	r3, #4
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fd ffb9 	bl	800d140 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1d4:	f003 0304 	and.w	r3, r3, #4
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d022      	beq.n	800f222 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	699a      	ldr	r2, [r3, #24]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	18d1      	adds	r1, r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	683a      	ldr	r2, [r7, #0]
 800f1e8:	6978      	ldr	r0, [r7, #20]
 800f1ea:	f000 f8d1 	bl	800f390 <prvInsertTimerInActiveList>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d01f      	beq.n	800f234 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	6978      	ldr	r0, [r7, #20]
 800f200:	f7ff ff88 	bl	800f114 <xTimerGenericCommand>
 800f204:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d113      	bne.n	800f234 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f210:	f383 8811 	msr	BASEPRI, r3
 800f214:	f3bf 8f6f 	isb	sy
 800f218:	f3bf 8f4f 	dsb	sy
 800f21c:	60fb      	str	r3, [r7, #12]
}
 800f21e:	bf00      	nop
 800f220:	e7fe      	b.n	800f220 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f228:	f023 0301 	bic.w	r3, r3, #1
 800f22c:	b2da      	uxtb	r2, r3
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	6a1b      	ldr	r3, [r3, #32]
 800f238:	6978      	ldr	r0, [r7, #20]
 800f23a:	4798      	blx	r3
}
 800f23c:	bf00      	nop
 800f23e:	3718      	adds	r7, #24
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	20002218 	.word	0x20002218

0800f248 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f250:	f107 0308 	add.w	r3, r7, #8
 800f254:	4618      	mov	r0, r3
 800f256:	f000 f857 	bl	800f308 <prvGetNextExpireTime>
 800f25a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	4619      	mov	r1, r3
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	f000 f803 	bl	800f26c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f266:	f000 f8d5 	bl	800f414 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f26a:	e7f1      	b.n	800f250 <prvTimerTask+0x8>

0800f26c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f276:	f7fe fffb 	bl	800e270 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f27a:	f107 0308 	add.w	r3, r7, #8
 800f27e:	4618      	mov	r0, r3
 800f280:	f000 f866 	bl	800f350 <prvSampleTimeNow>
 800f284:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d130      	bne.n	800f2ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d10a      	bne.n	800f2a8 <prvProcessTimerOrBlockTask+0x3c>
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	429a      	cmp	r2, r3
 800f298:	d806      	bhi.n	800f2a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f29a:	f7fe fff7 	bl	800e28c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f29e:	68f9      	ldr	r1, [r7, #12]
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7ff ff85 	bl	800f1b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2a6:	e024      	b.n	800f2f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d008      	beq.n	800f2c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2ae:	4b13      	ldr	r3, [pc, #76]	; (800f2fc <prvProcessTimerOrBlockTask+0x90>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d101      	bne.n	800f2bc <prvProcessTimerOrBlockTask+0x50>
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	e000      	b.n	800f2be <prvProcessTimerOrBlockTask+0x52>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f2c0:	4b0f      	ldr	r3, [pc, #60]	; (800f300 <prvProcessTimerOrBlockTask+0x94>)
 800f2c2:	6818      	ldr	r0, [r3, #0]
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	1ad3      	subs	r3, r2, r3
 800f2ca:	683a      	ldr	r2, [r7, #0]
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	f7fe fcd3 	bl	800dc78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f2d2:	f7fe ffdb 	bl	800e28c <xTaskResumeAll>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d10a      	bne.n	800f2f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f2dc:	4b09      	ldr	r3, [pc, #36]	; (800f304 <prvProcessTimerOrBlockTask+0x98>)
 800f2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2e2:	601a      	str	r2, [r3, #0]
 800f2e4:	f3bf 8f4f 	dsb	sy
 800f2e8:	f3bf 8f6f 	isb	sy
}
 800f2ec:	e001      	b.n	800f2f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2ee:	f7fe ffcd 	bl	800e28c <xTaskResumeAll>
}
 800f2f2:	bf00      	nop
 800f2f4:	3710      	adds	r7, #16
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	2000221c 	.word	0x2000221c
 800f300:	20002220 	.word	0x20002220
 800f304:	e000ed04 	.word	0xe000ed04

0800f308 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f310:	4b0e      	ldr	r3, [pc, #56]	; (800f34c <prvGetNextExpireTime+0x44>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d101      	bne.n	800f31e <prvGetNextExpireTime+0x16>
 800f31a:	2201      	movs	r2, #1
 800f31c:	e000      	b.n	800f320 <prvGetNextExpireTime+0x18>
 800f31e:	2200      	movs	r2, #0
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d105      	bne.n	800f338 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f32c:	4b07      	ldr	r3, [pc, #28]	; (800f34c <prvGetNextExpireTime+0x44>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	68db      	ldr	r3, [r3, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	60fb      	str	r3, [r7, #12]
 800f336:	e001      	b.n	800f33c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f338:	2300      	movs	r3, #0
 800f33a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f33c:	68fb      	ldr	r3, [r7, #12]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3714      	adds	r7, #20
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	20002218 	.word	0x20002218

0800f350 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f358:	f7ff f836 	bl	800e3c8 <xTaskGetTickCount>
 800f35c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f35e:	4b0b      	ldr	r3, [pc, #44]	; (800f38c <prvSampleTimeNow+0x3c>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	429a      	cmp	r2, r3
 800f366:	d205      	bcs.n	800f374 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f368:	f000 f936 	bl	800f5d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2201      	movs	r2, #1
 800f370:	601a      	str	r2, [r3, #0]
 800f372:	e002      	b.n	800f37a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f37a:	4a04      	ldr	r2, [pc, #16]	; (800f38c <prvSampleTimeNow+0x3c>)
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f380:	68fb      	ldr	r3, [r7, #12]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20002228 	.word	0x20002228

0800f390 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b086      	sub	sp, #24
 800f394:	af00      	add	r7, sp, #0
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	60b9      	str	r1, [r7, #8]
 800f39a:	607a      	str	r2, [r7, #4]
 800f39c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3ae:	68ba      	ldr	r2, [r7, #8]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d812      	bhi.n	800f3dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	1ad2      	subs	r2, r2, r3
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	699b      	ldr	r3, [r3, #24]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d302      	bcc.n	800f3ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	617b      	str	r3, [r7, #20]
 800f3c8:	e01b      	b.n	800f402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f3ca:	4b10      	ldr	r3, [pc, #64]	; (800f40c <prvInsertTimerInActiveList+0x7c>)
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	3304      	adds	r3, #4
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	4610      	mov	r0, r2
 800f3d6:	f7fd fe7a 	bl	800d0ce <vListInsert>
 800f3da:	e012      	b.n	800f402 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f3dc:	687a      	ldr	r2, [r7, #4]
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d206      	bcs.n	800f3f2 <prvInsertTimerInActiveList+0x62>
 800f3e4:	68ba      	ldr	r2, [r7, #8]
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d302      	bcc.n	800f3f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	617b      	str	r3, [r7, #20]
 800f3f0:	e007      	b.n	800f402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3f2:	4b07      	ldr	r3, [pc, #28]	; (800f410 <prvInsertTimerInActiveList+0x80>)
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	3304      	adds	r3, #4
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	f7fd fe66 	bl	800d0ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f402:	697b      	ldr	r3, [r7, #20]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3718      	adds	r7, #24
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	2000221c 	.word	0x2000221c
 800f410:	20002218 	.word	0x20002218

0800f414 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b08e      	sub	sp, #56	; 0x38
 800f418:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f41a:	e0ca      	b.n	800f5b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	da18      	bge.n	800f454 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f422:	1d3b      	adds	r3, r7, #4
 800f424:	3304      	adds	r3, #4
 800f426:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d10a      	bne.n	800f444 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	61fb      	str	r3, [r7, #28]
}
 800f440:	bf00      	nop
 800f442:	e7fe      	b.n	800f442 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f44a:	6850      	ldr	r0, [r2, #4]
 800f44c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f44e:	6892      	ldr	r2, [r2, #8]
 800f450:	4611      	mov	r1, r2
 800f452:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2b00      	cmp	r3, #0
 800f458:	f2c0 80aa 	blt.w	800f5b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f462:	695b      	ldr	r3, [r3, #20]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d004      	beq.n	800f472 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46a:	3304      	adds	r3, #4
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7fd fe67 	bl	800d140 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f472:	463b      	mov	r3, r7
 800f474:	4618      	mov	r0, r3
 800f476:	f7ff ff6b 	bl	800f350 <prvSampleTimeNow>
 800f47a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b09      	cmp	r3, #9
 800f480:	f200 8097 	bhi.w	800f5b2 <prvProcessReceivedCommands+0x19e>
 800f484:	a201      	add	r2, pc, #4	; (adr r2, 800f48c <prvProcessReceivedCommands+0x78>)
 800f486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48a:	bf00      	nop
 800f48c:	0800f4b5 	.word	0x0800f4b5
 800f490:	0800f4b5 	.word	0x0800f4b5
 800f494:	0800f4b5 	.word	0x0800f4b5
 800f498:	0800f529 	.word	0x0800f529
 800f49c:	0800f53d 	.word	0x0800f53d
 800f4a0:	0800f587 	.word	0x0800f587
 800f4a4:	0800f4b5 	.word	0x0800f4b5
 800f4a8:	0800f4b5 	.word	0x0800f4b5
 800f4ac:	0800f529 	.word	0x0800f529
 800f4b0:	0800f53d 	.word	0x0800f53d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ba:	f043 0301 	orr.w	r3, r3, #1
 800f4be:	b2da      	uxtb	r2, r3
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4c6:	68ba      	ldr	r2, [r7, #8]
 800f4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ca:	699b      	ldr	r3, [r3, #24]
 800f4cc:	18d1      	adds	r1, r2, r3
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4d4:	f7ff ff5c 	bl	800f390 <prvInsertTimerInActiveList>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d069      	beq.n	800f5b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	6a1b      	ldr	r3, [r3, #32]
 800f4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ec:	f003 0304 	and.w	r3, r3, #4
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d05e      	beq.n	800f5b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f4f4:	68ba      	ldr	r2, [r7, #8]
 800f4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f8:	699b      	ldr	r3, [r3, #24]
 800f4fa:	441a      	add	r2, r3
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	2300      	movs	r3, #0
 800f502:	2100      	movs	r1, #0
 800f504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f506:	f7ff fe05 	bl	800f114 <xTimerGenericCommand>
 800f50a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f50c:	6a3b      	ldr	r3, [r7, #32]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d14f      	bne.n	800f5b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f516:	f383 8811 	msr	BASEPRI, r3
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	61bb      	str	r3, [r7, #24]
}
 800f524:	bf00      	nop
 800f526:	e7fe      	b.n	800f526 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f52e:	f023 0301 	bic.w	r3, r3, #1
 800f532:	b2da      	uxtb	r2, r3
 800f534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f53a:	e03a      	b.n	800f5b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f542:	f043 0301 	orr.w	r3, r3, #1
 800f546:	b2da      	uxtb	r2, r3
 800f548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f54a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f552:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f556:	699b      	ldr	r3, [r3, #24]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d10a      	bne.n	800f572 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	617b      	str	r3, [r7, #20]
}
 800f56e:	bf00      	nop
 800f570:	e7fe      	b.n	800f570 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f574:	699a      	ldr	r2, [r3, #24]
 800f576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f578:	18d1      	adds	r1, r2, r3
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f57e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f580:	f7ff ff06 	bl	800f390 <prvInsertTimerInActiveList>
					break;
 800f584:	e015      	b.n	800f5b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f58c:	f003 0302 	and.w	r3, r3, #2
 800f590:	2b00      	cmp	r3, #0
 800f592:	d103      	bne.n	800f59c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f596:	f000 fbdb 	bl	800fd50 <vPortFree>
 800f59a:	e00a      	b.n	800f5b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5a2:	f023 0301 	bic.w	r3, r3, #1
 800f5a6:	b2da      	uxtb	r2, r3
 800f5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f5ae:	e000      	b.n	800f5b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f5b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5b2:	4b08      	ldr	r3, [pc, #32]	; (800f5d4 <prvProcessReceivedCommands+0x1c0>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	1d39      	adds	r1, r7, #4
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7fe f8c2 	bl	800d744 <xQueueReceive>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	f47f af2a 	bne.w	800f41c <prvProcessReceivedCommands+0x8>
	}
}
 800f5c8:	bf00      	nop
 800f5ca:	bf00      	nop
 800f5cc:	3730      	adds	r7, #48	; 0x30
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	20002220 	.word	0x20002220

0800f5d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b088      	sub	sp, #32
 800f5dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5de:	e048      	b.n	800f672 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5e0:	4b2d      	ldr	r3, [pc, #180]	; (800f698 <prvSwitchTimerLists+0xc0>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5ea:	4b2b      	ldr	r3, [pc, #172]	; (800f698 <prvSwitchTimerLists+0xc0>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	68db      	ldr	r3, [r3, #12]
 800f5f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	3304      	adds	r3, #4
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7fd fda1 	bl	800d140 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6a1b      	ldr	r3, [r3, #32]
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f60c:	f003 0304 	and.w	r3, r3, #4
 800f610:	2b00      	cmp	r3, #0
 800f612:	d02e      	beq.n	800f672 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	699b      	ldr	r3, [r3, #24]
 800f618:	693a      	ldr	r2, [r7, #16]
 800f61a:	4413      	add	r3, r2
 800f61c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f61e:	68ba      	ldr	r2, [r7, #8]
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	429a      	cmp	r2, r3
 800f624:	d90e      	bls.n	800f644 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	68fa      	ldr	r2, [r7, #12]
 800f630:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f632:	4b19      	ldr	r3, [pc, #100]	; (800f698 <prvSwitchTimerLists+0xc0>)
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	3304      	adds	r3, #4
 800f63a:	4619      	mov	r1, r3
 800f63c:	4610      	mov	r0, r2
 800f63e:	f7fd fd46 	bl	800d0ce <vListInsert>
 800f642:	e016      	b.n	800f672 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f644:	2300      	movs	r3, #0
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	2300      	movs	r3, #0
 800f64a:	693a      	ldr	r2, [r7, #16]
 800f64c:	2100      	movs	r1, #0
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f7ff fd60 	bl	800f114 <xTimerGenericCommand>
 800f654:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d10a      	bne.n	800f672 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f660:	f383 8811 	msr	BASEPRI, r3
 800f664:	f3bf 8f6f 	isb	sy
 800f668:	f3bf 8f4f 	dsb	sy
 800f66c:	603b      	str	r3, [r7, #0]
}
 800f66e:	bf00      	nop
 800f670:	e7fe      	b.n	800f670 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f672:	4b09      	ldr	r3, [pc, #36]	; (800f698 <prvSwitchTimerLists+0xc0>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d1b1      	bne.n	800f5e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f67c:	4b06      	ldr	r3, [pc, #24]	; (800f698 <prvSwitchTimerLists+0xc0>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f682:	4b06      	ldr	r3, [pc, #24]	; (800f69c <prvSwitchTimerLists+0xc4>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4a04      	ldr	r2, [pc, #16]	; (800f698 <prvSwitchTimerLists+0xc0>)
 800f688:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f68a:	4a04      	ldr	r2, [pc, #16]	; (800f69c <prvSwitchTimerLists+0xc4>)
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	6013      	str	r3, [r2, #0]
}
 800f690:	bf00      	nop
 800f692:	3718      	adds	r7, #24
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	20002218 	.word	0x20002218
 800f69c:	2000221c 	.word	0x2000221c

0800f6a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6a6:	f000 f965 	bl	800f974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f6aa:	4b15      	ldr	r3, [pc, #84]	; (800f700 <prvCheckForValidListAndQueue+0x60>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d120      	bne.n	800f6f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f6b2:	4814      	ldr	r0, [pc, #80]	; (800f704 <prvCheckForValidListAndQueue+0x64>)
 800f6b4:	f7fd fcba 	bl	800d02c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f6b8:	4813      	ldr	r0, [pc, #76]	; (800f708 <prvCheckForValidListAndQueue+0x68>)
 800f6ba:	f7fd fcb7 	bl	800d02c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f6be:	4b13      	ldr	r3, [pc, #76]	; (800f70c <prvCheckForValidListAndQueue+0x6c>)
 800f6c0:	4a10      	ldr	r2, [pc, #64]	; (800f704 <prvCheckForValidListAndQueue+0x64>)
 800f6c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f6c4:	4b12      	ldr	r3, [pc, #72]	; (800f710 <prvCheckForValidListAndQueue+0x70>)
 800f6c6:	4a10      	ldr	r2, [pc, #64]	; (800f708 <prvCheckForValidListAndQueue+0x68>)
 800f6c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	9300      	str	r3, [sp, #0]
 800f6ce:	4b11      	ldr	r3, [pc, #68]	; (800f714 <prvCheckForValidListAndQueue+0x74>)
 800f6d0:	4a11      	ldr	r2, [pc, #68]	; (800f718 <prvCheckForValidListAndQueue+0x78>)
 800f6d2:	2110      	movs	r1, #16
 800f6d4:	200a      	movs	r0, #10
 800f6d6:	f7fd fdc5 	bl	800d264 <xQueueGenericCreateStatic>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	4a08      	ldr	r2, [pc, #32]	; (800f700 <prvCheckForValidListAndQueue+0x60>)
 800f6de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f6e0:	4b07      	ldr	r3, [pc, #28]	; (800f700 <prvCheckForValidListAndQueue+0x60>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d005      	beq.n	800f6f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f6e8:	4b05      	ldr	r3, [pc, #20]	; (800f700 <prvCheckForValidListAndQueue+0x60>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	490b      	ldr	r1, [pc, #44]	; (800f71c <prvCheckForValidListAndQueue+0x7c>)
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fe fa98 	bl	800dc24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6f4:	f000 f96e 	bl	800f9d4 <vPortExitCritical>
}
 800f6f8:	bf00      	nop
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	20002220 	.word	0x20002220
 800f704:	200021f0 	.word	0x200021f0
 800f708:	20002204 	.word	0x20002204
 800f70c:	20002218 	.word	0x20002218
 800f710:	2000221c 	.word	0x2000221c
 800f714:	200022cc 	.word	0x200022cc
 800f718:	2000222c 	.word	0x2000222c
 800f71c:	0801178c 	.word	0x0801178c

0800f720 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f720:	b480      	push	{r7}
 800f722:	b085      	sub	sp, #20
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	3b04      	subs	r3, #4
 800f730:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	3b04      	subs	r3, #4
 800f73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	f023 0201 	bic.w	r2, r3, #1
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3b04      	subs	r3, #4
 800f74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f750:	4a0c      	ldr	r2, [pc, #48]	; (800f784 <pxPortInitialiseStack+0x64>)
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	3b14      	subs	r3, #20
 800f75a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	3b04      	subs	r3, #4
 800f766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	f06f 0202 	mvn.w	r2, #2
 800f76e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	3b20      	subs	r3, #32
 800f774:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f776:	68fb      	ldr	r3, [r7, #12]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3714      	adds	r7, #20
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr
 800f784:	0800f789 	.word	0x0800f789

0800f788 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f788:	b480      	push	{r7}
 800f78a:	b085      	sub	sp, #20
 800f78c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f78e:	2300      	movs	r3, #0
 800f790:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f792:	4b12      	ldr	r3, [pc, #72]	; (800f7dc <prvTaskExitError+0x54>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f79a:	d00a      	beq.n	800f7b2 <prvTaskExitError+0x2a>
	__asm volatile
 800f79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a0:	f383 8811 	msr	BASEPRI, r3
 800f7a4:	f3bf 8f6f 	isb	sy
 800f7a8:	f3bf 8f4f 	dsb	sy
 800f7ac:	60fb      	str	r3, [r7, #12]
}
 800f7ae:	bf00      	nop
 800f7b0:	e7fe      	b.n	800f7b0 <prvTaskExitError+0x28>
	__asm volatile
 800f7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	60bb      	str	r3, [r7, #8]
}
 800f7c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f7c6:	bf00      	nop
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d0fc      	beq.n	800f7c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f7ce:	bf00      	nop
 800f7d0:	bf00      	nop
 800f7d2:	3714      	adds	r7, #20
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr
 800f7dc:	20000124 	.word	0x20000124

0800f7e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f7e0:	4b07      	ldr	r3, [pc, #28]	; (800f800 <pxCurrentTCBConst2>)
 800f7e2:	6819      	ldr	r1, [r3, #0]
 800f7e4:	6808      	ldr	r0, [r1, #0]
 800f7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ea:	f380 8809 	msr	PSP, r0
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f04f 0000 	mov.w	r0, #0
 800f7f6:	f380 8811 	msr	BASEPRI, r0
 800f7fa:	4770      	bx	lr
 800f7fc:	f3af 8000 	nop.w

0800f800 <pxCurrentTCBConst2>:
 800f800:	20001ce8 	.word	0x20001ce8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop

0800f808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f808:	4808      	ldr	r0, [pc, #32]	; (800f82c <prvPortStartFirstTask+0x24>)
 800f80a:	6800      	ldr	r0, [r0, #0]
 800f80c:	6800      	ldr	r0, [r0, #0]
 800f80e:	f380 8808 	msr	MSP, r0
 800f812:	f04f 0000 	mov.w	r0, #0
 800f816:	f380 8814 	msr	CONTROL, r0
 800f81a:	b662      	cpsie	i
 800f81c:	b661      	cpsie	f
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	f3bf 8f6f 	isb	sy
 800f826:	df00      	svc	0
 800f828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f82a:	bf00      	nop
 800f82c:	e000ed08 	.word	0xe000ed08

0800f830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f836:	4b46      	ldr	r3, [pc, #280]	; (800f950 <xPortStartScheduler+0x120>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4a46      	ldr	r2, [pc, #280]	; (800f954 <xPortStartScheduler+0x124>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d10a      	bne.n	800f856 <xPortStartScheduler+0x26>
	__asm volatile
 800f840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f844:	f383 8811 	msr	BASEPRI, r3
 800f848:	f3bf 8f6f 	isb	sy
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	613b      	str	r3, [r7, #16]
}
 800f852:	bf00      	nop
 800f854:	e7fe      	b.n	800f854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f856:	4b3e      	ldr	r3, [pc, #248]	; (800f950 <xPortStartScheduler+0x120>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4a3f      	ldr	r2, [pc, #252]	; (800f958 <xPortStartScheduler+0x128>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d10a      	bne.n	800f876 <xPortStartScheduler+0x46>
	__asm volatile
 800f860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f864:	f383 8811 	msr	BASEPRI, r3
 800f868:	f3bf 8f6f 	isb	sy
 800f86c:	f3bf 8f4f 	dsb	sy
 800f870:	60fb      	str	r3, [r7, #12]
}
 800f872:	bf00      	nop
 800f874:	e7fe      	b.n	800f874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f876:	4b39      	ldr	r3, [pc, #228]	; (800f95c <xPortStartScheduler+0x12c>)
 800f878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	22ff      	movs	r2, #255	; 0xff
 800f886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f890:	78fb      	ldrb	r3, [r7, #3]
 800f892:	b2db      	uxtb	r3, r3
 800f894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	4b31      	ldr	r3, [pc, #196]	; (800f960 <xPortStartScheduler+0x130>)
 800f89c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f89e:	4b31      	ldr	r3, [pc, #196]	; (800f964 <xPortStartScheduler+0x134>)
 800f8a0:	2207      	movs	r2, #7
 800f8a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8a4:	e009      	b.n	800f8ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f8a6:	4b2f      	ldr	r3, [pc, #188]	; (800f964 <xPortStartScheduler+0x134>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	4a2d      	ldr	r2, [pc, #180]	; (800f964 <xPortStartScheduler+0x134>)
 800f8ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f8b0:	78fb      	ldrb	r3, [r7, #3]
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	005b      	lsls	r3, r3, #1
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8ba:	78fb      	ldrb	r3, [r7, #3]
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8c2:	2b80      	cmp	r3, #128	; 0x80
 800f8c4:	d0ef      	beq.n	800f8a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f8c6:	4b27      	ldr	r3, [pc, #156]	; (800f964 <xPortStartScheduler+0x134>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f1c3 0307 	rsb	r3, r3, #7
 800f8ce:	2b04      	cmp	r3, #4
 800f8d0:	d00a      	beq.n	800f8e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d6:	f383 8811 	msr	BASEPRI, r3
 800f8da:	f3bf 8f6f 	isb	sy
 800f8de:	f3bf 8f4f 	dsb	sy
 800f8e2:	60bb      	str	r3, [r7, #8]
}
 800f8e4:	bf00      	nop
 800f8e6:	e7fe      	b.n	800f8e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f8e8:	4b1e      	ldr	r3, [pc, #120]	; (800f964 <xPortStartScheduler+0x134>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	021b      	lsls	r3, r3, #8
 800f8ee:	4a1d      	ldr	r2, [pc, #116]	; (800f964 <xPortStartScheduler+0x134>)
 800f8f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f8f2:	4b1c      	ldr	r3, [pc, #112]	; (800f964 <xPortStartScheduler+0x134>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f8fa:	4a1a      	ldr	r2, [pc, #104]	; (800f964 <xPortStartScheduler+0x134>)
 800f8fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	b2da      	uxtb	r2, r3
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f906:	4b18      	ldr	r3, [pc, #96]	; (800f968 <xPortStartScheduler+0x138>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a17      	ldr	r2, [pc, #92]	; (800f968 <xPortStartScheduler+0x138>)
 800f90c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f912:	4b15      	ldr	r3, [pc, #84]	; (800f968 <xPortStartScheduler+0x138>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	4a14      	ldr	r2, [pc, #80]	; (800f968 <xPortStartScheduler+0x138>)
 800f918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f91c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f91e:	f000 f8dd 	bl	800fadc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f922:	4b12      	ldr	r3, [pc, #72]	; (800f96c <xPortStartScheduler+0x13c>)
 800f924:	2200      	movs	r2, #0
 800f926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f928:	f000 f8fc 	bl	800fb24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f92c:	4b10      	ldr	r3, [pc, #64]	; (800f970 <xPortStartScheduler+0x140>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a0f      	ldr	r2, [pc, #60]	; (800f970 <xPortStartScheduler+0x140>)
 800f932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f938:	f7ff ff66 	bl	800f808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f93c:	f7fe fe9e 	bl	800e67c <vTaskSwitchContext>
	prvTaskExitError();
 800f940:	f7ff ff22 	bl	800f788 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3718      	adds	r7, #24
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	e000ed00 	.word	0xe000ed00
 800f954:	410fc271 	.word	0x410fc271
 800f958:	410fc270 	.word	0x410fc270
 800f95c:	e000e400 	.word	0xe000e400
 800f960:	2000231c 	.word	0x2000231c
 800f964:	20002320 	.word	0x20002320
 800f968:	e000ed20 	.word	0xe000ed20
 800f96c:	20000124 	.word	0x20000124
 800f970:	e000ef34 	.word	0xe000ef34

0800f974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
	__asm volatile
 800f97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97e:	f383 8811 	msr	BASEPRI, r3
 800f982:	f3bf 8f6f 	isb	sy
 800f986:	f3bf 8f4f 	dsb	sy
 800f98a:	607b      	str	r3, [r7, #4]
}
 800f98c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f98e:	4b0f      	ldr	r3, [pc, #60]	; (800f9cc <vPortEnterCritical+0x58>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	3301      	adds	r3, #1
 800f994:	4a0d      	ldr	r2, [pc, #52]	; (800f9cc <vPortEnterCritical+0x58>)
 800f996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f998:	4b0c      	ldr	r3, [pc, #48]	; (800f9cc <vPortEnterCritical+0x58>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d10f      	bne.n	800f9c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f9a0:	4b0b      	ldr	r3, [pc, #44]	; (800f9d0 <vPortEnterCritical+0x5c>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	b2db      	uxtb	r3, r3
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00a      	beq.n	800f9c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ae:	f383 8811 	msr	BASEPRI, r3
 800f9b2:	f3bf 8f6f 	isb	sy
 800f9b6:	f3bf 8f4f 	dsb	sy
 800f9ba:	603b      	str	r3, [r7, #0]
}
 800f9bc:	bf00      	nop
 800f9be:	e7fe      	b.n	800f9be <vPortEnterCritical+0x4a>
	}
}
 800f9c0:	bf00      	nop
 800f9c2:	370c      	adds	r7, #12
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr
 800f9cc:	20000124 	.word	0x20000124
 800f9d0:	e000ed04 	.word	0xe000ed04

0800f9d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f9da:	4b12      	ldr	r3, [pc, #72]	; (800fa24 <vPortExitCritical+0x50>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d10a      	bne.n	800f9f8 <vPortExitCritical+0x24>
	__asm volatile
 800f9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e6:	f383 8811 	msr	BASEPRI, r3
 800f9ea:	f3bf 8f6f 	isb	sy
 800f9ee:	f3bf 8f4f 	dsb	sy
 800f9f2:	607b      	str	r3, [r7, #4]
}
 800f9f4:	bf00      	nop
 800f9f6:	e7fe      	b.n	800f9f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f9f8:	4b0a      	ldr	r3, [pc, #40]	; (800fa24 <vPortExitCritical+0x50>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	4a09      	ldr	r2, [pc, #36]	; (800fa24 <vPortExitCritical+0x50>)
 800fa00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa02:	4b08      	ldr	r3, [pc, #32]	; (800fa24 <vPortExitCritical+0x50>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d105      	bne.n	800fa16 <vPortExitCritical+0x42>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	f383 8811 	msr	BASEPRI, r3
}
 800fa14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa16:	bf00      	nop
 800fa18:	370c      	adds	r7, #12
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr
 800fa22:	bf00      	nop
 800fa24:	20000124 	.word	0x20000124
	...

0800fa30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa30:	f3ef 8009 	mrs	r0, PSP
 800fa34:	f3bf 8f6f 	isb	sy
 800fa38:	4b15      	ldr	r3, [pc, #84]	; (800fa90 <pxCurrentTCBConst>)
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	f01e 0f10 	tst.w	lr, #16
 800fa40:	bf08      	it	eq
 800fa42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4a:	6010      	str	r0, [r2, #0]
 800fa4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fa54:	f380 8811 	msr	BASEPRI, r0
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	f3bf 8f6f 	isb	sy
 800fa60:	f7fe fe0c 	bl	800e67c <vTaskSwitchContext>
 800fa64:	f04f 0000 	mov.w	r0, #0
 800fa68:	f380 8811 	msr	BASEPRI, r0
 800fa6c:	bc09      	pop	{r0, r3}
 800fa6e:	6819      	ldr	r1, [r3, #0]
 800fa70:	6808      	ldr	r0, [r1, #0]
 800fa72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa76:	f01e 0f10 	tst.w	lr, #16
 800fa7a:	bf08      	it	eq
 800fa7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa80:	f380 8809 	msr	PSP, r0
 800fa84:	f3bf 8f6f 	isb	sy
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop
 800fa8c:	f3af 8000 	nop.w

0800fa90 <pxCurrentTCBConst>:
 800fa90:	20001ce8 	.word	0x20001ce8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa94:	bf00      	nop
 800fa96:	bf00      	nop

0800fa98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa2:	f383 8811 	msr	BASEPRI, r3
 800faa6:	f3bf 8f6f 	isb	sy
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	607b      	str	r3, [r7, #4]
}
 800fab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fab2:	f7fe fd29 	bl	800e508 <xTaskIncrementTick>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d003      	beq.n	800fac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fabc:	4b06      	ldr	r3, [pc, #24]	; (800fad8 <xPortSysTickHandler+0x40>)
 800fabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fac2:	601a      	str	r2, [r3, #0]
 800fac4:	2300      	movs	r3, #0
 800fac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	f383 8811 	msr	BASEPRI, r3
}
 800face:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fad0:	bf00      	nop
 800fad2:	3708      	adds	r7, #8
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	e000ed04 	.word	0xe000ed04

0800fadc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fadc:	b480      	push	{r7}
 800fade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fae0:	4b0b      	ldr	r3, [pc, #44]	; (800fb10 <vPortSetupTimerInterrupt+0x34>)
 800fae2:	2200      	movs	r2, #0
 800fae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fae6:	4b0b      	ldr	r3, [pc, #44]	; (800fb14 <vPortSetupTimerInterrupt+0x38>)
 800fae8:	2200      	movs	r2, #0
 800faea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800faec:	4b0a      	ldr	r3, [pc, #40]	; (800fb18 <vPortSetupTimerInterrupt+0x3c>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4a0a      	ldr	r2, [pc, #40]	; (800fb1c <vPortSetupTimerInterrupt+0x40>)
 800faf2:	fba2 2303 	umull	r2, r3, r2, r3
 800faf6:	099b      	lsrs	r3, r3, #6
 800faf8:	4a09      	ldr	r2, [pc, #36]	; (800fb20 <vPortSetupTimerInterrupt+0x44>)
 800fafa:	3b01      	subs	r3, #1
 800fafc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fafe:	4b04      	ldr	r3, [pc, #16]	; (800fb10 <vPortSetupTimerInterrupt+0x34>)
 800fb00:	2207      	movs	r2, #7
 800fb02:	601a      	str	r2, [r3, #0]
}
 800fb04:	bf00      	nop
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	e000e010 	.word	0xe000e010
 800fb14:	e000e018 	.word	0xe000e018
 800fb18:	2000008c 	.word	0x2000008c
 800fb1c:	10624dd3 	.word	0x10624dd3
 800fb20:	e000e014 	.word	0xe000e014

0800fb24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fb34 <vPortEnableVFP+0x10>
 800fb28:	6801      	ldr	r1, [r0, #0]
 800fb2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fb2e:	6001      	str	r1, [r0, #0]
 800fb30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb32:	bf00      	nop
 800fb34:	e000ed88 	.word	0xe000ed88

0800fb38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb38:	b480      	push	{r7}
 800fb3a:	b085      	sub	sp, #20
 800fb3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb3e:	f3ef 8305 	mrs	r3, IPSR
 800fb42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2b0f      	cmp	r3, #15
 800fb48:	d914      	bls.n	800fb74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb4a:	4a17      	ldr	r2, [pc, #92]	; (800fba8 <vPortValidateInterruptPriority+0x70>)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	4413      	add	r3, r2
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb54:	4b15      	ldr	r3, [pc, #84]	; (800fbac <vPortValidateInterruptPriority+0x74>)
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	7afa      	ldrb	r2, [r7, #11]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d20a      	bcs.n	800fb74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	607b      	str	r3, [r7, #4]
}
 800fb70:	bf00      	nop
 800fb72:	e7fe      	b.n	800fb72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb74:	4b0e      	ldr	r3, [pc, #56]	; (800fbb0 <vPortValidateInterruptPriority+0x78>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fb7c:	4b0d      	ldr	r3, [pc, #52]	; (800fbb4 <vPortValidateInterruptPriority+0x7c>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d90a      	bls.n	800fb9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb88:	f383 8811 	msr	BASEPRI, r3
 800fb8c:	f3bf 8f6f 	isb	sy
 800fb90:	f3bf 8f4f 	dsb	sy
 800fb94:	603b      	str	r3, [r7, #0]
}
 800fb96:	bf00      	nop
 800fb98:	e7fe      	b.n	800fb98 <vPortValidateInterruptPriority+0x60>
	}
 800fb9a:	bf00      	nop
 800fb9c:	3714      	adds	r7, #20
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr
 800fba6:	bf00      	nop
 800fba8:	e000e3f0 	.word	0xe000e3f0
 800fbac:	2000231c 	.word	0x2000231c
 800fbb0:	e000ed0c 	.word	0xe000ed0c
 800fbb4:	20002320 	.word	0x20002320

0800fbb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b08a      	sub	sp, #40	; 0x28
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fbc4:	f7fe fb54 	bl	800e270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fbc8:	4b5b      	ldr	r3, [pc, #364]	; (800fd38 <pvPortMalloc+0x180>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d101      	bne.n	800fbd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fbd0:	f000 f920 	bl	800fe14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fbd4:	4b59      	ldr	r3, [pc, #356]	; (800fd3c <pvPortMalloc+0x184>)
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4013      	ands	r3, r2
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f040 8093 	bne.w	800fd08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d01d      	beq.n	800fc24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fbe8:	2208      	movs	r2, #8
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4413      	add	r3, r2
 800fbee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f003 0307 	and.w	r3, r3, #7
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d014      	beq.n	800fc24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f023 0307 	bic.w	r3, r3, #7
 800fc00:	3308      	adds	r3, #8
 800fc02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f003 0307 	and.w	r3, r3, #7
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00a      	beq.n	800fc24 <pvPortMalloc+0x6c>
	__asm volatile
 800fc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc12:	f383 8811 	msr	BASEPRI, r3
 800fc16:	f3bf 8f6f 	isb	sy
 800fc1a:	f3bf 8f4f 	dsb	sy
 800fc1e:	617b      	str	r3, [r7, #20]
}
 800fc20:	bf00      	nop
 800fc22:	e7fe      	b.n	800fc22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d06e      	beq.n	800fd08 <pvPortMalloc+0x150>
 800fc2a:	4b45      	ldr	r3, [pc, #276]	; (800fd40 <pvPortMalloc+0x188>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d869      	bhi.n	800fd08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc34:	4b43      	ldr	r3, [pc, #268]	; (800fd44 <pvPortMalloc+0x18c>)
 800fc36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc38:	4b42      	ldr	r3, [pc, #264]	; (800fd44 <pvPortMalloc+0x18c>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc3e:	e004      	b.n	800fc4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d903      	bls.n	800fc5c <pvPortMalloc+0xa4>
 800fc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d1f1      	bne.n	800fc40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc5c:	4b36      	ldr	r3, [pc, #216]	; (800fd38 <pvPortMalloc+0x180>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d050      	beq.n	800fd08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc66:	6a3b      	ldr	r3, [r7, #32]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2208      	movs	r2, #8
 800fc6c:	4413      	add	r3, r2
 800fc6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	6a3b      	ldr	r3, [r7, #32]
 800fc76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7a:	685a      	ldr	r2, [r3, #4]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	1ad2      	subs	r2, r2, r3
 800fc80:	2308      	movs	r3, #8
 800fc82:	005b      	lsls	r3, r3, #1
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d91f      	bls.n	800fcc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	f003 0307 	and.w	r3, r3, #7
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00a      	beq.n	800fcb0 <pvPortMalloc+0xf8>
	__asm volatile
 800fc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc9e:	f383 8811 	msr	BASEPRI, r3
 800fca2:	f3bf 8f6f 	isb	sy
 800fca6:	f3bf 8f4f 	dsb	sy
 800fcaa:	613b      	str	r3, [r7, #16]
}
 800fcac:	bf00      	nop
 800fcae:	e7fe      	b.n	800fcae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	685a      	ldr	r2, [r3, #4]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	1ad2      	subs	r2, r2, r3
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fcc2:	69b8      	ldr	r0, [r7, #24]
 800fcc4:	f000 f908 	bl	800fed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fcc8:	4b1d      	ldr	r3, [pc, #116]	; (800fd40 <pvPortMalloc+0x188>)
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	1ad3      	subs	r3, r2, r3
 800fcd2:	4a1b      	ldr	r2, [pc, #108]	; (800fd40 <pvPortMalloc+0x188>)
 800fcd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fcd6:	4b1a      	ldr	r3, [pc, #104]	; (800fd40 <pvPortMalloc+0x188>)
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	4b1b      	ldr	r3, [pc, #108]	; (800fd48 <pvPortMalloc+0x190>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d203      	bcs.n	800fcea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fce2:	4b17      	ldr	r3, [pc, #92]	; (800fd40 <pvPortMalloc+0x188>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4a18      	ldr	r2, [pc, #96]	; (800fd48 <pvPortMalloc+0x190>)
 800fce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcec:	685a      	ldr	r2, [r3, #4]
 800fcee:	4b13      	ldr	r3, [pc, #76]	; (800fd3c <pvPortMalloc+0x184>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	431a      	orrs	r2, r3
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fcfe:	4b13      	ldr	r3, [pc, #76]	; (800fd4c <pvPortMalloc+0x194>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	3301      	adds	r3, #1
 800fd04:	4a11      	ldr	r2, [pc, #68]	; (800fd4c <pvPortMalloc+0x194>)
 800fd06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd08:	f7fe fac0 	bl	800e28c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	f003 0307 	and.w	r3, r3, #7
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00a      	beq.n	800fd2c <pvPortMalloc+0x174>
	__asm volatile
 800fd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1a:	f383 8811 	msr	BASEPRI, r3
 800fd1e:	f3bf 8f6f 	isb	sy
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	60fb      	str	r3, [r7, #12]
}
 800fd28:	bf00      	nop
 800fd2a:	e7fe      	b.n	800fd2a <pvPortMalloc+0x172>
	return pvReturn;
 800fd2c:	69fb      	ldr	r3, [r7, #28]
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3728      	adds	r7, #40	; 0x28
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	2001b32c 	.word	0x2001b32c
 800fd3c:	2001b340 	.word	0x2001b340
 800fd40:	2001b330 	.word	0x2001b330
 800fd44:	2001b324 	.word	0x2001b324
 800fd48:	2001b334 	.word	0x2001b334
 800fd4c:	2001b338 	.word	0x2001b338

0800fd50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d04d      	beq.n	800fdfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd62:	2308      	movs	r3, #8
 800fd64:	425b      	negs	r3, r3
 800fd66:	697a      	ldr	r2, [r7, #20]
 800fd68:	4413      	add	r3, r2
 800fd6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	685a      	ldr	r2, [r3, #4]
 800fd74:	4b24      	ldr	r3, [pc, #144]	; (800fe08 <vPortFree+0xb8>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4013      	ands	r3, r2
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d10a      	bne.n	800fd94 <vPortFree+0x44>
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	60fb      	str	r3, [r7, #12]
}
 800fd90:	bf00      	nop
 800fd92:	e7fe      	b.n	800fd92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d00a      	beq.n	800fdb2 <vPortFree+0x62>
	__asm volatile
 800fd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda0:	f383 8811 	msr	BASEPRI, r3
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	f3bf 8f4f 	dsb	sy
 800fdac:	60bb      	str	r3, [r7, #8]
}
 800fdae:	bf00      	nop
 800fdb0:	e7fe      	b.n	800fdb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	685a      	ldr	r2, [r3, #4]
 800fdb6:	4b14      	ldr	r3, [pc, #80]	; (800fe08 <vPortFree+0xb8>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4013      	ands	r3, r2
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d01e      	beq.n	800fdfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d11a      	bne.n	800fdfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	685a      	ldr	r2, [r3, #4]
 800fdcc:	4b0e      	ldr	r3, [pc, #56]	; (800fe08 <vPortFree+0xb8>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	43db      	mvns	r3, r3
 800fdd2:	401a      	ands	r2, r3
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fdd8:	f7fe fa4a 	bl	800e270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	685a      	ldr	r2, [r3, #4]
 800fde0:	4b0a      	ldr	r3, [pc, #40]	; (800fe0c <vPortFree+0xbc>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4413      	add	r3, r2
 800fde6:	4a09      	ldr	r2, [pc, #36]	; (800fe0c <vPortFree+0xbc>)
 800fde8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fdea:	6938      	ldr	r0, [r7, #16]
 800fdec:	f000 f874 	bl	800fed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fdf0:	4b07      	ldr	r3, [pc, #28]	; (800fe10 <vPortFree+0xc0>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	4a06      	ldr	r2, [pc, #24]	; (800fe10 <vPortFree+0xc0>)
 800fdf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fdfa:	f7fe fa47 	bl	800e28c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fdfe:	bf00      	nop
 800fe00:	3718      	adds	r7, #24
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	2001b340 	.word	0x2001b340
 800fe0c:	2001b330 	.word	0x2001b330
 800fe10:	2001b33c 	.word	0x2001b33c

0800fe14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe14:	b480      	push	{r7}
 800fe16:	b085      	sub	sp, #20
 800fe18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe1a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800fe1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fe20:	4b27      	ldr	r3, [pc, #156]	; (800fec0 <prvHeapInit+0xac>)
 800fe22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f003 0307 	and.w	r3, r3, #7
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d00c      	beq.n	800fe48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	3307      	adds	r3, #7
 800fe32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f023 0307 	bic.w	r3, r3, #7
 800fe3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fe3c:	68ba      	ldr	r2, [r7, #8]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	1ad3      	subs	r3, r2, r3
 800fe42:	4a1f      	ldr	r2, [pc, #124]	; (800fec0 <prvHeapInit+0xac>)
 800fe44:	4413      	add	r3, r2
 800fe46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fe4c:	4a1d      	ldr	r2, [pc, #116]	; (800fec4 <prvHeapInit+0xb0>)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fe52:	4b1c      	ldr	r3, [pc, #112]	; (800fec4 <prvHeapInit+0xb0>)
 800fe54:	2200      	movs	r2, #0
 800fe56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	68ba      	ldr	r2, [r7, #8]
 800fe5c:	4413      	add	r3, r2
 800fe5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe60:	2208      	movs	r2, #8
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	1a9b      	subs	r3, r3, r2
 800fe66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f023 0307 	bic.w	r3, r3, #7
 800fe6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	4a15      	ldr	r2, [pc, #84]	; (800fec8 <prvHeapInit+0xb4>)
 800fe74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe76:	4b14      	ldr	r3, [pc, #80]	; (800fec8 <prvHeapInit+0xb4>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe7e:	4b12      	ldr	r3, [pc, #72]	; (800fec8 <prvHeapInit+0xb4>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	2200      	movs	r2, #0
 800fe84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	1ad2      	subs	r2, r2, r3
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe94:	4b0c      	ldr	r3, [pc, #48]	; (800fec8 <prvHeapInit+0xb4>)
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	4a0a      	ldr	r2, [pc, #40]	; (800fecc <prvHeapInit+0xb8>)
 800fea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	4a09      	ldr	r2, [pc, #36]	; (800fed0 <prvHeapInit+0xbc>)
 800feaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800feac:	4b09      	ldr	r3, [pc, #36]	; (800fed4 <prvHeapInit+0xc0>)
 800feae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800feb2:	601a      	str	r2, [r3, #0]
}
 800feb4:	bf00      	nop
 800feb6:	3714      	adds	r7, #20
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr
 800fec0:	20002324 	.word	0x20002324
 800fec4:	2001b324 	.word	0x2001b324
 800fec8:	2001b32c 	.word	0x2001b32c
 800fecc:	2001b334 	.word	0x2001b334
 800fed0:	2001b330 	.word	0x2001b330
 800fed4:	2001b340 	.word	0x2001b340

0800fed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fee0:	4b28      	ldr	r3, [pc, #160]	; (800ff84 <prvInsertBlockIntoFreeList+0xac>)
 800fee2:	60fb      	str	r3, [r7, #12]
 800fee4:	e002      	b.n	800feec <prvInsertBlockIntoFreeList+0x14>
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	60fb      	str	r3, [r7, #12]
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d8f7      	bhi.n	800fee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	68ba      	ldr	r2, [r7, #8]
 800ff00:	4413      	add	r3, r2
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d108      	bne.n	800ff1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	685a      	ldr	r2, [r3, #4]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	441a      	add	r2, r3
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	68ba      	ldr	r2, [r7, #8]
 800ff24:	441a      	add	r2, r3
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d118      	bne.n	800ff60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	4b15      	ldr	r3, [pc, #84]	; (800ff88 <prvInsertBlockIntoFreeList+0xb0>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d00d      	beq.n	800ff56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	685a      	ldr	r2, [r3, #4]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	441a      	add	r2, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	601a      	str	r2, [r3, #0]
 800ff54:	e008      	b.n	800ff68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff56:	4b0c      	ldr	r3, [pc, #48]	; (800ff88 <prvInsertBlockIntoFreeList+0xb0>)
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	601a      	str	r2, [r3, #0]
 800ff5e:	e003      	b.n	800ff68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d002      	beq.n	800ff76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff76:	bf00      	nop
 800ff78:	3714      	adds	r7, #20
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	2001b324 	.word	0x2001b324
 800ff88:	2001b32c 	.word	0x2001b32c

0800ff8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ff90:	2200      	movs	r2, #0
 800ff92:	4912      	ldr	r1, [pc, #72]	; (800ffdc <MX_USB_DEVICE_Init+0x50>)
 800ff94:	4812      	ldr	r0, [pc, #72]	; (800ffe0 <MX_USB_DEVICE_Init+0x54>)
 800ff96:	f7fb fab7 	bl	800b508 <USBD_Init>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d001      	beq.n	800ffa4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ffa0:	f7f1 fea4 	bl	8001cec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ffa4:	490f      	ldr	r1, [pc, #60]	; (800ffe4 <MX_USB_DEVICE_Init+0x58>)
 800ffa6:	480e      	ldr	r0, [pc, #56]	; (800ffe0 <MX_USB_DEVICE_Init+0x54>)
 800ffa8:	f7fb fade 	bl	800b568 <USBD_RegisterClass>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ffb2:	f7f1 fe9b 	bl	8001cec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ffb6:	490c      	ldr	r1, [pc, #48]	; (800ffe8 <MX_USB_DEVICE_Init+0x5c>)
 800ffb8:	4809      	ldr	r0, [pc, #36]	; (800ffe0 <MX_USB_DEVICE_Init+0x54>)
 800ffba:	f7fb f9cf 	bl	800b35c <USBD_CDC_RegisterInterface>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d001      	beq.n	800ffc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ffc4:	f7f1 fe92 	bl	8001cec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ffc8:	4805      	ldr	r0, [pc, #20]	; (800ffe0 <MX_USB_DEVICE_Init+0x54>)
 800ffca:	f7fb fb03 	bl	800b5d4 <USBD_Start>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d001      	beq.n	800ffd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ffd4:	f7f1 fe8a 	bl	8001cec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ffd8:	bf00      	nop
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	2000013c 	.word	0x2000013c
 800ffe0:	2001b344 	.word	0x2001b344
 800ffe4:	200000a4 	.word	0x200000a4
 800ffe8:	20000128 	.word	0x20000128

0800ffec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fff0:	2200      	movs	r2, #0
 800fff2:	4905      	ldr	r1, [pc, #20]	; (8010008 <CDC_Init_FS+0x1c>)
 800fff4:	4805      	ldr	r0, [pc, #20]	; (801000c <CDC_Init_FS+0x20>)
 800fff6:	f7fb f9cb 	bl	800b390 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fffa:	4905      	ldr	r1, [pc, #20]	; (8010010 <CDC_Init_FS+0x24>)
 800fffc:	4803      	ldr	r0, [pc, #12]	; (801000c <CDC_Init_FS+0x20>)
 800fffe:	f7fb f9e9 	bl	800b3d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010002:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010004:	4618      	mov	r0, r3
 8010006:	bd80      	pop	{r7, pc}
 8010008:	2001be20 	.word	0x2001be20
 801000c:	2001b344 	.word	0x2001b344
 8010010:	2001b620 	.word	0x2001b620

08010014 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010014:	b480      	push	{r7}
 8010016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010018:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801001a:	4618      	mov	r0, r3
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	4603      	mov	r3, r0
 801002c:	6039      	str	r1, [r7, #0]
 801002e:	71fb      	strb	r3, [r7, #7]
 8010030:	4613      	mov	r3, r2
 8010032:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010034:	79fb      	ldrb	r3, [r7, #7]
 8010036:	2b23      	cmp	r3, #35	; 0x23
 8010038:	d84a      	bhi.n	80100d0 <CDC_Control_FS+0xac>
 801003a:	a201      	add	r2, pc, #4	; (adr r2, 8010040 <CDC_Control_FS+0x1c>)
 801003c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010040:	080100d1 	.word	0x080100d1
 8010044:	080100d1 	.word	0x080100d1
 8010048:	080100d1 	.word	0x080100d1
 801004c:	080100d1 	.word	0x080100d1
 8010050:	080100d1 	.word	0x080100d1
 8010054:	080100d1 	.word	0x080100d1
 8010058:	080100d1 	.word	0x080100d1
 801005c:	080100d1 	.word	0x080100d1
 8010060:	080100d1 	.word	0x080100d1
 8010064:	080100d1 	.word	0x080100d1
 8010068:	080100d1 	.word	0x080100d1
 801006c:	080100d1 	.word	0x080100d1
 8010070:	080100d1 	.word	0x080100d1
 8010074:	080100d1 	.word	0x080100d1
 8010078:	080100d1 	.word	0x080100d1
 801007c:	080100d1 	.word	0x080100d1
 8010080:	080100d1 	.word	0x080100d1
 8010084:	080100d1 	.word	0x080100d1
 8010088:	080100d1 	.word	0x080100d1
 801008c:	080100d1 	.word	0x080100d1
 8010090:	080100d1 	.word	0x080100d1
 8010094:	080100d1 	.word	0x080100d1
 8010098:	080100d1 	.word	0x080100d1
 801009c:	080100d1 	.word	0x080100d1
 80100a0:	080100d1 	.word	0x080100d1
 80100a4:	080100d1 	.word	0x080100d1
 80100a8:	080100d1 	.word	0x080100d1
 80100ac:	080100d1 	.word	0x080100d1
 80100b0:	080100d1 	.word	0x080100d1
 80100b4:	080100d1 	.word	0x080100d1
 80100b8:	080100d1 	.word	0x080100d1
 80100bc:	080100d1 	.word	0x080100d1
 80100c0:	080100d1 	.word	0x080100d1
 80100c4:	080100d1 	.word	0x080100d1
 80100c8:	080100d1 	.word	0x080100d1
 80100cc:	080100d1 	.word	0x080100d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80100d0:	bf00      	nop
  }

  return (USBD_OK);
 80100d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80100ea:	6879      	ldr	r1, [r7, #4]
 80100ec:	4805      	ldr	r0, [pc, #20]	; (8010104 <CDC_Receive_FS+0x24>)
 80100ee:	f7fb f971 	bl	800b3d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80100f2:	4804      	ldr	r0, [pc, #16]	; (8010104 <CDC_Receive_FS+0x24>)
 80100f4:	f7fb f9d2 	bl	800b49c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80100f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3708      	adds	r7, #8
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	2001b344 	.word	0x2001b344

08010108 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b084      	sub	sp, #16
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	460b      	mov	r3, r1
 8010112:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010114:	2300      	movs	r3, #0
 8010116:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010118:	4b0d      	ldr	r3, [pc, #52]	; (8010150 <CDC_Transmit_FS+0x48>)
 801011a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801011e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010126:	2b00      	cmp	r3, #0
 8010128:	d001      	beq.n	801012e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801012a:	2301      	movs	r3, #1
 801012c:	e00b      	b.n	8010146 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801012e:	887b      	ldrh	r3, [r7, #2]
 8010130:	461a      	mov	r2, r3
 8010132:	6879      	ldr	r1, [r7, #4]
 8010134:	4806      	ldr	r0, [pc, #24]	; (8010150 <CDC_Transmit_FS+0x48>)
 8010136:	f7fb f92b 	bl	800b390 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801013a:	4805      	ldr	r0, [pc, #20]	; (8010150 <CDC_Transmit_FS+0x48>)
 801013c:	f7fb f968 	bl	800b410 <USBD_CDC_TransmitPacket>
 8010140:	4603      	mov	r3, r0
 8010142:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010144:	7bfb      	ldrb	r3, [r7, #15]
}
 8010146:	4618      	mov	r0, r3
 8010148:	3710      	adds	r7, #16
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	2001b344 	.word	0x2001b344

08010154 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010154:	b480      	push	{r7}
 8010156:	b087      	sub	sp, #28
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	4613      	mov	r3, r2
 8010160:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010162:	2300      	movs	r3, #0
 8010164:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801016a:	4618      	mov	r0, r3
 801016c:	371c      	adds	r7, #28
 801016e:	46bd      	mov	sp, r7
 8010170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010174:	4770      	bx	lr
	...

08010178 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	6039      	str	r1, [r7, #0]
 8010182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	2212      	movs	r2, #18
 8010188:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801018a:	4b03      	ldr	r3, [pc, #12]	; (8010198 <USBD_FS_DeviceDescriptor+0x20>)
}
 801018c:	4618      	mov	r0, r3
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr
 8010198:	20000158 	.word	0x20000158

0801019c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801019c:	b480      	push	{r7}
 801019e:	b083      	sub	sp, #12
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	4603      	mov	r3, r0
 80101a4:	6039      	str	r1, [r7, #0]
 80101a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	2204      	movs	r2, #4
 80101ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80101ae:	4b03      	ldr	r3, [pc, #12]	; (80101bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr
 80101bc:	2000016c 	.word	0x2000016c

080101c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	4603      	mov	r3, r0
 80101c8:	6039      	str	r1, [r7, #0]
 80101ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d105      	bne.n	80101de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80101d2:	683a      	ldr	r2, [r7, #0]
 80101d4:	4907      	ldr	r1, [pc, #28]	; (80101f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80101d6:	4808      	ldr	r0, [pc, #32]	; (80101f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80101d8:	f7fc fba8 	bl	800c92c <USBD_GetString>
 80101dc:	e004      	b.n	80101e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80101de:	683a      	ldr	r2, [r7, #0]
 80101e0:	4904      	ldr	r1, [pc, #16]	; (80101f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80101e2:	4805      	ldr	r0, [pc, #20]	; (80101f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80101e4:	f7fc fba2 	bl	800c92c <USBD_GetString>
  }
  return USBD_StrDesc;
 80101e8:	4b02      	ldr	r3, [pc, #8]	; (80101f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3708      	adds	r7, #8
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	2001c620 	.word	0x2001c620
 80101f8:	08011794 	.word	0x08011794

080101fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	4603      	mov	r3, r0
 8010204:	6039      	str	r1, [r7, #0]
 8010206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	4904      	ldr	r1, [pc, #16]	; (801021c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801020c:	4804      	ldr	r0, [pc, #16]	; (8010220 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801020e:	f7fc fb8d 	bl	800c92c <USBD_GetString>
  return USBD_StrDesc;
 8010212:	4b02      	ldr	r3, [pc, #8]	; (801021c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010214:	4618      	mov	r0, r3
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	2001c620 	.word	0x2001c620
 8010220:	080117ac 	.word	0x080117ac

08010224 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	4603      	mov	r3, r0
 801022c:	6039      	str	r1, [r7, #0]
 801022e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	221a      	movs	r2, #26
 8010234:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010236:	f000 f843 	bl	80102c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801023a:	4b02      	ldr	r3, [pc, #8]	; (8010244 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801023c:	4618      	mov	r0, r3
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	20000170 	.word	0x20000170

08010248 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	4603      	mov	r3, r0
 8010250:	6039      	str	r1, [r7, #0]
 8010252:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010254:	79fb      	ldrb	r3, [r7, #7]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d105      	bne.n	8010266 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801025a:	683a      	ldr	r2, [r7, #0]
 801025c:	4907      	ldr	r1, [pc, #28]	; (801027c <USBD_FS_ConfigStrDescriptor+0x34>)
 801025e:	4808      	ldr	r0, [pc, #32]	; (8010280 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010260:	f7fc fb64 	bl	800c92c <USBD_GetString>
 8010264:	e004      	b.n	8010270 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010266:	683a      	ldr	r2, [r7, #0]
 8010268:	4904      	ldr	r1, [pc, #16]	; (801027c <USBD_FS_ConfigStrDescriptor+0x34>)
 801026a:	4805      	ldr	r0, [pc, #20]	; (8010280 <USBD_FS_ConfigStrDescriptor+0x38>)
 801026c:	f7fc fb5e 	bl	800c92c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010270:	4b02      	ldr	r3, [pc, #8]	; (801027c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010272:	4618      	mov	r0, r3
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	2001c620 	.word	0x2001c620
 8010280:	080117c0 	.word	0x080117c0

08010284 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	4603      	mov	r3, r0
 801028c:	6039      	str	r1, [r7, #0]
 801028e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010290:	79fb      	ldrb	r3, [r7, #7]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d105      	bne.n	80102a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010296:	683a      	ldr	r2, [r7, #0]
 8010298:	4907      	ldr	r1, [pc, #28]	; (80102b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801029a:	4808      	ldr	r0, [pc, #32]	; (80102bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801029c:	f7fc fb46 	bl	800c92c <USBD_GetString>
 80102a0:	e004      	b.n	80102ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80102a2:	683a      	ldr	r2, [r7, #0]
 80102a4:	4904      	ldr	r1, [pc, #16]	; (80102b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80102a6:	4805      	ldr	r0, [pc, #20]	; (80102bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80102a8:	f7fc fb40 	bl	800c92c <USBD_GetString>
  }
  return USBD_StrDesc;
 80102ac:	4b02      	ldr	r3, [pc, #8]	; (80102b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	2001c620 	.word	0x2001c620
 80102bc:	080117cc 	.word	0x080117cc

080102c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80102c6:	4b0f      	ldr	r3, [pc, #60]	; (8010304 <Get_SerialNum+0x44>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80102cc:	4b0e      	ldr	r3, [pc, #56]	; (8010308 <Get_SerialNum+0x48>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80102d2:	4b0e      	ldr	r3, [pc, #56]	; (801030c <Get_SerialNum+0x4c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	4413      	add	r3, r2
 80102de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d009      	beq.n	80102fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80102e6:	2208      	movs	r2, #8
 80102e8:	4909      	ldr	r1, [pc, #36]	; (8010310 <Get_SerialNum+0x50>)
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f000 f814 	bl	8010318 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80102f0:	2204      	movs	r2, #4
 80102f2:	4908      	ldr	r1, [pc, #32]	; (8010314 <Get_SerialNum+0x54>)
 80102f4:	68b8      	ldr	r0, [r7, #8]
 80102f6:	f000 f80f 	bl	8010318 <IntToUnicode>
  }
}
 80102fa:	bf00      	nop
 80102fc:	3710      	adds	r7, #16
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	1fff7a10 	.word	0x1fff7a10
 8010308:	1fff7a14 	.word	0x1fff7a14
 801030c:	1fff7a18 	.word	0x1fff7a18
 8010310:	20000172 	.word	0x20000172
 8010314:	20000182 	.word	0x20000182

08010318 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010318:	b480      	push	{r7}
 801031a:	b087      	sub	sp, #28
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	4613      	mov	r3, r2
 8010324:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010326:	2300      	movs	r3, #0
 8010328:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801032a:	2300      	movs	r3, #0
 801032c:	75fb      	strb	r3, [r7, #23]
 801032e:	e027      	b.n	8010380 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	0f1b      	lsrs	r3, r3, #28
 8010334:	2b09      	cmp	r3, #9
 8010336:	d80b      	bhi.n	8010350 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	0f1b      	lsrs	r3, r3, #28
 801033c:	b2da      	uxtb	r2, r3
 801033e:	7dfb      	ldrb	r3, [r7, #23]
 8010340:	005b      	lsls	r3, r3, #1
 8010342:	4619      	mov	r1, r3
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	440b      	add	r3, r1
 8010348:	3230      	adds	r2, #48	; 0x30
 801034a:	b2d2      	uxtb	r2, r2
 801034c:	701a      	strb	r2, [r3, #0]
 801034e:	e00a      	b.n	8010366 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	0f1b      	lsrs	r3, r3, #28
 8010354:	b2da      	uxtb	r2, r3
 8010356:	7dfb      	ldrb	r3, [r7, #23]
 8010358:	005b      	lsls	r3, r3, #1
 801035a:	4619      	mov	r1, r3
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	440b      	add	r3, r1
 8010360:	3237      	adds	r2, #55	; 0x37
 8010362:	b2d2      	uxtb	r2, r2
 8010364:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	011b      	lsls	r3, r3, #4
 801036a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801036c:	7dfb      	ldrb	r3, [r7, #23]
 801036e:	005b      	lsls	r3, r3, #1
 8010370:	3301      	adds	r3, #1
 8010372:	68ba      	ldr	r2, [r7, #8]
 8010374:	4413      	add	r3, r2
 8010376:	2200      	movs	r2, #0
 8010378:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801037a:	7dfb      	ldrb	r3, [r7, #23]
 801037c:	3301      	adds	r3, #1
 801037e:	75fb      	strb	r3, [r7, #23]
 8010380:	7dfa      	ldrb	r2, [r7, #23]
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	429a      	cmp	r2, r3
 8010386:	d3d3      	bcc.n	8010330 <IntToUnicode+0x18>
  }
}
 8010388:	bf00      	nop
 801038a:	bf00      	nop
 801038c:	371c      	adds	r7, #28
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr
	...

08010398 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b08a      	sub	sp, #40	; 0x28
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103a0:	f107 0314 	add.w	r3, r7, #20
 80103a4:	2200      	movs	r2, #0
 80103a6:	601a      	str	r2, [r3, #0]
 80103a8:	605a      	str	r2, [r3, #4]
 80103aa:	609a      	str	r2, [r3, #8]
 80103ac:	60da      	str	r2, [r3, #12]
 80103ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80103b8:	d13a      	bne.n	8010430 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80103ba:	2300      	movs	r3, #0
 80103bc:	613b      	str	r3, [r7, #16]
 80103be:	4b1e      	ldr	r3, [pc, #120]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 80103c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103c2:	4a1d      	ldr	r2, [pc, #116]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 80103c4:	f043 0301 	orr.w	r3, r3, #1
 80103c8:	6313      	str	r3, [r2, #48]	; 0x30
 80103ca:	4b1b      	ldr	r3, [pc, #108]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 80103cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ce:	f003 0301 	and.w	r3, r3, #1
 80103d2:	613b      	str	r3, [r7, #16]
 80103d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80103d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80103da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103dc:	2302      	movs	r3, #2
 80103de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103e0:	2300      	movs	r3, #0
 80103e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80103e4:	2303      	movs	r3, #3
 80103e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80103e8:	230a      	movs	r3, #10
 80103ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103ec:	f107 0314 	add.w	r3, r7, #20
 80103f0:	4619      	mov	r1, r3
 80103f2:	4812      	ldr	r0, [pc, #72]	; (801043c <HAL_PCD_MspInit+0xa4>)
 80103f4:	f7f3 fb14 	bl	8003a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80103f8:	4b0f      	ldr	r3, [pc, #60]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 80103fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103fc:	4a0e      	ldr	r2, [pc, #56]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 80103fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010402:	6353      	str	r3, [r2, #52]	; 0x34
 8010404:	2300      	movs	r3, #0
 8010406:	60fb      	str	r3, [r7, #12]
 8010408:	4b0b      	ldr	r3, [pc, #44]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 801040a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801040c:	4a0a      	ldr	r2, [pc, #40]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 801040e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010412:	6453      	str	r3, [r2, #68]	; 0x44
 8010414:	4b08      	ldr	r3, [pc, #32]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 8010416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801041c:	60fb      	str	r3, [r7, #12]
 801041e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010420:	2200      	movs	r2, #0
 8010422:	2105      	movs	r1, #5
 8010424:	2043      	movs	r0, #67	; 0x43
 8010426:	f7f2 fdab 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801042a:	2043      	movs	r0, #67	; 0x43
 801042c:	f7f2 fdd4 	bl	8002fd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010430:	bf00      	nop
 8010432:	3728      	adds	r7, #40	; 0x28
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	40023800 	.word	0x40023800
 801043c:	40020000 	.word	0x40020000

08010440 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010454:	4619      	mov	r1, r3
 8010456:	4610      	mov	r0, r2
 8010458:	f7fb f909 	bl	800b66e <USBD_LL_SetupStage>
}
 801045c:	bf00      	nop
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	460b      	mov	r3, r1
 801046e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010476:	78fa      	ldrb	r2, [r7, #3]
 8010478:	6879      	ldr	r1, [r7, #4]
 801047a:	4613      	mov	r3, r2
 801047c:	00db      	lsls	r3, r3, #3
 801047e:	4413      	add	r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	440b      	add	r3, r1
 8010484:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	78fb      	ldrb	r3, [r7, #3]
 801048c:	4619      	mov	r1, r3
 801048e:	f7fb f943 	bl	800b718 <USBD_LL_DataOutStage>
}
 8010492:	bf00      	nop
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b082      	sub	sp, #8
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
 80104a2:	460b      	mov	r3, r1
 80104a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80104ac:	78fa      	ldrb	r2, [r7, #3]
 80104ae:	6879      	ldr	r1, [r7, #4]
 80104b0:	4613      	mov	r3, r2
 80104b2:	00db      	lsls	r3, r3, #3
 80104b4:	4413      	add	r3, r2
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	440b      	add	r3, r1
 80104ba:	334c      	adds	r3, #76	; 0x4c
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	78fb      	ldrb	r3, [r7, #3]
 80104c0:	4619      	mov	r1, r3
 80104c2:	f7fb f9dc 	bl	800b87e <USBD_LL_DataInStage>
}
 80104c6:	bf00      	nop
 80104c8:	3708      	adds	r7, #8
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b082      	sub	sp, #8
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fb fb10 	bl	800bb02 <USBD_LL_SOF>
}
 80104e2:	bf00      	nop
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ea:	b580      	push	{r7, lr}
 80104ec:	b084      	sub	sp, #16
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80104f2:	2301      	movs	r3, #1
 80104f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	2b02      	cmp	r3, #2
 80104fc:	d001      	beq.n	8010502 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80104fe:	f7f1 fbf5 	bl	8001cec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010508:	7bfa      	ldrb	r2, [r7, #15]
 801050a:	4611      	mov	r1, r2
 801050c:	4618      	mov	r0, r3
 801050e:	f7fb faba 	bl	800ba86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010518:	4618      	mov	r0, r3
 801051a:	f7fb fa62 	bl	800b9e2 <USBD_LL_Reset>
}
 801051e:	bf00      	nop
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
	...

08010528 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010536:	4618      	mov	r0, r3
 8010538:	f7fb fab5 	bl	800baa6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	6812      	ldr	r2, [r2, #0]
 801054a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801054e:	f043 0301 	orr.w	r3, r3, #1
 8010552:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6a1b      	ldr	r3, [r3, #32]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d005      	beq.n	8010568 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801055c:	4b04      	ldr	r3, [pc, #16]	; (8010570 <HAL_PCD_SuspendCallback+0x48>)
 801055e:	691b      	ldr	r3, [r3, #16]
 8010560:	4a03      	ldr	r2, [pc, #12]	; (8010570 <HAL_PCD_SuspendCallback+0x48>)
 8010562:	f043 0306 	orr.w	r3, r3, #6
 8010566:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	e000ed00 	.word	0xe000ed00

08010574 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010582:	4618      	mov	r0, r3
 8010584:	f7fb faa5 	bl	800bad2 <USBD_LL_Resume>
}
 8010588:	bf00      	nop
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	460b      	mov	r3, r1
 801059a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105a2:	78fa      	ldrb	r2, [r7, #3]
 80105a4:	4611      	mov	r1, r2
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fb fafd 	bl	800bba6 <USBD_LL_IsoOUTIncomplete>
}
 80105ac:	bf00      	nop
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	460b      	mov	r3, r1
 80105be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105c6:	78fa      	ldrb	r2, [r7, #3]
 80105c8:	4611      	mov	r1, r2
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fb fab9 	bl	800bb42 <USBD_LL_IsoINIncomplete>
}
 80105d0:	bf00      	nop
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fb fb0f 	bl	800bc0a <USBD_LL_DevConnected>
}
 80105ec:	bf00      	nop
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010602:	4618      	mov	r0, r3
 8010604:	f7fb fb0c 	bl	800bc20 <USBD_LL_DevDisconnected>
}
 8010608:	bf00      	nop
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d13c      	bne.n	801069a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010620:	4a20      	ldr	r2, [pc, #128]	; (80106a4 <USBD_LL_Init+0x94>)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4a1e      	ldr	r2, [pc, #120]	; (80106a4 <USBD_LL_Init+0x94>)
 801062c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010630:	4b1c      	ldr	r3, [pc, #112]	; (80106a4 <USBD_LL_Init+0x94>)
 8010632:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010636:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010638:	4b1a      	ldr	r3, [pc, #104]	; (80106a4 <USBD_LL_Init+0x94>)
 801063a:	2204      	movs	r2, #4
 801063c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801063e:	4b19      	ldr	r3, [pc, #100]	; (80106a4 <USBD_LL_Init+0x94>)
 8010640:	2202      	movs	r2, #2
 8010642:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010644:	4b17      	ldr	r3, [pc, #92]	; (80106a4 <USBD_LL_Init+0x94>)
 8010646:	2200      	movs	r2, #0
 8010648:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801064a:	4b16      	ldr	r3, [pc, #88]	; (80106a4 <USBD_LL_Init+0x94>)
 801064c:	2202      	movs	r2, #2
 801064e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010650:	4b14      	ldr	r3, [pc, #80]	; (80106a4 <USBD_LL_Init+0x94>)
 8010652:	2200      	movs	r2, #0
 8010654:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010656:	4b13      	ldr	r3, [pc, #76]	; (80106a4 <USBD_LL_Init+0x94>)
 8010658:	2200      	movs	r2, #0
 801065a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801065c:	4b11      	ldr	r3, [pc, #68]	; (80106a4 <USBD_LL_Init+0x94>)
 801065e:	2200      	movs	r2, #0
 8010660:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010662:	4b10      	ldr	r3, [pc, #64]	; (80106a4 <USBD_LL_Init+0x94>)
 8010664:	2200      	movs	r2, #0
 8010666:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010668:	4b0e      	ldr	r3, [pc, #56]	; (80106a4 <USBD_LL_Init+0x94>)
 801066a:	2200      	movs	r2, #0
 801066c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801066e:	480d      	ldr	r0, [pc, #52]	; (80106a4 <USBD_LL_Init+0x94>)
 8010670:	f7f3 fce2 	bl	8004038 <HAL_PCD_Init>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801067a:	f7f1 fb37 	bl	8001cec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801067e:	2180      	movs	r1, #128	; 0x80
 8010680:	4808      	ldr	r0, [pc, #32]	; (80106a4 <USBD_LL_Init+0x94>)
 8010682:	f7f4 ff44 	bl	800550e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010686:	2240      	movs	r2, #64	; 0x40
 8010688:	2100      	movs	r1, #0
 801068a:	4806      	ldr	r0, [pc, #24]	; (80106a4 <USBD_LL_Init+0x94>)
 801068c:	f7f4 fef8 	bl	8005480 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010690:	2280      	movs	r2, #128	; 0x80
 8010692:	2101      	movs	r1, #1
 8010694:	4803      	ldr	r0, [pc, #12]	; (80106a4 <USBD_LL_Init+0x94>)
 8010696:	f7f4 fef3 	bl	8005480 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	2001c820 	.word	0x2001c820

080106a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106b0:	2300      	movs	r3, #0
 80106b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106b4:	2300      	movs	r3, #0
 80106b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106be:	4618      	mov	r0, r3
 80106c0:	f7f3 fde2 	bl	8004288 <HAL_PCD_Start>
 80106c4:	4603      	mov	r3, r0
 80106c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106c8:	7bfb      	ldrb	r3, [r7, #15]
 80106ca:	4618      	mov	r0, r3
 80106cc:	f000 f942 	bl	8010954 <USBD_Get_USB_Status>
 80106d0:	4603      	mov	r3, r0
 80106d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b084      	sub	sp, #16
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	4608      	mov	r0, r1
 80106e8:	4611      	mov	r1, r2
 80106ea:	461a      	mov	r2, r3
 80106ec:	4603      	mov	r3, r0
 80106ee:	70fb      	strb	r3, [r7, #3]
 80106f0:	460b      	mov	r3, r1
 80106f2:	70bb      	strb	r3, [r7, #2]
 80106f4:	4613      	mov	r3, r2
 80106f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106f8:	2300      	movs	r3, #0
 80106fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106fc:	2300      	movs	r3, #0
 80106fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010706:	78bb      	ldrb	r3, [r7, #2]
 8010708:	883a      	ldrh	r2, [r7, #0]
 801070a:	78f9      	ldrb	r1, [r7, #3]
 801070c:	f7f4 fab3 	bl	8004c76 <HAL_PCD_EP_Open>
 8010710:	4603      	mov	r3, r0
 8010712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010714:	7bfb      	ldrb	r3, [r7, #15]
 8010716:	4618      	mov	r0, r3
 8010718:	f000 f91c 	bl	8010954 <USBD_Get_USB_Status>
 801071c:	4603      	mov	r3, r0
 801071e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010720:	7bbb      	ldrb	r3, [r7, #14]
}
 8010722:	4618      	mov	r0, r3
 8010724:	3710      	adds	r7, #16
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}

0801072a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801072a:	b580      	push	{r7, lr}
 801072c:	b084      	sub	sp, #16
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
 8010732:	460b      	mov	r3, r1
 8010734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010736:	2300      	movs	r3, #0
 8010738:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801073a:	2300      	movs	r3, #0
 801073c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010744:	78fa      	ldrb	r2, [r7, #3]
 8010746:	4611      	mov	r1, r2
 8010748:	4618      	mov	r0, r3
 801074a:	f7f4 fafc 	bl	8004d46 <HAL_PCD_EP_Close>
 801074e:	4603      	mov	r3, r0
 8010750:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010752:	7bfb      	ldrb	r3, [r7, #15]
 8010754:	4618      	mov	r0, r3
 8010756:	f000 f8fd 	bl	8010954 <USBD_Get_USB_Status>
 801075a:	4603      	mov	r3, r0
 801075c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801075e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010760:	4618      	mov	r0, r3
 8010762:	3710      	adds	r7, #16
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	460b      	mov	r3, r1
 8010772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010774:	2300      	movs	r3, #0
 8010776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010778:	2300      	movs	r3, #0
 801077a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010782:	78fa      	ldrb	r2, [r7, #3]
 8010784:	4611      	mov	r1, r2
 8010786:	4618      	mov	r0, r3
 8010788:	f7f4 fbd4 	bl	8004f34 <HAL_PCD_EP_SetStall>
 801078c:	4603      	mov	r3, r0
 801078e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010790:	7bfb      	ldrb	r3, [r7, #15]
 8010792:	4618      	mov	r0, r3
 8010794:	f000 f8de 	bl	8010954 <USBD_Get_USB_Status>
 8010798:	4603      	mov	r3, r0
 801079a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801079c:	7bbb      	ldrb	r3, [r7, #14]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3710      	adds	r7, #16
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b084      	sub	sp, #16
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
 80107ae:	460b      	mov	r3, r1
 80107b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107b6:	2300      	movs	r3, #0
 80107b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107c0:	78fa      	ldrb	r2, [r7, #3]
 80107c2:	4611      	mov	r1, r2
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7f4 fc19 	bl	8004ffc <HAL_PCD_EP_ClrStall>
 80107ca:	4603      	mov	r3, r0
 80107cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107ce:	7bfb      	ldrb	r3, [r7, #15]
 80107d0:	4618      	mov	r0, r3
 80107d2:	f000 f8bf 	bl	8010954 <USBD_Get_USB_Status>
 80107d6:	4603      	mov	r3, r0
 80107d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107da:	7bbb      	ldrb	r3, [r7, #14]
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3710      	adds	r7, #16
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b085      	sub	sp, #20
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	460b      	mov	r3, r1
 80107ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80107f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	da0b      	bge.n	8010818 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010800:	78fb      	ldrb	r3, [r7, #3]
 8010802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010806:	68f9      	ldr	r1, [r7, #12]
 8010808:	4613      	mov	r3, r2
 801080a:	00db      	lsls	r3, r3, #3
 801080c:	4413      	add	r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	440b      	add	r3, r1
 8010812:	333e      	adds	r3, #62	; 0x3e
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	e00b      	b.n	8010830 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010818:	78fb      	ldrb	r3, [r7, #3]
 801081a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801081e:	68f9      	ldr	r1, [r7, #12]
 8010820:	4613      	mov	r3, r2
 8010822:	00db      	lsls	r3, r3, #3
 8010824:	4413      	add	r3, r2
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	440b      	add	r3, r1
 801082a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801082e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010830:	4618      	mov	r0, r3
 8010832:	3714      	adds	r7, #20
 8010834:	46bd      	mov	sp, r7
 8010836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083a:	4770      	bx	lr

0801083c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	460b      	mov	r3, r1
 8010846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010848:	2300      	movs	r3, #0
 801084a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801084c:	2300      	movs	r3, #0
 801084e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010856:	78fa      	ldrb	r2, [r7, #3]
 8010858:	4611      	mov	r1, r2
 801085a:	4618      	mov	r0, r3
 801085c:	f7f4 f9e6 	bl	8004c2c <HAL_PCD_SetAddress>
 8010860:	4603      	mov	r3, r0
 8010862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010864:	7bfb      	ldrb	r3, [r7, #15]
 8010866:	4618      	mov	r0, r3
 8010868:	f000 f874 	bl	8010954 <USBD_Get_USB_Status>
 801086c:	4603      	mov	r3, r0
 801086e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010870:	7bbb      	ldrb	r3, [r7, #14]
}
 8010872:	4618      	mov	r0, r3
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801087a:	b580      	push	{r7, lr}
 801087c:	b086      	sub	sp, #24
 801087e:	af00      	add	r7, sp, #0
 8010880:	60f8      	str	r0, [r7, #12]
 8010882:	607a      	str	r2, [r7, #4]
 8010884:	603b      	str	r3, [r7, #0]
 8010886:	460b      	mov	r3, r1
 8010888:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801088a:	2300      	movs	r3, #0
 801088c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801088e:	2300      	movs	r3, #0
 8010890:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010898:	7af9      	ldrb	r1, [r7, #11]
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	f7f4 faff 	bl	8004ea0 <HAL_PCD_EP_Transmit>
 80108a2:	4603      	mov	r3, r0
 80108a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108a6:	7dfb      	ldrb	r3, [r7, #23]
 80108a8:	4618      	mov	r0, r3
 80108aa:	f000 f853 	bl	8010954 <USBD_Get_USB_Status>
 80108ae:	4603      	mov	r3, r0
 80108b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80108b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3718      	adds	r7, #24
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b086      	sub	sp, #24
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	607a      	str	r2, [r7, #4]
 80108c6:	603b      	str	r3, [r7, #0]
 80108c8:	460b      	mov	r3, r1
 80108ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108d0:	2300      	movs	r3, #0
 80108d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80108da:	7af9      	ldrb	r1, [r7, #11]
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	f7f4 fa7b 	bl	8004dda <HAL_PCD_EP_Receive>
 80108e4:	4603      	mov	r3, r0
 80108e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108e8:	7dfb      	ldrb	r3, [r7, #23]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f000 f832 	bl	8010954 <USBD_Get_USB_Status>
 80108f0:	4603      	mov	r3, r0
 80108f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80108f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3718      	adds	r7, #24
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}

080108fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108fe:	b580      	push	{r7, lr}
 8010900:	b082      	sub	sp, #8
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
 8010906:	460b      	mov	r3, r1
 8010908:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010910:	78fa      	ldrb	r2, [r7, #3]
 8010912:	4611      	mov	r1, r2
 8010914:	4618      	mov	r0, r3
 8010916:	f7f4 faab 	bl	8004e70 <HAL_PCD_EP_GetRxCount>
 801091a:	4603      	mov	r3, r0
}
 801091c:	4618      	mov	r0, r3
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801092c:	4b03      	ldr	r3, [pc, #12]	; (801093c <USBD_static_malloc+0x18>)
}
 801092e:	4618      	mov	r0, r3
 8010930:	370c      	adds	r7, #12
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr
 801093a:	bf00      	nop
 801093c:	2001cd2c 	.word	0x2001cd2c

08010940 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010940:	b480      	push	{r7}
 8010942:	b083      	sub	sp, #12
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]

}
 8010948:	bf00      	nop
 801094a:	370c      	adds	r7, #12
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr

08010954 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010954:	b480      	push	{r7}
 8010956:	b085      	sub	sp, #20
 8010958:	af00      	add	r7, sp, #0
 801095a:	4603      	mov	r3, r0
 801095c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801095e:	2300      	movs	r3, #0
 8010960:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010962:	79fb      	ldrb	r3, [r7, #7]
 8010964:	2b03      	cmp	r3, #3
 8010966:	d817      	bhi.n	8010998 <USBD_Get_USB_Status+0x44>
 8010968:	a201      	add	r2, pc, #4	; (adr r2, 8010970 <USBD_Get_USB_Status+0x1c>)
 801096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096e:	bf00      	nop
 8010970:	08010981 	.word	0x08010981
 8010974:	08010987 	.word	0x08010987
 8010978:	0801098d 	.word	0x0801098d
 801097c:	08010993 	.word	0x08010993
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010980:	2300      	movs	r3, #0
 8010982:	73fb      	strb	r3, [r7, #15]
    break;
 8010984:	e00b      	b.n	801099e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010986:	2303      	movs	r3, #3
 8010988:	73fb      	strb	r3, [r7, #15]
    break;
 801098a:	e008      	b.n	801099e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801098c:	2301      	movs	r3, #1
 801098e:	73fb      	strb	r3, [r7, #15]
    break;
 8010990:	e005      	b.n	801099e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010992:	2303      	movs	r3, #3
 8010994:	73fb      	strb	r3, [r7, #15]
    break;
 8010996:	e002      	b.n	801099e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010998:	2303      	movs	r3, #3
 801099a:	73fb      	strb	r3, [r7, #15]
    break;
 801099c:	bf00      	nop
  }
  return usb_status;
 801099e:	7bfb      	ldrb	r3, [r7, #15]
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3714      	adds	r7, #20
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr

080109ac <__errno>:
 80109ac:	4b01      	ldr	r3, [pc, #4]	; (80109b4 <__errno+0x8>)
 80109ae:	6818      	ldr	r0, [r3, #0]
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	2000018c 	.word	0x2000018c

080109b8 <__libc_init_array>:
 80109b8:	b570      	push	{r4, r5, r6, lr}
 80109ba:	4d0d      	ldr	r5, [pc, #52]	; (80109f0 <__libc_init_array+0x38>)
 80109bc:	4c0d      	ldr	r4, [pc, #52]	; (80109f4 <__libc_init_array+0x3c>)
 80109be:	1b64      	subs	r4, r4, r5
 80109c0:	10a4      	asrs	r4, r4, #2
 80109c2:	2600      	movs	r6, #0
 80109c4:	42a6      	cmp	r6, r4
 80109c6:	d109      	bne.n	80109dc <__libc_init_array+0x24>
 80109c8:	4d0b      	ldr	r5, [pc, #44]	; (80109f8 <__libc_init_array+0x40>)
 80109ca:	4c0c      	ldr	r4, [pc, #48]	; (80109fc <__libc_init_array+0x44>)
 80109cc:	f000 fd0e 	bl	80113ec <_init>
 80109d0:	1b64      	subs	r4, r4, r5
 80109d2:	10a4      	asrs	r4, r4, #2
 80109d4:	2600      	movs	r6, #0
 80109d6:	42a6      	cmp	r6, r4
 80109d8:	d105      	bne.n	80109e6 <__libc_init_array+0x2e>
 80109da:	bd70      	pop	{r4, r5, r6, pc}
 80109dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80109e0:	4798      	blx	r3
 80109e2:	3601      	adds	r6, #1
 80109e4:	e7ee      	b.n	80109c4 <__libc_init_array+0xc>
 80109e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80109ea:	4798      	blx	r3
 80109ec:	3601      	adds	r6, #1
 80109ee:	e7f2      	b.n	80109d6 <__libc_init_array+0x1e>
 80109f0:	08013a54 	.word	0x08013a54
 80109f4:	08013a54 	.word	0x08013a54
 80109f8:	08013a54 	.word	0x08013a54
 80109fc:	08013a58 	.word	0x08013a58

08010a00 <malloc>:
 8010a00:	4b02      	ldr	r3, [pc, #8]	; (8010a0c <malloc+0xc>)
 8010a02:	4601      	mov	r1, r0
 8010a04:	6818      	ldr	r0, [r3, #0]
 8010a06:	f000 b88d 	b.w	8010b24 <_malloc_r>
 8010a0a:	bf00      	nop
 8010a0c:	2000018c 	.word	0x2000018c

08010a10 <free>:
 8010a10:	4b02      	ldr	r3, [pc, #8]	; (8010a1c <free+0xc>)
 8010a12:	4601      	mov	r1, r0
 8010a14:	6818      	ldr	r0, [r3, #0]
 8010a16:	f000 b819 	b.w	8010a4c <_free_r>
 8010a1a:	bf00      	nop
 8010a1c:	2000018c 	.word	0x2000018c

08010a20 <memcpy>:
 8010a20:	440a      	add	r2, r1
 8010a22:	4291      	cmp	r1, r2
 8010a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a28:	d100      	bne.n	8010a2c <memcpy+0xc>
 8010a2a:	4770      	bx	lr
 8010a2c:	b510      	push	{r4, lr}
 8010a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a36:	4291      	cmp	r1, r2
 8010a38:	d1f9      	bne.n	8010a2e <memcpy+0xe>
 8010a3a:	bd10      	pop	{r4, pc}

08010a3c <memset>:
 8010a3c:	4402      	add	r2, r0
 8010a3e:	4603      	mov	r3, r0
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d100      	bne.n	8010a46 <memset+0xa>
 8010a44:	4770      	bx	lr
 8010a46:	f803 1b01 	strb.w	r1, [r3], #1
 8010a4a:	e7f9      	b.n	8010a40 <memset+0x4>

08010a4c <_free_r>:
 8010a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a4e:	2900      	cmp	r1, #0
 8010a50:	d044      	beq.n	8010adc <_free_r+0x90>
 8010a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a56:	9001      	str	r0, [sp, #4]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8010a5e:	bfb8      	it	lt
 8010a60:	18e4      	addlt	r4, r4, r3
 8010a62:	f000 f975 	bl	8010d50 <__malloc_lock>
 8010a66:	4a1e      	ldr	r2, [pc, #120]	; (8010ae0 <_free_r+0x94>)
 8010a68:	9801      	ldr	r0, [sp, #4]
 8010a6a:	6813      	ldr	r3, [r2, #0]
 8010a6c:	b933      	cbnz	r3, 8010a7c <_free_r+0x30>
 8010a6e:	6063      	str	r3, [r4, #4]
 8010a70:	6014      	str	r4, [r2, #0]
 8010a72:	b003      	add	sp, #12
 8010a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a78:	f000 b970 	b.w	8010d5c <__malloc_unlock>
 8010a7c:	42a3      	cmp	r3, r4
 8010a7e:	d908      	bls.n	8010a92 <_free_r+0x46>
 8010a80:	6825      	ldr	r5, [r4, #0]
 8010a82:	1961      	adds	r1, r4, r5
 8010a84:	428b      	cmp	r3, r1
 8010a86:	bf01      	itttt	eq
 8010a88:	6819      	ldreq	r1, [r3, #0]
 8010a8a:	685b      	ldreq	r3, [r3, #4]
 8010a8c:	1949      	addeq	r1, r1, r5
 8010a8e:	6021      	streq	r1, [r4, #0]
 8010a90:	e7ed      	b.n	8010a6e <_free_r+0x22>
 8010a92:	461a      	mov	r2, r3
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	b10b      	cbz	r3, 8010a9c <_free_r+0x50>
 8010a98:	42a3      	cmp	r3, r4
 8010a9a:	d9fa      	bls.n	8010a92 <_free_r+0x46>
 8010a9c:	6811      	ldr	r1, [r2, #0]
 8010a9e:	1855      	adds	r5, r2, r1
 8010aa0:	42a5      	cmp	r5, r4
 8010aa2:	d10b      	bne.n	8010abc <_free_r+0x70>
 8010aa4:	6824      	ldr	r4, [r4, #0]
 8010aa6:	4421      	add	r1, r4
 8010aa8:	1854      	adds	r4, r2, r1
 8010aaa:	42a3      	cmp	r3, r4
 8010aac:	6011      	str	r1, [r2, #0]
 8010aae:	d1e0      	bne.n	8010a72 <_free_r+0x26>
 8010ab0:	681c      	ldr	r4, [r3, #0]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	6053      	str	r3, [r2, #4]
 8010ab6:	4421      	add	r1, r4
 8010ab8:	6011      	str	r1, [r2, #0]
 8010aba:	e7da      	b.n	8010a72 <_free_r+0x26>
 8010abc:	d902      	bls.n	8010ac4 <_free_r+0x78>
 8010abe:	230c      	movs	r3, #12
 8010ac0:	6003      	str	r3, [r0, #0]
 8010ac2:	e7d6      	b.n	8010a72 <_free_r+0x26>
 8010ac4:	6825      	ldr	r5, [r4, #0]
 8010ac6:	1961      	adds	r1, r4, r5
 8010ac8:	428b      	cmp	r3, r1
 8010aca:	bf04      	itt	eq
 8010acc:	6819      	ldreq	r1, [r3, #0]
 8010ace:	685b      	ldreq	r3, [r3, #4]
 8010ad0:	6063      	str	r3, [r4, #4]
 8010ad2:	bf04      	itt	eq
 8010ad4:	1949      	addeq	r1, r1, r5
 8010ad6:	6021      	streq	r1, [r4, #0]
 8010ad8:	6054      	str	r4, [r2, #4]
 8010ada:	e7ca      	b.n	8010a72 <_free_r+0x26>
 8010adc:	b003      	add	sp, #12
 8010ade:	bd30      	pop	{r4, r5, pc}
 8010ae0:	2001cf4c 	.word	0x2001cf4c

08010ae4 <sbrk_aligned>:
 8010ae4:	b570      	push	{r4, r5, r6, lr}
 8010ae6:	4e0e      	ldr	r6, [pc, #56]	; (8010b20 <sbrk_aligned+0x3c>)
 8010ae8:	460c      	mov	r4, r1
 8010aea:	6831      	ldr	r1, [r6, #0]
 8010aec:	4605      	mov	r5, r0
 8010aee:	b911      	cbnz	r1, 8010af6 <sbrk_aligned+0x12>
 8010af0:	f000 f8f6 	bl	8010ce0 <_sbrk_r>
 8010af4:	6030      	str	r0, [r6, #0]
 8010af6:	4621      	mov	r1, r4
 8010af8:	4628      	mov	r0, r5
 8010afa:	f000 f8f1 	bl	8010ce0 <_sbrk_r>
 8010afe:	1c43      	adds	r3, r0, #1
 8010b00:	d00a      	beq.n	8010b18 <sbrk_aligned+0x34>
 8010b02:	1cc4      	adds	r4, r0, #3
 8010b04:	f024 0403 	bic.w	r4, r4, #3
 8010b08:	42a0      	cmp	r0, r4
 8010b0a:	d007      	beq.n	8010b1c <sbrk_aligned+0x38>
 8010b0c:	1a21      	subs	r1, r4, r0
 8010b0e:	4628      	mov	r0, r5
 8010b10:	f000 f8e6 	bl	8010ce0 <_sbrk_r>
 8010b14:	3001      	adds	r0, #1
 8010b16:	d101      	bne.n	8010b1c <sbrk_aligned+0x38>
 8010b18:	f04f 34ff 	mov.w	r4, #4294967295
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	bd70      	pop	{r4, r5, r6, pc}
 8010b20:	2001cf50 	.word	0x2001cf50

08010b24 <_malloc_r>:
 8010b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b28:	1ccd      	adds	r5, r1, #3
 8010b2a:	f025 0503 	bic.w	r5, r5, #3
 8010b2e:	3508      	adds	r5, #8
 8010b30:	2d0c      	cmp	r5, #12
 8010b32:	bf38      	it	cc
 8010b34:	250c      	movcc	r5, #12
 8010b36:	2d00      	cmp	r5, #0
 8010b38:	4607      	mov	r7, r0
 8010b3a:	db01      	blt.n	8010b40 <_malloc_r+0x1c>
 8010b3c:	42a9      	cmp	r1, r5
 8010b3e:	d905      	bls.n	8010b4c <_malloc_r+0x28>
 8010b40:	230c      	movs	r3, #12
 8010b42:	603b      	str	r3, [r7, #0]
 8010b44:	2600      	movs	r6, #0
 8010b46:	4630      	mov	r0, r6
 8010b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b4c:	4e2e      	ldr	r6, [pc, #184]	; (8010c08 <_malloc_r+0xe4>)
 8010b4e:	f000 f8ff 	bl	8010d50 <__malloc_lock>
 8010b52:	6833      	ldr	r3, [r6, #0]
 8010b54:	461c      	mov	r4, r3
 8010b56:	bb34      	cbnz	r4, 8010ba6 <_malloc_r+0x82>
 8010b58:	4629      	mov	r1, r5
 8010b5a:	4638      	mov	r0, r7
 8010b5c:	f7ff ffc2 	bl	8010ae4 <sbrk_aligned>
 8010b60:	1c43      	adds	r3, r0, #1
 8010b62:	4604      	mov	r4, r0
 8010b64:	d14d      	bne.n	8010c02 <_malloc_r+0xde>
 8010b66:	6834      	ldr	r4, [r6, #0]
 8010b68:	4626      	mov	r6, r4
 8010b6a:	2e00      	cmp	r6, #0
 8010b6c:	d140      	bne.n	8010bf0 <_malloc_r+0xcc>
 8010b6e:	6823      	ldr	r3, [r4, #0]
 8010b70:	4631      	mov	r1, r6
 8010b72:	4638      	mov	r0, r7
 8010b74:	eb04 0803 	add.w	r8, r4, r3
 8010b78:	f000 f8b2 	bl	8010ce0 <_sbrk_r>
 8010b7c:	4580      	cmp	r8, r0
 8010b7e:	d13a      	bne.n	8010bf6 <_malloc_r+0xd2>
 8010b80:	6821      	ldr	r1, [r4, #0]
 8010b82:	3503      	adds	r5, #3
 8010b84:	1a6d      	subs	r5, r5, r1
 8010b86:	f025 0503 	bic.w	r5, r5, #3
 8010b8a:	3508      	adds	r5, #8
 8010b8c:	2d0c      	cmp	r5, #12
 8010b8e:	bf38      	it	cc
 8010b90:	250c      	movcc	r5, #12
 8010b92:	4629      	mov	r1, r5
 8010b94:	4638      	mov	r0, r7
 8010b96:	f7ff ffa5 	bl	8010ae4 <sbrk_aligned>
 8010b9a:	3001      	adds	r0, #1
 8010b9c:	d02b      	beq.n	8010bf6 <_malloc_r+0xd2>
 8010b9e:	6823      	ldr	r3, [r4, #0]
 8010ba0:	442b      	add	r3, r5
 8010ba2:	6023      	str	r3, [r4, #0]
 8010ba4:	e00e      	b.n	8010bc4 <_malloc_r+0xa0>
 8010ba6:	6822      	ldr	r2, [r4, #0]
 8010ba8:	1b52      	subs	r2, r2, r5
 8010baa:	d41e      	bmi.n	8010bea <_malloc_r+0xc6>
 8010bac:	2a0b      	cmp	r2, #11
 8010bae:	d916      	bls.n	8010bde <_malloc_r+0xba>
 8010bb0:	1961      	adds	r1, r4, r5
 8010bb2:	42a3      	cmp	r3, r4
 8010bb4:	6025      	str	r5, [r4, #0]
 8010bb6:	bf18      	it	ne
 8010bb8:	6059      	strne	r1, [r3, #4]
 8010bba:	6863      	ldr	r3, [r4, #4]
 8010bbc:	bf08      	it	eq
 8010bbe:	6031      	streq	r1, [r6, #0]
 8010bc0:	5162      	str	r2, [r4, r5]
 8010bc2:	604b      	str	r3, [r1, #4]
 8010bc4:	4638      	mov	r0, r7
 8010bc6:	f104 060b 	add.w	r6, r4, #11
 8010bca:	f000 f8c7 	bl	8010d5c <__malloc_unlock>
 8010bce:	f026 0607 	bic.w	r6, r6, #7
 8010bd2:	1d23      	adds	r3, r4, #4
 8010bd4:	1af2      	subs	r2, r6, r3
 8010bd6:	d0b6      	beq.n	8010b46 <_malloc_r+0x22>
 8010bd8:	1b9b      	subs	r3, r3, r6
 8010bda:	50a3      	str	r3, [r4, r2]
 8010bdc:	e7b3      	b.n	8010b46 <_malloc_r+0x22>
 8010bde:	6862      	ldr	r2, [r4, #4]
 8010be0:	42a3      	cmp	r3, r4
 8010be2:	bf0c      	ite	eq
 8010be4:	6032      	streq	r2, [r6, #0]
 8010be6:	605a      	strne	r2, [r3, #4]
 8010be8:	e7ec      	b.n	8010bc4 <_malloc_r+0xa0>
 8010bea:	4623      	mov	r3, r4
 8010bec:	6864      	ldr	r4, [r4, #4]
 8010bee:	e7b2      	b.n	8010b56 <_malloc_r+0x32>
 8010bf0:	4634      	mov	r4, r6
 8010bf2:	6876      	ldr	r6, [r6, #4]
 8010bf4:	e7b9      	b.n	8010b6a <_malloc_r+0x46>
 8010bf6:	230c      	movs	r3, #12
 8010bf8:	603b      	str	r3, [r7, #0]
 8010bfa:	4638      	mov	r0, r7
 8010bfc:	f000 f8ae 	bl	8010d5c <__malloc_unlock>
 8010c00:	e7a1      	b.n	8010b46 <_malloc_r+0x22>
 8010c02:	6025      	str	r5, [r4, #0]
 8010c04:	e7de      	b.n	8010bc4 <_malloc_r+0xa0>
 8010c06:	bf00      	nop
 8010c08:	2001cf4c 	.word	0x2001cf4c

08010c0c <cleanup_glue>:
 8010c0c:	b538      	push	{r3, r4, r5, lr}
 8010c0e:	460c      	mov	r4, r1
 8010c10:	6809      	ldr	r1, [r1, #0]
 8010c12:	4605      	mov	r5, r0
 8010c14:	b109      	cbz	r1, 8010c1a <cleanup_glue+0xe>
 8010c16:	f7ff fff9 	bl	8010c0c <cleanup_glue>
 8010c1a:	4621      	mov	r1, r4
 8010c1c:	4628      	mov	r0, r5
 8010c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c22:	f7ff bf13 	b.w	8010a4c <_free_r>
	...

08010c28 <_reclaim_reent>:
 8010c28:	4b2c      	ldr	r3, [pc, #176]	; (8010cdc <_reclaim_reent+0xb4>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4283      	cmp	r3, r0
 8010c2e:	b570      	push	{r4, r5, r6, lr}
 8010c30:	4604      	mov	r4, r0
 8010c32:	d051      	beq.n	8010cd8 <_reclaim_reent+0xb0>
 8010c34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010c36:	b143      	cbz	r3, 8010c4a <_reclaim_reent+0x22>
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d14a      	bne.n	8010cd4 <_reclaim_reent+0xac>
 8010c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c40:	6819      	ldr	r1, [r3, #0]
 8010c42:	b111      	cbz	r1, 8010c4a <_reclaim_reent+0x22>
 8010c44:	4620      	mov	r0, r4
 8010c46:	f7ff ff01 	bl	8010a4c <_free_r>
 8010c4a:	6961      	ldr	r1, [r4, #20]
 8010c4c:	b111      	cbz	r1, 8010c54 <_reclaim_reent+0x2c>
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f7ff fefc 	bl	8010a4c <_free_r>
 8010c54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010c56:	b111      	cbz	r1, 8010c5e <_reclaim_reent+0x36>
 8010c58:	4620      	mov	r0, r4
 8010c5a:	f7ff fef7 	bl	8010a4c <_free_r>
 8010c5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010c60:	b111      	cbz	r1, 8010c68 <_reclaim_reent+0x40>
 8010c62:	4620      	mov	r0, r4
 8010c64:	f7ff fef2 	bl	8010a4c <_free_r>
 8010c68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010c6a:	b111      	cbz	r1, 8010c72 <_reclaim_reent+0x4a>
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f7ff feed 	bl	8010a4c <_free_r>
 8010c72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010c74:	b111      	cbz	r1, 8010c7c <_reclaim_reent+0x54>
 8010c76:	4620      	mov	r0, r4
 8010c78:	f7ff fee8 	bl	8010a4c <_free_r>
 8010c7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010c7e:	b111      	cbz	r1, 8010c86 <_reclaim_reent+0x5e>
 8010c80:	4620      	mov	r0, r4
 8010c82:	f7ff fee3 	bl	8010a4c <_free_r>
 8010c86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010c88:	b111      	cbz	r1, 8010c90 <_reclaim_reent+0x68>
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f7ff fede 	bl	8010a4c <_free_r>
 8010c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c92:	b111      	cbz	r1, 8010c9a <_reclaim_reent+0x72>
 8010c94:	4620      	mov	r0, r4
 8010c96:	f7ff fed9 	bl	8010a4c <_free_r>
 8010c9a:	69a3      	ldr	r3, [r4, #24]
 8010c9c:	b1e3      	cbz	r3, 8010cd8 <_reclaim_reent+0xb0>
 8010c9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	4798      	blx	r3
 8010ca4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010ca6:	b1b9      	cbz	r1, 8010cd8 <_reclaim_reent+0xb0>
 8010ca8:	4620      	mov	r0, r4
 8010caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cae:	f7ff bfad 	b.w	8010c0c <cleanup_glue>
 8010cb2:	5949      	ldr	r1, [r1, r5]
 8010cb4:	b941      	cbnz	r1, 8010cc8 <_reclaim_reent+0xa0>
 8010cb6:	3504      	adds	r5, #4
 8010cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cba:	2d80      	cmp	r5, #128	; 0x80
 8010cbc:	68d9      	ldr	r1, [r3, #12]
 8010cbe:	d1f8      	bne.n	8010cb2 <_reclaim_reent+0x8a>
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f7ff fec3 	bl	8010a4c <_free_r>
 8010cc6:	e7ba      	b.n	8010c3e <_reclaim_reent+0x16>
 8010cc8:	680e      	ldr	r6, [r1, #0]
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f7ff febe 	bl	8010a4c <_free_r>
 8010cd0:	4631      	mov	r1, r6
 8010cd2:	e7ef      	b.n	8010cb4 <_reclaim_reent+0x8c>
 8010cd4:	2500      	movs	r5, #0
 8010cd6:	e7ef      	b.n	8010cb8 <_reclaim_reent+0x90>
 8010cd8:	bd70      	pop	{r4, r5, r6, pc}
 8010cda:	bf00      	nop
 8010cdc:	2000018c 	.word	0x2000018c

08010ce0 <_sbrk_r>:
 8010ce0:	b538      	push	{r3, r4, r5, lr}
 8010ce2:	4d06      	ldr	r5, [pc, #24]	; (8010cfc <_sbrk_r+0x1c>)
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	4608      	mov	r0, r1
 8010cea:	602b      	str	r3, [r5, #0]
 8010cec:	f7f1 fcf0 	bl	80026d0 <_sbrk>
 8010cf0:	1c43      	adds	r3, r0, #1
 8010cf2:	d102      	bne.n	8010cfa <_sbrk_r+0x1a>
 8010cf4:	682b      	ldr	r3, [r5, #0]
 8010cf6:	b103      	cbz	r3, 8010cfa <_sbrk_r+0x1a>
 8010cf8:	6023      	str	r3, [r4, #0]
 8010cfa:	bd38      	pop	{r3, r4, r5, pc}
 8010cfc:	2001cf54 	.word	0x2001cf54

08010d00 <siprintf>:
 8010d00:	b40e      	push	{r1, r2, r3}
 8010d02:	b500      	push	{lr}
 8010d04:	b09c      	sub	sp, #112	; 0x70
 8010d06:	ab1d      	add	r3, sp, #116	; 0x74
 8010d08:	9002      	str	r0, [sp, #8]
 8010d0a:	9006      	str	r0, [sp, #24]
 8010d0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d10:	4809      	ldr	r0, [pc, #36]	; (8010d38 <siprintf+0x38>)
 8010d12:	9107      	str	r1, [sp, #28]
 8010d14:	9104      	str	r1, [sp, #16]
 8010d16:	4909      	ldr	r1, [pc, #36]	; (8010d3c <siprintf+0x3c>)
 8010d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d1c:	9105      	str	r1, [sp, #20]
 8010d1e:	6800      	ldr	r0, [r0, #0]
 8010d20:	9301      	str	r3, [sp, #4]
 8010d22:	a902      	add	r1, sp, #8
 8010d24:	f000 f87c 	bl	8010e20 <_svfiprintf_r>
 8010d28:	9b02      	ldr	r3, [sp, #8]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	701a      	strb	r2, [r3, #0]
 8010d2e:	b01c      	add	sp, #112	; 0x70
 8010d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d34:	b003      	add	sp, #12
 8010d36:	4770      	bx	lr
 8010d38:	2000018c 	.word	0x2000018c
 8010d3c:	ffff0208 	.word	0xffff0208

08010d40 <strcpy>:
 8010d40:	4603      	mov	r3, r0
 8010d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d46:	f803 2b01 	strb.w	r2, [r3], #1
 8010d4a:	2a00      	cmp	r2, #0
 8010d4c:	d1f9      	bne.n	8010d42 <strcpy+0x2>
 8010d4e:	4770      	bx	lr

08010d50 <__malloc_lock>:
 8010d50:	4801      	ldr	r0, [pc, #4]	; (8010d58 <__malloc_lock+0x8>)
 8010d52:	f7f1 bfb8 	b.w	8002cc6 <__retarget_lock_acquire_recursive>
 8010d56:	bf00      	nop
 8010d58:	20001510 	.word	0x20001510

08010d5c <__malloc_unlock>:
 8010d5c:	4801      	ldr	r0, [pc, #4]	; (8010d64 <__malloc_unlock+0x8>)
 8010d5e:	f7f1 bfc6 	b.w	8002cee <__retarget_lock_release_recursive>
 8010d62:	bf00      	nop
 8010d64:	20001510 	.word	0x20001510

08010d68 <__ssputs_r>:
 8010d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d6c:	688e      	ldr	r6, [r1, #8]
 8010d6e:	429e      	cmp	r6, r3
 8010d70:	4682      	mov	sl, r0
 8010d72:	460c      	mov	r4, r1
 8010d74:	4690      	mov	r8, r2
 8010d76:	461f      	mov	r7, r3
 8010d78:	d838      	bhi.n	8010dec <__ssputs_r+0x84>
 8010d7a:	898a      	ldrh	r2, [r1, #12]
 8010d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d80:	d032      	beq.n	8010de8 <__ssputs_r+0x80>
 8010d82:	6825      	ldr	r5, [r4, #0]
 8010d84:	6909      	ldr	r1, [r1, #16]
 8010d86:	eba5 0901 	sub.w	r9, r5, r1
 8010d8a:	6965      	ldr	r5, [r4, #20]
 8010d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d94:	3301      	adds	r3, #1
 8010d96:	444b      	add	r3, r9
 8010d98:	106d      	asrs	r5, r5, #1
 8010d9a:	429d      	cmp	r5, r3
 8010d9c:	bf38      	it	cc
 8010d9e:	461d      	movcc	r5, r3
 8010da0:	0553      	lsls	r3, r2, #21
 8010da2:	d531      	bpl.n	8010e08 <__ssputs_r+0xa0>
 8010da4:	4629      	mov	r1, r5
 8010da6:	f7ff febd 	bl	8010b24 <_malloc_r>
 8010daa:	4606      	mov	r6, r0
 8010dac:	b950      	cbnz	r0, 8010dc4 <__ssputs_r+0x5c>
 8010dae:	230c      	movs	r3, #12
 8010db0:	f8ca 3000 	str.w	r3, [sl]
 8010db4:	89a3      	ldrh	r3, [r4, #12]
 8010db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dba:	81a3      	strh	r3, [r4, #12]
 8010dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8010dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dc4:	6921      	ldr	r1, [r4, #16]
 8010dc6:	464a      	mov	r2, r9
 8010dc8:	f7ff fe2a 	bl	8010a20 <memcpy>
 8010dcc:	89a3      	ldrh	r3, [r4, #12]
 8010dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dd6:	81a3      	strh	r3, [r4, #12]
 8010dd8:	6126      	str	r6, [r4, #16]
 8010dda:	6165      	str	r5, [r4, #20]
 8010ddc:	444e      	add	r6, r9
 8010dde:	eba5 0509 	sub.w	r5, r5, r9
 8010de2:	6026      	str	r6, [r4, #0]
 8010de4:	60a5      	str	r5, [r4, #8]
 8010de6:	463e      	mov	r6, r7
 8010de8:	42be      	cmp	r6, r7
 8010dea:	d900      	bls.n	8010dee <__ssputs_r+0x86>
 8010dec:	463e      	mov	r6, r7
 8010dee:	6820      	ldr	r0, [r4, #0]
 8010df0:	4632      	mov	r2, r6
 8010df2:	4641      	mov	r1, r8
 8010df4:	f000 faa8 	bl	8011348 <memmove>
 8010df8:	68a3      	ldr	r3, [r4, #8]
 8010dfa:	1b9b      	subs	r3, r3, r6
 8010dfc:	60a3      	str	r3, [r4, #8]
 8010dfe:	6823      	ldr	r3, [r4, #0]
 8010e00:	4433      	add	r3, r6
 8010e02:	6023      	str	r3, [r4, #0]
 8010e04:	2000      	movs	r0, #0
 8010e06:	e7db      	b.n	8010dc0 <__ssputs_r+0x58>
 8010e08:	462a      	mov	r2, r5
 8010e0a:	f000 fab7 	bl	801137c <_realloc_r>
 8010e0e:	4606      	mov	r6, r0
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d1e1      	bne.n	8010dd8 <__ssputs_r+0x70>
 8010e14:	6921      	ldr	r1, [r4, #16]
 8010e16:	4650      	mov	r0, sl
 8010e18:	f7ff fe18 	bl	8010a4c <_free_r>
 8010e1c:	e7c7      	b.n	8010dae <__ssputs_r+0x46>
	...

08010e20 <_svfiprintf_r>:
 8010e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e24:	4698      	mov	r8, r3
 8010e26:	898b      	ldrh	r3, [r1, #12]
 8010e28:	061b      	lsls	r3, r3, #24
 8010e2a:	b09d      	sub	sp, #116	; 0x74
 8010e2c:	4607      	mov	r7, r0
 8010e2e:	460d      	mov	r5, r1
 8010e30:	4614      	mov	r4, r2
 8010e32:	d50e      	bpl.n	8010e52 <_svfiprintf_r+0x32>
 8010e34:	690b      	ldr	r3, [r1, #16]
 8010e36:	b963      	cbnz	r3, 8010e52 <_svfiprintf_r+0x32>
 8010e38:	2140      	movs	r1, #64	; 0x40
 8010e3a:	f7ff fe73 	bl	8010b24 <_malloc_r>
 8010e3e:	6028      	str	r0, [r5, #0]
 8010e40:	6128      	str	r0, [r5, #16]
 8010e42:	b920      	cbnz	r0, 8010e4e <_svfiprintf_r+0x2e>
 8010e44:	230c      	movs	r3, #12
 8010e46:	603b      	str	r3, [r7, #0]
 8010e48:	f04f 30ff 	mov.w	r0, #4294967295
 8010e4c:	e0d1      	b.n	8010ff2 <_svfiprintf_r+0x1d2>
 8010e4e:	2340      	movs	r3, #64	; 0x40
 8010e50:	616b      	str	r3, [r5, #20]
 8010e52:	2300      	movs	r3, #0
 8010e54:	9309      	str	r3, [sp, #36]	; 0x24
 8010e56:	2320      	movs	r3, #32
 8010e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e60:	2330      	movs	r3, #48	; 0x30
 8010e62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801100c <_svfiprintf_r+0x1ec>
 8010e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e6a:	f04f 0901 	mov.w	r9, #1
 8010e6e:	4623      	mov	r3, r4
 8010e70:	469a      	mov	sl, r3
 8010e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e76:	b10a      	cbz	r2, 8010e7c <_svfiprintf_r+0x5c>
 8010e78:	2a25      	cmp	r2, #37	; 0x25
 8010e7a:	d1f9      	bne.n	8010e70 <_svfiprintf_r+0x50>
 8010e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8010e80:	d00b      	beq.n	8010e9a <_svfiprintf_r+0x7a>
 8010e82:	465b      	mov	r3, fp
 8010e84:	4622      	mov	r2, r4
 8010e86:	4629      	mov	r1, r5
 8010e88:	4638      	mov	r0, r7
 8010e8a:	f7ff ff6d 	bl	8010d68 <__ssputs_r>
 8010e8e:	3001      	adds	r0, #1
 8010e90:	f000 80aa 	beq.w	8010fe8 <_svfiprintf_r+0x1c8>
 8010e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e96:	445a      	add	r2, fp
 8010e98:	9209      	str	r2, [sp, #36]	; 0x24
 8010e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	f000 80a2 	beq.w	8010fe8 <_svfiprintf_r+0x1c8>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8010eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010eae:	f10a 0a01 	add.w	sl, sl, #1
 8010eb2:	9304      	str	r3, [sp, #16]
 8010eb4:	9307      	str	r3, [sp, #28]
 8010eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010eba:	931a      	str	r3, [sp, #104]	; 0x68
 8010ebc:	4654      	mov	r4, sl
 8010ebe:	2205      	movs	r2, #5
 8010ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ec4:	4851      	ldr	r0, [pc, #324]	; (801100c <_svfiprintf_r+0x1ec>)
 8010ec6:	f7ef f993 	bl	80001f0 <memchr>
 8010eca:	9a04      	ldr	r2, [sp, #16]
 8010ecc:	b9d8      	cbnz	r0, 8010f06 <_svfiprintf_r+0xe6>
 8010ece:	06d0      	lsls	r0, r2, #27
 8010ed0:	bf44      	itt	mi
 8010ed2:	2320      	movmi	r3, #32
 8010ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ed8:	0711      	lsls	r1, r2, #28
 8010eda:	bf44      	itt	mi
 8010edc:	232b      	movmi	r3, #43	; 0x2b
 8010ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ee8:	d015      	beq.n	8010f16 <_svfiprintf_r+0xf6>
 8010eea:	9a07      	ldr	r2, [sp, #28]
 8010eec:	4654      	mov	r4, sl
 8010eee:	2000      	movs	r0, #0
 8010ef0:	f04f 0c0a 	mov.w	ip, #10
 8010ef4:	4621      	mov	r1, r4
 8010ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010efa:	3b30      	subs	r3, #48	; 0x30
 8010efc:	2b09      	cmp	r3, #9
 8010efe:	d94e      	bls.n	8010f9e <_svfiprintf_r+0x17e>
 8010f00:	b1b0      	cbz	r0, 8010f30 <_svfiprintf_r+0x110>
 8010f02:	9207      	str	r2, [sp, #28]
 8010f04:	e014      	b.n	8010f30 <_svfiprintf_r+0x110>
 8010f06:	eba0 0308 	sub.w	r3, r0, r8
 8010f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	9304      	str	r3, [sp, #16]
 8010f12:	46a2      	mov	sl, r4
 8010f14:	e7d2      	b.n	8010ebc <_svfiprintf_r+0x9c>
 8010f16:	9b03      	ldr	r3, [sp, #12]
 8010f18:	1d19      	adds	r1, r3, #4
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	9103      	str	r1, [sp, #12]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	bfbb      	ittet	lt
 8010f22:	425b      	neglt	r3, r3
 8010f24:	f042 0202 	orrlt.w	r2, r2, #2
 8010f28:	9307      	strge	r3, [sp, #28]
 8010f2a:	9307      	strlt	r3, [sp, #28]
 8010f2c:	bfb8      	it	lt
 8010f2e:	9204      	strlt	r2, [sp, #16]
 8010f30:	7823      	ldrb	r3, [r4, #0]
 8010f32:	2b2e      	cmp	r3, #46	; 0x2e
 8010f34:	d10c      	bne.n	8010f50 <_svfiprintf_r+0x130>
 8010f36:	7863      	ldrb	r3, [r4, #1]
 8010f38:	2b2a      	cmp	r3, #42	; 0x2a
 8010f3a:	d135      	bne.n	8010fa8 <_svfiprintf_r+0x188>
 8010f3c:	9b03      	ldr	r3, [sp, #12]
 8010f3e:	1d1a      	adds	r2, r3, #4
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	9203      	str	r2, [sp, #12]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	bfb8      	it	lt
 8010f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f4c:	3402      	adds	r4, #2
 8010f4e:	9305      	str	r3, [sp, #20]
 8010f50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801101c <_svfiprintf_r+0x1fc>
 8010f54:	7821      	ldrb	r1, [r4, #0]
 8010f56:	2203      	movs	r2, #3
 8010f58:	4650      	mov	r0, sl
 8010f5a:	f7ef f949 	bl	80001f0 <memchr>
 8010f5e:	b140      	cbz	r0, 8010f72 <_svfiprintf_r+0x152>
 8010f60:	2340      	movs	r3, #64	; 0x40
 8010f62:	eba0 000a 	sub.w	r0, r0, sl
 8010f66:	fa03 f000 	lsl.w	r0, r3, r0
 8010f6a:	9b04      	ldr	r3, [sp, #16]
 8010f6c:	4303      	orrs	r3, r0
 8010f6e:	3401      	adds	r4, #1
 8010f70:	9304      	str	r3, [sp, #16]
 8010f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f76:	4826      	ldr	r0, [pc, #152]	; (8011010 <_svfiprintf_r+0x1f0>)
 8010f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f7c:	2206      	movs	r2, #6
 8010f7e:	f7ef f937 	bl	80001f0 <memchr>
 8010f82:	2800      	cmp	r0, #0
 8010f84:	d038      	beq.n	8010ff8 <_svfiprintf_r+0x1d8>
 8010f86:	4b23      	ldr	r3, [pc, #140]	; (8011014 <_svfiprintf_r+0x1f4>)
 8010f88:	bb1b      	cbnz	r3, 8010fd2 <_svfiprintf_r+0x1b2>
 8010f8a:	9b03      	ldr	r3, [sp, #12]
 8010f8c:	3307      	adds	r3, #7
 8010f8e:	f023 0307 	bic.w	r3, r3, #7
 8010f92:	3308      	adds	r3, #8
 8010f94:	9303      	str	r3, [sp, #12]
 8010f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f98:	4433      	add	r3, r6
 8010f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8010f9c:	e767      	b.n	8010e6e <_svfiprintf_r+0x4e>
 8010f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fa2:	460c      	mov	r4, r1
 8010fa4:	2001      	movs	r0, #1
 8010fa6:	e7a5      	b.n	8010ef4 <_svfiprintf_r+0xd4>
 8010fa8:	2300      	movs	r3, #0
 8010faa:	3401      	adds	r4, #1
 8010fac:	9305      	str	r3, [sp, #20]
 8010fae:	4619      	mov	r1, r3
 8010fb0:	f04f 0c0a 	mov.w	ip, #10
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fba:	3a30      	subs	r2, #48	; 0x30
 8010fbc:	2a09      	cmp	r2, #9
 8010fbe:	d903      	bls.n	8010fc8 <_svfiprintf_r+0x1a8>
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d0c5      	beq.n	8010f50 <_svfiprintf_r+0x130>
 8010fc4:	9105      	str	r1, [sp, #20]
 8010fc6:	e7c3      	b.n	8010f50 <_svfiprintf_r+0x130>
 8010fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fcc:	4604      	mov	r4, r0
 8010fce:	2301      	movs	r3, #1
 8010fd0:	e7f0      	b.n	8010fb4 <_svfiprintf_r+0x194>
 8010fd2:	ab03      	add	r3, sp, #12
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	462a      	mov	r2, r5
 8010fd8:	4b0f      	ldr	r3, [pc, #60]	; (8011018 <_svfiprintf_r+0x1f8>)
 8010fda:	a904      	add	r1, sp, #16
 8010fdc:	4638      	mov	r0, r7
 8010fde:	f3af 8000 	nop.w
 8010fe2:	1c42      	adds	r2, r0, #1
 8010fe4:	4606      	mov	r6, r0
 8010fe6:	d1d6      	bne.n	8010f96 <_svfiprintf_r+0x176>
 8010fe8:	89ab      	ldrh	r3, [r5, #12]
 8010fea:	065b      	lsls	r3, r3, #25
 8010fec:	f53f af2c 	bmi.w	8010e48 <_svfiprintf_r+0x28>
 8010ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ff2:	b01d      	add	sp, #116	; 0x74
 8010ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff8:	ab03      	add	r3, sp, #12
 8010ffa:	9300      	str	r3, [sp, #0]
 8010ffc:	462a      	mov	r2, r5
 8010ffe:	4b06      	ldr	r3, [pc, #24]	; (8011018 <_svfiprintf_r+0x1f8>)
 8011000:	a904      	add	r1, sp, #16
 8011002:	4638      	mov	r0, r7
 8011004:	f000 f87a 	bl	80110fc <_printf_i>
 8011008:	e7eb      	b.n	8010fe2 <_svfiprintf_r+0x1c2>
 801100a:	bf00      	nop
 801100c:	08013a18 	.word	0x08013a18
 8011010:	08013a22 	.word	0x08013a22
 8011014:	00000000 	.word	0x00000000
 8011018:	08010d69 	.word	0x08010d69
 801101c:	08013a1e 	.word	0x08013a1e

08011020 <_printf_common>:
 8011020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011024:	4616      	mov	r6, r2
 8011026:	4699      	mov	r9, r3
 8011028:	688a      	ldr	r2, [r1, #8]
 801102a:	690b      	ldr	r3, [r1, #16]
 801102c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011030:	4293      	cmp	r3, r2
 8011032:	bfb8      	it	lt
 8011034:	4613      	movlt	r3, r2
 8011036:	6033      	str	r3, [r6, #0]
 8011038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801103c:	4607      	mov	r7, r0
 801103e:	460c      	mov	r4, r1
 8011040:	b10a      	cbz	r2, 8011046 <_printf_common+0x26>
 8011042:	3301      	adds	r3, #1
 8011044:	6033      	str	r3, [r6, #0]
 8011046:	6823      	ldr	r3, [r4, #0]
 8011048:	0699      	lsls	r1, r3, #26
 801104a:	bf42      	ittt	mi
 801104c:	6833      	ldrmi	r3, [r6, #0]
 801104e:	3302      	addmi	r3, #2
 8011050:	6033      	strmi	r3, [r6, #0]
 8011052:	6825      	ldr	r5, [r4, #0]
 8011054:	f015 0506 	ands.w	r5, r5, #6
 8011058:	d106      	bne.n	8011068 <_printf_common+0x48>
 801105a:	f104 0a19 	add.w	sl, r4, #25
 801105e:	68e3      	ldr	r3, [r4, #12]
 8011060:	6832      	ldr	r2, [r6, #0]
 8011062:	1a9b      	subs	r3, r3, r2
 8011064:	42ab      	cmp	r3, r5
 8011066:	dc26      	bgt.n	80110b6 <_printf_common+0x96>
 8011068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801106c:	1e13      	subs	r3, r2, #0
 801106e:	6822      	ldr	r2, [r4, #0]
 8011070:	bf18      	it	ne
 8011072:	2301      	movne	r3, #1
 8011074:	0692      	lsls	r2, r2, #26
 8011076:	d42b      	bmi.n	80110d0 <_printf_common+0xb0>
 8011078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801107c:	4649      	mov	r1, r9
 801107e:	4638      	mov	r0, r7
 8011080:	47c0      	blx	r8
 8011082:	3001      	adds	r0, #1
 8011084:	d01e      	beq.n	80110c4 <_printf_common+0xa4>
 8011086:	6823      	ldr	r3, [r4, #0]
 8011088:	68e5      	ldr	r5, [r4, #12]
 801108a:	6832      	ldr	r2, [r6, #0]
 801108c:	f003 0306 	and.w	r3, r3, #6
 8011090:	2b04      	cmp	r3, #4
 8011092:	bf08      	it	eq
 8011094:	1aad      	subeq	r5, r5, r2
 8011096:	68a3      	ldr	r3, [r4, #8]
 8011098:	6922      	ldr	r2, [r4, #16]
 801109a:	bf0c      	ite	eq
 801109c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110a0:	2500      	movne	r5, #0
 80110a2:	4293      	cmp	r3, r2
 80110a4:	bfc4      	itt	gt
 80110a6:	1a9b      	subgt	r3, r3, r2
 80110a8:	18ed      	addgt	r5, r5, r3
 80110aa:	2600      	movs	r6, #0
 80110ac:	341a      	adds	r4, #26
 80110ae:	42b5      	cmp	r5, r6
 80110b0:	d11a      	bne.n	80110e8 <_printf_common+0xc8>
 80110b2:	2000      	movs	r0, #0
 80110b4:	e008      	b.n	80110c8 <_printf_common+0xa8>
 80110b6:	2301      	movs	r3, #1
 80110b8:	4652      	mov	r2, sl
 80110ba:	4649      	mov	r1, r9
 80110bc:	4638      	mov	r0, r7
 80110be:	47c0      	blx	r8
 80110c0:	3001      	adds	r0, #1
 80110c2:	d103      	bne.n	80110cc <_printf_common+0xac>
 80110c4:	f04f 30ff 	mov.w	r0, #4294967295
 80110c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110cc:	3501      	adds	r5, #1
 80110ce:	e7c6      	b.n	801105e <_printf_common+0x3e>
 80110d0:	18e1      	adds	r1, r4, r3
 80110d2:	1c5a      	adds	r2, r3, #1
 80110d4:	2030      	movs	r0, #48	; 0x30
 80110d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80110da:	4422      	add	r2, r4
 80110dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80110e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80110e4:	3302      	adds	r3, #2
 80110e6:	e7c7      	b.n	8011078 <_printf_common+0x58>
 80110e8:	2301      	movs	r3, #1
 80110ea:	4622      	mov	r2, r4
 80110ec:	4649      	mov	r1, r9
 80110ee:	4638      	mov	r0, r7
 80110f0:	47c0      	blx	r8
 80110f2:	3001      	adds	r0, #1
 80110f4:	d0e6      	beq.n	80110c4 <_printf_common+0xa4>
 80110f6:	3601      	adds	r6, #1
 80110f8:	e7d9      	b.n	80110ae <_printf_common+0x8e>
	...

080110fc <_printf_i>:
 80110fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011100:	7e0f      	ldrb	r7, [r1, #24]
 8011102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011104:	2f78      	cmp	r7, #120	; 0x78
 8011106:	4691      	mov	r9, r2
 8011108:	4680      	mov	r8, r0
 801110a:	460c      	mov	r4, r1
 801110c:	469a      	mov	sl, r3
 801110e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011112:	d807      	bhi.n	8011124 <_printf_i+0x28>
 8011114:	2f62      	cmp	r7, #98	; 0x62
 8011116:	d80a      	bhi.n	801112e <_printf_i+0x32>
 8011118:	2f00      	cmp	r7, #0
 801111a:	f000 80d8 	beq.w	80112ce <_printf_i+0x1d2>
 801111e:	2f58      	cmp	r7, #88	; 0x58
 8011120:	f000 80a3 	beq.w	801126a <_printf_i+0x16e>
 8011124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801112c:	e03a      	b.n	80111a4 <_printf_i+0xa8>
 801112e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011132:	2b15      	cmp	r3, #21
 8011134:	d8f6      	bhi.n	8011124 <_printf_i+0x28>
 8011136:	a101      	add	r1, pc, #4	; (adr r1, 801113c <_printf_i+0x40>)
 8011138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801113c:	08011195 	.word	0x08011195
 8011140:	080111a9 	.word	0x080111a9
 8011144:	08011125 	.word	0x08011125
 8011148:	08011125 	.word	0x08011125
 801114c:	08011125 	.word	0x08011125
 8011150:	08011125 	.word	0x08011125
 8011154:	080111a9 	.word	0x080111a9
 8011158:	08011125 	.word	0x08011125
 801115c:	08011125 	.word	0x08011125
 8011160:	08011125 	.word	0x08011125
 8011164:	08011125 	.word	0x08011125
 8011168:	080112b5 	.word	0x080112b5
 801116c:	080111d9 	.word	0x080111d9
 8011170:	08011297 	.word	0x08011297
 8011174:	08011125 	.word	0x08011125
 8011178:	08011125 	.word	0x08011125
 801117c:	080112d7 	.word	0x080112d7
 8011180:	08011125 	.word	0x08011125
 8011184:	080111d9 	.word	0x080111d9
 8011188:	08011125 	.word	0x08011125
 801118c:	08011125 	.word	0x08011125
 8011190:	0801129f 	.word	0x0801129f
 8011194:	682b      	ldr	r3, [r5, #0]
 8011196:	1d1a      	adds	r2, r3, #4
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	602a      	str	r2, [r5, #0]
 801119c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111a4:	2301      	movs	r3, #1
 80111a6:	e0a3      	b.n	80112f0 <_printf_i+0x1f4>
 80111a8:	6820      	ldr	r0, [r4, #0]
 80111aa:	6829      	ldr	r1, [r5, #0]
 80111ac:	0606      	lsls	r6, r0, #24
 80111ae:	f101 0304 	add.w	r3, r1, #4
 80111b2:	d50a      	bpl.n	80111ca <_printf_i+0xce>
 80111b4:	680e      	ldr	r6, [r1, #0]
 80111b6:	602b      	str	r3, [r5, #0]
 80111b8:	2e00      	cmp	r6, #0
 80111ba:	da03      	bge.n	80111c4 <_printf_i+0xc8>
 80111bc:	232d      	movs	r3, #45	; 0x2d
 80111be:	4276      	negs	r6, r6
 80111c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111c4:	485e      	ldr	r0, [pc, #376]	; (8011340 <_printf_i+0x244>)
 80111c6:	230a      	movs	r3, #10
 80111c8:	e019      	b.n	80111fe <_printf_i+0x102>
 80111ca:	680e      	ldr	r6, [r1, #0]
 80111cc:	602b      	str	r3, [r5, #0]
 80111ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80111d2:	bf18      	it	ne
 80111d4:	b236      	sxthne	r6, r6
 80111d6:	e7ef      	b.n	80111b8 <_printf_i+0xbc>
 80111d8:	682b      	ldr	r3, [r5, #0]
 80111da:	6820      	ldr	r0, [r4, #0]
 80111dc:	1d19      	adds	r1, r3, #4
 80111de:	6029      	str	r1, [r5, #0]
 80111e0:	0601      	lsls	r1, r0, #24
 80111e2:	d501      	bpl.n	80111e8 <_printf_i+0xec>
 80111e4:	681e      	ldr	r6, [r3, #0]
 80111e6:	e002      	b.n	80111ee <_printf_i+0xf2>
 80111e8:	0646      	lsls	r6, r0, #25
 80111ea:	d5fb      	bpl.n	80111e4 <_printf_i+0xe8>
 80111ec:	881e      	ldrh	r6, [r3, #0]
 80111ee:	4854      	ldr	r0, [pc, #336]	; (8011340 <_printf_i+0x244>)
 80111f0:	2f6f      	cmp	r7, #111	; 0x6f
 80111f2:	bf0c      	ite	eq
 80111f4:	2308      	moveq	r3, #8
 80111f6:	230a      	movne	r3, #10
 80111f8:	2100      	movs	r1, #0
 80111fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80111fe:	6865      	ldr	r5, [r4, #4]
 8011200:	60a5      	str	r5, [r4, #8]
 8011202:	2d00      	cmp	r5, #0
 8011204:	bfa2      	ittt	ge
 8011206:	6821      	ldrge	r1, [r4, #0]
 8011208:	f021 0104 	bicge.w	r1, r1, #4
 801120c:	6021      	strge	r1, [r4, #0]
 801120e:	b90e      	cbnz	r6, 8011214 <_printf_i+0x118>
 8011210:	2d00      	cmp	r5, #0
 8011212:	d04d      	beq.n	80112b0 <_printf_i+0x1b4>
 8011214:	4615      	mov	r5, r2
 8011216:	fbb6 f1f3 	udiv	r1, r6, r3
 801121a:	fb03 6711 	mls	r7, r3, r1, r6
 801121e:	5dc7      	ldrb	r7, [r0, r7]
 8011220:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011224:	4637      	mov	r7, r6
 8011226:	42bb      	cmp	r3, r7
 8011228:	460e      	mov	r6, r1
 801122a:	d9f4      	bls.n	8011216 <_printf_i+0x11a>
 801122c:	2b08      	cmp	r3, #8
 801122e:	d10b      	bne.n	8011248 <_printf_i+0x14c>
 8011230:	6823      	ldr	r3, [r4, #0]
 8011232:	07de      	lsls	r6, r3, #31
 8011234:	d508      	bpl.n	8011248 <_printf_i+0x14c>
 8011236:	6923      	ldr	r3, [r4, #16]
 8011238:	6861      	ldr	r1, [r4, #4]
 801123a:	4299      	cmp	r1, r3
 801123c:	bfde      	ittt	le
 801123e:	2330      	movle	r3, #48	; 0x30
 8011240:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011244:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011248:	1b52      	subs	r2, r2, r5
 801124a:	6122      	str	r2, [r4, #16]
 801124c:	f8cd a000 	str.w	sl, [sp]
 8011250:	464b      	mov	r3, r9
 8011252:	aa03      	add	r2, sp, #12
 8011254:	4621      	mov	r1, r4
 8011256:	4640      	mov	r0, r8
 8011258:	f7ff fee2 	bl	8011020 <_printf_common>
 801125c:	3001      	adds	r0, #1
 801125e:	d14c      	bne.n	80112fa <_printf_i+0x1fe>
 8011260:	f04f 30ff 	mov.w	r0, #4294967295
 8011264:	b004      	add	sp, #16
 8011266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801126a:	4835      	ldr	r0, [pc, #212]	; (8011340 <_printf_i+0x244>)
 801126c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011270:	6829      	ldr	r1, [r5, #0]
 8011272:	6823      	ldr	r3, [r4, #0]
 8011274:	f851 6b04 	ldr.w	r6, [r1], #4
 8011278:	6029      	str	r1, [r5, #0]
 801127a:	061d      	lsls	r5, r3, #24
 801127c:	d514      	bpl.n	80112a8 <_printf_i+0x1ac>
 801127e:	07df      	lsls	r7, r3, #31
 8011280:	bf44      	itt	mi
 8011282:	f043 0320 	orrmi.w	r3, r3, #32
 8011286:	6023      	strmi	r3, [r4, #0]
 8011288:	b91e      	cbnz	r6, 8011292 <_printf_i+0x196>
 801128a:	6823      	ldr	r3, [r4, #0]
 801128c:	f023 0320 	bic.w	r3, r3, #32
 8011290:	6023      	str	r3, [r4, #0]
 8011292:	2310      	movs	r3, #16
 8011294:	e7b0      	b.n	80111f8 <_printf_i+0xfc>
 8011296:	6823      	ldr	r3, [r4, #0]
 8011298:	f043 0320 	orr.w	r3, r3, #32
 801129c:	6023      	str	r3, [r4, #0]
 801129e:	2378      	movs	r3, #120	; 0x78
 80112a0:	4828      	ldr	r0, [pc, #160]	; (8011344 <_printf_i+0x248>)
 80112a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80112a6:	e7e3      	b.n	8011270 <_printf_i+0x174>
 80112a8:	0659      	lsls	r1, r3, #25
 80112aa:	bf48      	it	mi
 80112ac:	b2b6      	uxthmi	r6, r6
 80112ae:	e7e6      	b.n	801127e <_printf_i+0x182>
 80112b0:	4615      	mov	r5, r2
 80112b2:	e7bb      	b.n	801122c <_printf_i+0x130>
 80112b4:	682b      	ldr	r3, [r5, #0]
 80112b6:	6826      	ldr	r6, [r4, #0]
 80112b8:	6961      	ldr	r1, [r4, #20]
 80112ba:	1d18      	adds	r0, r3, #4
 80112bc:	6028      	str	r0, [r5, #0]
 80112be:	0635      	lsls	r5, r6, #24
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	d501      	bpl.n	80112c8 <_printf_i+0x1cc>
 80112c4:	6019      	str	r1, [r3, #0]
 80112c6:	e002      	b.n	80112ce <_printf_i+0x1d2>
 80112c8:	0670      	lsls	r0, r6, #25
 80112ca:	d5fb      	bpl.n	80112c4 <_printf_i+0x1c8>
 80112cc:	8019      	strh	r1, [r3, #0]
 80112ce:	2300      	movs	r3, #0
 80112d0:	6123      	str	r3, [r4, #16]
 80112d2:	4615      	mov	r5, r2
 80112d4:	e7ba      	b.n	801124c <_printf_i+0x150>
 80112d6:	682b      	ldr	r3, [r5, #0]
 80112d8:	1d1a      	adds	r2, r3, #4
 80112da:	602a      	str	r2, [r5, #0]
 80112dc:	681d      	ldr	r5, [r3, #0]
 80112de:	6862      	ldr	r2, [r4, #4]
 80112e0:	2100      	movs	r1, #0
 80112e2:	4628      	mov	r0, r5
 80112e4:	f7ee ff84 	bl	80001f0 <memchr>
 80112e8:	b108      	cbz	r0, 80112ee <_printf_i+0x1f2>
 80112ea:	1b40      	subs	r0, r0, r5
 80112ec:	6060      	str	r0, [r4, #4]
 80112ee:	6863      	ldr	r3, [r4, #4]
 80112f0:	6123      	str	r3, [r4, #16]
 80112f2:	2300      	movs	r3, #0
 80112f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112f8:	e7a8      	b.n	801124c <_printf_i+0x150>
 80112fa:	6923      	ldr	r3, [r4, #16]
 80112fc:	462a      	mov	r2, r5
 80112fe:	4649      	mov	r1, r9
 8011300:	4640      	mov	r0, r8
 8011302:	47d0      	blx	sl
 8011304:	3001      	adds	r0, #1
 8011306:	d0ab      	beq.n	8011260 <_printf_i+0x164>
 8011308:	6823      	ldr	r3, [r4, #0]
 801130a:	079b      	lsls	r3, r3, #30
 801130c:	d413      	bmi.n	8011336 <_printf_i+0x23a>
 801130e:	68e0      	ldr	r0, [r4, #12]
 8011310:	9b03      	ldr	r3, [sp, #12]
 8011312:	4298      	cmp	r0, r3
 8011314:	bfb8      	it	lt
 8011316:	4618      	movlt	r0, r3
 8011318:	e7a4      	b.n	8011264 <_printf_i+0x168>
 801131a:	2301      	movs	r3, #1
 801131c:	4632      	mov	r2, r6
 801131e:	4649      	mov	r1, r9
 8011320:	4640      	mov	r0, r8
 8011322:	47d0      	blx	sl
 8011324:	3001      	adds	r0, #1
 8011326:	d09b      	beq.n	8011260 <_printf_i+0x164>
 8011328:	3501      	adds	r5, #1
 801132a:	68e3      	ldr	r3, [r4, #12]
 801132c:	9903      	ldr	r1, [sp, #12]
 801132e:	1a5b      	subs	r3, r3, r1
 8011330:	42ab      	cmp	r3, r5
 8011332:	dcf2      	bgt.n	801131a <_printf_i+0x21e>
 8011334:	e7eb      	b.n	801130e <_printf_i+0x212>
 8011336:	2500      	movs	r5, #0
 8011338:	f104 0619 	add.w	r6, r4, #25
 801133c:	e7f5      	b.n	801132a <_printf_i+0x22e>
 801133e:	bf00      	nop
 8011340:	08013a29 	.word	0x08013a29
 8011344:	08013a3a 	.word	0x08013a3a

08011348 <memmove>:
 8011348:	4288      	cmp	r0, r1
 801134a:	b510      	push	{r4, lr}
 801134c:	eb01 0402 	add.w	r4, r1, r2
 8011350:	d902      	bls.n	8011358 <memmove+0x10>
 8011352:	4284      	cmp	r4, r0
 8011354:	4623      	mov	r3, r4
 8011356:	d807      	bhi.n	8011368 <memmove+0x20>
 8011358:	1e43      	subs	r3, r0, #1
 801135a:	42a1      	cmp	r1, r4
 801135c:	d008      	beq.n	8011370 <memmove+0x28>
 801135e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011366:	e7f8      	b.n	801135a <memmove+0x12>
 8011368:	4402      	add	r2, r0
 801136a:	4601      	mov	r1, r0
 801136c:	428a      	cmp	r2, r1
 801136e:	d100      	bne.n	8011372 <memmove+0x2a>
 8011370:	bd10      	pop	{r4, pc}
 8011372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801137a:	e7f7      	b.n	801136c <memmove+0x24>

0801137c <_realloc_r>:
 801137c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011380:	4680      	mov	r8, r0
 8011382:	4614      	mov	r4, r2
 8011384:	460e      	mov	r6, r1
 8011386:	b921      	cbnz	r1, 8011392 <_realloc_r+0x16>
 8011388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801138c:	4611      	mov	r1, r2
 801138e:	f7ff bbc9 	b.w	8010b24 <_malloc_r>
 8011392:	b92a      	cbnz	r2, 80113a0 <_realloc_r+0x24>
 8011394:	f7ff fb5a 	bl	8010a4c <_free_r>
 8011398:	4625      	mov	r5, r4
 801139a:	4628      	mov	r0, r5
 801139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113a0:	f000 f81b 	bl	80113da <_malloc_usable_size_r>
 80113a4:	4284      	cmp	r4, r0
 80113a6:	4607      	mov	r7, r0
 80113a8:	d802      	bhi.n	80113b0 <_realloc_r+0x34>
 80113aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80113ae:	d812      	bhi.n	80113d6 <_realloc_r+0x5a>
 80113b0:	4621      	mov	r1, r4
 80113b2:	4640      	mov	r0, r8
 80113b4:	f7ff fbb6 	bl	8010b24 <_malloc_r>
 80113b8:	4605      	mov	r5, r0
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d0ed      	beq.n	801139a <_realloc_r+0x1e>
 80113be:	42bc      	cmp	r4, r7
 80113c0:	4622      	mov	r2, r4
 80113c2:	4631      	mov	r1, r6
 80113c4:	bf28      	it	cs
 80113c6:	463a      	movcs	r2, r7
 80113c8:	f7ff fb2a 	bl	8010a20 <memcpy>
 80113cc:	4631      	mov	r1, r6
 80113ce:	4640      	mov	r0, r8
 80113d0:	f7ff fb3c 	bl	8010a4c <_free_r>
 80113d4:	e7e1      	b.n	801139a <_realloc_r+0x1e>
 80113d6:	4635      	mov	r5, r6
 80113d8:	e7df      	b.n	801139a <_realloc_r+0x1e>

080113da <_malloc_usable_size_r>:
 80113da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113de:	1f18      	subs	r0, r3, #4
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	bfbc      	itt	lt
 80113e4:	580b      	ldrlt	r3, [r1, r0]
 80113e6:	18c0      	addlt	r0, r0, r3
 80113e8:	4770      	bx	lr
	...

080113ec <_init>:
 80113ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ee:	bf00      	nop
 80113f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113f2:	bc08      	pop	{r3}
 80113f4:	469e      	mov	lr, r3
 80113f6:	4770      	bx	lr

080113f8 <_fini>:
 80113f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113fa:	bf00      	nop
 80113fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113fe:	bc08      	pop	{r3}
 8011400:	469e      	mov	lr, r3
 8011402:	4770      	bx	lr
